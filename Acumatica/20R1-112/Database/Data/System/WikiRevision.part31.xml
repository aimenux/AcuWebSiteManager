<?xml version="1.0" encoding="utf-8"?>
<data>
	<table name="WikiRevision">
		<col name="CompanyID" type="Int" default="Zero" />
		<col name="PageID" type="UniqueIdentifier" />
		<col name="Language" type="VarChar(50)" />
		<col name="PageRevisionID" type="Int" />
		<col name="Content" type="NVarChar(MAX)" />
		<col name="ContentHtml" type="NVarChar(MAX)" nullable="true" />
		<col name="PlainText" type="NVarChar(MAX)" />
		<col name="ApprovalByID" type="UniqueIdentifier" nullable="true" />
		<col name="ApprovalDateTime" type="DateTime" nullable="true" />
		<col name="CreatedByID" type="UniqueIdentifier" />
		<col name="CreatedDateTime" type="DateTime" />
		<col name="CompanyMask" type="VarBinary(32)" default="CompanyMaskReadOnly" />
		<col name="UID" type="UniqueIdentifier" />
		<col name="RecordSourceID" type="SmallInt" nullable="true" />
	</table>
	<rows>
		<row PageID="5dacbf34-ac82-41b4-b498-839c173f587c" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="fcfcba6d-0eed-cef6-59f7-d8aa3832d000" RecordSourceID="22377">
			<column name="Content"><![CDATA[
By using Acumatica Mobile                         Framework, you can access and use Acumatica ERP through a mobile device wherever you are. {br}

 Acumatica Mobile                         Framework is a modern web development platform that provides the following key features:[anchor|#ul_zd5_3zt_rr]
*'''Real-time access:''' The Acumatica mobile app connects to your Acumatica ERP instance in real time, so users always have access to up-to-date information.
*'''Developer-selected functionality:''' Any Acumatica ERP functionality can be exposed on a mobile device.
*'''Mobile device integration:''' The Acumatica mobile app uses the unique capabilities of the applicable mobile device, such as the camera or fingerprint reader.
*'''Ease of customization:''' The framework gives you the ability to configure the mobile app by using metadata without coding. You do not need to learn how to program for iOS or Android.
{br}

The framework contains the following components (see the diagram below):[anchor|#ul_u5t_ydp_wr]
*The native mobile client application that Acumatica provides for iOS devices
*The native mobile client application that Acumatica provides for Android devices
*The Mobile API, which is a part of the Acumatica Framework API
[anchor|#fig_onc_q3r_xr][anchor|#_a5714599-f38e-4621-8369-8be9716767c6][image:StudioDeveloperGuide/Images/Mobile_architecture_new.png|popup| Acumatica Mobile                         Framework architecture|450px]{br}

An Acumatica mobile client application uses the Mobile API to access the data of the forms that are mapped for mobile apps in the Acumatica ERP instance. The metadata of the mobile site map is used to configure the user interface of the mobile client application. You can expose any form of Acumatica ERP on your mobile device if the mobile site map includes the metadata for the form.((({S:Warn}The Acumatica mobile app is like a browser for an instance of Acumatica ERP in that it does not have built-in ERP-related functionality. The Acumatica mobile app instead uses the configuration and data in Acumatica ERP and displays it to the user.
))){br}

This part of the guide describes how to configure the Acumatica ERP mobile site map. The part is intended for application developers who are learning how to customize Acumatica ERP or other Acumatica Framework–based applications.]]></column>
			<column name="PlainText"><![CDATA[Working with Mobile Framework By using  Acumatica Mobile                         Framework, you can access and use  Acumatica ERP through a mobile device wherever you are.   Acumatica Mobile                         Framework is a modern web development platform that provides the following key features: Real-time access:  The  Acumatica mobile app connects to your  Acumatica ERP instance in real time, so users always have access to up-to-date information. Developer-selected functionality:  Any  Acumatica ERP functionality can be exposed on a mobile device. Mobile device integration:  The  Acumatica mobile app uses the unique capabilities of the applicable mobile device, such as the             camera or fingerprint reader. Ease of customization:  The framework gives you the ability to configure the             mobile app by using metadata without coding. You do not need to learn how to program for             iOS or Android. The framework contains the following components (see the diagram below): The native mobile client application that  Acumatica provides for iOS devices The native mobile client application that  Acumatica provides for Android devices The Mobile API, which is a part of the  Acumatica Framework API  Acumatica Mobile                         Framework architecture An  Acumatica         mobile client application uses the Mobile API to access the data of the forms that are         mapped for mobile apps in the  Acumatica ERP instance. The metadata of the mobile site map is used to configure the user interface of         the mobile client application. You can expose any form of  Acumatica ERP on your mobile device if the mobile site map includes the metadata for the form. The              Acumatica mobile app is like a browser for an instance of  Acumatica ERP in that it does not have built-in ERP-related functionality. The  Acumatica mobile app instead uses the configuration and data in  Acumatica ERP and displays it to the user. This part of the guide describes how to configure the  Acumatica ERP mobile site map. The part is intended for application developers who are learning how to         customize  Acumatica ERP or other  Acumatica Framework–based applications. ]]></column>
		</row>
		<row PageID="7950e5dd-d413-48e4-896c-34e2095a3317" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="86b19e51-0429-2f04-bf8d-00b3d4aac532" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The Acumatica mobile app provides access to the functionality of Acumatica ERP, such as approving documents, managing time cards, processing sales orders, and handling expense receipts and claims.{br}

The Acumatica mobile app is an out-of-the-box solution that gives users the ability to access Acumatica ERP from mobile devices to enter and manage their work documents. This application provides the user interface to access the data and functionality of Acumatica ERP by using the predefined original mobile site map.{br}

To start using Acumatica ERP on a mobile device, perform the following actions:[anchor|#ol_ald_1s4_wr]
#Download the free Acumatica mobile app from Apple Store or Google Play, and install it on the mobile device.
#Launch the app.
#Enter the URL and optional name of your Acumatica site (for example, ''https://your.acumatica.site.com''), and tap '''Next'''.
#:((({S:Warn}If both the Acumatica ERP server and mobile device use the same local wireless network, you can specify the URL in one of the following ways:[anchor|#ul_wmm_qd1_55]
*''https://&lt;Computer Name&gt;/&lt;Website Name&gt;'', such as ''http://MyComputer/MySite''
* ''https://&lt;IP Address&gt;/&lt;Website Name&gt;'', such as ''http://111.222.3.44/MySite''
)))
#Enter the credentials of your user account.
#Tap '''Sign In''' to enter the site.
{br}

The app connects to the Acumatica ERP server, and the server authorizes the user and returns the metadata to render the main menu and screens of the mobile site.]]></column>
			<column name="PlainText"><![CDATA[To Start  Acumatica ERP     on a Mobile Device The  Acumatica mobile app provides access to the functionality of  Acumatica ERP, such as approving documents, managing time cards, processing sales orders, and       handling        expense receipts and claims. The  Acumatica mobile app is an out-of-the-box solution that gives users the ability to access  Acumatica ERP from mobile devices to enter and manage their work documents. This application provides the       user interface to access the data and functionality of  Acumatica ERP by using the predefined original mobile site map. To start using  Acumatica ERP on    a mobile device, perform the following actions: Download the free  Acumatica      mobile app from Apple Store or Google Play, and install it on the mobile device. Launch the app. Enter the URL and optional name of your  Acumatica site (for example,  https://your.acumatica.site.com ), and tap              Next . If both the  Acumatica ERP server and mobile device use the same local wireless network, you can specify the URL             in one of the following ways: https://<Computer Name>/<Website Name> , such as                    http://MyComputer/MySite https://<IP Address>/<Website Name> , such as                    http://111.222.3.44/MySite Enter the credentials of your user account. Tap  Sign In  to enter the site. The app connects to the  Acumatica ERP server, and the server authorizes the user and returns the metadata to render the main menu       and screens of the mobile site. ]]></column>
		</row>
		<row PageID="4ba4fe00-068a-41e7-8c6f-58fa0b004377" Language="en-US" PageRevisionID="1" Content="&#xA;The mobile site map is the metadata you use to configure the mobile app. The mobile site map contains descriptions of the elements that should appear on the mobile device, including the main menu, the screens, and the fields and actions on the screens.{br}&#xA;&#xA;The mobile site map is defined with Mobile Site Map Definition Language (MSDL) code. You access and edit the mobile site map definition by using the Customization Project Editor. " PlainText="Mobile Site Map The mobile site map is the metadata you use to configure the mobile app. The mobile site map       contains descriptions of the elements that should appear on the mobile device, including the       main menu, the screens, and the fields and actions on the screens. The mobile site map is defined with Mobile Site Map Definition Language (MSDL) code. You       access and edit the mobile site map definition by using the Customization Project Editor.  " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="3f3278c1-f673-d771-659f-b1cd4d9fbec6" RecordSourceID="22377" />
		<row PageID="73302a69-1b21-4ef2-9646-6e90e3295e32" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="cac82de1-2398-a930-cd20-2a3cec7fc8bd" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can update the main menu of the customized Acumatica mobile app by using the Customization Project Editor.{br}{TOC}
==To Update the Main Menu of a Mobile App==[anchor|#_50913d45-47fb-4a41-9ea6-1d9358d03395]
#Open the Customization Project Editor.
#On the page toolbar of the Mobile Application page, click '''Customize''' > '''Update Main Menu'''.
#:The Update: MENU page opens. The ''Update MENU'' appears in the list of modified screens on the Mobile Application page of the Customization Project Editor.
#In the '''Result Preview''' area of the Update: MENU page, explore the original code of the main menu.
#In the '''Commands''' area of the Update: MENU page, implement your code using Mobile Site Map Definition Language (MSDL). For details, see [HelpRoot_Dev_Mobile\mobile_msdl_mainmenu|Main Menu].
#Save your changes.
#:Your commands are applied to the menu. If any errors have occurred, you can see them in the '''Errors''' area of the form. If your changes have been applied successfully, you can see the updated site map of the main menu in the '''Result Preview''' area of the form. 
#Publish your customization project.

==Related Articles==
*[HelpRoot_Dev_Mobile\mobile_msdl_mainmenu|Main Menu]]]></column>
			<column name="PlainText"><![CDATA[To Update the Main Menu of a Mobile App You can update the main menu of the customized  Acumatica mobile app by using the Customization Project Editor. To Update the Main Menu of a Mobile App Open the Customization Project Editor. On the page toolbar of the Mobile Application page, click  Customize Update Main Menu . The                              Update :                              MENU  page opens. The  Update MENU  appears in                             the list of modified                              screens                              on the Mobile Application page of the Customization Project                         Editor. In the  Result Preview  area of the Update: MENU page, explore the original                         code of the main menu. In the  Commands  area of the Update: MENU page, implement your code using                         Mobile Site Map Definition Language (MSDL). For details, see  Main Menu. Save your changes. Your commands are applied to the menu. If any errors have occurred, you can                             see them in the  Errors  area of the form. If your                             changes have been applied successfully, you can see the updated site map                             of the main menu in the  Result Preview  area of                             the form.  Publish your customization project. ]]></column>
		</row>
		<row PageID="bdd71d43-d1c5-4b66-b6ad-7c0df0f224b0" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="bf34c8fa-aa31-dfa1-a0f8-21cc8347ad72" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can update an existing screen of a customized mobile app by using the Customization Project Editor.{br}{TOC}
==To Update a Screen of a Mobile App==[anchor|#_7023e022-b075-450b-b8c6-02d7477f141e]
#Open the Customization Project Editor.
#On the page toolbar of the Mobile Application page, click '''Customize''' > '''Update Existing Screen'''.
#In the '''Update Existing Screen''' dialog box, which appears, specify the ID of the screen you want to update, and click OK.
#:The Update: &lt;screen&#95;name&gt; page opens. The new ''update'' screen with its details appears in the list of modified screens on the '''Mobile Application''' page of the Customization Project Editor.
#Explore the original code of the screen in the '''Result Preview''' area of the Update page.
#Implement your code using Mobile Site Map Definition Language (MSDL) in the '''Commands''' area of the Update page. For details, see [HelpRoot_Dev_Mobile\mobile_msdl_screens|Screens].
#Save your changes.
#:Your commands are applied to the site map. If any errors have occurred, you can see them in the '''Errors''' area of the page. If your changes have been applied successfully, you can see the updated site map of the main menu in the '''Result Preview''' area of the form.
#Publish the customization project.
]]></column>
			<column name="PlainText"><![CDATA[To Update a Screen of a Mobile App You can update                      an                     existing                      scre en                      of a customized mobile app by using the Customization Project                     Editor. To Update a Screen of a Mobile App Open the Customization Project Editor. On the page toolbar of the Mobile Application page, click  Customize Update Existing Screen . In the  Update Existing Screen  dialog box, which appears, specify the ID                         of the screen you want to update, and click OK. The Update:                             <screen_name> page opens. The new  update  screen with its                             details appears in the list of modified screens on the  Mobile                                 Application  page of the Customization Project                             Editor. Explore the original code of the screen in the  Result Preview  area of the                         Update page. Implement your code using Mobile Site Map Definition Language (MSDL) in the                              Commands  area of the Update page. For details,                         see  Screens. Save your changes. Your commands are applied to the site map. If any errors have occurred, you                             can see them in the  Errors  area of the page. If                             your changes have been applied successfully, you can see the updated                             site map of the main menu in the  Result Preview                              area of the form. Publish the customization project. ]]></column>
		</row>
		<row PageID="3484dde7-2027-4e12-a60e-223e5a518421" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="25ffa5ad-9a5e-8457-c550-d3a7143e402c" RecordSourceID="22377">
			<column name="Content"><![CDATA[
Suppose that you need to add to the mobile app a screen that corresponds to an Acumatica ERP form. The form ID is ''XXX''. The desired mobile screen has to contain the <tt>Date</tt> and <tt>Description</tt> fields and the <tt>Insert</tt> and <tt>Delete</tt> actions of the original ''XXX'' form of Acumatica ERP.[anchor|#_a6768ca9-9356-46ad-af1c-c3a5b9df4654][anchor|#_229bf89f-7244-4427-99b0-ba155cd7c778][image:Shared/Images/Mobile_MSDL_ConfiguringScreen.png|popup|Use of MSDL to configure a screen in the mobile app|450px]{br}

The diagram shows how the Acumatica Mobile                         Framework uses the MSDL code to configure the ''XXX'' screen in the mobile app. (See [HelpRoot_Dev_Mobile\MOBILE_MSDL|Configuring the Mobile Site Map] for details.) You declare the desired screen, containers, fields, actions and other objects by using Mobile Site Map Definition Language (MSDL) in the Customization Project Editor. The objects you want to be displayed on the mobile app screen must be present on the original Acumatica ERPform (See [HelpRoot_Dev_Mobile\MOBILE_BasicInfo|Getting the WSDL Schema]). {br}

After you publish your customization project, the screen you have defined using MSDL appears in the mobile app.
==To Add a Screen to the Mobile Site Map==[anchor|#_814b4116-3a63-4ba8-bcaf-9899e9e3e0c2]
#Get the WSDL schema for the original ''XXX'' screen of Acumatica ERP, as described in [HelpRoot_Dev_Mobile\MOBILE_BasicInfo|Getting the WSDL Schema].
#Open the Customization Project Editor.
#On the page toolbar of the Mobile Application page, click '''Customize''' > '''Add New Screen'''.
#In the '''Add New Screen''' dialog box, which opens, enter the form ID of the Acumatica ERP form (and thus of the corresponding screen in the mobile app) that you want to add to the mobile app, and click '''OK'''.
#:The Add: &lt;screen&#95;name&gt; page opens. The row with the ''add'' screen and its details appears in the list of modified screens on the Mobile Application page of the Customization Project Editor.
#Notice that the initial code of the screen includes only one {{add}} instruction. {{{{add screen &lt;screen_ID&gt; {
# you can add commands here
# ObjectAttribute = Value
}
}}}} (See [HelpRoot_Dev_Mobile\MOBILE_Ref_MSDL_Instr_ADD|add] for details about the instruction.)
#Implement the code of the new screen in the '''Commands''' area of the Add page. For details, see [HelpRoot_Dev_Mobile\mobile_msdl_screens|Screens].
#:While implementing the code, use the WSDL schema to understand which actions and fields are available for the form you are adding. For details, see [HelpRoot_Dev_Mobile\MOBILE_BasicInfo|Getting the WSDL Schema].
#Save your changes.
#:Your commands are applied to the site map. If any errors have occurred, you can see them in the '''Errors''' area of the page. If your changes have been applied successfully, you can see the updated site map of the main menu in the '''Result Preview''' area of the form.
#On the Update: MENU page, add a shortcut for the new screen in the main menu, as illustrated in the following code.{{{{add item &lt;screen_ID&gt; {
    visible = True    
    displayName = "screen_title"  }
}}}}
#Save your changes, and publish the project.
]]></column>
			<column name="PlainText"><![CDATA[To Add a Screen to the Mobile Site Map Suppose that you need to add to the mobile app a screen that corresponds to an  Acumatica ERP form. The form ID is  XXX . The desired mobile screen has to contain the                      Date  and  Description  fields and the                      Insert  and  Delete  actions of the original                      XXX  form of  Acumatica ERP. Use of MSDL to configure a screen in the mobile app The diagram shows how the  Acumatica Mobile                         Framework uses the MSDL code to configure the  XXX  screen in the mobile app. (See                      Configuring the Mobile Site Map for details.) You                 declare the desired screen, containers, fields, actions and other objects by using                 Mobile Site Map Definition Language (MSDL) in the Customization Project Editor. The                 objects you want to be displayed on the mobile app screen must be present on the                 original  Acumatica ERPform                  (See  Getting the WSDL Schema).                  After you publish your customization project, the screen you have                 defined using MSDL appears in the mobile app. To Add a Screen to the Mobile Site Map Get the WSDL schema for the original  XXX  screen of Acumatica ERP, as                         described in  Getting the WSDL Schema. Open the Customization Project Editor. On the page toolbar of the Mobile Application page, click  Customize Add New Screen . In the  Add New Screen  dialog box, which opens, enter                         the form ID of the  Acumatica ERP form (and thus of the corresponding screen in the mobile app) that you                         want to add to the mobile app, and click  OK . The                             Add: <screen_name> page opens. The row with the  add  screen and                             its details appears in the list of modified screens on the Mobile                             Application page of the Customization Project Editor. Notice that the initial code of the screen includes only one                              add  instruction.                          add screen <screen_ID> {
# you can add commands here
# ObjectAttribute = Value
}                          (See  add                         for details about the instruction.) Implement the code of the new screen in the  Commands                          area of the Add page. For details, see  Screens. While                             implementing the code, use the WSDL schema to understand which actions                             and fields are available for the form you are adding. For details, see                                  Getting the WSDL Schema. Save your changes. Your commands are applied to the site map. If any                             errors have occurred, you can see them in the                                  Errors  area of the page. If your changes have                             been applied successfully, you can see the updated site map of the main                             menu in the  Result Preview  area of the                         form. On the Update: MENU                         page ,                          add a shortcut for the new screen in the main menu, as illustrated in the                         following                         code. add item <screen_ID> {
    visible = True    
    displayName = "screen_title"  } Save your changes, and publish the project. ]]></column>
		</row>
		<row PageID="bd3bc934-6e91-48bd-8201-318fdeb36053" Language="en-US" PageRevisionID="1" Content="&#xA; You can remove a screen of a customized mobile app by using the Customization Project Editor.{br}{TOC}&#xA;==To Remove a Screen of a Mobile App==[anchor|#_9b817044-5bce-4d54-9aaa-cdfa956da9a1]&#xA;#Open the Customization Project Editor.&#xA;#On the page toolbar of the Mobile Application page, click '''Customize''' &gt; '''Remove Existing Screen'''.&#xA;#In the '''Remove Existing Screen''' dialog box, which appears, specify the ID of the screen you want to remove, and click '''OK'''.&#xA;#:The selected screen is removed.The ''Remove &amp;lt;screen&amp;#95;name&amp;gt;''row appears in the list of modified screens on the Mobile Application page of the Customization Project Editor.&#xA;" PlainText="To Remove a Screen of a Mobile App  You can remove a screen of a customized mobile app by using the Customization Project                     Editor. To Remove a Screen of a Mobile App Open the Customization Project Editor. On the page toolbar of the Mobile Application page, click  Customize Remove Existing Screen . In the  Remove Existing Screen  dialog box, which appears, specify the ID                         of the screen you want to remove, and click  OK . The                             selected screen is removed. The                                  Remove                                 &lt;screen_name&gt; row                              appears in the list of modified screens on the Mobile Application page                             of the Customization Project Editor. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="f2eadf95-d182-d714-0304-c1e14a9790dc" RecordSourceID="22377" />
		<row PageID="4e35fe59-24fb-4ec7-940a-ee624278fa97" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="29d4a70a-6879-7c23-142e-c8b2e3baa931" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can convert an XML mobile site map to MSDL format any time you want by using the <tt>ac.exe</tt> command-line utility, as described in this topic.
==To Convert an XML Site Map to MSDL Format==
Run the <tt>ac.exe</tt> command-line utility, which is located in the <tt>Data</tt> folder of your Acumatica ERP installation folder, with the <tt>MOBILESITEMAP</tt> command, the <tt>convert</tt> argument, and the following parameters:[anchor|#_c10c10fd-9242-4edc-9dc1-f089c5e0d678]
*The path to the folder with the mobile site map, which is the <tt>\App&#95;Data\Mobile</tt> folder of the Acumatica ERP application instance. The file containing the mobile site map must be named {{mobilesitemap.xml}}.
*The path to the MSD script file to which you want to save the generated site map .
The following code shows an example of the command line. (The line breaks are only for display purposes.){{{{ac.exe MOBILESITEMAP c s
  "D:\ProgramFiles\AcumaticaERP\CustomizedAcumaticaDB\App_Data\Mobile" 
  "D:\ProgramFiles\AcumaticaERP\CustomizedAcumaticaDB\App_Data\Mobile\sitemap.msd"
}}}}((({S:Warn}You can use the short name of the <tt>convert</tt> argument, which is <tt>c</tt>.
)))
==Related Articles==
*[HelpRoot_Dev_Mobile\MOBILE_acExe_reference|ac.exe MOBILEITEMAP Reference]]]></column>
			<column name="PlainText"><![CDATA[To Convert an XML Mobile Site Map to MSDL Format You can convert an XML mobile site map to MSDL format any time you want by using the                      ac.exe  command-line utility, as described in this                 topic. To Convert an XML Site Map to MSDL Format Run the  ac.exe  command-line utility, which is located in the                      Data  folder of your  Acumatica ERP installation folder, with the  MOBILESITEMAP  command, the                      convert  argument, and the following parameters: The path to the folder with the mobile site map, which is the                              \App_Data\Mobile  folder of the  Acumatica ERP application instance. The file containing the mobile site map must be                         named  mobilesitemap.xml . The path to the MSD script file to which you want to save the generated site                         map . The following code shows an example of the command line. (The line breaks are                 only for display                     purposes.) ac.exe MOBILESITEMAP c s
  "D:\ProgramFiles\AcumaticaERP\CustomizedAcumaticaDB\App_Data\Mobile" 
  "D:\ProgramFiles\AcumaticaERP\CustomizedAcumaticaDB\App_Data\Mobile\sitemap.msd" You                     can use the short name of the  convert  argument, which is                          c . ]]></column>
		</row>
		<row PageID="04bf48fc-fc06-42cb-aca0-b964a4652ee8" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="2611141c-cd68-3646-9a26-20f2d022f902" RecordSourceID="22377">
			<column name="Content"><![CDATA[
When you are customizing the mobile site map in the Customization Project Editor, you might need to go back to the out-of-the-box site map and base functionality. You can return to the original site map to one tenant or to all tenants without removing the other changes you have made in the customization project.
==To Reverse Changes Made to the Mobile Site Map==[anchor|#_1d5950a5-6222-4f8e-9906-01a09f8f175d]
#Open the Customization Project Editor.
#Click '''Mobile Application''' in the navigation pane to open the Mobile Application page.
#If you want to reverse the changes to the current tenant only, on the page toolbar, click '''Clear Current Tenant'''. If you want to reverse the changes to all tenants, on the page toolbar, click '''Clear All Tenants'''.

The mobile app customization is unpublished from the selected tenants.{br}

To return to your changes, publish your customization project, as described in [HelpRoot_Dev_Customization\CG_GL_Projects_Publishing_Current|To Publish the Current Project].]]></column>
			<column name="PlainText"><![CDATA[To Reverse Changes Made to the Mobile Site Map When you are customizing the mobile site map in the Customization Project Editor, you might need                     to go back to the out-of-the-box site map and base functionality. You can return                     to the original site map to one tenant or to all tenants without removing the                     other changes you have made in the customization project. To Reverse Changes Made to the Mobile Site Map Open the Customization Project Editor. Click  Mobile Application  in the navigation pane to                         open the Mobile Application page. If you want to reverse the changes to the current tenant only, on the page                         toolbar, click  Clear Current Tenant . If you want to                         reverse the changes to all tenants, on the page toolbar, click                              Clear All Tenants . The mobile app customization is unpublished from the selected tenants. To return to your changes, publish your customization project, as described in                          To Publish the Current Project. ]]></column>
		</row>
		<row PageID="64460c7d-b5da-4872-958f-9c1f290168bc" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="6dd57015-6854-6be6-d144-d969a115a63c" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You develop the code that creates or changes the mobile site map in the memory of the Acumatica ERP server by using Mobile Site Map Definition Language (MSDL).((({S:Warn}Before Acumatica Framework 2020 R1, XML was used to configure the mobile site map. 
)))
==MSDL Overview==
MSDL provides the capability to configure the user interface of the Acumatica mobile app. It transcends XML in terms of its flexibility of usage for the mobile site map, because you can apply MSDL code multiple times for any Acumatica ERP form, whether it is a custom, customized, or original form. In contrast with XML, Acumatica Mobile                         Framework can successively apply MSDL code for a form from multiple customizations without problems or restrictions.{br}

If you already have an XML site map in MSDL format, you should convert the XML mobile site map to MSDL format, as described in [HelpRoot_Dev_Mobile\MOBILE__how_Convert_XML_Mobile_Site_Map_to_MSDL|To Convert an XML Mobile Site Map to MSDL Format].{br}

See the [HelpRoot_Dev_Mobile\MOBILE_Ref_MSDL|MSDL] section of [HelpRoot_Dev_Mobile\MOBILE_Reference|Mobile Site Map Reference] for details about MSDL syntax, object types, and instructions.
==User Interface Structure==
You can modify the elements of the Acumatica mobile app user interface by using MSDL. The user interface of the Acumatica mobile app has the following structure:[anchor|#_7179a79a-70ce-4d21-9f10-8f77243b0c63]
*[HelpRoot_Dev_Mobile\MOBILE_MainMenu|Main Menu]. You can customize the main menu by using instuctions that work with the <tt>Folder</tt> and <tt>Screen</tt> objects.
*[HelpRoot_Dev_Mobile\MOBILE_SidebarMenu|Sidebar Menu]. You can customize the sidebar menu by including there links to favorite folders and screens.
*[HelpRoot_Dev_Mobile\MOBILE_Screens|Screens]. You can customize the mobile app screens by using instructions that work with <tt>Container</tt>, <tt>Field</tt>, <tt>Action</tt>, and other objects.

==How to Use the MSDL Examples of This Section==
In this section, each example contains a list of MSDL instructions that modify the mobile site map for your instance of Acumatica ERP.{br}

To use the examples from this section, you should first add a new page (or modify an existing one) in the Customization Project Editor, and then insert the code in the '''Commands''' area. You can see your changes after you publish the customization project. For details, see the topics of the [HelpRoot_Dev_Mobile\MOBILE_MobileSiteMap|Mobile Site Map] chapter.]]></column>
			<column name="PlainText"><![CDATA[Configuring the Mobile Site Map You develop the code that creates or changes the mobile site map in the memory of the  Acumatica ERP server by using Mobile Site Map Definition Language (MSDL). Before  Acumatica Framework 2020 R1, XML was used to configure the mobile site map.  MSDL Overview MSDL provides the capability to configure the user interface of the  Acumatica mobile app. It transcends XML in terms of its flexibility of usage for the mobile site         map, because you can apply MSDL code multiple times for any  Acumatica ERP form, whether it is a custom, customized, or original form. In contrast with XML,  Acumatica Mobile                         Framework can successively apply MSDL code for a form from multiple customizations without problems         or restrictions. If you already have an XML site map in MSDL format, you should convert the XML mobile site         map to MSDL format, as described in  To Convert an XML Mobile Site Map to MSDL Format. See the  MSDL section of  Mobile Site Map Reference         for details about MSDL syntax, object types, and instructions. User Interface Structure You can modify the elements of the  Acumatica mobile app user interface by using MSDL. The user interface of the  Acumatica mobile app has the following structure: Main Menu. You can customize             the main menu by using instuctions that work with the  Folder  and                Screen  objects. Sidebar Menu. You can             customize the sidebar menu by including there links to favorite folders and             screens. Screens. You can             customize the mobile app screens by using instructions that work with                Container ,  Field ,  Action , and             other objects. How to Use the MSDL Examples of This Section In this section, each example contains a list of MSDL instructions that modify the mobile         site map for your instance of  Acumatica ERP. To use the examples from this section, you should first add a new page (or modify an         existing one) in the Customization Project Editor, and then insert the code in the            Commands  area. You can see your changes after you publish the         customization project. For details, see the topics of the  Mobile Site Map chapter. ]]></column>
		</row>
		<row PageID="c7e5bca7-aebc-4c40-878e-94535fa91c9e" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="d3a50d38-97b7-4de0-478a-e48ec4265d3c" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The main menu of the Acumatica mobile application consists of links to folders and screens. A user taps a folder link to open the folder, which may include links to screens and other folders. Thus, the folders have a hierarchy, as the folders in file systems do. The main menu provides access to screens in the mobile site map, and folders are used to organize the screens.((({S:Warn}The access rights for screens in the mobile application are the same as the access rights for screens in Acumatica ERP.
)))
The start page of the main menu contains all child tags of the [HelpRoot_Dev_Mobile\MOBILE_Ref_MSDL_Instr_sitemap|sitemap] instruction.{br}

In this topic, you can read about and perform several simple examples that demonstrate how to build the main menu of the mobile application.{br}{TOC}
==Exploring the Original Main Menu Code==
You can view the original code of the Acumatica mobile app main menu by doing the following:[anchor|#_40d23355-5713-4975-813d-0946aecdd4b3]
#Open the Customization Project Editor.
#On the page toolbar of the Mobile Application page, click '''Customize''' > '''Update Main Menu'''.
#:The Update: MENU page opens. The ''Update MENU'' screen appears in the list of modified screens on the Mobile Application page of the Customization Project Editor.
#Explore the original code of the main menu in the '''Result Preview''' area of the Update: MENU page.

The app&rsquo;s main menu is shown in the following screenshot.[anchor|#_37992ec2-7c64-4765-9693-cb988ec8ccd0][anchor|#_c9e31f7a-8c11-469b-b610-3a26161132cf][image:StudioDeveloperGuide/Images/MOBILE_MainMenu.png|popup|The main menu of the mobile app|130px]
==Example: Adding a Screen to a Folder==
Adding a screen to a folder consists of two actions:[anchor|#_2a193f1c-8ebe-40ba-8907-1ebebde60a0e]
*Adding a new screen to the mobile site map, as described in [HelpRoot_Dev_Mobile\MOBILE_MobileSiteMap_AddingMSDL|To Add a Screen to the Mobile Site Map]
*Adding the new screen shortcut to the main menu.

In this example, you will add a shortcut of the Controller screen to the Dashboards folder of the main menu. Copy the code below to the Commands area of the Update: MENU page in the Customization Project Editor.{{{{update sitemap {  
  add folder "Folder_0" {
    displayName = "Dashboards"    
    icon = "system://Folder"    
    add item "DB000015" {      
      displayName = "Controller"      
      icon = "system://Graph1"    
    }  
  }
}
}}}}{br}

The screenshots below show the results of this code on the mobile device.[anchor|#fig_kff_vjf_ts][anchor|#_0501c430-5dcc-4225-979f-9416f762a222][image:StudioDeveloperGuide/Images/MOBILE_Menu.png|popup|The main menu, the contents of the folder, and the screen|400px]((({S:Warn}A folder must include at least one screen.
)))
A folder can be of one of the following types, which determine how the folder contents are displayed:[anchor|#ul_vv2_1dz_vq]
*<tt>ListFolder</tt> (default): With a folder of this type, folders and screens are represented as tiles with icons (see the first screenshot in the example in this section, shown above). You need to tap an icon to open a folder or screen.
*<tt>HubFolder</tt>: In a folder of this type (see an example in the right screenshot at the end of the next section), the content of a screen is displayed like a tab item on a form. You swipe left and right to navigate through the contents of the folder.
((({S:Warn}Nested folders of the <tt>HubFolder</tt> type are not supported. That is, you may not add a folder of the <tt>HubFolder</tt> type within another folder of <tt>HubFolder</tt> type.
)))
==Example: Configuring Screens for Forms with Tabs==
Some Acumatica ERP forms display lists on multiple tabs (as the following screenshot shows).[anchor|#_3ddfa83b-9162-43d3-8cce-af1f18dcdb56][anchor|#_99698d45-69c3-4f48-9a58-e950757bd35c][image:StudioDeveloperGuide/Images/MOBILE_MENU_Tabs_look.png|popup| Acumatica ERP form with multiple tabs|350px]
In the mobile app, such a form is represented as multiple subscreens, with each subscreen corresponding to a single tab. However, you have to configure only one screen because the mobile API server automatically performs the screen expansion into multiple screens.((({S:Warn}In the following example and the screenshot shown above, we will use the Invoiced Items generic inquiry (GI000008). If you don&rsquo;t have this generic inquiry in your instance of Acumatica ERP you can create this generic inquiry. For details, see [HelpRoot_Dev_Customization\CG_GL_Items_GI_Ading|To Add a Generic Inquiry to a Project].
))){br}

To configure a screen for a form, do the following:[anchor|#_15481b5b-73dc-4c76-878c-505fea29a6c3]
#Add the GI000008 screen to the mobile site map, as described in [HelpRoot_Dev_Mobile\MOBILE_MobileSiteMap_AddingMSDL|To Add a Screen to the Mobile Site Map].
#Copy the following code to the '''Commands''' area of the Add: GI000008 page, and save your changes.{{{{add screen GI000008 {
  add container "Result" {
    add field "AccountName"
    add field "CustomerClassID"
    add field "InvoiceDate"
  }
}
}}}}
#Update the main menu of the mobile app, as described in [HelpRoot_Dev_Mobile\mobile_updatemainmenu|To Update the Main Menu of a Mobile App], with the following code.{{{{add folder "Invoiced_Items" {
  type = HubFolder
  displayName = "Invoiced Items"
  icon = "system://Pen"
  add item "GI000008" {
    displayName = "Invoiced Items"
  }
}
}}}}
#Publish your customization project, and open the mobile app.

The following screenshots show the result of this code on a mobile device. The first screenshot shows the changes to the main menu. The second screenshot shows the added screen with tabs.[anchor|#_8f8e2d39-e4c0-42f9-a24f-552c63f368b7][anchor|#_193dec5e-da53-4f78-b727-9880dab9bbb6][image:StudioDeveloperGuide/Images/Mobile_Tabs_Invoiced.png|popup|The multi-tab screen represented as a folder|250px]]]></column>
			<column name="PlainText"><![CDATA[Main Menu The main menu of the  Acumatica mobile application consists of links to folders and screens. A user taps a folder                 link to open the folder, which may include links to screens and other folders. Thus,                 the folders have a hierarchy, as the folders in file systems do. The main menu                 provides access to screens in the mobile site map, and folders are used to organize                 the screens. The access rights for screens in the mobile application are the same as the access rights                 for screens in  Acumatica ERP. The start page of the main menu contains all child tags of the  sitemap instruction. In this topic, you can read about and perform several simple examples that demonstrate how to     build the main menu of the mobile application. Exploring the Original Main Menu Code You can view the original code of the Acumatica mobile app main menu by doing the                 following: Open the Customization Project Editor. On the page toolbar of the Mobile Application page, click  Customize Update Main Menu . The Update: MENU page opens. The  Update MENU  screen                         appears in the list of modified screens on the Mobile Application page of                         the Customization Project Editor. Explore the original code of the main menu in the  Result                         Preview  area of the Update: MENU page. The app's main menu is shown in the following screenshot. The main menu of the mobile app Example: Adding a Screen to a Folder Adding a screen to a folder consists of two actions: Adding a new screen to the mobile site                     map ,                      as described in  To Add a Screen to the Mobile Site MapAdding the new screen shortcut to the main menu. In this example, you will add a shortcut of the Controller screen to the Dashboards folder of                 the main menu. Copy the code below to the Commands area of the Update: MENU page in                 the Customization Project                 Editor. update sitemap {  
  add folder "Folder_0" {
    displayName = "Dashboards"    
    icon = "system://Folder"    
    add item "DB000015" {      
      displayName = "Controller"      
      icon = "system://Graph1"    
    }  
  }
} The screenshots below show the results of this code on the mobile device. The main menu, the contents of the folder, and the screen A folder must include at least one screen. A folder can be of one of the following types, which determine how the folder contents are     displayed: ListFolder  (default): With a folder of this type, folders and screens are                     represented as tiles with icons (see the first screenshot in the example in this                     section, shown above). You need to tap an icon to open a folder or screen. HubFolder : In a folder of this type (see an example in the right                     screenshot at the end of the next section),                      the                     content of a screen is displayed like a tab item on a form.                      You swipe left and right to navigate through the contents of the folder. Nested folders of the  HubFolder  type are not supported. That is, you may     not add a folder of the  HubFolder  type within another folder of       HubFolder  type. Example: Configuring Screens for Forms with Tabs Some                      Acumatica ERP forms display lists on multiple tabs (as the following screenshot                 shows) .  Acumatica ERP form with multiple tabs In the mobile app, such a form is represented as multiple subscreens, with each                 subscreen corresponding to a single tab. However, you have to configure only one                 screen because the mobile API server automatically performs the screen expansion                 into multiple screens. In the following example and the screenshot shown above,                     we will use the Invoiced Items generic inquiry (GI000008). If you don't have                     this generic inquiry in your instance of  Acumatica ERP you can create this generic inquiry. For details, see  To Add a Generic Inquiry to a Project. To configure a screen for a form, do the following: Add the GI000008 screen to the mobile site map, as described in  To Add a Screen to the Mobile Site Map. Copy the following code to the                          Commands                      area of the Add: GI000008                     page ,                      and save your                     changes. add screen GI000008 {
  add container "Result" {
    add field "AccountName"
    add field "CustomerClassID"
    add field "InvoiceDate"
  }
} Update the main menu of the mobile                     app ,                      as described in  To Update the Main Menu of a Mobile App,                      with the following                     code. add folder "Invoiced_Items" {
  type = HubFolder
  displayName = "Invoiced Items"
  icon = "system://Pen"
  add item "GI000008" {
    displayName = "Invoiced Items"
  }
} Publish your customization project, and open the mobile app. The following screenshots show the result of this code on a mobile device. The first                 screenshot shows the changes to the main menu. The second screenshot shows the added                 screen with tabs. The multi-tab screen represented as a folder ]]></column>
		</row>
		<row PageID="c4a7a3b3-a0ea-4143-8a88-6ca8d9dcdc2d" Language="en-US" PageRevisionID="1" Content="&#xA;The mobile app has a ''sidebar menu'', which is the shortcut menu for favorite folders and screens. You can add links to folders and screens to the sidebar menu. {br}{TOC}&#xA;==Example: Adding a Screen to the Sidebar Menu==&#xA;To add a folder or screen to the sidebar menu, you need to set the &lt;tt&gt;IsDefaultFavorite&lt;/tt&gt; attribute of the folder or screen to ''true''.{br}&#xA;&#xA;To do this, copy the code below to the Commands area of the Update: MENU page, and publish the customization project.{{{{update sitemap {&#xA;  ...&#xA;  update item &quot;PM301000&quot; {    &#xA;    isDefaultFavorite = True  &#xA;  }&#xA;  ...&#xA;}&#xA;}}}}&#xA;The resulting sidebar menu of the mobile app will include a link for quick access to the Projects (PM301000) screen.[anchor|#fig_jrf_tzn_yr][anchor|#_084a83d7-df73-4933-b4f5-1f18df1b4326][image:StudioDeveloperGuide/Images/MOBILE_sidebar.png|popup|A link to the screen in the sidebar menu|130px]" PlainText="Sidebar Menu The mobile app has a  sidebar menu , which is the shortcut menu for favorite folders and         screens. You can add links to folders and screens to the sidebar menu.  Example: Adding a Screen to the Sidebar Menu To add a folder or screen to the sidebar menu, you need to set the       IsDefaultFavorite  attribute of the folder or screen to  true . To do this, copy the code below to the Commands area of the Update: MENU page, and publish the         customization project. update sitemap {&#xA;  ...&#xA;  update item &quot;PM301000&quot; {    &#xA;    isDefaultFavorite = True  &#xA;  }&#xA;  ...&#xA;} The resulting sidebar menu of the mobile app will include a link for quick access to the         Projects (PM301000) screen. A link to the screen in the sidebar menu " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="c026e4da-27ad-f795-729c-5165d416cb93" RecordSourceID="22377" />
		<row PageID="29a4f3b6-e302-47d7-b714-5fa58c321b05" Language="en-US" PageRevisionID="1" PlainText="Screens This section consists of the following topics, which describe different tasks of configuring     screens in the mobile application: Getting the WSDL SchemaConfiguring ListsConfiguring Editing ScreensMapping ReportsMapping DashboardsGrouping Fields on a ScreenConfiguring AttachmentsConfiguring SelectorsConfiguring Related ContainersAdding Attributes of Entities to Mobile ScreensRedirecting the User to Different Screens and ContainersDisplaying Any Field as a Text FieldCreating the User Signature" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="3ba4a2a3-6de3-8500-4496-40761615ebe9" RecordSourceID="22377">
			<column name="Content"><![CDATA[
This section consists of the following topics, which describe different tasks of configuring screens in the mobile application:[anchor|#_8db6eee5-d467-4113-986c-a4c726f09265]
*[HelpRoot_Dev_Mobile\MOBILE_BasicInfo|Getting the WSDL Schema]
*[HelpRoot_Dev_Mobile\mobile_msdl_screen_list|Configuring Lists]
*[HelpRoot_Dev_Mobile\mobile_msdl_screen_editfr|Configuring Editing Screens]
*[HelpRoot_Dev_Mobile\mobile_msdl_screen_re|Mapping Reports]
*[HelpRoot_Dev_Mobile\mobile_msdl_screen_dashboards|Mapping Dashboards]
*[HelpRoot_Dev_Mobile\mobile_msdl_screen_groupf|Grouping Fields on a Screen]
*[HelpRoot_Dev_Mobile\mobile_msdl_screen_|Configuring Attachments]
*[HelpRoot_Dev_Mobile\mobile_msdl_screen_selectors|Configuring Selectors]
*[HelpRoot_Dev_Mobile\mobile_msdl_screen_nested|Configuring Related Containers]
*[HelpRoot_Dev_Mobile\mobile_msdl_screen_entityattr|Adding Attributes of Entities to Mobile Screens]
*[HelpRoot_Dev_Mobile\mobile_msdl_screen_redirectin|Redirecting the User to Different Screens and Containers]
*[HelpRoot_Dev_Mobile\mobile_msdl_screen_displaytextfield|Displaying Any Field as a Text Field]
*[HelpRoot_Dev_Mobile\mobile_msdl_screen_usersigna|Creating the User Signature]
]]></column>
		</row>
		<row PageID="53dc4043-f69c-42f7-a235-384fb0629fa3" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="6c51cbbd-96a9-ae1b-3ca5-9d6d2b35cf36" RecordSourceID="22377">
			<column name="Content"><![CDATA[[anchor|#_adff847c-1fae-4d3d-b1ee-673c02f4a649]
You can get the needed information to configure a screen from the WSDL schema, which is available on the title bar of the form in Acumatica ERP through '''Tools''' > '''Web Service''' in the UI. To obtain the WSDL schema, perform the following steps:[anchor|#_5798a4a5-930b-4a40-9cb1-891871766ae8]
#In Acumatica ERP, open the form for which you want information.
#On the title bar of the form, click '''Tools''' > '''Web Service''' in the UI.
#On the screen with the web service links, click '''Service Description''', as shown in the following screenshot.[anchor|#_05d821e5-6f1d-4eb1-b669-f10659cef5d9][image:Shared/Images/444.png|popup|Getting the service description for a form|370px]

See the following screenshot for an example of the WSDL schema. The schema includes containers (such as the <tt>ReceiptDetails</tt> container in this example), the list of container fields, and the <tt>Actions</tt> list.[anchor|#_f31aa06b-33f1-4f89-a9c3-c7ae54f006c6][anchor|#_a4d6cde0-74d6-46d7-b2b9-6dd9f06b79e6][image:Shared/Images/555.png|popup|Viewing an example of the WSDL schema|450px]
With this information, you can start configuring the screen.{br}

Before configuring a screen in the mobile application, you should check how the form looks in the web version of Acumatica ERP to decide how to configure the screen.]]></column>
			<column name="PlainText"><![CDATA[Getting the WSDL Schema You can get the needed information to configure a screen from the WSDL schema, which is available                 on the title bar of the form in  Acumatica ERP through  Tools Web Service  in the UI. To obtain the WSDL schema, perform the following                 steps: In  Acumatica ERP, open the form for which you want information. On the title bar of the form, click  Tools Web Service  in the UI. On the screen with the web service links, click  Service Description , as shown in the following screenshot. Getting the service description for a form See the following screenshot for an example of the WSDL schema. The schema includes containers (such as the  ReceiptDetails  container in this example), the list of container fields, and the  Actions  list. Viewing an example of the WSDL schema With this information, you can start configuring the screen. Before configuring a screen in the mobile application, you should check how the form looks in the web version of  Acumatica ERP to decide how to configure the screen. ]]></column>
		</row>
		<row PageID="a363d54e-6c3e-4de3-8ac2-5940d276870d" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="8df001b5-5031-2bba-e084-fde711551723" RecordSourceID="22377">
			<column name="Content"><![CDATA[This topic describes how to configure a screen that contains a list of records created by an entry form in Acumatica ERP.{br}{TOC}
==Example: Creating a Simple List View Layout==
A list view (that is, a list of records) is the simplest screen layout.{br}

In this example, you will add a list of records that have been created on the [HelpRoot_FormReference\AR_30_10_00|Invoices and Memos] ([~/?ScreenId=AR301000|AR301000]) form or its corresponding screen. To prepare a screen for this example, you should do the following:[anchor|#_d3aefddd-a590-4e1d-a849-a9da7ee6ea51]
*Add a screen based on the Invoices and Memos (AR301000) form to the mobile site map. For details, see [HelpRoot_Dev_Mobile\MOBILE_MobileSiteMap_AddingMSDL|To Add a Screen to the Mobile Site Map].
*Add a screen shortcut to the main menu of the mobile app. For details, see [HelpRoot_Dev_Mobile\mobile_msdl_mainmenu|Main Menu].

Before adding a list of records created by a particular form, you explore the WSDL schema of the Invoices and Memos (AR301000) form, which the screen will be based on, as described in [HelpRoot_Dev_Mobile\MOBILE_BasicInfo|Getting the WSDL Schema], and find the elements you want to add to the mobile screen. In this example, we want to add an action button and several fields of a record that will be displayed in the list. The WSDL schema elements are shown below.[anchor|#_0a1b4777-268b-45dc-bab3-c03c543b4b3c][anchor|#_17a24da3-3360-4f3f-bb4f-ab3f5827aa35][image:StudioDeveloperGuide/Images/MOBILE_WSDL_List.png|popup|WSDL schema elements used in the example|400px]
So to add the highlighted action buttons and fields to the screen you are creating, you should use the following code.{{{{add screen AR301000 {
  add container "InvoiceSummary" {
    add field "Customer"
    add field "Location"
    add field "ReferenceNbr"
    add field "Terms"
    add field "DueDate"
        
    add recordAction "Save" {
      behavior = Save
    }    
    add recordAction "Cancel" {
      behavior = Cancel
    }
  }
}
}}}}((({S:Warn}You must declare the {{Cancel}} action for all screens that include it in the WSDL schema. Without the {{Cancel}} action mapped, the changes discarded in the mobile app might not be discarded on the server.
)))
The left screenshot below shows the resulting screen you will see in the mobile application; you can tap any record to make changes to it. The right screenshot shows the form view of an individual record. Once you change any setting in this view, the ✓ symbol appears. Tap it to save your changes.[anchor|#_c2de06a6-9cfe-4b19-88da-d1c50f2f1574][anchor|#_cbef13f1-6b2b-430a-8666-07c5020f68ac][image:StudioDeveloperGuide/Images/MOBILE_List.png|popup|List view layout and form view layout|270px]((({S:Warn}All list views in Acumatica ERP mobile app support multi-selection. You can select multiple records and perform actions that have been declared as [HelpRoot_Dev_Mobile\mobile_ref_msdl_objtypes_seleciona|selectionAction].
)))
==Related Articles==
*[HelpRoot_Dev_Mobile\mobile_ref_msdl_objtype_container|container]]]></column>
			<column name="PlainText"><![CDATA[Configuring Lists This topic describes how to configure        a       screen that contains a list of records created by an entry form in  Acumatica ERP. Example: Creating a Simple List View Layout A list view (that is, a list of records) is the simplest screen layout. In this example, you will add a list of records that have been created on the   ([~/?ScreenId=AR301000|AR301000]) Invoices and Memos (AR301000) form or its corresponding screen. To         prepare a screen for this example, you should do the following: Add a screen based on the Invoices and Memos (AR301000) form to the mobile site map. For           details, see  To Add a Screen to the Mobile Site Map. Add a screen shortcut to the main menu of the mobile app. For details, see  Main Menu. Before adding a list of records created by a particular form, you explore the WSDL schema         of the Invoices and Memos (AR301000) form, which the screen will be based on, as described         in  Getting the WSDL Schema, and find the elements you want to add to the mobile         screen. In this example, we want to add an action button and several fields of a record that         will be displayed in the list. The WSDL schema elements are shown below. WSDL schema elements used in the example So to add the highlighted action buttons and fields to the screen you are creating, you         should use the following code. add screen AR301000 {
  add container "InvoiceSummary" {
    add field "Customer"
    add field "Location"
    add field "ReferenceNbr"
    add field "Terms"
    add field "DueDate"
        
    add recordAction "Save" {
      behavior = Save
    }    
    add recordAction "Cancel" {
      behavior = Cancel
    }
  }
} You must declare the            Cancel          action for all screens that include it in the WSDL schema. Without the            Cancel          action         mapped ,          the changes discarded in the mobile app might not be discarded on the server. The left screenshot below shows the resulting screen you will see in the mobile         application; you can tap any record to make changes to it. The right screenshot shows the         form view of an individual record. Once you change any setting in this view, the ✓ symbol         appears. Tap it to save your changes. List view layout and form view layout All list views in  Acumatica ERP mobile app support multi-selection. You can select multiple records and perform actions         that have been declared as  selectionAction. ]]></column>
		</row>
		<row PageID="c8e0561d-7d44-4313-b380-e3bb12860796" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="ab444749-5ea2-6bb5-f3f8-a1ee6a0a997d" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You may have to configure an editing screen (that is, a screen that can be used to enter and edit a data record) based on the use of the corresponding form in Acumatica ERP. {br}

In some cases, Acumatica ERP uses a single form to manage data records of a particular type (that is, the ''.aspx'' page contains the <tt>FormView</tt> and <tt>Grid</tt> controls). In these cases, in the mobile site map, you have to configure both the form view and the list view by using a single declaration of the <tt>Screen</tt> object.{br}

In other cases, Acumatica ERP uses the following separate forms for data records of a particular type:[anchor|#ul_yxc_d2g_1v]
*A list view (the ''.aspx'' page contains one <tt>Grid</tt> control) to manage records, which is called the ''substitute form''. (It has this name because this form is brought up instead of the data entry form when a user navigates to or searches for the form; it shows these records in a tabular format. On the substitute form, when the user clicks a record, the entry form opens to show the details of the selected record.)
*A form view (the ''.aspx'' page with one <tt>FormView</tt> control) to enter and edit settings, which is usually called a ''form'' or ''entry form''.
In these cases, you have to configure two separate declarations of the <tt>Screen</tt> object (that is, two screens): the list screen (which corresponds to the Acumatica ERP substitute form), and the editing screen.{br}{TOC}
==Example: Creating the Same Layout for the List View and the Form View==An example of a screen with the same layout for the list view and the form view is presented in the [HelpRoot_Dev_Mobile\mobile_msdl_screen_list|Configuring Lists] topic. 
You can see the list of fields and edit them at the same time.
==Example: Configuring the List and the Editing Form Separately==
In this example, we will add the Invoices (SO3030PL) list screen, which corresponds to the Invoices (SO3030PL) substitute form (a grid listing all available invoices), and the Invoices (SO303000) editing screen, which corresponds to the Invoices (SO303000) entry form (used to enter and edit the data of one invoice) in Acumatica ERP . {br}

To configure these screens, do the following:[anchor|#_bc850e6a-824b-4429-9da9-aeef36ab6015]
#Add the Invoices (SO3030PL) list screen, as described in [HelpRoot_Dev_Mobile\MOBILE_MobileSiteMap_AddingMSDL|To Add a Screen to the Mobile Site Map].
#Insert the following code in the '''Commands''' area of the Add: SO3030PL page.{{{{add screen SO3030PL {
  add container "Result" {
    add field "ReferenceNbrSOInvoiceRefNbr"
    add field "Status"
    add field "Customer"
    add field "Date"
    add containerAction "Insert" {
      icon = "system://Plus"
      behavior = Create
      redirect = True
    }
    add containerAction "EditDetail" {
      behavior = Open
      redirect = True
    }
  }
}
}}}}
#:In the screen, you find two actions that can be invoked to open the editing screen for a data record: {{behavior = Create}} and {{behavior = Open}}. The {{redirect = True}} attribute indicates that the editing screen needs to be opened separately. The actual screen that will be opened is determined by the server logic.
#Add the Invoices (SO303000) screen, as described in [HelpRoot_Dev_Mobile\MOBILE_MobileSiteMap_AddingMSDL|To Add a Screen to the Mobile Site Map].
#Insert the following code in the '''Commands''' area of the Add: SO303000 page.{{{{add screen SO303000 {
  add container "InvoiceSummary" {  
    add field "Customer"
    add field "Location"
    add field "Terms" 
    add field "DueDate"
    add field "CashDiscountDate" 
    add field "Currency" {
      selector {
        add field "CurrencyID"
      }
      PickerType = Attached
    }
    add recordAction "Save" {
      behavior = Save
    } 
    add recordAction "Cancel" {
      behavior = Cancel
    }
  } 
}
}}}}
#Add the screens to the main menu of the mobile app using the '''Update Main Menu''' page as shown below.{{{{add item "SO3030PL" {
  displayName = "Invoices" 
  icon = "system://NewsPaper" 
}  
add item "SO303000" {
  displayName = "Invoice"
  visible = False  
}
}}}}
#:((({S:Warn}The <tt>visible</tt> attribute of the Invoices (SO303000) screen is set to ''false'' to hide the editing screen from the main menu of the mobile app so that a user can access it only from the Invoices (SO3030PL) screen.
)))

After you publish the customization project, you should see a new tile on the main menu of the mobile app and the corresponding screens, as shown below.[anchor|#_db2336b1-d041-44bc-b2d9-9d55e6dbfea8][anchor|#_b41c2961-6865-4c9e-9110-e10a895dff6d][image:StudioDeveloperGuide/Images/MOBILE_ListEditForms.png|popup|The List and the Editing Forms|400px]
In this example, you use the Invoices (SO3030PL) screen to display the list screen, and you use the Invoices (SO303000) screen to display the editing screen. The same approach is used with forms in Acumatica ERP.]]></column>
			<column name="PlainText"><![CDATA[Configuring      Editing      Screens You may have to configure an editing screen (that is, a screen that can be used to enter         and edit a data record) based on the use of the corresponding form in  Acumatica ERP.  In         some cases,  Acumatica ERP uses a single form to manage data records of a particular type  (that         is, the  .aspx  page contains the  FormView  and            Grid  controls). In these cases, in the mobile site map,          you         have to configure both the form view and the list view by using a single declaration of the            Screen  object. In other cases,  Acumatica ERP uses the following separate forms for data records of a particular type: A list view (the  .aspx  page contains one  Grid  control) to             manage records, which is called the  substitute form . (It has this name because             this form is brought up instead of the data entry form when a user navigates to or             searches for the form; it shows these records in a tabular format. On the substitute             form, when the user clicks a record, the entry form opens to show the details of the             selected record.) A form view (the  .aspx  page with one  FormView  control) to             enter and edit settings, which is usually called a  form  or  entry             form . In these cases, you have to configure two separate declarations of the            Screen  object (that is, two screens): the list screen (which         corresponds to the  Acumatica ERP substitute form), and the editing screen. Example: Creating the Same Layout for the List View and the Form View An       example of a screen with the same layout for the list view and the form view is presented in       the  Configuring Lists topic.          You         can see the list of fields and edit them at the same time. Example: Configuring the List and the Editing Form Separately In this example, we will add the Invoices (SO3030PL) list screen, which corresponds to the         Invoices (SO3030PL) substitute form (a grid listing all available invoices), and the         Invoices (SO303000) editing screen, which corresponds to the Invoices (SO303000) entry form         (used to enter and edit the data of one invoice) in  Acumatica ERP .  To configure these screens, do the following: Add the Invoices (SO3030PL) list screen, as described in  To Add a Screen to the Mobile Site Map. Insert the following code in the  Commands  area of the Add:           SO3030PL             page. add screen SO3030PL {
  add container "Result" {
    add field "ReferenceNbrSOInvoiceRefNbr"
    add field "Status"
    add field "Customer"
    add field "Date"
    add containerAction "Insert" {
      icon = "system://Plus"
      behavior = Create
      redirect = True
    }
    add containerAction "EditDetail" {
      behavior = Open
      redirect = True
    }
  }
} In             the screen, you find two actions that can be invoked to open the editing screen for a             data record:  behavior = Create  and  behavior = Open .             The  redirect = True  attribute indicates that the editing screen needs             to be opened separately. The actual screen that will be opened is determined by the             server logic. Add the Invoices (SO303000) screen, as described in  To Add a Screen to the Mobile Site Map. Insert the following code in the  Commands  area of the Add:           SO303000           page. add screen SO303000 {
  add container "InvoiceSummary" {  
    add field "Customer"
    add field "Location"
    add field "Terms" 
    add field "DueDate"
    add field "CashDiscountDate" 
    add field "Currency" {
      selector {
        add field "CurrencyID"
      }
      PickerType = Attached
    }
    add recordAction "Save" {
      behavior = Save
    } 
    add recordAction "Cancel" {
      behavior = Cancel
    }
  } 
} Add the screens to the main menu of the mobile app using the  Update Main             Menu  page as shown             below. add item "SO3030PL" {
  displayName = "Invoices" 
  icon = "system://NewsPaper" 
}  
add item "SO303000" {
  displayName = "Invoice"
  visible = False  
} The                visible  attribute of the Invoices (SO303000) screen is set to                false  to hide the editing screen from the main menu of the mobile app so that a             user can access it only from the Invoices (SO3030PL) screen. After you publish the customization project, you should see a new tile on the main menu of         the mobile app and the corresponding         screens ,          as shown below. The List and the Editing Forms In this example, you use the Invoices (SO3030PL) screen to display the list screen, and you         use the Invoices (SO303000) screen to display the editing screen. The same approach is used         with forms in  Acumatica ERP. ]]></column>
		</row>
		<row PageID="a298502e-2ec7-4fc9-a76c-2f74c3c6791e" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="f00237c3-ab43-78d3-8956-9b9b9f825fee" RecordSourceID="22377">
			<column name="Content"><![CDATA[
A user can create and view an Acumatica Report                         Designer report through the mobile app if the following conditions are met:[anchor|#_64350574-e013-4174-9a5b-9472f169d569]
*The report form already exists in Acumatica ERP.
*The report form metadata has been added to the mobile site map.
*The user account has been granted access rights to view the report.
{br}

To map a report form to the mobile app, you have to add a screen for the report form. This screen must have the <tt>type</tt> attribute set to ''Report''. {br}

The following screenshot displays a sample screen of the ''Report'' type with the <tt>DisplayName</tt> attribute set to ''Shipment Report''.[anchor|#_77ac6e97-a66f-441b-a98b-a1764a950661][anchor|#_39224fcd-db8a-4803-a4b3-2eee85283a29][image:StudioDeveloperGuide/Images/MOBILE_Reports.png|popup|Viewing a report screen|130px]On the screenshot, notice the round blue button, which corresponds to the '''Run Report''' button on the report form toolbar in Acumatica ERP.{br}{TOC}
==Using an Action to Generate a Report==
 Acumatica Mobile                         Framework supports the Acumatica ERP actions that generate reports. To enable such an action in the mobile app, you should map the action to the form on which the action is invoked. For example, you could map the action to print a document to the entry form on which the document is created. In the mobile site map, the <tt>containerAction</tt>, <tt>recordAction</tt>, or <tt>selectionAction</tt> object has to contain the <tt>Redirect</tt> attribute set to ''True''.{br}

To map a report to the mobile app, do the following:[anchor|#_100618d9-6156-42c1-b2af-48563adc97ca]
#Add the report form to the mobile site map. For details, see [HelpRoot_Dev_Mobile\MOBILE_MobileSiteMap_AddingMSDL|To Add a Screen to the Mobile Site Map].
#Add the report form to the main menu of the mobile app. For details, see [HelpRoot_Dev_Mobile\mobile_updatemainmenu|To Update the Main Menu of a Mobile App].
#Map the action that opens the report.

For example, if you need to map the Print Sales Order/Quote (SO641010) report to the Sales Orders (SO301000) screen, do the following:[anchor|#_816278c9-ae96-4b42-b867-c6a43cff1d9f]
#Add the Print Sales Order/Quote report to the mobile site map. The screen code should look as follows.{{{{add screen SO641010 {
  type = Report
}
}}}}
#Add the report to the main menu. The code for the main menu should look as follows.{{{{update sitemap {
  ...
  add item "SO641010" {
    displayName="Sales Order"
    visible=False
  }
}
}}}}
#In the Sales Orders screen, map the action that opens the Print Sales Order/Quote report. The mapping of the action should look as follows.{{{{update screen SO301000 {
  update container "OrderSummary" {
    add recordAction "PrintSalesOrderQuoteReport" {
      redirect = True
    }
  }
}
}}}}

The following screenshot shows the resulting action button for the report in the screen&rsquo;s menu.{br}

[anchor|#_fab8c87f-33d8-4c45-bc16-f09e1691d30c][anchor|#_da5215b4-4151-4d32-a0cb-343b5b82b17f][image:StudioDeveloperGuide/Images/MOBILE_Reports_Print.png|popup|Viewing the report action button on the Sales Orders screen|130px]{br}

When a user performs the action by using the mobile app, the app immediately receives the corresponding report in PDF format from the Acumatica ERP server and displays the report for the user, as shown in the following screenshot.[anchor|#_2cbb2d0c-d33b-4e9e-ba1d-16d9b09be6c4][anchor|#_fa68de26-84d8-434e-82bf-9d60488ff506][image:StudioDeveloperGuide/Images/MOBILE_Reports_Viewing.png|popup|Viewing the report|130px]]]></column>
			<column name="PlainText"><![CDATA[Mapping Reports A user can create and view an  Acumatica Report                         Designer report through the mobile app if the following conditions are met: The report form already exists in  Acumatica ERP. The report form metadata has been added to the mobile site map. The user account has been granted access rights to view the report. To map a report form to the mobile app, you have to add a screen for the report form. This         screen must have the  type  attribute set to  Report .  The following screenshot displays a sample screen of the  Report  type with the            DisplayName  attribute set to  Shipment Report . Viewing a report screen On the screenshot, notice the round blue button, which corresponds to the            Run Report  button on the report form toolbar in  Acumatica ERP. Using an Action to Generate a Report  Acumatica Mobile                         Framework supports the  Acumatica ERP actions that generate reports. To enable such an action in the mobile app, you should map         the action to the form on which the action is invoked. For example, you could map the action         to print a document to the entry form on which the document is created. In the mobile site         map, the  containerAction ,  recordAction , or            selectionAction  object has to contain the  Redirect          attribute set to  True . To map a report to the mobile app, do the following: Add the report form to the mobile site map. For details, see  To Add a Screen to the Mobile Site Map. Add the report form to the main menu of the mobile app. For details, see  To Update the Main Menu of a Mobile App. Map the action that opens the report. For example, if you need to map the Print Sales Order/Quote (SO641010) report to the Sales         Orders (SO301000) screen, do the following: Add the Print Sales Order/Quote report to the mobile site map. The screen code should           look as follows. add screen SO641010 {
  type = Report
} Add the report to the main menu. The code for the main menu should look as           follows. update sitemap {
  ...
  add item "SO641010" {
    displayName="Sales Order"
    visible=False
  }
} In the Sales Orders screen, map the action that opens the Print Sales Order/Quote           report. The mapping of the action should look as           follows. update screen SO301000 {
  update container "OrderSummary" {
    add recordAction "PrintSalesOrderQuoteReport" {
      redirect = True
    }
  }
} The following screenshot shows the resulting action button for the report in the screen's         menu. Viewing the report action button on the Sales Orders screen When a user performs the action by using the mobile app, the app immediately receives the         corresponding report in PDF format from the  Acumatica ERP server and displays the report for the user, as shown in the following screenshot. Viewing the report ]]></column>
		</row>
		<row PageID="da5fdd07-4e9c-4fe3-873b-72503e30182d" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="98db4462-343f-df99-a390-d66db10aac25" RecordSourceID="22377">
			<column name="Content"><![CDATA[
To map a dashboard to the mobile app, you have to do the following:[anchor|#_af71a64e-3717-4d23-80c1-43d95c7f3147]
*Add a screen with the corresponding dashboard. For details, see [HelpRoot_Dev_Mobile\MOBILE_MobileSiteMap_AddingMSDL|To Add a Screen to the Mobile Site Map].
*:((({S:Warn}If a user taps a dashboard widget, the mobile app tries to open the appropriate screen that supplies data to the widget. You may also want to add the screens that contain the data on which dashboard widgets are based. If the screen is absent in the mobile site map, the mobile app displays a warning.
)))
*Add a shortcut of the added dashboard screen to the main menu.
{br}

A screen of the ''Dashboard'' type can display the following types of dashboard widgets:[anchor|#_f418e9fe-a443-48c7-bb46-3cfa4fe047d8]
*Chart
*Data Table
*Score Card
*Trend Card

Widgets of other types are not available in the mobile app. For details on dashboards types, see [HelpRoot_Interface\DB__mng_UIG_Dashboards|Dashboards].
==Example: Adding a Dashboard Screen==
In this example, you will add the Controller (DB000015) screen with a set of dashboard widgets. Do the following:[anchor|#_6de4d5d6-0e2f-4798-a86a-2ebea213da80]
*Add the Controller (DB000015) screen in the Customization Project Editorby using the following code.{{{{add screen DB000015 {
  type = Dashboard
}
}}}}
*Add the <tt>Dashboards</tt> folder and the Controller (DB000015) screen to the main menu of the mobile app, as shown in the following code. The code must be inside the {{sitemap}} instruction.{{{{...
add folder "Folder_0" {
  displayName = "Dashboards"
  icon = "system://Folder"
  add item "DB000015" {
    displayName = "Controller"
    icon = "system://Graph1"
  }
}
...
}}}}
The following screenshot displays the Controller (DB000015) screen for that is defined in an instance of Acumatica ERP. If you click on any widget, the screen is not displayed because the appropriate screens were not added to the mobile site map. You can add them to the mobile site map later.[anchor|#_77ac6e97-a66f-441b-a98b-a1764a950661][anchor|#_e6e287e7-b13c-449b-917d-073cfa034bed][image:StudioDeveloperGuide/Images/MOBILE_Dashboards.png|popup|Viewing a dashboard screen|130px]]]></column>
			<column name="PlainText"><![CDATA[Mapping Dashboards To map a dashboard to the mobile app, you have to do the following: Add a screen with the corresponding dashboard. For details, see  To Add a Screen to the Mobile Site Map. If a user taps a dashboard widget,             the mobile app tries to open the appropriate screen that supplies data to the widget.             You may also want to add the screens that contain the data on which dashboard widgets             are based. If the screen is absent in the mobile site map, the mobile app displays a             warning. Add a shortcut of the added dashboard screen to the main menu. A screen of the  Dashboard  type can display the following types of dashboard       widgets: Chart Data Table Score Card Trend Card Widgets of other types are not available in the mobile app. For details on dashboards types,       see  Dashboards. Example: Adding a Dashboard Screen In this example, you will add the         Controller (DB000015) screen with a set of dashboard widgets. Do the following: Add the Controller (DB000015) screen in the Customization Project Editorby using the           following code. add screen DB000015 {
  type = Dashboard
} Add the  Dashboards  folder and the Controller (DB000015) screen to           the main menu of the mobile app, as shown in the following code. The code must be inside           the  sitemap            instruction. ...
add folder "Folder_0" {
  displayName = "Dashboards"
  icon = "system://Folder"
  add item "DB000015" {
    displayName = "Controller"
    icon = "system://Graph1"
  }
}
... The following screenshot displays the Controller (DB000015) screen for that is defined in       an instance of  Acumatica ERP. If you click on any widget, the screen is not displayed because the appropriate screens       were not added to the mobile site map. You can add them to the mobile site map later. Viewing a dashboard screen ]]></column>
		</row>
		<row PageID="41dc0754-bdef-4a00-9cac-df4fb5d49e6d" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="fa37ea6b-3b0c-cf0b-adf8-05bdae4df9ac" RecordSourceID="22377">
			<column name="Content"><![CDATA[You can combine fields into groups to make data entry more logical and intuitive by using the <tt>group</tt> object, as the following example shows.{br}{TOC}
==Example:Grouping Fields==
The following example enhances the Sales Order Preferences (SO101000) screen. To see an example of grouping fields into a group, add the Sales Orders Preferences (SO101000) screen to your customization project (as described in [HelpRoot_Dev_Mobile\MOBILE_MobileSiteMap_AddingMSDL|To Add a Screen to the Mobile Site Map]), copy the code below to the '''Commands''' area of the Add: SO101000 page, and publish the project.{{{{add screen SO101000 {
  add container "GeneralSettingsDataEntrySettings" {
    add field "DefaultSalesOrderType"
    add group "DataEntrySettings" {
      displayName = "Data Entry Settings"
      collapsable = True
      collapsed = True
      add field "DefaultTransferOrderType"
      add field "ShipmentNumberingSequence"
    }
    add recordAction "Save" {
      behavior = Save
    }
  }
}
}}}}
While entering data, the user may collapse or expand a particular group of fields. You can prevent a group from being collapsed by setting the <tt>collapsable</tt> attribute of the group to ''False'' (by default, the attribute value is ''True''). If a group is collapsible (the <tt>collapsable</tt> attribute is set to ''True''), the <tt>collapsed</tt> attribute indicates whether a group is initially collapsed (by default, the attribute value is ''False'').{br}

You can see the result in the mobile application in the following screenshots.{br}

The left screenshot shows the '''Data Entry Settings''' group, which is initially collapsed. If the user clicks on the header of the group, the group is expanded, as shown in the right screenshot.[anchor|#_ac94de85-cd67-495b-8cec-b427fb762a59][anchor|#_e6f2b6cb-a646-45dd-9ab6-9a080e3fe73f][image:StudioDeveloperGuide/Images/MOBILE_Groups.png|popup|A collapsible group on a screen|270px]
==Related Articles==
*[HelpRoot_Dev_Mobile\mobile_ref_msdl_objtype_group|group]]]></column>
			<column name="PlainText"><![CDATA[Grouping Fields on a Screen You can combine fields into groups to make data entry more logical       and intuitive by using the  group        object ,        as the following example shows. Example: Grouping Fields The following example enhances the Sales Order Preferences (SO101000) screen. To see an         example of grouping fields into a group, add the Sales Orders Preferences (SO101000) screen         to your customization project (as described in  To Add a Screen to the Mobile Site Map), copy the code below to the            Commands  area of the Add: SO101000 page, and publish the         project. add screen SO101000 {
  add container "GeneralSettingsDataEntrySettings" {
    add field "DefaultSalesOrderType"
    add group "DataEntrySettings" {
      displayName = "Data Entry Settings"
      collapsable = True
      collapsed = True
      add field "DefaultTransferOrderType"
      add field "ShipmentNumberingSequence"
    }
    add recordAction "Save" {
      behavior = Save
    }
  }
} While entering data, the user may collapse or expand a particular group of fields. You can         prevent a group from being collapsed by setting the  collapsable  attribute         of the group to  False  (by default, the attribute value is  True ). If a group is         collapsible (the  collapsable  attribute is set to  True ), the            collapsed  attribute indicates whether a group is initially collapsed         (by default, the attribute value is  False ). You can see the result in the mobile application in the following screenshots. The left screenshot shows the  Data Entry Settings  group, which is         initially collapsed. If the user clicks on the header of the group, the group is expanded,         as shown in the right screenshot. A collapsible group on a screen ]]></column>
		</row>
		<row PageID="fd9cb8aa-609c-46d4-8c8d-f29dda804721" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="d65fdeb2-402e-b71e-f2df-de4fc50c3dc5" RecordSourceID="22377">
			<column name="Content"><![CDATA[By default, the mobile application enables file attachments and displays them on a screen if the screen supports the attachments. However, the default handling of attachments can be overridden.[anchor|#_3078f2ce-9086-4039-a887-edc4e3dddcd3]((({S:Warn}On iOS devices, it is possible to upload only image files. Files of other types are not supported.
))){br}{TOC}
==Example: Configuring a Screen with Attachments==
The following sample code gives the Invoices (SO303000) screen the ability to accept attachments of various formats. To see an example, add the Invoices (SO303000) screen to your customization project (as described in [HelpRoot_Dev_Mobile\MOBILE_MobileSiteMap_AddingMSDL|To Add a Screen to the Mobile Site Map]), copy the code below to the '''Commands''' area of the Add: SO303000 page, and publish the project.{{{{add screen SO303000 {
  add container "InvoiceSummary" {
    add field "Customer"
    add field "Location"
    add field "Terms"
    add field "DueDate"
    add field "CashDiscountDate"
     add field "Currency" {
      selector {
        add field "CurrencyID"
      }
      PickerType = Attached
    }
    add recordAction "Save" {
      behavior = Save
    }
    add recordAction "Cancel" {
      behavior = Cancel
    }
    attachments {
      add type "jpg" {
        extension = "jpg"      
      }
      add type "png" {
        extension = "png"
      }
      add type "pdf" {
        extension = "pdf"
      }
    }
  }
}
}}}}
To enable or disable attachments and configure the file types that are allowed, you use the <tt>attachments</tt> instruction inside the <tt>container</tt> object.((({S:Warn}If a screen does not support attachments, the attachments are not displayed even if you set the <tt>disabled</tt> attribute of the <tt>attachments</tt> instruction to ''False''.
)))
The screenshot below shows the resulting screen in the mobile application. To attach an item, the user taps the paper clip symbol in the top right corner of the screen. After at least one item has been attached, the number next to the paper clip indicates how many items have been attached.[anchor|#_a2853696-692d-4896-a39f-3b3ccf0318d8][anchor|#_9e74a6b8-89f3-4aaf-ab16-fbb97eae83c2][image:StudioDeveloperGuide/Images/MOBILE_Attachments.png|popup|A screen with attachments|130px]
==The Enhancement of Images Taken from the Camera==
The functionality of enhancing images taken from the camera of a mobile device is implemented in the Acumatica mobile app. This image enhancement makes the image look better and more readable. This functionality is useful for any printed document, such as expense receipts that may be attached to documents in Acumatica ERP.{br}

To switch on image enhancement in the Acumatica mobile app, you should set the <tt>imageAdjustmentPreset</tt> attribute to ''Receipt'' in the <tt>attachments</tt> instruction of the mobile site map as follows.{{{{attachments {
      imageAdjustmentPreset = Receipt
}
}}}}When the <tt>imageAdjustmentPreset</tt> attribute is set to ''Receipt'', a corresponding button appears in the attachment area (see the screenshot below). When a user taps the highlighted button, a special camera mode is switched on in the Acumatica mobile app. In this mode, the following enhancements of the image captured by the camera are performed:[anchor|#_a061ca84-29f0-4fd4-bce2-c41ec964a1ef]
*The image is cropped by the bounding box of the detected edges.
*Any image distortion is removed.
*The image is converted into black and white.
*The contrast of the image is maximized.

Each of these enhancements is first performed automatically and then the user can also add manual adjustments. The automatic changes cannot be undone.[anchor|#_b42ae708-89c1-4952-8308-4a95e1770e8f][anchor|#_3d55718b-431f-4db9-816b-6e0657edbc29][image:StudioDeveloperGuide/Images/MOBILE_Attachments_Enhance.png|popup|A screen with the attachment area to add photos in enhanced mode|130px]
If the <tt>imageAdjustmentPreset</tt> attribute is not specified or has value other than {{Receipt}}, the Acumatica mobile app attaches the original image taken from the camera.
==Related Articles==
*[HelpRoot_Dev_Mobile\MOBILE_Ref_MSDL_Instr_ATTACHMENTS|attachments]]]></column>
			<column name="PlainText"><![CDATA[Configuring Attachments By default, the mobile application enables file attachments and       displays them on a screen if the screen supports the attachments. However, the default       handling of attachments can be overridden. On iOS devices, it is possible to upload only image             files. Files of other types are not supported. Example: Configuring a Screen with Attachments The following sample code gives the Invoices (SO303000) screen the ability to accept         attachments of various formats. To see an example, add the Invoices (SO303000) screen to         your customization project (as described in  To Add a Screen to the Mobile Site Map), copy the code below to the            Commands  area of the Add: SO303000 page, and publish the         project. add screen SO303000 {
  add container "InvoiceSummary" {
    add field "Customer"
    add field "Location"
    add field "Terms"
    add field "DueDate"
    add field "CashDiscountDate"
     add field "Currency" {
      selector {
        add field "CurrencyID"
      }
      PickerType = Attached
    }
    add recordAction "Save" {
      behavior = Save
    }
    add recordAction "Cancel" {
      behavior = Cancel
    }
    attachments {
      add type "jpg" {
        extension = "jpg"      
      }
      add type "png" {
        extension = "png"
      }
      add type "pdf" {
        extension = "pdf"
      }
    }
  }
} To enable or disable attachments and configure the file types that are allowed, you use the            attachments  instruction inside the  container          object. If a screen does not support attachments, the attachments are not displayed even if you         set the  disabled  attribute of the  attachments          instruction to  False . The screenshot below shows the resulting screen in the mobile application. To attach an         item, the user taps the paper clip symbol in the top right corner of the screen. After at         least one item has been attached, the number next to the paper clip indicates how many items         have been attached. A screen with attachments The Enhancement of Images Taken from the Camera The functionality of         enhancing images taken from the camera of a mobile device is implemented in the  Acumatica         mobile app. This image enhancement makes the image look better and more readable. This         functionality is useful for any printed document, such as expense receipts that may be         attached to documents in  Acumatica ERP. To switch on image enhancement in the  Acumatica         mobile app, you should set the  imageAdjustmentPreset  attribute to            Receipt  in the  attachments  instruction of the mobile site map as         follows. attachments {
      imageAdjustmentPreset = Receipt
} When       the  imageAdjustmentPreset  attribute is set to  Receipt , a       corresponding button appears in the attachment area (see the screenshot below). When a user       taps the highlighted button, a special camera mode is switched on in the  Acumatica       mobile app. In this mode, the following enhancements of the image captured by the camera are         performed: The image is cropped by the bounding box of the detected edges. Any image distortion is removed. The image is converted into black and white. The contrast of the image is maximized. Each of these enhancements is first performed automatically and then the user can also         add manual adjustments. The automatic changes cannot be undone. A screen with the attachment area to add photos in enhanced mode If the  imageAdjustmentPreset  attribute is not specified or has         value other than  Receipt , the  Acumatica         mobile app attaches the original image taken from the camera. ]]></column>
		</row>
		<row PageID="f5d08023-22d3-4e15-bc94-5b0ec85d9aa6" Language="en-US" PageRevisionID="1" PlainText="Configuring Selectors You can configure selector fields to be displayed as pop-up       windows or grids by using the  selector  instruction. Example: Configuring a Screen with Selectors The following example configures a selector for the  Currency  field         of the Invoices (SO303000) screen. To see an example, copy the code below to the Add:         SO303000 Invoices page of the Customization Project Editor, and publish the project. add screen SO303000 {&#xA;  add container &quot;InvoiceSummary&quot; {&#xA;    add field &quot;Customer&quot;&#xA;    add field &quot;Location&quot;&#xA;    add field &quot;Terms&quot;&#xA;    add field &quot;DueDate&quot;&#xA;    add field &quot;CashDiscountDate&quot;&#xA;     add field &quot;Currency&quot; {&#xA;      selector {&#xA;        add field &quot;CurrencyID&quot;&#xA;      }&#xA;      pickerType = Attached&#xA;    }&#xA;    add recordAction &quot;Save&quot; {&#xA;      behavior = Save&#xA;    }&#xA;  }&#xA;} A selector with  pickerType=&quot;Attached&quot;  is displayed as a field on the first         screenshot and as a pop-up window on the second screenshot. A selector as a pop-up window " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="0bf3ed4c-bed4-ead3-6db2-c766dfa2b5fe" RecordSourceID="22377">
			<column name="Content"><![CDATA[You can configure selector fields to be displayed as pop-up windows or grids by using the <tt>selector</tt> instruction.{br}{TOC}
==Example: Configuring a Screen with Selectors==
The following example configures a selector for the '''Currency''' field of the Invoices (SO303000) screen. To see an example, copy the code below to the Add: SO303000 Invoices page of the Customization Project Editor, and publish the project.{{{{add screen SO303000 {
  add container "InvoiceSummary" {
    add field "Customer"
    add field "Location"
    add field "Terms"
    add field "DueDate"
    add field "CashDiscountDate"
     add field "Currency" {
      selector {
        add field "CurrencyID"
      }
      pickerType = Attached
    }
    add recordAction "Save" {
      behavior = Save
    }
  }
}
}}}}
A selector with {{pickerType="Attached"}} is displayed as a field on the first screenshot and as a pop-up window on the second screenshot.[anchor|#_0a7c0b8d-a045-4d12-8e06-29df87cc572a][anchor|#_f2edd9d1-d151-4db0-9821-94ce548a66c1][image:StudioDeveloperGuide/Images/MOBILE_Selectors.png|popup|A selector as a pop-up window|270px]
==Related Articles==
*[HelpRoot_Dev_Mobile\MOBILE_Ref_MSDL_Instr_SELECTOR|selector]]]></column>
		</row>
		<row PageID="471a1a6d-d88e-48ea-b5e6-45512ccfb1b8" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="5c43e14b-e537-ed1b-1ef7-492ec4e73f0b" RecordSourceID="22377">
			<column name="Content"><![CDATA[This topic describes how to configure different types of related containers on the same screen.{br}{TOC}
==Example: Configuring a Screen with One-to-Many (Master-Detail) Containers==
With one-to-many containers declared inside the <tt>screen</tt> object, one container is considered the master container, while all other containers are considered detail containers.{br}

The following code is an example of the one-to-many-containers scheme. You can see the full example if you select '''Update Existing Screen &gt; EP301000''' on the toolbar of the Mobile Application page in the Customization Project Editor.{{{{add screen EP301000 {
  openAs = Form
  add container "DocumentSummary" {
    ...
  }
  add container "AddReceipts" {
    type = SelectionActionList
    visible = False
    listActionsToExpand = 1
    add field "Description"
    add field "ClaimAmount"
    add field "Date"
    add field "Currency"
    add listAction "SubmitReceipt" {
      icon = "system://Check"
      behavior = Void
    }
    attachments {}
  }
  add container "ExpenseClaimDetails" {
    fieldsToShow = 6
    listActionsToExpand = 3
    containerActionsToExpand = 3
    add field "Description"
    add field "Amount"
    ...
    attachments {}
  }
  ...
}
}}}}
In this example, {{DocumentSummary}} is the master container. All other declared detail containers are displayed on the screen below the master container in the order of their declaration.{br}

The following screenshot shows the resulting screen in the mobile application.[anchor|#_c73d543f-8daf-4c00-a173-1b379c4e68f2][anchor|#_066e2fb2-b913-4185-a92d-ccfe8c5d38b9][image:StudioDeveloperGuide/Images/MOBILE_Containers_1-Many-full.png|popup|Screen with one-to-many containers|130px][anchor|#_b7eb3fd7-220f-4e6f-a513-82d0a73b2f9b]
==Example: Displaying Fields from Different Containers in One Container ==
You can configure a container so that it displays fields form different containers.{br}

The screen in this example includes the {{ClaimDetails}} container, which also has a field from the {{ReceiptDetailsExpenseDetails}} container. You do not need to declare both containers. Instead, in the field object, you separate the corresponding container name and its field with the ''#'' symbol, as shown in the following sample code.{{{{add screen EP301020 {
  openAs = Form
  add container "ClaimDetails" {
    … 
    add field "ReceiptDetailsExpenseDetails#Description"
    add field "Date"
    add field "ExpenseItem" {
      pickerType = Searchable
      selector {
        add field "Description"
        add field "InventoryID"
      }
    }
    … 
  }
  … 
}
}}}}
In this example, the {{Description}} field of the {{ReceiptDetailsExpenseDetails}} container is displayed (among other fields). To see the full example, in the navigation pane of the Customization Project Editor select the Mobile Application page and click '''Customize &gt; Update Existing Screen &gt; EP301020'''.{br}

The following screenshot shows the resulting screens with containers containing declared fields.[anchor|#_2ccf16c9-4234-4dbd-95e6-da8e09faf507][anchor|#_2c57d152-1c64-44e4-9d80-2fb451bfdbe0][image:StudioDeveloperGuide/Images/MOBILE_Containers_ManyAs1.png|popup|Screens with containers containing declared fields|270px][anchor|#_1e07d417-e059-447d-a693-fb06a87b4850]
==Example: Configuring a Screen with Many-to-One (Master-Detail) Containers==
 Acumatica ERP includes dialog boxes that are opened from forms and that provide additional actions for items in a grid. For example, on the Expense Claims (EP301030) form, you could use the '''Add Receipts''' dialog box to add receipts to an expense claim entity. See the following screenshot.[anchor|#_6aeae747-8ed5-4334-b4fe-b1a25cb60480][anchor|#_4ccb7c6f-574e-43de-8e33-4b3f8351249b][image:StudioDeveloperGuide/Images/MOBILE_Containers_SelectionActionList.png|popup|Example of a dialog box with a grid|400px]
To map this kind of dialog box to the mobile app, you need to specify {{type = SelectionActionList}} for the container corresponding to this dialog box in the form&rsquo;s WSDL schema and specify a [HelpRoot_Dev_Mobile\mobile_ref_msdl_objtypes_lista|listAction], as shown in the following code.{{{{add screen EP301000 {
  openAs = Form
  … 
  add container "AddReceipts" {
    type = SelectionActionList
    visible = False
    listActionsToExpand = 1
    add field "Description"
    add field "ClaimAmount"
    add field "Date"
    add field "Currency"
    add listAction "SubmitReceipt" {
      icon = "system://Check"
      behavior = Void
    }
    attachments {}
  }
  … 
}
}}}}
To see the full example, in the navigation pane of the Customization Project Editor select the Mobile Application page and click '''Customize &gt; Update Existing Screen &gt; EP301000'''.{br}

The screenshots below show the resulting screens in the mobile app. Screens with list actions support selecting multiple items.{br}

The first screenshot shows the content of the <tt>DocumentSummary</tt> container of the Expense Claims (EP301030) screen and the '''Add Receipts''' button, which corresponds to the {{listAction "SubmitReceipt"}}. ((({S:Warn}The <tt>DisplayName</tt> attribute is not defined for the nested container; therefore, for the container, the mobile application displays the ''Add Receipts'' name, which is obtained from the Mobile API server.
)))
If a user taps the '''Add Receipts''' button, the mobile app displays the content of this container and provides multi-selection, as the second screenshot shows. The user can tap '''Expense Claim Details''', as shown in the third screenshot, to view the Expense Claim Details screen, shown in the fourth screenshot.[anchor|#_194a3ca2-46e5-40b7-be57-6b3445ce65be][anchor|#_d2fa95dc-524e-4be8-a530-7d28498bb80b][image:StudioDeveloperGuide/Images/MOBILE_Containers_MultiSelect.png|popup|Container supporting list actions|450px]
==Example: Configuring a Screen with a Container Link==
In the mobile app, a container can contain a link to another container on the screen toolbar or on the screen among the fields. To use a container link, do the following:[anchor|#_fb1528a1-4925-4fc6-84dd-163525643883]
*Declare the container to which you want to add a link
*Add the [HelpRoot_Dev_Mobile\mobile_ref_msdl_objtype_containerlink|containerLink] object

See the following code for an example of the creation of a link to the {{Summary}} container.{{{{add screen EP305000 {
  add container "DocumentSummary" {
    … 
    add containerLink "Summary" {
      control = "ListItem"
      formPriority = 52
    }
    … 
  }
  add container "Summary" {
    …}
  … 
}
}}}}
Based on this code, you can open the Summary screen by using the list entry.{br}

The screenshots below show the Timecard (EP305000) screen with the container links and the opened Summary screen.[anchor|#_d6470252-a85e-43ed-a8ac-f3f744ca2d4a][anchor|#_1bafd030-9b63-4628-a1a3-c8bba6541b09][image:StudioDeveloperGuide/Images/MOBILE_Screens_ContainerLink.png|popup|Use of container link to open a container|270px]]]></column>
			<column name="PlainText"><![CDATA[Configuring Related Containers This topic describes how to configure different types of related       containers on the same screen. Example: Configuring a Screen with One-to-Many (Master-Detail) Containers With one-to-many containers declared inside the  screen  object, one         container is considered the master container, while all other containers are considered         detail containers. The following code is an example of the one-to-many-containers scheme. You can see the full         example if you select  Update Existing Screen > EP301000  on the toolbar of the Mobile Application page in the Customization Project         Editor. add screen EP301000 {
  openAs = Form
  add container "DocumentSummary" {
    ...
  }
  add container "AddReceipts" {
    type = SelectionActionList
    visible = False
    listActionsToExpand = 1
    add field "Description"
    add field "ClaimAmount"
    add field "Date"
    add field "Currency"
    add listAction "SubmitReceipt" {
      icon = "system://Check"
      behavior = Void
    }
    attachments {}
  }
  add container "ExpenseClaimDetails" {
    fieldsToShow = 6
    listActionsToExpand = 3
    containerActionsToExpand = 3
    add field "Description"
    add field "Amount"
    ...
    attachments {}
  }
  ...
} In this example,  DocumentSummary  is the master container. All other         declared detail containers are displayed on the screen below the master container in the         order of their declaration. The following screenshot shows the resulting screen in the mobile application. Screen with one-to-many containers Example: Displaying Fields from Different Containers in One Container  You can configure a container so that it displays fields form different containers. The screen in this example includes the  ClaimDetails  container, which also         has a field from the  ReceiptDetailsExpenseDetails  container. You do not         need to declare both containers. Instead, in the field object, you separate the         corresponding container name and its field with the  #  symbol, as shown in the         following sample code. add screen EP301020 {
  openAs = Form
  add container "ClaimDetails" {
    … 
    add field "ReceiptDetailsExpenseDetails#Description"
    add field "Date"
    add field "ExpenseItem" {
      pickerType = Searchable
      selector {
        add field "Description"
        add field "InventoryID"
      }
    }
    … 
  }
  … 
} In this example, the  Description  field of the            ReceiptDetailsExpenseDetails  container is displayed (among other fields).         To see the full example, in the navigation pane of the Customization Project Editor select         the Mobile Application page and click  Customize > Update Existing Screen > EP301020 . The following screenshot shows the resulting screens with containers containing declared         fields. Screens with containers containing declared fields Example: Configuring a Screen with Many-to-One (Master-Detail) Containers  Acumatica ERP includes dialog boxes that are opened from forms and that provide additional actions for         items in a grid. For example, on the Expense Claims (EP301030) form, you could use the            Add Receipts  dialog box to add receipts to an expense claim entity.         See the following screenshot. Example of a dialog box with a grid To map this kind of dialog box to the mobile app, you need to specify  type =           SelectionActionList  for the container corresponding to this dialog box in the         form's WSDL schema and specify a  listAction, as         shown in the following code. add screen EP301000 {
  openAs = Form
  … 
  add container "AddReceipts" {
    type = SelectionActionList
    visible = False
    listActionsToExpand = 1
    add field "Description"
    add field "ClaimAmount"
    add field "Date"
    add field "Currency"
    add listAction "SubmitReceipt" {
      icon = "system://Check"
      behavior = Void
    }
    attachments {}
  }
  … 
} To see the full example, in the navigation pane of the Customization Project Editor select         the Mobile Application page and click  Customize > Update Existing Screen > EP301000 . The screenshots below show the resulting screens in the mobile app. Screens with list         actions support selecting multiple items. The first screenshot shows the content of the  DocumentSummary  container         of the Expense Claims (EP301030) screen and the  Add Receipts  button,         which corresponds to the  listAction "SubmitReceipt" .  The  DisplayName  attribute is not defined for the nested container;         therefore, for the container, the mobile application displays the  Add Receipts  name,         which is obtained from the Mobile API server. If a user taps the  Add Receipts  button, the mobile app displays the         content of this container and provides multi-selection, as the second screenshot shows. The         user can tap  Expense Claim Details , as shown in the third screenshot,         to view the Expense Claim Details screen, shown in the fourth screenshot. Container supporting list actions Example: Configuring a Screen with a Container Link In the mobile app, a container can contain a link to another container on the screen         toolbar or on the screen among the fields. To use a container link, do the following: Declare the container to which you want to add a link Add the  containerLink object See the following code for an example of the creation of a link to the            Summary  container. add screen EP305000 {
  add container "DocumentSummary" {
    … 
    add containerLink "Summary" {
      control = "ListItem"
      formPriority = 52
    }
    … 
  }
  add container "Summary" {
    …}
  … 
} Based on this code, you can open the Summary screen by using the list entry. The screenshots below show the Timecard (EP305000) screen with the container links and the         opened Summary screen. Use of container link to open a container ]]></column>
		</row>
		<row PageID="b2c1b484-af68-4dee-a7c7-349446cb4d80" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="19b639f4-0136-94dd-3b0a-26e2b132696f" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can configure the mapping of user-defined field to a mobile app screen by using the {{add UDFields}} instruction.{br}

Because not all system entities have entity classes, attributes cannot always be added to data entry forms via classes. In these cases, user-defined fields can be added directly to the data entry forms where these entities are created. When these fields are defined for a form, they are specified on the '''User-Defined Fields''' tab. By default, the '''User-Defined Fields''' tab is displayed on a mobile screen if the associated form has user-defined fields. For example, the following screenshots show user-defined fields displayed on the [HelpRoot_FormReference\CR_30_60_00|Cases] ([~/?ScreenId=CR306000|CR306000]) form and on the Cases screen of the mobile app.[anchor|#_2108fa9f-afff-40fe-864d-8d4251be3fb5][anchor|#_e3cadf60-597f-4886-872e-99057c8c1d54][image:StudioDeveloperGuide/Images/Mobile_UDF_Form.png|popup|The User-Defined Fields tab on the Cases form|450px][anchor|#_27ef963e-ff4b-4800-bfe8-ad4d2abd0b52][anchor|#_0b62ecd3-e418-41f7-88b4-9aa675869a17][image:StudioDeveloperGuide/Images/Mobile_UDF_Default.png|popup|The User-Defined Fields tab on the Cases screen|150px]{br}{TOC}
==Organizing the Layout of User-Defined Fields==
You can organize the layout of user-defined fields by putting all user-defined fields into an object of the following types:[anchor|#_c8765d3b-4e34-47b9-9889-9be3506c1f2c]
*<tt>layout</tt>
* <tt>container</tt>
* <tt>group</tt>

You do this by specifying the {{add UDFields}} instruction inside an object of the listed types.{br}

For example, if user-defined fields should be displayed as a group of fields alongside other fields (rather than on a separate tab), a developer can use the following code. The <tt>add</tt> instruction should be used with an object of the <tt>UDFields</tt> type, as you can see from the highlighted line in the example.{{{{update screen CR306000 {
  update container "CaseSummary" {
    update layout "Settings" {
      add group "UDFGroup" {
        displayName = "User-Defined Fields"
        <b>add UDFields "UDFInline"<b>
        placeAt 0
      }
    }
  }
}
}}}}
The code above puts all user-defined fields in a group on the '''Settings''' tab of the Cases screen, as shown in the screenshot below.((({S:Warn}''UDFInline'' is an arbitrary name that has not been used anywhere else in the mapping.
)))[anchor|#_f35708c2-746e-454b-b623-7f2f7139ec02][anchor|#_c242f4ba-5385-49a6-87fc-090f0b744a69][image:StudioDeveloperGuide/Images/Mobile_UDF_Inline.png|popup|User-defined fields displayed in a group|150px]
==Hiding User-Defined Fields==
You can cancel the display of user-defined fields on a screen by using the <tt>hideUDF</tt> attribute of the <tt>screen</tt> object, as the following code shows.{{{{update screen CR306000 {
hideUDF = True
}
}}}}((({S:Warn}The <tt>hideUDF</tt> attribute and the {{add UDFields}} instruction cannot be used in the same screen mapping.
)))
==Related Articles==
*[HelpRoot_Dev_Mobile\MOBILE_Ref_MSDL_ObjTypes_UDFields|UDFields]
*[HelpRoot_Dev_Mobile\mobile_ref_msdl_objtypes_screen|screen]]]></column>
			<column name="PlainText"><![CDATA[Configuring User-Defined Fields You can configure the mapping of user-defined field to a mobile app screen by using the            add UDFields  instruction. Because not all system entities have entity classes, attributes cannot always be added to data         entry forms via classes. In these cases, user-defined fields can be added directly to the         data entry forms where these entities are created. When these fields are defined for a form,         they are specified on the  User-Defined Fields  tab. By default, the            User-Defined Fields  tab is displayed on a mobile screen if the         associated form has user-defined fields. For example, the following screenshots show         user-defined fields displayed on the   ([~/?ScreenId=CR306000|CR306000]) Cases (CS306000)         form and on the Cases screen of the mobile app. The User-Defined Fields tab on the Cases form The User-Defined Fields tab on the Cases screen Organizing the Layout of User-Defined Fields You can organize the layout of user-defined fields by putting all user-defined fields into an         object of the following types: layout container group You do this by specifying the  add UDFields  instruction inside an object of         the listed types. For example, if user-defined fields should be displayed as a group of fields alongside other         fields (rather than on a separate tab), a developer can use the following code. The            add  instruction should be used with an object of the            UDFields  type, as you can see from the highlighted line in the         example. update screen CR306000 {
  update container "CaseSummary" {
    update layout "Settings" {
      add group "UDFGroup" {
        displayName = "User-Defined Fields"
         add UDFields "UDFInline" 
        placeAt 0
      }
    }
  }
} The code above puts all user-defined fields in a group on the  Settings      tab of the Cases screen, as shown in the screenshot below. UDFInline  is an arbitrary name that has not been used anywhere else in the     mapping. User-defined fields displayed in a group Hiding User-Defined Fields You can cancel the display of user-defined fields on a screen by using the            hideUDF  attribute of the  screen  object, as the         following code shows. update screen CR306000 {
hideUDF = True
} The  hideUDF  attribute and the  add UDFields  instruction     cannot be used in the same screen mapping. ]]></column>
		</row>
		<row PageID="6ecef553-4689-4bc9-a334-25d585c28482" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="42628255-90b2-ec44-964e-403e04114f03" RecordSourceID="22377">
			<column name="Content"><![CDATA[
In Acumatica ERP, a ''class'' is a grouping of entities of a particular type—such as leads, opportunities, customers, cases, projects, and stock or non-stock items—that have similar properties. For each class, you can define a list of attributes to gather specific information about entities of the class. In Acumatica ERP, an ''attribute'' is some quality or characteristic beyond those already tracked on the data entry form for the entity.{br}

If attributes have been defined for an entity class, on the data entry form for the entity, the attributes are usually displayed on a separate tab as a table that contains a set of key-value pairs. Attributes of entities can be redefined, added, or removed at any time; thus, it is not possible to explicitly specify them in a mobile site map. Instead, you use specific definitions to show attributes of entities in a mobile application.{br}

In a mobile application, the attributes of entities are displayed as a screen or a part of a screen with input fields rather than being displayed in a table. For improved usability, you can apply a group as a container for attributes.{br}{TOC}
==Example: Displaying a Group of Attributes on the Summary Tab==
Suppose that in the mobile app, you need to display the attributes that are defined for a case class and displayed on the [HelpRoot_FormReference\CR_30_60_00|Cases] ([~/?ScreenId=CR306000|CR306000]) form of Acumatica ERP. (These attributes are shown in the following screenshot.)((({S:Warn}On screens that have been predefined for the Acumatica mobile app, there are usually two additional tabs that are not present on the corresponding Acumatica ERP form: the '''Summary''' tab and the '''Settings''' tab. The '''Summary''' tab contains most of the elements from the Summary area of the corresponding form. The '''Settings''' tab contains <tt>group</tt> objects, each of which is related to a tab from the tab area of the corresponding form..
)))[anchor|#_1ea58c4a-9179-4bdd-9c50-6eec577a94c7][anchor|#_dbe70e6d-066e-459b-8337-19452a72ba26][image:StudioDeveloperGuide/Images/MOBILE_Attributes_Cases.png|popup|Viewing the Attributes tab on the Cases form|450px]
To display attributes on the '''Summary''' tab, you should use the {{add attributes}} instruction inside the {{add group}} instruction. The following example adds a group of attributes in the {{CaseSummary}} container.{{{{add screen CR306000 {
  openAs = Form
  … 
  add container "CaseSummary" {
    add group "AttributesGroup" {
      displayName = "Attributes"
      collapsable = True
      collapsed = True
      add attributes "Attributes"
    }
  }
  … 
}
}}}}
In this code, the <tt>attributes</tt> object is wrapped in the group named {{AttributesGroup}}.{br}

The following screenshot shows the resulting screen in the mobile app.[anchor|#_d3ee985f-fdd0-465a-a1aa-8d9372b2cd7f][anchor|#_0ce3dcec-62b8-4a9b-b89c-d50df976db4a][image:StudioDeveloperGuide/Images/MOBILE_Attributes_Origin.png|popup|Viewing the Cases screen and the Attributes group|130px]
==Example: Displaying Attributes on Other Tabs of a Screen==
To display attributes on a tab other than the '''Summary''' tab, you need to add a container with attributes and use a <tt>containerLink</tt> object, as the following code shows.{{{{add screen CR306000 {
  add container "CaseSummary" {
    add layout "Settings" {
      displayName = "Settings"
      layout = "Tab"
      add containerLink "Attributes"
    }
  }
  add container "Attributes" {
    attributes = True
    attachments {}
  }
}
}}}}
In this code, the link to the ''Attributes'' container is added inside the '''Settings''' tab. To see the full example, in the navigation pane of the Customization Project Editor, select the '''Mobile Application''' page, and click '''Customize &gt; Update Existing Screen &gt; CR306000'''{br}

The following screenshots show the '''Settings''' tab with a link to the list of attributes and the list of attributes (on the second screen).[anchor|#_3ff36124-cd2d-489f-8e65-37c68330b813][anchor|#_3cd5728c-5369-40cf-953e-913decb78f7f][image:StudioDeveloperGuide/Images/Mobile_Attributes_Cases_Settings.png|popup|Viewing the Settings tab and the list of attributes|300px]]]></column>
			<column name="PlainText"><![CDATA[Adding Attributes of Entities to Mobile Screens In  Acumatica ERP, a  class  is a grouping of entities of a particular type—such as leads,         opportunities, customers, cases, projects, and stock or non-stock items—that have         similar properties. For each class, you can define a list of attributes to gather specific         information about entities of the class. In  Acumatica ERP, an  attribute  is some quality or characteristic beyond those already tracked         on the data entry form for the entity. If attributes have been defined for an entity class, on the data entry form for the entity,         the attributes are usually displayed on a separate tab as a table that contains a set of         key-value pairs. Attributes of entities can be redefined, added, or removed at any time;         thus, it is not possible to explicitly specify them in a mobile site map. Instead, you use         specific definitions to show attributes of entities in a mobile application. In a mobile application, the attributes of entities are displayed as a screen or a part of         a screen with input fields rather than being displayed in a table. For improved usability,         you can apply a group as a container for attributes. Example: Displaying a Group of Attributes on the Summary Tab Suppose that in the mobile app, you need to display the attributes that are defined for a         case class and displayed on the   ([~/?ScreenId=CR306000|CR306000]) Cases(CR306000) form         of  Acumatica ERP. (These attributes are shown in the following screenshot.) On screens that have been predefined for the Acumatica mobile app, there are usually two         additional tabs that are not present on the corresponding  Acumatica ERP form: the  Summary  tab and the  Settings  tab.         The  Summary  tab contains most of the elements from the Summary area         of the corresponding form. The  Settings  tab contains            group  objects, each of which is related to a tab from the tab area of         the corresponding form.. Viewing the Attributes tab on the Cases form To display attributes on the  Summary  tab, you should use the            add attributes  instruction inside the  add group          instruction. The following example adds a group of attributes in the            CaseSummary  container. add screen CR306000 {
  openAs = Form
  … 
  add container "CaseSummary" {
    add group "AttributesGroup" {
      displayName = "Attributes"
      collapsable = True
      collapsed = True
      add attributes "Attributes"
    }
  }
  … 
} In this code, the  attributes  object is wrapped in the group named            AttributesGroup . The following screenshot shows the resulting screen in the mobile app. Viewing the Cases screen and the Attributes group Example: Displaying Attributes on Other Tabs of a Screen To display attributes on a tab other than the  Summary  tab, you need         to add a container with attributes and use a  containerLink  object, as the         following code shows. add screen CR306000 {
  add container "CaseSummary" {
    add layout "Settings" {
      displayName = "Settings"
      layout = "Tab"
      add containerLink "Attributes"
    }
  }
  add container "Attributes" {
    attributes = True
    attachments {}
  }
} In this code, the link to the  Attributes  container is added inside the            Settings  tab. To see the full example, in the navigation pane of         the Customization Project Editor, select the  Mobile Application  page,         and click  Customize > Update Existing Screen > CR306000 The following screenshots show the  Settings  tab with a link to the         list of attributes and the list of attributes (on the second screen). Viewing the Settings tab and the list of attributes ]]></column>
		</row>
		<row PageID="b542fc68-4edc-4b44-81ae-3f3bc8bb9381" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="a2b278dd-16f8-a45a-9f15-c313f07681e3" RecordSourceID="22377">
			<column name="Content"><![CDATA[You can redirect the user to different screens and containers in a mobile app in one of the following ways:[anchor|#_ac01976b-4c15-4ec4-bd49-ffa0ebf83858]
*Allow a redirection that is already implemented in Acumatica ERP
*Create a new redirection

Redirections can be performed to the following objects:[anchor|#_87b2979d-2bbd-4dce-8b30-59089bfe44cf]
*A container inside the current screen
*Another screen
*A container inside another screen
{br}{TOC}
==Allowing of a Redirection That Is Implemented in Acumatica ERP==
While executing an action, you may need to redirect the mobile app from the current screen to a different screen or to an external URL. As a rule, the business logic of Acumatica ERP handles redirection to a screen by using the <tt>PXRedirectRequiredException</tt> and <tt>PXPopupRedirectException</tt> exceptions.{br}

In the mobile app, you can allow a redirection that is implemented in an action of Acumatica ERP. To do this, you set the <tt>redirect</tt> attribute of the appropriate <tt>containerAction</tt>, <tt>recordAction</tt>, or <tt>selectionAction</tt> object to ''True''.{br}

'''Use of an Existing Redirection from the List Form View to the Editing Form View'''{br}

You can see an example of redirecting from the list form view to the editing form view in the [HelpRoot_Dev_Mobile\mobile_msdl_screen_editfr|Configuring Editing Screens] topic. {br}

In the Invoices (SO3030PL) list screen, you can find two actions that can be invoked to open the editing form for a data record: {{Behavior="Create"}} and {{Behavior="Open"}}. The {{Redirect="true"}} attribute indicates that the editing screen needs to be opened separately. The actual screen that will be opened is determined by the server logic.{br}

You can still control the current screen after an action is completed by using the <tt>After</tt> attribute of the corresponding action object. The <tt>After</tt> attribute defines more complex behavior of the container when the <tt>redirect</tt> attribute of this object is set to ''True''. The possible values for the <tt>after</tt> attribute have the following meanings:[anchor|#ul_st1_ttr_1r]
*If redirection doesn&rsquo;t happen:
**<tt>Refresh</tt>: The current container is refreshed.
**<tt>Close</tt>: The current container is closed, and the previous container in the stack is loaded.
*If redirection happens:
**<tt>Refresh</tt>: A new screen is loaded, and the previous one is saved in the stack.
**<tt>Close</tt>: The current container is closed, and the new one is opened, which takes the position of the closed container in the stack.

The default value of the <tt>after</tt> attribute is <tt>Refresh</tt>.{br}

'''Example: Using the Existing Redirection to an External URL'''{br}

If an action on an Acumatica ERP form provides redirection to an external URL, you can map the action to use it in the mobile app. To do this, you need no additional attributes in the action object. However, the <tt>redirect</tt> attribute of the tag must be set to ''True'', as shown in the following example.{{{{...
add recordAction "ViewOnMap" {
  behavior = Void
  redirect = True
}
...
}}}}
On a mobile device, such action launches the default browser and passes the URL, which is obtained from the Acumatica ERP server, to the browser that opens the webpage specified in the URL.
==Creation of a New Redirection to a Screen or Container==
You can create a redirection to any container or screen in the mobile app when the redirection does not exist in Acumatica ERP. For example, you can do this to implement pop-up windows in the mobile app.{br}

To create a redirection, you use the following attributes:[anchor|#ul_ug2_t5r_1r]
*<tt>RedirectToScreen</tt> specifies the ID of the screen to redirect the user to. If the redirection target is within the current screen (such as a different container), don&rsquo;t use this attribute.
*<tt>RedirectToContainer</tt> specifies the name of the container to redirect the user to. If you don&rsquo;t specify this attribute, you are redirected to the primary container of the target screen.

'''Example: Creating a Redirection to Another Container Inside the Screen'''{br}

The following is an example of redirecting the user to another container inside the screen.{{{{add screen "EP301000" {
  openAs = Form
  add container "DocumentSummary" {
    add field "ReferenceNbr" {
      forceIsDisabled = True
    }
    add field "Description"
    add recordAction "ShowSubmitReceipt" {
      behavior = Void
      redirect = True
      redirectToScreen = "EP301000"
      redirectToContainer = "SubmitReceipts$List"
    }
    add recordAction "Save" {
      behavior = Save
      after = Close
    }
    add recordAction "Cancel" {
      behavior = Cancel
    }
    attachments {
      disabled = True
    }
  }
  add container "SubmitReceipts" {
    type = SelectionActionList
    visible = False
    add field "Description"
    add field "Date"
    add field "ClaimAmount"
    add listAction "SubmitReceipt" {
      behavior = Void
    }
  }
}
}}}}
In this example, the Expense Claims (EP301000) screen includes the following containers:[anchor|#_bdfa2e9a-f435-4d63-85fd-3bc6a8fb0611]
*{{DocumentSummary}}, which contains the following redirection on the record action.{{{{add recordAction "ShowSubmitReceipt" {
      behavior = Void
      redirect = True
      redirectToScreen = "EP301000"
      redirectToContainer = "SubmitReceipts$List"
    }
}}}}
*{{SubmitReceipts}}, to which the redirection is declared by the {{redirectToContainer = "SubmitReceipts$List"}} attribute.

The {{RedirectToScreen}} attribute is not applicable here because both containers belong to the same screen.{br}

The value of the {{redirectToContainer}} attribute can be expanded with special arguments separated with the ''$'' symbol (as shown in the following example).{{{{RedirectToContainer="InventoryLookup$List$InventoryLookupInventory" 
}}}}
These arguments allow more detailed configuration of the container behavior. The arguments are specified as follows:[anchor|#_0ff9617c-d99c-431f-b8d0-dc6d5187a93f]
#The first argument is the name is the name of the container.
#The second argument specifies how to open the container:
#*{{List}}: The container should be opened as a list view
#*{{Form}}: The container should be opened as a form view
#If the second argument is set to {{List}}, you may specify a third argument to indicate an additional container that is used as a filter for the data records in the main container.
((({S:Warn}To use the expanded way of configuring a redirection, you should clearly understand how the target screen works, how its business logic operates, and how the state of the business logic objects changes after any of the actions is executed.
)))]]></column>
			<column name="PlainText"><![CDATA[Redirecting the User to Different Screens and Containers You can redirect the user to different screens and containers in a       mobile app in one of the following ways: Allow a redirection that is already implemented in  Acumatica ERPCreate a new redirection Redirections can be performed to the following objects: A container inside the current screen Another screen A container inside another screen Allowing of a Redirection That Is Implemented in  Acumatica ERPWhile executing an action, you may need to redirect the mobile app from the current screen         to a different screen or to an external URL. As a rule, the business logic of  Acumatica ERP handles redirection to a screen by using the            PXRedirectRequiredException  and            PXPopupRedirectException  exceptions. In the mobile app, you can allow a redirection that is implemented in an action of  Acumatica ERP. To do this, you set the  redirect  attribute of the appropriate            containerAction ,  recordAction , or            selectionAction  object to  True . Use of an Existing Redirection from the List Form View to the Editing Form View You can see an example of redirecting from the list form view to the editing form view in         the  Configuring Editing Screens topic.  In the Invoices (SO3030PL) list screen, you can find two actions that can be invoked to         open the editing form for a data record:  Behavior="Create"  and            Behavior="Open" . The  Redirect="true"  attribute indicates         that the editing screen needs to be opened separately. The actual screen that will be opened         is determined by the server logic. You can still control the current screen after an action is completed by using the            After  attribute of the corresponding action object. The            After  attribute defines more complex behavior of the container when the            redirect  attribute of this object is set to  True . The possible         values for the  after  attribute have the following meanings: If redirection doesn't happen: Refresh : The current container is refreshed. Close : The current container is closed, and the previous               container in the stack is loaded. If redirection happens: Refresh : A new screen is loaded, and the previous one is saved in               the stack. Close : The current container is closed, and the new one is               opened, which takes the position of the closed container in the stack. The default value of the  after  attribute is          Refresh . Example: Using the Existing Redirection to an External URL If an action on an  Acumatica ERP form provides redirection to an external URL, you can map the action to use it in the         mobile app. To do this, you need no additional attributes in the action object. However, the            redirect  attribute of the tag must be set to  True , as shown in         the following example. ...
add recordAction "ViewOnMap" {
  behavior = Void
  redirect = True
}
... On a mobile device, such action launches the default browser and passes the URL, which is         obtained from the  Acumatica ERP server, to the browser that opens the webpage specified in the URL. Creation of a New Redirection to a Screen or Container You can create a redirection to any container or screen in the mobile app when the         redirection does not exist in  Acumatica ERP. For example, you can do this to implement pop-up windows in the mobile app. To create a redirection, you use the following attributes: RedirectToScreen  specifies the ID of the screen to redirect the user           to. If the redirection target is within the current screen (such as a different           container), don't use this attribute. RedirectToContainer  specifies the name of the container to redirect           the user to. If you don't specify this attribute, you are redirected to the primary           container of the target screen. Example: Creating a Redirection to Another Container Inside the Screen The following is an example of redirecting the user to another container inside the         screen. add screen "EP301000" {
  openAs = Form
  add container "DocumentSummary" {
    add field "ReferenceNbr" {
      forceIsDisabled = True
    }
    add field "Description"
    add recordAction "ShowSubmitReceipt" {
      behavior = Void
      redirect = True
      redirectToScreen = "EP301000"
      redirectToContainer = "SubmitReceipts$List"
    }
    add recordAction "Save" {
      behavior = Save
      after = Close
    }
    add recordAction "Cancel" {
      behavior = Cancel
    }
    attachments {
      disabled = True
    }
  }
  add container "SubmitReceipts" {
    type = SelectionActionList
    visible = False
    add field "Description"
    add field "Date"
    add field "ClaimAmount"
    add listAction "SubmitReceipt" {
      behavior = Void
    }
  }
} In this example, the Expense Claims (EP301000) screen includes the following         containers: DocumentSummary , which contains the following redirection on the record           action. add recordAction "ShowSubmitReceipt" {
      behavior = Void
      redirect = True
      redirectToScreen = "EP301000"
      redirectToContainer = "SubmitReceipts$List"
    } SubmitReceipts , to which the redirection is declared by the              redirectToContainer = "SubmitReceipts$List"  attribute. The  RedirectToScreen  attribute is not applicable here because both         containers belong to the same screen. The value of the  redirectToContainer  attribute can be expanded with         special arguments separated with the  $  symbol (as shown in the following         example). RedirectToContainer="InventoryLookup$List$InventoryLookupInventory"  These arguments allow more detailed configuration of the container behavior. The arguments         are specified as follows: The first argument is the name is the name of the container. The second argument specifies how to open the container: List : The container should be opened as a list view Form : The container should be opened as a form view If the second argument is set to  List , you may specify a third argument           to indicate an additional container that is used as a filter for the data records in the           main container. To use the expanded way of configuring a redirection, you should clearly understand how         the target screen works, how its business logic operates, and how the state of the business         logic objects changes after any of the actions is executed. ]]></column>
		</row>
		<row PageID="9b1f1940-5717-4643-a414-5f1f612b1dd6" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="3cc3f7ce-bab5-2709-c207-3fee443487d9" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The mobile API gives you the ability to map a control of any type from an Acumatica ERP form to a text box in the mobile app. This ability can be useful when both of the following conditions are met:[anchor|#_33d6b48c-bedc-4bc4-84b4-3e257c31ae5f]
*You have one of the following problems with the use of the field in the mobile application:
**A value in the control for the field is displayed oddly or incorrectly.
**The mapping of the field raises an exception.
*You do not need to add a new value for the field in the mobile app.
When these conditions are met, you can force the mobile application to treat this field as a common text field.{br}

To do this, in the <tt>Field</tt> object of the field, specify the {{ForceType="String"}} attribute. The input value is inserted directly into the cache of the corresponding container.((({S:Hint}We do not recommend that you use the <tt>ForceType</tt> attribute unless you have extensive experience developing custom controls and fully understand the outcome of using this attribute. Note that by using the <tt>ForceType</tt> attribute, you could switch off some types of field validation, which could damage data in the database. 
)))
==Related Articles==
*[HelpRoot_Dev_Mobile\mobile_ref_msdl_objtypes_field|field]]]></column>
			<column name="PlainText"><![CDATA[Displaying Any Field as a Text Field The mobile API gives you the ability to map a control of any type from an  Acumatica ERP form to a text box in the mobile app. This ability can be useful when both of the         following conditions are met: You have one of the following problems with the use of the field in the mobile               application: A value in the control for the field is displayed oddly or incorrectly. The mapping of the field raises an exception. You do not need to add a new value for the field in the mobile app. When these conditions are met, you can force the mobile application to treat this field         as a common text field. To do this, in the  Field  object of the field, specify the            ForceType="String"  attribute. The input value is inserted directly into         the cache of the corresponding container. We do not recommend that you use the  ForceType          attribute unless you have extensive experience developing custom controls and fully         understand the outcome of using this attribute. Note that by using the            ForceType  attribute, you could switch off some types of field         validation, which could damage data in the database.  ]]></column>
		</row>
		<row PageID="2daa9950-7424-4060-8f44-4d7cd519e1df" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="37dceae0-6121-0a03-0144-e6d64ec88446" RecordSourceID="22377">
			<column name="Content"><![CDATA[The mobile app provides the additional functionality for user to create a signature and attach the signature image file to an Acumatica ERP form that supports file attachments.((({S:Warn}This functionality does not work in the <tt>container</tt> object with attachments disabled (the <tt>attachments</tt> instuction with the <tt>disabled</tt> attribute set to ''True'').
)))
To add this functionality to your mobile app, you should update the corresponding page by adding the <tt>recordAction</tt> object with the <tt>behavior</tt> attribute set to ''SignReport''. The container to which you add the <tt>recordAction</tt> object must support attachments.{br}

For example, to add an area for adding a user signature to the Sales Orders (SO301000) screen, open the Update: SO301000 page (for details, see [HelpRoot_Dev_Mobile\mobile_updatescreen|To Update a Screen of a Mobile App]), and insert the following code in the '''Commands''' area.{{{{update screen SO301000 {
  update container "OrderSummary" {
    ...
    add recordAction "SignReport" {
      behavior = SignReport
       displayName = "Sign"
    }
    ...
  }
}
}}}}
As a result, the '''Sign''' action appears on the appropriate screen of the mobile app, as the following screenshot shows.[anchor|#_98ebf66d-0a01-41d0-a807-32aea29e68a7][anchor|#_4fdb1e4c-4c9d-4bb0-bb9d-cceded2781b0][image:StudioDeveloperGuide/Images/MOBILE_Signatures_AddAction.png|popup|Viewing the Sign action on the screen toolbar|130px]
When the user clicks this action, the app displays a blank form with the '''Cancel''' and '''OK''' buttons and the words ''Sign here'' to instruct the user to add the signature, as shown in the following screenshot. A user can add multiple signatures to one record.[anchor|#_905731a8-0f10-4e1b-b929-bb002621fdd3][anchor|#_56581dcf-e1d0-4db9-b48d-8d00fdd418ea][image:StudioDeveloperGuide/Images/MOBILE_Signatures_Create.png|popup|Creating a signature|130px]
After the user clicks the Save (✓) button on the screen toolbar (shown in the following screenshot), the mobile app sends the signature file to the Acumatica ERP server, which saves the file in the database as a file attached to the appropriate form. In the mobile app, the attachment is displayed as an image that is attached to the Acumatica ERP form.[anchor|#_2a9ec943-8ff2-4ae9-a9c0-2aa7fc465b20][anchor|#_687b00d8-e451-4812-a4b5-e7b22ba74bcc][image:StudioDeveloperGuide/Images/MOBILE_Signatures_Save.png|popup|Viewing signatures added to the screen|130px]{br}{TOC}]]></column>
			<column name="PlainText"><![CDATA[Creating the User Signature The mobile app provides the additional functionality for user to       create a signature and attach the signature image file to an  Acumatica ERP form that supports file attachments. This functionality does not work in the            container  object with attachments disabled (the            attachments  instuction with the  disabled  attribute         set to  True ). To add this functionality to your mobile app, you should         update the corresponding page by adding the  recordAction  object with the            behavior  attribute set to  SignReport . The container to which you         add the  recordAction  object must support attachments. For example,         to add an area for adding a user signature to the Sales Orders (SO301000) screen, open the         Update: SO301000 page (for details, see  To Update a Screen of a Mobile App), and insert         the following code in the  Commands          area. update screen SO301000 {
  update container "OrderSummary" {
    ...
    add recordAction "SignReport" {
      behavior = SignReport
       displayName = "Sign"
    }
    ...
  }
} As         a result, the  Sign  action appears on the appropriate screen of the         mobile app, as the following screenshot shows. Viewing the Sign action on the screen toolbar When the user clicks this action, the app displays a blank form with the            Cancel  and  OK  buttons and the words  Sign           here  to instruct the user to add the signature, as shown in the following screenshot.         A user can add multiple signatures to one record. Creating a signature After the user clicks the Save (✓) button on the screen toolbar (shown in the         following screenshot), the mobile app sends the signature file to the  Acumatica ERP server, which saves the file in the database as a file attached to the appropriate form.         In the mobile app, the attachment is displayed as an image that is attached to the  Acumatica ERP form. Viewing signatures added to the screen ]]></column>
		</row>
		<row PageID="9b2ae176-5ff6-4e27-9cd2-527da3aa34ad" Language="en-US" PageRevisionID="1" Content="((({S:Warn}Using XML for customizing the Mobile Site Map is deprecated since Acumatica 2020 R1. Use [HelpRoot_Dev_Mobile\MOBILE_MSDL|Configuring the Mobile Site Map] instead.&#xA;)))&#xA;The user interface of the Acumatica mobile app has the following structure:[anchor|#ul_qhj_cgg_vq]&#xA;*[HelpRoot_Dev_Mobile\MOBILE_MainMenu|Main Menu], which can include the &lt;tt&gt;sm:Folder&lt;/tt&gt; and &lt;tt&gt;sm:Screen&lt;/tt&gt; elements&#xA;*[HelpRoot_Dev_Mobile\MOBILE_SidebarMenu|Sidebar Menu], which can include links to favorite folders and screens&#xA;*[HelpRoot_Dev_Mobile\MOBILE_Screens|Screens], which can include &lt;tt&gt;sm:Container&lt;/tt&gt;, &lt;tt&gt;sm:Field&lt;/tt&gt;, &lt;tt&gt;sm:Action&lt;/tt&gt;, and other elements&#xA;{br}&#xA;&#xA;See [HelpRoot_Dev_Mobile\MOBILE_Reference|Mobile Site Map Reference] for detailed descriptions of all tags." PlainText="Configuring the Mobile Site Map by Using XML (deprecated) Using XML for customizing the Mobile Site Map is deprecated since  Acumatica 2020 R1. Use  Configuring the Mobile Site Map instead. The user interface of the  Acumatica mobile app has the following structure: Main Menu, which can include the                                                    sm:Folder  and                                                    sm:Screen  elements Sidebar Menu, which can include links to favorite folders and                                                 screens Screens, which can include                                                    sm:Container ,                                                    sm:Field ,                                                    sm:Action , and other                                                 elements See  Mobile Site Map Reference                                 for detailed descriptions of all tags. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="3e260163-17dc-2f34-e6ed-699b1feb1b7a" RecordSourceID="22377" />
		<row PageID="0e6f3728-57aa-447c-94ca-d412f9e4fbc9" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="3db9ce4e-89a3-a2ec-68f3-f70793290530" RecordSourceID="22377">
			<column name="Content"><![CDATA[
Before you start to customize the original mobile site map, we recommend that you explore the files in the <tt>\App&#95;Data\Mobile</tt> folder of the website to learn which forms of Acumatica ERP are used in the map. The folder can contain the files with the XML metadata and MSDL code of not only the original mobile site map but also any customizations that have been applied to the map.{br}

To customize the mapping for an Acumatica ERP form that is included in the original mobile site map, we recommend that you develop custom MSDL code. (See [HelpRoot_Dev_Mobile\MOBILE_MSDL|Configuring the Mobile Site Map] for details.)((({S:Hint}We recommend that you avoid including in the mobile site map the XML metadata for an Acumatica ERP form that is already included in the original mobile site map. Currently, the mobile framework does not allow the merging of multiple sets of metadata for the same form of Acumatica ERP. Also, we recommend that you not customize the files of the original mobile site map. In a future version of Acumatica ERP, an XML file can contain additional metadata for new functionality, about which you would never know because the file is replaced by the customized one.
))){br}

After you have saved the MSDL code in a <tt>.msd</tt> file in the <tt>\App&#95;Data\Mobile</tt> folder of the website, you can add this file to a customization project that can be deployed to an instance of Acumatica ERP.]]></column>
			<column name="PlainText"><![CDATA[To Customize the Mobile Site Map for a Form Before you start to customize the original mobile site map, we recommend that you explore the    files in the  \App_Data\Mobile  folder of the website to learn which forms of      Acumatica ERP are used in the map. The folder can contain the files with the XML metadata and MSDL code of    not only the original mobile site map but also any customizations that have been applied to the    map. To customize the mapping for an  Acumatica ERP    form that is included in the original mobile site map, we recommend that you develop custom MSDL    code. (See  Configuring the Mobile Site Map for details.) We recommend that     you avoid including in the mobile site map the XML metadata for an  Acumatica ERP     form that is already included in the original mobile site map. Currently, the mobile framework     does not allow the merging of multiple sets of metadata for the same form of  Acumatica ERP.     Also, we recommend that you not customize the files of the original mobile site map. In a future     version of  Acumatica ERP,     an XML file can contain additional metadata for new functionality, about which you would never     know because the file is replaced by the customized one. After you have saved the MSDL code in a  .msd  file in the      \App_Data\Mobile  folder of the website, you can add this file to a    customization project that can be deployed to an instance of  Acumatica ERP. ]]></column>
		</row>
		<row PageID="c06263e7-31d5-4d82-bbb9-e57fc2ea99af" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="ee04b5ac-53c6-f441-6e91-c17b1846d5c9" RecordSourceID="22377">
			<column name="Content"><![CDATA[
To add the metadata for an Acumatica ERP form to the mobile site map, you have to include it in a new <tt>.xml</tt> file in the <tt>\App&#95;Data\Mobile</tt> folder of the website. If the metadata must contain multiple new <tt>.xml.inc</tt> files, place the files in the <tt>\App&#95;Data\Mobile\includes</tt> folder of the website.{br}

Suppose that you need to add to the mobile site map an Acumatica ERP form with the ''XXX'' screen ID, and you are sure that the mobile site map does not contain the XML metadata for this form. Further suppose that you have to add the <tt>Date</tt> and <tt>Description</tt> fields and the <tt>Insert</tt> and <tt>Delete</tt> actions of the original ''XXX'' screen of Acumatica ERP to the screen on the mobile device, as the following diagram shows.[anchor|#fig_cyf_nwv_pr][anchor|#image_w2g_4wv_pr][image:StudioDeveloperGuide/Images/MobileFW_Schema01.png|popup|Use of an XML file to configure a screen in the mobile app|450px]{br}

The diagram shows how Acumatica Mobile                         Framework uses the metadata of the <tt>example.xml</tt> file to configure the ''XXX'' screen in the mobile app. (See [HelpRoot_Dev_Mobile\MOBILE_UIStructure|Configuring the Mobile Site Map by Using XML (deprecated)] for details.){br}

To create the metadata for the form, perform the following actions:[anchor|#ol_ckn_hmx_xr]
#In the <tt>\App&#95;Data\Mobile</tt> folder, create the <tt>example.xml</tt> file, which contains the XML header and the <tt>sm:SiteMap</tt> tag, as follows.{{{{&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;sm:SiteMap xmlns:sm="http://acumatica.com/mobilesitemap" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;

&lt;/sm:SiteMap&gt;
}}}}
#:((({S:Warn}See [HelpRoot_Dev_Mobile\MOBILE_Reference|Mobile Site Map Reference] for detailed descriptions of all tags used in the mobile site map.
)))
#Get the WSDL schema for the original ''XXX'' screen of Acumatica ERP, as described in [HelpRoot_Dev_Mobile\MOBILE_BasicInfo|Getting the WSDL Schema].
#Add the <tt>sm:Screen</tt> tag to the <tt>sm:SiteMap</tt> tag, as described in [HelpRoot_Dev_Mobile\MOBILE_ConfiguringLists|Configuring Lists].
#In the WSDL schema, find the <tt>Insert</tt> and <tt>Delete</tt> actions and make sure that these actions belong to the ''Action'' container.
#In the WSDL schema, find the <tt>Date</tt> and <tt>Description</tt> fields and make sure that these fields belong to the ''NameX'' container.
#Add the <tt>sm:Container</tt> tag to the <tt>sm:Screen</tt> tag, assigning it the ''NameX'' name to map the ''NameX'' container of the original ''XXX'' screen of Acumatica ERP to the ''XXX'' screen in the mobile app (see the figure above).
#For each required field, add an <tt>sm:Field</tt> tag with the original name to the container tag to map the field to the ''XXX'' screen in the mobile app.
#For each required action, add an <tt>sm:Action</tt> tag with the original name to the container tag to map the action to the ''XXX'' screen in the mobile app.
((({S:Warn}Once you have changed the mobile site map, you can include the added <tt>.xml</tt> and <tt>.xml.inc</tt> files in a customization project as ''File'' items to deploy the customization on the target system. For details, see [HelpRoot_Dev_Customization\CG_GL_Items_Files|Custom Files] in the Customization Guide.
)))]]></column>
			<column name="PlainText"><![CDATA[To Add a Form to the Mobile Site Map by Using an XML File To add the metadata for an  Acumatica ERP    form to the mobile site map, you have to include it in a new  .xml  file in    the  \App_Data\Mobile  folder of the website. If the metadata must contain    multiple new  .xml.inc  files, place the files in the      \App_Data\Mobile\includes  folder of the website. Suppose that you need to add to the mobile site map an  Acumatica ERP form with the  XXX  screen ID, and you are sure that the mobile site map does not       contain the XML metadata for this form. Further suppose that you have to add the          Date  and  Description  fields and the          Insert  and  Delete  actions of the original  XXX        screen of  Acumatica ERP to the screen on the mobile device, as the following diagram shows. Use of an XML file to configure a screen in the mobile app The diagram shows how  Acumatica Mobile                         Framework uses the metadata of the  example.xml  file to configure the  XXX        screen in the mobile app. (See  Configuring the Mobile Site Map by Using XML (deprecated) for details.) To create the metadata for the form, perform the following actions: In the  \App_Data\Mobile  folder, create the        example.xml  file, which contains the XML header and the        sm:SiteMap  tag, as       follows. <?xml version="1.0" encoding="UTF-8"?>
<sm:SiteMap xmlns:sm="http://acumatica.com/mobilesitemap" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

</sm:SiteMap> See         Mobile Site Map Reference for detailed descriptions of all tags used in the mobile       site map. Get the WSDL schema for the original  XXX  screen of  Acumatica ERP,      as described in  Getting the WSDL Schema. Add the  sm:Screen  tag to the  sm:SiteMap  tag, as      described in  Configuring Lists. In the WSDL schema, find the  Insert  and  Delete  actions           and make sure that these actions belong to the  Action  container. In the WSDL schema, find the  Date  and  Description            fields and make sure that these fields belong to the  NameX  container. Add the  sm:Container  tag to the  sm:Screen  tag,           assigning it the  NameX  name to map the  NameX  container of the original              XXX  screen of  Acumatica ERP to the  XXX  screen in the mobile app (see the figure above). For each required field, add an  sm:Field  tag with the original name to           the container tag to map the field to the  XXX  screen in the mobile app. For each required action, add an  sm:Action  tag with the original name to           the container tag to map the action to the  XXX  screen in the mobile app. Once you have changed the mobile site map, you can include the added          .xml  and  .xml.inc  files in a customization project       as  File  items to deploy the customization on the target system. For details, see  Custom Files in the Customization Guide. ]]></column>
		</row>
		<row PageID="6e4abb4c-04ca-4cfc-b123-f6a930d123e9" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="8abb7543-8a2c-c402-0f22-d043228df643" RecordSourceID="22377">
			<column name="Content"><![CDATA[
((({S:Warn}The following information is applicable only for Acumatica Framework versions earlier than 2020 R1.
)))If you have developed a custom site map for the mobile application and want to redistribute it to multiple Acumatica ERP instances, you can generate a delta script file that can be applied to the default site map. You then add this delta file to the customization project, as described in this topic. 
==To Generate the Delta from Two Mobile Site Maps==[anchor|#_5be3b710-16fb-4c69-891c-75e7831a11f3]
#For an Acumatica ERP instance, customize the site map for the mobile application. (For details, see [HelpRoot_Dev_Mobile\MOBILE_MobileSiteMap_Customizing|To Customize the Mobile Site Map for a Form].)
#:((({S:Warn}Make sure all nodes of the site map have the <tt>Name</tt> attribute specified. This attribute is used by the system during the generation of the delta file.
)))
#Deploy another Acumatica ERP instance of the same version with the default site map for the mobile application.
#Run the <tt>ac.exe</tt> command-line utility, which is located in the <tt>Data</tt> folder of your Acumatica ERP installation folder, with the <tt>MOBILESITEMAP</tt> command, the <tt>delta</tt> argument, and the following parameters:
#*The path to the folder with the default site map, which is the <tt>\App&#95;Data\Mobile</tt> folder of the corresponding Acumatica ERP application instance.
#*:((({S:Warn}If the folder specified in this parameter is empty, the utility converts the XML site map specified in the second parameter to MSDL format.
)))
#*The path to the folder with the customized site map, which is the <tt>\App&#95;Data\Mobile</tt> folder of the customized Acumatica ERP application instance.
#*The path to the MSD script file to save the generated delta. You have to save the MSD file with the delta in the <tt>\App&#95;Data\Mobile</tt> folder of the Acumatica ERP application instance to make Acumatica ERP apply the delta automatically when a user starts the mobile application connected to this instance.The following code shows an example of the command line. (The line breaks are only for display purposes.){{{{ac.exe MOBILESITEMAP d s
  "D:\ProgramFiles\AcumaticaERP\DefaultAcumaticaDB\App_Data\Mobile" 
  "D:\ProgramFiles\AcumaticaERP\CustomizedAcumaticaDB\App_Data\Mobile" 
  "D:\ProgramFiles\AcumaticaERP\CustomizedAcumaticaDB\App_Data\Mobile\delta.msd"
}}}}
#:((({S:Warn}You can use the short name of the <tt>delta</tt> argument, which is <tt>d</tt>.
)))
#Add the delta file to a customization project to apply the changes in the mobile site map to other instances of Acumatica ERP.

==Related Articles==
*[HelpRoot_Dev_Mobile\MOBILE_acExe_reference|ac.exe MOBILEITEMAP Reference]]]></column>
			<column name="PlainText"><![CDATA[To Generate         the          Delta  from Two Mobile Site Maps The following information is applicable only for  Acumatica Framework versions earlier than  2020 R1. If you have developed a custom site map for the mobile application and                 want to redistribute it to multiple  Acumatica ERP instances, you can generate a delta script file that can be applied to the                 default site map. You then add this delta file to the customization project, as                 described in this topic.  To Generate the Delta from Two Mobile Site Maps For an  Acumatica ERP instance, customize the site map for the mobile application. (For details,                      see                          To Customize the Mobile Site Map for a Form.) Make sure all nodes of the site map have the                              Name  attribute specified. This attribute is used by                         the system during the generation of the delta file. Deploy another  Acumatica ERP instance of the same version with the default site map for the mobile                     application. Run the  ac.exe  command-line utility, which is located in                     the  Data  folder of your  Acumatica ERP installation folder, with the  MOBILESITEMAP  command, the                          delta  argument, and the following parameters: The path to the folder with the default site map, which is the                                  \App_Data\Mobile  folder of the corresponding                                  Acumatica ERP application instance. If the folder specified in this parameter                                 is empty, the utility converts the XML site map specified in the                                 second parameter to MSDL format. The path to the folder with the customized site map, which is the                                  \App_Data\Mobile  folder of the customized  Acumatica ERP application instance. The path to                              the                             MSD script file to save the generated delta . You have                             to save the MSD file with the delta in the                                  \App_Data\Mobile  folder of the  Acumatica ERP application instance to make  Acumatica ERP apply the delta automatically when a user starts the mobile                             application connected to this instance. The following code shows an example of the command line. (The line breaks                     are only for display                         purposes.) ac.exe MOBILESITEMAP d s
  "D:\ProgramFiles\AcumaticaERP\DefaultAcumaticaDB\App_Data\Mobile" 
  "D:\ProgramFiles\AcumaticaERP\CustomizedAcumaticaDB\App_Data\Mobile" 
  "D:\ProgramFiles\AcumaticaERP\CustomizedAcumaticaDB\App_Data\Mobile\delta.msd" You                         can use the short name of the  delta  argument, which is                              d . Add the delta file to a customization project to apply the changes in the mobile                     site map to other instances of  Acumatica ERP. ]]></column>
		</row>
		<row PageID="67e92b66-bdce-43d4-b6bb-3b847c479152" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="86a3120d-8f9e-a882-f75b-f214bf607cd9" RecordSourceID="22377">
			<column name="Content"><![CDATA[
In this section, each example contains the XML metadata that you can use as the mobile site map for your instance of Acumatica ERP.
All examples include the metadata for the Acumatica ERP forms that are used in the original mobile site map. Because the Acumatica Mobile                         Framework does not allow the merging of multiple sets of metadata for the same form of Acumatica ERP, you cannot use the examples while the website contains the original mobile site map. To avoid possible errors on the server, you should temporarily (during the period while you are reading the guide and completing its examples) cancel the original mapping in the instance of Acumatica ERP where you intend to test the examples.
To do this, perform the following actions:[anchor|#ol_fyk_tlr_55]
#In the <tt>\App&#95;Data\Mobile</tt> folder of the website, rename the <tt>mobilesitemap.xml</tt> file to <tt>mobilesitemap.xml.bak</tt>.
#In the same folder, create the <tt>mobilesitemap.xml</tt> file, which contains the following XML code.{{{{&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;sm:SiteMap xmlns:sm="http://acumatica.com/mobilesitemap"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
&lt;/sm:SiteMap&gt;
}}}}
#:((({S:Warn}If you want the Acumatica ERP server to load all XML files from the <tt>\App&#95;Data\Mobile</tt> folder of the website, the <tt>mobilesitemap.xml</tt> file is mandatory in this folder. If the file is absent, the server does not load other XML files, and the mobile site map is empty.
)))
{br}

After you have completed these actions, the mobile site map is empty, and the server loads all other XML files from the <tt>\App&#95;Data\Mobile</tt> folder of the website. Therefore, you can add <tt>.xml</tt> files with the sample code provided in the examples to the <tt>\App&#95;Data\Mobile</tt> folder to perform testing.((({S:Hint}We recommend that you remove the code of each tested example before testing the next one, because some examples contain the metadata for the same forms of Acumatica ERP.
)))]]></column>
			<column name="PlainText"><![CDATA[How to Use XML Examples of This Section In this section, each example contains the XML metadata that you can use as the mobile site       map for your instance of  Acumatica ERP. All examples include the metadata for the  Acumatica ERP forms that are used in the original mobile site map. Because the  Acumatica Mobile                         Framework does not allow the merging of multiple sets of metadata for the same form of  Acumatica ERP, you cannot use the examples while the website contains the original mobile site map. To       avoid possible errors on the server, you should temporarily (during the period while you are       reading the guide and completing its examples) cancel the original mapping in the instance of          Acumatica ERP where you intend to test the examples. To do this, perform the following actions: In the  \App_Data\Mobile  folder of the website, rename the              mobilesitemap.xml  file to              mobilesitemap.xml.bak . In the same folder, create the  mobilesitemap.xml  file, which           contains the following XML             code. <?xml version="1.0" encoding="UTF-8"?>
<sm:SiteMap xmlns:sm="http://acumatica.com/mobilesitemap"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
</sm:SiteMap> If             you want the  Acumatica ERP server to load all XML files from the  \App_Data\Mobile  folder of             the website, the  mobilesitemap.xml  file is mandatory in this             folder. If the file is absent, the server does not load other XML files, and the mobile             site map is empty. After you have completed these actions, the mobile site map is empty, and the server loads       all other XML files from the  \App_Data\Mobile  folder of the website.       Therefore, you can add  .xml  files with the sample code provided in the       examples to the  \App_Data\Mobile  folder to perform testing. We recommend that you remove the code of each tested example before testing         the next one, because some examples contain the metadata for the same forms of  Acumatica ERP. ]]></column>
		</row>
		<row PageID="372f52b4-f6b3-41e3-946f-cc5b4291ed21" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="cd0a1116-515b-53b5-d13c-049f490b2751" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The main menu of the Acumatica mobile application consists of links to folders and screens. Clicking on a folder link opens the folder, which may include links to screens and other folders. Thus, the folders have a hierarchy, as the folders in file systems do. The main menu provides access to screens in the mobile site map, and folders are used to organize the screens.((({S:Warn}Access rights for screens in the mobile application are the same as the access rights for screens in Acumatica ERP.
))){br}

The start page of the main menu contains all child tags of the <tt>sm:SiteMap</tt> tag.{br}

In this topic, you can read about and perform several simple examples that demonstrate how to build the main menu of the mobile application.
==Example: Viewing the Simplest Configuration of the Mobile Application==
To see an example of the mobile application with a simple configuration, copy the code below to an <tt>.xml</tt> file, place the file in the <tt>\App&#95;Data\Mobile</tt> folder of the Acumatica ERP website, and start the mobile application.{{{{&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;sm:SiteMap xmlns:sm="http://acumatica.com/mobilesitemap" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
    &lt;sm:Screen Id="PM301000" Type="SimpleScreen" DisplayName="Projects" Icon="system://Display1"&gt;
        &lt;sm:Container Name="ProjectSummary"&gt;
            &lt;sm:Field Name="Status" /&gt;
            &lt;sm:Field Name="ProjectID" /&gt;
            &lt;sm:Field Name="Customer" /&gt;
            &lt;sm:Field Name="TemplateID" /&gt;
            &lt;sm:Field Name="Hold" /&gt;
            &lt;sm:Field Name="Description" /&gt;
        &lt;/sm:Container&gt;
    &lt;/sm:Screen&gt;
&lt;/sm:SiteMap&gt;
}}}}{br}

On a mobile device, the mobile application will look like the application shown in the following screenshots.[anchor|#image_r5n_41z_vq][image:StudioDeveloperGuide/Images/new-1.png|popup|The simple mobile application|280px]
Notice that the main menu contains only the link to the '''Projects''' screen; there are no folders on the menu.
==Example: Adding a Screen to a Folder==
In this example, you will add a screen to a folder. If you copy the code below to an ''.xml'' file in the <tt>\App&#95;Data\Mobile</tt> folder, the '''Projects''' screen will be located in the '''Organization''' folder.{{{{&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;sm:SiteMap xmlns:sm="http://acumatica.com/mobilesitemap" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;

    &lt;sm:Folder DisplayName="Organization" Icon="system://NewsPaper" &gt;

        &lt;sm:Screen Id="PM301000" Type="SimpleScreen" DisplayName="Projects" Icon="system://Display1"&gt;
            &lt;sm:Container Name="ProjectSummary"&gt;
                &lt;sm:Field Name="Status" /&gt;
                &lt;sm:Field Name="ProjectID" /&gt;
                &lt;sm:Field Name="Customer" /&gt;
                &lt;sm:Field Name="TemplateID" /&gt;
                &lt;sm:Field Name="Hold" /&gt;
                &lt;sm:Field Name="Description" /&gt;
            &lt;/sm:Container&gt;
        &lt;/sm:Screen&gt;

    &lt;/sm:Folder&gt;

&lt;/sm:SiteMap&gt;
}}}}{br}

The screenshots below show the results of this code on the mobile device.[anchor|#fig_kff_vjf_ts][anchor|#image_jsb_qcz_vq][image:StudioDeveloperGuide/Images/new-2.png|popup|The main menu, the contents of the folder, and the screen|420px]((({S:Warn}A folder must include at least one screen.
)))
A folder can be of one of the following types, which determine how the folder contents are displayed:[anchor|#ul_vv2_1dz_vq]
*<tt>ListFolder</tt> (default): With a folder of this type, folders and screens are represented as icons (see the example in this section, shown above). You need to tap an icon to open a folder or screen.
*<tt>HubFolder</tt>: In a folder of this type, the content of a screen is displayed like a tab item on a form. You swipe left and right to navigate through the contents of the folder, as the example in the next section shows.
((({S:Warn}Nested folders of the <tt>HubFolder</tt> type are not supported. That is, you may not add a folder of the <tt>HubFolder</tt> type within another folder of <tt>HubFolder</tt> type.
)))
==Example: Creating a Folder of the <tt>HubFolder</tt> Type==
In this example, you will create a folder of the <tt>HubFolder</tt> type and add two screens to it. Copy the code below to an <tt>.xml</tt> file in the <tt>\App&#95;Data\Mobile</tt> folder, and start the mobile application.{{{{&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;sm:SiteMap xmlns:sm="http://acumatica.com/mobilesitemap" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;

    &lt;sm:Folder DisplayName="Organization" Icon="system://NewsPaper" Type="HubFolder"&gt;

        &lt;sm:Screen Id="PM301000" Type="SimpleScreen" DisplayName="Projects"&gt;
            &lt;sm:Container Name="ProjectSummary"&gt;
                &lt;sm:Field Name="Status" /&gt;
                &lt;sm:Field Name="ProjectID" /&gt;
                &lt;sm:Field Name="Customer" /&gt;
                &lt;sm:Field Name="TemplateID" /&gt;
                &lt;sm:Field Name="Hold" /&gt;
                &lt;sm:Field Name="Description" /&gt;
            &lt;/sm:Container&gt;
        &lt;/sm:Screen&gt;
        &lt;sm:Screen Id="CR306020" Type="SimpleScreen" DisplayName="Tasks"&gt;
            &lt;sm:Container Name="Details"&gt;
                &lt;sm:Field Name="Summary" /&gt;
                &lt;sm:Field Name="StartDate" /&gt;
                &lt;sm:Field Name="Internal" /&gt;
                &lt;sm:Field Name="DueDate" /&gt;
                &lt;sm:Field Name="Completion" /&gt;
                &lt;sm:Field Name="Workgroup" /&gt;
                &lt;sm:Field Name="Owner" /&gt;
                &lt;sm:Field Name="Reminder" /&gt;
                &lt;sm:Field Name="RemindAtReminderDateDate" /&gt;
                &lt;sm:Field Name="RemindAtReminderDateTime" /&gt;
            &lt;/sm:Container&gt;
        &lt;/sm:Screen&gt;

    &lt;/sm:Folder&gt;

&lt;/sm:SiteMap&gt;
}}}}
In the following screenshots, you can see the results of this code on a mobile device.[anchor|#fig_ksr_sjf_ts][anchor|#image_b1q_5fz_vq][image:StudioDeveloperGuide/Images/new-3.png|popup|The main menu and the folder of <tt>HubFolder</tt> type|420px]
When you tap the '''Organization''' icon, the mobile application opens the folder with the '''Projects''' and '''Tasks''' lists in it. You can switch between these lists by swiping right and left.
==Example: Configuring Screens with Tabs==
Some Acumatica ERP forms display lists on multiple tabs (as the following screenshot shows).[anchor|#fig_eh1_vff_ts][anchor|#image_i31_dhz_vq][image:StudioDeveloperGuide/Images/111.png|popup| Acumatica ERP form with multiple tabs|350px]
In the mobile application, such a form is represented as multiple screens, with each screen corresponding to a single tab. However, you have to configure the screen only once because the mobile API server automatically performs the screen expansion into multiple screens.{br}

Copy the code below to an <tt>.xml</tt> file in the <tt>\App&#95;Data\Mobile</tt> folder, and start the mobile application. In this example, you will notice that the '''Expense Receipts''' form (EP301010) is represented by a number of screens, each corresponding to a single tab ('''All Records''', '''On Hold''', '''Open''', or '''Pending Approval'''). This example adds the screens to a folder of the <tt>HubFolder</tt> type, so you will switch between tabs by swiping right and left. If you changed the folder type to <tt>ListFolder</tt>, the tabs would be represented by icons.{{{{&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;sm:SiteMap xmlns:sm="http://acumatica.com/mobilesitemap" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;

    &lt;sm:Folder DisplayName="Expense Receipts" Type="HubFolder" Icon="system://NewsPaper"&gt;

        &lt;sm:Screen Id="EP301010" Type="SimpleScreen" DisplayName="Expense Receipts"&gt;
            &lt;sm:Container Name="ExpenseReceipts"&gt;
                &lt;sm:Field Name="Date" /&gt;
                &lt;sm:Field Name="ClaimAmount"/&gt;
                &lt;sm:Field Name="DescriptionTranDesc"/&gt;
                &lt;sm:Field Name="Currency" /&gt;
            &lt;/sm:Container&gt;
        &lt;/sm:Screen&gt;

    &lt;/sm:Folder&gt;

&lt;/sm:SiteMap&gt;
}}}}
The following screenshots show the result of this code on a mobile device.[anchor|#fig_j5y_pjf_ts][anchor|#image_nc2_5jz_vq][image:StudioDeveloperGuide/Images/new-4.png|popup|The multi-tab screen represented as a folder|280px]]]></column>
			<column name="PlainText"><![CDATA[Main Menu The main menu of the  Acumatica mobile application consists of links to folders and screens. Clicking on a folder             link opens the folder, which may include links to screens and other folders. Thus, the             folders have a hierarchy, as the folders in file systems do. The main menu provides             access to screens in the mobile site map, and folders are used to organize the                 screens. Access rights for screens in the mobile application are the same as                 the access rights for screens in  Acumatica ERP. The start page of the main menu contains all child tags of the                  sm:SiteMap  tag. In this topic, you can read about and perform several simple examples that demonstrate             how to build the main menu of the mobile application. Example: Viewing the Simplest Configuration of the Mobile Application To see an example of the mobile application with a simple configuration, copy the                 code below to an  .xml  file, place the file in the                      \App_Data\Mobile  folder of the  Acumatica ERP website, and start the mobile                 application. <?xml version="1.0" encoding="UTF-8"?>
<sm:SiteMap xmlns:sm="http://acumatica.com/mobilesitemap" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <sm:Screen Id="PM301000" Type="SimpleScreen" DisplayName="Projects" Icon="system://Display1">
        <sm:Container Name="ProjectSummary">
            <sm:Field Name="Status" />
            <sm:Field Name="ProjectID" />
            <sm:Field Name="Customer" />
            <sm:Field Name="TemplateID" />
            <sm:Field Name="Hold" />
            <sm:Field Name="Description" />
        </sm:Container>
    </sm:Screen>
</sm:SiteMap> On a mobile device, the mobile application will look like the application shown in                 the following screenshots. The simple mobile application Notice that the main menu contains only the link to the                      Projects  screen; there are no folders on the menu. Example: Adding a Screen to a Folder In this example, you will add a screen to a folder. If you copy the code below to an                      .xml  file in the  \App_Data\Mobile  folder, the                      Projects  screen will be located in the                      Organization                  folder. <?xml version="1.0" encoding="UTF-8"?>
<sm:SiteMap xmlns:sm="http://acumatica.com/mobilesitemap" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

    <sm:Folder DisplayName="Organization" Icon="system://NewsPaper" >

        <sm:Screen Id="PM301000" Type="SimpleScreen" DisplayName="Projects" Icon="system://Display1">
            <sm:Container Name="ProjectSummary">
                <sm:Field Name="Status" />
                <sm:Field Name="ProjectID" />
                <sm:Field Name="Customer" />
                <sm:Field Name="TemplateID" />
                <sm:Field Name="Hold" />
                <sm:Field Name="Description" />
            </sm:Container>
        </sm:Screen>

    </sm:Folder>

</sm:SiteMap> The screenshots below show the results of this code on the mobile device. The main menu, the contents of the folder, and the screen A folder must include at least one screen. A folder can be of one of the following types, which determine how the folder                 contents are displayed: ListFolder  (default): With a folder of this type, folders and                     screens are represented as icons (see the example in this section, shown above).                     You need to tap an icon to open a folder or screen. HubFolder : In a folder of this type, the content of a screen                     is displayed like a tab item on a form. You swipe left and right to navigate                     through the contents of the folder, as the example in the next section                     shows. Nested folders of the  HubFolder  type are not supported. That                 is, you may not add a folder of the  HubFolder  type within another                 folder of  HubFolder  type. Example: Creating a Folder of the  HubFolder  Type In this example, you will create a folder of the  HubFolder  type                 and add two screens to it. Copy the code below to an  .xml  file                 in the  \App_Data\Mobile  folder, and start the mobile                 application. <?xml version="1.0" encoding="UTF-8"?>
<sm:SiteMap xmlns:sm="http://acumatica.com/mobilesitemap" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

    <sm:Folder DisplayName="Organization" Icon="system://NewsPaper" Type="HubFolder">

        <sm:Screen Id="PM301000" Type="SimpleScreen" DisplayName="Projects">
            <sm:Container Name="ProjectSummary">
                <sm:Field Name="Status" />
                <sm:Field Name="ProjectID" />
                <sm:Field Name="Customer" />
                <sm:Field Name="TemplateID" />
                <sm:Field Name="Hold" />
                <sm:Field Name="Description" />
            </sm:Container>
        </sm:Screen>
        <sm:Screen Id="CR306020" Type="SimpleScreen" DisplayName="Tasks">
            <sm:Container Name="Details">
                <sm:Field Name="Summary" />
                <sm:Field Name="StartDate" />
                <sm:Field Name="Internal" />
                <sm:Field Name="DueDate" />
                <sm:Field Name="Completion" />
                <sm:Field Name="Workgroup" />
                <sm:Field Name="Owner" />
                <sm:Field Name="Reminder" />
                <sm:Field Name="RemindAtReminderDateDate" />
                <sm:Field Name="RemindAtReminderDateTime" />
            </sm:Container>
        </sm:Screen>

    </sm:Folder>

</sm:SiteMap> In the following screenshots, you can see the results of this code on a mobile                 device. The main menu and the folder of  HubFolder  type When you tap the  Organization  icon, the mobile application                 opens the folder with the  Projects  and                      Tasks  lists in it. You can switch between these lists by                 swiping right and left. Example: Configuring Screens with Tabs Some  Acumatica ERP forms display lists on multiple tabs (as the following screenshot shows).  Acumatica ERP form with multiple tabs In the mobile application, such a form is represented as multiple screens, with each                 screen corresponding to a single tab. However, you have to configure the screen only                 once because the mobile API server automatically performs the screen expansion into                 multiple screens. Copy the code below to an  .xml  file in the                      \App_Data\Mobile  folder, and start the mobile application.                 In this example, you will notice that the  Expense Receipts                  form (EP301010) is represented by a number of screens, each corresponding to a                 single tab ( All Records ,  On Hold ,                      Open , or  Pending Approval ). This                 example adds the screens to a folder of the  HubFolder  type, so                 you will switch between tabs by swiping right and left. If you changed the folder                 type to  ListFolder , the tabs would be represented by icons. <?xml version="1.0" encoding="UTF-8"?>
<sm:SiteMap xmlns:sm="http://acumatica.com/mobilesitemap" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

    <sm:Folder DisplayName="Expense Receipts" Type="HubFolder" Icon="system://NewsPaper">

        <sm:Screen Id="EP301010" Type="SimpleScreen" DisplayName="Expense Receipts">
            <sm:Container Name="ExpenseReceipts">
                <sm:Field Name="Date" />
                <sm:Field Name="ClaimAmount"/>
                <sm:Field Name="DescriptionTranDesc"/>
                <sm:Field Name="Currency" />
            </sm:Container>
        </sm:Screen>

    </sm:Folder>

</sm:SiteMap> The following screenshots show the result of this code on a mobile device. The multi-tab screen represented as a folder ]]></column>
		</row>
		<row PageID="4357519f-bf25-40a7-9f71-a9223031367a" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="a0fa8186-baa5-fe8c-3ef6-e02d181d172a" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The mobile application has a ''sidebar menu'', which is the shortcut menu for favorite folders and screens. You can insert links to folders and screens into the sidebar menu.
==Example: Adding a Screen to the Sidebar Menu==
To add a folder or screen to the sidebar menu, you need to set the <tt>IsDefaultFavorite</tt> attribute of the folder or screen to ''true''.{br}

Copy the code below to an <tt>.xml</tt> file, put the file in the <tt>\App&#95;Data\Mobile</tt> folder of the Acumatica ERP website, and start the mobile application.{{{{&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;sm:SiteMap xmlns:sm="http://acumatica.com/mobilesitemap" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;

    &lt;sm:Folder DisplayName="Organization" Icon="system://NewsPaper" &gt;

        &lt;sm:Screen Id="PM301000" Type="SimpleScreen" DisplayName="Projects" Icon="system://Display1" IsDefaultFavorite="true"&gt;
            &lt;sm:Container Name="ProjectSummary"&gt;
                &lt;sm:Field Name="Status" /&gt;
                &lt;sm:Field Name="ProjectID" /&gt;
                &lt;sm:Field Name="Customer" /&gt;
                &lt;sm:Field Name="TemplateID" /&gt;
                &lt;sm:Field Name="Hold" /&gt;
                &lt;sm:Field Name="Description" /&gt;
            &lt;/sm:Container&gt;
        &lt;/sm:Screen&gt;

    &lt;/sm:Folder&gt;

&lt;/sm:SiteMap&gt;
}}}}
The resulting sidebar menu of the mobile application will include a link for quick access to the Projects screen.[anchor|#fig_jrf_tzn_yr][anchor|#image_hcd_tmz_vq][image:StudioDeveloperGuide/Images/222.png|popup|A link to the screen in the sidebar menu|130px]]]></column>
			<column name="PlainText"><![CDATA[Sidebar Menu The mobile application has a  sidebar menu , which is the shortcut menu for favorite       folders and screens. You can insert links to folders and screens into the sidebar menu. Example: Adding a Screen to the Sidebar Menu To add a folder or screen to the sidebar menu, you need to set the            IsDefaultFavorite  attribute of the folder or screen to  true . Copy the code below to an  .xml  file, put the file in the            \App_Data\Mobile  folder of the  Acumatica ERP website, and start the mobile application. <?xml version="1.0" encoding="UTF-8"?>
<sm:SiteMap xmlns:sm="http://acumatica.com/mobilesitemap" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

    <sm:Folder DisplayName="Organization" Icon="system://NewsPaper" >

        <sm:Screen Id="PM301000" Type="SimpleScreen" DisplayName="Projects" Icon="system://Display1" IsDefaultFavorite="true">
            <sm:Container Name="ProjectSummary">
                <sm:Field Name="Status" />
                <sm:Field Name="ProjectID" />
                <sm:Field Name="Customer" />
                <sm:Field Name="TemplateID" />
                <sm:Field Name="Hold" />
                <sm:Field Name="Description" />
            </sm:Container>
        </sm:Screen>

    </sm:Folder>

</sm:SiteMap> The resulting sidebar menu of the mobile application will include a link for quick access         to the Projects screen. A link to the screen in the sidebar menu ]]></column>
		</row>
		<row PageID="bef2150e-5044-4d22-9b17-6b34071fc08e" Language="en-US" PageRevisionID="1" PlainText="Screens This section describes how to configure screens in the mobile application. The section consists of the following topics: Getting the WSDL SchemaConfiguring ListsConfiguring Editing FormsMapping ReportsMapping DashboardsGrouping Fields on a FormConfiguring AttachmentsConfiguring SelectorsConfiguring Nested ContainersAdding Entity Attributes to Mobile ScreensRedirecting to Different Screens and ContainersDisplaying Any Field as a Text FieldCreating the User Signature" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="b48abb75-d0bf-74f3-d48a-26e3060d6f2f" RecordSourceID="22377">
			<column name="Content"><![CDATA[
This section describes how to configure screens in the mobile application.{br}

The section consists of the following topics:[anchor|#ul_p4y_p4s_4r]
*[HelpRoot_Dev_Mobile\MOBILE_BasicInfo|Getting the WSDL Schema]
*[HelpRoot_Dev_Mobile\MOBILE_ConfiguringLists|Configuring Lists]
*[HelpRoot_Dev_Mobile\MOBILE_ConfiguringForms|Configuring Editing Forms]
*[HelpRoot_Dev_Mobile\MOBILE_MappingReports|Mapping Reports]
*[HelpRoot_Dev_Mobile\MOBILE_MappingDashboards|Mapping Dashboards]
*[HelpRoot_Dev_Mobile\MOBILE_GroupingFields|Grouping Fields on a Form]
*[HelpRoot_Dev_Mobile\MOBILE_Attachments|Configuring Attachments]
*[HelpRoot_Dev_Mobile\MOBILE_Selectors|Configuring Selectors]
*[HelpRoot_Dev_Mobile\MOBILE_MasterDetail|Configuring Nested Containers]
*[HelpRoot_Dev_Mobile\MOBILE_Attributes|Adding Entity Attributes to Mobile Screens]
*[HelpRoot_Dev_Mobile\MOBILE_Redirects|Redirecting to Different Screens and Containers]
*[HelpRoot_Dev_Mobile\MOBILE_ForceType|Displaying Any Field as a Text Field]
*[HelpRoot_Dev_Mobile\MOBILE_UserSignature|Creating the User Signature]
]]></column>
		</row>
		<row PageID="a36c007a-a860-4808-8da1-4721f7616acb" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="eac50dfc-0e97-3094-a419-656ce46424dc" RecordSourceID="22377">
			<column name="Content"><![CDATA[[anchor|#_9e130b6f-9cd3-4234-aa54-2c0e8cd70ae1]
You can get the needed information to configure a screen from the WSDL schema, which is available on the title bar of the form in Acumatica ERP through '''Tools''' > '''Web Service''' in the UI. To obtain the WSDL schema, perform the following steps:[anchor|#_0aea1e0c-b483-4b59-ab7e-3c672517c8ec]
#In Acumatica ERP, open the form for which you want information.
#On the title bar of the form, click '''Tools''' > '''Web Service''' in the UI.
#On the screen with the web service links, click '''Service Description''', as shown in the following screenshot.[anchor|#_72b775c4-5fcb-4d4f-adab-0a973f6e4798][image:Shared/Images/444.png|popup|Getting the service description for a form|370px]

See the following screenshot for an example of the WSDL schema. The schema includes containers (such as the <tt>ReceiptDetails</tt> container in this example), the list of container fields, and the <tt>Actions</tt> list.[anchor|#_ebef16ff-e2a5-4452-abc8-adb7174282a7][anchor|#_b522e631-95e4-478d-9a87-8e17e807edb2][image:Shared/Images/555.png|popup|Viewing an example of the WSDL schema|450px]
With this information, you can start configuring the screen.{br}

Before configuring a screen in the mobile application, you should check how the form looks in the web version of Acumatica ERP to decide how to configure the screen.]]></column>
			<column name="PlainText"><![CDATA[Getting the WSDL Schema You can get the needed information to configure a screen from the WSDL schema, which is available                 on the title bar of the form in  Acumatica ERP through  Tools Web Service  in the UI. To obtain the WSDL schema, perform the following                 steps: In  Acumatica ERP, open the form for which you want information. On the title bar of the form, click  Tools Web Service  in the UI. On the screen with the web service links, click  Service Description , as shown in the following screenshot. Getting the service description for a form See the following screenshot for an example of the WSDL schema. The schema includes containers (such as the  ReceiptDetails  container in this example), the list of container fields, and the  Actions  list. Viewing an example of the WSDL schema With this information, you can start configuring the screen. Before configuring a screen in the mobile application, you should check how the form looks in the web version of  Acumatica ERP to decide how to configure the screen. ]]></column>
		</row>
		<row PageID="e8b287bf-ffbe-4c7f-84a1-894c3bdbac02" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="02c2a54e-4bf6-3a33-a4ef-857accfde3b5" RecordSourceID="22377">
			<column name="Content"><![CDATA[
This topic describes how to configure a screen that contains a list of records.[anchor|#_95fe7b23-bce2-4ef8-b56e-8b142d413547]
==Example: Creating a Simple List View Layout==
A list of records is the simplest screen layout.{br}

To complete an example of configuring the simplest screen layout, copy the code below to an <tt>.xml</tt> file, put the file in the <tt>\App&#95;Data\Mobile</tt> folder of the Acumatica ERP website, and start the mobile application.{{{{&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;sm:SiteMap xmlns:sm="http://acumatica.com/mobilesitemap" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;

    &lt;sm:Screen DisplayName="Expense Receipt" Icon="system://Display1" Id="EP301020" Type="SimpleScreen"&gt;
        &lt;sm:Container FieldsToShow="3" Name="ReceiptDetails"&gt;
            &lt;sm:Field Name="Date" /&gt;
            &lt;sm:Field Name="Description" /&gt;
            &lt;sm:Field Name="ExpenseItem" /&gt;
            &lt;sm:Field Name="TotalAmount" /&gt;

            &lt;sm:Action Behavior="Create" Context="Container" DisplayName="Add" Icon="system://Plus" Name="Insert" /&gt;
            &lt;sm:Action Behavior="Delete" Context="Selection" Icon="system://Trash" Name="Delete" /&gt;
        &lt;/sm:Container&gt;
    &lt;/sm:Screen&gt;
&lt;/sm:SiteMap&gt;
}}}}
This example uses the WSDL schema elements marked in the screenshot below.[anchor|#_a95cd494-d192-47ef-b9e1-63a440b11734][anchor|#_c03e4277-7933-4a6c-9c20-f21ab0ccc2cb][image:StudioDeveloperGuide/Images/555_1.png|WSDL schema elements used in the example]{br}

The following screenshot shows the resulting screen you will see in the mobile application.[anchor|#_7c735848-4442-48c3-a6ce-4808bbf47e92][anchor|#_2c5e781b-4e48-471d-a0e0-b0cc189a5253][image:StudioDeveloperGuide/Images/5-1.png|popup|List view layout |130px]
The <tt>FieldsToShow</tt> attribute of the <tt>sm:Container</tt> tag is used to limit the number of fields for a record that will be shown in the list. You use this attribute only when the same screen description is used for both the list view and form view.{br}

You use the <tt>sm:Action</tt> tag for actions that are available in the UI. (You can get the list of actions from the WSDL schema; see [HelpRoot_Dev_Mobile\MOBILE_BasicInfo|Getting the WSDL Schema].) The <tt>Name</tt> attribute should be set to the name of the action, as found in the WSDL schema.{br}

Actions are divided into standard actions (such as '''Open''', '''Save''', and '''Cancel''') and all other actions (such as '''Void'''). The placement of the standard actions can be different from that of other actions, and some standard actions (such as '''Open''') are not displayed on the UI at all. Whether an action is considered standard depends on the value of the <tt>Behavior</tt> attribute.{br}

The <tt>Context</tt> attribute is used to set the target of the action. For example, you can use an action with {{Context="Selection"}} when the multiple selection of records, as shown in the screenshot below, is activated.[anchor|#_ee404d5b-ab8f-4a40-b01a-213308188709][anchor|#_701e623b-a366-4347-a41d-4bf5ca441524][image:StudioDeveloperGuide/Images/5-2.png|popup|Selection of multiple records|130px]
You use the <tt>Icon</tt> attribute to set the icon that is displayed on the UI.((({S:Warn}See [HelpRoot_Dev_Mobile\MOBILE_sm_Action|&lt;sm:Action&gt;] for more information about the attributes of the <tt>sm:Action</tt> tag.
)))
==Example: Creating a Screen with a Filtered List==
To see an example of configuring a screen with a filtered list, copy the code below to an <tt>.xml</tt> file, put the file in the <tt>\App&#95;Data\Mobile</tt> folder of the Acumatica ERP website, and start the mobile application.{{{{&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;sm:SiteMap xmlns:sm="http://acumatica.com/mobilesitemap" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;

    &lt;sm:Folder DisplayName="Expense Claims" Type="HubFolder" Icon="system://Folder" &gt;

        &lt;sm:Screen Id="EP301030" Type="FilterListScreen" DisplayName="Expense Claims" &gt;

            &lt;sm:Container Name="Selection" &gt;
                &lt;sm:Field Name="Employee" /&gt;
            &lt;/sm:Container&gt;

            &lt;sm:Container Name="Claim" &gt;
                &lt;sm:Field Name="Date" /&gt;
                &lt;sm:Field Name="Status" /&gt;
                &lt;sm:Field Name="Description" /&gt;
                &lt;sm:Field Name="ClaimTotal" /&gt;
            &lt;/sm:Container&gt;
        &lt;/sm:Screen&gt;

    &lt;/sm:Folder&gt;

&lt;/sm:SiteMap&gt;
}}}}
To configure a screen with a filtered list, do the following:[anchor|#_a8009863-3515-4163-ac15-dc746c42069b]
#Specify the screen type: <tt>Type=&ldquo;FilterListScreen&ldquo;</tt>.
#In the WSDL schema, find the container corresponding to the filter, and add it to the screen description ( {{sm:Container Name="Selection"}} in the example above).
#In the WSDL schema, find the container corresponding to the list of records, and add it to the screen description ( {{sm:Container Name="Claim"}} in the example above).

As a result, in the mobile application, the screen will include a button that opens the filter. When you tap the button, you open the form so you can edit the filter fields (see the screenshots below).[anchor|#_144f31b1-fe4f-427f-9fc7-e2503052787d][anchor|#_8f72dd77-7911-4b44-97e9-788c38d3ffcc][image:StudioDeveloperGuide/Images/new-6.png|popup|Use of a filter on a screen|420px]]]></column>
			<column name="PlainText"><![CDATA[Configuring Lists This topic describes how to configure a screen that contains a list of records. Example: Creating a Simple List View Layout A list of records is the simplest screen layout. To complete an example of configuring the simplest screen layout, copy the code below                 to an  .xml  file, put the file in the                      \App_Data\Mobile  folder of the  Acumatica ERP website, and start the mobile application. <?xml version="1.0" encoding="UTF-8"?>
<sm:SiteMap xmlns:sm="http://acumatica.com/mobilesitemap" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

    <sm:Screen DisplayName="Expense Receipt" Icon="system://Display1" Id="EP301020" Type="SimpleScreen">
        <sm:Container FieldsToShow="3" Name="ReceiptDetails">
            <sm:Field Name="Date" />
            <sm:Field Name="Description" />
            <sm:Field Name="ExpenseItem" />
            <sm:Field Name="TotalAmount" />

            <sm:Action Behavior="Create" Context="Container" DisplayName="Add" Icon="system://Plus" Name="Insert" />
            <sm:Action Behavior="Delete" Context="Selection" Icon="system://Trash" Name="Delete" />
        </sm:Container>
    </sm:Screen>
</sm:SiteMap> This example uses the WSDL schema elements marked in the screenshot below. WSDL schema elements used in the example The following screenshot shows the resulting screen you will see in the mobile                 application. List view layout  The  FieldsToShow  attribute of the  sm:Container                  tag is used to limit the number of fields for a record that will be shown in the                 list. You use this attribute only when the same screen description is used for both                 the list view and form view. You use the  sm:Action  tag for actions that are available in the                 UI. (You can get the list of actions from the WSDL schema; see  Getting the WSDL Schema.) The  Name                  attribute should be set to the name of the action, as found in the WSDL schema. Actions are divided into standard actions (such as  Open ,                      Save , and  Cancel ) and all other                 actions (such as  Void ). The placement of the standard actions                 can be different from that of other actions, and some standard actions (such as                      Open ) are not displayed on the UI at all. Whether an                 action is considered standard depends on the value of the                      Behavior  attribute. The  Context  attribute is used to set the target of the action. For                 example, you can use an action with  Context="Selection"  when the                 multiple selection of records, as shown in the screenshot below, is activated. Selection of multiple records You use the  Icon  attribute to set the icon that is displayed on                 the UI. See  &lt;sm:Action&gt; for                     more information about the attributes of the  sm:Action                      tag. Example: Creating a Screen with a Filtered List To see an example of configuring a screen with a filtered list, copy the code below                 to an  .xml  file, put the file in the                      \App_Data\Mobile  folder of the  Acumatica ERP website, and start the mobile application. <?xml version="1.0" encoding="UTF-8"?>
<sm:SiteMap xmlns:sm="http://acumatica.com/mobilesitemap" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

    <sm:Folder DisplayName="Expense Claims" Type="HubFolder" Icon="system://Folder" >

        <sm:Screen Id="EP301030" Type="FilterListScreen" DisplayName="Expense Claims" >

            <sm:Container Name="Selection" >
                <sm:Field Name="Employee" />
            </sm:Container>

            <sm:Container Name="Claim" >
                <sm:Field Name="Date" />
                <sm:Field Name="Status" />
                <sm:Field Name="Description" />
                <sm:Field Name="ClaimTotal" />
            </sm:Container>
        </sm:Screen>

    </sm:Folder>

</sm:SiteMap> To configure a screen with a filtered list, do the following: Specify the screen type:  Type="FilterListScreen" . In the WSDL schema, find the container corresponding to the filter, and add it                     to the screen description (  sm:Container Name="Selection"  in                     the example above). In the WSDL schema, find the container corresponding to the list of records, and                     add it to the screen description (  sm:Container Name="Claim"  in                     the example above). As a result, in the mobile application, the screen will include a button that opens                 the filter. When you tap the button, you open the form so you can edit the filter                 fields (see the screenshots below). Use of a filter on a screen ]]></column>
		</row>
		<row PageID="089f3167-ee1d-4746-af9c-e3d3b19550a5" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="fe245377-d621-40c5-372a-da9cf45652c6" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You have to configure an editing form (that is, a form that is used to enter and edit a data record) based on the use of the form in Acumatica ERP.{br}

In some cases, Acumatica ERP uses a single form to manage data records of a particular type (that is, the ''.aspx'' page contains the <tt>FormView</tt> and <tt>Grid</tt> controls). In these cases, in the mobile site map, you have to configure both the editing form and the list form by using a single declaration of the <tt>sm:Screen</tt> tag.{br}

In other cases, Acumatica ERP uses the following separate forms for data records of a particular type:[anchor|#ul_yxc_d2g_1v]
*A list view (the ''.aspx'' page contains one <tt>Grid</tt> control) to manage records
*A form view (the ''.aspx'' page with one <tt>FormView</tt> control) to edit fields
In these cases, you have to configure two separate declarations of the <tt>sm:Screen</tt> tag: one for the list form, and another for the editing form.
==Example: Creating the Same Layout for the Editing Form and the List==
To see an example of configuring an editing form to use the same layout as a list does, copy the code below to an <tt>.xml</tt> file, put the file in the <tt>\App&#95;Data\Mobile</tt> folder of the Acumatica ERP website, and start the mobile application.{{{{&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;sm:SiteMap xmlns:sm="http://acumatica.com/mobilesitemap" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;

    &lt;sm:Screen DisplayName="Expense Receipt" Icon="system://Display1" Id="EP301020" Type="SimpleScreen"&gt;
        &lt;sm:Container FieldsToShow="3" Name="ReceiptDetails"&gt;
            &lt;sm:Field Name="Date" /&gt;
            &lt;sm:Field Name="Description" /&gt;
            &lt;sm:Field Name="ExpenseItem" /&gt;
            &lt;sm:Field Name="TotalAmount" /&gt;

            &lt;sm:Action Behavior="Save" Context="Record" Name="Save" /&gt;
            &lt;sm:Action Behavior="Cancel" Context="Record" Name="Cancel" /&gt;

            &lt;sm:Action Behavior="Create" Context="Container" DisplayName="Add" Icon="system://Plus" Name="Insert" /&gt;
            &lt;sm:Action Behavior="Delete" Context="Selection" Icon="system://Trash" Name="Delete" /&gt;
        &lt;/sm:Container&gt;
    &lt;/sm:Screen&gt;
&lt;/sm:SiteMap&gt;
}}}}
This example is almost identical to [HelpRoot_Dev_Mobile\MOBILE_ConfiguringLists#_95fe7b23-bce2-4ef8-b56e-8b142d413547|Example: Creating a Simple List View Layout], except that it adds two actions, '''Save''' and '''Cancel''', which you need to save or cancel changes to a data record.
==Example: Configuring the List and the Editing Form Separately==
To see an example of configuring the editing form differently than you do a list form, copy the code below to an <tt>.xml</tt> file, put the file in the <tt>\App&#95;Data\Mobile</tt> folder of the Acumatica ERP website, and start the mobile application.{{{{&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;sm:SiteMap xmlns:sm="http://acumatica.com/mobilesitemap" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;

    &lt;sm:Folder DisplayName="Expense Receipts" Type="HubFolder" Icon="system://NewsPaper" &gt;
        &lt;sm:Screen Id="EP301010" Type="SimpleScreen" DisplayName="Expense Receipts" &gt;
            &lt;sm:Container Name="ExpenseReceipts" &gt;
                &lt;sm:Field Name="Date" /&gt;
                &lt;sm:Field Name="ClaimAmount" /&gt;
                &lt;sm:Field Name="DescriptionTranDesc" /&gt;
                &lt;sm:Field Name="Currency" /&gt;

                &lt;sm:Action Name="addNew" Context="Container" Behavior="Create" Redirect="true" Icon="system://Plus" /&gt;
                &lt;sm:Action Name="editDetail" Context="Container" Behavior="Open" Redirect="true" /&gt;
                &lt;sm:Action Name="Delete" Context="Selection" Behavior="Delete" Icon="system://Trash" /&gt;
            &lt;/sm:Container&gt;
        &lt;/sm:Screen&gt;
    &lt;/sm:Folder&gt;

    &lt;sm:Screen Id="EP301020" Type="SimpleScreen" Icon="system://Display1" DisplayName="Expense Receipt" Visible="false" OpenAs="Form"&gt;
        &lt;sm:Container Name="ReceiptDetails" &gt;
            &lt;sm:Field Name="Date" /&gt;
            &lt;sm:Field Name="Description" /&gt;
            &lt;sm:Field Name="ExpenseItem" /&gt;
            &lt;sm:Field Name="TotalAmount" /&gt;

            &lt;sm:Action Name="Save" Context="Record" Behavior="Save" /&gt;
            &lt;sm:Action Name="Cancel" Context="Record" Behavior="Cancel" /&gt;
        &lt;/sm:Container&gt;
    &lt;/sm:Screen&gt;
&lt;/sm:SiteMap&gt;
}}}}
In this example, you use the ''EP301010'' screen to display the list form, and you use the ''EP301020'' screen to display the editing form. The same approach is used in Acumatica ERP.{br}

To hide the editing form from the main menu of the mobile application, set the <tt>Visible</tt> attribute to ''false'' for the <tt>sm:Screen</tt> tag; see the ''EP301020'' screen configuration above.{br}

In the list form (''EP301010''), you find two actions that can be invoked to open the editing form for a data record: {{Behavior="Create"}} and {{Behavior="Open"}}. The {{Redirect="true"}} attribute indicates that the editing form needs to be opened as a different screen. The actual screen that will be opened is determined by the server logic.]]></column>
			<column name="PlainText"><![CDATA[Configuring Editing Forms You have to configure an editing form (that is, a form that is used to enter and edit a             data record) based on the use of the form in  Acumatica ERP. In some cases,  Acumatica ERP uses a single form to manage data records of a particular type (that is, the                  .aspx  page contains the  FormView  and                  Grid  controls). In these cases, in the mobile site map, you have             to configure both the editing form and the list form by using a single declaration of             the  sm:Screen  tag. In other cases,  Acumatica ERP uses the following separate forms for data records of a particular type: A list view (the  .aspx  page contains one  Grid  control)                     to manage records A form view (the  .aspx  page with one  FormView  control)                     to edit fields In these cases, you have to configure two separate declarations of the                  sm:Screen  tag: one for the list form, and another for the editing             form. Example: Creating the Same Layout for the Editing Form and the List To see an example of configuring an editing form to use the same layout as a list                 does, copy the code below to an  .xml  file, put the file in the                      \App_Data\Mobile  folder of the  Acumatica ERP website, and start the mobile application. <?xml version="1.0" encoding="UTF-8"?>
<sm:SiteMap xmlns:sm="http://acumatica.com/mobilesitemap" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

    <sm:Screen DisplayName="Expense Receipt" Icon="system://Display1" Id="EP301020" Type="SimpleScreen">
        <sm:Container FieldsToShow="3" Name="ReceiptDetails">
            <sm:Field Name="Date" />
            <sm:Field Name="Description" />
            <sm:Field Name="ExpenseItem" />
            <sm:Field Name="TotalAmount" />

            <sm:Action Behavior="Save" Context="Record" Name="Save" />
            <sm:Action Behavior="Cancel" Context="Record" Name="Cancel" />

            <sm:Action Behavior="Create" Context="Container" DisplayName="Add" Icon="system://Plus" Name="Insert" />
            <sm:Action Behavior="Delete" Context="Selection" Icon="system://Trash" Name="Delete" />
        </sm:Container>
    </sm:Screen>
</sm:SiteMap> This example is almost identical to  Example: Creating a Simple List View Layout, except that it adds two actions,  Save  and                      Cancel , which you need to save or cancel changes to a                 data record. Example: Configuring the List and the Editing Form Separately To see an example of configuring the editing form differently than you do a list                 form, copy the code below to an  .xml  file, put the file in the                      \App_Data\Mobile  folder of the  Acumatica ERP website, and start the mobile application. <?xml version="1.0" encoding="UTF-8"?>
<sm:SiteMap xmlns:sm="http://acumatica.com/mobilesitemap" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

    <sm:Folder DisplayName="Expense Receipts" Type="HubFolder" Icon="system://NewsPaper" >
        <sm:Screen Id="EP301010" Type="SimpleScreen" DisplayName="Expense Receipts" >
            <sm:Container Name="ExpenseReceipts" >
                <sm:Field Name="Date" />
                <sm:Field Name="ClaimAmount" />
                <sm:Field Name="DescriptionTranDesc" />
                <sm:Field Name="Currency" />

                <sm:Action Name="addNew" Context="Container" Behavior="Create" Redirect="true" Icon="system://Plus" />
                <sm:Action Name="editDetail" Context="Container" Behavior="Open" Redirect="true" />
                <sm:Action Name="Delete" Context="Selection" Behavior="Delete" Icon="system://Trash" />
            </sm:Container>
        </sm:Screen>
    </sm:Folder>

    <sm:Screen Id="EP301020" Type="SimpleScreen" Icon="system://Display1" DisplayName="Expense Receipt" Visible="false" OpenAs="Form">
        <sm:Container Name="ReceiptDetails" >
            <sm:Field Name="Date" />
            <sm:Field Name="Description" />
            <sm:Field Name="ExpenseItem" />
            <sm:Field Name="TotalAmount" />

            <sm:Action Name="Save" Context="Record" Behavior="Save" />
            <sm:Action Name="Cancel" Context="Record" Behavior="Cancel" />
        </sm:Container>
    </sm:Screen>
</sm:SiteMap> In this example, you use the  EP301010  screen to display the list form, and you                 use the  EP301020  screen to display the editing form. The same approach is                 used in  Acumatica ERP. To hide the editing form from the main menu of the mobile application, set the                      Visible  attribute to  false  for the                      sm:Screen  tag; see the  EP301020  screen configuration                 above. In the list form ( EP301010 ), you find two actions that can be invoked to open                 the editing form for a data record:  Behavior="Create"  and                      Behavior="Open" . The  Redirect="true"  attribute                 indicates that the editing form needs to be opened as a different screen. The actual                 screen that will be opened is determined by the server logic. ]]></column>
		</row>
		<row PageID="ad60cae3-691f-4c19-a17b-e7586bc59f73" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="ad27547b-ec67-00a7-e880-dd27437265ea" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The user can create and view an Acumatica Report                         Designer report through the mobile app, if the following conditions are met:[anchor|#_64350574-e013-4174-9a5b-9472f169d569]
*The report form is implemented in Acumatica ERP.
*The report form metadata is added to the mobile site map.
*The user is granted the access rights to the report.
{br}

To map a report form, you have to add to the mobile site map the <tt>sm:Screen</tt> tag with the <tt>Id</tt> attribute set to the report form ID and the <tt>Type</tt> attribute set to ''Report''. The following example provides mapping of the Shipment Summary report (SO620500).{{{{...
&lt;sm:Screen DisplayName="Shipment Summary" Icon="system://Credit" Id="SO620500" Type="Report"/&gt;
...
}}}}((({S:Warn}In the mobile site map, you cannot define the content of a report form, for example, to change the set of parameters or the form layout. The ''Report'' type of the screen forces the system to map the screen as is without changes. Therefore, within the <tt>sm:Screen</tt> tag with the <tt>Type</tt> attribute set to ''Report'', a nested tag is ignored.
))){br}

The following screenshot displays a screen of the ''Report'' type with the <tt>DisplayName</tt> attribute set to ''Test Report''.[anchor|#_77ac6e97-a66f-441b-a98b-a1764a950661][anchor|#_2fdba573-88a9-4eca-98ac-835d3fe63953][image:StudioDeveloperGuide/Images/MOBILE_MappingReports_00.png|popup|Viewing a report screen|130px]On the screenshot, the red button corresponds to the '''Run Report''' button of the report in Acumatica ERP.{br}

In the main menu of the mobile app, to organize report screens, you can create a special folder of the ''ListFolder'' type and include in the folder the links to multiple reports, as in the following example.{{{{...
&lt;sm:Folder DisplayName="Reports" Icon="system://Folder" Type="ListFolder"&gt;
    &lt;sm:Screen DisplayName="Test Report" Icon="system://Clock" Id="CR621010" Type="Report"/&gt;
    &lt;sm:Screen DisplayName="Sales Order Summary" Icon="system://Cash" Id="SO610500" Type="Report"/&gt;
    &lt;sm:Screen DisplayName="Shipment Summary" Icon="system://Credit" Id="SO620500" Type="Report"/&gt;
&lt;/sm:Folder&gt;
...
}}}}
==Using an Action to Generate a Report==
The system supports the Acumatica ERP actions that generate reports. To enable such action for a business entity in the mobile app, you should map the action, for example, in the entry form for the entity. In the mobile site map, the <tt>sm:Action</tt> tag has to contain the <tt>Redirect</tt> attribute set to ''true'', as in the following example.{{{{...
&lt;sm:Screen DisplayName="Sales Orders"&gt;
...
  &lt;sm:Container Name="OrderSummary"&gt;
...
    &lt;sm:Action Behavior="Record" Context="Record" Name="PrintSalesOrderQuoteReport" Redirect="true"/&gt;
...
  &lt;/sm:Container&gt;
...
&lt;/sm:Screen&gt;
}}}}[anchor|#_fab8c87f-33d8-4c45-bc16-f09e1691d30c][anchor|#_16fa4d07-d3df-440b-be3e-39c09a5bbfb6][image:StudioDeveloperGuide/Images/MOBILE_MappingReports_01.png|popup|Viewing the report action button on the Sales Orders screen|130px]((({S:Warn}For a report action, the appropriate report form must be mapped because the action uses this form to create the report.
))){br}

Once the action is performed by using the mobile app, the app immediately receives the corresponding report in PDF format from the Acumatica ERP server and displays the report for the user, as shown in the following screenshot.[anchor|#_6cdfa118-9b4f-4918-b358-6b935d817cc0][anchor|#_bdc4369f-9679-4d33-80b0-1f467b0ea81f][image:StudioDeveloperGuide/Images/MOBILE_MappingReports_02.png|popup|Viewing the report|130px]]]></column>
			<column name="PlainText"><![CDATA[Mapping Reports The user can create and view an  Acumatica Report                         Designer report through the mobile app, if the following conditions are met: The report form is implemented in  Acumatica ERP. The report form metadata is added to the mobile site map. The user is granted the access rights to the report. To map a report form, you have to add to the mobile site map the  sm:Screen        tag with the  Id  attribute set to the report form ID and the          Type  attribute set to  Report . The following example provides       mapping of the Shipment Summary report         (SO620500). ...
<sm:Screen DisplayName="Shipment Summary" Icon="system://Credit" Id="SO620500" Type="Report"/>
... In         the mobile site map, you cannot define the content of a report form, for example, to change         the set of parameters or the form layout. The  Report  type of the screen forces the         system to map the screen as is without changes. Therefore, within the            sm:Screen  tag with the  Type  attribute set to            Report , a nested tag is ignored. The following screenshot displays a screen of the  Report  type with the          DisplayName  attribute set to  Test Report . Viewing a report screen On the screenshot, the red button corresponds to the  Run Report        button of the report in  Acumatica ERP. In the main menu of the mobile app, to organize report screens, you can create a special       folder of the  ListFolder  type and include in the folder the links to multiple reports,       as in the following       example. ...
<sm:Folder DisplayName="Reports" Icon="system://Folder" Type="ListFolder">
    <sm:Screen DisplayName="Test Report" Icon="system://Clock" Id="CR621010" Type="Report"/>
    <sm:Screen DisplayName="Sales Order Summary" Icon="system://Cash" Id="SO610500" Type="Report"/>
    <sm:Screen DisplayName="Shipment Summary" Icon="system://Credit" Id="SO620500" Type="Report"/>
</sm:Folder>
... Using an Action to Generate a Report The system supports the  Acumatica ERP actions that generate reports. To enable such action for a business entity in the mobile         app, you should map the action, for example, in the entry form for the entity. In the mobile         site map, the  sm:Action  tag has to contain the            Redirect  attribute set to  true , as in the following           example. ...
<sm:Screen DisplayName="Sales Orders">
...
  <sm:Container Name="OrderSummary">
...
    <sm:Action Behavior="Record" Context="Record" Name="PrintSalesOrderQuoteReport" Redirect="true"/>
...
  </sm:Container>
...
</sm:Screen> Viewing the report action button on the Sales Orders screen For a report action, the appropriate report form must be mapped because the           action uses this form to create the report. Once the action is performed by using the mobile app, the app immediately receives the         corresponding report in PDF format from the Acumatica ERP server and displays the report for         the user, as shown in the following screenshot. Viewing the report ]]></column>
		</row>
		<row PageID="4fccbb78-66c6-43f0-99f9-d345dc642a2a" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="01621e31-607e-31c0-7fef-a1d60ff24e0d" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can add a dashboard to the mobile site map. To do this, you have to add to the mobile site map the <tt>sm:Screen</tt> tag with the <tt>Id</tt> attribute set to the dashboard form ID and the <tt>Type</tt> attribute set to ''Dashboard''. The following example provides mapping of three dashboard screens for the mobile app.{{{{...
&lt;sm:Folder DisplayName="Dashboards" Icon="system://Folder" Type="ListFolder"&gt;
  &lt;sm:Screen DisplayName="Controller" Icon="system://Graph1" Id="DH000025" Type="Dashboard" /&gt;
  &lt;sm:Screen DisplayName="Financial" Icon="system://Graph1" Id="DH000045" Type="Dashboard" /&gt;
  &lt;sm:Screen DisplayName="Sales Manager" Icon="system://Graph1" Id="DH000005" Type="Dashboard" /&gt;
&lt;/sm:Folder&gt;
...
}}}}{br}

A screen of the ''Dashboard'' type can display the following types of dashboard widgets:[anchor|#_f418e9fe-a443-48c7-bb46-3cfa4fe047d8]
*Chart
*Data Table
*Score Card
*Trend Card
Widgets of other types will be hidden.{br}

If you click a dashboard widget, the mobile app tries to open the appropriate screen. If the screen is absent in the mobile site map, the mobile app displays a warning.{br}

The following screenshot displays a screen for the Sales Manager dashboard page that is defined in an instance of Acumatica ERP.[anchor|#_77ac6e97-a66f-441b-a98b-a1764a950661][anchor|#_2fdba573-88a9-4eca-98ac-835d3fe63953][image:StudioDeveloperGuide/Images/MOBILE_MappingDashboards_00.png|popup|Viewing a dashboard screen|130px]]]></column>
			<column name="PlainText"><![CDATA[Mapping Dashboards You can add a dashboard to the mobile site map. To do this, you have to add to the mobile       site map the  sm:Screen  tag with the  Id  attribute set to       the dashboard form ID and the  Type  attribute set to  Dashboard . The       following example provides mapping of three dashboard screens for the mobile       app. ...
<sm:Folder DisplayName="Dashboards" Icon="system://Folder" Type="ListFolder">
  <sm:Screen DisplayName="Controller" Icon="system://Graph1" Id="DH000025" Type="Dashboard" />
  <sm:Screen DisplayName="Financial" Icon="system://Graph1" Id="DH000045" Type="Dashboard" />
  <sm:Screen DisplayName="Sales Manager" Icon="system://Graph1" Id="DH000005" Type="Dashboard" />
</sm:Folder>
... A screen of the  Dashboard  type can display the following types of dashboard         widgets: Chart Data Table Score Card Trend Card Widgets of other types will be hidden. If you click a dashboard widget, the mobile app tries to open the appropriate screen. If the       screen is absent in the mobile site map, the mobile app displays a warning. The following screenshot displays a screen for the Sales Manager dashboard page that is       defined in an instance of  Acumatica ERP. Viewing a dashboard screen ]]></column>
		</row>
		<row PageID="1ee7cd7b-7f4c-4f06-9129-b3a72772e671" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="2f3780eb-e6b2-c4b7-929d-bdef7b2b0e41" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can combine fields into groups, as the following example shows, to make data entry more logical and intuitive.
==Example: Grouping Fields==
To see an example of grouping fields into groups, copy the code below to an <tt>.xml</tt> file, put the file in the <tt>\App&#95;Data\Mobile</tt> folder of the Acumatica ERP website, and start the mobile application.{{{{&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;sm:SiteMap xmlns:sm="http://acumatica.com/mobilesitemap" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;

    &lt;sm:Folder DisplayName="Expense Receipts" Type="HubFolder" Icon="system://NewsPaper" &gt;
        &lt;sm:Screen Id="EP301010" Type="SimpleScreen" DisplayName="Expense Receipts" &gt;
            &lt;sm:Container Name="ExpenseReceipts" &gt;
                &lt;sm:Field Name="Date" /&gt;
                &lt;sm:Field Name="ClaimAmount" /&gt;
                &lt;sm:Field Name="DescriptionTranDesc" /&gt;
                &lt;sm:Field Name="Currency" /&gt;

                &lt;sm:Action Name="addNew" Context="Container" Behavior="Create" Redirect="true" Icon="system://Plus" /&gt;
                &lt;sm:Action Name="editDetail" Context="Container" Behavior="Open" Redirect="true" /&gt;
                &lt;sm:Action Name="Delete" Context="Selection" Behavior="Delete" Icon="system://Trash" /&gt;
            &lt;/sm:Container&gt;
        &lt;/sm:Screen&gt;
    &lt;/sm:Folder&gt;

    &lt;sm:Screen Id="EP301020" Type="SimpleScreen" Icon="system://Display1" DisplayName="Expense Receipt" Visible="false" OpenAs="Form"&gt;
        &lt;sm:Container Name="ReceiptDetails" &gt;
            &lt;sm:Field Name="Date" /&gt;
            &lt;sm:Field Name="Description" /&gt;

            &lt;sm:Group DisplayName="Details" Collapsable="true" Collapsed="true"&gt;
                &lt;sm:Field Name="ExpenseItem" /&gt;
                &lt;sm:Field Name="TotalAmount" /&gt;
            &lt;/sm:Group&gt;

            &lt;sm:Action Name="Save" Context="Record" Behavior="Save" /&gt;
            &lt;sm:Action Name="Cancel" Context="Record" Behavior="Cancel" /&gt;
        &lt;/sm:Container&gt;
    &lt;/sm:Screen&gt;
&lt;/sm:SiteMap&gt;
}}}}
While entering data, the user may collapse or expand a particular group of fields. You can prevent a group from being collapsed by setting the <tt>Collapsable</tt> attribute of the group to ''false'' (by default, the attribute value is ''true''). If a group is collapsible (the <tt>Collapsable</tt> attribute is set to ''true''), the <tt>Collapsed</tt> attribute indicates whether a group is initially collapsed (by default, the attribute value is ''false'').{br}

You can see the result in the mobile application in the following screenshots.[anchor|#image_qgv_tg1_wq][image:StudioDeveloperGuide/Images/new-9.png|popup|A collapsible group on a screen|280px]The left screenshot shows the '''Details''' group that is initially collapsed. If the user clicks on the header of the group, the group will expand, as shown in the right screenshot.]]></column>
			<column name="PlainText"><![CDATA[Grouping Fields on a Form You can combine fields into groups, as the following example shows, to make data entry             more logical and intuitive. Example: Grouping Fields To see an example of grouping fields into                 groups, copy the code below to an  .xml  file, put the file in                 the  \App_Data\Mobile  folder of the  Acumatica ERP website, and start the mobile                 application. <?xml version="1.0" encoding="UTF-8"?>
<sm:SiteMap xmlns:sm="http://acumatica.com/mobilesitemap" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

    <sm:Folder DisplayName="Expense Receipts" Type="HubFolder" Icon="system://NewsPaper" >
        <sm:Screen Id="EP301010" Type="SimpleScreen" DisplayName="Expense Receipts" >
            <sm:Container Name="ExpenseReceipts" >
                <sm:Field Name="Date" />
                <sm:Field Name="ClaimAmount" />
                <sm:Field Name="DescriptionTranDesc" />
                <sm:Field Name="Currency" />

                <sm:Action Name="addNew" Context="Container" Behavior="Create" Redirect="true" Icon="system://Plus" />
                <sm:Action Name="editDetail" Context="Container" Behavior="Open" Redirect="true" />
                <sm:Action Name="Delete" Context="Selection" Behavior="Delete" Icon="system://Trash" />
            </sm:Container>
        </sm:Screen>
    </sm:Folder>

    <sm:Screen Id="EP301020" Type="SimpleScreen" Icon="system://Display1" DisplayName="Expense Receipt" Visible="false" OpenAs="Form">
        <sm:Container Name="ReceiptDetails" >
            <sm:Field Name="Date" />
            <sm:Field Name="Description" />

            <sm:Group DisplayName="Details" Collapsable="true" Collapsed="true">
                <sm:Field Name="ExpenseItem" />
                <sm:Field Name="TotalAmount" />
            </sm:Group>

            <sm:Action Name="Save" Context="Record" Behavior="Save" />
            <sm:Action Name="Cancel" Context="Record" Behavior="Cancel" />
        </sm:Container>
    </sm:Screen>
</sm:SiteMap> While                 entering data, the user may collapse or expand a particular group of fields. You can                 prevent a group from being collapsed by setting the  Collapsable                  attribute of the group to  false  (by default, the attribute value is                      true ). If a group is collapsible (the  Collapsable                  attribute is set to  true ), the  Collapsed  attribute                 indicates whether a group is initially collapsed (by default, the attribute value is                      false ). You can see the result in the mobile application in the                 following screenshots. A collapsible group on a screen The left screenshot shows the  Details  group that is             initially collapsed. If the user clicks on the header of the group, the group will             expand, as shown in the right screenshot. ]]></column>
		</row>
		<row PageID="37205b0a-b4d9-4b2c-be4a-3c53112cccd0" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="88de0569-960e-2f54-25e9-7c1d54bd8b2c" RecordSourceID="22377">
			<column name="Content"><![CDATA[
By default, the mobile application enables attachments and displays them on a screen if the screen supports the attachments. However, the default handling of attachments can be overridden.
==Example: Configuring a Screen with Attachments==
To see an example of changing the way attachments are handled, copy the code below to an <tt>.xml</tt> file, put the file in the <tt>\App&#95;Data\Mobile</tt> folder of the Acumatica ERP website, and start the mobile application.{{{{&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;sm:SiteMap xmlns:sm="http://acumatica.com/mobilesitemap" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;

    &lt;sm:Folder DisplayName="Expense Receipts" Type="HubFolder" Icon="system://NewsPaper" &gt;
        &lt;sm:Screen Id="EP301010" Type="SimpleScreen" DisplayName="Expense Receipts" &gt;
            &lt;sm:Container Name="ExpenseReceipts" &gt;
                &lt;sm:Field Name="Date" /&gt;
                &lt;sm:Field Name="ClaimAmount" /&gt;
                &lt;sm:Field Name="DescriptionTranDesc" /&gt;
                &lt;sm:Field Name="Currency" /&gt;

                &lt;sm:Action Name="addNew" Context="Container" Behavior="Create" Redirect="true" Icon="system://Plus" /&gt;
                &lt;sm:Action Name="editDetail" Context="Container" Behavior="Open" Redirect="true" /&gt;
                &lt;sm:Action Name="Delete" Context="Selection" Behavior="Delete" Icon="system://Trash" /&gt;
            &lt;/sm:Container&gt;
        &lt;/sm:Screen&gt;
    &lt;/sm:Folder&gt;

    &lt;sm:Screen Id="EP301020" Type="SimpleScreen" Icon="system://Display1" DisplayName="Expense Receipt" Visible="false" OpenAs="Form"&gt;
        &lt;sm:Container Name="ReceiptDetails" AttachmentsControlPriority="75"&gt;

            &lt;sm:Attachments Disabled="false"&gt;
                &lt;sm:Type Extension="jpg" /&gt;
                &lt;sm:Type Extension="png" /&gt;
                &lt;sm:Type Extension="pdf" /&gt;
            &lt;/sm:Attachments&gt;

            &lt;sm:Field Name="Date" FormPriority="90"/&gt;
            &lt;sm:Field Name="Description" FormPriority="80" /&gt;
            &lt;sm:Field Name="ExpenseItem" FormPriority="70" /&gt;
            &lt;sm:Field Name="TotalAmount" FormPriority="60" /&gt;

            &lt;sm:Action Name="Save" Context="Record" Behavior="Save" /&gt;
            &lt;sm:Action Name="Cancel" Context="Record" Behavior="Cancel" /&gt;
        &lt;/sm:Container&gt;
    &lt;/sm:Screen&gt;
&lt;/sm:SiteMap&gt;
}}}}((({S:Warn} If a screen does not support attachments, the attachments will not be displayed even if you specify {{<sm:Attachments Disabled="false">}}.
)))
You specify the position of the attachments by using the <tt>AttachmentsControlPriority</tt> container attribute and the <tt>FormPriority</tt> field attribute. The fields and attachments are aligned vertically according to the priority—the higher the priority, the higher the element&rsquo;s position.{br}

To disable attachments and configure the file types that are allowed, you use the <tt>sm:Attachments</tt> tag inside the <tt>sm:Container</tt> tag.{br}

The screenshot below shows the resulting screen in the mobile application.[anchor|#image_nyk_n31_wq][image:StudioDeveloperGuide/Images/10-1.png|popup|A screen with attachments|130px]
==Enhancing Images Taken from the Camera==
The functionality of enhancing images taken from the camera of a mobile device is implemented in the Acumatica mobile app. This image enhancement makes the image look better and more readable. This functionality is useful for photos of expense receipts that may be attached to documents in Acumatica ERP.{br}

To switch on image enhancement in the Acumatica mobile app, you should set the <tt>ImageAdjustmentPreset</tt> attribute to ''Receipt'' in the <tt>sm:Attachments</tt> tag of the mobile site map as follows:{{{{&lt;sm:Attachments ImageAdjustmentPreset="Receipt"/&gt;
}}}}When the <tt>ImageAdjustmentPreset</tt> attribute is set to ''Receipt'', a special camera mode is switched on in the Acumatica mobile app. In this mode, the following enhancements of the image captured by the camera are preformed automatically:[anchor|#_a061ca84-29f0-4fd4-bce2-c41ec964a1ef]
*The image is cropped by the bounding box of the detected edges.
*The image distortion is removed.
*The image is converted into black and white.
*The contrast of the image is maximized.

If the <tt>ImageAdjustmentPreset</tt> attribute is not specified or has another value, the Acumatica mobile app attaches an original image taken from the camera.]]></column>
			<column name="PlainText"><![CDATA[Configuring Attachments By default, the mobile application enables attachments and displays them on a screen if the       screen supports the attachments. However, the default handling of attachments can be       overridden. Example: Configuring a Screen with Attachments To see an example of changing the way attachments are handled, copy the code below to an            .xml  file, put the file in the  \App_Data\Mobile          folder of the  Acumatica ERP website, and start the mobile application. <?xml version="1.0" encoding="UTF-8"?>
<sm:SiteMap xmlns:sm="http://acumatica.com/mobilesitemap" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

    <sm:Folder DisplayName="Expense Receipts" Type="HubFolder" Icon="system://NewsPaper" >
        <sm:Screen Id="EP301010" Type="SimpleScreen" DisplayName="Expense Receipts" >
            <sm:Container Name="ExpenseReceipts" >
                <sm:Field Name="Date" />
                <sm:Field Name="ClaimAmount" />
                <sm:Field Name="DescriptionTranDesc" />
                <sm:Field Name="Currency" />

                <sm:Action Name="addNew" Context="Container" Behavior="Create" Redirect="true" Icon="system://Plus" />
                <sm:Action Name="editDetail" Context="Container" Behavior="Open" Redirect="true" />
                <sm:Action Name="Delete" Context="Selection" Behavior="Delete" Icon="system://Trash" />
            </sm:Container>
        </sm:Screen>
    </sm:Folder>

    <sm:Screen Id="EP301020" Type="SimpleScreen" Icon="system://Display1" DisplayName="Expense Receipt" Visible="false" OpenAs="Form">
        <sm:Container Name="ReceiptDetails" AttachmentsControlPriority="75">

            <sm:Attachments Disabled="false">
                <sm:Type Extension="jpg" />
                <sm:Type Extension="png" />
                <sm:Type Extension="pdf" />
            </sm:Attachments>

            <sm:Field Name="Date" FormPriority="90"/>
            <sm:Field Name="Description" FormPriority="80" />
            <sm:Field Name="ExpenseItem" FormPriority="70" />
            <sm:Field Name="TotalAmount" FormPriority="60" />

            <sm:Action Name="Save" Context="Record" Behavior="Save" />
            <sm:Action Name="Cancel" Context="Record" Behavior="Cancel" />
        </sm:Container>
    </sm:Screen>
</sm:SiteMap>  If a screen does not support attachments, the attachments will not be displayed even if         you specify  <sm:Attachments Disabled="false"> . You specify the position of the attachments by using the            AttachmentsControlPriority  container attribute and the            FormPriority  field attribute. The fields and attachments are aligned         vertically according to the priority—the higher the priority, the higher the element's         position. To disable attachments and configure the file types that are allowed, you use the            sm:Attachments  tag inside the  sm:Container  tag. The screenshot below shows the resulting screen in the mobile application. A screen with attachments Enhancing Images Taken from the Camera The functionality of                 enhancing images taken from the camera of a mobile device is implemented in the  Acumatica mobile app. This image enhancement makes the image look better and more readable.                 This functionality is useful for photos of expense receipts that may be attached to                 documents in  Acumatica ERP. To switch on image enhancement in the  Acumatica mobile app, you should set the  ImageAdjustmentPreset  attribute                 to  Receipt  in the  sm:Attachments  tag of the mobile site                 map as                 follows: <sm:Attachments ImageAdjustmentPreset="Receipt"/> When             the  ImageAdjustmentPreset  attribute is set to  Receipt , a             special camera mode is switched on in the  Acumatica mobile app. In this mode, the following enhancements of the image captured by the             camera are preformed automatically: The image is cropped by the bounding box of the detected edges. The image distortion is removed. The image is converted into black and white. The contrast of the image is maximized. If the  ImageAdjustmentPreset  attribute is not specified or                 has another value, the  Acumatica mobile app attaches an original image taken from the camera. ]]></column>
		</row>
		<row PageID="63e43f6d-7379-43df-9d76-4392bd15dfab" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="90c15e5d-2554-2e15-2f60-247b2efc5b59" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can configure selector fields to be displayed as pop-up windows or grids.
==Example: Configuring a Screen with Selectors==
To see an example of configuring a selector field, copy the code below to an <tt>.xml</tt> file, put the file in the <tt>\App&#95;Data\Mobile</tt> folder of the Acumatica ERP website, and start the mobile application.{{{{&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;sm:SiteMap xmlns:sm="http://acumatica.com/mobilesitemap" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;

    &lt;sm:Folder DisplayName="Expense Receipts" Type="HubFolder" Icon="system://NewsPaper" &gt;
        &lt;sm:Screen Id="EP301010" Type="SimpleScreen" DisplayName="Expense Receipts" &gt;
            &lt;sm:Container Name="ExpenseReceipts" &gt;
                &lt;sm:Field Name="Date" /&gt;
                &lt;sm:Field Name="ClaimAmount" /&gt;
                &lt;sm:Field Name="DescriptionTranDesc" /&gt;
                &lt;sm:Field Name="Currency" /&gt;

                &lt;sm:Action Name="addNew" Context="Container" Behavior="Create" Redirect="true" Icon="system://Plus" /&gt;
                &lt;sm:Action Name="editDetail" Context="Container" Behavior="Open" Redirect="true" /&gt;
                &lt;sm:Action Name="Delete" Context="Selection" Behavior="Delete" Icon="system://Trash" /&gt;
            &lt;/sm:Container&gt;
        &lt;/sm:Screen&gt;
    &lt;/sm:Folder&gt;

    &lt;sm:Screen Id="EP301020" Type="SimpleScreen" Icon="system://Display1" DisplayName="Expense Receipt" Visible="false" OpenAs="Form"&gt;
        &lt;sm:Container Name="ReceiptDetails" &gt;

            &lt;sm:Field Name="Date" /&gt;
            &lt;sm:Field Name="Description" /&gt;

            &lt;sm:Field Name="ExpenseItem" &gt;
                &lt;sm:SelectorContainer FieldsToShow="2" PickerType="Detached"&gt;
                    &lt;sm:Field Name="InventoryID" /&gt;
                    &lt;sm:Field Name="Description" /&gt;
                &lt;/sm:SelectorContainer&gt;
            &lt;/sm:Field&gt;

            &lt;sm:Field Name="Currency" &gt;
                &lt;sm:SelectorContainer PickerType="Attached"&gt;
                    &lt;sm:Field Name="CurrencyID" /&gt;
                &lt;/sm:SelectorContainer&gt;
            &lt;/sm:Field&gt;

            &lt;sm:Action Name="Save" Context="Record" Behavior="Save" /&gt;
            &lt;sm:Action Name="Cancel" Context="Record" Behavior="Cancel" /&gt;
        &lt;/sm:Container&gt;
    &lt;/sm:Screen&gt;
&lt;/sm:SiteMap&gt;
}}}}
To configure a selector field, you use the <tt>sm:SelectorContainer</tt> tag inside the <tt>sm:Field</tt> tag. The <tt>PickerType</tt> attribute specifies which of the two ways the selector should be displayed.{br}

A selector with {{PickerType="Attached"}} is displayed as a pop-up window (see the screenshot below).[anchor|#image_tlb_nj1_wq][image:StudioDeveloperGuide/Images/11-1.png|popup|A selector as a pop-up window|130px]
A selector with {{PickerType="Detached"}} is displayed as a grid (as shown in the screenshot below). You can configure the fields to display by adding nested <tt>sm:Field</tt> tags.[anchor|#image_epb_vj1_wq][image:StudioDeveloperGuide/Images/11-2.png|popup|A selector as a grid|130px]]]></column>
			<column name="PlainText"><![CDATA[Configuring Selectors You can configure selector fields to be displayed as pop-up windows or grids. Example: Configuring a Screen with Selectors To see an example of configuring a selector field, copy the code below to an       .xml  file, put the file in the  \App_Data\Mobile      folder of the  Acumatica ERP     website, and start the mobile application. <?xml version="1.0" encoding="UTF-8"?>
<sm:SiteMap xmlns:sm="http://acumatica.com/mobilesitemap" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

    <sm:Folder DisplayName="Expense Receipts" Type="HubFolder" Icon="system://NewsPaper" >
        <sm:Screen Id="EP301010" Type="SimpleScreen" DisplayName="Expense Receipts" >
            <sm:Container Name="ExpenseReceipts" >
                <sm:Field Name="Date" />
                <sm:Field Name="ClaimAmount" />
                <sm:Field Name="DescriptionTranDesc" />
                <sm:Field Name="Currency" />

                <sm:Action Name="addNew" Context="Container" Behavior="Create" Redirect="true" Icon="system://Plus" />
                <sm:Action Name="editDetail" Context="Container" Behavior="Open" Redirect="true" />
                <sm:Action Name="Delete" Context="Selection" Behavior="Delete" Icon="system://Trash" />
            </sm:Container>
        </sm:Screen>
    </sm:Folder>

    <sm:Screen Id="EP301020" Type="SimpleScreen" Icon="system://Display1" DisplayName="Expense Receipt" Visible="false" OpenAs="Form">
        <sm:Container Name="ReceiptDetails" >

            <sm:Field Name="Date" />
            <sm:Field Name="Description" />

            <sm:Field Name="ExpenseItem" >
                <sm:SelectorContainer FieldsToShow="2" PickerType="Detached">
                    <sm:Field Name="InventoryID" />
                    <sm:Field Name="Description" />
                </sm:SelectorContainer>
            </sm:Field>

            <sm:Field Name="Currency" >
                <sm:SelectorContainer PickerType="Attached">
                    <sm:Field Name="CurrencyID" />
                </sm:SelectorContainer>
            </sm:Field>

            <sm:Action Name="Save" Context="Record" Behavior="Save" />
            <sm:Action Name="Cancel" Context="Record" Behavior="Cancel" />
        </sm:Container>
    </sm:Screen>
</sm:SiteMap> To configure a selector field, you use the  sm:SelectorContainer  tag inside     the  sm:Field  tag. The  PickerType  attribute specifies which     of the two ways the selector should be displayed. A selector with  PickerType="Attached"  is displayed as a pop-up window (see     the screenshot below). A selector as a pop-up window A selector with  PickerType="Detached"  is displayed as a grid (as shown in the     screenshot below). You can configure the fields to display by adding nested       sm:Field  tags. A selector as a grid ]]></column>
		</row>
		<row PageID="4175ff17-adda-4c68-a86d-34b40a125d7c" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="dfb165ad-0fbc-19a6-a566-617e6d4e044a" RecordSourceID="22377">
			<column name="Content"><![CDATA[
This topic describes how to configure the types of related containers on the same screen.[anchor|#MasterDetail]
==Example: Configuring a Screen with One-to-Many (Master-Detail) Containers==
With one-to-many containers, one container declared inside the <tt>sm:Screen</tt> tag is considered the master container, while all other containers are considered detail containers. {br}

To see an example of configuring one-to-many containers, copy the code below to an <tt>.xml</tt> file, put the file in the <tt>\App&#95;Data\Mobile</tt> folder of the Acumatica ERP website, and start the mobile application.{{{{&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;sm:SiteMap xmlns:sm="http://acumatica.com/mobilesitemap" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;

    &lt;sm:Folder DisplayName="Expense Claims" Type="HubFolder" Icon="system://Folder" IsDefaultFavorite="true"&gt;
        &lt;sm:Screen Id="EP301030" Type="FilterListScreen" DisplayName="Expense Claims" Visible="true" &gt;

            &lt;sm:Container Name="Selection"&gt;
                &lt;sm:Field Name="Employee"/&gt;
            &lt;/sm:Container&gt;

            &lt;sm:Container Name="Claim" &gt;
                &lt;sm:Field Name="Date" /&gt;
                &lt;sm:Field Name="Status" /&gt;
                &lt;sm:Field Name="Description" /&gt;
                &lt;sm:Field Name="ClaimTotal" /&gt;

                &lt;sm:Action Name="CreateNew" Context="Container" Behavior="Create" Redirect="true" Icon="system://Plus" /&gt;
                &lt;sm:Action Name="EditDetail" Context="Container" Behavior="Open" Redirect="true" /&gt;
            &lt;/sm:Container&gt;
        &lt;/sm:Screen&gt;
    &lt;/sm:Folder&gt;
    &lt;sm:Screen Id="EP301000" Type="SimpleScreen" DisplayName="Expense Claim" Visible="false" OpenAs="Form"&gt;

        &lt;sm:Container Name="DocumentSummary" &gt;
            &lt;sm:Attachments Disabled="true"/&gt;

            &lt;sm:Field Name="Date" /&gt;
            &lt;sm:Field Name="Status" /&gt;
            &lt;sm:Field Name="Description" /&gt;
            &lt;sm:Field Name="ClaimTotal" /&gt;
            &lt;sm:Field Name="Currency" /&gt;

            &lt;sm:Action Name="Save" Context="Record" Behavior="Save" /&gt;
            &lt;sm:Action Name="Cancel" Context="Record" Behavior="Cancel" /&gt;
        &lt;/sm:Container&gt;

        &lt;sm:Container Name="ExpenseClaimDetails" &gt;
            &lt;sm:Attachments Disabled="true"/&gt;
            &lt;sm:Field Name="Date" ListPrioruty="99" FormPriority="99" /&gt;
            &lt;sm:Field Name="Description" FormPriority="98" /&gt;
            &lt;sm:Field Name="ExpenseItem" FormPriority="97"/&gt;
            &lt;sm:Field Name="Currency" FormPriority="95"/&gt;

            &lt;sm:Field Name="TotalAmount" ListPriority="96" FormPriority="94" /&gt;
            &lt;sm:Field Name="ProjectContract" Container="ReceiptClassification" FormPriority="93" /&gt;
            &lt;sm:Field Name="ProjectTask" Container="ReceiptClassification" FormPriority="92" /&gt;

            &lt;sm:Action Name="Insert" Context="Container" Behavior="Create" Icon="system://Plus"/&gt;
            &lt;sm:Action Name="Delete" Context="Selection" Behavior="Delete" /&gt;
            &lt;sm:Action Name="Save" Context="Record" Behavior="Save" /&gt;
            &lt;sm:Action Name="Cancel" Context="Record" Behavior="Cancel" /&gt;
        &lt;/sm:Container&gt;

    &lt;/sm:Screen&gt;
&lt;/sm:SiteMap&gt;
}}}}
All declared detail containers are displayed on a screen below the screen fields in the order of their declaration.{br}

To add, update, and delete data records in a detail container, you use the {{Behavior="Create"}}, {{Behavior="Open"}} and {{Behavior="Delete"}} actions, as you do on the master screen.{br}

The screenshot below shows the resulting screen in the mobile application.[anchor|#fig_gdr_nvg_w5][anchor|#image_icx_fm1_wq][image:StudioDeveloperGuide/Images/12-1.png|popup|Screen with one-to-many containers|130px][anchor|#OneToOne]
==Example: Configuring a Screen with Many-as-One Containers==
Some screens include multiple containers that are displayed as one container.{br}

The screen in this example includes the <tt>ReceiptDetails</tt> and <tt>ReceiptClassification</tt> containers, which have a many-as-one relationship. You do not declare both containers; instead, you use the <tt>Container</tt> attribute of the <tt>sm:Field</tt> tag to display fields from the <tt>ReceiptClassification</tt> container.{br}

To configure these containers, copy the code below to an <tt>.xml</tt> file, put the file in the <tt>\App&#95;Data\Mobile</tt> folder of the Acumatica ERP website, and start the mobile application.{{{{&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;sm:SiteMap xmlns:sm="http://acumatica.com/mobilesitemap" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;

    &lt;sm:Folder DisplayName="Expense Receipts" Type="HubFolder" Icon="system://NewsPaper" &gt;
        &lt;sm:Screen Id="EP301010" Type="SimpleScreen" DisplayName="Expense Receipts" &gt;
            &lt;sm:Container Name="ExpenseReceipts" &gt;
                &lt;sm:Field Name="Date" /&gt;
                &lt;sm:Field Name="ClaimAmount" /&gt;
                &lt;sm:Field Name="DescriptionTranDesc" /&gt;
                &lt;sm:Field Name="Currency" /&gt;

                &lt;sm:Action Name="addNew" Context="Container" Behavior="Create" Redirect="true" Icon="system://Plus" /&gt;
                &lt;sm:Action Name="editDetail" Context="Container" Behavior="Open" Redirect="true" /&gt;
                &lt;sm:Action Name="Delete" Context="Selection" Behavior="Delete" Icon="system://Trash" /&gt;
            &lt;/sm:Container&gt;
        &lt;/sm:Screen&gt;
    &lt;/sm:Folder&gt;

    &lt;sm:Screen Id="EP301020" Type="SimpleScreen" Icon="system://Display1" DisplayName="Expense Receipt" Visible="false" OpenAs="Form"&gt;
        &lt;sm:Container Name="ReceiptDetails" &gt;

            &lt;sm:Field Name="Date" /&gt;
            &lt;sm:Field Name="Description" /&gt;
            &lt;sm:Field Name="ExpenseItem" /&gt;
            &lt;sm:Field Name="Currency" /&gt;

            &lt;sm:Field Name="ProjectContract" Container="ReceiptClassification" /&gt;
            &lt;sm:Field Name="ProjectTask" Container="ReceiptClassification" /&gt;

            &lt;sm:Action Name="Save" Context="Record" Behavior="Save" /&gt;
            &lt;sm:Action Name="Cancel" Context="Record" Behavior="Cancel" /&gt;
        &lt;/sm:Container&gt;
    &lt;/sm:Screen&gt;
&lt;/sm:SiteMap&gt;
}}}}
The following screenshot shows the resulting screen in the mobile application.[anchor|#image_q1m_cn1_wq][image:StudioDeveloperGuide/Images/13-1.png|popup|Screen with many-as-one containers|130px][anchor|#Multi]
==Example: Configuring a Screen with Many-to-One (Master-Detail) Containers with Multi-Selection==
 Acumatica ERP includes a special type of container that supports multi-selection—selection of multiple items or options.{br}

To see an example of configuring a container with multi-selection, copy the code below to an <tt>.xml</tt> file, put the file in the <tt>\App&#95;Data\Mobile</tt> folder of the Acumatica ERP website, and start the mobile application.{{{{&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;sm:SiteMap xmlns:sm="http://acumatica.com/mobilesitemap" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;

    &lt;sm:Folder DisplayName="Expense Claims" Type="HubFolder" Icon="system://Folder" IsDefaultFavorite="true"&gt;
        &lt;sm:Screen Id="EP301030" Type="FilterListScreen" DisplayName="Expense Claims" Visible="true" &gt;

            &lt;sm:Container Name="Selection"&gt;
                &lt;sm:Field Name="Employee"/&gt;
            &lt;/sm:Container&gt;

            &lt;sm:Container Name="Claim" &gt;
                &lt;sm:Field Name="Date" /&gt;
                &lt;sm:Field Name="Status" /&gt;
                &lt;sm:Field Name="Description" /&gt;
                &lt;sm:Field Name="ClaimTotal" /&gt;

                &lt;sm:Action Name="CreateNew" Context="Container" Behavior="Create" Redirect="true" Icon="system://Plus" /&gt;
                &lt;sm:Action Name="EditDetail" Context="Container" Behavior="Open" Redirect="true" /&gt;
            &lt;/sm:Container&gt;
        &lt;/sm:Screen&gt;
    &lt;/sm:Folder&gt;

    &lt;sm:Screen Id="EP301000" Type="SimpleScreen" DisplayName="Expense Claim" Visible="false" OpenAs="Form"&gt;

        &lt;sm:Container Name="DocumentSummary" &gt;
            &lt;sm:Attachments Disabled="true"/&gt;

            &lt;sm:Field Name="Date" /&gt;
            &lt;sm:Field Name="Status" /&gt;
            &lt;sm:Field Name="Description" /&gt;
            &lt;sm:Field Name="ClaimTotal" /&gt;
            &lt;sm:Field Name="Currency" /&gt;

            &lt;sm:Action Name="Save" Context="Record" Behavior="Save" /&gt;
            &lt;sm:Action Name="Cancel" Context="Record" Behavior="Cancel" /&gt;
        &lt;/sm:Container&gt;

        &lt;sm:Container Name="SubmitReceipts" Type="SelectionActionList" &gt;
            &lt;sm:Field Name="Description" /&gt;
            &lt;sm:Field Name="Date" /&gt;
            &lt;sm:Field Name="ClaimAmount"  /&gt;
            &lt;sm:Action Name="SubmitReceipt" Context="List" Behavior="Void" Icon="system://Plus" /&gt;
        &lt;/sm:Container&gt;

    &lt;/sm:Screen&gt;
&lt;/sm:SiteMap&gt;
}}}}
In the code, you enable multi-selection by setting the container type with {{Type="SelectionActionList"}} and specifying the action context with {{Context="List"}}. {br}

The screenshots below show the resulting screen in the mobile application.[anchor|#fig_kvr_kzm_1v][anchor|#image_h5r_vn1_wq][image:StudioDeveloperGuide/Images/new-14.png|popup|Container supporting multi-selection|280px]The left screenshot shows the content of the <tt>DocumentSummary</tt> container of the Expense Claim screen and the header of the <tt>SubmitReceipts</tt> nested container. If the user taps the header of the nested container, the mobile application displays the content of this container and provides multi-selection, as the second screenshot shows.((({S:Warn}The <tt>DisplayName</tt> attribute is not defined for the nested container, therefore for the container, the mobile application displays the ''Submit Receipts'' name that is obtained from the Mobile API server.
)))[anchor|#ContainerLink]
==Example: Configuring a Screen with a Container Link==
In the mobile application, a container can contain a link to another container on the action panel or on the screen among the fields. To create a container link on the action panel, use the <tt>sm:ContainerLink</tt> tag, as the following example shows.{br}

To see an example of creating a container link on the action panel, copy the code below to an <tt>.xml</tt> file, put the file in the <tt>\App&#95;Data\Mobile</tt> folder of the Acumatica ERP website, and start the mobile application.{{{{&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;sm:SiteMap xmlns:sm="http://acumatica.com/mobilesitemap" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;

    &lt;sm:Folder DisplayName="Expense Claims" Type="HubFolder" Icon="system://Folder" IsDefaultFavorite="true"&gt;
        &lt;sm:Screen Id="EP301030" Type="FilterListScreen" DisplayName="Expense Claims" Visible="true" &gt;

            &lt;sm:Container Name="Selection"&gt;
                &lt;sm:Field Name="Employee"/&gt;
            &lt;/sm:Container&gt;

            &lt;sm:Container Name="Claim" &gt;
                &lt;sm:Field Name="Date" /&gt;
                &lt;sm:Field Name="Status" /&gt;
                &lt;sm:Field Name="Description" /&gt;
                &lt;sm:Field Name="ClaimTotal" /&gt;

                &lt;sm:Action Name="CreateNew" Context="Container" Behavior="Create" Redirect="true" Icon="system://Plus" /&gt;
                &lt;sm:Action Name="EditDetail" Context="Container" Behavior="Open" Redirect="true" /&gt;
            &lt;/sm:Container&gt;
        &lt;/sm:Screen&gt;
    &lt;/sm:Folder&gt;
    &lt;sm:Screen Id="EP301000" Type="SimpleScreen" DisplayName="Expense Claim" Visible="false" OpenAs="Form"&gt;

        &lt;sm:Container Name="DocumentSummary" &gt;
            &lt;sm:Attachments Disabled="true"/&gt;

            &lt;sm:Field Name="Date" /&gt;
            &lt;sm:Field Name="Status" /&gt;
            &lt;sm:Field Name="Description" /&gt;
            &lt;sm:Field Name="ClaimTotal" /&gt;
            &lt;sm:Field Name="Currency" /&gt;

            &lt;sm:ContainerLink Container="SubmitReceipts" Control="Button"/&gt;

            &lt;sm:Action Name="Save" Context="Record" Behavior="Save" /&gt;
            &lt;sm:Action Name="Cancel" Context="Record" Behavior="Cancel" /&gt;
        &lt;/sm:Container&gt;

        &lt;sm:Container Name="SubmitReceipts" Type="SelectionActionList" &gt;
            &lt;sm:Field Name="Description" /&gt;
            &lt;sm:Field Name="Date" /&gt;
            &lt;sm:Field Name="ClaimAmount"  /&gt;
            &lt;sm:Action Name="SubmitReceipt" Context="List" Behavior="Void" Icon="system://Plus" /&gt;
        &lt;/sm:Container&gt;

    &lt;/sm:Screen&gt;
&lt;/sm:SiteMap&gt;
}}}}
In this code, you can open the <tt>SubmitReceipts</tt> container by using the button in the action panel (because of the {{Control="Button"}} attribute of <tt>sm:ContainerLink</tt>).{br}

The screenshot below shows the resulting screen, which displays the container link on the action panel in the mobile application.[anchor|#fig_eb4_2hl_ts][anchor|#image_g4y_bp1_wq][image:StudioDeveloperGuide/Images/15-1.png|popup|Use of a button on the action panel to open a container|130px]{br}

To locate the container link among the screen fields, you use the {{Control="ListItem"}} attribute instead of the {{Control="Button"}} one. To set the exact position of the container link among the screen fields, specify the appropriate value for the <tt>Priority</tt> attribute.]]></column>
			<column name="PlainText"><![CDATA[Configuring Nested Containers This topic describes how to configure the types of related                 containers on the same screen. Example: Configuring a Screen with One-to-Many (Master-Detail) Containers With one-to-many containers, one container declared inside the  sm:Screen          tag is considered the master container, while all other containers are considered detail         containers.  To see an example of configuring one-to-many containers, copy the code below to an            .xml  file, put the file in the  \App_Data\Mobile          folder of the  Acumatica ERP website, and start the mobile application. <?xml version="1.0" encoding="UTF-8"?>
<sm:SiteMap xmlns:sm="http://acumatica.com/mobilesitemap" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

    <sm:Folder DisplayName="Expense Claims" Type="HubFolder" Icon="system://Folder" IsDefaultFavorite="true">
        <sm:Screen Id="EP301030" Type="FilterListScreen" DisplayName="Expense Claims" Visible="true" >

            <sm:Container Name="Selection">
                <sm:Field Name="Employee"/>
            </sm:Container>

            <sm:Container Name="Claim" >
                <sm:Field Name="Date" />
                <sm:Field Name="Status" />
                <sm:Field Name="Description" />
                <sm:Field Name="ClaimTotal" />

                <sm:Action Name="CreateNew" Context="Container" Behavior="Create" Redirect="true" Icon="system://Plus" />
                <sm:Action Name="EditDetail" Context="Container" Behavior="Open" Redirect="true" />
            </sm:Container>
        </sm:Screen>
    </sm:Folder>
    <sm:Screen Id="EP301000" Type="SimpleScreen" DisplayName="Expense Claim" Visible="false" OpenAs="Form">

        <sm:Container Name="DocumentSummary" >
            <sm:Attachments Disabled="true"/>

            <sm:Field Name="Date" />
            <sm:Field Name="Status" />
            <sm:Field Name="Description" />
            <sm:Field Name="ClaimTotal" />
            <sm:Field Name="Currency" />

            <sm:Action Name="Save" Context="Record" Behavior="Save" />
            <sm:Action Name="Cancel" Context="Record" Behavior="Cancel" />
        </sm:Container>

        <sm:Container Name="ExpenseClaimDetails" >
            <sm:Attachments Disabled="true"/>
            <sm:Field Name="Date" ListPrioruty="99" FormPriority="99" />
            <sm:Field Name="Description" FormPriority="98" />
            <sm:Field Name="ExpenseItem" FormPriority="97"/>
            <sm:Field Name="Currency" FormPriority="95"/>

            <sm:Field Name="TotalAmount" ListPriority="96" FormPriority="94" />
            <sm:Field Name="ProjectContract" Container="ReceiptClassification" FormPriority="93" />
            <sm:Field Name="ProjectTask" Container="ReceiptClassification" FormPriority="92" />

            <sm:Action Name="Insert" Context="Container" Behavior="Create" Icon="system://Plus"/>
            <sm:Action Name="Delete" Context="Selection" Behavior="Delete" />
            <sm:Action Name="Save" Context="Record" Behavior="Save" />
            <sm:Action Name="Cancel" Context="Record" Behavior="Cancel" />
        </sm:Container>

    </sm:Screen>
</sm:SiteMap> All declared detail containers are displayed on a screen below the screen fields in the         order of their declaration. To add, update, and delete data records in a detail container, you use the            Behavior="Create" ,  Behavior="Open"            and  Behavior="Delete"  actions, as you do on the master screen. The screenshot below shows the resulting screen in the mobile application. Screen with one-to-many containers Example: Configuring a Screen with Many-as-One Containers Some screens include multiple containers that are displayed as one container. The screen in this example includes the  ReceiptDetails  and            ReceiptClassification  containers, which have a many-as-one         relationship. You do not declare both containers; instead, you use the            Container  attribute of the  sm:Field  tag to display         fields from the  ReceiptClassification  container. To configure these containers, copy the code below to an  .xml  file,         put the file in the  \App_Data\Mobile  folder of the  Acumatica ERP website, and start the mobile application. <?xml version="1.0" encoding="UTF-8"?>
<sm:SiteMap xmlns:sm="http://acumatica.com/mobilesitemap" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

    <sm:Folder DisplayName="Expense Receipts" Type="HubFolder" Icon="system://NewsPaper" >
        <sm:Screen Id="EP301010" Type="SimpleScreen" DisplayName="Expense Receipts" >
            <sm:Container Name="ExpenseReceipts" >
                <sm:Field Name="Date" />
                <sm:Field Name="ClaimAmount" />
                <sm:Field Name="DescriptionTranDesc" />
                <sm:Field Name="Currency" />

                <sm:Action Name="addNew" Context="Container" Behavior="Create" Redirect="true" Icon="system://Plus" />
                <sm:Action Name="editDetail" Context="Container" Behavior="Open" Redirect="true" />
                <sm:Action Name="Delete" Context="Selection" Behavior="Delete" Icon="system://Trash" />
            </sm:Container>
        </sm:Screen>
    </sm:Folder>

    <sm:Screen Id="EP301020" Type="SimpleScreen" Icon="system://Display1" DisplayName="Expense Receipt" Visible="false" OpenAs="Form">
        <sm:Container Name="ReceiptDetails" >

            <sm:Field Name="Date" />
            <sm:Field Name="Description" />
            <sm:Field Name="ExpenseItem" />
            <sm:Field Name="Currency" />

            <sm:Field Name="ProjectContract" Container="ReceiptClassification" />
            <sm:Field Name="ProjectTask" Container="ReceiptClassification" />

            <sm:Action Name="Save" Context="Record" Behavior="Save" />
            <sm:Action Name="Cancel" Context="Record" Behavior="Cancel" />
        </sm:Container>
    </sm:Screen>
</sm:SiteMap> The following screenshot shows the resulting screen in the mobile application. Screen with many-as-one containers Example: Configuring a Screen with Many-to-One (Master-Detail)         Containers with Multi-Selection  Acumatica ERP includes a special type of container that supports multi-selection—selection of         multiple items or options. To see an example of configuring a container with         multi-selection, copy the code below to an  .xml  file, put the file in         the  \App_Data\Mobile  folder of the  Acumatica ERP website, and start the mobile         application. <?xml version="1.0" encoding="UTF-8"?>
<sm:SiteMap xmlns:sm="http://acumatica.com/mobilesitemap" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

    <sm:Folder DisplayName="Expense Claims" Type="HubFolder" Icon="system://Folder" IsDefaultFavorite="true">
        <sm:Screen Id="EP301030" Type="FilterListScreen" DisplayName="Expense Claims" Visible="true" >

            <sm:Container Name="Selection">
                <sm:Field Name="Employee"/>
            </sm:Container>

            <sm:Container Name="Claim" >
                <sm:Field Name="Date" />
                <sm:Field Name="Status" />
                <sm:Field Name="Description" />
                <sm:Field Name="ClaimTotal" />

                <sm:Action Name="CreateNew" Context="Container" Behavior="Create" Redirect="true" Icon="system://Plus" />
                <sm:Action Name="EditDetail" Context="Container" Behavior="Open" Redirect="true" />
            </sm:Container>
        </sm:Screen>
    </sm:Folder>

    <sm:Screen Id="EP301000" Type="SimpleScreen" DisplayName="Expense Claim" Visible="false" OpenAs="Form">

        <sm:Container Name="DocumentSummary" >
            <sm:Attachments Disabled="true"/>

            <sm:Field Name="Date" />
            <sm:Field Name="Status" />
            <sm:Field Name="Description" />
            <sm:Field Name="ClaimTotal" />
            <sm:Field Name="Currency" />

            <sm:Action Name="Save" Context="Record" Behavior="Save" />
            <sm:Action Name="Cancel" Context="Record" Behavior="Cancel" />
        </sm:Container>

        <sm:Container Name="SubmitReceipts" Type="SelectionActionList" >
            <sm:Field Name="Description" />
            <sm:Field Name="Date" />
            <sm:Field Name="ClaimAmount"  />
            <sm:Action Name="SubmitReceipt" Context="List" Behavior="Void" Icon="system://Plus" />
        </sm:Container>

    </sm:Screen>
</sm:SiteMap> In         the code, you enable multi-selection by setting the container type with            Type="SelectionActionList"  and specifying the action context with            Context="List" .  The screenshots below show the resulting screen in         the mobile application. Container supporting multi-selection The left screenshot shows the content of the  DocumentSummary        container of the Expense Claim screen and the header of the  SubmitReceipts        nested container. If the user taps the header of the nested container, the mobile application       displays the content of this container and provides multi-selection, as the second screenshot         shows. The  DisplayName  attribute is not defined for the nested         container, therefore for the container, the mobile application displays the  Submit           Receipts  name that is obtained from the Mobile API server. Example: Configuring a Screen with a Container Link In the mobile application, a container can contain a link to another container on the         action panel or on the screen among the fields. To create a container link on the action         panel, use the  sm:ContainerLink  tag, as the following example shows. To see an example of creating a container link on the action panel, copy the code below to         an  .xml  file, put the file in the  \App_Data\Mobile          folder of the  Acumatica ERP website, and start the mobile application. <?xml version="1.0" encoding="UTF-8"?>
<sm:SiteMap xmlns:sm="http://acumatica.com/mobilesitemap" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

    <sm:Folder DisplayName="Expense Claims" Type="HubFolder" Icon="system://Folder" IsDefaultFavorite="true">
        <sm:Screen Id="EP301030" Type="FilterListScreen" DisplayName="Expense Claims" Visible="true" >

            <sm:Container Name="Selection">
                <sm:Field Name="Employee"/>
            </sm:Container>

            <sm:Container Name="Claim" >
                <sm:Field Name="Date" />
                <sm:Field Name="Status" />
                <sm:Field Name="Description" />
                <sm:Field Name="ClaimTotal" />

                <sm:Action Name="CreateNew" Context="Container" Behavior="Create" Redirect="true" Icon="system://Plus" />
                <sm:Action Name="EditDetail" Context="Container" Behavior="Open" Redirect="true" />
            </sm:Container>
        </sm:Screen>
    </sm:Folder>
    <sm:Screen Id="EP301000" Type="SimpleScreen" DisplayName="Expense Claim" Visible="false" OpenAs="Form">

        <sm:Container Name="DocumentSummary" >
            <sm:Attachments Disabled="true"/>

            <sm:Field Name="Date" />
            <sm:Field Name="Status" />
            <sm:Field Name="Description" />
            <sm:Field Name="ClaimTotal" />
            <sm:Field Name="Currency" />

            <sm:ContainerLink Container="SubmitReceipts" Control="Button"/>

            <sm:Action Name="Save" Context="Record" Behavior="Save" />
            <sm:Action Name="Cancel" Context="Record" Behavior="Cancel" />
        </sm:Container>

        <sm:Container Name="SubmitReceipts" Type="SelectionActionList" >
            <sm:Field Name="Description" />
            <sm:Field Name="Date" />
            <sm:Field Name="ClaimAmount"  />
            <sm:Action Name="SubmitReceipt" Context="List" Behavior="Void" Icon="system://Plus" />
        </sm:Container>

    </sm:Screen>
</sm:SiteMap> In this code, you can open the  SubmitReceipts  container by using the         button in the action panel (because of the  Control="Button"  attribute of            sm:ContainerLink ). The screenshot below shows the resulting screen, which displays the container link on the         action panel in the mobile application. Use of a button on the action panel to open a container To locate the container link among the screen fields, you use the            Control="ListItem"  attribute instead of the            Control="Button"  one. To set the exact position of the container link         among the screen fields, specify the appropriate value for the  Priority          attribute. ]]></column>
		</row>
		<row PageID="2980fede-2c3c-41cf-8277-a7f27a9fb17f" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="41db31c2-0dff-37b4-90ce-7c8741157606" RecordSourceID="22377">
			<column name="Content"><![CDATA[
In Acumatica ERP, for a class as a business object, you can define a list of entity attributes to gather specific information about members of the class. Attributes are defined for a particular class, which is a grouping of entities—such as leads, opportunities, customers, cases, projects, and stock or non-stock items—that have similar properties.{br}

On an Acumatica ERP form where attributes for an entity is defined, the attributes are usually displayed on a separate tab as a table that contains a set of key-value pairs. Because entity attributes are dynamic, it is not possible to explicitly specify them in a mobile site map. Therefore, specific definitions are used to show the attributes in a mobile application.{br}

Thus, in a mobile application, entity attributes are displayed as a form or part of a form with input fields rather than as a table. For improved usability, you can apply a group as a container for attributes.{br}

Suppose that in the mobile app you need to display the attributes of the [HelpRoot_FormReference\CR_20_60_00|Case Classes] form ([~/?ScreenId=CR206000|CR206000]) of Acumatica ERP, which are shown in the screenshot below.[anchor|#fig_atw_ytv_rr][anchor|#image_uw1_f5v_rr][image:StudioDeveloperGuide/Images/Attr0.png|popup|Viewing the Attributes tab on the Case Classes form|450px]
==Example: Configuring a Screen with a Group of Attributes==
To see an example of creating a group for the attributes of a particular form, copy the code below to an <tt>.xml</tt> file, put the file in the <tt>\App&#95;Data\Mobile</tt> folder of the Acumatica ERP website, and start the mobile application.{br}

{{{{&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;sm:SiteMap xmlns:sm="http://acumatica.com/mobilesitemap" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;

    &lt;sm:Screen DisplayName="Case" Id="CR306000" OpenAs="Form" Type="SimpleScreen"&gt;

        &lt;sm:Container FormActionsToExpand="1" Name="CaseSummary"&gt;

            &lt;sm:Field Name="ClassID"&gt;
                &lt;sm:SelectorContainer PickerType="Attached" /&gt;
            &lt;/sm:Field&gt;

            &lt;sm:Group Collapsable="true" Collapsed="true" DisplayName="Case Attributes"&gt;
                &lt;sm:Attributes From="Attributes" /&gt;
            &lt;/sm:Group&gt;

        &lt;/sm:Container&gt;
    &lt;/sm:Screen&gt;

&lt;/sm:SiteMap&gt;
}}}}{br}

The <tt>From</tt> attribute of the <tt>sm:Attributes</tt> tag specifies the name of the screen container that holds the entity attributes.{br}

In this code, note that the <tt>sm:Attributes</tt> tag is wrapped in the group named ''Case Attributes''.{br}

The screenshot below shows the resulting screen in the mobile application.[anchor|#fig_mw2_5rt_rr][anchor|#image_g4y_bp1_wq][image:StudioDeveloperGuide/Images/Attributes.png|popup|Viewing the Case Attributes group|130px]{br}

Also, you can use the <tt>sm:Attributes</tt> tag to map a pair of columns from any grid of Acumatica ERP to a form view in the mobile app as a key-value pair. For example, if a grid contains a key field, a value field, and a field for sorting, to create a sorted group of key-value pairs of the grid on a form view of the mobile app, you might define the following <tt>&lt;sm:Attributes&gt;</tt> tag (see [HelpRoot_Dev_Mobile\MOBILE_sm_Attributes|&lt;sm:Attributes&gt;] for details).{{{{...
&lt;sm:Container ...&gt;
...
  &lt;sm:Group ...&gt;
    &lt;sm:Attributes From="GridDataView" IDField="Column1_FieldName"
        IDValue="Column5_FieldName" OrderField="Column3_FieldName" /&gt;
  &lt;/sm:Group&gt;

&lt;/sm:Container&gt;
...

}}}}In the example above, {{GridDataView}} is the <tt>DataMember</tt> defined for the grid; {{Column1_FieldName}}, {{Column5_FieldName}}, and {{Column3_FieldName}} are correspondingly the key field, the value field, and the field for sorting.]]></column>
			<column name="PlainText"><![CDATA[Adding Entity Attributes to Mobile Screens In  Acumatica ERP, for a class as a business object, you can define a list of entity attributes to gather       specific information about members of the class. Attributes are defined for a particular       class, which is a grouping of entities—such as leads, opportunities, customers, cases,       projects, and stock or non-stock items—that have similar properties. On an  Acumatica ERP form where attributes for an entity is defined, the attributes are usually displayed on a       separate tab as a table that contains a set of key-value pairs. Because entity attributes are       dynamic, it is not possible to explicitly specify them in a mobile site map. Therefore,       specific definitions are used to show the attributes in a mobile application. Thus, in a mobile application, entity attributes are displayed as a form or part of a form       with input fields rather than as a table. For improved usability, you can apply a group as a       container for attributes. Suppose that in the mobile app you need to display the attributes of the   ([~/?ScreenId=CR206000|CR206000]) Case Classes form (CR206000) of  Acumatica ERP, which are shown in the screenshot below. Viewing the Attributes tab on the Case Classes form Example: Configuring a Screen with a Group of Attributes To see an example of creating a group for the attributes of a particular form, copy the         code below to an  .xml  file, put the file in the            \App_Data\Mobile  folder of the  Acumatica ERP website, and start the mobile application. <?xml version="1.0" encoding="UTF-8"?>
<sm:SiteMap xmlns:sm="http://acumatica.com/mobilesitemap" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

    <sm:Screen DisplayName="Case" Id="CR306000" OpenAs="Form" Type="SimpleScreen">

        <sm:Container FormActionsToExpand="1" Name="CaseSummary">

            <sm:Field Name="ClassID">
                <sm:SelectorContainer PickerType="Attached" />
            </sm:Field>

            <sm:Group Collapsable="true" Collapsed="true" DisplayName="Case Attributes">
                <sm:Attributes From="Attributes" />
            </sm:Group>

        </sm:Container>
    </sm:Screen>

</sm:SiteMap> The  From  attribute of the  sm:Attributes  tag specifies         the name of the screen container that holds the entity attributes. In this code, note that the  sm:Attributes  tag is wrapped in the group         named  Case Attributes . The screenshot below shows the resulting screen in the mobile application. Viewing the Case Attributes group Also, you can use the  sm:Attributes  tag to map a pair of columns from         any grid of  Acumatica ERP to a form view in the mobile app as a key-value pair. For example, if a grid contains a         key field, a value field, and a field for sorting, to create a sorted group of key-value         pairs of the grid on a form view of the mobile app, you might define the following            <sm:Attributes>  tag (see  &lt;sm:Attributes&gt;         for         details). ...
<sm:Container ...>
...
  <sm:Group ...>
    <sm:Attributes From="GridDataView" IDField="Column1_FieldName"
        IDValue="Column5_FieldName" OrderField="Column3_FieldName" />
  </sm:Group>

</sm:Container>
...
 In         the example above,  GridDataView  is the  DataMember          defined for the grid;  Column1_FieldName ,          Column5_FieldName , and  Column3_FieldName  are         correspondingly the key field, the value field, and the field for sorting. ]]></column>
		</row>
		<row PageID="7244493f-a03a-4efa-9cef-18f2d4f08682" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="225d2cbd-0df4-b3a1-9ce4-a150ae960957" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can redirect the user to different screens and containers in a mobile application in one of the following ways:[anchor|#ol_smh_vtt_yr]
#Allow a redirection that is already implemented in Acumatica ERP
#Create a new redirection to a screen or container
{br}

These ways are described in the following sections.
==Allowing a Redirection That Is Implemented in Acumatica ERP==
While executing an action, you may need to redirect the application from the current screen to a different screen or to an external URL. As a rule, the business logic of Acumatica ERP handles redirection to a screen by using the <tt>PXRedirectRequiredException</tt> and <tt>PXPopupRedirectException</tt> exceptions.{br}

In a mobile application, you can allow a redirection that is implemented in an action of Acumatica ERP. To do this, you set the <tt>Redirect</tt> attribute of the [HelpRoot_Dev_Mobile\MOBILE_sm_Action|&lt;sm:Action&gt;] tag to ''true'' in an <tt>.xml</tt> file of the mobile site map.{br}

'''Example: Using Existing Redirection from the List to the Editing Form'''{br}

To see an example of allowing a redirection implemented in an action, copy the code below to an <tt>.xml</tt> file, put the file in the <tt>\App&#95;Data\Mobile</tt> folder of the Acumatica ERP website, and start the mobile application.{{{{&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;sm:SiteMap xmlns:sm="http://acumatica.com/mobilesitemap" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;

    &lt;sm:Folder DisplayName="Expense Receipts" Type="HubFolder" Icon="system://NewsPaper" &gt;
        &lt;sm:Screen Id="EP301010" Type="SimpleScreen" DisplayName="Expense Receipts" &gt;
            &lt;sm:Container Name="ExpenseReceipts" &gt;
                &lt;sm:Field Name="Date" /&gt;
                &lt;sm:Field Name="ClaimAmount" /&gt;
                &lt;sm:Field Name="DescriptionTranDesc" /&gt;
                &lt;sm:Field Name="Currency" /&gt;

                &lt;sm:Action Name="addNew" Context="Container" Behavior="Create" Redirect="true" Icon="system://Plus" /&gt;
                &lt;sm:Action Name="editDetail" Context="Container" Behavior="Open" Redirect="true" /&gt;
                &lt;sm:Action Name="Delete" Context="Selection" Behavior="Delete" Icon="system://Trash" /&gt;
            &lt;/sm:Container&gt;
        &lt;/sm:Screen&gt;
    &lt;/sm:Folder&gt;

    &lt;sm:Screen Id="EP301020" Type="SimpleScreen" Icon="system://Display1" DisplayName="Expense Receipt" Visible="false" OpenAs="Form"&gt;
        &lt;sm:Container Name="ReceiptDetails" &gt;
            &lt;sm:Field Name="Date" /&gt;
            &lt;sm:Field Name="Description" /&gt;
            &lt;sm:Field Name="ExpenseItem" /&gt;
            &lt;sm:Field Name="TotalAmount" /&gt;

            &lt;sm:Action Name="Save" Context="Record" Behavior="Save" /&gt;
            &lt;sm:Action Name="Cancel" Context="Record" Behavior="Cancel" /&gt;
        &lt;/sm:Container&gt;
    &lt;/sm:Screen&gt;
&lt;/sm:SiteMap&gt;
}}}}
In this example, you use the ''EP301010'' screen to display the list and the ''EP301020'' screen to display the editing form. In the list view (''EP301010''), notice two actions that result in opening the form view for a data record: {{Behavior="Create"}} and {{Behavior="Open"}}. The {{Redirect="true"}} attribute indicates that the editing form needs to be opened as a different screen.{br}

You can still control the current screen after an action is completed by using the <tt>After</tt> attribute of the corresponding <tt>sm:Action</tt> tag. The <tt>After</tt> attribute defines more complex behavior of the container when the <tt>Redirect</tt> attribute of this tag is set to ''true''. Possible values for the <tt>After</tt> attribute have the following meanings:[anchor|#ul_st1_ttr_1r]
*If redirection doesn&rsquo;t happen:
**<tt>Refresh</tt>: The current container is refreshed.
**<tt>Close</tt>: The current container is closed, and the previous container in the stack is loaded.
*If redirection happens:
**<tt>Refresh</tt>: A new screen is loaded, and the previous one is saved in the stack.
**<tt>Close</tt>: The current container is closed, and the new one is opened and takes the position of the closed container in the stack.

The default value of the <tt>After</tt> attribute is <tt>Refresh</tt>.{br}

'''Example: Using Existing Redirection to an External URL'''{br}

If an action on an Acumatica ERP form provides redirection to an external URL, you can map the action to use in the mobile app. To do this, you need no additional attributes in the <tt>&lt;sm:Action&gt;</tt> tag. However, the <tt>Redirect</tt> attribute of the tag must be set to ''true'' as in the following example.{{{{...
&lt;sm:Action Behavior="Void" Context="Record" Name="ViewOnMap" Redirect="true"/&gt;
...
}}}}On a mobile device, such action launches the default browser and passes the URL, which is obtained from the Acumatica ERP server, to the browser that opens the webpage specified in the URL.
==Creating a New Redirection to a Screen or Container==
You can create a redirection to any container or screen in the mobile application when the redirection is absent in Acumatica ERP. For example, you can do this to implement pop-up windows in the mobile application.{br}

To create a redirection, you use the following attributes:[anchor|#ul_ug2_t5r_1r]
*<tt>RedirectToScreen</tt> sets the ID of the screen to redirect to. If the redirection target is within the current screen (such as a different container), don&rsquo;t use this attribute.
*<tt>RedirectToContainer</tt> sets the name of the container to redirect to. If you don&rsquo;t specify this attribute, you are redirected to the primary container of the target screen.

'''Example: Creating a Redirection to Another Container Inside the Screen'''{br}

To see an example of creating a new redirection to a another container inside the screen, copy the code below to an <tt>.xml</tt> file, put the file in the <tt>\App&#95;Data\Mobile</tt> folder of the Acumatica ERP website, and start the mobile application.{{{{&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;sm:SiteMap xmlns:sm="http://acumatica.com/mobilesitemap" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;

    &lt;sm:Folder DisplayName="Expense Claims" Icon="system://Folder" Type="HubFolder"&gt;
        &lt;sm:Screen DisplayName="Expense Claims" Id="EP301030" Type="FilterListScreen"&gt;

            &lt;sm:Container Name="Selection"&gt;
                &lt;sm:Field Name="Employee"/&gt;
            &lt;/sm:Container&gt;

            &lt;sm:Container Name="Claim"&gt;
                &lt;sm:Field ForceIsDisabled="true" Name="ReferenceNbr"/&gt;
                &lt;sm:Field Name="Status"/&gt;
                &lt;sm:Field Name="Date"/&gt;
                &lt;sm:Field Name="ClaimTotal"/&gt;
                &lt;sm:Field Name="Description"/&gt;

                &lt;sm:Action Behavior="Open" Context="Container" Name="EditDetail" Redirect="true"/&gt;
                &lt;sm:Action Behavior="Create" Context="Container" Icon="system://Plus" Name="CreateNew" Redirect="true"/&gt;
            &lt;/sm:Container&gt;
        &lt;/sm:Screen&gt;
    &lt;/sm:Folder&gt;

    &lt;sm:Screen DisplayName="Expense Claim" Id="EP301000" OpenAs="Form" Type="SimpleScreen" Visible="false"&gt;

        &lt;sm:Container Name="DocumentSummary"&gt;
            &lt;sm:Attachments Disabled="true"/&gt;
            &lt;sm:Field ForceIsDisabled="true" Name="ReferenceNbr"/&gt;
            &lt;sm:Field Name="Description"/&gt;

            &lt;sm:Action Behavior="Void" Context="Record" Name="ShowSubmitReceipt" Redirect="true" RedirectToScreen="EP301000" RedirectToContainer="SubmitReceipts$List"/&gt;

            &lt;sm:Action After="Close" Behavior="Save" Context="Record" Name="Save"/&gt;
            &lt;sm:Action Behavior="Cancel" Context="Record" Name="Cancel"/&gt;
        &lt;/sm:Container&gt;

        &lt;sm:Container Name="SubmitReceipts" Type="SelectionActionList" Visible="false"&gt;
            &lt;sm:Field Name="Description"/&gt;
            &lt;sm:Field Name="Date"/&gt;
            &lt;sm:Field Name="ClaimAmount"/&gt;

            &lt;sm:Action Behavior="Void" Context="List" Name="SubmitReceipt"/&gt;
        &lt;/sm:Container&gt;

    &lt;/sm:Screen&gt;
&lt;/sm:SiteMap&gt;
}}}}
In this example, the ''EP301000'' screen with {{DisplayName="Expense Claim"}} includes the following containers:[anchor|#ul_ys5_5y5_yr]
*<tt>DocumentSummary</tt>, which contains the following redirection on the <tt>Record</tt> action: {{{{&lt;sm:Action ... Context="Record" Name="ShowSubmitReceipt" Redirect="true" RedirectToScreen="EP301000" RedirectToContainer="SubmitReceipts$List"/&gt;
}}}}
*<tt>SubmitReceipts</tt>, to which the redirection is declared by the <tt>RedirectToContainer</tt> attribute
{br}

The <tt>RedirectToScreen</tt> attribute cannot be declared because both containers belong to the same screen.{br}

In the example presented in this section, the container name has the {{"SubmitReceipts$List"}} value, which consists of two parts. You can expand the name of the container with special arguments for more detailed configuration of the container behavior (as shown in the following example).{{{{ RedirectToContainer="InventoryLookup$List$InventoryLookupInventory" 
}}}}
In this example, the <tt>RedirectToContainer</tt> value consists of the following parts:[anchor|#ul_xhp_nvr_1r]
*Part of the string (up to the first ''$'' sign) is the name of the container.
*Part of the string (between the first and second ''$'' sign) specifies how to open the container:
**<tt>List</tt>: Open as a list
**<tt>Form</tt>: Open as a form (default)
*If the second parameter is set explicitly to <tt>List</tt>, in the rest of the string, you can specify an additional container that is used as a filter for the data records in the main container.
((({S:Hint}To use the expanded way of configuring a redirection, you should clearly understand how the target screen works, how its business logic operates, and how the state of the business logic objects changes after any of the actions is executed.
)))]]></column>
			<column name="PlainText"><![CDATA[Redirecting to Different Screens and Containers You can redirect the user to different screens and containers in a mobile application in one       of the following ways: Allow a redirection that is already implemented in  Acumatica ERPCreate a new redirection to a screen or container These ways are described in the following sections. Allowing a Redirection That Is Implemented in  Acumatica ERPWhile executing an action, you may need to redirect the application from the current screen         to a different screen or to an external URL. As a rule, the business logic of  Acumatica ERP handles redirection to a screen by using the            PXRedirectRequiredException  and            PXPopupRedirectException  exceptions. In a mobile application, you can allow a redirection that is implemented in an action of            Acumatica ERP. To do this, you set the  Redirect  attribute of the  &lt;sm:Action&gt; tag to  true  in an  .xml  file of         the mobile site map. Example: Using Existing Redirection from the List to the Editing Form To see an example of allowing a redirection implemented in an action, copy the code below         to an  .xml  file, put the file in the            \App_Data\Mobile  folder of the  Acumatica ERP website, and start the mobile application. <?xml version="1.0" encoding="UTF-8"?>
<sm:SiteMap xmlns:sm="http://acumatica.com/mobilesitemap" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

    <sm:Folder DisplayName="Expense Receipts" Type="HubFolder" Icon="system://NewsPaper" >
        <sm:Screen Id="EP301010" Type="SimpleScreen" DisplayName="Expense Receipts" >
            <sm:Container Name="ExpenseReceipts" >
                <sm:Field Name="Date" />
                <sm:Field Name="ClaimAmount" />
                <sm:Field Name="DescriptionTranDesc" />
                <sm:Field Name="Currency" />

                <sm:Action Name="addNew" Context="Container" Behavior="Create" Redirect="true" Icon="system://Plus" />
                <sm:Action Name="editDetail" Context="Container" Behavior="Open" Redirect="true" />
                <sm:Action Name="Delete" Context="Selection" Behavior="Delete" Icon="system://Trash" />
            </sm:Container>
        </sm:Screen>
    </sm:Folder>

    <sm:Screen Id="EP301020" Type="SimpleScreen" Icon="system://Display1" DisplayName="Expense Receipt" Visible="false" OpenAs="Form">
        <sm:Container Name="ReceiptDetails" >
            <sm:Field Name="Date" />
            <sm:Field Name="Description" />
            <sm:Field Name="ExpenseItem" />
            <sm:Field Name="TotalAmount" />

            <sm:Action Name="Save" Context="Record" Behavior="Save" />
            <sm:Action Name="Cancel" Context="Record" Behavior="Cancel" />
        </sm:Container>
    </sm:Screen>
</sm:SiteMap> In this example, you use the  EP301010  screen to display the list and the            EP301020  screen to display the editing form. In the list view ( EP301010 ),         notice two actions that result in opening the form view for a data record:            Behavior="Create"  and  Behavior="Open" . The            Redirect="true"  attribute indicates that the editing form needs to be         opened as a different screen. You can still control the current screen after an action is completed by using the            After  attribute of the corresponding  sm:Action  tag.         The  After  attribute defines more complex behavior of the container when         the  Redirect  attribute of this tag is set to  true . Possible values         for the  After  attribute have the following meanings: If redirection doesn't happen: Refresh : The current container is refreshed. Close : The current container is closed, and the previous               container in the stack is loaded. If redirection happens: Refresh : A new screen is loaded, and the previous one is saved in               the stack. Close : The current container is closed, and the new one is opened               and takes the position of the closed container in the stack. The default value of the  After  attribute is          Refresh . Example: Using Existing Redirection to an External URL If an action on an  Acumatica ERP form provides redirection to an external URL, you can map the action to use in the mobile         app. To do this, you need no additional attributes in the  <sm:Action>          tag. However, the  Redirect  attribute of the tag must be set to            true  as in the following         example. ...
<sm:Action Behavior="Void" Context="Record" Name="ViewOnMap" Redirect="true"/>
... On         a mobile device, such action launches the default browser and passes the URL, which is         obtained from the  Acumatica ERP server, to the browser that opens the webpage specified in the URL. Creating a New Redirection to a Screen or Container You can create a redirection to any container or screen in the mobile application when the         redirection is absent in  Acumatica ERP. For example, you can do this to implement pop-up windows in the mobile application. To create a redirection, you use the following attributes: RedirectToScreen  sets the ID of the screen to redirect to. If the           redirection target is within the current screen (such as a different container), don't use           this attribute. RedirectToContainer  sets the name of the container to redirect to. If           you don't specify this attribute, you are redirected to the primary container of the           target screen. Example: Creating a Redirection to Another Container Inside the Screen To see an example of creating a new redirection to a another container inside the screen,         copy the code below to an  .xml  file, put the file in the            \App_Data\Mobile  folder of the  Acumatica ERP website, and start the mobile application. <?xml version="1.0" encoding="UTF-8"?>
<sm:SiteMap xmlns:sm="http://acumatica.com/mobilesitemap" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

    <sm:Folder DisplayName="Expense Claims" Icon="system://Folder" Type="HubFolder">
        <sm:Screen DisplayName="Expense Claims" Id="EP301030" Type="FilterListScreen">

            <sm:Container Name="Selection">
                <sm:Field Name="Employee"/>
            </sm:Container>

            <sm:Container Name="Claim">
                <sm:Field ForceIsDisabled="true" Name="ReferenceNbr"/>
                <sm:Field Name="Status"/>
                <sm:Field Name="Date"/>
                <sm:Field Name="ClaimTotal"/>
                <sm:Field Name="Description"/>

                <sm:Action Behavior="Open" Context="Container" Name="EditDetail" Redirect="true"/>
                <sm:Action Behavior="Create" Context="Container" Icon="system://Plus" Name="CreateNew" Redirect="true"/>
            </sm:Container>
        </sm:Screen>
    </sm:Folder>

    <sm:Screen DisplayName="Expense Claim" Id="EP301000" OpenAs="Form" Type="SimpleScreen" Visible="false">

        <sm:Container Name="DocumentSummary">
            <sm:Attachments Disabled="true"/>
            <sm:Field ForceIsDisabled="true" Name="ReferenceNbr"/>
            <sm:Field Name="Description"/>

            <sm:Action Behavior="Void" Context="Record" Name="ShowSubmitReceipt" Redirect="true" RedirectToScreen="EP301000" RedirectToContainer="SubmitReceipts$List"/>

            <sm:Action After="Close" Behavior="Save" Context="Record" Name="Save"/>
            <sm:Action Behavior="Cancel" Context="Record" Name="Cancel"/>
        </sm:Container>

        <sm:Container Name="SubmitReceipts" Type="SelectionActionList" Visible="false">
            <sm:Field Name="Description"/>
            <sm:Field Name="Date"/>
            <sm:Field Name="ClaimAmount"/>

            <sm:Action Behavior="Void" Context="List" Name="SubmitReceipt"/>
        </sm:Container>

    </sm:Screen>
</sm:SiteMap> In this example, the  EP301000  screen with  DisplayName="Expense           Claim"  includes the following containers: DocumentSummary , which contains the following redirection on the                Record  action:              <sm:Action ... Context="Record" Name="ShowSubmitReceipt" Redirect="true" RedirectToScreen="EP301000" RedirectToContainer="SubmitReceipts$List"/> SubmitReceipts , to which the redirection is declared by the                RedirectToContainer  attribute The  RedirectToScreen  attribute cannot be declared because both         containers belong to the same screen. In the example presented in this section, the container name has the            "SubmitReceipts$List"  value, which consists of two parts. You can expand         the name of the container with special arguments for more detailed configuration of the         container behavior (as shown in the following example).  RedirectToContainer="InventoryLookup$List$InventoryLookupInventory"  In this example, the  RedirectToContainer  value consists of the following         parts: Part of the string (up to the first  $  sign) is the name of the container. Part of the string (between the first and second  $  sign) specifies how to open           the container: List : Open as a list Form : Open as a form (default) If the second parameter is set explicitly to  List , in the rest of the           string, you can specify an additional container that is used as a filter for the data           records in the main container. To use the expanded way of configuring a redirection, you should clearly         understand how the target screen works, how its business logic operates, and how the state         of the business logic objects changes after any of the actions is executed. ]]></column>
		</row>
		<row PageID="5b66b94e-06c5-4f23-839b-a84df4f37f79" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="925681db-0131-b55d-7316-88382d24ef37" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The mobile API gives you the ability to map a control of any type from an Acumatica ERP form to a text box in the mobile application. This ability can be useful when both of the following conditions are met:[anchor|#ul_dmj_y3n_1v]
*You have one of the following problems with the use of the field in the mobile application:
**A value in the control for the field is displayed oddly or incorrectly.
**The mapping of the field raises an exception.
*You do not need to specify a new value for the field in the mobile application.
For these conditions, you can force the mobile application to treat this field as a common text field.{br}

To do this, in the <tt>sm:Field</tt> tag for the field, you can specify the {{ForceType="String"}} attribute. The input value is inserted directly into the cache of the corresponding container.((({S:Hint}We do not recommend that you use the <tt>ForceType</tt> attribute unless you have extensive experience developing custom controls and fully understand the outcome of using this attribute. Note that by using the <tt>ForceType</tt> attribute, you could switch off some types of field validation, which could damage data in the database. 
)))]]></column>
			<column name="PlainText"><![CDATA[Displaying Any Field as a Text Field The mobile API gives you the ability to map a control of any type from an  Acumatica ERP form to a text box in the mobile application. This ability can be useful when both of the         following conditions are met: You have one of the following problems with the use of the field in the mobile               application: A value in the control for the field is displayed oddly or incorrectly. The mapping of the field raises an exception. You do not need to specify a new value for the field in the mobile application. For these conditions, you can force the mobile application to treat this field as a         common text field. To do this, in the  sm:Field  tag for the field, you can specify the            ForceType="String"  attribute. The input value is inserted directly into         the cache of the corresponding container. We do not recommend that you use the  ForceType          attribute unless you have extensive experience developing custom controls and fully         understand the outcome of using this attribute. Note that by using the            ForceType  attribute, you could switch off some types of field         validation, which could damage data in the database.  ]]></column>
		</row>
		<row PageID="ef1e53fe-0b91-4e6d-9ea8-3a61ea872b39" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="b5d42aee-21a6-3bd1-e60b-8010f9e49297" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The mobile app provides an additional functionality to create the user signature and attach the signature image file to an Acumatica ERP form that supports file attachments.((({S:Warn}This functionality does not work in the [HelpRoot_Dev_Mobile\MOBILE_sm_Container|&lt;sm:Container&gt;] tag that contains the [HelpRoot_Dev_Mobile\MOBILE_sm_Attachments|&lt;sm:Attachments&gt;] tag with the <tt>Disabled</tt> attribute set to ''true''.
))){br}

To add this functionality to the mobile site map, you should add the [HelpRoot_Dev_Mobile\MOBILE_sm_Action|&lt;sm:Action&gt;] tag with the <tt>Behavior</tt> attribute set to ''SignReport'' to a container of a screen that is mapped to a form, which supports attachments. In the action tag, you should also specify the <tt>Name</tt> and <tt>Context</tt> attributes as shown in the following example.{{{{...
&lt;sm:Action Behavior="SignReport" Context="Record" DisplayName="Sign" Name="SignReport"/&gt;
...
}}}}{br}

As a result, the '''SIGN''' action will appear on the appropriate screen of the mobile app, as the following screenshot shows.[anchor|#_926f0e9a-8bee-4f39-be6e-942f6e5fcfe9][anchor|#_0f56915f-2f0e-42dd-9c61-1591d7f9733d][image:StudioDeveloperGuide/Images/MOBILE_UserSignature_01.png|popup|Viewing the SIGN action on the toolbar of a screen|200px]When the user clicks this action, the application displays a blank form with the '''Cancel''' and '''OK''' buttons and suggests the user to add the signature, as shown in the following screenshot.[anchor|#_a98915f0-3d09-46f9-98dc-e7424f2405fe][anchor|#_03db1a84-ff43-44fe-a144-e35cb08d5eba][image:StudioDeveloperGuide/Images/MOBILE_UserSignature_02.png|popup|Creating a signature|200px]After the user signs the form and clicks '''OK''', an attachment with the signature adds to the screen in the mobile app (see the following screenshot). To save the signature file in the database, the user should click the Save button.[anchor|#_64f48546-2288-4b73-8aa3-114326516efb][anchor|#_ca4d931e-a906-445d-ae6c-54051f66c4a1][image:StudioDeveloperGuide/Images/MOBILE_UserSignature_03.png|popup|Viewing the signature added to the screen of the mobile app|200px]After the user clicks Save on the screen toolbar, the mobile app sends the signature file to the Acumatica ERP server that saves the file in the database as a file attached to the appropriate form. In the mobile application, the attachment is displayed as an image that is attached to the Acumatica ERP form.[anchor|#_e0ffad79-55c9-4db6-b44f-0a9bbb256114][anchor|#_fa83d5f1-e901-494d-a282-0fffdf77f2cd][image:StudioDeveloperGuide/Images/MOBILE_UserSignature_04.png|popup|Viewing the signature added to the Acumatica ERP form|200px]]]></column>
			<column name="PlainText"><![CDATA[Creating the User Signature The mobile app provides an additional functionality to create the user signature and attach the    signature image file to an  Acumatica ERP    form that supports file attachments. This functionality does not work in the  &lt;sm:Container&gt; tag that contains the  &lt;sm:Attachments&gt; tag with the  Disabled  attribute set to  true . To add this functionality to the mobile site map, you should add the  &lt;sm:Action&gt; tag with the  Behavior  attribute set to      SignReport  to a container of a screen that is mapped to a form, which supports    attachments. In the action tag, you should also specify the  Name  and      Context  attributes as shown in the following    example. ...
<sm:Action Behavior="SignReport" Context="Record" DisplayName="Sign" Name="SignReport"/>
... As a result, the  SIGN  action will appear on the appropriate screen of    the mobile app, as the following screenshot shows. Viewing the SIGN action on the toolbar of a screen When the user clicks this action, the application displays a blank form with the      Cancel  and  OK  buttons and suggests the user to add    the signature, as shown in the following screenshot. Creating a signature After the user signs the form and clicks  OK , an attachment with the    signature adds to the screen in the mobile app (see the following screenshot). To save the    signature file in the database, the user should click the Save button. Viewing the signature added to the screen of the mobile app After the user clicks Save on the screen toolbar, the mobile app sends the signature file    to the  Acumatica ERP    server that saves the file in the database as a file attached to the appropriate form. In the    mobile application, the attachment is displayed as an image that is attached to the  Acumatica ERP     form. Viewing the signature added to the  Acumatica ERP      form ]]></column>
		</row>
		<row PageID="f969ceb4-c40c-4647-b84d-525f70761326" Language="en-US" PageRevisionID="1" Content="[anchor|#title_wfn_n3l_ts]&#xA;This chapter contains reference information for the elements that are used to configure the mobile site map of the Acumatica mobile app.&#xA;==In This Chapter==[anchor|#ul_wwq_q5m_4r]&#xA;*[HelpRoot_Dev_Mobile\MOBILE_Ref_MSDL|MSDL]&#xA;*[HelpRoot_Dev_Mobile\MOBILE_Ref_Tags|XML Tags] (deprecated)&#xA;*[HelpRoot_Dev_Mobile\MOBILE_Ref_Icons|Icons]&#xA;" PlainText="Mobile Site Map Reference This chapter contains reference information for the elements that are used to configure the       mobile site map of the  Acumatica       mobile app. In This Chapter MSDLXML Tags (deprecated) Icons" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="7dade644-c6fd-5601-fc83-0899e769b050" RecordSourceID="22377" />
		<row PageID="0d4f5b50-7959-4532-8b0e-6352d2a8ee84" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="17da6960-8840-2116-da84-95e5386d3cda" RecordSourceID="22377">
			<column name="Content"><![CDATA[
Mobile Site Map Definition Language (MSDL) can be used for the following purposes:[anchor|#_22b8e13f-ee5c-4088-b3ce-e99b4e2798fe]
*To change the mobile site map
*To create the content for the empty mobile site map
{br}

MSDL includes the following regulations and recommendations:[anchor|#_3f3a8f0c-05f1-4e26-83fb-478b4e3ea744]
*Instruction names are not case sensitive. For example, you can enter the <tt>add</tt> instruction as ''Add'', ''ADD'', or ''aDD''.
*Each instruction must be written in a new line of MSDL code.
*You can use any number of spaces before an instruction in a line of code.
*If an instruction is located inside braces, this instruction is executed in the context of the object of the instruction that contains the opening bracket.
*An instruction can contain multiple nested instructions within braces.
*To specify or update the value of an attribute of an object in the mobile site map, add the attribute assignment within braces for the instruction for the object, as shown in the following code.{{{{    add recordAction "EditDetail" {
      behavior = Open
    }
}}}}
*An instruction can contain multiple assignment commands within braces.
*Braces for an instruction can be placed on the same line after the instruction or on the next line, as shown in the following code.{{{{    add field "Date" {
      ...
    }
    add field "Description"
    {
      ...
    }

}}}}
*You can omit the space before and after braces, as the following example shows.{{{{add item "EP301010"{
  displayName = "Expense Receipts"}
}}}}
*A comment starts with the ''#'' symbol and is considered finished at the end of the line.{{{{# this is a comment
}}}}
{br}

This section contains detailed information about the following elements of MSDL:[anchor|#_dbef14d1-2741-407d-a317-eb34d0f757e8]
*[HelpRoot_Dev_Mobile\MOBILE_Ref_MSDL_ObjTypes|Object Types]
*[HelpRoot_Dev_Mobile\MOBILE_Ref_MSDL_Constants|Constants]
*[HelpRoot_Dev_Mobile\MOBILE_Ref_MSDL_Instructions|Instructions]
*[HelpRoot_Dev_Mobile\MOBILE_Ref_MSDL_Errors|Error Messages]
]]></column>
			<column name="PlainText"><![CDATA[MSDL Mobile Site Map Definition Language (MSDL) can be used for the following purposes: To change the mobile site map To create the content for the empty mobile site map MSDL       includes the following regulations and recommendations: Instruction names are not case sensitive. For example, you can enter the              add  instruction as  Add ,  ADD , or  aDD . Each instruction must be written in a new line of MSDL code. You can use any number of spaces before an instruction in a line of code. If an instruction is located inside braces, this instruction is executed in the context           of the object of the instruction that contains the opening bracket. An instruction can contain multiple nested instructions within braces. To specify or update the value of an attribute of an object in the mobile site map, add           the attribute assignment within braces for the instruction for the object, as shown in the           following           code.     add recordAction "EditDetail" {
      behavior = Open
    } An instruction can contain multiple assignment commands within braces. Braces for an instruction can be placed on the same line after the instruction or on the           next line, as shown in the following           code.     add field "Date" {
      ...
    }
    add field "Description"
    {
      ...
    }
 You can omit the space before and after braces, as the following example           shows. add item "EP301010"{
  displayName = "Expense Receipts"} A comment starts with the  #  symbol and is considered finished at the end of the           line. # this is a comment This section contains detailed information about the following elements of MSDL: Object TypesConstantsInstructionsError Messages]]></column>
		</row>
		<row PageID="f8ff0ca4-6fb3-49d2-b77c-b1491ff8f7c9" Language="en-US" PageRevisionID="1" PlainText="Object Types An MSDL instruction can be applied to the following object types: The following action object types: containerAction (applied to a whole               container) listAction (applied to a list view) recordAction (applied a single opened               record) selectionAction (applied to a list of               selected records) These link object types: containerLinkrecordActionLinkattributescontainerfieldfoldergroupitemscreentypeUDFieldsObjects have attributes, and each attribute can have any number of possible values. If the       attribute is an indicator, it can have only the  true  or  false  value. The topics in this section provide reference information on each of these object types,       including a list of attributes and an example of the use of the object type. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="eb33dbe5-f42c-7c32-6be9-960225e8cde0" RecordSourceID="22377">
			<column name="Content"><![CDATA[
An MSDL instruction can be applied to the following object types:{br}

[anchor|#_cc8449dc-ee32-42d8-822d-9488e3db3aad]
*The following action object types:
**[HelpRoot_Dev_Mobile\mobile_ref_msdl_objtypes_containeraction|containerAction] (applied to a whole container)
**[HelpRoot_Dev_Mobile\mobile_ref_msdl_objtypes_lista|listAction] (applied to a list view)
**[HelpRoot_Dev_Mobile\mobile_ref_msdl_objtypes_recordaction|recordAction] (applied a single opened record)
**[HelpRoot_Dev_Mobile\mobile_ref_msdl_objtypes_seleciona|selectionAction] (applied to a list of selected records)
*These link object types:
**[HelpRoot_Dev_Mobile\mobile_ref_msdl_objtype_containerlink|containerLink]
**[HelpRoot_Dev_Mobile\MOBILE_ref_MSDL_objtypes_RecordActionLink|recordActionLink]
*[HelpRoot_Dev_Mobile\Mobile_Ref_MSDL_Instructions_Attributes|attributes]
*[HelpRoot_Dev_Mobile\mobile_ref_msdl_objtype_container|container]
*[HelpRoot_Dev_Mobile\mobile_ref_msdl_objtypes_field|field]
*[HelpRoot_Dev_Mobile\mobile_ref_msdl_objtype_folder|folder]
*[HelpRoot_Dev_Mobile\mobile_ref_msdl_objtype_group|group]
*[HelpRoot_Dev_Mobile\mobile_ref_msdl_objtypes_item|item]
*[HelpRoot_Dev_Mobile\mobile_ref_msdl_objtypes_screen|screen]
*[HelpRoot_Dev_Mobile\mobile_ref_msdl_objtypes_|type]
*[HelpRoot_Dev_Mobile\MOBILE_Ref_MSDL_ObjTypes_UDFields|UDFields]
{br}

Objects have attributes, and each attribute can have any number of possible values. If the attribute is an indicator, it can have only the ''true'' or ''false'' value.{br}

The topics in this section provide reference information on each of these object types, including a list of attributes and an example of the use of the object type.]]></column>
		</row>
		<row PageID="e0dbef2d-3a54-414c-9391-cbbb0cbe34de" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="bbf8129a-4665-4271-a224-6ce3e3f8ad20" RecordSourceID="22377">
			<column name="Content"><![CDATA[
An object that maps an entity attributes to the mobile app screen.{br}{TOC}
==Attributes==[anchor|#_9ac1f27d-3be2-4d9a-8b3c-121137c8a9a1]
{| class="checklist" | width="100%" 
|- 
!width="25%" ! Attribute
!width="75%" ! Description
|- 
| <tt>From</tt>
| The name of the data view for the grid that contains the entity attributes.
|- 
| <tt>FormPriority</tt>
| The priority value that defines the position of the entity attributes on the screen.
|- 
| <tt>Name</tt>
| The identifier of the attributes, as found in the WSDL schema.
|}{br}

The <tt>attributes</tt> object can also be used to map a grid of Acumatica ERP to a form view that displays key-value pairs. Then you should also use the following attributes inside the instruction.[anchor|#_80fd62db-f2ef-4b81-8a81-98084f1dde1b]
{| class="checklist" | width="100%" 
|- 
!width="25%" ! Attribute
!width="75%" ! Description
|- 
| <tt>IDField</tt>
| The identifier of the grid field, as found in the WSDL schema, that specifies the key field for the key-value pairs. By default, the value is ''AttributeID''.
|- 
| <tt>IDValue</tt>
| The identifier of the grid field, as found in the WSDL schema, that specifies the value field for the key-value pairs. By default, the value is ''Value''.
|- 
| <tt>OrderField</tt>
| Optional. The grid field identifier, as found in the WSDL schema, that is used for sorting rows in the grid to display in the form view. By default, the value is ''Order''.
|}
==Example==
In the following example, a grid containing two entity attributes is added.{{{{add attributes "GridDataView" {
  displayName = "Status"
  displayName = "Quantity"
}
}}}}
==Related Articles==
*[HelpRoot_Dev_Mobile\MOBILE_sm_Attributes|&lt;sm:Attributes&gt;]
*[HelpRoot_Dev_Mobile\mobile_msdl_screen_entityattr|Adding Attributes of Entities to Mobile Screens]]]></column>
			<column name="PlainText"><![CDATA[attributes An object that maps an entity attributes to the mobile app screen. Attributes Attribute Description From The name of the data view for the grid that contains the entity attributes. FormPriority The priority value that defines the position of the entity attributes on the         screen. Name The identifier of the attributes, as found in the WSDL schema. The  attributes  object can also be used to map a grid of  Acumatica ERP     to a form view that displays key-value pairs. Then you should also use the following attributes     inside the instruction. Attribute Description IDField The identifier of the grid field, as found in the WSDL schema, that specifies the key         field for the key-value pairs. By default, the value is  AttributeID . IDValue The identifier of the grid field, as found in the WSDL schema, that specifies the         value field for the key-value pairs. By default, the value is  Value . OrderField Optional. The grid field identifier, as found in the WSDL schema, that is used for         sorting rows in the grid to display in the form view. By default, the value is          Order . Example In the following example, a grid containing two entity attributes is added. add attributes "GridDataView" {
  displayName = "Status"
  displayName = "Quantity"
} ]]></column>
		</row>
		<row PageID="b6aaf8be-e7f3-4206-a721-65853a9f2d32" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="5427e58a-8386-f578-3ba4-6db3c04c7809" RecordSourceID="22377">
			<column name="Content"><![CDATA[
An object that maps a form container to the mobile app. The object can include fields, actions, nested containers, and other elements. {br}{TOC}
==Attributes==[anchor|#_9ac1f27d-3be2-4d9a-8b3c-121137c8a9a1]
{| class="checklist" | width="100%" 
|- 
!width="25%" ! Attribute
!width="75%" ! Description
|- 
| <tt>AttachmentsControlPriority</tt>
| The priority value that defines the position of the attachments in the list. ((({S:Warn}This attrubute is deprecated. Now the attachments icon is displayed on the top toolbar of the app screen. For details, see [HelpRoot_Dev_Mobile\mobile_msdl_screen_|Configuring Attachments].
)))
|- 
| <tt>Attributes</tt>
| An indicator of whether this container holds entity attributes. If the indicator value is ''true'', you should not specify the items of the container, because the container configuration is generated dynamically.
|- 
| <tt>ContainerActionsToExpand</tt>
| The number of <tt>containerAction</tt> objects to be visible in the toolbar on the list screen. The default value depends on the platform of the particular mobile device running the app.
|- 
| <tt>DisplayName</tt>
| The name of the container on the UI.
|- 
| <tt>FieldsToShow</tt>
| The number of fields to be displayed in the list.
|- 
| <tt>FormActionsToExpand</tt>
| The number of <tt>recordAction</tt> objects to be visible in the toolbar on the editing screen. The default value depends on the platform of particular mobile device running the app.
|- 
| <tt>ListActionsToExpand</tt>
| The number of <tt>listAction</tt> and <tt>selectionAction</tt> objects to be visible in the toolbar on the list screen when the multiple selection of records is activated. The default value depends on the platform of the particular mobile device running the app.
|- 
| <tt>Type</tt>
| An optional attribute that specifies the type of the container. The only possible value is ''SelectionActionList'', which is used for a <tt>listAction</tt> object. See [HelpRoot_Dev_Mobile\mobile_msdl_screen_nested#_1e07d417-e059-447d-a693-fb06a87b4850|Example: Configuring a Screen with Many-to-One (Master-Detail) Containers] or [HelpRoot_Dev_Mobile\mobile_ref_msdl_objtypes_lista|listAction] for details.
|- 
| <tt>Visible</tt>
| An indicator of whether the link to the container is visible on the editing screen. This attribute can be applied to a secondary container. By default, the value is ''true''.
|}
==Example==
In the following example, a container with two fields is added.{{{{add container "OrdersToApply" {    
    fieldsToShow = 2       
    add field "AppliedToOrder" {      
        listPriority = 90    
    }    
    add field "NoteText" {      
        textType = PlainMultiLine    
    }    
}
}}}}
==Related Articles==
*[HelpRoot_Dev_Mobile\MOBILE_sm_Container|&lt;sm:Container&gt;]]]></column>
			<column name="PlainText"><![CDATA[container An object that maps a form container to the mobile app. The object can include fields,         actions, nested containers, and other elements.  Attributes Attribute Description AttachmentsControlPriority The priority value that defines the position of the attachments in the list.           This attrubute is deprecated. Now the attachments icon is displayed on the top          toolbar of the app screen. For details, see  Configuring Attachments. Attributes An indicator of whether this container holds entity attributes. If the indicator value                 is  true , you should not specify the items of the container, because the                 container configuration is generated dynamically. ContainerActionsToExpand The number of  containerAction  objects to be visible in the toolbar                 on the list screen. The default value depends on the platform of the particular                 mobile device running the app. DisplayName The name of the container on the UI. FieldsToShow The number of fields to be displayed in the list. FormActionsToExpand The number of  recordAction  objects to be visible in the toolbar on                 the editing screen. The default value depends on the platform of particular mobile                 device running the app. ListActionsToExpand The number of  listAction  and  selectionAction                  objects to be visible in the toolbar on the list screen when the multiple selection                 of records is activated. The default value depends on the platform of the particular                 mobile device running the app. Type An optional attribute that specifies the type of the container. The only possible         value is  SelectionActionList , which is used for a  listAction          object. See  Example: Configuring a Screen with Many-to-One (Master-Detail) Containers or  listAction for details. Visible An indicator of whether the link to the container is visible on the editing screen.                 This attribute can be applied to a secondary container. By default, the value is                    true . Example In the following example, a container with two fields is added. add container "OrdersToApply" {    
    fieldsToShow = 2       
    add field "AppliedToOrder" {      
        listPriority = 90    
    }    
    add field "NoteText" {      
        textType = PlainMultiLine    
    }    
} ]]></column>
		</row>
		<row PageID="b1bf6034-920e-4964-a6d8-5c611624e92c" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="6513ff64-706c-8d65-8f78-d3d2605f9b33" RecordSourceID="22377">
			<column name="Content"><![CDATA[
In the mobile site map, an object that defines the appearance and behavior of an action that is related to a container and performs the business logic implemented in Acumatica ERP. This type of action is displayed only on the list view.{br}{TOC}
==Attributes==[anchor|#_11cf3842-c1ca-4cc8-9ace-1b186c59dbce]
{| class="checklist" | width="100%" 
|- 
!width="25%" ! Attribute
!width="74%" ! Description
|- 
| <tt>After</tt>
| 
The behavior of the current container after the action is completed. The value can be one of the following:[anchor|#_eca37c86-3e6e-4919-97b8-eaa2ebd84516]
*''Refresh'': The current container should be refreshed after the action is completed.
*''Close'': The current container should be closed after the action is completed.

If the <tt>Redirect</tt> attribute of an action object is set to ''true'', the <tt>After</tt> attribute of this object defines more complex behavior for the current container. See [HelpRoot_Dev_Mobile\mobile_msdl_screen_redirectin|Redirecting the User to Different Screens and Containers] for details.
|- 
| <tt>Behavior</tt>
| 
Required. The behavior of the action—which defines how the mobile app obtains from the server the data resulting from the action and processes this data. The value can be one of the following:[anchor|#_e2eee84d-8681-4b40-aa41-57141a7a7a92]
*''Create'': Creates a new data record. If the <tt>Redirect</tt> attribute value is ''true'', this action redirects the user to a container defined on a different screen.
*''Open'': Opens the data record for editing on a different screen. If the <tt>Redirect</tt> attribute value is ''true'', this action redirects the user to a container defined on a different screen.
*''Record'': Indicates that the mobile app should to expect a single record as the server response.
*''SignReport'': Indicates that the mobile app should add the '''Sign''' action to the container. This action is not implemented in Acumatica ERP and uses the specific capabilities of the mobile devices to create the user signature as an image file. The user can save the signature in the database of the Acumatica ERP instance as a file attachment for the appropriate form. See [HelpRoot_Dev_Mobile\MOBILE_UserSignature|Creating the User Signature] for details.
*''Void'': Tells the mobile app to not use any records that are returned in the server response.

|- 
| <tt>DisplayName</tt>
| The name of the action in the UI.
|- 
| <tt>Icon</tt>
| The name of the image that is used to display the action icon on the UI. If this attribute is not specified for an action, the action is displayed on the UI without an icon. 
See [HelpRoot_Dev_Mobile\MOBILE_Ref_Icons|Icons] for the possible values and the corresponding images for the <tt>Icon</tt> attribute.
|- 
| <tt>Priority</tt>
| The priority value that defines the position of the action on the screen or the toolbar relative to other container actions.
|- 
| <tt>Redirect</tt>
| An indicator of whether the action redirects the user to a container of a screen. You can use this attribute to do the following:[anchor|#_0173422a-5277-41f5-aa51-26ce9285f80a]
*Allow a redirection defined for the action in Acumatica ERP by setting the attribute to ''true''.
*Deny a redirection defined for the action in Acumatica ERP by setting the attribute to ''false''. This is the default setting of the <tt>Redirect</tt> attribute.
*Define a new redirection for the action by setting the attribute to ''true'' and specifying the attributes of this tag to set one of the following as the destination of the redirection:
**<tt>RedirectToScreen</tt>, to redirect to the primary container of the specified screen
**<tt>RedirectToContainer</tt>, to redirect to another container of the current screen
**<tt>RedirectToScreen</tt> and <tt>RedirectToContainer</tt>, to redirect to a specified container of a specified screen
*:((({S:Warn}See [HelpRoot_Dev_Mobile\mobile_msdl_screen_redirectin|Redirecting the User to Different Screens and Containers] for more details.
)))

|- 
| <tt>RedirectToContainer</tt>
| The name of the destination container. The name can consist of the following parts separated by the ''$'' symbol:[anchor|#_d7f3ff5e-b367-4e65-b6e6-7640eb174abe]
*The name of the container
*The display type of the container: ''List'' or ''Form'' (default)
*The optional name of the additional container whose data is used as a filter
The mobile site map has to include the metadata for this container.
For details, see [HelpRoot_Dev_Mobile\mobile_msdl_screen_redirectin|Redirecting the User to Different Screens and Containers].
|- 
| <tt>RedirectToScreen</tt>
| The name of the destination screen. The mobile site map has to include the metadata for this screen. For details, see [HelpRoot_Dev_Mobile\mobile_msdl_screen_redirectin|Redirecting the User to Different Screens and Containers].
|- 
| <tt>SyncLongOperation</tt>
| An indicator of whether the mobile app should wait until the action is completed if this action is defined as a <tt>PXLongRunOperation</tt> one and is executed asynchronously in Acumatica ERP. By default, the <tt>SyncLongOperation</tt> attribute is set to ''false''.
|}
==Example==
In the following example, an action for creating a new record is added.{{{{add containerAction "Insert" {      
    icon = "system://Plus"      
    behavior = Create    
}
}}}}
==Related Articles==
*[HelpRoot_Dev_Mobile\MOBILE_sm_Action|&lt;sm:Action&gt;]]]></column>
			<column name="PlainText"><![CDATA[containerAction In the mobile site map, an object that defines the appearance and behavior of an action that     is related to a container and performs the business logic implemented in  Acumatica ERP.     This type of action is displayed only on the list view. Attributes Attribute Description After The behavior of the current container after the action is completed. The value can be one          of the following: Refresh : The current container should be refreshed after the action is           completed. Close : The current container should be closed after the action is           completed. If the  Redirect  attribute of an action object is set to  true ,          the  After  attribute of this object defines more complex behavior for the          current container. See  Redirecting the User to Different Screens and Containers for details. Behavior Required. The behavior of the action—which defines how the mobile app obtains from          the server the data resulting from the action and processes this data. The value can be one          of the following: Create : Creates a new data record. If the  Redirect  attribute           value is  true , this action redirects the user to a container defined on a different           screen. Open : Opens the data record for editing on a different screen. If the             Redirect  attribute value is  true , this action redirects the           user to a container defined on a different screen. Record : Indicates that the mobile app should to expect a single record as the           server response. SignReport : Indicates that the mobile app should add the             Sign  action to the container. This action is not implemented in             Acumatica ERP and uses the specific capabilities of the mobile devices to create the user signature           as an image file. The user can save the signature in the database of the  Acumatica ERP instance as a file attachment for the appropriate form. See  Creating the User Signature for details. Void : Tells the mobile app to not use any records that are returned in the           server response. DisplayName The name of the action in the UI. Icon The name of the image that is used to display the action icon on the UI. If this         attribute is not specified for an action, the action is displayed on the UI without an icon.           See  Icons for the possible values and the corresponding          images for the  Icon  attribute. Priority The priority value that defines the position of the action on the screen or the         toolbar relative to other container actions. Redirect An indicator of whether the action redirects the user to a container of a screen. You         can use this attribute to do the following: Allow a redirection defined for the action in  Acumatica ERP by setting the attribute to  true . Deny a redirection defined for the action in  Acumatica ERP by setting the attribute to  false . This is the default setting of the             Redirect  attribute. Define a new redirection for the action by setting the attribute to  true  and           specifying the attributes of this tag to set one of the following as the destination of           the redirection: RedirectToScreen , to redirect to the primary container of the             specified screen RedirectToContainer , to redirect to another container of the             current screen RedirectToScreen  and  RedirectToContainer , to             redirect to a specified container of a specified screen See  Redirecting the User to Different Screens and Containers for more           details. RedirectToContainer The name of the destination container. The name can consist of the following parts         separated by the  $  symbol: The name of the container The display type of the container:  List  or  Form  (default) The optional name of the additional container whose data is used as a filter The mobile site map has to include the metadata for this container. For details, see            Redirecting the User to Different Screens and Containers. RedirectToScreen The name of the destination screen. The mobile site map has to include the metadata         for this screen. For details, see  Redirecting the User to Different Screens and Containers. SyncLongOperation An indicator of whether the mobile app should wait until the action is completed if         this action is defined as a  PXLongRunOperation  one and is executed         asynchronously in  Acumatica ERP. By default, the  SyncLongOperation  attribute is set to          false . Example In the following example, an action for creating a new record is added. add containerAction "Insert" {      
    icon = "system://Plus"      
    behavior = Create    
} ]]></column>
		</row>
		<row PageID="cb5f0124-06e7-4255-9638-f0532399b1d1" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="2404fe55-b285-52a0-9b04-93b894517870" RecordSourceID="22377">
			<column name="Content"><![CDATA[
An object that specifies a link to another container on the screen toolbar or on the screen among the fields.{br}{TOC}
==Attributes==[anchor|#_5168d669-1fa8-4e02-9752-7740a4261a27]
{| class="checklist" | width="100%" 
|- 
!width="25%" ! Attribute
!width="75%" ! Description
|- 
| <tt>Container</tt>
| The name that that will serve as the link to the container. 
|- 
| <tt>Control</tt>
| The type of control, which is one of the following values:[anchor|#_b3441658-f08a-440a-af43-4125307877f2]
*''ListItem'': An indicator that the link to the container is displayed among the fields on the screen according to the value defined in the <tt>Priority</tt> attribute of this object.
*''Button'': An indicator that the link to the container is displayed in the screen toolbar according to the value defined in the <tt>Priority</tt> attribute of this object.

|- 
| <tt>Icon</tt>
| The name of the image that is used to display the link when the <tt>Control</tt> attribute is set to ''Button'' and the link is displayed in the action panel in the UI. If this attribute is not specified for a link, the link is displayed in the UI without an icon. See the possible values and the corresponding images for the <tt>Icon</tt> attribute in [HelpRoot_Dev_Mobile\MOBILE_Ref_Icons|Icons].
|- 
| <tt>Priority</tt>
| The priority value that defines the position of the link in the enclosing container on the screen.
|- 
| <tt>ValueField</tt>
| The name of the field whose value is used as the link text. The field must be declared in the container.
|- 
| <tt>Weight</tt>
| The value that is used to set the width of the link within the row of the UI element defined by the [HelpRoot_Dev_Mobile\mobile_ref_msdl_objtypes_layout|layout] object with the <tt>Template</tt> attribute set to ''Inline''. The default value is ''1''.
|}
==Example==
In the following example, a link to a container is added.{{{{add containerLink "Details" {
      control = "ListItem"
      formPriority = 51
}
}}}}
==Related Articles==
*[HelpRoot_Dev_Mobile\mobile_msdl_screen_nested|Configuring Related Containers]
*[HelpRoot_Dev_Mobile\MOBILE_sm_ContainerLink|&lt;sm:ContainerLink&gt;]]]></column>
			<column name="PlainText"><![CDATA[containerLink An object that specifies a link to another container on the screen toolbar or on the screen         among the fields. Attributes Attribute Description Container The name that that will serve as the link to the container.  Control The type of control, which is one of the following values: ListItem : An indicator that the link to the container is displayed                     among the fields on the screen according to the value defined in the                        Priority  attribute of this object. Button : An indicator that the link to the container is displayed in the                     screen toolbar according to the value defined in the  Priority                      attribute of this object. Icon The name of the image that is used to display the link when the                    Control  attribute is set to  Button  and the link is                 displayed in the action panel in the UI. If this attribute is not specified for a                 link, the link is displayed in the UI without an icon. See the possible values and                 the corresponding images for the  Icon  attribute in  Icons. Priority The priority value that defines the position of the link in the enclosing                 container on the screen. ValueField The name of the field whose value is used as the link text. The field must be                 declared in the container. Weight The value that is used to set the width of the link within the row of the UI                 element defined by the  layout object                 with the  Template  attribute set to  Inline . The default                 value is  1 . Example In the following example, a link to a container is added. add containerLink "Details" {
      control = "ListItem"
      formPriority = 51
} ]]></column>
		</row>
		<row PageID="e7d0b802-dedb-406d-aa24-27c767cd2710" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="8fa49240-0eb0-1ff9-764c-51fb3ca6c1be" RecordSourceID="22377">
			<column name="Content"><![CDATA[
An object that maps a UI element field to the mobile app. This object can include fields, actions, nested containers, and other elements. {br}

If a field from one container is also used in another container, you should use the {{ContainerName#FieldName}} format of the field name, where {{ContainerName}} is the name of the container (as it is specified in the WSDL schema) that contains the field, and {{FieldName}} is the name of the field in this container. See [HelpRoot_Dev_Mobile\mobile_msdl_screen_nested#_b7eb3fd7-220f-4e6f-a513-82d0a73b2f9b|Example: Displaying Fields from Different Containers in One Container ] for details.{br}{TOC}
==Attributes==[anchor|#_409b70e3-1b83-4a6d-a631-ca17ca427e2e]
{| class="checklist" | width="100%" 
|- 
!width="25%" ! Attribute
!width="74%" ! Description
|- 
| <tt>displayName</tt>
| The name for the field, which by default is automatically set by the system. However, you can change it.
|- 
| <tt>forceIsDisabled</tt>
| An indicator of whether the field will be unavailable on the editing form regardless of the server logic. By default, the field availability depends on the server logic.
|- 
| <tt>forceIsVisible</tt>
| An indicator of whether the field is visible on the editing form regardless of the server logic. By default, the field visibility depends on the server logic.
|- 
| <tt>forceRequired</tt>
| An indicator of whether the field is mandatory and must be filled in on the screen. If its value is ''true'', the field is mandatory. If its value is ''false'', the field is not mandatory. If the attribute is not specified, the need to fill the field is determined by the data obtained from the server.
|- 
| <tt>forceType</tt>
| The field type that is used by the application instead of the original field type. The only value of this attribute is ''String'', which is an indicator of whether the field is visible on the editing form regardless of the server logic. By default, the field visibility depends on the server logic.
|- 
| <tt>formPriority</tt>
| The priority value that defines the position of the field on the form.
|- 
| <tt>listDisplayFormat</tt>
| The format that is used to display the field in the list. The value can be one of the following:[anchor|#_5f92958c-9a84-4c1d-84e1-e97d1a643468]
*''Value'': An indicator that the field is represented only by the field value in the list.
*''CaptionValue'': An indicator that the field is represented by the caption and the value in the list.

This attribute is applicable only to <tt>selector</tt> fields. See [HelpRoot_Dev_Mobile\MOBILE_Ref_MSDL_Instr_SELECTOR|selector] and [HelpRoot_Dev_Mobile\mobile_msdl_screen_selectors|Configuring Selectors] for details.
|- 
| <tt>listPriority</tt>
| The priority value that defines the position of the field in the list.
|- 
| <tt>pickerType</tt>
| The processing type of the selector field value; this attribute is applicable to only selector fields. The value can be one of the following:[anchor|#_6b1cb0af-160e-4519-9064-7cfed442493f]
*''Attached'': An indicator that the selector is displayed as a pop-up dialog box.
*''Detached'': An indicator that the selector is displayed as a separate screen.
*''Searchable'': An indicator that the mobile app should display the Search button (
*:[image:StudioDeveloperGuide/Images/ic_lens_36x36.png|15px]) right of the field control. If the user enters a text fragment in the control and clicks the button, the app sends to the Acumatica ERP server a query to search the records, and find those that contain the specified fragment in the field value. After the response, the mobile app opens the selector screen and displays the list of the field values obtained from the server. The user uses the list to select a value for the selector control.

|- 
| <tt>selectorDisplayFormat</tt>
| The selector field format that is used to display the field value. The value can be one of the following:[anchor|#_8f23632f-d1ff-4998-8b59-caf0a8982188]
*''Key'': An indicator that the value is represented by the key field of the selector.
*''Description'': An indicator that the value is represented by the value field of the selector. This is the default value of the <tt>SelectorDisplayFormat</tt> attribute.
*''KeyDescription'': An indicator that the value is represented by the combination of the key and value fields of the selector.

This attribute is applicable to only selector fields. See [HelpRoot_Dev_Mobile\MOBILE_Ref_MSDL_Instr_SELECTOR|selector] and [HelpRoot_Dev_Mobile\mobile_msdl_screen_selectors|Configuring Selectors] for details.
|- 
| <tt>special</tt>
| 
The field type that is used by the mobile app for a specific purpose. The value can be one of the following:[anchor|#_a5b28218-ff8d-4dc7-9882-bdae386e9329]
*''AllowEdit'' (applicable to selector fields only): An indicator that the app should display the Edit button (
*:[image:StudioDeveloperGuide/Images/ic_mode_edit_white_24dp.png|15px]) right of the field. If the user taps the button, the mobile app opens the data entry form for the business entity (such as a customer or sales order), selected in the field. The button appears if both of the following conditions are met:
**On the Acumatica ERP form, the edit button is displayed for the corresponding control.
**In the mobile app, the field is not empty and contains an ID that can be used to select the appropriate data record of the business entity.
*''EmailAddress'': An indicator that the app should treat this field as an input box for an email address. It enables auto-complete for email addresses: As the user types an email address for a new email activity by using the on-screen keyboard, the system displays a list of possible completions, which are derived from the system database or from the device&rsquo;s address book. The ''EmailAddress'' value is not supported in iOS apps.
*''EmailSend'': An indicator that the app should display the Send Email button (
*:[image:StudioDeveloperGuide/Images/ic_email_white_24dp.png|15px]) right of the field control. If the user clicks the button, the mobile app forces the system of the mobile device to create a new email message and use the field value as the destination address for the message. In iOS, the Mail app is opened.
*''PhoneCall'': An indicator that the app should display the Phone Call button (
*:[image:StudioDeveloperGuide/Images/ic_call_white_24dp.png|15px]) right of the field. If the user taps the button, the mobile app forces the system of the mobile device to open an app for voice calls with the phone number that has been specified in the field.
*''GpsCoords'': An indicator that the app should obtain the location of the user&rsquo;s mobile device and fill the field before sending to the Acumatica ERP server the data record that is being modified on the screen. If the field with this attribute value does not have a value, an action mapped on the screen cannot be executed; for example, the user cannot save a data record that contains an empty field with the ''Special'' attribute set to ''GpsCoords''.
*:The location is reported as a string in the following format: ''&lt;Latitude&gt;:&lt;Longitude&gt;'' (for instance, ''65.61295166666667:-20.137938333333334'').
*:You can forcibly hide the field by setting the <tt>ForceIsVisible</tt> attribute to ''false'', so it is not shown in the user interface, or you can make the field unavailable for editing by setting the <tt>ForceIsDisabled</tt> attribute to ''true''. If the <tt>ForceIsVisible</tt> and <tt>ForceIsDisabled</tt> attributes are not specified, then the appropriate field state will be defined by the Acumatica ERP server.
*''UrlOpen'': An indicator that the app should display the Open URL button (
*:[image:StudioDeveloperGuide/Images/ic_web_white_24dp.png|15px]) right of the field control. If the user clicks the button, the mobile app forces the system of the mobile device to launch the default browser (Safari in iOS) for the external URL specified in the field control.

The following screenshot shows an example of using the <tt>Special</tt> attribute for fields mapped on a screen in the mobile app.[anchor|#_45ea1f0e-22e7-4728-ae21-286947965de6][anchor|#_0a5e60d3-95f2-4b02-9564-a95cc6da5e42][image:StudioDeveloperGuide/Images/MOBILE_smField_Special_01.png|popup|Viewing the fields with the <tt>Special</tt> attribute in the mobile app|200px]
|- 
| <tt>textType</tt>
| The type of text to be used for the field value. The value can be one of the following:[anchor|#_c99a807e-1193-4ead-a1dd-d61a218ed660]
*''HTML'': The text can be HTML markup.
*''PlainSingleLine'': The text is displayed on a single line.
*''PlainMultiLine'': The text is displayed on multiple lines. The look of the input control depends on the platform.

|- 
| <tt>weight</tt>
| The value that is used to set the width of the field within the UI element line defined by the [HelpRoot_Dev_Mobile\mobile_ref_msdl_objtypes_layout|layout] object with the <tt>layout</tt> attribute set to ''Inline''. The default value is ''1''.
In the following example, the {{TotalAmount}} field takes two-thirds of the total width, and the {{Currency}} field takes one-third.{{{{add layout "Layout_1" {
      layout = "Inline"
      add field "ReceiptDetailsExpenseDetails#TotalAmount" {
        weight = 2
      }
      add field "ReceiptDetailsExpenseDetails#Currency" {
        pickerType = Attached
      }
    }
}}}}
|}
==Example==
In the following example, a field is added.{{{{add field "OrderNbr" {        
    forceIsDisabled = True        
    listPriority = 100      
}
}}}}
==Related Articles==
*[HelpRoot_Dev_Mobile\MOBILE_sm_Field|&lt;sm:Field&gt;]]]></column>
			<column name="PlainText"><![CDATA[field An object that maps a UI element field to the mobile app. This object can include fields,         actions, nested containers, and other elements.  If a field from one container is also used in another container, you should use the            ContainerName#FieldName  format of the field name, where            ContainerName  is the name of the container (as it is specified in the         WSDL schema) that contains the field, and  FieldName  is the name of the         field in this container. See  Example: Displaying Fields from Different Containers in One Container  for details. Attributes Attribute Description displayName The name for the field, which by default                  is                 automatically set by the system . However, you can change                 it. forceIsDisabled An indicator of whether the field will be unavailable on the editing form                 regardless of the server logic. By default, the field availability depends on the                 server logic. forceIsVisible An indicator of whether the field is visible on the editing form regardless of                 the server logic. By default, the field visibility depends on the server                 logic. forceRequired An indicator of whether the field is mandatory and must be filled in on the                 screen. If its value is  true , the field is mandatory. If its value is                    false , the field is not mandatory. If the attribute is not specified, the                 need to fill the field is determined by the data obtained from the server. forceType The field type that is used by the application instead of the original field                 type. The only value of this attribute is  String , which is an indicator of                 whether the field is visible on the editing form regardless of the server logic. By                 default, the field visibility depends on the server logic. formPriority The priority value that defines the position of the field on the form. listDisplayFormat The format that is used to display the field in the list. The value can be one                 of the following: Value : An indicator that the field is represented only by the field                     value in the list. CaptionValue : An indicator that the field is represented by the caption                     and the value in the list. This attribute is applicable only to  selector  fields. See                      selector and  Configuring Selectors for details. listPriority The priority value that defines the position of the field in the list. pickerType The processing type of the selector field value; this attribute is applicable                 to only selector fields. The value can be one of the following: Attached : An indicator that the selector is displayed as a pop-up                     dialog box. Detached : An indicator that the selector is displayed as a separate                     screen. Searchable : An indicator that the mobile app should display the Search                     button ( ) right of the field control. If                     the user enters a text fragment in the control and clicks the button, the app                     sends to the  Acumatica ERP server a query to search the records, and find those that contain the                     specified fragment in the field value. After the response, the mobile app opens                     the selector screen and displays the list of the field values obtained from the                     server. The user uses the list to select a value for the selector control. selectorDisplayFormat The selector field format that is used to display the field value. The value                 can be one of the following: Key : An indicator that the value is represented by the key field of the                     selector. Description : An indicator that the value is represented by the value                     field of the selector. This is the default value of the                        SelectorDisplayFormat  attribute. KeyDescription : An indicator that the value is represented by the                     combination of the key and value fields of the selector. This attribute is applicable to only selector fields. See  selector and  Configuring Selectors for details. special The field type that is used by the mobile app for a specific purpose. The value                   can be one of the following: AllowEdit  (applicable to selector fields only): An indicator that the                     app should display the Edit button ( ) right of the field. If the user                     taps the button, the mobile app opens the data entry form for the business                     entity (such as a customer or sales order), selected in the field. The button                     appears if both of the following conditions are met: On the  Acumatica ERP form, the edit button is displayed for the corresponding control. In the mobile app, the field is not empty and contains an ID that can be                         used to select the appropriate data record of the business entity. EmailAddress : An indicator that the app should treat this field as an                     input box for an email address. It enables auto-complete for email addresses: As                     the user types an email address for a new email activity by using the on-screen                     keyboard, the system displays a list of possible completions, which are derived                     from the system database or from the device's address book. The                        EmailAddress  value is not supported in iOS apps. EmailSend : An indicator that the app should display the Send Email                     button ( ) right of the field control. If                     the user clicks the button, the mobile app forces the system of the mobile                     device to create a new email message and use the field value as the destination                     address for the                     message.                      In iOS, the Mail app is opened. PhoneCall : An indicator that the app should display the Phone Call                     button ( ) right of the field. If the user                     taps the button, the mobile app forces the system of the mobile device to open                     an app for voice calls with the phone number that has been specified in the                     field. GpsCoords : An indicator that the app should obtain the location of the                     user's mobile device and fill the field before sending to the  Acumatica ERP server the data record that is being modified on the screen. If the field                     with this attribute value does not have a value, an action mapped on the screen                     cannot be executed; for example, the user cannot save a data record that                     contains an empty field with the  Special  attribute set to                        GpsCoords . The location is reported as a string in the following                       format:  <Latitude>:<Longitude>  (for instance,                          65.61295166666667:-20.137938333333334 ). You can forcibly hide                       the field by setting the  ForceIsVisible  attribute to                          false , so it is not shown in the user interface, or you can make the                       field unavailable for editing by setting the                          ForceIsDisabled  attribute to  true . If the                          ForceIsVisible  and  ForceIsDisabled                        attributes are not specified,                        then                       the appropriate field state will be defined by the  Acumatica ERP server. UrlOpen : An indicator that the app should display the Open URL button                       ( ) right of the field control. If                     the user clicks the button, the mobile app forces the system of the mobile                     device to launch the default browser (Safari in iOS) for the external URL                     specified in the field control. T he                   following screenshot shows an example of using the  Special                    attribute for fields mapped on a screen in the mobile app. Viewing the                        fields                        with the  Special  attribute in the mobile app textType The type of text to be used for the field value. The value can be one of the                   following: HTML : The text can be HTML markup. PlainSingleLine : The text is displayed on a single line. PlainMultiLine : The text is displayed on multiple lines. The look of                     the input control depends on the platform. weight The value that is used to set the width of the field within the UI element line                 defined by the  layout object with the                    layout  attribute set to  Inline . The default value is                    1 . In the following example, the  TotalAmount  field takes                   two-thirds of the total width, and the  Currency  field takes                   one-third. add layout "Layout_1" {
      layout = "Inline"
      add field "ReceiptDetailsExpenseDetails#TotalAmount" {
        weight = 2
      }
      add field "ReceiptDetailsExpenseDetails#Currency" {
        pickerType = Attached
      }
    } Example In the following example, a field is added. add field "OrderNbr" {        
    forceIsDisabled = True        
    listPriority = 100      
} ]]></column>
		</row>
		<row PageID="24d31513-bdb0-48df-9be7-c8ae721edb19" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="c2b060d1-1c1d-aab3-4d48-04e08d15ecda" RecordSourceID="22377">
			<column name="Content"><![CDATA[
An object of the main menu of the mobile app that can hold multiple folders and screen shortcuts.{br}{TOC}
==Attributes==[anchor|#_7383dcea-cc65-4d7d-9dfa-1fcbcbcbc301]
{| class="checklist" | width="100%" 
|- 
!width="25%" ! Attribute
!width="75%" ! Description
|- 
| <tt>DisplayName</tt>
| The name of the folder in the UI.
|- 
| <tt>Icon</tt>
| The name of the image that is used to display the folder icon on the main menu (and on the sidebar menu, if specified) of the mobile application. This attribute is optional; if this attribute is not specified for a folder, the folder is displayed in the UI without an icon. 
See the possible values and the corresponding images for the <tt>Icon</tt> attribute in [HelpRoot_Dev_Mobile\MOBILE_Ref_Icons|Icons].
|- 
| <tt>IsDefaultFavorite</tt>
| An indicator of whether a link for the folder is added to the sidebar menu as a favorite folder. If the attribute is set to ''True'', a link is added to the sidebar menu. By default, this attribute is set to ''False''.
|- 
| <tt>Type</tt>
| The type of the folder (that is, the way it is displayed and used), which is one of the following values:[anchor|#_5e47c246-182a-4483-9159-cec4a5dc1411]
*''ListFolder'': An indicator that the folder contents are displayed as tiles.
*''HubFolder'': An indicator that the folder contents are displayed as pages that the user navigates by swiping.

|}
==Example==
In the following example, a new folder containing the Expense Rexeipts (EP301010) screen is added to the main menu of the mobile app. The added folder will also appear in the sidebar menu of the mobile app.{{{{add folder "ExpenseReceipts" {    
    type = HubFolder    
    isDefaultFavorite = True    
    displayName = "Expense Receipts"    
    icon = "system://NewsPaper"    
    add item "EP301010" {      
        displayName = "Expense Receipts"    
    }  
}
}}}}
==Related Articles==
*[HelpRoot_Dev_Mobile\MOBILE_sm_Folder|&lt;sm:Folder&gt;]]]></column>
			<column name="PlainText"><![CDATA[folder An object of the main menu of the mobile app that can hold multiple folders and screen     shortcuts. Attributes Attribute Description DisplayName The name of the folder in the UI. Icon The name of the image that is used to display the folder icon on the main menu (and on         the sidebar menu, if specified) of the mobile application. This attribute is optional; if         this attribute is not specified for a folder, the folder is displayed in the UI without an         icon.           See          the possible values and the corresponding images for the  Icon  attribute          in  Icons. IsDefaultFavorite An indicator of whether a link for the folder is added to the sidebar menu as a         favorite folder. If the attribute is set to  True , a link is added to the sidebar         menu. By default, this attribute is set to  False . Type The type of the folder (that is, the way it is displayed and used), which is one of         the following values: ListFolder : An indicator that the folder contents are displayed as tiles. HubFolder : An indicator that the folder contents are displayed as pages that the           user navigates by swiping. Example In the following example, a new folder containing the Expense Rexeipts (EP301010) screen is     added to the main menu of the mobile app. The added folder will also appear in the sidebar menu     of the mobile app. add folder "ExpenseReceipts" {    
    type = HubFolder    
    isDefaultFavorite = True    
    displayName = "Expense Receipts"    
    icon = "system://NewsPaper"    
    add item "EP301010" {      
        displayName = "Expense Receipts"    
    }  
} ]]></column>
		</row>
		<row PageID="37c0e79c-e89e-4e41-8b05-ca3df5e053f1" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="c208a8e4-690b-873b-2aae-6c8edb62bd7c" RecordSourceID="22377">
			<column name="Content"><![CDATA[
An object that maps a field group to the mobile app. The object can contain the following objects and instructions:[anchor|#_705ee1fd-dff9-4042-a59f-e9d319389330]
*[HelpRoot_Dev_Mobile\mobile_ref_msdl_objtypes_field|field]
*[HelpRoot_Dev_Mobile\mobile_ref_msdl_objtypes_layout|layout]
*Attributes
*[HelpRoot_Dev_Mobile\MOBILE_ref_MSDL_objtypes_RecordActionLink|recordActionLink]
{br}{TOC}
==Attributes==[anchor|#_7e5df0e6-6898-4d22-b9af-ed63c98d11ae]
{| class="checklist" | width="100%" 
|- 
!width="25%" ! Attribute
!width="75%" ! Description
|- 
| <tt>Collapsable</tt>
| 
An indicator of whether this group may be collapsed or expanded. If its value is ''true'', the group can be collapsed or expanded, and you can specify whether the group is collapsed when the screen is opened by using the <tt>Collapsed</tt> attribute. If the value is ''false'', the group is expanded and cannot be collapsed.{br}

If the <tt>Template</tt> attribute is set to ''ExpansionPanel'', the value of the attribute is ignored. Expansion panels are always collapsible.
|- 
| <tt>Collapsed</tt>
| 
An indicator of whether this group is collapsed by default. If its value is ''true'', the group is collapsed when the screen is opened. If the value is ''false'', the group is expanded when the screen is opened. {br}

If <tt>Template=Group</tt> (or the <tt>Template</tt> attribute is not set) and <tt>Collapsable=false</tt>, the value of the attribute is ignored. {br}

For expansion panels (<tt>Template=ExpansionPanel</tt>) and collapsible groups (<tt>Template=Group</tt> and <tt>Collapsable=true</tt>), if the value of the attribute is not specified, the group is collapsed when the screen is opened.
|- 
| <tt>DisplayName</tt>
| 
The name of the group in the UI. {br}

If the <tt>Template</tt> attribute is set to ''ExpansionPanel'', the value of the attribute is ignored. An expansion panel does not have the name of the group in the UI.
|- 
| <tt>Field</tt>
| 
Obsolete. The name of the field whose value is displayed when the group is collapsed.{br}

The value of this field is ignored. Expansion panels (<tt>Template=ExpansionPanel</tt>) always display the first field (<tt>sm:field</tt>) or layout definition (<tt>sm:layout</tt>) in the group. Other groups (<tt>Template=Group</tt>) do not display any fields when the group is collapsed.
|- 
| <tt>FormPriority</tt>
| The priority value that defines the position of the group on the screen.
|- 
| <tt>Template</tt>
| 
The template that is used for the group. The following values can be used for this attribute:[anchor|#_da3a1086-ce62-490c-8d5a-8a1f08b0ba70]
*''ExpansionPanel'': An expansion panel, which can be collapsed or expanded. The collapsed expansion panel displays only the first field (<tt>field</tt>) or layout definition (<tt>layout</tt>) in the group. An expansion panel does not have the name of the group in the UI. You can configure how the expansion panel is displayed by using the <tt>Collapsed</tt> and <tt>FormPriority</tt> attributes of the object.
*''Group'': A group of UI elements. You can configure how the group is displayed by using the <tt>DisplayName</tt>, <tt>Collapsable</tt>, <tt>Collapsed</tt>, and <tt>FormPriority</tt> attributes of the object.

If the value of the attribute is not specified, the ''Group'' template is used.
|}
==Example==
In the following example, a group of fields is added to a screen. Fields from the added group contain information from the {{PaymentSettings}} container.{{{{add group "PayInfoGroup" {      
    displayName = "Payment Settings"      
    collapsable = True      
    collapsed = True      
    add field "PaymentSettings#PaymentMethod"      
    add field "PaymentSettings#CardAccountNo"      
    add field "PaymentSettings#CashAccount"      
    add field "PaymentSettings#PaymentRef"      
    add field "PaymentSettings#ProcessingStatus" {        
       displayName = "CC Processing Status"      
    }    
}
}}}}
==Related Articles==
*[HelpRoot_Dev_Mobile\MOBILE_sm_Group|&lt;sm:Group&gt;]]]></column>
			<column name="PlainText"><![CDATA[group An object that maps a field group to the mobile app. The object can contain the following     objects and instructions: fieldlayoutAttributes recordActionLinkAttributes Attribute Description Collapsable An indicator of whether this group may be collapsed or expanded. If its value is            true , the group can be collapsed or expanded, and you can specify whether the group          is collapsed when the screen is opened by using the  Collapsed  attribute.          If the value is  false , the group is expanded and cannot be collapsed. If the  Template  attribute is set to  ExpansionPanel , the value          of the attribute is ignored. Expansion panels are always collapsible. Collapsed An indicator of whether this group is collapsed by default. If its value is  true ,          the group is collapsed when the screen is opened. If the value is  false , the group          is expanded when the screen is opened.  If  Template=Group  (or the  Template  attribute is not          set) and  Collapsable=false , the value of the attribute is ignored.  For expansion panels ( Template=ExpansionPanel ) and collapsible groups           ( Template=Group  and  Collapsable=true ), if the value          of the attribute is not specified, the group is collapsed when the screen is opened. DisplayName The name of the group in the UI.  If the  Template  attribute is set to  ExpansionPanel , the value          of the attribute is ignored. An expansion panel does not have the name of the group in the          UI. Field Obsolete. The name of the field whose value is displayed when the group is collapsed. The value of this field is ignored. Expansion panels           ( Template=ExpansionPanel ) always display the first field           ( sm:field ) or layout definition ( sm:layout ) in the          group. Other groups ( Template=Group ) do not display any fields when the          group is collapsed. FormPriority The priority value that defines the position of the group on the screen. Template The template that is used for the group. The following values can be used for this          attribute: ExpansionPanel : An expansion panel, which can be collapsed or expanded. The           collapsed expansion panel displays only the first field ( field ) or           layout definition ( layout ) in the group. An expansion panel does not           have the name of the group in the UI. You can configure how the expansion panel is           displayed by using the  Collapsed  and  FormPriority            attributes of the object. Group : A group of UI elements. You can configure how the group is displayed by           using the  DisplayName ,  Collapsable ,             Collapsed , and  FormPriority  attributes of the           object. If the value of the attribute is not specified, the  Group  template is used. Example In the following example, a group of fields is added to a screen. Fields from the added group     contain information from the  PaymentSettings  container. add group "PayInfoGroup" {      
    displayName = "Payment Settings"      
    collapsable = True      
    collapsed = True      
    add field "PaymentSettings#PaymentMethod"      
    add field "PaymentSettings#CardAccountNo"      
    add field "PaymentSettings#CashAccount"      
    add field "PaymentSettings#PaymentRef"      
    add field "PaymentSettings#ProcessingStatus" {        
       displayName = "CC Processing Status"      
    }    
} ]]></column>
		</row>
		<row PageID="7554b713-1e5b-498b-ba08-2d013b25e906" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="8b636f51-ebb0-839b-d04a-63aa39726e80" RecordSourceID="22377">
			<column name="Content"><![CDATA[
An object of the main menu that defines a screen of a mobile app. {br}{TOC}
==Attributes==[anchor|#_8abe5366-d17f-4693-bb82-fa1277b19019]
{| class="checklist" | width="100%" 
|- 
!width="25%" ! Attribute
!width="75%" ! Description
|- 
| <tt>DisplayName</tt>
| The name of the menu item on the UI.
|- 
| <tt>ExpandSelector</tt>
| The name of a selector field from the primary container. An Acumatica ERP form can contain a selector control that acts like a filter. For example, the '''Order Type''' selector control on the Sales Orders form (SO301000) works as a filter. If the <tt>ExpandSelector</tt> attribute is specified for a screen, then the mobile app represents the screen as multiple tabs, where each tab corresponds to a single value of the referenced selector field.
|- 
| <tt>Icon</tt>
| The name of an image that is used to display the screen icon on the main menu (and on the sidebar menu, if item is specified as favorite) of a mobile application. If this optional attribute is not specified for a screen, the screen is displayed in the UI without an icon. See [HelpRoot_Dev_Mobile\MOBILE_Ref_Icons|Icons] for the possible values and the corresponding images for the <tt>Icon</tt> attribute.
|- 
| <tt>isDefaultFavorite</tt>
| An indicator of whether a link for the screen is added to the sidebar menu as a favorite screen. This attribute has the following possible values:[anchor|#_431c732b-2498-4b08-8c45-21deadcf92c6]
*''true'', indicating that the screen is displayed in the sidebar menu.
*''false'', meaning that the screen is not displayed in the sidebar menu. This value is set by default.

|- 
| <tt>Visible</tt>
| An indicator of the visibility of the screen in the main menu. If the value of this attribute is ''true'', the screen is visible on the main menu. By default, the value is ''true''.
|}
==Example==
In the following example, the Transaction (CA304000) screen is added to the main menu of the mobile app.{{{{add item "CA304000" {
  expandSelector = "TranType"
  displayName = "Cash Transactions"
  icon = "system://Credit"
}
}}}}
==Related Articles==
*[HelpRoot_Dev_Mobile\MOBILE_sm_Screen|&lt;sm:Screen&gt;]]]></column>
			<column name="PlainText"><![CDATA[item An object of the main menu that defines a screen of a mobile app.  Attributes Attribute Description DisplayName The name of the menu item on the UI. ExpandSelector The name of a selector field from the primary container. An  Acumatica ERP form can contain a selector control that acts like a filter. For example, the           Order Type  selector control on the Sales Orders form (SO301000)         works as a filter. If the  ExpandSelector  attribute is specified for a         screen, then the mobile app represents the screen as multiple tabs, where each tab         corresponds to a single value of the referenced selector field. Icon The name of an image that is used to display the screen icon on the main menu (and on         the sidebar menu, if item is specified as favorite) of a mobile application. If this         optional attribute is not specified for a screen, the screen is displayed in the UI without         an icon. See  Icons for the possible values and the         corresponding images for the  Icon  attribute. isDefaultFavorite An indicator of whether a link for the screen is added to the sidebar menu as a         favorite screen. This attribute has the following possible values: true , indicating that the screen is displayed in the sidebar menu. false , meaning that the screen is not displayed in the sidebar menu. This value           is set by default. Visible An indicator of the visibility of the screen in the main menu. If the value of this         attribute is  true , the screen is visible on the main menu. By default, the value is           true . Example In the following example, the Transaction (CA304000) screen is added to the main menu of the     mobile app. add item "CA304000" {
  expandSelector = "TranType"
  displayName = "Cash Transactions"
  icon = "system://Credit"
} ]]></column>
		</row>
		<row PageID="bd31e3a8-538f-47d5-84ff-251ca3d03c43" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="0495b57b-52ec-1218-e78b-4f039300b402" RecordSourceID="22377">
			<column name="Content"><![CDATA[
An object that helps to arrange multiple UI elements on a screen of the mobile app. The object can contain the following types of nested objects:[anchor|#_ad0d6a39-2bc6-4dff-b3dc-6849a72b1b22]
*[HelpRoot_Dev_Mobile\mobile_ref_msdl_objtypes_field|field]
*[HelpRoot_Dev_Mobile\mobile_ref_msdl_objtype_group|group]
*[HelpRoot_Dev_Mobile\mobile_ref_msdl_objtype_containerlink|containerLink]
*[HelpRoot_Dev_Mobile\MOBILE_ref_MSDL_objtypes_RecordActionLink|recordActionLink]
*layout
*:((({S:Warn}The <tt>layout</tt> object with the '''<tt>layout</tt>''' attribute set to ''HeaderSimple'', ''HeaderFirstAttachment'', and ''Tab'' can include nested <tt>layout</tt> objects with {{Template=Inline}}. The <tt>layout</tt> objects for which the '''<tt>Template</tt>''' attribute is ''Inline'' cannot include any nested <tt>layout</tt> objects. The <tt>layout</tt> objects for which the '''<tt>Template</tt>''' attribute is ''DataTab'' can include only <tt>containerLink</tt> objects.
)))
{br}{TOC}
==Attributes==[anchor|#_6863b163-ef4d-4931-b1e3-356d52498bf0]
{| class="checklist"
!Attribute
!Description
|-
| <tt>Layout</tt>
| The template that is used to define the layout. The following values can be used for this attribute:[anchor|#_44be18e1-3b19-4b52-92e6-2de7b90a03ee]
*''HeaderFirstAttachment'': An indicator that the mobile app should arrange the UI elements, which are mapped by the nested objects, in a group-like header container with an attachment icon on the left. If you click the attachment icon, you can take a photo and attach the photo to the screen of the mobile app. The camera behavior is affected by the attributes of the <tt>attachments</tt> instruction. 
*:The tag with the attribute set to ''HeaderFirstAttachment'' can include nested <tt>layout</tt> objects with {{layout=Inline}}. The objects with the attribute set to ''HeaderFirstAttachment'' cannot be nested in other <tt>layout</tt> instuction and can be nested only in <tt>container</tt> objects.
*:((({S:Warn}Fields inside a layout object of the ''HeaderFirstAttachment'' type are always displayed read-only.
)))
*''HeaderSimple'': An indicator that the mobile app should arrange the UI elements, which are mapped by the nested objects, in a group-like header container. 
*:An object with the attribute set to ''HeaderSimple'' can include nested <tt>layout</tt> objects with {{Layout=Inline}}. An object with the attribute set to ''HeaderSimple'' cannot be nested in other <tt>layout</tt> objects and can be nested only in <tt>container</tt> objects.
*:((({S:Warn}Fields inside a layout object of the ''HeaderSimple'' type are always displayed read-only.
)))
*''HeaderSticky'': An indicator that the mobile app should arrange the UI elements, which are mapped by the nested objects, in a group-like header container that is always displayed at the top of the screen. It means that when a user scrolls a screen, the header container stays at the top of the screen.
*:An object with the attribute set to ''HeaderSticky'' can include nested <tt>layout</tt> objects with {{Layout=Inline}}. An object with the attribute set to ''HeaderSticky'' cannot be nested in other <tt>layout</tt> objects and can be nested only in <tt>container</tt> objects.
*:((({S:Warn}Fields inside a layout object of the ''HeaderSticky'' type are always displayed read-only.
)))
*''Inline'': An indicator that the mobile app should arrange UI elements that are mapped by the nested tags, in a line by using the <tt>Weight</tt> attributes specified for these elements. If the <tt>Weight</tt> attribute is not defined for a nested tag, the mobile app uses ''1'' as the default value. 
*:The object with the attribute set to ''Inline'' cannot include nested <tt>layout</tt> objects. The objects with the attribute set to ''Inline'' can be nested in other <tt>layout</tt> objects.
*''Tab'': An indicator that the mobile app can contain elements valid for templates, such as other layouts with ''Inline'' template, <tt>recordAction</tt> objects, and <tt>cotainerLink</tt> objects.
*:Objects that are inside the object wrapping the tab object but not included in the tab explicitly are located in a default tab that is always displayed in the mobile app as the first tab on the screen. The name of the default tab is ''Summary''.
*''DataTab'': A layout object that can contain only [HelpRoot_Dev_Mobile\mobile_ref_msdl_objtype_containerlink|containerLink] objects. Containers that are referenced using <tt>containerLink</tt> objects from the <tt>dataTab</tt> are displayed as a list of elements, not links to containers.

| }
==Example==
In the following example, the fields are arranged in three rows using the layout object.{{{{add layout "OrderHeader" {
  displayName = "OrderHeader"
  layout = "HeaderSimple"
  add layout "OrderHeaderNbrRow" {
    layout = "Inline"
    add field "OrderNbr"
    add field "OrderTotal"
  }
  add layout "OrderHeaderTaxTotalRow" {
    layout = "Inline"
    add field "Status"
    add field "DiscountTotal"
  }
  add layout "OrderHeaderTotalRow" {
    layout = "Inline"
    add field "OrderedQty"
    add field "TaxTotal"
  }
}
}}}}
The result is presented on the following screenshot.[anchor|#_6b5e1070-4db7-41ee-b62c-a71fe1f18e51][anchor|#_2a11e1fb-80d7-406b-b2a0-37c03795294f][image:StudioDeveloperGuide/Images/MOBILE_MSDL_layout.png|popup|Viewing the organized layout|130px]
==Related Articles==
*[HelpRoot_Dev_Mobile\MOBILE_sm_Layout|&lt;sm:Layout&gt;]]]></column>
			<column name="PlainText"><![CDATA[layout An object that helps to arrange multiple UI elements on a screen of the mobile app. The         object can contain the following types of nested objects: fieldgroupcontainerLinkrecordActionLinklayout The  layout  object with the                layout  attribute set to  HeaderSimple ,                HeaderFirstAttachment , and  Tab  can include nested                layout  objects with  Template=Inline . The                layout  objects for which the  Template              attribute is  Inline  cannot include any nested  layout  objects.             The  layout  objects for which the  Template              attribute is  DataTab  can include only  containerLink              objects. Attributes Attribute Description Layout The template that is used to define the layout. The following values can be used             for this attribute: HeaderFirstAttachment : An indicator that the mobile app should arrange the                 UI elements, which are mapped by the nested objects, in a group-like header                 container with an attachment icon on the left. If you click the attachment icon, you                 can take a photo and attach the photo to the screen of the mobile app. The camera                 behavior is affected by the attributes of the  attachments                  instruction.  The tag with the attribute set to  HeaderFirstAttachment  can                   include nested  layout  objects with                      layout=Inline . The objects with the attribute set to                      HeaderFirstAttachment  cannot be nested in other  layout                    instuction and can be nested only in  container                    objects. Fields inside a layout object of the                      HeaderFirstAttachment  type are always displayed read-only. HeaderSimple : An indicator that the mobile app should arrange the UI                 elements, which are mapped by the nested objects, in a group-like header container.                    An object with the attribute set to  HeaderSimple  can include nested                      layout  objects with  Layout=Inline . An object                   with the attribute set to  HeaderSimple  cannot be nested in other                      layout  objects and can be nested only in                      container  objects. Fields inside a layout object of                   the  HeaderSimple  type are always displayed read-only. HeaderSticky : An indicator that the mobile app should arrange the UI                 elements, which are mapped by the nested objects, in a group-like header container                 that is always displayed at the top of the screen. It means that when a user scrolls                 a screen, the header container stays at the top of the screen. An object with the                   attribute set to  HeaderSticky  can include nested  layout                    objects with  Layout=Inline . An object with the attribute set to                      HeaderSticky  cannot be nested in other  layout  objects                   and can be nested only in  container  objects. Fields                   inside a layout object of the  HeaderSticky  type are always displayed                   read-only. Inline : An indicator that the mobile app should arrange UI elements that                 are mapped by the nested tags, in a line by using the  Weight                  attributes specified for these elements. If the  Weight  attribute                 is not defined for a nested tag, the mobile app uses  1  as the default value.                    The object with the attribute set to  Inline  cannot include nested                      layout  objects. The objects with the attribute set to                      Inline  can be nested in other  layout  objects. Tab : An indicator that the mobile app can contain elements valid for                 templates, such as other layouts with  Inline  template,                    recordAction  objects, and  cotainerLink                    objects. Objects that are inside the object wrapping the tab object but not                   included in the tab explicitly are located in a default tab that is always                   displayed in the mobile app as the first tab on the screen. The name of the                   default tab is  Summary . DataTab : A layout object that can contain only  containerLink objects. Containers that are                 referenced using  containerLink  objects from the                    dataTab  are displayed as a list of elements, not links to                 containers. Example In the following example, the fields are arranged in three rows using the layout         object. add layout "OrderHeader" {
  displayName = "OrderHeader"
  layout = "HeaderSimple"
  add layout "OrderHeaderNbrRow" {
    layout = "Inline"
    add field "OrderNbr"
    add field "OrderTotal"
  }
  add layout "OrderHeaderTaxTotalRow" {
    layout = "Inline"
    add field "Status"
    add field "DiscountTotal"
  }
  add layout "OrderHeaderTotalRow" {
    layout = "Inline"
    add field "OrderedQty"
    add field "TaxTotal"
  }
} The result is presented on the following screenshot. Viewing the organized layout ]]></column>
		</row>
		<row PageID="991ea6af-5514-47cd-8b78-3ee089ac70b7" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="3f0b9102-c85a-3fff-b3b4-e6fdac2df6bd" RecordSourceID="22377">
			<column name="Content"><![CDATA[((({S:Warn}This object type is deprecated.
)))
In the mobile site map, an object that defines the appearance and behavior of an action that is performed on the data records selected in the list. Such an action is displayed only on the list view. You can use this object if the implementation of the action in Acumatica ERP supports the processing of multiple records. Then if the user has selected multiple records in the list, the action is applied at once to all the rows selected in the list.{br}{TOC}
==Attributes==[anchor|#_11cf3842-c1ca-4cc8-9ace-1b186c59dbce]
{| class="checklist" | width="100%" 
|- 
!width="25%" ! Attribute
!width="75%" ! Description
|- 
| <tt>After</tt>
| 
The behavior of the current container after the action is completed. The value can be one of the following:[anchor|#_eca37c86-3e6e-4919-97b8-eaa2ebd84516]
*''Refresh'': The current container should be refreshed after the action is completed.
*''Close'': The current container should be closed after the action is completed.

If the <tt>Redirect</tt> attribute of the <tt>sm:Action</tt> tag is set to ''true'', the <tt>After</tt> attribute of this object defines more complex behavior for the current container. See [HelpRoot_Dev_Mobile\MOBILE_Redirects|Redirecting to Different Screens and Containers] for details.
|- 
| <tt>Behavior</tt>
| 
Required. The behavior of the action—which defines how the mobile app obtains from the server the data resulting from the action and processes this data. The value can be one of the following:[anchor|#_e2eee84d-8681-4b40-aa41-57141a7a7a92]
*''Cancel'': Discards the unsaved changes. You must declare the action if it is present in the WSDL.
*''Create'': Creates a new data record. If the <tt>Redirect</tt> attribute value is ''true'', this action redirects the user to a container defined on a different screen.
*''Delete'': Deletes the data record.
*''Open'': Opens the data record for editing on a different screen. If the <tt>Redirect</tt> attribute value is ''true'', this action redirects the user to a container defined on a different screen.
*''Record'': Indicates that the mobile app should expect a single record as the server response.
*''Save'': Saves the data record.
*''SignReport'': Indicates that the mobile app should add the '''Sign''' action to the container. This action is not implemented in Acumatica ERP and uses the specific capabilities of the mobile devices to create the user signature as an image file. The user can save the signature in the database of the Acumatica ERP instance as a file attachment for the appropriate form. See [HelpRoot_Dev_Mobile\MOBILE_UserSignature|Creating the User Signature] for details.
*''Void'': Tells the mobile app to not use any records that are returned in the server response.

|- 
| <tt>DisplayName</tt>
| The name of the action in the UI.
|- 
| <tt>Icon</tt>
| The name of the image that is used to display the action icon on the UI. If this attribute is not specified for an action, the action is displayed on the UI without an icon. 
See [HelpRoot_Dev_Mobile\MOBILE_Ref_Icons|Icons] for the possible values and the corresponding images for the <tt>Icon</tt> attribute.
|- 
| <tt>Priority</tt>
| The priority value that defines the position of the action on the screen or the toolbar relative to other list actions.
|- 
| <tt>Redirect</tt>
| An indicator of whether the action redirects the user to a container of a screen. You can use this attribute to do the following:[anchor|#_0173422a-5277-41f5-aa51-26ce9285f80a]
*Allow a redirection defined for the action in Acumatica ERP by setting the attribute to ''true''.
*Deny a redirection defined for the action in Acumatica ERP by setting the attribute to ''false''. This is the default setting of the <tt>Redirect</tt> attribute.
*Define a new redirection for the action by setting the attribute to ''true'' and specifying the attributes of this tag to set one of the following as the destination of the redirection:
**<tt>RedirectToScreen</tt>, to redirect to the primary container of the specified screen
**<tt>RedirectToContainer</tt>, to redirect to another container of the current screen
**<tt>RedirectToScreen</tt> and <tt>RedirectToContainer</tt>, to redirect to a specified container of a specified screen
*:((({S:Warn}See [HelpRoot_Dev_Mobile\MOBILE_Redirects|Redirecting to Different Screens and Containers] for more details.
)))

|- 
| <tt>RedirectToContainer</tt>
| The name of the destination container. The name can consist of the following parts separated by the ''$'' symbol:[anchor|#_d7f3ff5e-b367-4e65-b6e6-7640eb174abe]
*The name of the container
*The display type of the container: ''List'' or ''Form'' (default)
*The optional name of the additional container whose data is used as a filter
The mobile site map has to include the metadata for this container.
|- 
| <tt>RedirectToScreen</tt>
| The name of the destination screen. The mobile site map has to include the metadata for this screen.
|- 
| <tt>SyncLongOperation</tt>
| An indicator of whether the mobile app should wait until the action is completed if this action is defined as a <tt>PXLongRunOperation</tt> one and is executed asynchronously in Acumatica ERP. By default, the <tt>SyncLongOperation</tt> attribute is set to ''false''.
|}
==Example==
In the following example, an action for processing the list of records is added.{{{{add listAction "Process" {
  behavior = Void      
  redirect = True
  syncLongOperation = True
}
}}}}
==Related Articles==
*[HelpRoot_Dev_Mobile\MOBILE_sm_Action|&lt;sm:Action&gt;]]]></column>
			<column name="PlainText"><![CDATA[listAction This object type is deprecated. In the mobile site map, an object that defines the appearance and behavior of an action that     is performed on the data records selected in the list. Such an action is displayed only on the     list view. You can use this object if the implementation of the action in  Acumatica ERP     supports the processing of multiple records. Then if the user has selected multiple records in     the list, the action is applied at once to all the rows selected in the list. Attributes Attribute Description After The behavior of the current container after the action is completed. The value can be one          of the following: Refresh : The current container should be refreshed after the action is           completed. Close : The current container should be closed after the action is           completed. If the  Redirect  attribute of the  sm:Action  tag is          set to  true , the  After  attribute of this object defines more          complex behavior for the current container. See  Redirecting to Different Screens and Containers for          details. Behavior Required. The behavior of the action—which defines how the mobile app obtains from          the server the data resulting from the action and processes this data. The value can be one          of the following: Cancel : Discards the unsaved changes. You must declare the action if it is           present in the WSDL. Create : Creates a new data record. If the  Redirect  attribute           value is  true , this action redirects the user to a container defined on a different           screen. Delete : Deletes the data record. Open : Opens the data record for editing on a different screen. If the             Redirect  attribute value is  true , this action redirects the           user to a container defined on a different screen. Record : Indicates that the mobile app should expect a single record as the           server response. Save : Saves the data record. SignReport : Indicates that the mobile app should add the             Sign  action to the container. This action is not implemented in             Acumatica ERP and uses the specific capabilities of the mobile devices to create the user signature           as an image file. The user can save the signature in the database of the  Acumatica ERP instance as a file attachment for the appropriate form. See  Creating the User Signature for details. Void : Tells the mobile app to not use any records that are returned in the           server response. DisplayName The name of the action in the UI. Icon The name of the image that is used to display the action icon on the UI. If this         attribute is not specified for an action, the action is displayed on the UI without an icon.           See  Icons for the possible values and the corresponding          images for the  Icon  attribute. Priority The priority value that defines the position of the action on the screen or the         toolbar relative to other list actions. Redirect An indicator of whether the action redirects the user to a container of a screen. You         can use this attribute to do the following: Allow a redirection defined for the action in  Acumatica ERP by setting the attribute to  true . Deny a redirection defined for the action in  Acumatica ERP by setting the attribute to  false . This is the default setting of the             Redirect  attribute. Define a new redirection for the action by setting the attribute to  true  and           specifying the attributes of this tag to set one of the following as the destination of           the redirection: RedirectToScreen , to redirect to the primary container of the             specified screen RedirectToContainer , to redirect to another container of the             current screen RedirectToScreen  and  RedirectToContainer , to             redirect to a specified container of a specified screen See  Redirecting to Different Screens and Containers for more details. RedirectToContainer The name of the destination container. The name can consist of the following parts         separated by the  $  symbol: The name of the container The display type of the container:  List  or  Form  (default) The optional name of the additional container whose data is used as a filter The mobile site map has to include the metadata for this container. RedirectToScreen The name of the destination screen. The mobile site map has to include the metadata         for this screen. SyncLongOperation An indicator of whether the mobile app should wait until the action is completed if         this action is defined as a  PXLongRunOperation  one and is executed         asynchronously in  Acumatica ERP. By default, the  SyncLongOperation  attribute is set to          false . Example In the following example, an action for processing the list of records is added. add listAction "Process" {
  behavior = Void      
  redirect = True
  syncLongOperation = True
} ]]></column>
		</row>
		<row PageID="6d93c127-423c-4597-82c3-6f3fff4bf5ab" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="12cf4605-1746-ee8a-9007-455bd62cbb0b" RecordSourceID="22377">
			<column name="Content"><![CDATA[
In the mobile site map, an object that defines the appearance and behavior of an action that is performed on the current data record. This type of action is displayed only on the form view (editing screen).{br}{TOC}
==Attributes==[anchor|#_11cf3842-c1ca-4cc8-9ace-1b186c59dbce]
{| class="checklist" | width="100%" 
|- 
!width="25%" ! Attribute
!width="75%" ! Description
|- 
| <tt>After</tt>
| 
The behavior of the current container after the action is completed. The following possible values indicate what to do:[anchor|#_eca37c86-3e6e-4919-97b8-eaa2ebd84516]
*''Refresh'': Refresh the current container after the action is completed.
*''Close'': Closed the current container after the action is completed.

If the <tt>Redirect</tt> attribute of the <tt>sm:Action</tt> tag is set to ''true'', the <tt>After</tt> attribute of this object defines more complex behavior for the current container. See [HelpRoot_Dev_Mobile\MOBILE_Redirects|Redirecting to Different Screens and Containers] for details.
|- 
| <tt>Behavior</tt>
| 
Required. The behavior of the action—which defines how the mobile app obtains from the server the data resulting from the action and processes this data. The value can be one of the following:[anchor|#_e2eee84d-8681-4b40-aa41-57141a7a7a92]
*''Cancel'': Discards the unsaved changes. You must declare this action if it is present in the WSDL.
*''Create'': Creates a new data record. If the <tt>Redirect</tt> attribute value is ''true'', this action redirects the user to a container defined on a different screen.
*''Delete'': Deletes the data record.
*''Open'': Opens the data record for editing on a different screen. If the <tt>Redirect</tt> attribute value is ''true'', this action redirects the user to a container defined on a different screen.
*''Record'': Tells the mobile app to expect a single record as the server response.
*''Save'': Saves the data record.
*''SignReport'': Indicates that the mobile app should add the '''Sign''' action to the container. This action is not implemented in Acumatica ERP and uses the specific capabilities of the mobile devices to create the user signature as an image file. The user can save the signature in the database of the Acumatica ERP instance as a file attachment for the appropriate form. See [HelpRoot_Dev_Mobile\MOBILE_UserSignature|Creating the User Signature] for details.
*''Void'': Indicates to the mobile app to not use any records that are returned in the server response.

|- 
| <tt>DisplayName</tt>
| The name of the action in the UI.
|- 
| <tt>Icon</tt>
| The name of the image that is used to display the action icon on the UI. If this attribute is not specified for an action, the action is displayed on the UI without an icon. 
See [HelpRoot_Dev_Mobile\MOBILE_Ref_Icons|Icons] for the possible values and the corresponding images for the <tt>Icon</tt> attribute.
|- 
| <tt>Priority</tt>
| The priority value that defines the position of the action on the screen or the toolbar relative to other record actions.
|- 
| <tt>Redirect</tt>
| An indicator of whether the action redirects the user to a container of a screen. You can use this attribute to do the following:[anchor|#_0173422a-5277-41f5-aa51-26ce9285f80a]
*Allow a redirection defined for the action in Acumatica ERP by setting the attribute to ''true''.
*Deny a redirection defined for the action in Acumatica ERP by setting the attribute to ''false''. This is the default setting of the <tt>Redirect</tt> attribute.
*Define a new redirection for the action by setting the attribute to ''true'' and specifying the attributes of this tag to set one of the following as the destination of the redirection:
**<tt>RedirectToScreen</tt>, to redirect to the primary container of the specified screen
**<tt>RedirectToContainer</tt>, to redirect to another container of the current screen
**<tt>RedirectToScreen</tt> and <tt>RedirectToContainer</tt>, to redirect to a specified container of a specified screen
*:((({S:Warn}See [HelpRoot_Dev_Mobile\MOBILE_Redirects|Redirecting to Different Screens and Containers] for more details.
)))

|- 
| <tt>RedirectToContainer</tt>
| The name of the destination container. The name can consist of the following parts separated by the ''$'' symbol:[anchor|#_d7f3ff5e-b367-4e65-b6e6-7640eb174abe]
*The name of the container
*The display type of the container: ''List'' or ''Form'' (default)
*The name of the additional container whose data is used as a filter (optional)
The mobile site map has to include the metadata for this container.
|- 
| <tt>RedirectToScreen</tt>
| The name of the destination screen. The mobile site map has to include the metadata for this screen.
|- 
| <tt>SyncLongOperation</tt>
| An indicator of whether the mobile app should wait until the action is completed if this action is defined as a <tt>PXLongRunOperation</tt> one and is executed asynchronously in Acumatica ERP. By default, the <tt>SyncLongOperation</tt> attribute is set to ''false''.
|}
==Example==
In the following example, an action to delete an opened record is added.{{{{add recordAction "Delete" {      
    Icon = "system://Trash"      
    Behavior = Delete      
    After = Close    
}
}}}}
==Related Articles==
*[HelpRoot_Dev_Mobile\MOBILE_sm_Action|&lt;sm:Action&gt;]]]></column>
			<column name="PlainText"><![CDATA[recordAction In the mobile site map, an object that defines the appearance and behavior of an action that     is performed on the current data record. This type of action is displayed only on the form view     (editing screen). Attributes Attribute Description After The behavior of the current container after the action is completed. The following          possible values indicate what to do: Refresh : Refresh the current container after the action is completed. Close : Closed the current container after the action is completed. If the  Redirect  attribute of the  sm:Action  tag is          set to  true , the  After  attribute of this object defines more          complex behavior for the current container. See  Redirecting to Different Screens and Containers for          details. Behavior Required. The behavior of the action—which defines how the mobile app obtains from          the server the data resulting from the action and processes this data. The value can be one          of the following: Cancel : Discards the unsaved changes. You must declare this action if it is           present in the WSDL. Create : Creates a new data record. If the  Redirect  attribute           value is  true , this action redirects the user to a container defined on a different           screen. Delete : Deletes the data record. Open : Opens the data record for editing on a different screen. If the             Redirect  attribute value is  true , this action redirects the           user to a container defined on a different screen. Record : Tells the mobile app to expect a single record as the server           response. Save : Saves the data record. SignReport : Indicates that the mobile app should add the             Sign  action to the container. This action is not implemented in             Acumatica ERP and uses the specific capabilities of the mobile devices to create the user signature           as an image file. The user can save the signature in the database of the  Acumatica ERP instance as a file attachment for the appropriate form. See  Creating the User Signature for details. Void : Indicates to the mobile app to not use any records that are returned in           the server response. DisplayName The name of the action in the UI. Icon The name of the image that is used to display the action icon on the UI. If this         attribute is not specified for an action, the action is displayed on the UI without an icon.           See  Icons for the possible values and the corresponding          images for the  Icon  attribute. Priority The priority value that defines the position of the action on the screen or the         toolbar relative to other record actions. Redirect An indicator of whether the action redirects the user to a container of a screen. You         can use this attribute to do the following: Allow a redirection defined for the action in  Acumatica ERP by setting the attribute to  true . Deny a redirection defined for the action in  Acumatica ERP by setting the attribute to  false . This is the default setting of the             Redirect  attribute. Define a new redirection for the action by setting the attribute to  true  and           specifying the attributes of this tag to set one of the following as the destination of           the redirection: RedirectToScreen , to redirect to the primary container of the             specified screen RedirectToContainer , to redirect to another container of the             current screen RedirectToScreen  and  RedirectToContainer , to             redirect to a specified container of a specified screen See  Redirecting to Different Screens and Containers for more details. RedirectToContainer The name of the destination container. The name can consist of the following parts         separated by the  $  symbol: The name of the container The display type of the container:  List  or  Form  (default) The name of the additional container whose data is used as a filter (optional) The mobile site map has to include the metadata for this container. RedirectToScreen The name of the destination screen. The mobile site map has to include the metadata         for this screen. SyncLongOperation An indicator of whether the mobile app should wait until the action is completed if         this action is defined as a  PXLongRunOperation  one and is executed         asynchronously in  Acumatica ERP. By default, the  SyncLongOperation  attribute is set to          false . Example In the following example, an action to delete an opened record is added. add recordAction "Delete" {      
    Icon = "system://Trash"      
    Behavior = Delete      
    After = Close    
} ]]></column>
		</row>
		<row PageID="f7f0993f-e348-4ce3-821a-7a4f950a8ff2" Language="en-US" PageRevisionID="1" PlainText="recordActionLink An object that you can use to remove an action from the screen toolbar and put the action     among the  field objects on a editing screen. The     action to which this object refers must be declared with the same name within the same container     by using any action object (for details, see  Object Types). Attributes Attribute Description weight The value that is used to set the width of the link within the UI element line defined         by the  layout object with the           Template  attribute set to  Inline . The default value is          1 . Example In the following example, a container with an action and corresponding action link is     added. add container &quot;SampleContainer&quot; {&#xA;  add recordActionLink &quot;ViewOnMap&quot;&#xA;  add recordAction &quot;ViewOnMap&quot; {&#xA;    behavior = Void&#xA;    redirect = True&#xA;  }&#xA;} " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="4199efc8-3511-48f8-eaf8-7de93aa71779" RecordSourceID="22377">
			<column name="Content"><![CDATA[
An object that you can use to remove an action from the screen toolbar and put the action among the [HelpRoot_Dev_Mobile\mobile_ref_msdl_objtypes_field|field] objects on a editing screen. The action to which this object refers must be declared with the same name within the same container by using any action object (for details, see [HelpRoot_Dev_Mobile\MOBILE_Ref_MSDL_ObjTypes|Object Types]).{br}{TOC}
==Attributes==[anchor|#_a2acc45f-e4d6-4586-9621-d428f8e0376e]
{| class="checklist" | width="100%" 
|- 
!width="25%" ! Attribute
!width="75%" ! Description
|- 
| <tt>weight</tt>
| The value that is used to set the width of the link within the UI element line defined by the [HelpRoot_Dev_Mobile\mobile_ref_msdl_objtypes_layout|layout] object with the <tt>Template</tt> attribute set to ''Inline''. The default value is ''1''.
|}
==Example==
In the following example, a container with an action and corresponding action link is added.{{{{add container "SampleContainer" {
  add recordActionLink "ViewOnMap"
  add recordAction "ViewOnMap" {
    behavior = Void
    redirect = True
  }
}
}}}}
==Related Articles==
*[HelpRoot_Dev_Mobile\MOBILE_sm_RecordActionLink|&lt;sm:RecordActionLink&gt;]]]></column>
		</row>
		<row PageID="d5cc1aea-e7d2-4abb-a5d9-77c648d04961" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="84f2a1df-7474-ccb8-36c6-73aba2b7d091" RecordSourceID="22377">
			<column name="Content"><![CDATA[
An object that maps an Acumatica ERP form to the mobile app. This object can include the definition of screen containers and the assignment of attributes. {br}{TOC}
==Attributes==[anchor|#_8abe5366-d17f-4693-bb82-fa1277b19019]
{| class="checklist" | width="100%" 
|- 
!width="25%" ! Attribute
!width="75%" ! Description
|- 
| <tt>OpenAs</tt>
| The display type of the screen. When the screen is opened from a menu, this attribute specifies how to open the primary container. Otherwise, when the screen is opened by a redirection from an action and the <tt>RedirectToContainer</tt> attribute of this action does not explicitly specify how to open the container, then this attribute specifies how to open the redirected container of the screen. The value can be one of the following:[anchor|#_3849bf73-f9f9-49da-9d0d-6852a1bf783b]
*''List'': The screen opens as a list.
*''Form'': The screen opens as a form.

|- 
| <tt>Type</tt>
| The type of the screen, which is one of the following values:[anchor|#_cd2f9be3-6143-4466-94e1-4dd240c3172f]
*''SimpleScreen'': The screen is a common screen.
*''FilterListScreen'': The screen corresponds to the Acumatica ERP form based on the <tt>FormDetail</tt> form template. Such a screen must include two containers. The first container maps the form area of the form (filter), and the second one maps the grid.
*''Report'': The screen is an Acumatica Report                         Designer report.
*''Dashboard'': The screen is a dashboard. A screen of this type can display the following types of dashboard widgets:
**''Chart''
** ''Data Table''
** ''Score Card''
** ''Trend Card''Other widget types will be hidden.

|- 
| <tt>hideUDF</tt>
| An indicator of whether user-defined fields should not be displayed on a screen. Default value is ''False''.((({S:Warn}The <tt>hideUDF</tt> attribute and the <tt>add UDFields</tt> instruction cannot be used in the same screen mapping.
)))
|}
==Example==
In the following example, the Sales Orders (SO301000) screen that has been present in the original mobile site map is updated.{{{{update screen SO301000 {
  hideUDF = True
  update container "OrderSummary" {
    add recordAction "PrintSalesOrderQuoteReport" {
      redirect = True
    }
    add recordAction "SignReport" {
      behavior = SignReport
       displayName = "Sign"
    }
  }
}
}}}}
==Related Articles==
*[HelpRoot_Dev_Mobile\MOBILE_sm_Screen|&lt;sm:Screen&gt;]]]></column>
			<column name="PlainText"><![CDATA[screen An object that maps an  Acumatica ERP form to the mobile app. This object can include the definition of screen containers and         the assignment of attributes.  Attributes Attribute Description OpenAs The display type of the screen. When the screen is opened from a menu, this attribute         specifies how to open the primary container. Otherwise, when the screen is opened by a         redirection from an action and the  RedirectToContainer  attribute of this         action does not explicitly specify how to open the container, then this attribute specifies         how to open the redirected container of the screen. The value can be one of the          following: List : The screen opens as a list. Form : The screen opens as a form. Type The type of the screen, which is one of the following values: SimpleScreen : The screen is a common screen. FilterListScreen : The screen corresponds to the  Acumatica ERP form based on the  FormDetail  form template. Such a screen                     must include two containers. The first container maps the form area of the form                     (filter), and the second one maps the grid. Report : The screen is an  Acumatica Report                         Designer report. Dashboard : The screen is a dashboard. A screen of this type can display the                     following types of dashboard widgets: Chart Data Table Score Card Trend Card Other widget types will be hidden. hideUDF An indicator of whether user-defined fields should not be displayed on a                 screen. Default value is  False . The  hideUDF  attribute                   and the  add UDFields  instruction cannot be used in the same                   screen mapping. Example In the following example, the Sales Orders (SO301000) screen that has been present in the         original mobile site map is updated. update screen SO301000 {
  hideUDF = True
  update container "OrderSummary" {
    add recordAction "PrintSalesOrderQuoteReport" {
      redirect = True
    }
    add recordAction "SignReport" {
      behavior = SignReport
       displayName = "Sign"
    }
  }
} ]]></column>
		</row>
		<row PageID="b87a3199-a4ee-4a74-87f7-431c9e8168de" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="5fccebcb-42d8-d9a2-53f0-31d991cf835a" RecordSourceID="22377">
			<column name="Content"><![CDATA[
In the mobile site app, an action can be performed with data records selected in the list. The <tt>selectionAction</tt> object defines the appearance and behavior of this action. This type of action is displayed only on the list view. If the user has selected multiple records in the list, the action is applied successively to each selected record.{br}{TOC}
==Attributes==[anchor|#_11cf3842-c1ca-4cc8-9ace-1b186c59dbce]
{| class="checklist" | width="100%" 
|- 
!width="25%" ! Attribute
!width="75%" ! Description
|- 
| <tt>After</tt>
| 
The behavior of the current container after the action is completed. The value can be one of the following:[anchor|#_eca37c86-3e6e-4919-97b8-eaa2ebd84516]
*''Refresh'': The current container should be refreshed after the action is completed.
*''Close'': The current container should be closed after the action is completed.

If the <tt>Redirect</tt> attribute of an action object is set to ''true'', the <tt>After</tt> attribute of this object defines more complex behavior for the current container. See [HelpRoot_Dev_Mobile\MOBILE_Redirects|Redirecting to Different Screens and Containers] for details.
|- 
| <tt>Behavior</tt>
| 
Required. The behavior of the action—which defines how the mobile app obtains from the server the data resulting from the action and processes this data. The value can be one of the following:[anchor|#_e2eee84d-8681-4b40-aa41-57141a7a7a92]
*''Cancel'': Discards the unsaved changes. You must declare this action if it is present in the WSDL.
*''Create'': Creates a new data record. If the <tt>Redirect</tt> attribute value is ''true'', this action redirects the user to a container defined on a different screen.
*''Delete'': Deletes the data record.
*''Open'': Opens the data record for editing on a different screen. If the <tt>Redirect</tt> attribute value is ''true'', this action redirects the user to a container defined on a different screen.
*''Record'': Indicated that the mobile app should expect a single record as the server response.
*''Save'': Saves the data record.
*''SignReport'': Indicates that the mobile app should add the '''Sign''' action to the container. This action is not implemented in Acumatica ERP and uses the specific capabilities of the mobile devices to create the user signature as an image file. The user can save the signature in the database of the Acumatica ERP instance as a file attachment for the appropriate form. See [HelpRoot_Dev_Mobile\MOBILE_UserSignature|Creating the User Signature] for details.
*''Void'': Tells the mobile app to not use any records that are returned in the server response.

|- 
| <tt>DisplayName</tt>
| The name of the action in the UI.
|- 
| <tt>Icon</tt>
| The name of the image that is used to display the action icon on the UI. If this attribute is not specified for an action, the action is displayed on the UI without an icon. 
See [HelpRoot_Dev_Mobile\MOBILE_Ref_Icons|Icons] for the possible values and the corresponding images for the <tt>Icon</tt> attribute.
|- 
| <tt>Priority</tt>
| The priority value that defines the position of the action on the screen or the toolbar relative to other selection actions.
|- 
| <tt>Redirect</tt>
| An indicator of whether the action redirects the user to a container of a screen. You can use this attribute to do the following:[anchor|#_0173422a-5277-41f5-aa51-26ce9285f80a]
*Allow a redirection defined for the action in Acumatica ERP by setting the attribute to ''true''.
*Deny a redirection defined for the action in Acumatica ERP by setting the attribute to ''false''. This is the default setting of the <tt>Redirect</tt> attribute.
*Define a new redirection for the action by setting the attribute to ''true'' and specifying the attributes of this tag to set one of the following as the destination of the redirection:
**<tt>RedirectToScreen</tt>, to redirect to the primary container of the specified screen
**<tt>RedirectToContainer</tt>, to redirect to another container of the current screen
**<tt>RedirectToScreen</tt> and <tt>RedirectToContainer</tt>, to redirect to a specified container of a specified screen
*:((({S:Warn}See [HelpRoot_Dev_Mobile\MOBILE_Redirects|Redirecting to Different Screens and Containers] for more details.
)))

|- 
| <tt>RedirectToContainer</tt>
| The name of the destination container. The name can consist of the following parts separated by the ''$'' symbol:[anchor|#_d7f3ff5e-b367-4e65-b6e6-7640eb174abe]
*The name of the container
*The display type of the container: ''List'' or ''Form'' (default)
*The optional name of the additional container whose data is used as a filter
The mobile site map has to include the metadata for this container.
|- 
| <tt>RedirectToScreen</tt>
| The name of the destination screen. The mobile site map has to include the metadata for this screen.
|- 
| <tt>SyncLongOperation</tt>
| An indicator of whether the mobile app should wait until the action is completed if this action is defined as a <tt>PXLongRunOperation</tt> one and is executed asynchronously in Acumatica ERP. By default, the <tt>SyncLongOperation</tt> attribute is set to ''false''.
|}
==Example==
In the following example, a new action for deleting selected records is defined.{{{{add selectionAction "Delete" {      
    icon = "system://Trash"      
    behavior = Delete    
}
}}}}
==Related Articles==
*[HelpRoot_Dev_Mobile\MOBILE_sm_Action|&lt;sm:Action&gt;]]]></column>
			<column name="PlainText"><![CDATA[selectionAction In the mobile site app, an action can be performed with data records selected in the list. The       selectionAction  object defines the appearance and behavior of this action.     This type of action is displayed only on the list view. If the user has selected multiple     records in the list, the action is applied successively to each selected record. Attributes Attribute Description After The behavior of the current container after the action is completed. The value can be one          of the following: Refresh : The current container should be refreshed after the action is           completed. Close : The current container should be closed after the action is           completed. If the  Redirect  attribute of an action object is set to  true ,          the  After  attribute of this object defines more complex behavior for the          current container. See  Redirecting to Different Screens and Containers for details. Behavior Required. The behavior of the action—which defines how the mobile app obtains from          the server the data resulting from the action and processes this data. The value can be one          of the following: Cancel : Discards the unsaved changes. You must declare this action if it is           present in the WSDL. Create : Creates a new data record. If the  Redirect  attribute           value is  true , this action redirects the user to a container defined on a different           screen. Delete : Deletes the data record. Open : Opens the data record for editing on a different screen. If the             Redirect  attribute value is  true , this action redirects the           user to a container defined on a different screen. Record : Indicated that the mobile app should expect a single record as the           server response. Save : Saves the data record. SignReport : Indicates that the mobile app should add the             Sign  action to the container. This action is not implemented in             Acumatica ERP and uses the specific capabilities of the mobile devices to create the user signature           as an image file. The user can save the signature in the database of the  Acumatica ERP instance as a file attachment for the appropriate form. See  Creating the User Signature for details. Void : Tells the mobile app to not use any records that are returned in the           server response. DisplayName The name of the action in the UI. Icon The name of the image that is used to display the action icon on the UI. If this         attribute is not specified for an action, the action is displayed on the UI without an icon.           See  Icons for the possible values and the corresponding          images for the  Icon  attribute. Priority The priority value that defines the position of the action on the screen or the         toolbar relative to other selection actions. Redirect An indicator of whether the action redirects the user to a container of a screen. You         can use this attribute to do the following: Allow a redirection defined for the action in  Acumatica ERP by setting the attribute to  true . Deny a redirection defined for the action in  Acumatica ERP by setting the attribute to  false . This is the default setting of the             Redirect  attribute. Define a new redirection for the action by setting the attribute to  true  and           specifying the attributes of this tag to set one of the following as the destination of           the redirection: RedirectToScreen , to redirect to the primary container of the             specified screen RedirectToContainer , to redirect to another container of the             current screen RedirectToScreen  and  RedirectToContainer , to             redirect to a specified container of a specified screen See  Redirecting to Different Screens and Containers for more details. RedirectToContainer The name of the destination container. The name can consist of the following parts         separated by the  $  symbol: The name of the container The display type of the container:  List  or  Form  (default) The optional name of the additional container whose data is used as a filter The mobile site map has to include the metadata for this container. RedirectToScreen The name of the destination screen. The mobile site map has to include the metadata         for this screen. SyncLongOperation An indicator of whether the mobile app should wait until the action is completed if         this action is defined as a  PXLongRunOperation  one and is executed         asynchronously in  Acumatica ERP. By default, the  SyncLongOperation  attribute is set to          false . Example In the following example, a new action for deleting selected records is defined. add selectionAction "Delete" {      
    icon = "system://Trash"      
    behavior = Delete    
} ]]></column>
		</row>
		<row PageID="0b432df8-07b8-4967-9fd6-14bbf62d5464" Language="en-US" PageRevisionID="1" Content="&#xA;For attachments, an object that defines a file name extension of the permitted file type. [anchor|#_d26b1bec-0f14-4035-81d1-bee6157b2583]((({S:Warn}On iOS devices, it is possible to upload only image files. Files of other types are not supported.&#xA;))){br}{TOC}&#xA;==Attributes==[anchor|#_a2acc45f-e4d6-4586-9621-d428f8e0376e]&#xA;{| class=&quot;checklist&quot; | width=&quot;100%&quot; &#xA;|- &#xA;!width=&quot;25%&quot; ! Attribute&#xA;!width=&quot;75%&quot; ! Description&#xA;|- &#xA;| &lt;tt&gt;Extension&lt;/tt&gt;&#xA;| The file name extension of the permitted file type.&#xA;|}&#xA;==Example==&#xA;The following examples defines three types of files that can be attached to the record: JPG, PNG, and PDF.{{{{attachments {&#xA;  add type &quot;jpg&quot; {&#xA;    extension = &quot;jpg&quot;      &#xA;  }&#xA;  add type &quot;png&quot; {&#xA;    extension = &quot;png&quot;&#xA;  }&#xA;  add type &quot;pdf&quot; {&#xA;    extension = &quot;pdf&quot;&#xA;  }&#xA;}&#xA;}}}}&#xA;==Related Articles==&#xA;*[HelpRoot_Dev_Mobile\MOBILE_sm_Type|&amp;lt;sm:Type&amp;gt;]" PlainText="type For attachments, an object that defines a file name extension of the permitted file type.  On iOS devices, it is possible to upload only image             files. Files of other types are not supported. Attributes Attribute Description Extension The file name extension of the permitted file type. Example The following examples defines three types of files that can be attached to the record:         JPG, PNG, and PDF. attachments {&#xA;  add type &quot;jpg&quot; {&#xA;    extension = &quot;jpg&quot;      &#xA;  }&#xA;  add type &quot;png&quot; {&#xA;    extension = &quot;png&quot;&#xA;  }&#xA;  add type &quot;pdf&quot; {&#xA;    extension = &quot;pdf&quot;&#xA;  }&#xA;} " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="5407d4f6-b0fd-7907-a5c0-c067669f3e5b" RecordSourceID="22377" />
		<row PageID="477ed21f-0f7e-4ba3-a93c-cbbff0b95044" Language="en-US" PageRevisionID="1" Content="&#xA;An object that maps user-defined fields of a form to the equivalent screen in the mobile app. A single use of the &lt;tt&gt;UDFields&lt;/tt&gt; object maps all user-defined fields of a particular screen.{br}{TOC}&#xA;==Attributes==&#xA;The object contains no attributes.&#xA;==Example==&#xA;The following example maps user-defined fields of the [HelpRoot_FormReference\CR_30_60_00|Cases] ([~/?ScreenId=CR306000|CR306000]) form to the Cases screen. ''UDFInline'' is an arbitrary name that has not been used anywhere else in the mapping.{{{{update screen &quot;CR306000&quot; {&#xA;  update container &quot;CaseSummary&quot; {&#xA;    add UDFields &quot;UDFInline&quot;&#xA;  }&#xA;}&#xA;}}}}" PlainText="UDFields An object that maps user-defined fields of a form to the equivalent screen in the mobile app.         A single use of the  UDFields  object maps all user-defined fields of a         particular screen. Attributes The object contains no attributes. Example The following example maps user-defined fields of the   ([~/?ScreenId=CR306000|CR306000]) Cases (CR306000) form to the Cases screen.            UDFInline  is an arbitrary name that has not been used anywhere else in the         mapping. update screen &quot;CR306000&quot; {&#xA;  update container &quot;CaseSummary&quot; {&#xA;    add UDFields &quot;UDFInline&quot;&#xA;  }&#xA;} " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="94d4f2bb-31d5-ebb3-406e-60b859edacab" RecordSourceID="22377" />
		<row PageID="0ce10922-e085-45ad-987c-a8f9b264f670" Language="en-US" PageRevisionID="1" Content="&#xA;The following types of constants are supported in MSDL.[anchor|#_66752546-ad88-4a08-954d-a4b496d178b8]&#xA;{| class=&quot;checklist&quot; | width=&quot;100%&quot; &#xA;|- &#xA;!width=&quot;33%&quot; ! Type&#xA;!width=&quot;66%&quot; ! Example&#xA;|- &#xA;| &lt;tt&gt;integer&lt;/tt&gt;&#xA;|  ''100500''&#xA;|- &#xA;|  &lt;tt&gt;string&lt;/tt&gt;&#xA;|  ''&amp;ldquo;Expense Receipts&amp;ldquo;''&#xA;|- &#xA;|  &lt;tt&gt;boolean&lt;/tt&gt;&#xA;|  ''true'' and ''false''&#xA;|- &#xA;|  &lt;tt&gt;enum&lt;/tt&gt;&#xA;|  ''hubFolder''&#xA;|}" PlainText="Constants The following types of constants are supported in MSDL. Type Example integer 100500 string &quot;Expense Receipts&quot; boolean true  and  false enum hubFolder " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="2747e2fc-d511-d30d-a53b-2a25eb95e4f6" RecordSourceID="22377" />
		<row PageID="b3d87528-db27-4e8b-afb7-c1e2804215e8" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="b13ad0c9-6973-09c1-bfc5-5b142b3de004" RecordSourceID="22377">
			<column name="Content"><![CDATA[
''Format:''{br}

{{{{# comment
instructionName objectType "objectName" {
  attributeName1 = newValue1
  attributeName2 = newValue2
  ...
  instructionName1 objectType1 "objectName1" {
    ...
  }
}
}}}}{br}

MSDL provides the following instructions.[anchor|#_febaad00-49c6-49c5-8659-38f311d3005e]
{| class="checklist" | width="100%" 
|- 
!width="25%" ! Instruction
!width="75%" ! Description
|- 
| [HelpRoot_Dev_Mobile\MOBILE_Ref_MSDL_Instr_ADD|add]
| Appends the specified object as a child to the object that is referenced in the outer scope of this instruction.
|- 
| [HelpRoot_Dev_Mobile\MOBILE_Ref_MSDL_Instr_ATTACHMENTS|attachments]
| In a container, switches the MSDL interpreter to the mode of setting the attachment attributes.
|- 
| [HelpRoot_Dev_Mobile\MOBILE_Ref_MSDL_Instr_PLACEAFTER|placeAfter]
| In the mobile site map, moves the object that is referenced in the outer scope of this instruction after the specified object.
|- 
| [HelpRoot_Dev_Mobile\MOBILE_Ref_MSDL_Instr_PLACEAT|placeAt]
| In the mobile site map, moves the object that is referenced in the outer scope of this instruction to the specified position.
|- 
| [HelpRoot_Dev_Mobile\MOBILE_Ref_MSDL_Instr_PLACEBEFORE|placeBefore]
| In the mobile site map, moves the object that is referenced in the outer scope of this instruction to the position before the specified object.
|- 
| [HelpRoot_Dev_Mobile\MOBILE_Ref_MSDL_Instr_REMOVE|remove]
| Removes the specified object from the mobile site map.
|- 
| [HelpRoot_Dev_Mobile\MOBILE_Ref_MSDL_Instr_sitemap|sitemap]
| Switches the MSDL interpreter to the mode of editing the main menu of the mobile site map.
|- 
| [HelpRoot_Dev_Mobile\MOBILE_Ref_MSDL_Instr_SELECTOR|selector]
| In a field, switches the MSDL interpreter to the mode of editing the selector content.
|- 
| [HelpRoot_Dev_Mobile\MOBILE_Ref_MSDL_Instr_UPDATE|update]
| Switches the MSDL interpreter to the mode of editing the specified object.
|}]]></column>
			<column name="PlainText"><![CDATA[Instructions Format: # comment
instructionName objectType "objectName" {
  attributeName1 = newValue1
  attributeName2 = newValue2
  ...
  instructionName1 objectType1 "objectName1" {
    ...
  }
} MSDL       provides the following instructions. Instruction Description addAppends the specified object as a child to the object that is referenced in the                 outer scope of this instruction. attachmentsIn a container, switches the MSDL interpreter to the mode of setting the                 attachment attributes. placeAfterIn the mobile site map, moves the object that is referenced in the outer scope                 of this instruction after the specified object. placeAtIn the mobile site map, moves the object that is referenced in the outer scope                 of this instruction to the specified position. placeBeforeIn the mobile site map, moves the object that is referenced in the outer scope                 of this instruction to the position before the specified object. removeRemoves the specified object from the mobile site map. sitemapSwitches the MSDL interpreter to the mode of editing the main menu of the                 mobile site map. selectorIn a field, switches the MSDL interpreter to the mode of editing the selector                 content. updateSwitches the MSDL interpreter to the mode of editing the specified                 object. ]]></column>
		</row>
		<row PageID="bd8dcd67-29fa-461b-9ccc-f438e53c1b30" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="048fe679-0f4a-865f-0b3e-f30a8754dc8c" RecordSourceID="22377">
			<column name="Content"><![CDATA[
In the mobile site map of the Acumatica ERP instance, appends the referenced object as a child to the object that was processed by a previous instruction with an opening brace.{br}

''Syntax:''<source lang="csharp">add objectType "objectName"</source>
''Parameters:''[anchor|#_b85a4c26-e0b6-4d12-acea-f33f9f8a8c9d]
* <tt>objectType</tt>: The keyword that specifies one of the object types, as described in [HelpRoot_Dev_Mobile\MOBILE_Ref_MSDL_ObjTypes|Object Types].
*<tt>objectName</tt>: The string constant that specifies the object name as it is defined in the WSDL schema. (See [HelpRoot_Dev_Mobile\MOBILE_BasicInfo|Getting the WSDL Schema] for details.) If {{objectType}} is <tt>field</tt>, to add to the container a child field from another container, you specify the value of this parameter in the following format: {{ContainerName#FieldName}}, where {{ContainerName}} is the name of the container (as it is specified in the WSDL schema) that contains the field, and {{FieldName}} is the name of the field in this container.

''Example:''{br}

Suppose that you need to add a new field to a container that is defined in the mobile site map. We recommend that you do this as shown in the following example.<source lang="csharp">update screen "ERP_ScreenID" {
  update container "WSDL_ContainerName" {
    add field "WSDL_FieldName" {
      FieldTagAttribute1 = Value1
      FieldTagAttribute2 = Value2
    }
  }
}</source>
The code above performs the following operations:[anchor|#_b436b62e-248f-4c34-a8a4-f1c1389ebfb0]
#Finds the screen by the specified name in the mobile site map
#If the previous operation has succeeded, finds the container with the specified name in the mobile site map
#If the previous operation has succeeded, finds the container in the WSDL schema of the form
#In the WSDL schema, finds the field that has the name specified in the <tt>add</tt> instruction
#If the previous operation has succeeded, adds the field to the mobile site map
#If an assignment command for an attribute of the field is specified for the <tt>add</tt> instruction within braces, sets the attribute to the specified value
]]></column>
			<column name="PlainText"><![CDATA[add In the mobile site map of the  Acumatica ERP instance, appends the referenced object as a child to the object that was processed by a       previous instruction with an opening brace. Syntax: add objectType "objectName" Parameters: objectType : The keyword that specifies one of the object types, as         described in  Object Types. objectName : The string constant that specifies the object name as it is         defined in the WSDL schema. (See  Getting the WSDL Schema for details.) If            objectType  is  field , to add to the container a child         field from another container, you specify the value of this parameter in the following         format:  ContainerName#FieldName , where  ContainerName  is         the name of the container (as it is specified in the WSDL schema) that contains the field,         and  FieldName  is the name of the field in this container. Example: Suppose that you need to add a new field to a container that is defined in the mobile site       map. We recommend that you do this as shown in the following example. update screen "ERP_ScreenID" {
  update container "WSDL_ContainerName" {
    add field "WSDL_FieldName" {
      FieldTagAttribute1 = Value1
      FieldTagAttribute2 = Value2
    }
  }
} The code above performs the following operations: Finds the screen by the specified name in the mobile site map If the previous operation has succeeded, finds the container with the specified name in         the mobile site map If the previous operation has succeeded, finds the container in the WSDL schema of the         form In the WSDL schema, finds the field that has the name specified in the            add  instruction If the previous operation has succeeded, adds the field to the mobile site map If an assignment command for an attribute of the field is specified for the            add  instruction within braces, sets the attribute to the specified         value ]]></column>
		</row>
		<row PageID="25caf6fa-e86d-4923-a18e-b066e1c3f148" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="e535b8d6-78b2-6905-f22f-bc5c4a0a7621" RecordSourceID="22377">
			<column name="Content"><![CDATA[
In a container in the mobile site map of the Acumatica ERP instance, switches the MSDL interpreter to the mode in which the attachment attributes can be set.[anchor|#_3c3b0899-a12f-4740-96c3-326df6044903]((({S:Warn}On iOS devices, it is possible to upload only image files. Files of other types are not supported.
)))
''Syntax:''<source lang="csharp">attachments {}</source>
The braces are mandatory. Within the braces, you can add assignment commands for the attributes of the instruction.{br}

''Attributes'':[anchor|#_bf3b7297-b6d2-4e61-b8f7-c53d22988ee5]
{| class="checklist" | width="100%" 
|- 
!width="25%" ! Attribute
!width="75%" ! Description
|- 
| <tt>Disabled</tt>
| An indicator of whether attachments are disabled. If its value is ''true'', the attachments are disabled.
|- 
| <tt>ImageAdjustmentPreset</tt>
| The type of the image adjustment that is processed by the application for enhancing images taken from the camera of a mobile device. The only value of this attribute is ''Receipt'', which is an indicator that a special camera mode is switched on in the Acumatica mobile app. In this mode, the following enhancements of the image captured by the camera are preformed automatically:[anchor|#_168a39fa-235e-4b02-9faa-7128eed2bc1c]
*The image is cropped based the bounding box of the receipt&rsquo;s detected edges.
*The image distortion is removed.
*The image is converted into black and white.
*The contrast of the image is maximized.

|- 
| <tt>Name</tt>
| The identifier of the attachments, as found in the WSDL schema.
|- 
| <tt>MaxFileSize</tt>
| The maximum size of an attached file.
|- 
| <tt>MaxImageHeight</tt>
| The maximum height of an attached image (in pixels).
|- 
| <tt>MaxImageWidth</tt>
| The maximum width of an attached image (in pixels).
|}
''Example:''{br}

Suppose that you need to specify the following requirements related to attachments:[anchor|#_130647ce-df9d-45e7-8669-11d477bae07b]
*The attachments of an Acumatica ERP form are allowed in the container.
*The attachments can contain files that have the <tt>JPG</tt> or <tt>PNG</tt> extension.
*Image adjustment is not used for an attached file.

You can add the following code within the instruction for the appropriate container.{{{{ any instruction for the container {
 ...
  attachments {
    disabled = false
    add type "jpg"
    add type "png"
    imageAdjustmentPreset = Receipt
  }
}
}}}}
==Related Articles==
*[HelpRoot_Dev_Mobile\MOBILE_sm_Attachments|&lt;sm:Attachments&gt;]
*[HelpRoot_Administration\DM__mng_File_Attachements|Managing Attached Files]]]></column>
			<column name="PlainText"><![CDATA[attachments In a container in the mobile site map of the  Acumatica ERP instance, switches the MSDL interpreter to the mode in which the attachment attributes can       be set. On iOS devices, it is possible to upload only image             files. Files of other types are not supported. Syntax: attachments {} The braces are mandatory. Within the braces, you can add assignment commands for the       attributes of the instruction. Attributes : Attribute Description Disabled An indicator of whether attachments are disabled. If its value is  true ,               the attachments are disabled. ImageAdjustmentPreset The type of the image adjustment that is processed by the application for               enhancing images taken from the camera of a mobile device. The only value of this               attribute is  Receipt , which is an indicator that a special camera mode is               switched on in the Acumatica mobile app. In this mode, the following enhancements of               the image captured by the camera are preformed automatically: The image is cropped based the bounding box of the receipt's detected                   edges. The image distortion is removed. The image is converted into black and white. The contrast of the image is maximized. Name The identifier of the attachments, as found in the WSDL schema. MaxFileSize The maximum size of an attached file. MaxImageHeight The maximum height of an attached image (in pixels). MaxImageWidth The maximum width of an attached image (in pixels). Example: Suppose that you need to specify the following requirements related to attachments: The attachments of an  Acumatica ERP form are allowed in the container. The attachments can contain files that have the  JPG  or            PNG  extension. Image adjustment is not used for an attached file. You can add the following code within the instruction for the appropriate container.  any instruction for the container {
 ...
  attachments {
    disabled = false
    add type "jpg"
    add type "png"
    imageAdjustmentPreset = Receipt
  }
} ]]></column>
		</row>
		<row PageID="f46b983d-f80b-43c2-8ade-e6afd78d17d8" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="b31d99fa-cdf1-b376-b9a1-9480e4ec09d4" RecordSourceID="22377">
			<column name="Content"><![CDATA[
In the mobile site map, moves the object that is referenced in the outer scope of this instruction immediately after the specified object. The instruction is used to order child objects within a parent object of the mobile site map. You cannot use the instruction to move an object from one parent object to another.{br}

''Syntax:''<source lang="csharp">placeAfter objectType "objectName"</source>
''Parameters:''[anchor|#_b85a4c26-e0b6-4d12-acea-f33f9f8a8c9d]
* <tt>objectType</tt>: A keyword that specifies an object type, as described in [HelpRoot_Dev_Mobile\MOBILE_Ref_MSDL_ObjTypes|Object Types].
*<tt>objectName</tt>: The string constant that specifies the name of the object of the type specified by the <tt>objectType</tt> parameter. The object must exist in the instance of the mobile site map in the memory of Acumatica ERP server before the MSDL interpreter processes the <tt>placeAfter</tt> instruction.

''Example:''{br}

Suppose that you need to move the ''EP503010'' form shortcut within the ''ExpenseReceipts'' folder of the main menu to the position after the ''EP301010'' form shortcut. You can add the following code within the <tt>sitemap</tt> instruction.<source lang="csharp">update folder "ExpenseReceipts" {
    update item "EP503010" {
        placeAfter item "EP301010"
    }
}</source>]]></column>
			<column name="PlainText"><![CDATA[placeAfter In the mobile site map, moves the object that is referenced in the outer scope of this       instruction immediately after the specified object. The instruction is used to order child       objects within a parent object of the mobile site map. You cannot use the instruction to move       an object from one parent object to another. Syntax: placeAfter objectType "objectName" Parameters: objectType : A keyword that specifies an object type, as described in            Object Types. objectName : The string constant that specifies the name of the object         of the type specified by the  objectType  parameter. The object must exist         in the instance of the mobile site map in the memory of  Acumatica ERP server before the MSDL interpreter processes the  placeAfter          instruction. Example: Suppose that you need to move the  EP503010  form shortcut within the          ExpenseReceipts  folder of the main menu to the position after the  EP301010        form shortcut. You can add the following code within the  sitemap        instruction. update folder "ExpenseReceipts" {
    update item "EP503010" {
        placeAfter item "EP301010"
    }
} ]]></column>
		</row>
		<row PageID="58fa38fa-1a12-4bf7-a7e8-ad23d7a2b29e" Language="en-US" PageRevisionID="1" Content="&#xA;In the mobile site map, moves the object that is referenced in the outer scope of this instruction to the specified position in the same parent object of the mobile site map.{br}&#xA;&#xA;''Syntax:''&lt;source lang=&quot;csharp&quot;&gt;placeAt positionNumber&lt;/source&gt;&#xA;''Parameter:''[anchor|#_b85a4c26-e0b6-4d12-acea-f33f9f8a8c9d]&#xA;* &lt;tt&gt;positionNumber&lt;/tt&gt;: The non-negative integer value that specifies the number of the target position in the parent object.&#xA;&#xA;''Example:''{br}&#xA;&#xA;Suppose that you need to add a shortcut to the Expense Receipts (EP301010) screen to the first position in the &lt;tt&gt;ExpenseReceipts&lt;/tt&gt; folder of the main menu and change the display name of the shortcut. You can add the following code within the &lt;tt&gt;sitemap&lt;/tt&gt; instruction.&lt;source lang=&quot;csharp&quot;&gt;update folder &quot;ExpenseReceipts&quot; {&#xA;    add item &quot;EP301010&quot; {      &#xA;        displayName = &quot;Expense Receipts&quot;&#xA;        placeAt 0&#xA;    }&#xA;}&lt;/source&gt;" PlainText="placeAt In the mobile site map, moves the object that is referenced in the outer scope of this       instruction to the specified position in the same parent object of the mobile site map. Syntax: placeAt positionNumber Parameter: positionNumber : The non-negative integer value that specifies the         number of the target position in the parent object. Example: Suppose that you need to add a shortcut to the Expense Receipts (EP301010) screen to the first       position in the  ExpenseReceipts  folder of the main menu and change the       display name of the shortcut. You can add the following code within the          sitemap  instruction. update folder &quot;ExpenseReceipts&quot; {&#xA;    add item &quot;EP301010&quot; {      &#xA;        displayName = &quot;Expense Receipts&quot;&#xA;        placeAt 0&#xA;    }&#xA;} " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="92f87ec4-6c1f-4785-7c39-5a0677522797" RecordSourceID="22377" />
		<row PageID="370761bd-15d2-44ae-bb54-86cf8f051e6d" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="01117098-0a87-33af-22f1-6ab23ede678f" RecordSourceID="22377">
			<column name="Content"><![CDATA[
In the mobile site map, moves the object that is referenced in the outer scope of this instruction immediately before the specified object. The instruction is used to order child objects within a parent object of the mobile site map. You cannot use the instruction to move an object from one parent object to another.{br}

''Syntax:''<source lang="csharp">placeBefore objectType "objectName"</source>
''Parameters:''[anchor|#_b85a4c26-e0b6-4d12-acea-f33f9f8a8c9d]
* <tt>objectType</tt>: A keyword that specifies an object type, as described in [HelpRoot_Dev_Mobile\MOBILE_Ref_MSDL_ObjTypes|Object Types].
*<tt>objectName</tt>: The string constant that specifies the name of the object of the type specified by the <tt>objectType</tt> parameter. The object must exist in the instance of the mobile site map in the memory of Acumatica ERP server before the MSDL interpreter processes the <tt>placeBefore</tt> instruction.

''Example:''{br}

Suppose that you need to add the ''CompanyName'' field within the ''ContactSummary'' container to the position before the ''Address'' group. You can add the following code within an instruction for the container.<source lang="csharp">
update screen "CR302000" {
  update container "ContactSummary" {
  ...
    add group "Address" {...}
  ...
    add field "CompanyName" {
      container = "DetailsSummary"
      placeBefore group "Address"
    }
  }
}</source>]]></column>
			<column name="PlainText"><![CDATA[placeBefore In the mobile site map, moves the object that is referenced in the outer scope of this       instruction immediately before the specified object. The instruction is used to order child       objects within a parent object of the mobile site map. You cannot use the instruction to move       an object from one parent object to another. Syntax: placeBefore objectType "objectName" Parameters: objectType : A keyword that specifies an object type, as described in            Object Types. objectName : The string constant that specifies the name of the object         of the type specified by the  objectType  parameter. The object must exist         in the instance of the mobile site map in the memory of  Acumatica ERP server before the MSDL interpreter processes the  placeBefore          instruction. Example: Suppose that you need to add the  CompanyName  field within the  ContactSummary        container to the position before the  Address  group. You can add the following code       within an instruction for the container. 
update screen "CR302000" {
  update container "ContactSummary" {
  ...
    add group "Address" {...}
  ...
    add field "CompanyName" {
      container = "DetailsSummary"
      placeBefore group "Address"
    }
  }
} ]]></column>
		</row>
		<row PageID="75a603f0-0fae-4784-842a-8c1ea54df03f" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="f18bc4ec-3a7b-8ce8-faa0-921d78339d97" RecordSourceID="22377">
			<column name="Content"><![CDATA[
In the mobile site map of the Acumatica ERP instance, removes the referenced object, along with any child objects it has, from the mobile site map.{br}

''Syntax:''<source lang="csharp">remove objectType "objectName"</source>
''Parameters:''[anchor|#_27c9b54f-eb78-4a5f-9b6c-65f1e95166c3]
* <tt>objectType</tt>: A keyword that specifies one of the object types, as described in [HelpRoot_Dev_Mobile\MOBILE_Ref_MSDL_ObjTypes|Object Types].
*<tt>objectName</tt>: The string constant that specifies the object name as it is defined in the WSDL schema. (See [HelpRoot_Dev_Mobile\MOBILE_BasicInfo|Getting the WSDL Schema] for details.)

''Example:''{br}

Suppose that you need to remove a field from a container that is defined in the mobile site map. We recommend that you do this as shown in the following example.<source lang="csharp">update screen "ERP_ScreenID" {
  update container "WSDL_ContainerName" {
    remove field "WSDL_FieldName"
  }
}</source>
The code above performs the following operations:[anchor|#_b436b62e-248f-4c34-a8a4-f1c1389ebfb0]
#Finds the screen with the specified name in the mobile site map
#If the previous operation has succeeded, finds the container with the specified name in the mobile site map
#If the previous operation has succeeded, removes the field from the mobile site map
#:((({S:Warn}If the field contains a selector container, the container is also removed from the mobile site map.
)))
]]></column>
			<column name="PlainText"><![CDATA[remove In the mobile site map of the  Acumatica ERP instance, removes the referenced object, along with any child objects it has, from the       mobile site map. Syntax: remove objectType "objectName" Parameters: objectType : A keyword that specifies one of the object types, as         described in  Object Types. objectName : The string constant that specifies the object name as it is         defined in the WSDL schema. (See  Getting the WSDL Schema for details.) Example: Suppose that you need to remove a field from a container that is defined in the mobile site       map. We recommend that you do this as shown in the following example. update screen "ERP_ScreenID" {
  update container "WSDL_ContainerName" {
    remove field "WSDL_FieldName"
  }
} The code above performs the following operations: Finds the screen with the specified name in the mobile site map If the previous operation has succeeded, finds the container with the specified name in         the mobile site map If the previous operation has succeeded, removes the field from the mobile site           map If the field contains a selector container, the container is also removed from           the mobile site map. ]]></column>
		</row>
		<row PageID="2ed71b43-06cc-4f29-a122-0e10dbdee4fd" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="461b6b32-2552-f83a-d70f-8e08ce625135" RecordSourceID="22377">
			<column name="Content"><![CDATA[
Switches the MSDL interpreter to editing mode for the main menu of the mobile site map.{br}

''Syntax:''<source lang="csharp">sitemap {}</source>
The braces are mandatory. Within the braces, you can add instructions for objects of the main menu of the mobile site map.{br}

''Examples:''{br}

The following code adds the new folder to the main menu, sets the attributes of the folder in the mobile site map (see [HelpRoot_Dev_Mobile\mobile_ref_msdl_objtype_folder|folder] for details), and adds the shortcut for the Expense Receipts (EP301010) screen with the specified display name to the folder.{{{{sitemap {
  add folder "ExpenseReceipts" {
    type = HubFolder
    isDefaultFavorite = True
    displayName = "Expense Receipts"
    icon = "system://NewsPaper"
    add item "EP301010" {
      displayName = "Expense Receipts"
    }   
}
}}}}
The code below updates the <tt>ExpenseReceipts</tt> folder of the main menu in the following ways:[anchor|#_88c7d1a5-631c-4838-abae-6aac66a57977]
*Switches the MSDL interpreter to editing mode for the main menu
*Changes the display name of the folder
*Removes the shortcut to the Expense Receipts screen from the folder
*Adds the shortcut to the Expense Receipts screen to the folder with the specified display name
*Switches the MSDL interpreter back to editing mode for the content of the mobile site map
<source lang="csharp">update folder "ExpenseReceipts" {
    displayName = "New display name"
    remove item "EP301010"
    add item "EP503010" {
      displayName = "Other screen"
    }
}</source>
The code above can be executed because it operates with the objects that are created in the previous code example.]]></column>
			<column name="PlainText"><![CDATA[sitemap Switches the MSDL interpreter to editing mode for the main menu of the mobile site map. Syntax: sitemap {} The braces are mandatory. Within the braces, you can add instructions for objects of the main       menu of the mobile site map. Examples: The following code adds the new folder to the main menu, sets the attributes of the folder in       the mobile site map (see  folder for details), and       adds the shortcut for the Expense Receipts (EP301010) screen with the specified display name       to the folder. sitemap {
  add folder "ExpenseReceipts" {
    type = HubFolder
    isDefaultFavorite = True
    displayName = "Expense Receipts"
    icon = "system://NewsPaper"
    add item "EP301010" {
      displayName = "Expense Receipts"
    }   
} The code below updates the  ExpenseReceipts  folder of the main menu in       the following ways: Switches the MSDL interpreter to editing mode for the main menu Changes the display name of the folder Removes the shortcut to the Expense Receipts screen from the folder Adds the shortcut to the Expense Receipts screen to the folder with the specified display         name Switches the MSDL interpreter back to editing mode for the content of the mobile site         map update folder "ExpenseReceipts" {
    displayName = "New display name"
    remove item "EP301010"
    add item "EP503010" {
      displayName = "Other screen"
    }
} The code above can be executed because it operates with the objects that are created in the       previous code example. ]]></column>
		</row>
		<row PageID="666041b0-2ca5-4f2a-ba2b-5d953381c00b" Language="en-US" PageRevisionID="1" Content="&#xA;In a field in the mobile site map of the Acumatica ERP instance, switches the MSDL interpreter to editing mode for the selector content.{br}&#xA;&#xA;''Syntax:''&lt;source lang=&quot;csharp&quot;&gt;selector {}&lt;/source&gt;&#xA;The braces are mandatory. Within the braces, you can add assignment commands for attributes of the [HelpRoot_Dev_Mobile\mobile_ref_msdl_objtype_container|container] object and instructions for the fields that are used as selector columns.{br}&#xA;&#xA;''Example:''{br}&#xA;&#xA;Suppose that you need to define for a field a selector container that contains four columns but displays only three. You can add the following code within an instruction for the field.{{{{ any instruction for the field {&#xA;  selector {&#xA;    fieldsToShow = 3&#xA;    add field &quot;BusinessAccount&quot;&#xA;    add field &quot;Type&quot;&#xA;    add field &quot;BusinessAccountName&quot;&#xA;    add field &quot;BAccountID&quot;&#xA; }&#xA;}&#xA;}}}}" PlainText="selector In a field in the mobile site map of the  Acumatica ERP instance, switches the MSDL interpreter to editing mode for the selector content. Syntax: selector {} The braces are mandatory. Within the braces, you can add assignment commands for attributes       of the  container object and instructions for the       fields that are used as selector columns. Example: Suppose that you need to define for a field a selector container that contains four columns       but displays only three. You can add the following code within an instruction for the       field.  any instruction for the field {&#xA;  selector {&#xA;    fieldsToShow = 3&#xA;    add field &quot;BusinessAccount&quot;&#xA;    add field &quot;Type&quot;&#xA;    add field &quot;BusinessAccountName&quot;&#xA;    add field &quot;BAccountID&quot;&#xA; }&#xA;} " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="1ea4e48a-4b51-4184-9868-5e605dd19fed" RecordSourceID="22377" />
		<row PageID="65a74995-14bc-4af9-a547-091be631b98d" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="8ff4102d-33a2-4336-64e8-84e94b54cd50" RecordSourceID="22377">
			<column name="Content"><![CDATA[
In the mobile site map of the Acumatica ERP instance, switches the MSDL interpreter to editing mode for specified object.{br}

''Syntax:''<source lang="csharp">update objectType "objectName"</source>
''Parameters:''[anchor|#_bb4e03bf-5323-4380-a450-67ae8d7b21e6]
* <tt>objectType</tt>: A keyword that specifies one of the object types, as described in [HelpRoot_Dev_Mobile\MOBILE_Ref_MSDL_ObjTypes|Object Types].
*<tt>objectName</tt>: The string constant that specifies the object name as it is defined in the WSDL schema. (See [HelpRoot_Dev_Mobile\MOBILE_BasicInfo|Getting the WSDL Schema] for details.)

''Example:''{br}

Suppose that you need to add a new field to a container of a screen that is defined in the mobile site map. We recommend that you do this as shown in the following example.<source lang="csharp">update screen "ERP_ScreenID" {
  update container "WSDL_ContainerName" {
    add field "WSDL_FieldName" {
      ...
    }
  }
}</source>
The code above performs the following operations:[anchor|#_b436b62e-248f-4c34-a8a4-f1c1389ebfb0]
#Finds the screen with the specified name in the mobile site map
#If the previous operation has succeeded, finds the container with the specified name in the mobile site map
#If the previous operation has succeeded, finds the container in the WSDL schema of the form
#In the WSDL schema, finds the field with the name specified in the <tt>add</tt> instruction
#If the previous operation has succeeded, adds the field to the mobile site map
]]></column>
			<column name="PlainText"><![CDATA[update In the mobile site map of the  Acumatica ERP instance, switches the MSDL interpreter to editing mode for specified object. Syntax: update objectType "objectName" Parameters: objectType : A keyword that specifies one of the object types, as         described in  Object Types. objectName : The string constant that specifies the object name as it is         defined in the WSDL schema. (See  Getting the WSDL Schema for details.) Example: Suppose that you need to add a new field to a container of a screen that is defined in the       mobile site map. We recommend that you do this as shown in the following example. update screen "ERP_ScreenID" {
  update container "WSDL_ContainerName" {
    add field "WSDL_FieldName" {
      ...
    }
  }
} The code above performs the following operations: Finds the screen with the specified name in the mobile site map If the previous operation has succeeded, finds the container with the specified name in         the mobile site map If the previous operation has succeeded, finds the container in the WSDL schema of the         form In the WSDL schema, finds the field with the name specified in the  add          instruction If the previous operation has succeeded, adds the field to the mobile site map ]]></column>
		</row>
		<row PageID="051f3624-94e0-436f-b5b5-d0231855294b" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="24370bc4-8220-af41-718c-d4054e37899d" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The MSDL interpreter can work in the following modes:[anchor|#_b4cd5eae-b2bb-4e18-9f01-ff56ac125bc9]
*Production mode, in which the interpreter ignores most errors while processing the MSDL code, for greater stability
*Debugging mode, in which the interpreter logs every error and stops executing the MSDL code if an error occurs
{br}

Production mode is used by default; here the MSDL interpreter does not log errors that occur. The interpreter ignores any MSDL file that contains a syntax error. It also ignores any instruction that contains a semantic error; if such an instruction contains nested instructions and assignment commands, the interpreter also ignores them.{br}

To turn on debugging mode, you should turn on the <tt>mobileSitemapDebug</tt> key by including the following string in the <tt>&lt;appSettings&gt;</tt> section of the <tt>web.config</tt> file, which is located in the website folder:{{<add key="mobileSitemapDebug" value="True" />}}.{br}

If the key is turned on, the MSDL interpreter logs errors and sends the error messages to the mobile app, which displays these messages on the mobile device.{br}

The error messages are logged in the following format.{{{{path\\fileName:lineNumber errorMessage
}}}}{br}

The interpreter logs the following types of errors.[anchor|#_aefdda00-e05e-445d-a66b-fa7ecd623efe]
{| class="checklist" | width="100%" 
|- 
!width="33%" ! Example of Error Message
!width="66%" ! Description
|- 
| ''Invalid command &rsquo;ad&rsquo;.''
| The instruction name is invalid.
|- 
| ''Can&rsquo;t use entity type &rsquo;scren&rsquo; in current context.''
| The interpreter detects an unknown object or an attempt to use the object in the wrong context. The interpreter ignores the instruction and all the nested commands and instructions.
|- 
| ''Invalid argument &rsquo;1&rsquo;''
| The instruction contains an invalid type of a parameter.
|- 
| ''Invalid argument count''
| The instruction contains the wrong number of parameters. The interpreter ignores the instruction and all the nested commands and instructions.
|- 
| ''Can&rsquo;t find entity with key &rsquo;ExpenseReceipts&rsquo; in current context.''
| The object specified in the instruction (for example, <tt>update</tt> or <tt>remove</tt>) is not found in the mobile site map.
|- 
| ''Only one instance of entity type &rsquo;sitemap&rsquo;.''
| The instruction is trying to add an object that exists in the mobile site map, and the site map can contain only one such object.
|- 
| ''Entity with key &rsquo;EP301010&rsquo; already exists.''
| The instruction is trying to add an object that exists in the parent object.
|- 
| ''Can&rsquo;t use attribute &rsquo;someAttr&rsquo; in current context.''
| The assignment command is trying to set an attribute that does not rely on the specified object.
|- 
| ''Can&rsquo;t assign value to attribute &rsquo;forceRequired&rsquo;''
| The assignment command is trying to assign to the attribute a value of an inappropriate type.
|- 
| ''Syntax error: extraneous input &rsquo;&#0125;&rsquo;''
| The interpreter has detected a syntax error in the specified line of the MSDL code.
|}]]></column>
			<column name="PlainText"><![CDATA[Error Messages The MSDL interpreter can work in the following modes: Production mode, in which the interpreter ignores most errors while processing the MSDL      code ,       for greater stability Debugging mode, in which the interpreter logs every error and stops executing the MSDL code           if an error occurs Production mode is used by default; here the MSDL interpreter does not log errors that occur.    The interpreter ignores any MSDL file that contains a syntax error. It also ignores any    instruction that contains a semantic error; if such an instruction contains nested instructions    and assignment commands, the interpreter also ignores them. To turn on debugging mode, you should turn on the  mobileSitemapDebug  key by       including the following string in the  <appSettings>  section of the          web.config  file, which is located in the website folder: <add         key="mobileSitemapDebug" value="True" /> . If the key is turned on, the MSDL interpreter logs errors and sends the error messages to the       mobile app, which displays these messages on the mobile device. The error messages are logged in the following    format . path\\fileName:lineNumber errorMessage The interpreter logs the following types of errors. Example of Error Message Description Invalid command 'ad'. The instruction name is invalid. Can't use entity type 'scren' in current context. The interpreter detects an unknown object or an attempt to use the object in the wrong                 context. The interpreter ignores the instruction and all the nested commands and                 instructions. Invalid argument '1' The instruction contains an invalid type of a parameter. Invalid argument count The instruction contains the wrong number of parameters. The interpreter ignores the                 instruction and all the nested commands and instructions. Can't find entity with key 'ExpenseReceipts' in current context. The object specified in the instruction (for example,  update  or           remove ) is not found in the mobile site map. Only one instance of entity type 'sitemap'. The instruction is trying to add an object that exists in the mobile site map, and the                 site map can contain only one such object. Entity with key 'EP301010' already exists. The instruction is trying to add an object that exists in the parent object. Can't use attribute 'someAttr' in current context. The assignment command is trying to set an attribute that does not rely on the                 specified object. Can't assign value to attribute 'forceRequired' The assignment command is trying to assign to the attribute a value of an         inappropriate type. Syntax error: extraneous input '}' The interpreter has detected a syntax error in the specified line of the MSDL                 code. ]]></column>
		</row>
		<row PageID="c329935f-2792-42c1-a3bb-2e077f4a0a80" Language="en-US" PageRevisionID="1" PlainText="XML Tags XML tags for customizing the Mobile Site Map is deprecated since  Acumatica 2020 R1.    Use  MSDL instead. The figure below shows the relationships between tag types in the mobile site map. In the     figure, each line connecting a left tag type and a right tag type indicates that the left tag     may contain any number of right tags. The exception to this rule is the       sm:Container  tag, which may include only a single       sm:Attachments  tag. The  sm:Include  tag can be located in any place of another tag. In This Section &amp;lt;sm:Action&amp;gt;&amp;lt;sm:Attachments&amp;gt;&amp;lt;sm:Attributes&amp;gt;&amp;lt;sm:Container&amp;gt;&amp;lt;sm:ContainerLink&amp;gt;&amp;lt;sm:Field&amp;gt;&amp;lt;sm:Folder&amp;gt;&amp;lt;sm:Group&amp;gt;&amp;lt;sm:Include&amp;gt;&amp;lt;sm:Layout&amp;gt;&amp;lt;sm:RecordActionLink&amp;gt;&amp;lt;sm:Screen&amp;gt;&amp;lt;sm:SelectorContainer&amp;gt;&amp;lt;sm:Type&amp;gt;" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="f6fdf1e3-4feb-ff0d-4169-6b3e14f93e36" RecordSourceID="22377">
			<column name="Content"><![CDATA[((({S:Warn}XML tags for customizing the Mobile Site Map is deprecated since Acumatica 2020 R1. Use [HelpRoot_Dev_Mobile\MOBILE_Ref_MSDL|MSDL] instead.
)))
The figure below shows the relationships between tag types in the mobile site map. In the figure, each line connecting a left tag type and a right tag type indicates that the left tag may contain any number of right tags. The exception to this rule is the <tt>sm:Container</tt> tag, which may include only a single <tt>sm:Attachments</tt> tag.[anchor|#fig_mf1_jsz_xr][anchor|#image_nds_ksz_xr][image:StudioDeveloperGuide/Images/MobileFW_smTagsSchema01.png|popup|450px]{br}

The <tt>sm:Include</tt> tag can be located in any place of another tag.
==In This Section==[anchor|#ul_wwq_q5m_4r]
*[HelpRoot_Dev_Mobile\MOBILE_sm_Action|&lt;sm:Action&gt;]
*[HelpRoot_Dev_Mobile\MOBILE_sm_Attachments|&lt;sm:Attachments&gt;]
*[HelpRoot_Dev_Mobile\MOBILE_sm_Attributes|&lt;sm:Attributes&gt;]
*[HelpRoot_Dev_Mobile\MOBILE_sm_Container|&lt;sm:Container&gt;]
*[HelpRoot_Dev_Mobile\MOBILE_sm_ContainerLink|&lt;sm:ContainerLink&gt;]
*[HelpRoot_Dev_Mobile\MOBILE_sm_Field|&lt;sm:Field&gt;]
*[HelpRoot_Dev_Mobile\MOBILE_sm_Folder|&lt;sm:Folder&gt;]
*[HelpRoot_Dev_Mobile\MOBILE_sm_Group|&lt;sm:Group&gt;]
*[HelpRoot_Dev_Mobile\MOBILE_sm_Include|&lt;sm:Include&gt;]
*[HelpRoot_Dev_Mobile\MOBILE_sm_Layout|&lt;sm:Layout&gt;]
*[HelpRoot_Dev_Mobile\MOBILE_sm_RecordActionLink|&lt;sm:RecordActionLink&gt;]
*[HelpRoot_Dev_Mobile\MOBILE_sm_Screen|&lt;sm:Screen&gt;]
*[HelpRoot_Dev_Mobile\MOBILE_sm_SelectorContainer|&lt;sm:SelectorContainer&gt;]
*[HelpRoot_Dev_Mobile\MOBILE_sm_Type|&lt;sm:Type&gt;]
]]></column>
		</row>
		<row PageID="6231463f-1c26-429d-84b2-d9b2e2f66915" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="b6ed7387-56ae-0727-1938-4300177f562a" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The <tt>sm:Action</tt> tag has the following attributes.[anchor|#_11cf3842-c1ca-4cc8-9ace-1b186c59dbce]
{| class="checklist" | width="100%" 
|- 
!width="25%" ! Attribute
!width="75%" ! Description
|- 
| <tt>After</tt>
| 
The behavior of the current container after the action is completed. The value can be one of the following:[anchor|#_eca37c86-3e6e-4919-97b8-eaa2ebd84516]
*''Refresh'': An indicator that the current container is refreshed after the action is completed.
*''Close'': An indicator that the current container is closed after the action is completed.

If the <tt>Redirect</tt> attribute of the <tt>sm:Action</tt> tag is set to ''true'', the <tt>After</tt> attribute of this tag defines more complex behavior of the current container. See [HelpRoot_Dev_Mobile\MOBILE_Redirects|Redirecting to Different Screens and Containers] for details.
|- 
| <tt>Behavior</tt>
| 
Required. The behavior of the action—which defines how the mobile app obtains from the server the data resulting from the action and processes this data. The value can be one of the following:[anchor|#_e2eee84d-8681-4b40-aa41-57141a7a7a92]
*''Cancel'': The action that discards the unsaved changes. You must declare the action if it is present in the WSDL.
*''Create'': The action that creates a new data record. If the <tt>Redirect</tt> attribute value is ''true'', the action redirects the user to a container defined on a different screen.
*''Delete'': The action that deletes the data record.
*''Open'': The action that opens the data record for editing from a different screen. If the <tt>Redirect</tt> attribute value is ''true'', the action redirects the user to a container defined on a different screen.
*''Record'': The type of behavior that is a hint for the mobile app to expect a single record as the server response.
*''Save'': The action that saves the data record.
*''SignReport'': An indicator that the mobile app should add the '''SIGN''' action to the container. This action is not implemented in Acumatica ERP and uses specific capabilities of mobile devices to create the user signature as an image file. The user can save the signature in the database of the Acumatica ERP instance as a file attachment for the appropriate form. See [HelpRoot_Dev_Mobile\MOBILE_UserSignature|Creating the User Signature] for details.
*''Void'': The type of behavior that is a hint for the mobile app to do not use any records that are returned in the server response.

|- 
| <tt>Context</tt>
| 
Required. The context of the action—that is, what the action is performed on. The value can be one of the following:[anchor|#_a5af973f-642a-4567-956a-5f804023e22f]
*''Container'': The action that is related to a container and performs the business logic implemented in Acumatica ERP. Such an action is displayed only on the list view.
*''List'': The action that is performed on the data records selected in the list. Such an action is displayed only on the list view. You can use this value if the implementation of the action in Acumatica ERP supports processing of multiple records. Then if the user has selected multiple records in the list, the action is applied at once to all the rows selected in the list.
*''Record'': The action that is performed on the current data record. Such an action is displayed only on the form view.
*''Selection'': The action that is performed on the data records selected in the list. Such an action is displayed only on the list view. If the user has selected multiple records in the list, the action is applied successively to each selected record.

|- 
| <tt>DisplayName</tt>
| The name of the action in the UI.
|- 
| <tt>Icon</tt>
| The name of the image that is used to display the action icon on the UI. This attribute is optional. If this attribute is not specified for an action, the action is displayed in the UI without an icon. See the possible values and the corresponding images for the <tt>Icon</tt> attribute in [HelpRoot_Dev_Mobile\MOBILE_Ref_Icons|Icons].
|- 
| <tt>Name</tt>
| The action identifier, as found in the WSDL schema.
|- 
| <tt>Priority</tt>
| The priority value that defines the position of the action on the screen or the toolbar, depending on the <tt>Context</tt> value of this tag.
|- 
| <tt>Redirect</tt>
| An indicator of whether the action redirects the user to a container of a screen. You can use this attribute to do the following:[anchor|#_0173422a-5277-41f5-aa51-26ce9285f80a]
*Allow a redirection defined for the action in Acumatica ERP by setting the attribute to ''true''.
*Deny a redirection defined for the action in Acumatica ERP by setting the attribute to ''false''. This is the default setting of the <tt>Redirect</tt> attribute.
*Define a new redirection for the action by setting the attribute to ''true'' and specifying the attributes of this tag to set the following destination of the redirection:
**<tt>RedirectToScreen</tt>, to redirect to the primary container of the specified screen
**<tt>RedirectToContainer</tt>, to redirect to another container of the current screen
**<tt>RedirectToScreen</tt> and <tt>RedirectToContainer</tt>, to redirect to a specified container of a specified screen
*:((({S:Warn}See [HelpRoot_Dev_Mobile\MOBILE_Redirects|Redirecting to Different Screens and Containers] for more details.
)))

|- 
| <tt>RedirectToContainer</tt>
| The name of the destination container. The name can consist of the following parts separated by the ''$'' sign:[anchor|#_d7f3ff5e-b367-4e65-b6e6-7640eb174abe]
*The name of the container
*The display type of the container: ''List'' or ''Form'' (default)
*Optional: The name of the additional container whose data is used as a filter
The mobile site map has to include the metadata for this container.
|- 
| <tt>RedirectToScreen</tt>
| The name of the destination screen. The mobile site map has to include the metadata for this screen.
|- 
| <tt>SyncLongOperation</tt>
| An indicator of whether the mobile app should wait until the action is completed if this action is defined as a <tt>PXLongRunOperation</tt> one and is executed asynchronously in Acumatica ERP. By default, the <tt>SyncLongOperation</tt> attribute is set to ''false''.
|}
==Related Articles==
*[HelpRoot_Dev_Mobile\MOBILE_Ref_Tags|XML Tags]]]></column>
			<column name="PlainText"><![CDATA[<sm:Action> The  sm:Action  tag has the following attributes. Attribute Description After The behavior of the current container after the action is completed. The value                     can be one of the following: Refresh : An indicator that the current container is refreshed after                       the action is completed. Close : An indicator that the current container is closed after the                       action is completed. If the  Redirect  attribute of the                        sm:Action  tag is set to  true , the                        After  attribute of this tag defines more complex behavior                     of the current container. See  Redirecting to Different Screens and Containers for                     details. Behavior Required. The behavior of the action—which defines how the mobile app                     obtains from the server the data resulting from the action and processes this                     data. The value can be one of the following: Cancel : The action that discards the unsaved changes. You must                       declare the action if it is present in the WSDL. Create : The action that creates a new data record. If the                          Redirect  attribute value is  true , the action                       redirects the user to a container defined on a different screen. Delete : The action that deletes the data record. Open : The action that opens the data record for editing from a                       different screen. If the  Redirect  attribute value is                          true , the action redirects the user to a container defined on a                       different screen. Record : The type of behavior that is a hint for the mobile app to                       expect a single record as the server response. Save : The action that saves the data record. SignReport : An indicator that the mobile app should add the                          SIGN  action to the container. This action is not                       implemented in  Acumatica ERP and uses specific capabilities of mobile devices to create the user                       signature as an image file. The user can save the signature in the database of                       the  Acumatica ERP instance as a file attachment for the appropriate form. See  Creating the User Signature for details. Void : The type of behavior that is a hint for the mobile app to do                       not use any records that are returned in the server response. Context Required. The context of the action—that is, what the action is performed                     on. The value can be one of the following: Container : The action that is related to a container and performs the                       business logic implemented in  Acumatica ERP. Such an action is displayed only on the list view. List : The action that is performed on the data records selected in                       the list. Such an action is displayed only on the list view. You can use this                       value if the implementation of the action in  Acumatica ERP supports processing of multiple records. Then if the user has selected                       multiple records in the list, the action is applied at once to all the rows                       selected in the list. Record : The action that is performed on the current data record. Such                       an action is displayed only on the form view. Selection : The action that is performed on the data records selected                       in the list. Such an action is displayed only on the list view. If the user                       has selected multiple records in the list, the action is applied successively                       to each selected record. DisplayName The name of the action in the UI. Icon The name of the image that is used to display the action icon on the UI. This                   attribute is optional. If this attribute is not specified for an action, the                   action is displayed in the UI without an icon. See the possible values and the                   corresponding images for the  Icon  attribute in  Icons. Name The action identifier, as found in the WSDL schema. Priority The priority value that defines the position of the action on the screen or                   the toolbar, depending on the  Context  value of this                   tag. Redirect An indicator of whether the action redirects the user to a container of a                   screen. You can use this attribute to do the following: Allow a redirection defined for the action in  Acumatica ERP by setting the attribute to  true . Deny a redirection defined for the action in  Acumatica ERP by setting the attribute to  false . This is the default setting of                       the  Redirect  attribute. Define a new redirection for the action by setting the attribute to                          true  and specifying the attributes of this tag to set the following                       destination of the redirection: RedirectToScreen , to redirect to the primary                           container of the specified screen RedirectToContainer , to redirect to another container                           of the current screen RedirectToScreen  and                              RedirectToContainer , to redirect to a specified                           container of a specified screen See  Redirecting to Different Screens and Containers for more                       details. RedirectToContainer The name of the destination container. The name can consist of the following                   parts separated by the  $  sign: The name of the container The display type of the container:  List  or  Form  (default) Optional: The name of the additional container whose data is used as a                       filter The mobile site map has to include the metadata for this container. RedirectToScreen The name of the destination screen. The mobile site map has to include the                   metadata for this screen. SyncLongOperation An indicator of whether the mobile app should wait until the action is                   completed if this action is defined as a  PXLongRunOperation  one                   and is executed asynchronously in  Acumatica ERP. By default, the  SyncLongOperation  attribute is set to                      false . ]]></column>
		</row>
		<row PageID="5e35cde7-fb5c-47a9-8033-1279b29f1f6d" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="f5d293bb-f1bb-946d-b79f-3074fac3ea84" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The <tt>sm:Attachments</tt> tag has the following attributes.[anchor|#_ddbbf352-818f-4c9e-a74a-b6dd66fe4f5b]
{| class="checklist" | width="100%" 
|- 
!width="25%" ! Attribute
!width="75%" ! Description
|- 
| <tt>Disabled</tt>
| An indicator of whether attachments are disabled. If its value is ''true'', the attachments are disabled.
|- 
| <tt>ImageAdjustmentPreset</tt>
| The type of the image adjustment that is processed by the application for enhancing images taken from the camera of a mobile device. The only value of this attribute is ''Receipt'', which is an indicator that a special camera mode is switched on in the Acumatica mobile application. In this mode, the following enhancements of the image captured by the camera are preformed automatically:[anchor|#_8975286b-8314-4b38-b15e-7d3d18e2317e]
*The image is cropped by the bounding box of the detected edges.
*The image distortion is removed.
*The image is converted into black and white.
*The contrast of the image is maximized.

|- 
| <tt>Name</tt>
| The identifier of the attachments, as found in the WSDL schema.
|- 
| <tt>MaxFileSize</tt>
| The maximum size of an attached file.
|- 
| <tt>MaxImageHeight</tt>
| The maximum height of an attached image (in pixels).
|- 
| <tt>MaxImageWidth</tt>
| The maximum width of an attached image (in pixels).
|}
==Related Articles==
*[HelpRoot_Dev_Mobile\MOBILE_Ref_Tags|XML Tags]]]></column>
			<column name="PlainText"><![CDATA[<sm:Attachments> The  sm:Attachments  tag has the following attributes. Attribute Description Disabled An indicator of whether attachments are disabled. If its value is  true , the          attachments are disabled. ImageAdjustmentPreset The type of the image adjustment that is processed by the application for enhancing          images taken from the camera of a mobile device. The only value of this attribute is            Receipt , which is an indicator that a special camera mode is switched on in the          Acumatica mobile application. In this mode, the following enhancements of the image          captured by the camera are preformed automatically: The image is cropped by the bounding box of the detected edges. The image distortion is removed. The image is converted into black and white. The contrast of the image is maximized. Name The identifier of the attachments, as found in the WSDL schema. MaxFileSize The maximum size of an attached file. MaxImageHeight The maximum height of an attached image (in pixels). MaxImageWidth The maximum width of an attached image (in pixels). ]]></column>
		</row>
		<row PageID="e1ea3a0e-8123-4fbe-bcfe-64a8ab00c2bb" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="44f88561-c2f4-b7b5-4d77-d38afa195e72" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The <tt>sm:Attributes</tt> tag has the following attributes.[anchor|#_c6108988-9df1-47d6-884c-e5100f303a18]
{| class="checklist" | width="100%" 
|- 
!width="25%" ! Attribute
!width="75%" ! Description
|- 
| <tt>From</tt>
| The name of the data view for the grid that contains the entity attributes.
|- 
| <tt>FormPriority</tt>
| The priority value that defines the position of the entity attributes on the screen.
|- 
| <tt>Name</tt>
| The identifier of the attributes, as found in the WSDL schema.
|}{br}

If the <tt>sm:Attributes</tt> tag is used to map a grid of Acumatica ERP to a form view that displays key-value pairs, you should also use the following attributes in this tag.[anchor|#_80fd62db-f2ef-4b81-8a81-98084f1dde1b]
{| class="checklist" | width="100%" 
|- 
!width="25%" ! Attribute
!width="75%" ! Description
|- 
| <tt>IDField</tt>
| The identifier of the grid field, as found in the WSDL schema, that specifies the key field for the key-value pairs. By default, the value is ''AttributeID''.
|- 
| <tt>IDValue</tt>
| The identifier of the grid field, as found in the WSDL schema, that specifies the value field for the key-value pairs. By default, the value is ''Value''.
|- 
| <tt>OrderField</tt>
| Optional. The grid field identifier, as found in the WSDL schema, that is used for sorting rows in the grid to display in the form view. By default, the value is ''Order''.
|}
==Related Articles==
*[HelpRoot_Dev_Mobile\MOBILE_Ref_Tags|XML Tags]]]></column>
			<column name="PlainText"><![CDATA[<sm:Attributes> The  sm:Attributes  tag has the following attributes. Attribute Description From The name of the data view for the grid that contains the entity                 attributes. FormPriority The priority value that defines the position of the entity attributes on the                 screen. Name The identifier of the attributes, as found in the WSDL schema. If the  sm:Attributes  tag is used to map a grid of  Acumatica ERP to a form view that displays key-value pairs, you should also use the following attributes       in this tag. Attribute Description IDField The identifier of the grid field, as found in the WSDL schema, that specifies                 the key field for the key-value pairs. By default, the value is                  AttributeID . IDValue The identifier of the grid field, as found in the WSDL schema, that specifies                 the value field for the key-value pairs. By default, the value is                  Value . OrderField Optional. The grid field identifier, as found in the WSDL schema, that is used                 for sorting rows in the grid to display in the form view. By default, the value is                    Order . ]]></column>
		</row>
		<row PageID="b6ab20f1-feff-4286-b429-1c299a19bf82" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="b4632251-7aac-6376-b41f-9f4daac8dade" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The <tt>sm:Container</tt> tag has the following attributes.[anchor|#_9ac1f27d-3be2-4d9a-8b3c-121137c8a9a1]
{| class="checklist" | width="100%" 
|- 
!width="25%" ! Attribute
!width="75%" ! Description
|- 
| <tt>AttachmentsControlPriority</tt>
| The priority value that defines the position of the attachments in the list.
|- 
| <tt>Attributes</tt>
| An indicator of whether that this container holds entity attributes. If the indicator value is ''true'', you should not specify the items of the container, because the container configuration is generated dynamically.
|- 
| <tt>ContainerActionsToExpand</tt>
| The number of actions with the <tt>Context</tt> attribute set to <tt>Container</tt> to be visible in the toolbar on the list form. The default value depends on the platform.
|- 
| <tt>DisplayName</tt>
| The name of the container on the UI.
|- 
| <tt>FieldsToShow</tt>
| The number of fields to display in the list.
|- 
| <tt>FormActionsToExpand</tt>
| The number of actions with the <tt>Context</tt> attribute set to <tt>Record</tt> to be visible in the toolbar on the editing form. The default value depends on the platform.
|- 
| <tt>ListActionsToExpand</tt>
| The number of actions with the <tt>Context</tt> attribute set to <tt>Selection</tt> or <tt>List</tt> to be visible in the toolbar on the list form when the multiple selection of records is activated. The default value depends on the platform.
|- 
| <tt>Name</tt>
| The identifier of the container, as found in the WSDL schema.
|- 
| <tt>Type</tt>
| An optional attribute that specifies the type of the container. The only possible value is ''SelectionActionList'', which is used for an action with the <tt>Context</tt> attribute set to ''List''. See [HelpRoot_Dev_Mobile\MOBILE_sm_Action|&lt;sm:Action&gt;] for details.
|- 
| <tt>Visible</tt>
| An indicator of whether the link to the container is visible on the editing form. This attribute can be applied to a secondary container. By default, the value is ''true''.
|}
==Related Articles==
*[HelpRoot_Dev_Mobile\MOBILE_Ref_Tags|XML Tags]]]></column>
			<column name="PlainText"><![CDATA[<sm:Container> The  sm:Container  tag has the following attributes. Attribute Description AttachmentsControlPriority The priority value that defines the position of the attachments in the                 list. Attributes An indicator of whether that this container holds entity attributes. If the                 indicator value is  true , you should not specify the items of the container,                 because the container configuration is generated dynamically. ContainerActionsToExpand The number of actions with the  Context  attribute set to                    Container  to be visible in the toolbar on the list form. The                 default value depends on the platform. DisplayName The name of the container on the UI. FieldsToShow The number of fields to display in the list. FormActionsToExpand The number of actions with the  Context  attribute set to                    Record  to be visible in the toolbar on the editing form. The                 default value depends on the platform. ListActionsToExpand The number of actions with the  Context  attribute set to                    Selection  or  List  to be visible in the                 toolbar on the list form when the multiple selection of records is activated. The                 default value depends on the platform. Name The identifier of the container, as found in the WSDL schema. Type An optional attribute that specifies the type of the container. The only                 possible value is  SelectionActionList , which is used for an action with the                    Context  attribute set to  List . See  &lt;sm:Action&gt; for                 details. Visible An indicator of whether the link to the container is visible on the editing                 form. This attribute can be applied to a secondary container. By default, the value                 is  true . ]]></column>
		</row>
		<row PageID="baf57a09-5bc3-424e-ae6b-fd2f9cde2c81" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="9f3b8d76-0fa3-f06e-e1da-08ad3f75c7bb" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The <tt>sm:ContainerLink</tt> tag has the following attributes.[anchor|#_5168d669-1fa8-4e02-9752-7740a4261a27]
{| class="checklist" | width="100%" 
|- 
!width="25%" ! Attribute
!width="75%" ! Description
|- 
| <tt>Container</tt>
| The name that is the link to the container. The name is specified in the <tt>Name</tt> attribute of the <tt>sm:Container</tt> tag for the container.
|- 
| <tt>Control</tt>
| The type of control, which is one of the following values:[anchor|#_b3441658-f08a-440a-af43-4125307877f2]
*''ListItem'': An indicator that the link to the container is displayed among the form fields according to the value defined in the <tt>Priority</tt> attribute of this tag.
*''Button'': An indicator that the link to the container is displayed in the action panel according to the value defined in the <tt>Priority</tt> attribute of this tag.

|- 
| <tt>Icon</tt>
| The name of the image that is used to display the link when the <tt>Control</tt> attribute is set to ''Button'' and the link is displayed in the action panel in the UI. This attribute is optional. If this attribute is not specified for a link, it is displayed in the UI without an icon. See the possible values and the corresponding images for the <tt>Icon</tt> attribute in [HelpRoot_Dev_Mobile\MOBILE_Ref_Icons|Icons].
|- 
| <tt>Name</tt>
| The identifier of the link to the container, as found in the WSDL schema.
|- 
| <tt>Priority</tt>
| The priority value that defines the position of the link in the enclosing container on the form.
|- 
| <tt>ValueField</tt>
| The name of the field whose value is used as the link text. The field must be declared in the container.
|- 
| <tt>Weight</tt>
| The value that is used to set the width of the link within the UI element line defined by the [HelpRoot_Dev_Mobile\MOBILE_sm_Layout|&lt;sm:Layout&gt;] tag with the <tt>Template</tt> attribute set to ''Inline''. The default value is ''1''.
|}
==Related Articles==
*[HelpRoot_Dev_Mobile\MOBILE_Ref_Tags|XML Tags]]]></column>
			<column name="PlainText"><![CDATA[<sm:ContainerLink> The  sm:ContainerLink  tag has the following attributes. Attribute Description Container The name that is the link to the container. The name is specified in the                      Name  attribute of the  sm:Container  tag for                   the container. Control The type of control, which is one of the following values: ListItem : An indicator that the link to the container is displayed                       among the form fields according to the value defined in the                          Priority  attribute of this tag. Button : An indicator that the link to the container is displayed in                       the action panel according to the value defined in the                          Priority  attribute of this tag. Icon The name of the image that is used to display the link when the                      Control  attribute is set to  Button  and the link is                   displayed in the action panel in the UI. This attribute is optional. If this                   attribute is not specified for a link, it is displayed in the UI without an icon.                   See the possible values and the corresponding images for the                      Icon  attribute in  Icons. Name The identifier of the link to the container, as found in the WSDL                   schema. Priority The priority value that defines the position of the link in the enclosing                   container on the form. ValueField The name of the field whose value is used as the link text. The field must be                   declared in the container. Weight The value that is used to set the width of the link within the UI element                   line defined by the  &lt;sm:Layout&gt; tag with the                      Template  attribute set to  Inline . The default value is                      1 . ]]></column>
		</row>
		<row PageID="1bfb3bcd-9def-44e7-a7b0-6c524e951c09" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="300e66ca-7064-0d77-40a8-8307fb6f1ee7" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The <tt>sm:Field</tt> tag has the following attributes.[anchor|#_409b70e3-1b83-4a6d-a631-ca17ca427e2e]
{| class="checklist" | width="100%" 
|- 
!width="25%" ! Attribute
!width="75%" ! Description
|- 
| <tt>Container</tt>
| The name of the container object of the field, as it is specified in the WSDL schema. This attribute is specified if the field from another container is used in the container.
|- 
| <tt>DisplayName</tt>
| The name for the field, which by default is automatically set by the system. However, you can change it.
|- 
| <tt>ForceIsDisabled</tt>
| An indicator of whether the field will be unavailable on the editing form regardless of the server logic. By default, the field availability depends on the server logic.
|- 
| <tt>ForceIsVisible</tt>
| An indicator of whether the field is visible on the editing form regardless of the server logic. By default, the field visibility depends on the server logic.
|- 
| <tt>ForceRequired</tt>
| An indicator of whether the field is mandatory and must be filled on the screen. If its value is ''true'', the field is mandatory. If its value is ''false'', the field is not mandatory. If the attribute is not specified, the need to fill the field is determined by the data obtained from the server.
|- 
| <tt>ForceType</tt>
| The field type that is used by the application instead of the original field type. The only value of this attribute is ''String'', which is an indicator of whether the field is visible on the editing form regardless of the server logic. By default, the field visibility depends on the server logic.
|- 
| <tt>FormPriority</tt>
| The priority value that defines the position of the field on the form.
|- 
| <tt>ListDisplayFormat</tt>
| The format that is used to display the field in the list. The value can be one of the following:[anchor|#_5f92958c-9a84-4c1d-84e1-e97d1a643468]
*''Value'': An indicator that the field is represented only by the field value in the list.
*''CaptionValue'': An indicator that the field is represented by the caption and the value in the list.

|- 
| <tt>ListPriority</tt>
| The priority value that defines the position of the field in the list.
|- 
| <tt>Name</tt>
| The field identifier, as found in the WSDL schema.
|- 
| <tt>PickerType</tt>
| (Applicable to a selector field.) The processing type of the selector field value. The value can be one of the following:[anchor|#_6b1cb0af-160e-4519-9064-7cfed442493f]
*''Attached'': An indicator that the selector is displayed as a pop-up dialog.
*''Detached'': An indicator that the selector is displayed as a separate screen.
*''Searchable'': An indicator that the mobile app should display the Search button (
*:[image:StudioDeveloperGuide/Images/ic_lens_36x36.png|15px]) right of the field control. If the user enters a text fragment in the control and clicks the button, the app sends to the Acumatica ERP server a query to search the records, which contain the specified fragment in the field value. After the response, the mobile app opens the selector screen and displays the list of the field values obtained from the server. The user uses the list to select a value for the selector control.

|- 
| <tt>SelectorDisplayFormat</tt>
| The selector field format that is used to display the field value. The value can be one of the following:[anchor|#_8f23632f-d1ff-4998-8b59-caf0a8982188]
*''Key'': An indicator that the value is represented by the key field of the selector.
*''Description'': An indicator that the value is represented by the value field of the selector. This is the default value of the <tt>SelectorDisplayFormat</tt> attribute.
*''KeyDescription'': An indicator that the value is represented by the combination of the key and value fields of the selector.

|- 
| <tt>Special</tt>
| 
The field type that is used by the mobile app for a special purpose. The value can be one of the following:[anchor|#_a5b28218-ff8d-4dc7-9882-bdae386e9329]
*''AllowEdit'': (Applicable to a selector field.) An indicator that the app should display the Edit button (
*:[image:StudioDeveloperGuide/Images/ic_mode_edit_white_24dp.png|15px]) right of the field control. If the user clicks the button, the mobile app tries to open the data entry form for the business entity (such as a customer or sales order), selected in the field. The button appears if the following conditions are met:
**In the Acumatica ERP form, the edit button is displayed for the corresponding field control.
**In the mobile app, the data field is not empty and contains an ID that can be used to select the appropriate data record of the business entity.
*''EmailAddress'': An indicator that the app should treat this field as an input box for an email address. It enables auto-complete for email addresses, and the system displays a list of possible completions as the user types an email address for a new email activity by using the on-screen keyboard. The suggested completions are taken from the system database or from the device&rsquo;s address book. The value is not supported in iOS apps.
*''EmailSend'': An indicator that the app should display the Send Email button (
*:[image:StudioDeveloperGuide/Images/ic_email_white_24dp.png|15px]) right of the field control. If the user clicks the button, the mobile app forces the system of the mobile device to create a new email message and use the field value as the destination address for the message. In iOS. the Mail app is opened.
*''PhoneCall'': An indicator that the app should display the Phone Call button (
*:[image:StudioDeveloperGuide/Images/ic_call_white_24dp.png|15px]) right of the field control. If the user clicks the button, the mobile app forces the system of the mobile device to open an application for voice calls with the phone number specified in the field control.
*''GpsCoords'': An indicator that the app should get a user location and fill the field before sending to the Acumatica ERP server the data record, which is modified on the screen. If the field value is not defined, an action mapped on the screen cannot be executed; for example, the user cannot save a data record, which contains an empty field with the <tt>Special</tt> attribute set to ''GpsCoords''.
*:The location is reported as a string in the following format: ''&lt;Latitude&gt;:&lt;Longitude&gt;'', for instance, ''65.61295166666667:-20.137938333333334''.
*:You can forcibly hide the field by setting the <tt>ForceIsVisible</tt> attribute to ''false'', so it is not shown in the user interface, or you can make the field unavailable for editing by setting the <tt>ForceIsDisabled</tt> attribute to ''true''. If the <tt>ForceIsVisible</tt> and <tt>ForceIsDisabled</tt> attributes are not specified, then an appropriate field state will be defined by the Acumatica ERP server.
*''UrlOpen'': An indicator that the app should display the Open URL button (
*:[image:StudioDeveloperGuide/Images/ic_web_white_24dp.png|15px]) right of the field control. If the user clicks the button, the mobile app forces the system of the mobile device to launch a default browser (Safari in iOS) for the external URL specified in the field control.

The following screenshot shows an example of using the <tt>Special</tt> attribute for fields mapped on a screen in the mobile app.[anchor|#_45ea1f0e-22e7-4728-ae21-286947965de6][anchor|#_0a5e60d3-95f2-4b02-9564-a95cc6da5e42][image:StudioDeveloperGuide/Images/MOBILE_smField_Special_01.png|popup|Viewing the fields with the <tt>Special</tt> attribute in the mobile app|200px]
|- 
| <tt>TextType</tt>
| The type of text to be used for the field value. The value can be one of the following:[anchor|#_c99a807e-1193-4ead-a1dd-d61a218ed660]
*''HTML'': An indicator that the text can be HTML markup.
*''PlainSingleLine'': An indicator that the text is displayed on a single line.
*''PlainMultiLine'': An indicator that the text is displayed on multiple lines. The look of the input control depends on the platform.

|- 
| <tt>Weight</tt>
| The value that is used to set the width of the field within the UI element line defined by the [HelpRoot_Dev_Mobile\MOBILE_sm_Layout|&lt;sm:Layout&gt;] tag with the <tt>Template</tt> attribute set to ''Inline''. The default value is ''1''.
In the following example, the {{TotalAmount}} field takes 2/3 of the total width, and the {{Currency}} field takes 1/3.{{{{&lt;sm:Layout Template="Inline"&gt;
    &lt;sm:Field Container="ReceiptDetailsExpenseDetails" 
      Name="TotalAmount" Weight="2"/&gt;
    &lt;sm:Field Container="ReceiptDetailsExpenseDetails" 
      Name="Currency" PickerType="Attached"/&gt;
&lt;/sm:Layout&gt;
}}}}
|}
==Related Articles==
*[HelpRoot_Dev_Mobile\MOBILE_Ref_Tags|XML Tags]]]></column>
			<column name="PlainText"><![CDATA[<sm:Field> The  sm:Field  tag has the following attributes. Attribute Description Container The name of the container object of the field, as it is specified in the WSDL                   schema. This attribute is specified if the field from another container is used in                   the container. DisplayName The name for the field, which by default is automatically set by the system.                   However, you can change it. ForceIsDisabled An indicator of whether the field will be unavailable on the editing form                   regardless of the server logic. By default, the field availability depends on the                   server logic. ForceIsVisible An indicator of whether the field is visible on the editing form regardless                   of the server logic. By default, the field visibility depends on the server                   logic. ForceRequired An indicator of whether the field is mandatory and must be filled on the                   screen. If its value is  true , the field is mandatory. If its value is                      false , the field is not mandatory. If the attribute is not specified, the                   need to fill the field is determined by the data obtained from the server. ForceType The field type that is used by the application instead of the original field                   type. The only value of this attribute is  String , which is an indicator of                   whether the field is visible on the editing form regardless of the server logic.                   By default, the field visibility depends on the server logic. FormPriority The priority value that defines the position of the field on the                   form. ListDisplayFormat The format that is used to display the field in the list. The value can be                   one of the following: Value : An indicator that the field is represented only by the field                       value in the list. CaptionValue : An indicator that the field is represented by the                       caption and the value in the list. ListPriority The priority value that defines the position of the field in the                   list. Name The field identifier, as found in the WSDL schema. PickerType (Applicable to a selector field.) The processing type of the selector field                   value. The value can be one of the following: Attached : An indicator that the selector is displayed as a pop-up                       dialog. Detached : An indicator that the selector is displayed as a separate                       screen. Searchable : An indicator that the mobile app should display the                       Search button ( ) right of the field control. If                       the user enters a text fragment in the control and clicks the button, the app                       sends to the  Acumatica ERP server a query to search the records, which contain the specified fragment                       in the field value. After the response, the mobile app opens the selector                       screen and displays the list of the field values obtained from the server. The                       user uses the list to select a value for the selector control. SelectorDisplayFormat The selector field format that is used to display the field value. The value                   can be one of the following: Key : An indicator that the value is represented by the key field of                       the selector. Description : An indicator that the value is represented by the value                       field of the selector. This is the default value of the                          SelectorDisplayFormat  attribute. KeyDescription : An indicator that the value is represented by the                       combination of the key and value fields of the selector. Special The field type that is used by the mobile app for a special purpose. The value                     can be one of the following: AllowEdit : (Applicable to a selector field.) An indicator that the                       app should display the Edit button ( ) right of the field control. If                       the user clicks the button, the mobile app tries to open the data entry form                       for the business entity (such as a customer or sales order), selected in the                       field. The button appears if the following conditions are met: In the  Acumatica ERP form, the edit button is displayed for the corresponding field                           control. In the mobile app, the data field is not empty and contains an ID that                           can be used to select the appropriate data record of the business                           entity. EmailAddress : An indicator that the app should treat this field as an                       input box for an email address. It enables auto-complete for email addresses,                       and the system displays a list of possible completions as the user types an                       email address for a new email activity by using the on-screen keyboard. The                       suggested completions are taken from the system database or from the device's                       address book. The value is not supported in iOS apps. EmailSend : An indicator that the app should display the Send Email                       button ( ) right of the field control. If                       the user clicks the button, the mobile app forces the system of the mobile                       device to create a new email message and use the field value as the                       destination address for the message. In iOS. the Mail app is opened. PhoneCall : An indicator that the app should display the Phone Call                       button ( ) right of the field control. If                       the user clicks the button, the mobile app forces the system of the mobile                       device to open an application for voice calls with the phone number specified                       in the field control. GpsCoords : An indicator that the app should get a user location and                       fill the field before sending to the  Acumatica ERP server the data record, which is modified on the screen. If the field value                       is not defined, an action mapped on the screen cannot be executed; for                       example, the user cannot save a data record, which contains an empty field                       with the  Special  attribute set to  GpsCoords . The                         location is reported as a string in the following format:                            <Latitude>:<Longitude> , for instance,                            65.61295166666667:-20.137938333333334 . You can forcibly hide                         the field by setting the  ForceIsVisible  attribute to                            false , so it is not shown in the user interface, or you can make                         the field unavailable for editing by setting the                            ForceIsDisabled  attribute to  true . If the                            ForceIsVisible  and  ForceIsDisabled                          attributes are not specified, then an appropriate field state will be                         defined by the  Acumatica ERP server. UrlOpen : An indicator that the app should display the Open URL button                         ( ) right of the field control. If                       the user clicks the button, the mobile app forces the system of the mobile                       device to launch a default browser (Safari in iOS) for the external URL                       specified in the field control. The following screenshot shows an example of using the                        Special  attribute for fields mapped on a screen in the                     mobile app. Viewing the fields with the  Special  attribute in the                         mobile app TextType The type of text to be used for the field value. The value can be one of the                     following: HTML : An indicator that the text can be HTML markup. PlainSingleLine : An indicator that the text is displayed on a single                       line. PlainMultiLine : An indicator that the text is displayed on multiple                       lines. The look of the input control depends on the platform. Weight The value that is used to set the width of the field within the UI element                   line defined by the  &lt;sm:Layout&gt; tag with the                      Template  attribute set to  Inline . The default value is                      1 . In the following example, the  TotalAmount  field                     takes 2/3 of the total width, and the  Currency  field takes                     1/3. <sm:Layout Template="Inline">
    <sm:Field Container="ReceiptDetailsExpenseDetails" 
      Name="TotalAmount" Weight="2"/>
    <sm:Field Container="ReceiptDetailsExpenseDetails" 
      Name="Currency" PickerType="Attached"/>
</sm:Layout> ]]></column>
		</row>
		<row PageID="6ddd293c-bf29-4a0c-a6ad-49fa2c211fb5" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="b4715959-0a9c-f32d-b5e1-d96f93d0e69c" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The <tt>sm:Folder</tt> tag has the following attributes.[anchor|#_7383dcea-cc65-4d7d-9dfa-1fcbcbcbc301]
{| class="checklist" | width="100%" 
|- 
!width="25%" ! Attribute
!width="75%" ! Description
|- 
| <tt>DisplayName</tt>
| The name of the folder in the UI.
|- 
| <tt>Icon</tt>
| The name of an image that is used to display the folder icon on the main menu (and on the sidebar menu, if specified) of a mobile application. This attribute is optional; if this attribute is not specified for a folder, the folder is displayed in the UI without an icon. See the possible values and the corresponding images for the <tt>Icon</tt> attribute in [HelpRoot_Dev_Mobile\MOBILE_Ref_Icons|Icons].
|- 
| <tt>IsDefaultFavorite</tt>
| An indicator of whether a link for the folder is added to the sidebar menu as a favorite folder. If the attribute is set to ''true'', a link is added to the sidebar menu. By default, this attribute is set to ''false''.
|- 
| <tt>Name</tt>
| The identifier of the folder, as found in the WSDL schema.
|- 
| <tt>Type</tt>
| The type of the folder (that is, the way it is displayed and used), which is one of the following values:[anchor|#_5e47c246-182a-4483-9159-cec4a5dc1411]
*''ListFolder'': An indicator that the folder contents are displayed as icons.
*''HubFolder'': An indicator that the folder contents are displayed as pages that the user navigates by swiping.

|}
==Related Articles==
*[HelpRoot_Dev_Mobile\MOBILE_Ref_Tags|XML Tags]]]></column>
			<column name="PlainText"><![CDATA[<sm:Folder> The  sm:Folder  tag has the following attributes. Attribute Description DisplayName The name of the folder in the UI. Icon The name of an image that is used to display the folder icon on the main menu (and on          the sidebar menu, if specified) of a mobile application. This attribute is optional; if          this attribute is not specified for a folder, the folder is displayed in the UI without an          icon. See the possible values and the corresponding images for the  Icon           attribute in  Icons. IsDefaultFavorite An indicator of whether a link for the folder is added to the sidebar menu as a          favorite folder. If the attribute is set to  true , a link is added to the sidebar          menu. By default, this attribute is set to  false . Name The identifier of the folder, as found in the WSDL schema. Type The type of the folder (that is, the way it is displayed and used), which is one of          the following values: ListFolder : An indicator that the folder contents are displayed as icons. HubFolder : An indicator that the folder contents are displayed as pages that            the user navigates by swiping. ]]></column>
		</row>
		<row PageID="649365de-8835-44c9-b32c-433fc2f59b7c" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="35a5a76d-5f34-e3e4-a94d-292f7068fcec" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The <tt>sm:Group</tt> tag is used to group multiple UI elements on a screen of the mobile app. The tag can contain the following types of nested tags:[anchor|#_c51a6141-aae2-4f6e-a521-33b9c1d56e27]
*[HelpRoot_Dev_Mobile\MOBILE_sm_Field|&lt;sm:Field&gt;]
*[HelpRoot_Dev_Mobile\MOBILE_sm_Layout|&lt;sm:Layout&gt;]
*[HelpRoot_Dev_Mobile\MOBILE_sm_Attributes|&lt;sm:Attributes&gt;]
*[HelpRoot_Dev_Mobile\MOBILE_sm_RecordActionLink|&lt;sm:RecordActionLink&gt;]

For details about the relationships between tag types in the mobile site map, see the diagram in [HelpRoot_Dev_Mobile\MOBILE_Ref_Tags|XML Tags].
==Attributes==
The <tt>sm:Group</tt> tag has the following attributes.[anchor|#_7e5df0e6-6898-4d22-b9af-ed63c98d11ae]
{| class="checklist" | width="100%" 
|- 
!width="25%" ! Attribute
!width="75%" ! Description
|- 
| <tt>Collapsable</tt>
| 
An indicator of whether this group may be collapsed or expanded. If its value is ''true'', the group can be collapsed or expanded, and you can specify whether the group is collapsed when the screen is opened by using the <tt>Collapsed</tt> attribute. If the value is ''false'', the group is expanded and cannot be collapsed.{br}

If the <tt>Template</tt> attribute is set to ''ExpansionPanel'', the value of the attribute is ignored. Expansion panels are always collapsible.
|- 
| <tt>Collapsed</tt>
| 
An indicator of whether this group is collapsed by default. If its value is ''true'', the group is collapsed when the screen is opened. If the value is ''false'', the group is expanded when the screen is opened. {br}

If <tt>Template=Group</tt> (or the <tt>Template</tt> attribute is not set) and <tt>Collapsable=false</tt>, the value of the attribute is ignored. {br}

For expansion panels (<tt>Template=ExpansionPanel</tt>) and collapsible groups (<tt>Template=Group</tt> and <tt>Collapsable=true</tt>), if the value of the attribute is not specified, the group is collapsed when the screen is opened.
|- 
| <tt>DisplayName</tt>
| 
The name of the group in the UI. {br}

If the <tt>Template</tt> attribute is set to ''ExpansionPanel'', the value of the attribute is ignored. An expansion panel does not have the name of the group in the UI.
|- 
| <tt>Field</tt>
| 
Obsolete. The name of the field whose value is displayed when the group is collapsed.{br}

The value of this field is ignored. Expansion panels (<tt>Template=ExpansionPanel</tt>) always display the first field (<tt>sm:field</tt>) or layout definition (<tt>sm:layout</tt>) in the group. Other groups (<tt>Template=Group</tt>) do not display any fields when the group is collapsed.
|- 
| <tt>FormPriority</tt>
| The priority value that defines the position of the group on the screen.
|- 
| <tt>Name</tt>
| The name of the group. The attribute is optional; however, we recommend that you specify its value because the value is used as the identifier of the group and the system tracks changes in the mobile site map by using the value of this attribute. 
|- 
| <tt>Template</tt>
| 
The template that is used for the group. The following values can be used for this attribute:[anchor|#_da3a1086-ce62-490c-8d5a-8a1f08b0ba70]
*''ExpansionPanel'': An expansion panel, which can be collapsed or expanded. The collapsed expansion panel displays only the first field (<tt>sm:field</tt>) or layout definition (<tt>sm:layout</tt>) in the group. Expansion panels does not have the name of the group in the UI. You can configure how the expansion panel is displayed by using the <tt>Collapsed</tt> and <tt>FormPriority</tt> attributes of the tag.
*''Group'': A group of UI elements. You can configure how the group is displayed by using the <tt>DisplayName</tt>, <tt>Collapsable</tt>, <tt>Collapsed</tt>, and <tt>FormPriority</tt> attributes of the tag.

If the value of the attribute is not specified, the ''Group'' template is used.
|}
==Related Articles==
*[HelpRoot_Dev_Mobile\MOBILE_Ref_Tags|XML Tags]]]></column>
			<column name="PlainText"><![CDATA[<sm:Group> The  sm:Group  tag is used to group multiple UI elements on a                     screen of the mobile app. The tag can contain the following types of nested                     tags: &lt;sm:Field&gt;&lt;sm:Layout&gt;&lt;sm:Attributes&gt;&lt;sm:RecordActionLink&gt;For details about the relationships between tag types in the mobile site map, see                     the diagram in  XML Tags. Attributes The  sm:Group  tag has the following attributes. Attribute Description Collapsable An indicator of whether this group may be collapsed                                                   or expanded. If its value is  true , the                                                   group can be collapsed or expanded, and you can                                                   specify whether the group is collapsed when the                                                   screen is opened by using the                                                    Collapsed  attribute. If the                                                   value is  false , the group is expanded and                                                   cannot be collapsed. If the  Template  attribute is set                                                   to  ExpansionPanel , the value of the                                                   attribute is ignored. Expansion panels are always                                                   collapsible. Collapsed An indicator of whether this group is collapsed by                                                   default. If its value is  true , the group is                                                   collapsed when the screen is opened. If the value                                                   is  false , the group is expanded when the                                                   screen is opened.  If  Template=Group  (or the                                                    Template  attribute is not set)                                                   and  Collapsable=false , the                                                   value of the attribute is ignored.  For expansion panels                                                   ( Template=ExpansionPanel ) and                                                   collapsible groups                                                   ( Template=Group  and                                                    Collapsable=true ), if the value                                                   of the attribute is not specified, the group is                                                   collapsed when the screen is opened. DisplayName The name of the group in the UI.  If the  Template  attribute is set                                                   to  ExpansionPanel , the value of the                                                   attribute is ignored. An expansion panel does not                                                   have the name of the group in the UI. Field Obsolete. The name of the field whose value is                                                   displayed when the group is collapsed. The value of this field is ignored. Expansion panels                                                   ( Template=ExpansionPanel )                                                   always display the first field                                                   ( sm:field ) or layout definition                                                   ( sm:layout ) in the group. Other                                                   groups ( Template=Group ) do not                                                   display any fields when the group is                                                   collapsed. FormPriority The priority value that defines the position of the                                              group on the screen. Name The name of the group. The attribute is optional;                                              however, we recommend that you specify its value                                              because the value is used as the identifier of the                                              group and the system tracks changes in the mobile site                                              map by using the value of this attribute.  Template The template that is used for the group. The                                                   following values can be used for this                                                   attribute: ExpansionPanel : An expansion panel,                                                   which can be collapsed or expanded. The collapsed                                                   expansion panel displays only the first field                                                   ( sm:field ) or layout definition                                                   ( sm:layout ) in the group.                                                   Expansion panels does not have the name of the                                                   group in the UI. You can configure how the                                                   expansion panel is displayed by using the                                                    Collapsed  and                                                    FormPriority  attributes of the                                                   tag. Group : A group of UI elements. You can                                                   configure how the group is displayed by using the                                                    DisplayName ,                                                    Collapsable ,                                                    Collapsed , and                                                    FormPriority  attributes of the                                                   tag. If the value of the attribute is not specified, the                                                    Group  template is used. ]]></column>
		</row>
		<row PageID="57447577-4dc0-4bdb-bea4-7a13deb72ea2" Language="en-US" PageRevisionID="1" Content="&#xA;The &lt;tt&gt;sm:Include&lt;/tt&gt; tag has the following attribute.[anchor|#_00d3896b-eb04-4967-b777-39b67787e374]&#xA;{| class=&quot;checklist&quot; | width=&quot;100%&quot; &#xA;|- &#xA;!width=&quot;25%&quot; ! Attribute&#xA;!width=&quot;75%&quot; ! Description&#xA;|- &#xA;| &lt;tt&gt;filename&lt;/tt&gt;&#xA;| The namepath of the file that is included in the mobile site map. You can include in the mobile site map a metadata file located in any folder within the website folder. However, we recommend that you place an included file in the &lt;tt&gt;\App&amp;#95;Data\Mobile\includes&lt;/tt&gt; folder of the website.&#xA;|}&#xA;==Related Articles==&#xA;*[HelpRoot_Dev_Mobile\MOBILE_Ref_Tags|XML Tags]" PlainText="&lt;sm:Include&gt; The  sm:Include  tag has the following attribute. Attribute Description filename The namepath of the file that is included in the mobile site map. You can include in         the mobile site map a metadata file located in any folder within the website folder.         However, we recommend that you place an included file in the           \App_Data\Mobile\includes  folder of the website. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="0398f61f-0d8b-98a8-c3ac-ef5530fb22d7" RecordSourceID="22377" />
		<row PageID="cac63c59-8ab4-405d-b071-9ec5ed35e323" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="2a8ea5ae-c8a3-5537-e6d9-856ca20f6741" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The <tt>sm:Layout</tt> tag is used to arrange multiple UI elements on a screen of the mobile app. The tag can contain the following types of nested tags:[anchor|#_ad0d6a39-2bc6-4dff-b3dc-6849a72b1b22]
*[HelpRoot_Dev_Mobile\MOBILE_sm_Field|&lt;sm:Field&gt;]
*[HelpRoot_Dev_Mobile\MOBILE_sm_ContainerLink|&lt;sm:ContainerLink&gt;]
*[HelpRoot_Dev_Mobile\MOBILE_sm_RecordActionLink|&lt;sm:RecordActionLink&gt;]
*&lt;sm:Layout&gt;
*:((({S:Warn}The <tt>sm:Layout</tt> tags with the '''<tt>Template</tt>''' attribute set to ''HeaderSimple'' or ''HeaderFirstAttachment'' can include nested <tt>sm:Layout</tt> tags with {{Template="Inline"}}. The <tt>sm:Layout</tt> tags for which the '''<tt>Template</tt>''' attribute is ''Inline'' cannot include any nested <tt>sm:Layout</tt> tags. 
)))

For details about the relationships between tag types in the mobile site map, see the diagram in [HelpRoot_Dev_Mobile\MOBILE_Ref_Tags|XML Tags].
==Attributes==
The <tt>sm:Layout</tt> tag has the following attributes.[anchor|#_f5397edd-1b5b-4c20-804b-df224e8a5941]
{| class="checklist" | width="100%" 
|- 
!width="25%" ! Attribute
!width="75%" ! Description
|- 
| <tt>Name</tt>
| The identifier of the line layout, as found in the WSDL schema.
|- 
| <tt>Template</tt>
| The template that is used to define the layout. The following values can be used for this attribute:[anchor|#_44be18e1-3b19-4b52-92e6-2de7b90a03ee]
*''HeaderFirstAttachment'': An indicator that the mobile app should arrange the UI elements, which are mapped by the nested tags, in a group-like header container with an attachment icon on the left. If you click the attachment icon, you can take a photo and attach the photo to the screen of the mobile app. The camera behavior is affected by the attributes of the <tt>sm:attachments</tt> tag. If the screen of the mobile app already has attachments, the first attachment thumbnail is shown instead of the attachment icon. 
*:The tag with the attribute set to ''HeaderFirstAttachment'' can include nested <tt>sm:Layout</tt> tags with {{Template="Inline"}}. The tags with the attribute set to ''HeaderFirstAttachment'' cannot be nested in other <tt>sm:Layout</tt> tags and can be nested only in <tt>sm:Container</tt> tags.
*''HeaderSimple'': An indicator that the mobile app should arrange the UI elements, which are mapped by the nested tags, in a group-like header container. 
*:The tag with the attribute set to ''HeaderSimple'' can include nested <tt>sm:Layout</tt> tags with {{Template="Inline"}}. The tag with the attribute set to ''HeaderSimple'' cannot be nested in other <tt>sm:Layout</tt> tags and can be nested only in <tt>sm:Container</tt> tags.
*''Inline'': An indicator that the mobile app should arrange UI elements, which are mapped by the nested tags, in a line by using the <tt>Weight</tt> attributes specified for these elements. If the <tt>Weight</tt> attribute is not defined for a nested tag, the mobile app uses ''1'' as the default value. 
*:The tag with the attribute set to ''Inline'' cannot include nested <tt>sm:Layout</tt> tags. The tags with the attribute set to ''Inline'' can be nested in other <tt>sm:Layout</tt> tags.

|}
==Examples==
In the following example, the {{TotalAmount}} field takes 3/6 of the total width, the {{Save}} action link takes 1/6, and the {{Currency}} field takes 2/6.{{{{&lt;sm:Layout Template="Inline"&gt;
    &lt;sm:Field Container="ReceiptDetailsExpenseDetails" Name="TotalAmount" 
        Weight="3"/&gt;
    &lt;sm:RecordActionLink Name="Save"/&gt;
    &lt;sm:Field Container="ReceiptDetailsExpenseDetails" Name="Currency" 
        PickerType="Attached" Weight="2"/&gt;
&lt;/sm:Layout&gt;
}}}}{br}

The following example shows how nested <tt>sm:Layout</tt> tags can be used.{{{{&lt;sm:Layout Name="ReceiptHeader" Template="HeaderSimple"&gt;
    &lt;sm:Layout Name="ReceiptIdLine" Template="Inline"&gt;
        &lt;sm:Field Name="ReceiptID" ForceIsDisabled="true"/&gt;
        &lt;sm:Field Name="Status" ForceIsDisabled="true"/&gt;
    &lt;/sm:Layout&gt;
&lt;/sm:Layout&gt;
}}}}
==Related Articles==
*[HelpRoot_Dev_Mobile\MOBILE_Ref_Tags|XML Tags]]]></column>
			<column name="PlainText"><![CDATA[<sm:Layout> The  sm:Layout  tag is used to arrange multiple UI elements on a screen of     the mobile app. The tag can contain the following types of nested tags: &lt;sm:Field&gt;&lt;sm:ContainerLink&gt;&lt;sm:RecordActionLink&gt;<sm:Layout> The  sm:Layout  tags with the          Template  attribute set to  HeaderSimple  or         HeaderFirstAttachment  can include nested  sm:Layout  tags with         Template="Inline" . The  sm:Layout  tags for which the          Template  attribute is  Inline  cannot include any nested         sm:Layout  tags.  For details about the relationships between tag types in the mobile site map, see the diagram     in  XML Tags. Attributes The  sm:Layout  tag has the following attributes. Attribute Description Name The identifier of the line layout, as found in the WSDL schema. Template The template that is used to define the layout. The following values can be used for          this attribute: HeaderFirstAttachment : An indicator that the mobile app should arrange the UI            elements, which are mapped by the nested tags, in a group-like header container with an            attachment icon on the left. If you click the attachment icon, you can take a photo and            attach the photo to the screen of the mobile app. The camera behavior is affected by the            attributes of the  sm:attachments  tag. If the screen of the mobile app            already has attachments, the first attachment thumbnail is shown instead of the            attachment icon.  The tag with the attribute set to  HeaderFirstAttachment  can             include nested  sm:Layout  tags with              Template="Inline" . The tags with the attribute set to               HeaderFirstAttachment  cannot be nested in other  sm:Layout              tags and can be nested only in  sm:Container  tags. HeaderSimple : An indicator that the mobile app should arrange the UI elements,            which are mapped by the nested tags, in a group-like header container.  The tag with             the attribute set to  HeaderSimple  can include nested  sm:Layout              tags with  Template="Inline" . The tag with the attribute set to               HeaderSimple  cannot be nested in other  sm:Layout  tags and can             be nested only in  sm:Container  tags. Inline : An indicator that the mobile app should arrange UI elements, which are            mapped by the nested tags, in a line by using the  Weight  attributes            specified for these elements. If the  Weight  attribute is not defined            for a nested tag, the mobile app uses  1  as the default value.  The tag with the             attribute set to  Inline  cannot include nested  sm:Layout  tags.             The tags with the attribute set to  Inline  can be nested in other               sm:Layout  tags. Examples In the following example, the  TotalAmount  field takes 3/6 of the total width,     the  Save  action link takes 1/6, and the  Currency  field takes     2/6. <sm:Layout Template="Inline">
    <sm:Field Container="ReceiptDetailsExpenseDetails" Name="TotalAmount" 
        Weight="3"/>
    <sm:RecordActionLink Name="Save"/>
    <sm:Field Container="ReceiptDetailsExpenseDetails" Name="Currency" 
        PickerType="Attached" Weight="2"/>
</sm:Layout> The following example shows how nested  sm:Layout  tags can be     used. <sm:Layout Name="ReceiptHeader" Template="HeaderSimple">
    <sm:Layout Name="ReceiptIdLine" Template="Inline">
        <sm:Field Name="ReceiptID" ForceIsDisabled="true"/>
        <sm:Field Name="Status" ForceIsDisabled="true"/>
    </sm:Layout>
</sm:Layout> ]]></column>
		</row>
		<row PageID="fad8382a-c43a-489a-97e9-3fd45724654c" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="ea83023d-6528-e9b7-509a-ef540db2f2f7" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can use the <tt>sm:RecordActionLink</tt> tag to remove an action from the screen toolbar and put the action among the [HelpRoot_Dev_Mobile\MOBILE_sm_Field|&lt;sm:Field&gt;] tags on a data entry form. The action to which this tag refers must be declared with the same name within the same container by using the [HelpRoot_Dev_Mobile\MOBILE_sm_Action|&lt;sm:Action&gt;] tag.
==Attributes==
The <tt>sm:RecordActionLink</tt> tag has the following attributes.[anchor|#_33d330ba-ad4d-45b2-9172-63cdb0bdedc6]
{| class="checklist" | width="100%" 
|- 
!width="25%" ! Attribute
!width="75%" ! Description
|- 
| <tt>Name</tt>
| The action identifier, as found in the WSDL schema.
|- 
| <tt>Weight</tt>
| The value that is used to set the width of the link within the UI element line defined by the [HelpRoot_Dev_Mobile\MOBILE_sm_Layout|&lt;sm:Layout&gt;] tag with the <tt>Template</tt> attribute set to ''Inline''. The default value is ''1''.
|}
==Example==
The following example shows how to use the <tt>sm:RecordActionLink</tt> tag in the mobile site map.{{{{
&lt;sm:Container ...&gt;
  ...
  &lt;sm:RecordActionLink Name="ViewOnMap"/&gt;
  ...
  &lt;sm:Action Behavior="Void" Context="Record" Name="ViewOnMap" Redirect="true"/&gt;
  ...
&lt;/sm:Container&gt;
}}}}
==Related Articles==
*[HelpRoot_Dev_Mobile\MOBILE_Ref_Tags|XML Tags]]]></column>
			<column name="PlainText"><![CDATA[<sm:RecordActionLink> You can use the  sm:RecordActionLink  tag to remove an action from the         screen toolbar and put the action among the  &lt;sm:Field&gt; tags on a         data entry form. The action to which this tag refers must be declared with the same name         within the same container by using the  &lt;sm:Action&gt; tag. Attributes The  sm:RecordActionLink  tag has the following attributes. Attribute Description Name The action identifier, as found in the WSDL schema. Weight The value that is used to set the width of the link within the UI element                   line defined by the  &lt;sm:Layout&gt; tag with the                      Template  attribute set to  Inline . The default value is                      1 . Example The following example shows how to use the  sm:RecordActionLink  tag in         the mobile site         map. 
<sm:Container ...>
  ...
  <sm:RecordActionLink Name="ViewOnMap"/>
  ...
  <sm:Action Behavior="Void" Context="Record" Name="ViewOnMap" Redirect="true"/>
  ...
</sm:Container> ]]></column>
		</row>
		<row PageID="d32f7de1-4c84-4edc-b2eb-0ce1c9831070" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="7743f820-66de-f7d3-02a4-939ce8b5fc9a" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The <tt>sm:Screen</tt> tag has the following attributes.[anchor|#_8abe5366-d17f-4693-bb82-fa1277b19019]
{| class="checklist" | width="100%" 
|- 
!width="25%" ! Attribute
!width="75%" ! Description
|- 
| <tt>DisplayName</tt>
| The name of the screen on the UI.
|- 
| <tt>ExpandSelector</tt>
| The name of a selector field from the primary container. An Acumatica ERP form can contain a selector control that acts like a filter. For example, the '''Order Type''' selector control on the Sales Orders form (SO301000) works as a filter. If the <tt>ExpandSelector</tt> attribute is specified for a screen, then the mobile application represents the screen as multiple screens, where each screen corresponds to a single value of the referenced selector field.
|- 
| <tt>Icon</tt>
| The name of an image that is used to display the screen icon on the main menu (and on the sidebar menu, if specified) of a mobile application. This attribute is optional. If this attribute is not specified for a screen, the screen is displayed in the UI without an icon. See the possible values and the corresponding images for the <tt>Icon</tt> attribute in [HelpRoot_Dev_Mobile\MOBILE_Ref_Icons|Icons].
|- 
| <tt>Id</tt>
| The screen identifier, such as ''IN201000''. You can find the value to specify there in the screen URL of the corresponding Acumatica ERP form.
|- 
| <tt>OpenAs</tt>
| The display type of the screen. When the screen is opened from a menu, this attribute specifies how to open the primary container. Otherwise, when the screen is opened by a redirection from an action and the <tt>RedirectToContainer</tt> attribute of this action does not explicitly specify how to open the container, then this attribute specifies how to open the redirected container of the screen. The value can be one of the following:[anchor|#_3849bf73-f9f9-49da-9d0d-6852a1bf783b]
*''List'': An indicator that the screen opens as a list.
*''Form'': An indicator that the screen opens as a form.

|- 
| <tt>Type</tt>
| The type of the screen, which is one of the following values:[anchor|#_cd2f9be3-6143-4466-94e1-4dd240c3172f]
*''SimpleScreen'': An indicator that the screen is a common screen.
*''FilterListScreen'': An indicator that the screen corresponds to the Acumatica ERP form based on the <tt>FormDetail</tt> form template. Such a screen should include at least two containers. The first container maps the form area of the form (filter), and the second one maps the grid.
*''Report'': An indicator that the screen is an Acumatica Report                         Designer report.
*''Dashboard'': An indicator that the screen is a dashboard. A screen of this type can display the following types of dashboard widgets:
**Chart
**Data Table
**Score Card
**Trend CardOther widget types will be hidden.

|- 
| <tt>Visible</tt>
| An indicator of the visibility of the screen in the main menu. If the value of this attribute is ''true'', the screen is visible on the main menu. By default, the value is ''true''.
|}
==Related Articles==
*[HelpRoot_Dev_Mobile\MOBILE_Ref_Tags|XML Tags]]]></column>
			<column name="PlainText"><![CDATA[<sm:Screen> The  sm:Screen  tag has the following attributes. Attribute Description DisplayName The name of the screen on the UI. ExpandSelector The name of a selector field from the primary container. An  Acumatica ERP form can contain a selector control that acts like a filter. For example, the                    Order Type  selector control on the Sales Orders form                 (SO301000) works as a filter. If the  ExpandSelector  attribute is                 specified for a screen, then the mobile application represents the screen as                 multiple screens, where each screen corresponds to a single value of the referenced                 selector field. Icon The name of an image that is used to display the screen icon on the main menu                 (and on the sidebar menu, if specified) of a mobile application. This attribute is                 optional. If this attribute is not specified for a screen, the screen is displayed                 in the UI without an icon. See the possible values and the corresponding images for                 the  Icon  attribute in  Icons. Id The screen identifier, such as  IN201000 . You can find the value to                 specify there in the screen URL of the corresponding  Acumatica ERP form. OpenAs The display type of the screen. When the screen is opened from a menu, this                 attribute specifies how to open the primary container. Otherwise, when the screen is                 opened by a redirection from an action and the                    RedirectToContainer  attribute of this action does not                 explicitly specify how to open the container, then this attribute specifies how to                 open the redirected container of the screen. The value can be one of the                   following: List : An indicator that the screen opens as a list. Form : An indicator that the screen opens as a form. Type The type of the screen, which is one of the following values: SimpleScreen : An indicator that the screen is a common screen. FilterListScreen : An indicator that the screen corresponds to the  Acumatica ERP form based on the  FormDetail  form template. Such a screen                     should include at least two containers. The first container maps the form area                     of the form (filter), and the second one maps the grid. Report : An indicator that the screen is an  Acumatica Report                         Designer report. Dashboard : An indicator that the screen is a dashboard. A screen of                     this type can display the following types of dashboard widgets: Chart Data Table Score Card Trend Card Other widget types will be hidden. Visible An indicator of the visibility of the screen in the main menu. If the value of                 this attribute is  true , the screen is visible on the main menu. By default,                 the value is  true . ]]></column>
		</row>
		<row PageID="3731fd4f-79cd-4b32-a9ec-bc1b67fee82d" Language="en-US" PageRevisionID="1" Content="&#xA;The &lt;tt&gt;sm:SelectorContainer&lt;/tt&gt; tag has same attributes as &lt;tt&gt;sm:Container&lt;/tt&gt;, as well as the following attributes.[anchor|#_f8663bb4-0f4a-40aa-ad0d-71d06ae05e35]&#xA;{| class=&quot;checklist&quot; | width=&quot;100%&quot; &#xA;|- &#xA;!width=&quot;25%&quot; ! Attribute&#xA;!width=&quot;75%&quot; ! Description&#xA;|- &#xA;| &lt;tt&gt;FieldsToShow&lt;/tt&gt;&#xA;| The number of columns to display in the selector.&#xA;|- &#xA;| &lt;tt&gt;Name&lt;/tt&gt;&#xA;| The identifier of the selector container, as found in the WSDL schema.&#xA;|}&#xA;==Related Articles==&#xA;*[HelpRoot_Dev_Mobile\MOBILE_Ref_Tags|XML Tags]" PlainText="&lt;sm:SelectorContainer&gt; The  sm:SelectorContainer  tag has same attributes as          sm:Container , as well as the following attributes. Attribute Description FieldsToShow The number of columns to display in the selector. Name The identifier of the selector container, as found in the WSDL schema. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="5dd06d6d-5483-7dd5-8c56-c84e4e6f6ab7" RecordSourceID="22377" />
		<row PageID="6bb3f060-622c-4e6a-aa44-d4a71e9fbbbe" Language="en-US" PageRevisionID="1" Content="&#xA;The &lt;tt&gt;sm:Type&lt;/tt&gt; tag has the following attribute.[anchor|#_a2acc45f-e4d6-4586-9621-d428f8e0376e]&#xA;{| class=&quot;checklist&quot; | width=&quot;100%&quot; &#xA;|- &#xA;!width=&quot;25%&quot; ! Attribute&#xA;!width=&quot;75%&quot; ! Description&#xA;|- &#xA;| &lt;tt&gt;Extension&lt;/tt&gt;&#xA;| The file name extension of the permitted file type.&#xA;|}&#xA;==Related Articles==&#xA;*[HelpRoot_Dev_Mobile\MOBILE_Ref_Tags|XML Tags]" PlainText="&lt;sm:Type&gt; The  sm:Type  tag has the following attribute. Attribute Description Extension The file name extension of the permitted file type. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="8c60fea2-4dae-cf98-4d2e-bac061ff1064" RecordSourceID="22377" />
		<row PageID="892583da-6edd-4bba-b22a-9a1fd1e7b613" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="c6874093-14e9-3e27-c0a8-18d75df07a7b" RecordSourceID="22377">
			<column name="Content"><![CDATA[
In the mobile site map, you can use the <tt>Icon</tt> attribute to set the icon that is displayed on the UI for the following MSDL objects:[anchor|#ul_gmy_3xg_w5]
*<tt>containerAction</tt>
* <tt>listAction</tt>
* <tt>recordAction</tt>
* <tt>selectionAction</tt>
* <tt>folder</tt>
* <tt>item</tt>
{br}

To specify an icon for an MSDL object, use the following format of the attribute value: {{system://IconName}}, where the {{IconName}} is one of the following values.[anchor|#table_ujk_3v1_we]
{| class="checklist" | width="100%" 
|- 
!width="25%" ! Icon Name
!width="75%" ! Description
|- 
| ''Alarm''
| [anchor|#image_cyx_j5m_4r][image:StudioDeveloperGuide/Images/Icon-Alarm-Small@2x.png|25px]
|- 
|  ''Albums''
| [anchor|#image_mzx_j5m_4r][image:StudioDeveloperGuide/Images/Icon-Albums-Small@2x.png|25px]
|- 
|  ''AngleDownCircle''
| [anchor|#image_t1y_j5m_4r][image:StudioDeveloperGuide/Images/Icon-AngleDownCircle-Small@2x.png|25px]
|- 
|  ''AngleLeftCircle''
| [anchor|#image_acy_j5m_4r][image:StudioDeveloperGuide/Images/Icon-AngleLeftCircle-Small@2x.png|25px]
|- 
|  ''AngleRightCircle''
| [anchor|#image_hdy_j5m_4r][image:StudioDeveloperGuide/Images/Icon-AngleRightCircle-Small@2x.png|25px]
|- 
|  ''AngleUpCircle''
| [anchor|#image_n2y_j5m_4r][image:StudioDeveloperGuide/Images/Icon-AngleUpCircle-Small@2x.png|25px]
|- 
|  ''Attention''
| [anchor|#image_vfy_j5m_4r][image:StudioDeveloperGuide/Images/Icon-Attention-Small@2x.png|25px]
|- 
|  ''Bell''
| [anchor|#image_chy_j5m_4r][image:StudioDeveloperGuide/Images/Icon-Bell-Small@2x.png|25px]
|- 
|  ''Bookmarks''
| [anchor|#image_k3y_j5m_4r][image:StudioDeveloperGuide/Images/Icon-Bookmarks-Small@2x.png|25px]
|- 
|  ''BottomArrow''
| [anchor|#image_aky_j5m_4r][image:StudioDeveloperGuide/Images/Icon-BottomArrow-Small@2x.png|25px]
|- 
|  ''Box1''
| [anchor|#image_hly_j5m_4r][image:StudioDeveloperGuide/Images/Icon-Box1-Small@2x.png|25px]
|- 
|  ''Box2''
| [anchor|#image_omy_j5m_4r][image:StudioDeveloperGuide/Images/Icon-Box2-Small@2x.png|25px]
|- 
|  ''Browser''
| [anchor|#image_xny_j5m_4r][image:StudioDeveloperGuide/Images/Icon-Browser-Small@2x.png|25px]
|- 
|  ''Calculator''
| [anchor|#image_bpy_j5m_4r][image:StudioDeveloperGuide/Images/Icon-Calculator-Small@2x.png|25px]
|- 
|  ''Camera''
| [anchor|#image_eqy_j5m_4r][image:StudioDeveloperGuide/Images/Icon-Camera-Small@2x.png|25px]
|- 
|  ''Cart''
| [anchor|#image_jry_j5m_4r][image:StudioDeveloperGuide/Images/Icon-Cart-Small@2x.png|25px]
|- 
|  ''Cash''
| [anchor|#image_nsy_j5m_4r][image:StudioDeveloperGuide/Images/Icon-Cash-Small@2x.png|25px]
|- 
|  ''Check''
| [anchor|#image_qty_j5m_4r][image:StudioDeveloperGuide/Images/Icon-Check-Small@2x.png|25px]
|- 
|  ''Clock''
| [anchor|#image_u5y_j5m_4r][image:StudioDeveloperGuide/Images/Icon-Clock-Small@2x.png|25px]
|- 
|  ''CloseCircle''
| [anchor|#image_xvy_j5m_4r][image:StudioDeveloperGuide/Images/Icon-CloseCircle-Small@2x.png|25px]
|- 
|  ''Cloud''
| [anchor|#image_bxy_j5m_4r][image:StudioDeveloperGuide/Images/Icon-Cloud-Small@2x.png|25px]
|- 
|  ''CloudDownload''
| [anchor|#image_pyy_j5m_4r][image:StudioDeveloperGuide/Images/Icon-CloudDownload-Small@2x.png|25px]
|- 
|  ''CloudUpload''
| [anchor|#image_uzy_j5m_4r][image:StudioDeveloperGuide/Images/Icon-CloudUpload-Small@2x.png|25px]
|- 
|  ''Comment''
| [anchor|#image_z1z_j5m_4r][image:StudioDeveloperGuide/Images/Icon-Comment-Small@2x.png|25px]
|- 
|  ''Compass''
| [anchor|#image_ecz_j5m_4r][image:StudioDeveloperGuide/Images/Icon-Compass-Small@2x.png|25px]
|- 
|  ''Config''
| [anchor|#image_idz_j5m_4r][image:StudioDeveloperGuide/Images/Icon-Config-Small@2x.png|25px]
|- 
|  ''CopyFile''
| [anchor|#image_n2z_j5m_4r][image:StudioDeveloperGuide/Images/Icon-CopyFile-Small@2x.png|25px]
|- 
|  ''Credit''
| [anchor|#image_tfz_j5m_4r][image:StudioDeveloperGuide/Images/Icon-Credit-Small@2x.png|25px]
|- 
|  ''Culture''
| [anchor|#image_ygz_j5m_4r][image:StudioDeveloperGuide/Images/Icon-Culture-Small@2x.png|25px]
|- 
|  ''Date''
| [anchor|#image_d3z_j5m_4r][image:StudioDeveloperGuide/Images/Icon-Date-Small@2x.png|25px]
|- 
|  ''Display1''
| [anchor|#image_jjz_j5m_4r][image:StudioDeveloperGuide/Images/Icon-Display1-Small@2x.png|25px]
|- 
|  ''Display2''
| [anchor|#image_qkz_j5m_4r][image:StudioDeveloperGuide/Images/Icon-Display2-Small@2x.png|25px]
|- 
|  ''Download''
| [anchor|#image_emz_j5m_4r][image:StudioDeveloperGuide/Images/Icon-Download-Small@2x.png|25px]
|- 
|  ''Drawer''
| [anchor|#image_jnz_j5m_4r][image:StudioDeveloperGuide/Images/Icon-Drawer-Small@2x.png|25px]
|- 
|  ''Drop''
| [anchor|#image_n4z_j5m_4r][image:StudioDeveloperGuide/Images/Icon-Drop-Small@2x.png|25px]
|- 
|  ''Edit''
| [anchor|#image_rpz_j5m_4r][image:StudioDeveloperGuide/Images/Icon-Edit-Small@2x.png|25px]
|- 
|  ''File''
| [anchor|#image_wqz_j5m_4r][image:StudioDeveloperGuide/Images/Icon-File-Small@2x.png|25px]
|- 
|  ''Filter''
| [anchor|#image_bsz_j5m_4r][image:StudioDeveloperGuide/Images/Icon-Filter-Small@2x.png|25px]
|- 
|  ''Flag''
| [anchor|#image_etz_j5m_4r][image:StudioDeveloperGuide/Images/Icon-Flag-Small@2x.png|25px]
|- 
|  ''Folder''
| [anchor|#image_g5z_j5m_4r][image:StudioDeveloperGuide/Images/Icon-Folder-Small@2x.png|25px]
|- 
|  ''Gleam''
| [anchor|#image_hvz_j5m_4r][image:StudioDeveloperGuide/Images/Icon-Gleam-Small@2x.png|25px]
|- 
|  ''Global''
| [anchor|#image_jwz_j5m_4r][image:StudioDeveloperGuide/Images/Icon-Global-Small@2x.png|25px]
|- 
|  ''Graph''
| [anchor|#image_kxz_j5m_4r][image:StudioDeveloperGuide/Images/Icon-Graph-Small@2x.png|25px]
|- 
|  ''Graph1''
| [anchor|#image_lyz_j5m_4r][image:StudioDeveloperGuide/Images/Icon-Graph1-Small@2x.png|25px]
|- 
|  ''Graph2''
| [anchor|#image_mzz_j5m_4r][image:StudioDeveloperGuide/Images/Icon-Graph2-Small@2x.png|25px]
|- 
|  ''Graph3''
| [anchor|#image_l11_k5m_4r][image:StudioDeveloperGuide/Images/Icon-Graph3-Small@2x.png|25px]
|- 
|  ''Home''
| [anchor|#image_qb1_k5m_4r][image:StudioDeveloperGuide/Images/Icon-Home-Small@2x.png|25px]
|- 
|  ''Id''
| [anchor|#image_nc1_k5m_4r][image:StudioDeveloperGuide/Images/Icon-Id-Small@2x.png|25px]
|- 
|  ''Info''
| [anchor|#image_ld1_k5m_4r][image:StudioDeveloperGuide/Images/Icon-Info-Small@2x.png|25px]
|- 
|  ''Key''
| [anchor|#image_j21_k5m_4r][image:StudioDeveloperGuide/Images/Icon-Key-Small@2x.png|25px]
|- 
|  ''Keypad''
| [anchor|#image_gf1_k5m_4r][image:StudioDeveloperGuide/Images/Icon-Keypad-Small@2x.png|25px]
|- 
|  ''LeftArrow''
| [anchor|#image_fg1_k5m_4r][image:StudioDeveloperGuide/Images/Icon-LeftArrow-Small@2x.png|25px]
|- 
|  ''Less''
| [anchor|#image_dh1_k5m_4r][image:StudioDeveloperGuide/Images/Icon-Less-Small@2x.png|25px]
|- 
|  ''Link''
| [anchor|#image_b31_k5m_4r][image:StudioDeveloperGuide/Images/Icon-Link-Small@2x.png|25px]
|- 
|  ''Lock''
| [anchor|#image_y31_k5m_4r][image:StudioDeveloperGuide/Images/Icon-Lock-Small@2x.png|25px]
|- 
|  ''Mail''
| [anchor|#image_wj1_k5m_4r][image:StudioDeveloperGuide/Images/Icon-Mail-Small@2x.png|25px]
|- 
|  ''MailOpen''
| [anchor|#image_vk1_k5m_4r][image:StudioDeveloperGuide/Images/Icon-MailOpen-Small@2x.png|25px]
|- 
|  ''MailOpenFile''
| [anchor|#image_ul1_k5m_4r][image:StudioDeveloperGuide/Images/Icon-MailOpenFile-Small@2x.png|25px]
|- 
|  ''Map''
| [anchor|#image_tm1_k5m_4r][image:StudioDeveloperGuide/Images/Icon-Map-Small@2x.png|25px]
|- 
|  ''MapMarker''
| [anchor|#image_b41_k5m_4r][image:StudioDeveloperGuide/Images/Icon-MapMarker-Small@2x.png|25px]
|- 
|  ''Menu''
| [anchor|#image_ap1_k5m_4r][image:StudioDeveloperGuide/Images/Icon-Menu-Small@2x.png|25px]
|- 
|  ''Monitor''
| [anchor|#image_zp1_k5m_4r][image:StudioDeveloperGuide/Images/Icon-Monitor-Small@2x.png|25px]
|- 
|  ''More''
| [anchor|#image_yq1_k5m_4r][image:StudioDeveloperGuide/Images/Icon-More-Small@2x.png|25px]
|- 
|  ''Network''
| [anchor|#image_vr1_k5m_4r][image:StudioDeveloperGuide/Images/Icon-Network-Small@2x.png|25px]
|- 
|  ''NewsPaper''
| [anchor|#image_rs1_k5m_4r][image:StudioDeveloperGuide/Images/Icon-NewsPaper-Small@2x.png|25px]
|- 
|  ''Next''
| [anchor|#image_ot1_k5m_4r][image:StudioDeveloperGuide/Images/Icon-Next-Small@2x.png|25px]
|- 
|  ''Note''
| [anchor|#image_k51_k5m_4r][image:StudioDeveloperGuide/Images/Icon-Note-Small@2x.png|25px]
|- 
|  ''Note2''
| [anchor|#image_gv1_k5m_4r][image:StudioDeveloperGuide/Images/Icon-Note2-Small@2x.png|25px]
|- 
|  ''Notebook''
| [anchor|#image_dw1_k5m_4r][image:StudioDeveloperGuide/Images/Icon-Notebook-Small@2x.png|25px]
|- 
|  ''Paperclip''
| [anchor|#image_ax1_k5m_4r][image:StudioDeveloperGuide/Images/Icon-Paperclip-Small@2x.png|25px]
|- 
|  ''PaperPlane''
| [anchor|#image_wx1_k5m_4r][image:StudioDeveloperGuide/Images/Icon-PaperPlane-Small@2x.png|25px]
|- 
|  ''Pen''
| [anchor|#image_ty1_k5m_4r][image:StudioDeveloperGuide/Images/Icon-Pen-Small@2x.png|25px]
|- 
|  ''Phone''
| [anchor|#image_pz1_k5m_4r][image:StudioDeveloperGuide/Images/Icon-Phone-Small@2x.png|25px]
|- 
|  ''PhotoGallery''
| [anchor|#image_k1b_k5m_4r][image:StudioDeveloperGuide/Images/Icon-PhotoGallery-Small@2x.png|25px]
|- 
|  ''Plane''
| [anchor|#image_obb_k5m_4r][image:StudioDeveloperGuide/Images/Icon-Plane-Small@2x.png|25px]
|- 
|  ''Plus''
| [anchor|#image_jcb_k5m_4r][image:StudioDeveloperGuide/Images/Icon-Plus-Small@2x.png|25px]
|- 
|  ''Portfolio''
| [anchor|#image_fdb_k5m_4r][image:StudioDeveloperGuide/Images/Icon-Portfolio-Small@2x.png|25px]
|- 
|  ''Prev''
| [anchor|#image_c2b_k5m_4r][image:StudioDeveloperGuide/Images/Icon-Prev-Small@2x.png|25px]
|- 
|  ''Print''
| [anchor|#image_y2b_k5m_4r][image:StudioDeveloperGuide/Images/Icon-Print-Small@2x.png|25px]
|- 
|  ''Refresh''
| [anchor|#image_ufb_k5m_4r][image:StudioDeveloperGuide/Images/Icon-Refresh-Small@2x.png|25px]
|- 
|  ''RefreshCloud''
| [anchor|#image_qgb_k5m_4r][image:StudioDeveloperGuide/Images/Icon-RefreshCloud-Small@2x.png|25px]
|- 
|  ''Repeat''
| [anchor|#image_mhb_k5m_4r][image:StudioDeveloperGuide/Images/Icon-Repeat-Small@2x.png|25px]
|- 
|  ''Request''
| [anchor|#_151dd013-57a9-437c-b048-2e2451a72487][image:StudioDeveloperGuide/Images/Icon-Request-Small@2x.png|25px]
|- 
|  ''Ribbon''
| [anchor|#image_i3b_k5m_4r][image:StudioDeveloperGuide/Images/Icon-Ribbon-Small@2x.png|25px]
|- 
|  ''RightArrow''
| [anchor|#image_fjb_k5m_4r][image:StudioDeveloperGuide/Images/Icon-RightArrow-Small@2x.png|25px]
|- 
|  ''Safe''
| [anchor|#image_bkb_k5m_4r][image:StudioDeveloperGuide/Images/Icon-Safe-Small@2x.png|25px]
|- 
|  ''Search''
| [anchor|#image_xkb_k5m_4r][image:StudioDeveloperGuide/Images/Icon-Search-Small@2x.png|25px]
|- 
|  ''Server''
| [anchor|#image_vlb_k5m_4r][image:StudioDeveloperGuide/Images/Icon-Server-Small@2x.png|25px]
|- 
|  ''Share''
| [anchor|#image_rmb_k5m_4r][image:StudioDeveloperGuide/Images/Icon-Share-Small@2x.png|25px]
|- 
|  ''Shopbag''
| [anchor|#image_nnb_k5m_4r][image:StudioDeveloperGuide/Images/Icon-Shopbag-Small@2x.png|25px]
|- 
|  ''Signal''
| [anchor|#image_j4b_k5m_4r][image:StudioDeveloperGuide/Images/Icon-Signal-Small@2x.png|25px]
|- 
|  ''Star''
| [anchor|#image_lpb_k5m_4r][image:StudioDeveloperGuide/Images/Icon-Star-Small@2x.png|25px]
|- 
|  ''Stopwatch''
| [anchor|#image_iqb_k5m_4r][image:StudioDeveloperGuide/Images/Icon-Stopwatch-Small@2x.png|25px]
|- 
|  ''Target''
| [anchor|#image_erb_k5m_4r][image:StudioDeveloperGuide/Images/Icon-Target-Small@2x.png|25px]
|- 
|  ''Ticket''
| [anchor|#image_asb_k5m_4r][image:StudioDeveloperGuide/Images/Icon-Ticket-Small@2x.png|25px]
|- 
|  ''Timer''
| [anchor|#image_wsb_k5m_4r][image:StudioDeveloperGuide/Images/Icon-Timer-Small@2x.png|25px]
|- 
|  ''Trash''
| [anchor|#image_rtb_k5m_4r][image:StudioDeveloperGuide/Images/Icon-Trash-Small@2x.png|25px]
|- 
|  ''Umbrella''
| [anchor|#image_o5b_k5m_4r][image:StudioDeveloperGuide/Images/Icon-Umbrella-Small@2x.png|25px]
|- 
|  ''Unlock''
| [anchor|#image_jvb_k5m_4r][image:StudioDeveloperGuide/Images/Icon-Unlock-Small@2x.png|25px]
|- 
|  ''UpArrow''
| [anchor|#image_gwb_k5m_4r][image:StudioDeveloperGuide/Images/Icon-UpArrow-Small@2x.png|25px]
|- 
|  ''Upload''
| [anchor|#image_cxb_k5m_4r][image:StudioDeveloperGuide/Images/Icon-Upload-Small@2x.png|25px]
|- 
|  ''User''
| [anchor|#image_yxb_k5m_4r][image:StudioDeveloperGuide/Images/Icon-User-Small@2x.png|25px]
|- 
|  ''UserFemale''
| [anchor|#image_uyb_k5m_4r][image:StudioDeveloperGuide/Images/Icon-UserFemale-Small@2x.png|25px]
|- 
|  ''Users''
| [anchor|#image_qzb_k5m_4r][image:StudioDeveloperGuide/Images/Icon-Users-Small@2x.png|25px]
|- 
|  ''Way''
| [anchor|#image_n1c_k5m_4r][image:StudioDeveloperGuide/Images/Icon-Way-Small@2x.png|25px]
|- 
|  ''World''
| [anchor|#image_jbc_k5m_4r][image:StudioDeveloperGuide/Images/Icon-World-Small@2x.png|25px]
|}]]></column>
			<column name="PlainText"><![CDATA[Icons In the mobile site map, you can use the  Icon  attribute to set the icon that       is displayed on the UI for the following MSDL objects: containerAction listAction recordAction selectionAction folder item To specify an icon for an MSDL object, use the following format of the attribute value:          system://IconName , where the  IconName  is one of the       following values. Icon Name Description Alarm Albums AngleDownCircle AngleLeftCircle AngleRightCircle AngleUpCircle Attention Bell Bookmarks BottomArrow Box1 Box2 Browser Calculator Camera Cart Cash Check Clock CloseCircle Cloud CloudDownload CloudUpload Comment Compass Config CopyFile Credit Culture Date Display1 Display2 Download Drawer Drop Edit File Filter Flag Folder Gleam Global Graph Graph1 Graph2 Graph3 Home Id Info Key Keypad LeftArrow Less Link Lock Mail MailOpen MailOpenFile Map MapMarker Menu Monitor More Network NewsPaper Next Note Note2 Notebook Paperclip PaperPlane Pen Phone PhotoGallery Plane Plus Portfolio Prev Print Refresh RefreshCloud Repeat Request Ribbon RightArrow Safe Search Server Share Shopbag Signal Star Stopwatch Target Ticket Timer Trash Umbrella Unlock UpArrow Upload User UserFemale Users Way World ]]></column>
		</row>
		<row PageID="340081e9-4e9f-4030-853a-19d298331d72" Language="en-US" PageRevisionID="1" PlainText="Known Limitations The  Acumatica mobile app has the following functionality limitations : Pop-up dialog boxes requesting a confirmation from a user are not displayed in the mobile      app. Instead, the system applies a change made by a user without requesting user      confirmation. On the Expense Claim screen, if specifying a reason is optional or required, a user cannot      approve a claim. This happens because the  Enter Reason  dialog box, which      is shown in  Acumatica ERP      when a claim is approved, is not supported in the mobile app. The system prompts for a       reason to complete the document approval if the  Approval Workflow  feature is enabled on       the   ([~/?ScreenId=CS100000|CS100000]) Enable/Disable Features (CS100000) form and corresponding settings       are specified in the approval map on the   ([~/?ScreenId=EP205015|EP205015]) Approval Maps       (EP205015) form. For more information, see  Managing Assignment and Approval Maps. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="4080f752-4f68-cf08-2584-01f3cc3e4c35" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The Acumatica mobile app has the following functionality limitations :[anchor|#_cdb2036d-4490-4902-8cb2-77774cb30df5]
*Pop-up dialog boxes requesting a confirmation from a user are not displayed in the mobile app. Instead, the system applies a change made by a user without requesting user confirmation.
*On the Expense Claim screen, if specifying a reason is optional or required, a user cannot approve a claim. This happens because the '''Enter Reason''' dialog box, which is shown in Acumatica ERP when a claim is approved, is not supported in the mobile app.
*:((({S:Warn}The system prompts for a reason to complete the document approval if the ''Approval Workflow'' feature is enabled on the [HelpRoot_FormReference\CS_10_00_00|Enable/Disable Features] ([~/?ScreenId=CS100000|CS100000]) form and corresponding settings are specified in the approval map on the [HelpRoot_FormReference\EP_20_50_15|Approval Maps] ([~/?ScreenId=EP205015|EP205015]) form. For more information, see [HelpRoot_Organization\EP__con_Assignment_Automation|Managing Assignment and Approval Maps].
)))
{br}{TOC}]]></column>
		</row>
		<row PageID="1072ee28-d5a6-4ad3-b633-875a8e219a2a" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="2d5bf204-d44b-0d7a-dfad-41ee96695a9f" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The command-line tool (executable name {{ac.exe}}) provides multiple parameters and applications. This topic describes the list of possible parameters and values of {{ac.exe}} that can be applied to mobile site maps. When working with mobile site maps, the first key that you must always use is {{MOBILESITEMAP}}.((({S:Warn}By default, {{ac.exe}} is located in the folder on the computer that has Acumatica ERP installed, which is {{C:\Program Files (x86)\Acumatica ERP\Data\}}.
)))[anchor|#_ca692c04-e654-47b7-8e27-a86f3afd4510]
{| class="checklist"
!Syntax
!Description
|-
| {{d[elta] s[cript] path_to_old_sitemap_folder path_to_new_sitemap_folder path_to_msdl_script_file}}
| Compares two mobile site maps and saves an MSDL script with the delta of these site maps.
|-
| {{d[elta] p[roject] path_to_old_sitemap_folder path_to_new_sitemap_folder path_to_customization_project_file}}
| Compares two mobile site maps and saves the delta of these site maps to the customization project.
|-
| {{c[onvert] s[cript] path_to_sitemap_folder path_to_msdl_script_file}}
| Converts an XML mobile site map to MSDL format.
|-
| {{c[onvert] p[roject] path_to_sitemap_folder path_to_customization_project_file}}
| Converts an XML mobile site map to MSDL format and saves the result to the specified customization project.
|-
| {{u[pgrade] s[cript] path_to_custom_sitemap_folder path_to_msdl_script_file}}
| Compares an XML mobile site map with the default mobile site map and saves an MSDL script with the delta of these site maps.
|-
| {{u[pgrade] p[roject] path_to_custom_sitemap_folder path_to_customization_project_file}}
| Compares an XML mobile site map with the default mobile site map and saves the delta of these site maps to the customization project.
| }{br}{TOC}
==Related Articles==
*[HelpRoot_Install\Using_the_Command-Line_Tool|Using the Command-Line Tool]]]></column>
			<column name="PlainText"><![CDATA[ac.exe MOBILEITEMAP Reference The command-line tool (executable name  ac.exe ) provides multiple         parameters and applications. This topic describes the list of possible parameters and values         of  ac.exe  that can be applied to mobile site maps. When working with mobile         site maps, the first key that you must always use is  MOBILESITEMAP . By default,  ac.exe  is located in the folder on the computer that has            Acumatica ERP installed, which is  C:\Program Files (x86)\Acumatica ERP\Data\ . Syntax Description d[elta] s[cript] path_to_old_sitemap_folder path_to_new_sitemap_folder               path_to_msdl_script_file Compares two mobile site maps and saves an MSDL script with the delta of these             site maps. d[elta] p[roject] path_to_old_sitemap_folder path_to_new_sitemap_folder               path_to_customization_project_file Compares two mobile site maps and saves the delta of these site maps to the             customization project. c[onvert] s[cript] path_to_sitemap_folder               path_to_msdl_script_file Converts an XML mobile site map to MSDL format. c[onvert] p[roject] path_to_sitemap_folder               path_to_customization_project_file Converts an XML mobile site map to MSDL format and saves the result to the             specified customization project. u[pgrade] s[cript] path_to_custom_sitemap_folder               path_to_msdl_script_file Compares an XML mobile site map with the default mobile site map and saves an             MSDL script with the delta of these site maps. u[pgrade] p[roject] path_to_custom_sitemap_folder               path_to_customization_project_file Compares an XML mobile site map with the default mobile site map and saves the             delta of these site maps to the customization project. ]]></column>
		</row>
	</rows>
</data>