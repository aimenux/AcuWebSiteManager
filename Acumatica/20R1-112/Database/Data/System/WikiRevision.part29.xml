<?xml version="1.0" encoding="utf-8"?>
<data>
	<table name="WikiRevision">
		<col name="CompanyID" type="Int" default="Zero" />
		<col name="PageID" type="UniqueIdentifier" />
		<col name="Language" type="VarChar(50)" />
		<col name="PageRevisionID" type="Int" />
		<col name="Content" type="NVarChar(MAX)" />
		<col name="ContentHtml" type="NVarChar(MAX)" nullable="true" />
		<col name="PlainText" type="NVarChar(MAX)" />
		<col name="ApprovalByID" type="UniqueIdentifier" nullable="true" />
		<col name="ApprovalDateTime" type="DateTime" nullable="true" />
		<col name="CreatedByID" type="UniqueIdentifier" />
		<col name="CreatedDateTime" type="DateTime" />
		<col name="CompanyMask" type="VarBinary(32)" default="CompanyMaskReadOnly" />
		<col name="UID" type="UniqueIdentifier" />
		<col name="RecordSourceID" type="SmallInt" nullable="true" />
	</table>
	<rows>
		<row PageID="316b14fa-f406-4788-993c-7b043b1c5bd9" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="f8aba11f-c9d8-27a8-9346-fbd20dfea279" RecordSourceID="22377">
			<column name="Content"><![CDATA[
This guide describes the scope of the Acumatica Customization           Platform and provides guidelines on how to use the platform capabilities for the customization of Acumatica ERP.{br}

The guide is intended to answer the following questions:[anchor|#ul_n2x_hbf_pl]
*How to start developing a customization project? ([HelpRoot_Dev_Customization\cg_gettingstarted|Getting Started])
*How does the Acumatica Customization           Platform work? ([HelpRoot_Dev_Customization\CG_Platform| Acumatica Customization             Platform])
*How to create, open, update, delete, publish, unpublish, export, and import a customization project? ([HelpRoot_Dev_Customization\CG_GL_Projects|Managing Customization Projects])
*How to create, add, update, and delete each type of item (such as screens, data access classes, code, files, and reports) in a customization project? ([HelpRoot_Dev_Customization\CG_GL_Items|Managing Items in a Project])
*How to publish a single customization project or multiple project for a site with single tenant or multiple tenants? ([HelpRoot_Dev_Customization\CG_GL_Projects_Publishing|Publishing Customization Projects])
*How to create a custom form and customize the look and behavior of an existing form of Acumatica ERP? ([HelpRoot_Dev_Customization\CG_GL_UI|Customizing Elements of the User Interface])
*How to create custom code or extensions for an existing data access class or business logic controller? ([HelpRoot_Dev_Customization\CG_GL_BL|Customizing Business Logic])
*How to customize an existing table or create a custom table in the database? ([HelpRoot_Dev_Customization\CG_GL_DBSchema|Customizing the Database Schema])
*How to use Microsoft Visual Studio to develop the customization code? ([HelpRoot_Dev_Customization\CG_Platform_Studio|Integrating the Project Editor with Microsoft Visual Studio])
*How to integrate with TFS, Git, or another version control system? ([HelpRoot_Dev_Customization\CG_GL_VCS|Integrating the Project Editor with a Version Control System])
*What can I do to solve an issue that occurs while I am developing or applying a customization? ([HelpRoot_Dev_Customization\CG_Troubleshooting|Troubleshooting Customization])
*Which examples can I use to enhance my understanding of the customization tasks I will perform? ([HelpRoot_Dev_Customization\CG_Examples|Examples])
]]></column>
			<column name="PlainText"><![CDATA[About the Customization Guide This guide describes the scope of the  Acumatica Customization           Platform and provides guidelines on how to use the platform capabilities for the customization of          Acumatica ERP. The guide is intended to answer the following questions: How to start developing a customization project? ( Getting Started) How does the  Acumatica Customization           Platform work? (  Acumatica Customization             Platform) How to create, open, update, delete, publish, unpublish, export, and import a           customization project? ( Managing Customization Projects) How to create, add, update, and delete each type of item (such as screens, data access           classes, code, files, and reports) in a customization project? ( Managing Items in a Project) How to publish a single customization project or multiple project for a site with single           tenant or multiple tenants? ( Publishing Customization Projects) How to create a custom form and customize the look and behavior of an existing form of              Acumatica ERP? ( Customizing Elements of the User Interface) How to create custom code or extensions for an existing data access class or business           logic controller? ( Customizing Business Logic) How to customize an existing table or create a custom table in the database? ( Customizing the Database Schema) How to use Microsoft Visual Studio to develop the customization code? ( Integrating the Project Editor with Microsoft Visual Studio) How to integrate with TFS, Git, or another version control system? ( Integrating the Project Editor with a Version Control System) What can I do to solve an issue that occurs while I am developing or applying a           customization? ( Troubleshooting Customization) Which examples can I use to enhance my understanding of the customization tasks I will           perform? ( Examples) ]]></column>
		</row>
		<row PageID="e3e48af1-d660-4bc8-9dcb-5014f6901292" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="e9feae49-64e9-12e6-f440-c692ec8e12b0" RecordSourceID="22377">
			<column name="Content"><![CDATA[[anchor|#_2d90e0de-31bc-485d-88d3-7f54cd615d37]
By using the tools and capabilities of the Acumatica Customization           Platform, you can change the user interface and business logic of Acumatica ERP, as well as build custom application modules that can be added to the system. The following diagram illustrates the different types of changes that you can make to the system within the scope of the customization process.[anchor|#_19835d9f-9b5f-4075-988e-914bcf995a57][anchor|#_3aa5a999-2a1f-4868-90dd-46d0e9a2539c][image:Shared/Images/CG_Intro_CustomizationItems.png|popup|Customization of Acumatica ERP|450px]{br}

As a value-added reseller (VAR), you can deliver end-user customization that might be very specific to each particular customer. At this level, you might want to add custom reports and data filters, and configure generic inquiries for users. These changes do not involve programming unless you also want to modify the business logic and the user interface of the application. For more information on the web-based Generic Inquiry builder and the Acumatica Report                         Designer, see [HelpRoot_ReportingTools\SM__MNG_Managing_Generic_Inquiry|Managing Generic Inquiries] and [HelpRoot_ReportingTools\ReportDesigner_Main| Acumatica Report                         Designer Guide].{br}

As an independent software vendor (ISV), you can develop vertical solutions and add-ons to the core functionality of the system. At this level, you might want to modify the business logic and the UI of the application, which you can do by using the [HelpRoot_Dev_Customization\CG_Platform| Acumatica Customization             Platform]. To develop custom application modules, you can use the API that is provided by the Acumatica Framework.{br}

As an original equipment manufacturer (OEM), you can build your own cloud ERP products based on high-level application objects of Acumatica ERP and the underlying Acumatica Framework technology. This type of customization may involve intensive changes at all levels of the system: modifications of the business logic and UI, development of custom modules, and report building.]]></column>
			<column name="PlainText"><![CDATA[Introduction By using the tools and capabilities of the  Acumatica Customization           Platform, you can change the user interface and business logic of  Acumatica ERP,             as well as build custom application modules that can be added to the system. The             following diagram illustrates the different types of changes that you can make to the             system within the scope of the customization process. Customization of  Acumatica ERPAs a value-added reseller (VAR), you can deliver end-user customization that might be very       specific to each particular customer. At this level, you might want to add custom reports and       data filters, and configure generic inquiries for users. These changes do not involve       programming unless you also want to modify the business logic and the user interface of the       application. For more information on the web-based Generic Inquiry builder and the  Acumatica Report                         Designer, see  Managing Generic Inquiries and   Acumatica Report                         Designer Guide. As an independent software vendor (ISV), you can develop vertical solutions and add-ons to       the core functionality of the system. At this level, you might want to modify the business       logic and the UI of the application, which you can do by using the   Acumatica Customization             Platform. To develop custom application modules, you can use the API that       is provided by the  Acumatica Framework. As an original equipment manufacturer (OEM), you can build your own cloud ERP products based       on high-level application objects of  Acumatica ERP and the underlying  Acumatica Framework       technology. This type of customization may involve intensive changes at all levels of the       system: modifications of the business logic and UI, development of custom modules, and report       building. ]]></column>
		</row>
		<row PageID="0a5adc4e-fc8c-4dea-85e2-8f90f9c5817a" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="c088504c-4026-6c90-bddc-a8810f1ee179" RecordSourceID="22377">
			<column name="Content"><![CDATA[
This chapter explains how to start developing a customization project and guides you to various useful chapters about the developing process.((({S:Warn}Before you start developing a customization project, we strongly recommend to take the [https://openuni.acumatica.com/courses/development/t300-acumatica-customization-platform/|T300 training course]. There you will learn how to set up and start using [anchor|#application_customization]Acumatica Customization             Platform.
))){br}{TOC}
==To Start Developing a Customization Project:==[anchor|#_ae48cd4d-f9e9-4e33-8f32-a919ec6f1167]
#Make sure you have the prerequired knowledge described in [HelpRoot_Dev_Customization\cg_gs_knowledgeprerequisites|Knowledge Pre-Requisites].
#Review [HelpRoot_Install\System_Requirements|System Requirements for Acumatica ERP 2020 R1] in the Acumatica ERP Installation Guide.
#Prepare your operating system according to [HelpRoot_Install\PreInstall_System_Configuration|Preparing for Installing Acumatica ERP] in the same guide.
#Prepare the environments as described in [HelpRoot_Dev_Customization\cg_gs_preparingenvironments|To Prepare an Environment].
#In the application instance, assign a ''Customizer'' role to those who will work on the customization project. See [HelpRoot_Dev_Customization\CG_GL_Stages_Role|To Assign the Customizer Role to a User Account] for details.
#If you haven&rsquo;t used version control, set up version control as described in [HelpRoot_Dev_Customization\CG_GL_VCS|Integrating the Project Editor with a Version Control System]. If your team already has a customization project and uses version control:
##Create an empty customization project with predefined name.
##:This step is needed because you can load customization project files from version control only in scope of an existing project.
##Download the project from version control.

You are ready to develop your customization project.
==Implementing Customization==As a rule, the process of resolving a customization task includes the following steps:[anchor|#_f10ff1c3-b9b3-4e44-ac98-6c2958c852a9]
*''Explore the original code'' of your Acumatica ERP application instance. This step is executed in the development environment, which must be the same as the production environment. See [HelpRoot_Dev_Customization\CG_GL_Stages_Explore|Exploring the Source Code] for details.
*''Develop the customization project''. This step is also executed locally in the development environment, which must include all customizations that are included in the production environment. See [HelpRoot_Dev_Customization\CG_GL_Stages_Developing|To Develop a Customization Project] for details.
*''Perform final testing''. In this step, you test the newly developed customization project in the staging environment, which can be a local copy of the customized production environment. The staging environment must include a copy of the production database. See [HelpRoot_Dev_Customization\CG_GL_Stages_Testing|To Perform Final Testing of a Customization] for details.
*''Deploy the customization project''. This step must be executed in the production environment. See [HelpRoot_Dev_Customization\CG_GL_Stages_Deploying|To Deploy a Customization Project] for details.
*:((({S:Warn}The version number of Acumatica ERP used in the development, staging, and production environments should be the same. If they are not, before deploying and publishing a project on the production instance, you should update the application instances to the same version. If the production application instance has been updated (or will be updated soon) to a particular version, you should update the development and staging instances to the target version and repeat all testing steps. Then, if the tests are successful, you should again create the deployment package to upload it to the production environment.{br}

Also, keep in mind that to carry out the final testing (with the production database) and deployment stages, you must be registered as an internal user with the ''Customizer'' role assigned.
)))

==In this part==[anchor|#_45f37eb0-e323-42f4-8d9d-254f97e85ee5]
*[HelpRoot_Dev_Customization\cg_gs_knowledgeprerequisites|Knowledge Pre-Requisites]
*[HelpRoot_Dev_Customization\cg_gs_preparingenvironments|To Prepare an Environment]
*[HelpRoot_Dev_Customization\CG_GL_Stages_Role|To Assign the Customizer Role to a User Account]
*[HelpRoot_Dev_Customization\CG_GL_Stages_Explore|Exploring the Source Code]
*[HelpRoot_Dev_Customization\CG_GL_Stages_Developing|To Develop a Customization Project]
*[HelpRoot_Dev_Customization\CG_GL_Stages_Testing|To Perform Final Testing of a Customization]
*[HelpRoot_Dev_Customization\CG_GL_Stages_Deploying|To Deploy a Customization Project]
*[HelpRoot_Dev_Customization\cg_gs_askingquestions|Asking Questions]
]]></column>
			<column name="PlainText"><![CDATA[Getting Started This chapter explains how to start developing a customization project and guides you to         various useful chapters about the developing process. Before you start developing a           customization project, we strongly recommend to take the  T300 training course T300 training course. There you will learn how to           set up and start using  Acumatica Customization             Platform . To Start Developing a Customization Project: Make sure you have the prerequired knowledge described in  Knowledge Pre-Requisites. Review  System Requirements for Acumatica ERP 2020 R1 in the  Acumatica ERP Installation Guide. Prepare your operating system according to  Preparing for Installing Acumatica ERP in the same           guide. Prepare the environments as described in  To Prepare an Environment. In the application instance, assign a  Customizer  role to those who will work on the           customization project. See  To Assign the Customizer Role to a User Account for details. If you haven't used version control, set up version control as described in  Integrating the Project Editor with a Version Control System. If your team already has a customization project and uses           version control: Create an empty customization project with predefined name. This step is needed                 because you can load customization project files from version control only in scope                 of an existing project. Download the project from version control. You are ready to develop your customization project. Implementing Customization As a rule, the process of resolving a       customization task includes the following steps: Explore the original code  of your  Acumatica ERP application instance. This step is executed in the development environment, which must           be the same as the production environment. See  Exploring the Source Code           for details. Develop the customization project . This step is also executed locally in the           development environment, which must include all customizations that are included in the           production environment. See  To Develop a Customization Project for details. Perform final testing . In this step, you test the newly developed customization           project in the staging environment, which can be a local copy of the customized production           environment. The staging environment must include a copy of the production database. See              To Perform Final Testing of a Customization for details. Deploy the customization project . This step must be executed in the production           environment. See  To Deploy a Customization Project for details. The version number of  Acumatica ERP used in the development, staging, and production environments should be the same.               If they are not, before deploying and publishing a project on the production instance,               you should update the application instances to the same version. If the production               application instance has been updated (or will be updated soon) to a particular               version, you should update the development and staging instances to the target version               and repeat all testing steps. Then, if the tests are successful, you should again               create the deployment package to upload it to the production environment. Also, keep in mind that to carry out the final testing (with the production database)               and deployment stages, you must be registered as an internal user with the                  Customizer  role assigned. In this part Knowledge Pre-RequisitesTo Prepare an EnvironmentTo Assign the Customizer Role to a User AccountExploring the Source CodeTo Develop a Customization ProjectTo Perform Final Testing of a CustomizationTo Deploy a Customization ProjectAsking Questions]]></column>
		</row>
		<row PageID="1fceec62-0f72-4025-a142-c07b4ee19d10" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="c9a307bf-ed54-6098-c176-e04adc7d357c" RecordSourceID="22377">
			<column name="Content"><![CDATA[
To be able to work on a customization of Acumatica ERP, you should have the following knowledge of technology used in Acumatica Customization             Platform.{br}{TOC}
==Knowledge of technology and programming language used in Acumatica Customization             Platform==
You should have the following knowledge of technology and programming language:[anchor|#_2838fc70-3849-462b-946d-8b884902d350]
*Proficiency with '''C#''' language, including but not limited to the following language features: classes, OOP, custom attributes, generics, delegates, anonymous methods and lambda expressions.
*Knowledge of the main concepts of '''ASP.NET''' and Web Development: application state, debugging ASP.NET applications using Visual Studio, client and server-side development, Web Forms structure, Web Services.
*Experience with '''SQL''' Server: SQL queries (where clause, aggregates, sub-queries), database structure (primary keys, data types, denormalization).
*Experience with '''IIS''': configuration and deployment of ASP.NET websites, configuring and securing IIS.

The following courses might be useful to get the required knowledge:[anchor|#_38a8eac1-51dc-42ff-8bae-22b6602e43cd]
*[http://www.microsoft.com/learning/en-us/course|Programming in C#]
*[https://www.microsoft.com/ru-ru/learning/course|Querying Microsoft SQL Server 2014]
*[https://www.microsoft.com/en-us/learning/course|Developing Microsoft SQL Server 2014 Databases]
*[https://mva.microsoft.com/en-US/training-courses/visual-studio-2017-web-development-17439?l=E42h2QDlD_9806218965|Visual Studio 2017: Web Development]
]]></column>
			<column name="PlainText"><![CDATA[Knowledge Pre-Requisites To be able to work on a customization of  Acumatica ERP, you should have the following knowledge of technology used in  Acumatica Customization             Platform. Knowledge of technology and programming language used in  Acumatica Customization             PlatformYou should have the following knowledge of technology and programming language: Proficiency with  C#  language, including but not limited to the following                     language features: classes, OOP, custom attributes, generics, delegates,                     anonymous methods and lambda expressions. Knowledge of the main concepts of  ASP.NET  and Web Development:                     application state, debugging ASP.NET applications using Visual Studio, client                     and server-side development, Web Forms structure, Web Services. Experience with  SQL  Server: SQL queries (where clause, aggregates,                     sub-queries), database structure (primary keys, data types,                     denormalization). Experience with  IIS : configuration and deployment of ASP.NET websites,                     configuring and securing IIS. The following courses might be useful to get the required knowledge: Programming in C# Programming in C#Querying Microsoft SQL Server                     2014 Querying Microsoft SQL Server 2014Developing Microsoft SQL Server 2014                         Databases Developing Microsoft SQL Server 2014 DatabasesVisual Studio 2017: Web                     Development Visual Studio 2017: Web Development]]></column>
		</row>
		<row PageID="e8e3c952-463b-4c90-9829-5c6721523902" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="65500238-57f7-4a8d-cf48-3a36ec82a99b" RecordSourceID="22377">
			<column name="Content"><![CDATA[
As you perform a customization task, you usually need to use three different sites:[anchor|#ul_wty_ryq_2s]
*A '''development environment''': Your local environment, on which you program and debug the customization code.
*A '''production environment''': The target environment of the customer&rsquo;s system that must be customized.
*A '''staging (or pre-production) environment''': A copy of the production environment, in which you will test the solution before applying it to the production environment. The staging environment can be created on your local system.
{br}

All environments are prepared in the same way as described in the following instruction.{br}{TOC}
==To prepare an environment:==[anchor|#_0494ca7e-eda0-4235-8e6a-7d60ede24687]
#Install Acumatica ERP.
#In the Acumatica ERP Configuration                             Wizard that appears, select '''Deploy New Application Instance''' to create a local instance of Acumatica ERP for the development environment.
#On the ''Database Configuration'' page (Step 2 of 8 of the process of deploying a new instance), create a new database for the development environment.
#On the ''Company Setup'' page (Step 3 of 8), specify the desired settings for the company.
#On the ''Instance Configuration'' page (Step 6 of 8), as the '''Local Path of the Instance''', specify a path outside of the <tt>C:\Program Files (x86)</tt> and <tt>C:\Program Files</tt> folders to avoid an issue with permission to work in these folders. For example, you could enter <tt>C:\AcumaticaSites\MyProject</tt>.
#:The system creates a new Acumatica ERP instance, adds a new company, and loads the selected data. Use the following initial credentials to log in to the new company:[anchor|#ul_ebg_v5l_tt]
#*'''Login''': <tt>admin</tt>
#*'''Password''': <tt>setup</tt>Change the password when the system prompts you to do so.
#Log in to Acumatica ERP.
]]></column>
			<column name="PlainText"><![CDATA[To Prepare an Environment As you perform a customization task, you usually need to use three different sites: A  development environment : Your local environment, on which you program and debug       the customization code. A  production environment : The target environment of the customer's system that must       be customized. A  staging (or pre-production) environment : A copy of the production environment, in       which you will test the solution before applying it to the production environment. The staging       environment can be created on your local system. All environments are prepared in the same way as described in the following instruction. To prepare an environment: Install  Acumatica ERP. In the  Acumatica ERP Configuration                             Wizard that appears, select  Deploy New Application Instance  to create a      local instance of  Acumatica ERP      for the development environment. On the  Database Configuration  page (Step 2 of 8 of the process of deploying a new      instance), create a new database for the development environment. On the  Company Setup  page (Step 3 of 8), specify the desired settings for the      company. On the  Instance Configuration  page (Step 6 of 8), as the  Local Path of the       Instance , specify a path outside of the  C:\Program Files       (x86)  and  C:\Program Files  folders to avoid an issue with      permission to work in these folders. For example, you could enter        C:\AcumaticaSites\MyProject . The system creates a new  Acumatica ERP       instance, adds a new company, and loads the selected data. Use the following initial       credentials to log in to the new company: Login :  admin Password :  setup Change the password when the system prompts you to do so. Log in to  Acumatica ERP. ]]></column>
		</row>
		<row PageID="8977603a-5e95-44bb-8b4a-6deae315de1f" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="818618da-466b-7927-8d2a-2f2bf2687fe9" RecordSourceID="22377">
			<column name="Content"><![CDATA[
Specialists who will work on customization projects should be assigned the ''Customizer'' role in the application instance that is to be customized and tested, as well as in the production application that should be updated with the customization project. With this role assigned, the specialists can use the customization tools and facilities of the Acumatica Customization             Platform, and upload and publish customization projects.{br}

A user with the ''Administrator'' role has full access rights in the system and can assign the ''Customizer'' role to the needed users by using the [HelpRoot_FormReference\SM_20_10_10|Users] ([~/?ScreenId=SM201010|SM201010]) form. ((({S:Warn}The default ''admin'' user has the ''Administrator'' role.
)))
If you have the ''Administrator'' role, do the following to assign the ''Customizer'' role to a user account:[anchor|#ol_h2g_5fm_rl]
#Navigate to '''Configuration''' > '''User Security''' > '''Manage''' > '''Users'''.
#In the '''Login''' box, select the user account to which the ''Customizer'' role should be assigned.
#Make sure the user account is not a guest account (in the Summary area) and is not assigned to a guest role (on the '''Roles''' tab).
#On the '''Roles''' tab, select the check box for the ''Customizer'' role, and click '''Save''' on the form toolbar.
#:The screenshot below shows the ''Johnson'' user account assigned to the ''Customizer'' role. The account is not a guest account and is not assigned to any guest roles.[anchor|#fig_ks2_wyg_fw][anchor|#image_nrl_3g5_3q][image:CustomizationPlatform/images/CG_GL_Stages_Role.png|popup|Assigning the Customizer role to a user account|400px]

After you save your changes, the user gets full access for customization of the system as soon as the user refreshes a form in the web browser.]]></column>
			<column name="PlainText"><![CDATA[To Assign the Customizer Role to a User Account Specialists who will work on customization projects should be assigned the  Customizer        role in the application instance that is to be customized and tested, as well as in the       production application that should be updated with the customization project. With this role       assigned, the specialists can use the customization tools and facilities of the  Acumatica Customization             Platform, and upload and publish customization projects. A user with the  Administrator  role has full access rights in the system and can assign    the  Customizer  role to the needed users by using the   ([~/?ScreenId=SM201010|SM201010]) Users (SM201010) form.  The default  admin  user has the  Administrator  role. If you have the  Administrator  role, do the following to assign the  Customizer        role to a user account: Navigate to  Configuration User Security Manage Users . In the  Login  box, select the user account to which the       Customizer  role should be assigned. Make sure the user account is not a guest account (in the Summary area) and is not assigned         to a guest role (on the  Roles  tab). On the  Roles  tab, select the check box for the  Customizer  role,         and click  Save  on the form toolbar. The screenshot below shows the              Johnson  user account assigned to the  Customizer  role. The account is not a           guest account and is not assigned to any guest roles. Assigning the Customizer role to a user account After you save your changes, the user gets full access for customization of the system as soon       as the user refreshes a form in the web browser. ]]></column>
		</row>
		<row PageID="819684d9-5f4d-488c-b6cb-7e7d991b63af" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="a9a6cb28-9fff-5607-7ff7-41bed7ffedcf" RecordSourceID="22377">
			<column name="Content"><![CDATA[
A user account must be granted the ''Customizer'' role to have the appropriate access needed for customization of Acumatica ERP.{br}

The default ''admin'' user account is granted this role. Therefore, if you are a developer who is going to work with a customization project, you can install an application instance of Acumatica ERP on the local computer and use the ''admin'' user account to start doing the customization. For testing and deployment of the customization, you should also assign the ''Customizer'' role to the appropriate user accounts on the test instance of the application and on the production instance. On the production instance, only the users who manage the deployment of customization packages should be granted the ''Customizer'' role.{br}

The users who will be granted the ''Customizer'' role must be Acumatica ERP internal users. You cannot assign the ''Customizer'' role to a user if either of the following conditions is true (or if both are true):[anchor|#ul_ugg_5fm_rl]
*The user has a guest account—that is, the user account has the '''Guest Account''' check box selected on the [HelpRoot_FormReference\SM_20_10_10|Users] ([~/?ScreenId=SM201010|SM201010]) form.
*The user is assigned to a guest role. A guest role has the '''Guest Role''' check box selected on the [HelpRoot_FormReference\SM_20_10_05|User Roles] ([~/?ScreenId=SM201005|SM201005]) form. The default guest roles are ''Anonymous'', ''Guest'', and ''Portal User''.
{br}

A user account that is assigned to the ''Customizer'' role has access to the following objects of the system:[anchor|#ul_h1g_w25_3q]
*The [HelpRoot_Dev_Customization\CG_Platform_Tools_Menu|Customization Menu] and [HelpRoot_Dev_Customization\CG_Platform_Tools_Inspector|Element Inspector], which give this user the ability to inspect the element properties on every form of Acumatica ERP and to add items to a customization project.
*The [HelpRoot_FormReference\SM_20_45_05|Customization Projects] ([~/?ScreenId=SM204505|SM204505]) form, which is used to manage and publish multiple customization projects. (See also [HelpRoot_Dev_Customization\CG_Platform_Tools_SM204505|Customization Projects Form ].)
*The [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor], which is used to manage and develop the content of a selected customization project.
]]></column>
			<column name="PlainText"><![CDATA[User Access Rights for Customization A user account must be granted the  Customizer  role to have the appropriate access needed    for customization of  Acumatica ERP. The default  admin  user account is granted this role. Therefore, if you are a developer    who is going to work with a customization project, you can install an application instance of  Acumatica ERP on    the local computer and use the  admin  user account to start doing the customization. For    testing and deployment of the customization, you should also assign the  Customizer  role to    the appropriate user accounts on the test instance of the application and on the production    instance. On the production instance, only the users who manage the deployment of customization    packages should be granted the  Customizer  role. The users who will be granted the  Customizer  role must be  Acumatica ERP    internal users. You cannot assign the  Customizer  role to a user if either of the following    conditions is true (or if both are true): The user has a guest account—that is, the user account has the  Guest       Account  check box selected on the   ([~/?ScreenId=SM201010|SM201010]) Users (SM201010) form. The user is assigned to a guest role. A guest role has the  Guest Role       check box selected on the   ([~/?ScreenId=SM201005|SM201005]) User Roles      (SM201005) form. The default guest roles are  Anonymous ,  Guest , and  Portal       User . A user account that is assigned to the  Customizer  role has access to the following    objects of the system: The  Customization Menu and  Element Inspector, which give this user the ability to inspect the      element properties on every form of  Acumatica ERP      and to add items to a customization project. The   ([~/?ScreenId=SM204505|SM204505]) Customization Projects (SM204505) form, which is      used to manage and publish multiple customization projects. (See also  Customization Projects Form .) The   Customization Project                         Editor, which is used to manage and develop the      content of a selected customization project. ]]></column>
		</row>
		<row PageID="8b029e01-6b17-401a-b680-46f9ab69c4cb" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="981768b8-d2ff-b379-f638-d549219c7c58" RecordSourceID="22377">
			<column name="Content"><![CDATA[
Before you start to customize an Acumatica ERP application instance, you should analyze your business requirements to identify the changes in business processes that must be done and to identify the application objects for the customization. We recommend that you learn about the structure of the involved webpages by exploring the <tt>.aspx</tt> pages, the code of the business logic controllers (BLCs), and the data access classes (DACs) that are used within the BLCs.{br}

You can use the [HelpRoot_FormReference\SM_20_45_70|Source Code] ([~/?ScreenId=SM204570|SM204570]) form (see also [HelpRoot_Dev_Customization\CG_Platform_Tools_SM204570|Source Code Browser]) to explore the original source code of the application for the following purposes:[anchor|#ol_rng_2bf_vs]
*To learn about the structure of the webpages involved in the customization
*To understand which data views are bound with the customized form areas
*To analyze the code that provides the business logic for a form to be customized
*To find and analyze the data views used on a customized webpage
*To understand which data access classes the form being customized is based on
*To learn the attributes of the DAC fields and the relations between DACs
{br}

This section contains instructions on how to do the following:[anchor|#ul_vnt_5rm_fw]
*[HelpRoot_Dev_Customization\CG_GL_Stages_Explore_BLC|To Explore the C# Code of a BLC]
*[HelpRoot_Dev_Customization\CG_GL_Stages_Explore_DAC|To Explore the C# Code of a DAC]
*[HelpRoot_Dev_Customization\CG_GL_Stages_Explore_ASPX|To Explore the ASPX Code of a Page]
*[HelpRoot_Dev_Customization\CG_GL_Stages_Explore_CustASPX|To Find a Customization of the ASPX Code]
*[HelpRoot_Dev_Customization\CG_GL_Stages_Explore_FindCode|To Find Source Code by a Fragment]
]]></column>
			<column name="PlainText"><![CDATA[Exploring the Source Code Before you start to customize an  Acumatica ERP application instance, you should analyze your business requirements to identify the changes       in business processes that must be done and to identify the application objects for the       customization. We recommend that you learn about the structure of the involved webpages by       exploring the  .aspx  pages, the code of the business logic controllers       (BLCs), and the data access classes (DACs) that are used within the BLCs. You can use the    ([~/?ScreenId=SM204570|SM204570]) Source Code (SM204570)       form (see also  Source Code Browser) to explore the original source       code of the application for the following purposes: To learn about the structure of the webpages involved in the customization To understand which data views are bound with the customized form areas To analyze the code that provides the business logic for a form to be customized To find and analyze the data views used on a customized webpage To understand which data access classes the form being customized is based on To learn the attributes of the DAC fields and the relations between DACs This section contains instructions on how to do the following: To Explore the C# Code of a BLCTo Explore the C# Code of a DACTo Explore the ASPX Code of a PageTo Find a Customization of the ASPX CodeTo Find Source Code by a Fragment]]></column>
		</row>
		<row PageID="3aefb7f7-8213-449b-a4c6-2bf9a0d1d750" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="80911185-d8be-b9b7-52f3-efc07c1671fe" RecordSourceID="22377">
			<column name="Content"><![CDATA[
If you need to customize the business logic for a form of Acumatica ERP, you have to explore the original source code of the business logic controller (BLC) that provides the business logic for the form. The goal of exploring the code is to discover the data views, methods, and event handlers of the BLC.{br}

To do this, perform the following actions:[anchor|#ol_isq_zdg_ws]
#On a selected form, click '''Customization &gt; Inspect Element''', as item a of the screenshot below shows, to activate the [HelpRoot_Dev_Customization\CG_Platform_Tools_Inspector|Element Inspector].
#Click a control or area of the form to open the [HelpRoot_Dev_Customization\CG_Platform_Tools_Inspector_ElProperiesDlg|Element Properties Dialog Box] for the control or area. See item b on the screenshot.
#In the dialog box, click '''Actions &gt; View Business Logic Source''' (item c).[anchor|#image_p4h_lzm_fw][image:CustomizationPlatform/images/CG_GL_Stages_Exploration_01.png|popup|Selecting the grid container for the customization|450px]
#In the [HelpRoot_FormReference\SM_20_45_70|Source Code] ([~/?ScreenId=SM204570|SM204570]) form (see also [HelpRoot_Dev_Customization\CG_Platform_Tools_SM204570|Source Code Browser]), which opens for the BLC, view the source code in the work area, and use the navigation pane to find a method or event handler by its name and open it.
{br}

Also, you can open the original BLC code in the Source Code browser in the following ways:[anchor|#ul_bjv_g4f_fq]
*From the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_CodeEditor|Code Editor], by clicking '''View Source''' on the page toolbar
*From the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_LayoutEditor|Screen Editor], by clicking '''View Source''' on the toolbar of the '''Events''' tab
]]></column>
			<column name="PlainText"><![CDATA[To Explore the C# Code of a BLC If you need to customize the business logic for a form of  Acumatica ERP, you have to explore the original source code of the business logic controller (BLC) that       provides the business logic for the form. The goal of exploring the code is to discover the       data views, methods, and event handlers of the BLC. To do this, perform the following actions: On a selected form, click  Customization > Inspect Element , as item a of the screenshot below shows, to activate the  Element Inspector. Click a control or area of the form to open the  Element Properties Dialog Box for the control or area. See           item b on the screenshot. In the dialog box, click  Actions > View Business Logic Source  (item c). Selecting the grid container for the customization In the    ([~/?ScreenId=SM204570|SM204570]) Source Code (SM204570) form (see           also  Source Code Browser), which opens for the BLC, view the           source code in the work area, and use the navigation pane to find a method or event           handler by its name and open it. Also, you can open the original BLC code in the Source Code browser in the following ways: From the  Code Editor, by clicking              View Source  on the page toolbar From the  Screen Editor, by clicking              View Source  on the toolbar of the  Events            tab ]]></column>
		</row>
		<row PageID="e7fcfc0a-10d9-4b2c-a328-ac7c1d3c62c4" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="4ef8f4c2-81ce-4b0d-c906-91abfb4028de" RecordSourceID="22377">
			<column name="Content"><![CDATA[
If you need to customize the attributes of a data field for an existing control or create a new field for a custom control on a form, you may need to explore the original source code of the appropriate DAC.{br}

To do this, perform the following actions:[anchor|#ol_isq_zdg_ws]
#On the selected form, click '''Customization &gt; Inspect Element''', as item a of the screenshot below shows, to activate the [HelpRoot_Dev_Customization\CG_Platform_Tools_Inspector|Element Inspector].
#Click a control or area of the form to open the [HelpRoot_Dev_Customization\CG_Platform_Tools_Inspector_ElProperiesDlg|Element Properties Dialog Box] for the control or area. See item b on the screenshot.
#In the dialog box, click '''Actions &gt; View Data Class Source''' (item c).[anchor|#image_p4h_lzm_fw][image:CustomizationPlatform/images/CG_GL_Stages_Explore_DAC_01.png|popup|Selecting the grid container for the customization|450px]
#On the [HelpRoot_FormReference\SM_20_45_70|Source Code] ([~/?ScreenId=SM204570|SM204570]) form (see also [HelpRoot_Dev_Customization\CG_Platform_Tools_SM204570|Source Code Browser]), which opens for the DAC, view the data field declarations in the work area.
{br}

Also you can open the original DAC code in the Source Code browser in the following ways:[anchor|#ul_bjv_g4f_fq]
*From the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_DataClassEditor|Data Class Editor], by clicking '''View Source''' on the page toolbar
*From the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_LayoutEditor|Screen Editor], by clicking '''View Source''' on the toolbar of the '''Attributes''' tab
]]></column>
			<column name="PlainText"><![CDATA[To Explore the C# Code of a DAC If you need to customize the attributes of a data field for an existing control or create a new       field for a custom control on a form, you may need to explore the original source code of the       appropriate DAC. To do this, perform the following actions: On the selected form, click  Customization > Inspect Element , as item a of the screenshot below shows, to activate the  Element Inspector. Click a control or area of the form to open the  Element Properties Dialog Box for the control or area. See           item b on the screenshot. In the dialog box, click  Actions > View Data Class Source  (item c). Selecting the grid container for the customization On the   ([~/?ScreenId=SM204570|SM204570]) Source Code (SM204570) form (see           also  Source Code Browser), which opens for the DAC, view the           data field declarations in the work area. Also you can open the original DAC code in the Source Code browser in the following ways: From the  Data Class Editor, by clicking              View Source  on the page toolbar From the  Screen Editor, by clicking              View Source  on the toolbar of the              Attributes  tab ]]></column>
		</row>
		<row PageID="e38e179d-cd54-48fa-a9ce-f26a52e97f0c" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="d74c590a-db6c-f7c3-c13a-fce1ee899aa9" RecordSourceID="22377">
			<column name="Content"><![CDATA[
If you need to look closely at the data views that provide data for control containers on a form or to see the corresponding webpage structure—that is, the layout of the containers and the types and properties of the controls—you may need to explore the original ASPX code of the webpage.{br}

To explore this code, perform the following actions:[anchor|#ol_isq_zdg_ws]
#On the selected form, click '''Customization &gt; Inspect Element''', as item a in the screenshot below shows, to activate the [HelpRoot_Dev_Customization\CG_Platform_Tools_Inspector|Element Inspector].
#Click a control or area of the form to open the [HelpRoot_Dev_Customization\CG_Platform_Tools_Inspector_ElProperiesDlg|Element Properties Dialog Box] for the control or area. See item b on the screenshot.
#In the dialog box, click '''Actions &gt; View ASPX Source''' (item c).[anchor|#image_mqq_yh5_fw][image:CustomizationPlatform/images/CG_GL_Stages_Explore_ASPX_01.png|popup|Selecting the grid container for the customization|450px]
#On the [HelpRoot_FormReference\SM_20_45_70|Source Code] ([~/?ScreenId=SM204570|SM204570]) form (see also [HelpRoot_Dev_Customization\CG_Platform_Tools_SM204570|Source Code Browser]), which opens for the form, view the original ASPX code of the page in the work area.
#If you need to look closely at the data views that provide data for control containers on the current form, perform a browser search to find the <tt>DataMember</tt> string. The <tt>DataMember</tt> property is used to bind a control container of a form to a data view defined in the business logic controller (BLC) of the form. The property value is the name of the data view.
#:((({S:Warn}Each <tt>DataMember</tt> property value can correspond to any data view name of the BLC. Any container (for example, <tt>PXTab</tt>, <tt>PXGridLevel</tt>, or <tt>PXFormView</tt>) must be bound to a data view declared within a BLC. Any data view except for the main data view can be used by an unlimited number of containers. The main data view must be bound to a single container.
)))
]]></column>
			<column name="PlainText"><![CDATA[To Explore the ASPX Code of a Page If you need to look closely at the data views that provide data for control containers on a       form or to see the corresponding webpage structure—that is, the layout of the containers and       the types and properties of the controls—you may need to explore the original ASPX code of the       webpage. To explore this code, perform the following actions: On the selected form, click  Customization > Inspect Element , as item a in the screenshot below shows, to activate the  Element Inspector. Click a control or area of the form to open the  Element Properties Dialog Box for the control or area. See           item b on the screenshot. In the dialog box, click  Actions > View ASPX Source  (item c). Selecting the grid container for the customization On the    ([~/?ScreenId=SM204570|SM204570]) Source Code (SM204570) form           (see also  Source Code Browser), which opens for the form, view           the original ASPX code of the page in the work area. If you need to look closely at the data views that provide data for control containers           on the current form, perform a browser search to find the              DataMember  string. The  DataMember  property is           used to bind a control container of a form to a data view defined in the business logic           controller (BLC) of the form. The property value is the name of the data view. Each                DataMember  property value can correspond to any data view name of             the BLC. Any container (for example,  PXTab ,                PXGridLevel , or  PXFormView ) must be bound to a             data view declared within a BLC. Any data view except for the main data view can be used             by an unlimited number of containers. The main data view must be bound to a single             container. ]]></column>
		</row>
		<row PageID="70c71664-bd9a-4e5e-b4f9-2beb8cd70132" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="86fda7ae-8d2a-a03e-3cb8-73e2ba64c4c4" RecordSourceID="22377">
			<column name="Content"><![CDATA[
If the ASPX code for a form is customized, to explore changes in the code, you use the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_LayoutEditor|Screen Editor] of the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor], which you access by using the [HelpRoot_FormReference\SM_20_45_05|Customization Projects] ([~/?ScreenId=SM204505|SM204505]) form.((({S:Warn}The Source Code browser can display only the original ASPX code of a webpage.
))){br}

To detect whether a form is currently customized, do the following:[anchor|#ol_avf_1j1_kw]
#Open the form in the browser.
#Click '''Tools''' on the title bar of the form.
If the form has been customized, the screen ID has the ''CST.'' prefix.{br}

Once you know the form has been customized, to find the customization of the ASPX code of the form, perform the following actions:[anchor|#ol_e24_wjv_fw]
#Determine the published customization projects that contain changes for the form as follows:
##Navigate to '''System &gt; Customization &gt; Manage &gt; Customization Projects'''
##On the form, view the list of the customization projects (see the following screenshot)[anchor|#image_phy_tm1_kw][image:CustomizationPlatform/images/CG_GL_Stages_Explore_CustASPX_01.png|popup|Viewing the list of customization projects|450px]
##In the '''Screen Names''' column, for the published customization projects (those for which the '''Published''' check box is selected), scan the form IDs to identify the projects that contains changes for this form.
#To explore a published project that contains changes for this form, perform the following actions:
##Click the name of the project to open it in the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor].
##In the navigation pane of the editor, click '''Screens''' to open the Customized Screens page.
##On the page (see the screenshot below), click the form ID in the '''Screen ID''' column to open the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_LayoutEditor|Screen Editor] for the form.[anchor|#image_gcx_dr1_kw][image:CustomizationPlatform/images/CG_GL_Stages_Explore_CustASPX_02.png|popup|Viewing the Customized Screens page of the Customization Project Editor|418px]
##In the Screen Editor, select the '''View ASPX''' tab item to view the customized ASPX code of the node that is currently selected in the Control Tree
##Explore each node of the tree to find the changes, which are highlighted in yellow, as the following screenshot shows.[anchor|#image_gmj_qt1_kw][image:CustomizationPlatform/images/CG_GL_Stages_Explore_CustASPX_03.png|popup|Viewing the customization of the ASPX code|450px]
]]></column>
			<column name="PlainText"><![CDATA[To Find a Customization of the ASPX Code If the ASPX code for a form is customized, to explore changes in the code, you use the  Screen Editor of the   Customization Project                         Editor, which you access by using the   ([~/?ScreenId=SM204505|SM204505]) Customization Projects (SM204505) form. The Source         Code browser can display only the original ASPX code of a webpage. To detect whether a form is currently customized, do the following: Open the form in the browser. Click  Tools  on the title bar of the form. If the form has been customized, the screen ID has the  CST.  prefix. Once you know the form has been customized, to find the customization of the ASPX code of the       form, perform the following actions: Determine the published customization projects that contain changes for the form as             follows: Navigate to  System > Customization > Manage > Customization Projects On the form, view the list of the customization projects (see the following                 screenshot) Viewing the list of customization projects In the  Screen Names  column, for the published customization               projects (those for which the  Published  check box is selected),               scan the form IDs to identify the projects that contains changes for this form. To explore a published project that contains changes for this form, perform the           following actions: Click the name of the project to open it in the   Customization Project                         Editor. In the navigation pane of the editor, click  Screens  to open               the Customized Screens page. On the page (see the screenshot below), click the form ID in the  Screen                 ID  column to open the  Screen Editor for the form. Viewing the Customized Screens page of the Customization Project                   Editor In the Screen Editor, select the  View ASPX  tab item to view               the customized ASPX code of the node that is currently selected in the Control               Tree Explore each node of the tree to find the changes, which are highlighted in yellow,               as the following screenshot shows. Viewing the customization of the ASPX code ]]></column>
		</row>
		<row PageID="14b32645-892a-4226-b003-a70de5241ade" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="e76755ba-300b-35ec-f582-d3d4aa015a98" RecordSourceID="22377">
			<column name="Content"><![CDATA[
In an instance of Acumatica ERP, a repository with the original C# source code of the application is kept in the <tt>\App&#95;Data\CodeRepository</tt> folder of the website. You can use the [HelpRoot_FormReference\SM_20_45_70|Source Code] ([~/?ScreenId=SM204570|SM204570]) form to find the source code within the repository by a code fragment. (For more information, see also [HelpRoot_Dev_Customization\CG_Platform_Tools_SM204570|Source Code Browser].){br}

To do this, perform the following actions:[anchor|#ol_v1v_j2b_kw]
#Navigate to '''System &gt; Customization &gt; Explore &gt; Source Code'''.
#Click the '''File in Files''' tab item.
#In the '''Find Text''' box, enter (by typing or by copying and pasting) a code fragment.
#Click '''Find''' to start the procedure.
#:The results of the code search are displayed on the form, as the following screenshot shows.[anchor|#fig_o1w_jgb_kw][anchor|#image_ij3_ngb_kw][image:CustomizationPlatform/images/CG_GL_Stages_Explore_FindCode_01.png|popup|Viewing the results of the code search in the Source Code browser|450px]The form displays the results in the following elements:[anchor|#ul_nbd_jhb_kw]
#*A list of the locations of the specified code fragment in the repository files
#*A text area with the source code of the location selected in the list
#Explore the use of the code fragment in the original source code by selecting a location in the list and scrolling the code in the text area.
]]></column>
			<column name="PlainText"><![CDATA[To Find Source Code by a Fragment In an instance of  Acumatica ERP, a repository with the original C# source code of the application is kept in the          \App_Data\CodeRepository  folder of the website. You can use the   ([~/?ScreenId=SM204570|SM204570]) Source Code (SM204570) form to find the source       code within the repository by a code fragment. (For more information, see also  Source Code Browser.) To do this, perform the following actions: Navigate to  System > Customization > Explore > Source Code . Click the  File in Files  tab item. In the  Find Text  box, enter (by typing or by copying and pasting)           a code fragment. Click  Find  to start the procedure. The results of the code             search are displayed on the form, as the following screenshot shows. Viewing the results of the code search in the Source Code browser The form displays the results in the following elements: A list of the locations of the specified code fragment in the repository                 files A text area with the source code of the location selected in the list Explore the use of the code fragment in the original source code by selecting a location           in the list and scrolling the code in the text area. ]]></column>
		</row>
		<row PageID="df3b1865-51dd-46fe-8d83-d0a421150c16" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="063e29c2-1518-68d7-f1b5-a5147d879cef" RecordSourceID="22377">
			<column name="Content"><![CDATA[[anchor|#_7d48c3f7-cf3f-42d3-b2b4-049d6816d896]
During the development stage, you develop the customization, which involves implementing your planned changes by using the framework and tools provided by the Acumatica Customization             Platform.((({S:Warn}We recommend that a separate application instance be used for each developer working on a single project or group of projects. Multiple developers should not work simultaneously with the same project or projects. The customization scope should be divided among the developers on a separate areas so each developer works with a separate application instance. The created customization projects can be sequentially imported into the customer&rsquo;s production environment and applied as if all the divided tasks had been resolved as a single common one.
))){br}

Follow this recommended workflow during the development process:[anchor|#_89e3dc1f-fce0-4790-b4c1-0020e0f9e6dc]
#In your application instance, create a new customization project or select an existing one.
#Open the project in the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor].
#Perform the customization steps, such as:
#*Add a UI element. See [HelpRoot_Dev_Customization\CG_GL_UI|Customizing Elements of the User Interface] for details.
#*Extend the business logic. See [HelpRoot_Dev_Customization\CG_GL_BL|Customizing Business Logic] and [HelpRoot_Dev_Customization\CG_GL_DBSchema|Customizing the Database Schema] for details.
#*Customize the database. See [HelpRoot_Dev_Customization\CG_GL_DBSchema|Customizing the Database Schema] for details.
#:After completing each step, validate the changes you have performed. 
#Debug your customization project. See [HelpRoot_Dev_Customization\CG_Troubleshooting_ToDebug|To Debug the Customization Code] for details.
#Publish the project. See [HelpRoot_Dev_Customization\CG_GL_Projects_Publishing|Publishing Customization Projects] for details.
#Test the customized application instance.
{br}

You develop and maintain customization projects by using the [HelpRoot_Dev_Customization\CG_Platform_Tools|Customization Tools] of Acumatica Customization             Platform. The platform provides the mechanisms to develop and publish customization projects. After the customization project is ready, you prepare the deployment package to distribute the customization project to the staging or production environment (see [HelpRoot_Dev_Customization\CG_Platform_Project_Deployment|Deployment of Customization] for details).]]></column>
			<column name="PlainText"><![CDATA[To Develop a Customization Project During the development stage, you develop the customization, which involves implementing         your planned changes by using the framework and tools provided by the  Acumatica Customization             Platform. We recommend that a separate application instance be used for each developer           working on a single project or group of projects. Multiple developers should not work           simultaneously with the same project or projects. The customization scope should be           divided among the developers on a separate areas so each developer works with a separate           application instance. The created customization projects can be sequentially imported into           the customer's production environment and applied as if all the divided tasks had been           resolved as a single common one. Follow this recommended workflow during the development process: In your application instance, create a new customization project or select an existing           one. Open the project in the   Customization Project                         Editor. Perform the customization steps, such as: Add a UI element. See  Customizing Elements of the User Interface for details. Extend the business logic. See  Customizing Business Logic and  Customizing the Database Schema for details. Customize the database. See  Customizing the Database Schema for details. After completing each step, validate the changes you have performed.  Debug your customization project. See  To Debug the Customization Code for           details. Publish the project. See  Publishing Customization Projects for details. Test the customized application instance. You develop and maintain customization projects by using the  Customization Tools of  Acumatica Customization             Platform. The platform provides the mechanisms to develop and publish customization projects.         After the customization project is ready, you prepare the deployment package to distribute         the customization project to the staging or production environment (see  Deployment of Customization for details). ]]></column>
		</row>
		<row PageID="3cd8d33a-fd91-4b92-9620-a3e488e90e19" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="8e50934c-90bd-3916-3162-2cac2e0170ec" RecordSourceID="22377">
			<column name="Content"><![CDATA[
After you finished developing your customization, you test it in the staging environment, which can be a local copy of the production environment. The staging environment must include a copy of the production database.{br}

To apply the customization to the staging environment, you have to do the following:[anchor|#ol_ej1_v4d_vs]
#Export the deployment package of the customization project in the development environment. See [HelpRoot_Dev_Customization\CG_GL_Projects_Deploying_Exporting|To Export a Project] for details.
#Prepare the staging environment in accordance with [HelpRoot_Install\System_Requirements|System Requirements for Acumatica ERP 2020 R1].
#In the staging environment, install a version with the same Acumatica ERP version number that is used in the production environment (see [HelpRoot_Install\Installing_Acumatica|Installing Acumatica ERP] for details). All further actions must be performed in the staging environment.
#Copy the deployment package file to the system where the staging environment was prepared.
#Start the application instance.
#Import the project. See [HelpRoot_Dev_Customization\CG_GL_Projects_Deploying_Importing|To Import a Project] for details.
#Explore the project content. Ensure that the project items contain appropriate data.
#Publish the project. See [HelpRoot_Dev_Customization\CG_GL_Projects_Publishing|Publishing Customization Projects] for details.
#Test the customization.
{br}

If you have developed a complex project for an application with multiple customization projects published and you can&rsquo;t address some issues that have emerged during this stage, try to perform the original installation with all previous updates, and then upload the saved content of the current project to the staging environment.]]></column>
			<column name="PlainText"><![CDATA[To Perform Final Testing of a Customization After you finished developing your customization, you test it in the staging environment,       which can be a local copy of the production environment. The staging environment must include       a copy of the production database. To apply the customization to the staging environment, you have to do the following: Export the deployment package of the customization project in the development           environment. See  To Export a Project for details. Prepare the staging environment in accordance with  System Requirements for Acumatica ERP 2020 R1. In the staging environment, install a version with the same  Acumatica ERP version number that is used in the production environment (see  Installing Acumatica ERP for details). All further           actions must be performed in the staging environment. Copy the deployment package file to the system where the staging environment was           prepared. Start the application instance. Import the project. See  To Import a Project for           details. Explore the project content. Ensure that the project items contain appropriate           data. Publish the project. See  Publishing Customization Projects for details. Test the customization. If you have developed a complex project for an application with multiple customization       projects published and you can't address some issues that have emerged during this stage, try       to perform the original installation with all previous updates, and then upload the saved       content of the current project to the staging environment. ]]></column>
		</row>
		<row PageID="f727bd6c-ce9e-4852-8aab-951a9451978d" Language="en-US" PageRevisionID="1" Content="&#xA;After you tested your customization project, you deploy it to the production environment.{br}&#xA;&#xA;To apply the customization to the production environment, perform the following actions:[anchor|#ol_ej1_v4d_vs]&#xA;#Export the deployment package of the customization project in the development environment. See [HelpRoot_Dev_Customization\CG_GL_Projects_Deploying_Exporting|To Export a Project] for details.&#xA;#Copy the deployment package file to the file system where the production environment is located.&#xA;#Import the project in the production environment, as described in [HelpRoot_Dev_Customization\CG_GL_Projects_Deploying_Importing|To Import a Project].&#xA;#Publish the project in the production environment to apply the customization. See [HelpRoot_Dev_Customization\CG_GL_Projects_Publishing|Publishing Customization Projects] for details.&#xA;&#xA;==Related Articles==&#xA;*[HelpRoot_Dev_Customization\CG_GL_Stages_FindingCustERP|To Detect Whether a Customization Project Is Applied to the Application]" PlainText="To Deploy a Customization Project After you tested your customization project, you deploy it to the production environment. To apply the customization to the production environment, perform the following actions: Export the deployment package of the customization project in the development           environment. See  To Export a Project for details. Copy the deployment package file to the file system where the production environment is           located. Import the project in the production environment, as described in  To Import a Project. Publish the project in the production environment to apply the customization. See  Publishing Customization Projects for details. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="ea54f96a-9a03-bdd9-6c23-28e38873bea6" RecordSourceID="22377" />
		<row PageID="97742b50-af36-4bce-b6fa-344622555beb" Language="en-US" PageRevisionID="1" Content="&#xA; Acumatica provides several pages, where you can ask your questions about customization process.{br}{TOC}&#xA;==Where To Get Support==[anchor|#_b680b3aa-855d-49aa-8b6e-79b2b9f744a6]&#xA;*[http://stackoverflow.com/questions/tagged/acumatica|Stack Overflow] - Use it to ask all possible question and share your knowledge.&#xA;*[https://github.com/acumatica|Git Hub] - Check Acumatica Git Hub to get free examples.&#xA;*[http://asiablog.acumatica.com/|Technical Blog] - Google topics and questions that has been answered already.&#xA;*[https://portal.acumatica.com/|Partner Portal] - Access portal to get updates and support.&#xA;*Your Acumatica support provider.&#xA;" PlainText="Asking Questions  Acumatica provides several pages, where you can ask your questions about customization process. Where To Get Support Stack Overflow Stack Overflow - Use it to ask all possible question and share           your knowledge. Git Hub Git Hub           - Check  Acumatica Git Hub to get free examples. Technical             Blog Technical Blog - Google topics and questions that has been answered already. Partner             Portal Partner Portal - Access portal to get updates and support. Your  Acumatica support provider. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="0a5bc5bf-99bf-5035-581c-330dd8835297" RecordSourceID="22377" />
		<row PageID="5f620d95-62e0-4041-b153-8dee5e519518" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="b725114f-a04b-2679-192f-809759e93751" RecordSourceID="22377">
			<column name="Content"><![CDATA[
To customize Acumatica ERP, you can use the following parts of the Acumatica Customization             Platform:[anchor|#ul_ucw_2h2_jw]
*The web-based [HelpRoot_Dev_Customization\CG_Platform_Tools|Customization Tools] to customize the UI and business logic and to gather the changes into a distributable package that can be deployed to and applied on a target system
*The [HelpRoot_Dev_Customization\CG_Platform_Framework|Customization Framework] to develop customization code that changes the business logic of Acumatica ERP
{br}

Since an instance of Acumatica ERP consists of the website and the database, you can use the platform to customize both of these components. The website customization can include custom DLLs, custom and modified ASPX files, and files with custom C# code that modifies the UI and business logic of the product. The database customization can include changes in both the data and the schema of the database.{br}

This part describes in detail the technologies implemented in the Acumatica Customization             Platform.
==In This Part==[anchor|#ul_s2g_1hl_rp]
*[HelpRoot_Dev_Customization\CG_Platform_Project|Customization Project]
*[HelpRoot_Dev_Customization\CG_Platform_Tools|Customization Tools]
*[HelpRoot_Dev_Customization\CG_Platform_Framework|Customization Framework]
]]></column>
			<column name="PlainText"><![CDATA[ Acumatica Customization             PlatformTo customize  Acumatica ERP, you can use the following parts of the  Acumatica Customization             Platform: The web-based  Customization Tools to customize the UI and business           logic and to gather the changes into a distributable package that can be deployed to and           applied on a target system The  Customization Framework to develop customization code that           changes the business logic of  Acumatica ERPSince an instance of  Acumatica ERP consists of the website and the database, you can use the platform to customize both of       these components. The website customization can include custom DLLs, custom and modified ASPX       files, and files with custom C# code that modifies the UI and business logic of the product.       The database customization can include changes in both the data and the schema of the       database. This part describes in detail the technologies implemented in the  Acumatica Customization             Platform. In This Part Customization ProjectCustomization ToolsCustomization Framework]]></column>
		</row>
		<row PageID="0463a7f0-b67f-4a75-a976-583a2ad8b3d2" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="e22fa32e-05a7-1162-0cfa-94c121a717f5" RecordSourceID="22377">
			<column name="Content"><![CDATA[
When you use the tools provided by the Acumatica Customization             Platform, the platform uses a customization project as a container that holds each change you make during the customization.{br}

An Acumatica Customization                         Project is a set of changes to the user interface, configuration data, and functionality of Acumatica ERP. As the following diagram shows, a customization project might include any of the following:[anchor|#ul_elq_1nc_zw]
*New custom forms and modifications to the existing forms of Acumatica ERP
*Custom C# code
*Custom database scripts
*Custom or modified reports (Acumatica Report                         Designer reports, generic inquiries, and analytical reports)
*Changes in the application configuration (site map changes, new system locales, integration scenarios, shared reusable filters, access rights of roles to forms, changes of wikis) that are saved in the database for the current tenant
*Additional files that you need for Acumatica ERP customization
[anchor|#fig_arx_4vn_tv][anchor|#image_oxz_qvn_tv][image:CustomizationPlatform/images/CG_Platform_CustomizationProject.png|popup|Content of a customization project|450px]{br}

You develop and maintain customization projects by using the tools of the Acumatica Customization             Platform (see [HelpRoot_Dev_Customization\CG_Platform_Tools|Customization Tools] for details). This platform provides the mechanisms to develop, upgrade, publish, unpublish (that is, cancel publication), export, and import a customization project. The content of a customization project is stored in the database of the Acumatica ERP instance.{br}

To perform any customization of the UI or to extend the business logic, you have to create a new customization project or modify an existing one. (See [HelpRoot_Dev_Customization\CG_GL_Projects_Starting_Creating|To Create a New Project] and [HelpRoot_Dev_Customization\CG_GL_Projects_Starting_Selecting|To Select an Existing Project] for details.){br}

Once you have selected a customization project for development, the customizations you perform will be added to this project. The customization project holds each change you make during the customization; however before the project is published, the changes exist only in the project and are not yet applied to the product. To apply the content of a customization project to Acumatica ERP, you have to publish the project.{br}

When you need to apply the developed customization to a target environment, you should add all the changes and additional files to the customization project and export the project as a deployment package—a complete redistributable customization package. Then in the target environment, you import the package and publish the project. {br}

You can create as many customization projects as you need and independently develop and maintain each customization project for a specific customization task.
==In This Chapter==[anchor|#ul_s2g_1hl_rp]
*[HelpRoot_Dev_Customization\CG_Platform_Project_ItemTypes|Types of Items in a Customization Project]
*[HelpRoot_Dev_Customization\CG_Platform_Project_Deployment|Deployment of Customization]
*[HelpRoot_Dev_Customization\CG_Platform_Project_MultiCust|Simultaneous Use of Multiple Customizations]
*[HelpRoot_Dev_Customization\CG_Platform_Project_MultiCompany|Customization of a Multitenant Site]
]]></column>
			<column name="PlainText"><![CDATA[Customization Project When you use the tools provided by the  Acumatica Customization             Platform, the platform uses a customization project as a container that holds each change you make       during the customization. An  Acumatica Customization                         Project       is a set of changes to the user interface, configuration data, and functionality of  Acumatica ERP. As the following diagram shows, a customization project might include any of the         following: New custom forms and modifications to the existing forms of  Acumatica ERPCustom C# code Custom database scripts Custom or modified reports ( Acumatica Report                         Designer reports, generic inquiries, and analytical reports) Changes in the application configuration (site map changes, new system locales,           integration scenarios, shared reusable filters, access rights of roles to forms, changes           of wikis) that are saved in the database for the current tenant Additional files that you need for  Acumatica ERP customization Content of a customization project You develop and maintain customization projects by using the tools of the  Acumatica Customization             Platform (see  Customization Tools for details). This platform provides the       mechanisms to develop, upgrade, publish, unpublish (that is, cancel publication), export, and       import a customization project. The content of a customization project is stored in the       database of the  Acumatica ERP instance. To perform any customization of the UI or to extend the business logic, you have to create a       new customization project or modify an existing one. (See  To Create a New Project and  To Select an Existing Project for details.) Once you have selected a customization project for development, the customizations you       perform will be added to this project. The customization project holds each change you make       during the customization; however before the project is published, the changes exist only in       the project and are not yet applied to the product. To apply the content of a customization       project to  Acumatica ERP, you have to publish the project. When you need to apply the developed customization to a target environment, you should add       all the changes and additional files to the customization project and export the project as a       deployment package—a complete redistributable customization package. Then in the target       environment, you import the package and publish the project.  You can create as many customization projects as you need and independently develop and       maintain each customization project for a specific customization task. In This Chapter Types of Items in a Customization ProjectDeployment of CustomizationSimultaneous Use of Multiple CustomizationsCustomization of a Multitenant Site]]></column>
		</row>
		<row PageID="24df0b38-0393-470d-9211-21a07ded2e1b" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="811a99b6-9505-ad12-9ec0-914f2e631739" RecordSourceID="22377">
			<column name="Content"><![CDATA[
When you customize an instance of Acumatica ERP by using the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor], the platform keeps all items of a customization project as records in the <tt>CustObject</tt> table of the database. Each record in this table keeps the data of an item, including the XML code of the item in a specific field. When you add an item to the customization project, the platform adds the new record to the table, creates the XML code of the item, and stores the code within the <tt>Content</tt> field of the record.((({S:Warn}You can view the content of an item of a customization project by using the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_XML_Item|Item XML Editor] of the Customization Project Editor.
))){br}{TOC}
==XML Code of the Items==
Different item types have XML code that is structured differently. For example, if you create the <tt>UsrPersonalID</tt> bound custom field in the <tt>CR.Contact</tt> DAC (which is mapped to the <tt>SOOrder</tt> table) and the control for the field on the [HelpRoot_FormReference\AR_30_30_00|Customers] ([~/?ScreenId=AR303000|AR303000]) form, the customization project might contain the following new objects:[anchor|#ul_slc_ql2_cw]
*An item with the following XML code to add the column to the DB table.{{{{&lt;Table TableName="Contact"&gt;
  &lt;Column TableName="Contact" ColumnName="UsrPersonalID" ColumnType="string" 
          AllowNull="True" MaxLength="15" DecimalPrecision="2"
          DecimalLength="15" IsNewColumn="True" IsUnicode="True" /&gt;
&lt;/Table&gt;
}}}}
*An item with the following XML code to add the field to the DAC.{{{{&lt;DAC type="PX.Objects.CR.Contact"&gt;
  &lt;Field FieldName="UsrPersonalID" TypeName="string" MapDbTable="Contact" 
         TextAttributes="#CDATA" StorageName="AddColumn"&gt;
    &lt;CDATA name="TextAttributes"&gt;
    &lt;![CDATA[[PXDBString(15)][PXUIField(DisplayName="Personal ID")]]]&gt;&lt;/CDATA&gt;
  &lt;/Field&gt;
&lt;/DAC&gt;
}}}}
*An item with the following XML code to add the control to the form.{{{{&lt;Page path="~/pages/ar/ar303000.aspx" ControlId="5"
      pageSource="...binary content of the page..."&gt;
  &lt;PXFormView ID="DefContact" ParentId="phG_tab_Items#0_DefContact"
              TypeFullName="PX.Web.UI.PXFormView"&gt;
    &lt;Children Key="Template"&gt;
      &lt;AddItem&gt;
        &lt;PXTextEdit TypeFullName="PX.Web.UI.PXTextEdit"&gt;
          &lt;Prop Key="Virtual:ApplyStylesheetSkin" /&gt;
          &lt;Prop Key="ID" Value="CstPXTextEdit2" /&gt;
          &lt;Prop Key="DataField" Value="UsrPersonalID" /&gt;
          &lt;Prop Key="CommitChanges" Value="True" /&gt;
        &lt;/PXTextEdit&gt;
      &lt;/AddItem&gt;
    &lt;/Children&gt;
  &lt;/PXFormView&gt;
&lt;/Page&gt;
}}}}
{br}

Note that the items in these code blocks differ by type (<tt>Table</tt>, <tt>DAC</tt>, and <tt>Page</tt>) and structure.
==Item Types Within a Customization Project==
All the possible types of items in a customization project are summarized in the following table. The value in the '''Can Be Unpublished''' column identifies whether the changes introduced by the item type are reversed when you unpublish the customization project. For details on which changes are reversed, see [HelpRoot_Dev_Customization\CG_GL_Projects_Publishing_UnderstandingCancelling|Unpublishing Customization Projects].[anchor|#table_c1m_rxd_cw]
{| class="checklist" | width="100%" 
|- 
!width="16%" ! Item Type (XML Tag, if differs)
!width="16%" ! Object
!width="32%" ! Description
!width="17%" ! Form for Editing
!width="17%" ! Can Be Unpublished
|- 
| ''Page''
| A custom form, or changes to an existing form
| [anchor|#ul_ery_dfc_qgb]
*For a custom form, the content of the form, and the path to the <tt>.aspx</tt> file of the form (the path is required for the system to detect changes of the file on the file system in the development environment and to deploy the file while publishing the project)
*For an existing form, the layout change instructions and the action change instructions that have to be applied by the platform to the ASPX code of the form during the project publication 

| [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_LayoutEditor|Screen Editor]
| Yes
|- 
| ''AutomationScreenCondition''
| A condition that changes the business logic of a customized screen
| A data set containing a list of conditions for a customized screen
| [HelpRoot_Dev_Customization\CG_Platfrom_Tools_Editor_Conditions|Condition Editor]
| Yes
|- 
| ''AUScreenAction''
| An action that changes the business logic of a customized screen
| A data set containing the properties of an action
| [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_LayoutEditor|Screen Editor]
| Yes
|- 
| 
''AUScreenNavigationAction''
| An action that changes the business logic of a customized screen and navigates to another screen
| A data set containing the properties of an action
| [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_LayoutEditor|Screen Editor]
| Yes
|- 
| ''AutomationScreenField''
| A field to which conditions are applied
| A data set containing the properties of a field
| [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_LayoutEditor|Screen Editor]
| Yes
|- 
| ''DAC''
| Changes to an existing data access class
| The data required to create the corresponding extension for the original data access class
| [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_DataClassEditor|Data Class Editor]
| Yes
|- 
| ''Table''
| Changes to the schema of an existing database table
| A definition of the custom columns added to a table for bound custom fields created in the appropriate DAC
| [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_TableEditor|Table Editor]
| No
|- 
| ''Code'' (<tt>Graph</tt>)
| Custom C# code 
| [anchor|#_830daa43-2740-4f68-8431-38e6ac7059f2]
*A custom DAC, which has the <tt>PX.Data.IBqulTable</tt> base class
*A custom BLC, which has the <tt>PXGraph&lt;&gt;</tt> base class
*An extension for an existing DAC, which has the <tt>PXCacheExtension&lt;&gt;</tt> base class
*An extension for an existing BLC, which has the <tt>PXGraphExtension&lt;&gt;</tt> base class
*A customization plug-in, which has the <tt>CustomizationPlugin</tt> base class
*Any custom class, which has no or any base class

| [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_CodeEditor|Code Editor]
| Yes
|- 
| ''File''
| Custom file
| The path to a custom file and the GUID of the file content in the file storage of the database. The path is relative to the website folder; new custom forms are added to the project as custom files.
| [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_EditFileEditor|File Editor]
| Yes
|- 
| ''GenericInquiryScreen''
| Custom or customized generic inquiry
| A data set of a custom or customized generic inquiry form
| [HelpRoot_FormReference\SM_20_80_00|Generic Inquiry] ([~/?ScreenId=SM208000|SM208000]) form
| No
|- 
| ''Report''
| Custom Acumatica Report                         Designer report
| A data set of a custom report created by using the Acumatica Report                         Designer
|  Acumatica Report                         Designer
| No
|- 
| ''Dashboard''
| Custom or customized dashboard
| A data set of a custom or customized dashboard
| [HelpRoot_FormReference\SM_20_86_00|Dashboards] ([~/?ScreenId=SM208600|SM208600]) form
| No
|- 
| ''SiteMapNode''
| Custom or customized site map node
| A data set of a custom or customized site map node (which includes information about the location of the custom form or report); you should create a custom site map node for each custom form or report included in the customization project
| [HelpRoot_FormReference\SM_20_05_20|Site Map] ([~/?ScreenId=SM200520|SM200520]) form
| No
|- 
| ''Sql''
| Custom SQL script
| A custom database table definition or custom SQL script that has to be executed while the customization project is published
| [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_SQLScriptDlg|SQL Script Editor]
| No
|- 
| ''Locale''
| Custom locale
| A data set of a custom system locale, which is a set of parameters that defines the language and other local preferences—such as how to display numbers, dates, and times in the user interface—for a group of users
| [HelpRoot_FormReference\SM_20_05_50|System Locales] ([~/?ScreenId=SM200550|SM200550]) form
| No
|- 
| ''XportScenario''
| Custom integration scenario
| A data set of a custom export or import scenario used to perform data migration between a legacy application and Acumatica ERP
|  [HelpRoot_FormReference\SM_20_60_25|Import Scenarios] ([~/?ScreenId=SM206025|SM206025]) form and [HelpRoot_FormReference\SM_20_70_25|Export Scenarios] ([~/?ScreenId=SM207025|SM207025]) form
| No
|- 
| ''SharedFilter''
| Custom shared filter
| A data set of a custom reusable shared filter created on a processing or inquiry form
| [HelpRoot_FormReference\CS_20_90_10|Filters] ([~/?ScreenId=CS209010|CS209010]) form
| No
|- 
| ''ScreenWithRights''
| Custom access rights to a form
| A data set of the custom access rights of roles to a form, down to the control of form elements, such as buttons, text boxes, and check boxes
| [HelpRoot_FormReference\SM_20_10_20|Access Rights by Screen] ([~/?ScreenId=SM201020|SM201020]) form
| No
|- 
| ''WikiArticle''
| Custom wiki module
| A data set of a custom wiki and all the articles created within this wiki
| [HelpRoot_FormReference\SM_20_20_05|Wiki] ([~/?ScreenId=SM202005|SM202005]) form
| No
|- 
| ''EntityEndpoint''
| Custom web service endpoint
| A data set of a custom web service endpoint
| [HelpRoot_FormReference\SM_20_70_60|Web Service Endpoints] ([~/?ScreenId=SM207060|SM207060]) form
| No
|- 
| ''ReportDefinition''
| Custom analytical report
| A data set of a custom analytical report, including the data of the predefined sets of rows, columns, and units
| [HelpRoot_FormReference\CS_20_60_00|Report Definitions] ([~/?ScreenId=CS206000|CS206000]) form
| No
|- 
| ''PushNotification''
| Push notification configuration
| A data set that includes the push notification destination and the data query that defines for which data changes Acumatica ERP sends notifications
| [HelpRoot_FormReference\SM_30_20_00|Push Notifications] ([~/?ScreenId=SM302000|SM302000]) form
| No
|- 
| ''BpEvent''
| Business event
| A data set of a business event
| [HelpRoot_FormReference\SM_30_20_50|Business Events] ([~/?ScreenId=SM302050|SM302050]) form
| No
|- 
| ''MobileSiteMap''
| Mobile app screen
| A script for adding or changing a mobile app screen
| [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_MobileAppEditor|Mobile App Editor]
| Yes
|- 
| ''CSAttribute''
| User-Defined Field
| A data set of a user-defined field with a list of screens on which the field is displayed
| User-Defined Fields Editor
| Yes
|}]]></column>
			<column name="PlainText"><![CDATA[Types of Items in a Customization Project When you customize an instance of  Acumatica ERP by using the   Customization Project                         Editor, the platform keeps all items         of a customization project as records in the  CustObject  table of the         database. Each record in this table keeps the data of an item, including the XML code of the         item in a specific field. When you add an item to the customization project, the platform         adds the new record to the table, creates the XML code of the item, and stores the code         within the  Content  field of the record. You can view the content of           an item of a customization project by using the  Item XML Editor of the  Customization Project Editor. XML Code of the Items Different item types have XML code that is structured differently. For example, if you         create the  UsrPersonalID  bound custom field in the            CR.Contact  DAC (which is mapped to the  SOOrder          table) and the control for the field on the   ([~/?ScreenId=AR303000|AR303000]) Customers (AR303000) form, the customization project might contain the following new           objects: An item with the following XML code to add the column to the DB             table. <Table TableName="Contact">
  <Column TableName="Contact" ColumnName="UsrPersonalID" ColumnType="string" 
          AllowNull="True" MaxLength="15" DecimalPrecision="2"
          DecimalLength="15" IsNewColumn="True" IsUnicode="True" />
</Table> An item with the following XML code to add the field to the             DAC. <DAC type="PX.Objects.CR.Contact">
  <Field FieldName="UsrPersonalID" TypeName="string" MapDbTable="Contact" 
         TextAttributes="#CDATA" StorageName="AddColumn">
    <CDATA name="TextAttributes">
    <![CDATA[[PXDBString(15)][PXUIField(DisplayName="Personal ID")]]]]]><![CDATA[></CDATA>
  </Field>
</DAC> An item with the following XML code to add the control to the             form. <Page path="~/pages/ar/ar303000.aspx" ControlId="5"
      pageSource="...binary content of the page...">
  <PXFormView ID="DefContact" ParentId="phG_tab_Items#0_DefContact"
              TypeFullName="PX.Web.UI.PXFormView">
    <Children Key="Template">
      <AddItem>
        <PXTextEdit TypeFullName="PX.Web.UI.PXTextEdit">
          <Prop Key="Virtual:ApplyStylesheetSkin" />
          <Prop Key="ID" Value="CstPXTextEdit2" />
          <Prop Key="DataField" Value="UsrPersonalID" />
          <Prop Key="CommitChanges" Value="True" />
        </PXTextEdit>
      </AddItem>
    </Children>
  </PXFormView>
</Page> Note that the items in these code blocks differ by type ( Table ,            DAC , and  Page ) and structure. Item Types Within a Customization Project All the possible types of items in a customization project are summarized in the following         table. The value in the  Can Be Unpublished  column identifies whether the changes         introduced by the item type are reversed when you unpublish the customization project. For         details on which changes are reversed, see  Unpublishing Customization Projects. Item Type (XML Tag, if differs) Object Description Form for Editing Can Be Unpublished Page A custom form, or changes to an existing form For a custom form, the content of the form, and the path to the                          .aspx  file of the form (the path is required for the                       system to detect changes of the file on the file system in the development                       environment and to deploy the file while publishing the project) For an existing form, the layout change instructions and the action change                       instructions that have to be applied by the platform to the ASPX code of the                       form during the project publication  Screen EditorYes AutomationScreenCondition A condition that changes the business logic of a customized screen A data set containing a list of conditions for a customized screen Condition EditorYes AUScreenAction An action that changes the business logic of a customized screen A data set containing the properties of an action Screen EditorYes AUScreenNavigationAction An action that changes the business logic of a customized screen and                   navigates to another screen A data set containing the properties of an action Screen EditorYes AutomationScreenField A field to which conditions are applied A data set containing the properties of a field Screen EditorYes DAC Changes to an existing data access class The data required to create the corresponding extension for the original data                   access class Data Class EditorYes Table Changes to the schema of an existing database table A definition of the custom columns added to a table for bound custom fields                   created in the appropriate DAC Table EditorNo Code  ( Graph ) Custom C# code  A custom DAC, which has the  PX.Data.IBqulTable  base                       class A custom BLC, which has the  PXGraph<>  base class An extension for an existing DAC, which has the                          PXCacheExtension<>  base class An extension for an existing BLC, which has the                          PXGraphExtension<>  base class A customization plug-in, which has the                          CustomizationPlugin  base class Any custom class, which has no or any base class Code EditorYes File Custom file The path to a custom file and the GUID of the file content in the file                   storage of the database. The path is relative to the website folder; new custom                   forms are added to the project as custom files. File EditorYes GenericInquiryScreen Custom or customized generic inquiry A data set of a custom or customized generic inquiry form  ([~/?ScreenId=SM208000|SM208000]) Generic Inquiry (SM208000) form No Report Custom  Acumatica Report                         Designer report A data set of a custom report created by using the  Acumatica Report                         Designer Acumatica Report                         DesignerNo Dashboard Custom or customized dashboard A data set of a custom or customized dashboard  ([~/?ScreenId=SM208600|SM208600]) Dashboards (SM208600) form No SiteMapNode Custom or customized site map node A data set of a custom or customized site map node (which includes                   information about the location of the custom form or report); you should create a                   custom site map node for each custom form or report included in the customization                   project  ([~/?ScreenId=SM200520|SM200520]) Site Map (SM200520) form No Sql Custom SQL script A custom database table definition or custom SQL script that has to be                   executed while the customization project is published SQL Script EditorNo Locale Custom locale A data set of a custom system locale, which is a set of parameters that                   defines the language and other local preferences—such as how to display numbers,                   dates, and times in the user interface—for a group of users  ([~/?ScreenId=SM200550|SM200550]) System Locales (SM200550) form No XportScenario Custom integration scenario A data set of a custom export or import scenario used to perform data                   migration between a legacy application and  Acumatica ERP ([~/?ScreenId=SM206025|SM206025]) Import Scenarios (SM206025) form and   ([~/?ScreenId=SM207025|SM207025]) Export Scenarios (SM207025) form No SharedFilter Custom shared filter A data set of a custom reusable shared filter created on a processing or                   inquiry form  ([~/?ScreenId=CS209010|CS209010]) Filters (CS209010) form No ScreenWithRights Custom access rights to a form A data set of the custom access rights of roles to a form, down to the                   control of form elements, such as buttons, text boxes, and check boxes  ([~/?ScreenId=SM201020|SM201020]) Access Rights by Screen (SM201020) form No WikiArticle Custom wiki module A data set of a custom wiki and all the articles created within this                   wiki  ([~/?ScreenId=SM202005|SM202005]) Wiki (SM202005) form No EntityEndpoint Custom web service endpoint A data set of a custom web service endpoint  ([~/?ScreenId=SM207060|SM207060]) Web Service Endpoints (SM207060) form No ReportDefinition Custom analytical report A data set of a custom analytical report, including the data of the                   predefined sets of rows, columns, and units  ([~/?ScreenId=CS206000|CS206000]) Report Definitions (CS206000) form No PushNotification Push notification configuration A data set that includes the push notification destination and the data query                   that defines for which data changes  Acumatica ERP sends notifications  ([~/?ScreenId=SM302000|SM302000]) Push Notifications                   (SM302000) form No BpEvent Business event A data set of a business event  ([~/?ScreenId=SM302050|SM302050]) Business Events (SM302050) form No MobileSiteMap Mobile app screen A script for adding or changing a mobile app screen Mobile App EditorYes CSAttribute User-Defined Field A data set of a user-defined field with a list of screens on which the field                   is displayed User-Defined Fields Editor Yes ]]></column>
		</row>
		<row PageID="2724d9c3-d60e-4e3d-8e54-f2613c343ed6" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="c611c4c0-4e00-276b-03a0-5c0a28961dbb" RecordSourceID="22377">
			<column name="Content"><![CDATA[
Once you have finished a customization project, you can export the project as a deployment package that can be then imported and published as a customization on the end-user systems, as shown in the following diagram.[anchor|#fig_hzq_whq_qr][anchor|#image_sch_13q_qr][image:CustomizationPlatform/images/dev_targ_systems.png|popup|Deployment of customization to target systems|450px]{br}

A deployment package is a redistributable <tt>.zip</tt> file that includes the full content of a customization project. A deployment package consists of the <tt>project.xml</tt> file and any custom files that you have added to the project, such as external assemblies and custom ASPX pages. You can manually edit the <tt>project.xml</tt> file in an XML Editor in the file system. However we recommend that you modify the project items in the easiest and most reliable way: by using the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor].{br}

When the project is finished, you can download the deployment package to deploy the customization to the target system (see [HelpRoot_Dev_Customization\CG_GL_Projects_Deploying_Exporting|To Export a Project] for details). If you have finished the project, we recommend that you publish the project and test the customization before downloading the deployment package, to ensure that you have no issues. Also, you can download the package to have a backup copy of the customization project you are working on.{br}

You can import a deployment package to work with the customization project or to publish the final customization on the target website (see [HelpRoot_Dev_Customization\CG_GL_Projects_Deploying_Importing|To Import a Project] for details).((({S:Warn}In MySQL, the maximum size of one packet that can be transmitted to or from a server is 4MB by default. If you use MySQL and want to manage a customization project with the size that is larger than the default maximum value, you have to increase the <tt>max&#95;allowed&#95;packet</tt> variable in the server. The largest possible packet size is 1GB.
)))]]></column>
			<column name="PlainText"><![CDATA[Deployment of Customization Once you have finished a customization project, you can export the project as a deployment    package that can be then imported and published as a customization on the end-user systems, as    shown in the following diagram. Deployment of customization to target systems A deployment package is a redistributable  .zip  file that includes the full    content of a customization project. A deployment package consists of the      project.xml  file and any custom files that you have added to the project,    such as external assemblies and custom ASPX pages. You can manually edit the      project.xml  file in an XML Editor in the file system. However we recommend    that you modify the project items in the easiest and most reliable way: by using the   Customization Project                         Editor. When the project is finished, you can download the deployment package to deploy the    customization to the target system (see  To Export a Project    for details). If you have finished the project, we recommend that you publish the project and    test the customization before downloading the deployment package, to ensure that you have no    issues. Also, you can download the package to have a backup copy of the customization project you    are working on. You can import a deployment package to work with the customization project or to publish the    final customization on the target website (see  To Import a Project for details). In MySQL, the maximum size     of one packet that can be transmitted to or from a server is 4MB by default. If you use MySQL     and want to manage a customization project with the size that is larger than the default maximum     value, you have to increase the  max_allowed_packet  variable in the server.     The largest possible packet size is 1GB. ]]></column>
		</row>
		<row PageID="d9d57482-8c8f-4f29-9168-b56b81834d9e" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="eee3139d-bebb-ecaa-f4bb-d9fdd03c430c" RecordSourceID="22377">
			<column name="Content"><![CDATA[
With the Acumatica Customization             Platform, you can simultaneously manage multiple customizations by using the [HelpRoot_FormReference\SM_20_45_05|Customization Projects] ([~/?ScreenId=SM204505|SM204505]) form, also described in [HelpRoot_Dev_Customization\CG_Platform_Tools_SM204505|Customization Projects Form ]. You can publish multiple customization projects to an Acumatica ERP instance at once.{br}

When you publish more that one customization project, the platform merges the content of all projects into a single customization project. If different projects include customization for the same object, the platform tries to merge the changes by using the following approach:[anchor|#ul_jgs_pzf_1w]
*If the changes can be merged, the platform merges them. For example, the platform can merge different properties of the same control in an ASPX page.
*If the changes cannot be merged, as with the same report being in different customization projects, the platform stops the process and displays an error message. 
{br}

On the [HelpRoot_FormReference\SM_20_45_05|Customization Projects] form, you can specify an optional number (level) for each customization project, assigning the highest number to the most important change. The level can be used to resolve conflicts that arise while you are publishing customization projects if multiple modifications of the same objects of an Acumatica ERP instance are merged. As a result, the customization from the project with the highest level is added to the merged project.{br}

Multilevel customizations might be required when you develop an off-the-shelf customization solution that is distributed in multiple editions, or applications that extend the functionality of Acumatica ERP or other software based on Acumatica Framework in multiple markets. You may have a customization that contains a solution common to all markets as well as multiple market-specific customizations, each of which is deployed along with the base customization. Moreover, you can later apply a high-level project to customize deployed solutions for the end user.{br}

However if you have multiple customizations of the same object and have no market requirements to keep multilevel customizations, we recommend that you merge the customizations into a single customization project, as described in [HelpRoot_Dev_Customization\CG_GL_Projects_ManagingMultiple_Merge|To Merge Multiple Projects].]]></column>
			<column name="PlainText"><![CDATA[Simultaneous Use of Multiple Customizations With the  Acumatica Customization             Platform, you can simultaneously manage multiple customizations by using the   ([~/?ScreenId=SM204505|SM204505]) Customization Projects (SM204505) form, also described in  Customization Projects Form . You can publish multiple customization projects to an      Acumatica ERP instance at once. When you publish more that one customization project, the platform merges the content of all    projects into a single customization project. If different projects include customization for the    same object, the platform tries to merge the changes by using the following approach: If the changes can be merged, the platform merges them. For example, the platform can merge      different properties of the same control in an ASPX page. If the changes cannot be merged, as with the same report being in different customization      projects, the platform stops the process and displays an error message.  On the   ([~/?ScreenId=SM204505|SM204505]) Customization Projects form, you can specify an    optional number (level) for each customization project, assigning the highest number to the most    important change. The level can be used to resolve conflicts that arise while you are publishing    customization projects if multiple modifications of the same objects of an  Acumatica ERP    instance are merged. As a result, the customization from the project with the highest level is    added to the merged project. Multilevel customizations might be required when you develop an off-the-shelf customization    solution that is distributed in multiple editions, or applications that extend the functionality    of  Acumatica ERP or    other software based on  Acumatica Framework in    multiple markets. You may have a customization that contains a solution common to all markets as    well as multiple market-specific customizations, each of which is deployed along with the base    customization. Moreover, you can later apply a high-level project to customize deployed solutions    for the end user. However if you have multiple customizations of the same object and have no market requirements    to keep multilevel customizations, we recommend that you merge the customizations into a single    customization project, as described in  To Merge Multiple Projects. ]]></column>
		</row>
		<row PageID="d1afb862-c7fe-4257-9978-886c7b05746a" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="ed74993d-c12b-2f4e-15f2-9dd8f0805a09" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The data of each tenant that uses the same instance of Acumatica ERP is isolated in the database.{br}

Because a customization project is stored in the database, by default, the project data belongs to the tenant in which the project is created or imported. When the project is published, the customization applies to both the website files and the database. Because a customization project can contain different types of items, the platform uses a specific approach to apply each type of items to the website, database schema, and database data.{br}

Initially the ''Page'', ''DAC'', ''Table'', ''SQL'', and ''Code'' items of a customization project are stored in the database for a single tenant. However, while the project is being published, the platform creates certain files for these items in the website folder or changes the database schema, if required. The new files and the changed database schema are available from other tenants. As a result, the listed item types are applied for multiple tenants.{br}

During the publication of the project, for each ''File'' item, the platform creates the file in the file system, so ''File'' items are shared for multiple tenants as well.{br}

For example, suppose you have logged in to the ''MyTenant'' tenant and have a customization project that contains only items of the ''Page'', ''DAC'', ''Table'', ''Code'', and ''File'' types. After you have published the project, the customization is applied to each tenant in the instance of Acumatica ERP. But the customization project data is still available only in the ''MyTenant'' tenant.{br}

However if you publish a customization project that contains items of other types (such as generic inquiries and access rights of roles to forms), the customization does not apply to the website files or to the database schema. This data is stored only in the database, and the application server uses the data from the database at run time. Because this data is tenant-specific, it is available in only the tenant where it was published. Moreover, for all tenants that use the same site, on the Login form and in the '''About Acumatica''' box, you can see that the website is customized, but you won&rsquo;t see any published project on the [HelpRoot_FormReference\SM_20_45_05|Customization Projects] ([~/?ScreenId=SM204505|SM204505]) form. This form, also described in [HelpRoot_Dev_Customization\CG_Platform_Tools_SM204505|Customization Projects Form ], displays the customization projects that have been uploaded to the current tenant; therefore, no projects are displayed if they have been uploaded and published under another tenant.{br}

You can publish multiple customization projects for multiple tenants at once. On the [HelpRoot_FormReference\SM_20_45_05|Customization Projects] form, you can select the customization projects that you need to publish for multiple tenants and use the '''Publish to Multiple Tenants''' action to open the '''Publish to Multiple Tenants''' dialog box. You then select the required tenants and apply the selected customization projects to the selected tenants. (See [HelpRoot_Dev_Customization\CG_GL_Projects_MultiCompany|To Publish a Customization for a Multitenant Site] for details.){br}

The following table shows the differences in applying a customization to a multitenant website if the customization that has been published from another tenant is shared or not shared for your tenant.[anchor|#table_jxk_n1b_nw]
{| class="checklist" | width="100%" 
|- 
!width="60%" ! Question
!width="20%" ! Customization published for a multitenant site from another tenant is shared for your tenant
!width="20%" ! Customization published for a multitenant site from another tenant is NOT shared for your tenant
|- 
| Is the customization applied to the application instance (see [HelpRoot_Dev_Customization\CG_GL_Stages_FindingCustERP|To Detect Whether a Customization Project Is Applied to the Application] for more information) for your tenant?
| Yes
| Yes
|- 
| Do changes in the file system (''Page'', ''DAC'', and ''Code'' items) exist for your tenant?
| Yes
| Yes
|- 
| Do changes of the database schema (''Table'' and ''SQL'' items) exist for your tenant?
| Yes
| Yes
|- 
| Do custom reports and configuration (such items as ''Report'', ''SiteMapNode'', and ''SharedFilter'') exist for your tenant?
| Yes
| '''No'''
|- 
| Does the project list on the [HelpRoot_FormReference\SM_20_45_05|Customization Projects] form contain the project? (That is, can you access the customization project data from your tenant?)
| '''No'''
|  '''No'''
|- 
| Is it necessary to import the customization package to access the customization project data from your tenant?
| Yes
| Yes
|- 
| After the customization package is imported for your tenant and added to the list on the [HelpRoot_FormReference\SM_20_45_05|Customization Projects] form, is the project displayed in the list as an already published one?
| Yes
| '''No'''
|}]]></column>
			<column name="PlainText"><![CDATA[Customization of a Multitenant Site The data of each tenant that uses the same instance of  Acumatica ERP is    isolated in the database. Because a customization project is stored in the database, by default, the project data belongs    to the tenant in which the project is created or imported. When the project is published, the    customization applies to both the website files and the database. Because a customization project    can contain different types of items, the platform uses a specific approach to apply each type of    items to the website, database schema, and database data. Initially the  Page ,  DAC ,  Table ,  SQL , and  Code  items of a    customization project are stored in the database for a single tenant. However, while the project    is being published, the platform creates certain files for these items in the website folder or    changes the database schema, if required. The new files and the changed database schema are    available from other tenants. As a result, the listed item types are applied for multiple    tenants. During the publication of the project, for each  File  item, the platform creates the file    in the file system, so  File  items are shared for multiple tenants as well. For example, suppose you have logged in to the  MyTenant  tenant and have a customization    project that contains only items of the  Page ,  DAC ,  Table ,  Code , and      File  types. After you have published the project, the customization is applied to each    tenant in the instance of  Acumatica ERP.    But the customization project data is still available only in the  MyTenant  tenant. However if you publish a customization project that contains items of other types (such as    generic inquiries and access rights of roles to forms), the customization does not apply to the    website files or to the database schema. This data is stored only in the database, and the    application server uses the data from the database at run time. Because this data is    tenant-specific, it is available in only the tenant where it was published. Moreover, for all    tenants that use the same site, on the Login form and in the  About     Acumatica  box, you can see that the website is customized, but you won't see any    published project on the   ([~/?ScreenId=SM204505|SM204505]) Customization Projects (SM204505)    form. This form, also described in  Customization Projects Form , displays the    customization projects that have been uploaded to the current tenant; therefore, no projects are    displayed if they have been uploaded and published under another tenant. You can publish multiple customization projects for multiple tenants at once. On the   ([~/?ScreenId=SM204505|SM204505]) Customization Projects form, you can select the customization    projects that you need to publish for multiple tenants and use the  Publish to Multiple     Tenants  action to open the  Publish to Multiple Tenants  dialog    box. You then select the required tenants and apply the selected customization projects to the    selected tenants. (See  To Publish a Customization for a Multitenant Site for details.) The following table shows the differences in applying a customization to a multitenant website    if the customization that has been published from another tenant is shared or not shared for your     tenant. Question Customization published for a multitenant site from another tenant is shared for your         tenant Customization published for a multitenant site from another tenant is NOT shared for         your tenant Is the customization applied to the application instance (see  To Detect Whether a Customization Project Is Applied to the Application for more information) for your tenant? Yes Yes Do changes in the file system ( Page ,  DAC , and  Code  items) exist         for your tenant? Yes Yes Do changes of the database schema ( Table  and  SQL  items) exist for your         tenant? Yes Yes Do custom reports and configuration (such items as  Report ,  SiteMapNode ,         and  SharedFilter ) exist for your tenant? Yes No Does the project list on the   ([~/?ScreenId=SM204505|SM204505]) Customization Projects form contain the project? (That is, can you access the customization project data from         your tenant?) No No Is it necessary to import the customization package to access the customization         project data from your tenant? Yes Yes After the customization package is imported for your tenant and added to the list on         the   ([~/?ScreenId=SM204505|SM204505]) Customization Projects form, is the project         displayed in the list as an already published one? Yes No ]]></column>
		</row>
		<row PageID="f048f674-63dc-4ad4-b2ba-4b7ec43cfc95" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="1a96b729-ef78-5da8-d901-511426216fd4" RecordSourceID="22377">
			<column name="Content"><![CDATA[
A customization project must meet various technical requirements to integrate with and operate within the Acumatica ERP application.{br}{TOC}
==Acumatica ERP Capabilities to Validate and Check Customization Project Items==
To help to develop a customization project that complies with this technical requirements and to help to check the project for compliance with this requirements Acumatica ERP and Customization Project Editor provide the following functionality:[anchor|#_5bb0097d-f9f4-452f-b90e-adeb1f8e952c]
#Definition of a prefix for the project. All project item names must start with this prefix. You can define this prefix in the Customization Project Editor. For details on defining the project prefix, see [HelpRoot_Dev_Customization\CG_GL_Stages_ValidatingProject|To Manage Prefixes in a Customization Project ].
#Validation of one customization project or multiple customization projects, causing the platform to check the following criteria:
#*The database schema changes included in a customization project are valid
#*The customization project doesn&rsquo;t replace or modify the files distributed as part of the standard Acumatica ERP application.
#*The data types of a custom database column correspond to all data access class (DAC) fields bound to it.
#:((({S:Warn}These types of validations should be applied to ISV solutions only.
You can perform this type of validation on the Customization Projects (SM204505) form by using the '''Validations''' menu on the form toolbar. In the menu, you select the '''Validate Highlighted Project''' or '''Validate Multiple Projects''' menu command, depending on whether you want to validate one project or multiple projects correspondingly.
)))
#Validation of the data consistency in published customization projects, which verifies the correspondence between the data types of DAC fields and field states generated by field attributes at run time. To perform this validation, you invoke the menu commands on the '''Validations''' menu on the form toolbar of the Customization Projects (SM204505) form as follows:
#*To verify that the data type of a DAC field matches with the field states generated at run time, select '''Validations''' > '''DAC Field Types'''.
#*To determine whether there are any <tt>PXAttributeFamilyAttribute</tt> violations on a DAC field, select '''Validations''' > '''DAC Attributes'''. 
#*To verify that DAC fields with lookup boxes defined for a segmented key properly handle foreign key segments by means of <tt>PXDimensionAttribute</tt>, select '''Validations''' > '''Lookup Definitions'''. 
#Analysis of custom files included in the customization project. 
#:You can analyze custom files (assemblies) included in the customization project to verify that the customization project doesn&rsquo;t replace or modify files that are distributed as part of the standard Acumatica ERP application. To do this, in the main menu of the Customization Project Editor, select '''Extension Library &gt; Analyze Referenced Assemblies'''. A CSV is downloaded with all references made in the project&rsquo;s custom files.
#Generation of a Workbook with Project Items in Excel format. You can generate this workbook, which is in Excel format, in the Customization Project Editor by selecting '''File &gt; Export Project Items Workbook'''. 
#:The generated workbook contains a list of solution objects and integration scenarios grouped by the following types:
#*Site map nodes
#*Mobile site map nodes
#*BLСs and BLC extensions
#*DACs and DAC extensions
#*Push notifications
#*Import or export scenarios

==Customization as Part of an ISV Solution==
The validation of a customization project is especially important when a customization project is part of an independent software vendor (ISV) solution.{br}

To see technical requirements for a project in the ''ISV Software Certification Program'' guidelines, go to Acumatica Partner Portal, open the Partner Program section, and click the Acumatica ISV Solution Certification link in the left pane. 
==Format of the Validation Results ==
If any errors or warnings have been detected during project validation, the validation results have the following format:[anchor|#_4702b5fd-2e4b-49fb-b7df-b04df9f123cc]
*&lt;CustomizationProjectName&gt;
**&lt;CustomizationRuleName&gt;
***&lt;PathToTheDLL&gt; | &lt;ProjectItemType&gt; | &lt;NameOfTheProjectItem&gt;
***:List of rules broken by the specified item.((({S:Warn}The<tt> &lt;PathToTheDLL&gt;</tt> field is optional. It appears only if a {{dll}} file included in the project is analyzed.
)))
]]></column>
			<column name="PlainText"><![CDATA[Validation of a Customization Project A customization project must meet various technical requirements to integrate with and         operate within the  Acumatica ERP application. Acumatica ERP Capabilities to Validate and Check Customization Project Items To         help to develop a customization project that complies with this technical requirements and         to help to check the project for compliance with this requirements  Acumatica ERP and Customization Project Editor provide the following           functionality: Definition of a prefix for the project. All project item names must start with this             prefix. You can define this prefix in the Customization Project Editor. For details on             defining the project prefix, see  To Manage Prefixes in a Customization Project . Validation of one customization project or multiple customization projects, causing             the platform to check the following criteria: The database schema changes included in a customization project are valid The customization project doesn't replace or modify the files distributed as part                 of the standard  Acumatica ERP application. The data types of a custom database column correspond to all data access class                 (DAC) fields bound to it. These types of validations should be applied to ISV solutions only. You can                 perform this type of validation on the Customization Projects (SM204505) form by                 using the  Validations  menu on the form toolbar. In the menu,                 you select the  Validate Highlighted Project  or                    Validate Multiple Projects  menu command, depending on                 whether you want to validate one project or multiple projects               correspondingly. Validation of the data consistency in published customization projects, which verifies             the correspondence between the data types of DAC fields and field states generated by             field attributes at run time. To perform this validation, you invoke the menu commands             on the  Validations  menu on the form toolbar of the Customization             Projects (SM204505) form as follows: To verify that the data type of a DAC field matches with the field states                 generated at run time, select  Validations DAC Field Types . To determine whether there are any  PXAttributeFamilyAttribute                  violations on a DAC field, select  Validations DAC Attributes .  To verify that DAC fields with lookup boxes defined for a segmented key properly                 handle foreign key segments by means of  PXDimensionAttribute ,                 select  Validations Lookup Definitions .  Analysis of custom files included in the customization project.  You can analyze               custom files (assemblies) included in the customization project to verify that the               customization project doesn't replace or modify files that are distributed as part of               the standard  Acumatica ERP application. To do this, in the main menu of the Customization Project Editor,               select  Extension Library > Analyze Referenced Assemblies . A CSV is downloaded with all references made in the project's custom               files. Generation of a Workbook with Project Items in Excel format. You can generate this             workbook, which is in Excel format, in the Customization Project Editor by selecting  File > Export Project Items Workbook .  The generated workbook contains a list of solution objects and               integration scenarios grouped by the following types: Site map nodes Mobile site map nodes BLСs and BLC extensions DACs and DAC extensions Push notifications Import or export scenarios Customization as Part of an ISV Solution The validation of a customization project is especially important when a customization         project is part of an independent software vendor (ISV) solution. To see technical requirements for a project in the  ISV Software Certification           Program  guidelines, go to Acumatica Partner Portal, open the Partner Program section,         and click the Acumatica ISV Solution Certification link in the left pane.  Format of the Validation Results  If any errors or warnings have been detected during project validation, the validation         results have the following format: <CustomizationProjectName> <CustomizationRuleName> <PathToTheDLL> | <ProjectItemType> | <NameOfTheProjectItem> List of                       rules broken by the specified item. The                            <PathToTheDLL>  field is optional. It appears only if a                            dll  file included in the project is                     analyzed. ]]></column>
		</row>
		<row PageID="e3e48af1-d660-4bc8-9dcb-5013b6901596" Language="en-US" PageRevisionID="1" PlainText="Customization Tools Depending on the complexity of the particular customization task, you can employ any the         tools implemented in the  Acumatica Customization             Platform. For every type of customization, you can use the tools described in the following           topics: Customization Projects Form Customization MenuElement Inspector Customization Project                         EditorScreen EditorASPX EditorData Class EditorCode EditorFile EditorSQL Script EditorXML EditorsProject XML EditorItem XML EditorSource Code Browser" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="bac24670-dc7f-e351-cfe6-86f05e9291b7" RecordSourceID="22377">
			<column name="Content"><![CDATA[
Depending on the complexity of the particular customization task, you can employ any the tools implemented in the Acumatica Customization             Platform.{br}

For every type of customization, you can use the tools described in the following topics:[anchor|#ul_rrr_t3r_5v]
*[HelpRoot_Dev_Customization\CG_Platform_Tools_SM204505|Customization Projects Form ]
*[HelpRoot_Dev_Customization\CG_Platform_Tools_Menu|Customization Menu]
*[HelpRoot_Dev_Customization\CG_Platform_Tools_Inspector|Element Inspector]
*[HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor]
**[HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_LayoutEditor|Screen Editor]
***[HelpRoot_Dev_Customization\CG_Platform_Tools_ASPXEditor|ASPX Editor]
**[HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_DataClassEditor|Data Class Editor]
**[HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_CodeEditor|Code Editor]
**[HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_EditFileEditor|File Editor]
**[HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_SQLScriptDlg|SQL Script Editor]
**[HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_XMLEditor|XML Editors]
***[HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_XML_Project|Project XML Editor]
***[HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_XML_Item|Item XML Editor]
*[HelpRoot_Dev_Customization\CG_Platform_Tools_SM204570|Source Code Browser]
]]></column>
		</row>
		<row PageID="9bc5ef17-b2cb-4a23-93de-c82aca19f605" Language="en-US" PageRevisionID="1" PlainText="Customization Projects Form  The  Acumatica Customization             Platform stores the data of the customization projects that were created or imported in the database       of the instance of  Acumatica ERP. You can manage customization projects on the   ([~/?ScreenId=SM204505|SM204505]) Customization Projects (SM204505) form, which is shown in the following screenshot.  Viewing the Customization Projects form On this form, you can add a new customization project, open a customization project for       editing in   Customization Project                         Editor, publish any number of customization       projects, cancel the publication of customization projects, export a customization project as       the deployment package, import a customization project from an existing deployment package,       and delete a customization project. (See  Managing Customization Projects for       instructions.) " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="6aeca298-2ecf-a472-d2ce-093551846056" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The Acumatica Customization             Platform stores the data of the customization projects that were created or imported in the database of the instance of Acumatica ERP.{br}

You can manage customization projects on the [HelpRoot_FormReference\SM_20_45_05|Customization Projects] ([~/?ScreenId=SM204505|SM204505]) form, which is shown in the following screenshot. [anchor|#fig_fcf_wsl_1w][anchor|#image_a3y_2r2_fq][image:CustomizationPlatform/images/CG_Platform_Tools_SM204505.png|popup|Viewing the Customization Projects form|450px]On this form, you can add a new customization project, open a customization project for editing in [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor], publish any number of customization projects, cancel the publication of customization projects, export a customization project as the deployment package, import a customization project from an existing deployment package, and delete a customization project. (See [HelpRoot_Dev_Customization\CG_GL_Projects|Managing Customization Projects] for instructions.)]]></column>
		</row>
		<row PageID="d1e06db7-4ac6-4e89-aa95-306739d05dbe" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="5173d6f7-d032-6837-6927-14350139771d" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The Published Customization page of the [HelpRoot_FormReference\SM_20_45_05|Customization Projects] ([~/?ScreenId=SM204505|SM204505]) form shows the merged XML code of the customization projects that are currently published. On the Published Customization page, you can:[anchor|#ul_hhw_g21_rr]
*View the code.
*Download the deployment package that contains the code.
{br}

The following screenshot shows the merged project, which contains customizations introduced by two different projects for the forms with the CR303010 and PO301000 identifiers.[anchor|#fig_ffq_tcb_sr][anchor|#image_r1j_zcb_sr][image:CustomizationPlatform/images/CG_Platform_Tools_SM204505_Published.png|popup|Viewing the merged XML code of the published customization projects|450px]{br}

The Published Customization page includes a toolbar and a text area for viewing XML code. The text area displays the XML content of a merged customization project. This area is not used for editing the XML code.{br}

The toolbar buttons of this page are described in the following table.[anchor|#table_scl_zdb_sr]
{| class="checklist" | width="100%" 
|- 
!width="20%" ! Button
!width="80%" ! Description
|- 
| '''Save to database'''
| Is not used.
|- 
| '''Download Package'''
| Downloads the <tt>Customization.zip</tt> file, which includes the full content of the merged customization project. You can use this file as a joint deployment package to work with the customization project or to publish the final customization on the target website. See [HelpRoot_Dev_Customization\CG_GL_Projects_ManagingMultiple_Merge|To Merge Multiple Projects] for details.
|- 
| '''Upload Package'''
| Is not used.
|- 
| '''Choose File'''
| Is not used.
|}]]></column>
			<column name="PlainText"><![CDATA[Published Customization Page The Published Customization page of the   ([~/?ScreenId=SM204505|SM204505]) Customization Projects (SM204505) form shows the merged XML code of the customization projects that    are currently published. On the Published Customization page, you can: View the code. Download the deployment package that contains the code. The following screenshot shows the merged project, which contains customizations introduced by    two different projects for the forms with the CR303010 and PO301000 identifiers. Viewing the merged XML code of the published customization projects The Published Customization page includes a toolbar and a text area for viewing XML code. The    text area displays the XML content of a merged customization project. This area is not used for    editing the XML code. The toolbar buttons of this page are described in the following table. Button Description Save to database Is not used. Download Package Downloads the  Customization.zip  file, which includes the full         content of the merged customization project. You can use this file as a joint deployment         package to work with the customization project or to publish the final customization on the         target website. See  To Merge Multiple Projects for         details. Upload Package Is not used. Choose File Is not used. ]]></column>
		</row>
		<row PageID="a0971a23-98ae-4249-b1cb-e326c007e6ba" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="3d519892-dd3d-3a63-c603-8d324686d898" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can access the '''Customization''' menu on an opened Acumatica ERP form if you have the ''Customizer'' role. (For details, see [HelpRoot_Dev_Customization\CG_GL_Stages_Role|To Assign the Customizer Role to a User Account].){br}

Click '''Customization''' on the form to access the '''Customization''' menu associated with the form, as shown in the following screenshot.[anchor|#_e1fc3e23-1060-4810-9fe4-62fcf1809b03][anchor|#_a2c50020-a317-4184-92b9-a0bc1ce8c101][image:CustomizationPlatform/images/CG_Platform_Tools_Menu_New.png|popup|450px]
You can use the following customization-related menu commands.[anchor|#table_dm3_brb_tl]
{| class="checklist" | width="100%" 
|- 
!width="20%" ! Command
!width="80%" ! Description
|- 
| '''Select Project'''
| 
Opens the [HelpRoot_Dev_Customization\CG_Platform_Tools_Menu_SelectCustProjDlg|Select Customization Project Dialog Box], which you use to select an existing customization project or to create a new project for all modifications that you are going to perform.
|- 
| '''Inspect Element'''
| 
Launches the [HelpRoot_Dev_Customization\CG_Platform_Tools_Inspector|Element Inspector], which gives you an option to select a UI control on the current form and opens the [HelpRoot_Dev_Customization\CG_Platform_Tools_Inspector_ElProperiesDlg|Element Properties Dialog Box] for the selected control. You use the dialog box to inspect and customize the control.((({S:Warn}You can use the keyboard shortcut Ctrl+Alt+Click to inspect elements on pop-up windows and dialog boxes.
))){br}

If you have selected a customization project, all the modifications that you initiate in the inspector will be added to this current project. Otherwise, the inspector opens the '''Select Customization Project''' dialog box.
|- 
| '''Manage User Defined Fields'''
| Opens the [HelpRoot_FormReference\cs_20_50_20|Edit User Defined Fields] (CS205020) form, which gives you an opportunity to select user-defined fields for the current form from the previously defined list of [HelpRoot_Administration\CS__con_Attributes_and_User_Defined_Fields|Managing Attributes and User-Defined Fields]. For details on how to add user-defined user fields see [HelpRoot_Administration\Admin_HOW_AddUserField|To Add User-Defined Fields to a Form].
|- 
| '''Edit Project'''
| 
Opens the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor] for the currently selected customization project.
|- 
| '''Manage Customizations'''
| 
Opens the [HelpRoot_FormReference\SM_20_45_05|Customization Projects] ([~/?ScreenId=SM204505|SM204505]) form.
|}]]></column>
			<column name="PlainText"><![CDATA[Customization Menu You can access the  Customization  menu on an opened  Acumatica ERP     form if you have the  Customizer  role. (For details, see  To Assign the Customizer Role to a User Account.) Click  Customization  on the form to access the       Customization  menu associated with the form, as shown in the following     screenshot. You can use the following customization-related menu commands. Command Description Select Project Opens the  Select Customization Project Dialog Box, which you use to          select an existing customization project or to create a new project for all modifications          that you are going to perform. Inspect Element Launches the  Element Inspector, which gives you an option          to select a UI control on the current form and opens the  Element Properties Dialog Box for the selected control. You use          the dialog box to inspect and customize the control. You can use the keyboard shortcut           Ctrl+Alt+Click to inspect elements on pop-up windows and dialog boxes. If you have selected a customization project, all the modifications that you          initiate in the inspector will be added to this current project. Otherwise, the inspector          opens the  Select Customization Project  dialog box. Manage User Defined Fields Opens the  Edit User Defined Fields (CS205020) form, which gives         you an opportunity to select user-defined fields for the current form from the previously         defined list of  Managing Attributes and User-Defined Fields. For details on how to         add user-defined user fields see  To Add User-Defined Fields to a Form. Edit Project Opens the   Customization Project                         Editor for the currently selected                   customization project. Manage Customizations Opens the   ([~/?ScreenId=SM204505|SM204505]) Customization Projects (SM204505)          form. ]]></column>
		</row>
		<row PageID="d8c77d6f-b083-432e-91bb-4b4af0fdb2f5" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="2675b0bc-84ff-d6d6-4d6b-b127f841ff96" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You use the '''Select Customization Project''' dialog box to select an existing customization project or to create a new project.{br}

You open the dialog box, shown in the following screenshot, in the following ways:[anchor|#ul_gyj_cnk_hq]
*From the '''Customization''' menu of a form—by selecting the '''Select Project''' command
*From the '''Customization''' menu of a form—by selecting the '''Edit Project''' command if there is no currently selected customization project
*From the [HelpRoot_Dev_Customization\CG_Platform_Tools_Inspector_ElProperiesDlg|Element Properties Dialog Box], which you access by clicking the '''Customize''' button if there is no currently selected customization project
{br}

[anchor|#_04acb29e-d392-47ac-becb-a79da650d2b9][anchor|#image_t2r_bfp_2q][image:CustomizationPlatform/images/CG_Platform_Tools_Menu_SelectCustProjDlg.png|popup|200px]{br}

The dialog box contains the following UI controls.{br}

[anchor|#table_ppb_djp_2q]
{| class="checklist" | width="100%" 
|- 
! Control
! Description
|- 
| '''Project Name'''
| Provides the ability to select an existing customization project. The box contains a selector, which you can use to find an existing customization project by the name or by a part of the name.
|- 
| '''OK'''
| Confirms your selection and exits the dialog box.
|- 
| '''Cancel'''
| Cancels the operation and exits the dialog box.
|- 
| '''New'''
| Opens the [HelpRoot_Dev_Customization\CG_Platform_Tools_Menu_NewProjDlg|New Project Dialog Box], where you can create a new project.
|}{br}

If you have selected a customization project, all customizations that you initiate will be added to this current project until you select another project or sign out.]]></column>
			<column name="PlainText"><![CDATA[Select Customization Project Dialog Box You use the  Select Customization Project  dialog box to select an             existing customization project or to create a new project. You open the dialog box, shown in the following screenshot, in the following ways: From the  Customization  menu of a form—by selecting                     the  Select Project  command From the  Customization  menu of a form—by selecting                     the  Edit Project  command if there is no currently                     selected customization project From the  Element Properties Dialog Box, which                     you access by clicking the  Customize  button if there is                     no currently selected customization project The dialog box contains the following UI controls.  Control  Description Project Name Provides the ability to select an existing customization project. The box contains a         selector, which you can use to find an existing customization project by the name or by a         part of the name. OK Confirms your selection and exits the dialog box. Cancel Cancels the operation and exits the dialog box. New Opens the  New Project Dialog Box, where you can create                                 a new project. If you have selected a customization project, all customizations that you initiate will be             added to this current project until you select another project or sign out. ]]></column>
		</row>
		<row PageID="a669874e-90cd-462b-9fcd-3cd4b7e4062d" Language="en-US" PageRevisionID="1" PlainText="New Project Dialog Box You use the  New Project  dialog box, shown in the following screenshot,    to create a new customization project. The dialog box contains the following UI controls. Control Description Project Name Provides the ability to enter a name of the customization project. The          customization project name is used as the  namespace  if you create an          extension library from the project. The first character of the name must be a letter or the          underscore symbol. OK Creates an empty customization project with the specified name and closes the dialog          box. As soon as you click the  OK  button, the platform creates a          new customization project in the database. Cancel Closes the dialog box. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="2dd822e5-fa72-6809-c855-692b60095fc6" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You use the '''New Project''' dialog box, shown in the following screenshot, to create a new customization project.[anchor|#_d9c1e354-5eb5-4abb-b361-95f4dab71b81][anchor|#image_nll_jkp_2q][image:CustomizationPlatform/images/CG_Platform_Tools_Menu_NewProjDlg.png|popup|200px]{br}

The dialog box contains the following UI controls.{br}

[anchor|#table_qwm_skp_2q]
{| class="checklist" | width="100%" 
|- 
!Control
!Description
|- 
| '''Project Name'''
| Provides the ability to enter a name of the customization project.((({S:Warn}The customization project name is used as the <tt>namespace</tt> if you create an extension library from the project. The first character of the name must be a letter or the underscore symbol.
)))
|- 
| '''OK'''
| Creates an empty customization project with the specified name and closes the dialog box.((({S:Warn}As soon as you click the '''OK''' button, the platform creates a new customization project in the database.
)))
|- 
| '''Cancel'''
| Closes the dialog box.
|}]]></column>
		</row>
		<row PageID="622aa509-9d0f-4b07-a838-f40941ce12a5" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="41d060fd-f645-df1a-73f2-359b8f37a296" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can use the Element Inspector for the following purposes:[anchor|#ul_mvz_4tm_1w]
*To view the following reference information for any visual element on a form:
**Control type
**Data access class (if applied)
**Data field (if applied)
**Data view (if applied)
**Business logic controller
**Action name (if applied)
*To view the source code of the ASPX page that contains the UI control for the inspected element
*To view the source code of the data access class that provides data for the inspected element
*To view the source code of the business logic executed for the inspected element
*To start the customization of the inspected element
{br}

For a form, you can activate the Element Inspector from the [HelpRoot_Dev_Customization\CG_Platform_Tools_Menu|Customization Menu]. If you need to activate the inspector for a pop-up panel, dialog box, or other UI element that opens in modal mode and makes the '''Customization''' menu unavailable for selection, you can press Control-Alt.{br}

After the inspector is activated, the [anchor|#image_dly_qdn_1w][image:CustomizationPlatform/images/help_cursor.png] cursor indicates that you can select a UI element to inspect. If you select an element, the Element Inspector opens the [HelpRoot_Dev_Customization\CG_Platform_Tools_Inspector_ElProperiesDlg|Element Properties Dialog Box].]]></column>
			<column name="PlainText"><![CDATA[Element Inspector You can use the Element Inspector for the following purposes: To view the following reference information for any visual element on a form: Control type Data access class (if applied) Data field (if applied) Data view (if applied) Business logic controller Action name (if applied) To view the source code of the ASPX page that contains the UI control for the inspected           element To view the source code of the data access class that provides data for the inspected           element To view the source code of the business logic executed for the inspected element To start the customization of the inspected element For a form, you can activate the Element Inspector from the  Customization Menu. If you need to activate the inspector for a pop-up       panel, dialog box, or other UI element that opens in modal mode and makes the        Customization  menu unavailable for selection, you can press       Control-Alt. After the inspector is activated, the   cursor indicates that you can select a UI element to inspect. If you       select an element, the Element Inspector opens the  Element Properties Dialog Box. ]]></column>
		</row>
		<row PageID="90925ddf-f6fb-4a94-864e-715d8b4c7f9e" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="a39abe4b-457b-e0b8-4f8f-fc83744ae81c" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The Element Inspector opens the '''Element Properties''' dialog box, shown below, when you have selected a UI element to inspect. [anchor|#_9d9699af-b6c7-4454-b793-50782a49db32][anchor|#image_ggj_cyp_2q][image:CustomizationPlatform/images/CG_Platform_Tools_Inspector_ElProperiesDlg.png|popup|180px]In this dialog box, you can perform the following:[anchor|#ul_ok2_djk_hq]
*Inspect properties of the UI element selected on the form
*With a single click, launch the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_LayoutEditor|Screen Editor] for the form to customize the inspected element
*Select an action to do any of the following:
**Launch the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_CodeEditor|Code Editor] to develop a graph extension for the business logic controller (BLC) bound to the form
**Launch the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_DataClassEditor|Data Class Editor] for the data access class (DAC) that contains the data field of the inspected element to customize the DAC
**Open the [HelpRoot_Dev_Customization\CG_Platform_Tools_SM204570|Source Code Browser] to view the following:
***The ASPX code of the inspected page
***The source code of the BLC bound to the form
***The source code of the DAC that contains the data field of the inspected element
{br}

The '''Element Properties''' dialog box contains the following controls.{br}

[anchor|#table_h3z_4yp_2q]
{| class="checklist" | width="100%" 
|- 
!Control
! Description
|- 
| ''' Control Type'''
| The type of the inspected UI element.
|- 
| ''' Data Class'''
| The name of the DAC to which the field for the inspected element belongs.
|- 
| ''' Data Field'''
| The string value of the <tt>DataField</tt> property of the inspected UI element. (It corresponds to the name of the field in the DAC.)
|- 
| '''View Name'''
| The name of the data view that provides data for the inspected UI element.
|- 
| ''' Business Logic'''
| The name of the BLC bound to the form.
|- 
| '''Action Name'''
| The name of the action of the inspected toolbar button.
|- 
| ''' Customize'''
| A button that launches the Customization Project Editor, which opens on the Screen Editor page for the form that contains the inspected element.
|- 
| ''' Actions'''
| Opens the '''Actions''' menu with commands to customize or revise the element source code using the Customization Project Editor (to customize) or the Source Code browser (to view).
|- 
| ''' Cancel'''
| Cancels the operation and closes the dialog box.
|}
==The Actions Menu==
The '''Actions''' menu, shown in the screenshot below, contains commands you can invoke to customize or revise the code of the following:[anchor|#ul_ndk_v2w_2q]
*The inspected element
*The current ASPX page on which the element is selected
*The DAC to which the field for the inspected element belongs
*The BLC (graph class) that is bound to the form
[anchor|#_e4c65c22-f685-4b91-89f7-d3d0ae4c1622][anchor|#image_yjs_5fr_2q][image:CustomizationPlatform/images/CG_Platform_Tools_Inspector_ElProperiesDlg_1.png|popup|200px]The menu contains the following commands.[anchor|#table_sk2_jfr_2q]
{| class="checklist" | width="100%" 
|- 
!width="20%" ! Command
!width="80%" ! Description
|- 
| '''Customize Business Logic'''
| Creates a graph extension template for the BLC that is bound to the form, adds the template code to the customization project, and opens the Customization Project Editor on the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_CodeEditor|Code Editor] page, which loads the BLC extension template so you can edit it.
|- 
| '''Customize Data Fields'''
| Opens the Customization Project Editor on the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_DataClassEditor|Data Class Editor] page in the '''Edit Attributes''' section so you can customize the inspected element attributes.
|- 
| '''View ASPX Source'''
| Opens the [HelpRoot_Dev_Customization\CG_Platform_Tools_SM204570|Source Code Browser] on the '''Screen ASPX''' tab with the source code of the current form.
|- 
| '''View Business Logic source'''
| Opens the Source Code browser on the '''Business Logic''' tab with the source code of the BLC that is bound to the form.
|- 
| '''View Data Class Source'''
| Opens the Source Code browser on the '''Data Access''' tab with the source code of the DAC to which the field for the inspected element belongs.
|}
((({S:Warn}If you have opened the Customization Project Editor or the Source Code browser, you can access any source code of the website—not only the source code of the inspected element and the current form, DAC, and BLC.
)))]]></column>
			<column name="PlainText"><![CDATA[Element Properties Dialog Box The Element Inspector opens the  Element Properties  dialog box, shown       below, when you have selected a UI element to inspect.  In this dialog box, you can perform the following: Inspect properties of the UI element selected on the form With a single click, launch the  Screen Editor for the form to customize the inspected element Select an action to do any of the following: Launch the  Code Editor to develop a               graph extension for the business logic controller (BLC) bound to the form Launch the  Data Class Editor for the data               access class (DAC) that contains the data field of the inspected element to customize               the DAC Open the  Source Code Browser to view the following: The ASPX code of the inspected page The source code of the BLC bound to the form The source code of the DAC that contains the data field of the inspected                   element The  Element Properties  dialog box contains the following controls. Control  Description  Control Type The type of the inspected UI element.  Data Class The name of the DAC to which the field for the inspected element                 belongs.  Data Field The string value of the  DataField  property of the inspected                 UI element. (It corresponds to the name of the field in the DAC.) View Name The name of the data view that provides data for the inspected UI                 element.  Business Logic The name of the BLC bound to the form. Action Name The name of the action of the inspected toolbar button.  Customize A button that launches the  Customization Project Editor, which opens on the Screen Editor page for the form that contains the inspected                 element.  Actions Opens the  Actions  menu with commands to customize or                 revise the element source code using the  Customization Project Editor (to customize) or the Source Code browser (to view).  Cancel Cancels the operation and closes the dialog box. The Actions Menu The  Actions  menu, shown in the screenshot below, contains commands you         can invoke to customize or revise the code of the following: The inspected element The current ASPX page on which the element is selected The DAC to which the field for the inspected element belongs The BLC (graph class) that is bound to the form The menu contains the following commands. Command Description Customize Business Logic Creates a graph extension template for the BLC that is bound to the form, adds                 the template code to the customization project, and opens the  Customization Project Editor on the  Code Editor page, which loads                 the BLC extension template so you can edit it. Customize Data Fields Opens the  Customization Project Editor on the  Data Class Editor page in the                    Edit Attributes  section so you can customize the inspected                 element attributes. View ASPX Source Opens the  Source Code Browser on the                    Screen ASPX  tab with the source code of the current                 form. View Business Logic source Opens the Source Code browser on the  Business Logic  tab                 with the source code of the BLC that is bound to the form. View Data Class Source Opens the Source Code browser on the  Data Access  tab                 with the source code of the DAC to which the field for the inspected element                 belongs. If you have opened the  Customization Project Editor or the Source Code browser, you can access any source code of the website—not           only the source code of the inspected element and the current form, DAC, and BLC. ]]></column>
		</row>
		<row PageID="df5e78b6-63f5-4e0b-8fdc-1de77b54a83b" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="02d77af7-81df-56e1-b891-337f12f996f2" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can use the Customization Project Editor (Project Editor) to develop and manage the content of a customization project. The editor contains separate pages to add and manage items of the following types in the currently selected customization project:[anchor|#ul_q3n_w53_bw]
*Screen (form)
*Data access class (DAC)
*Code (C#)
*File
*Generic inquiry
* Acumatica Report                         Designer report
*Site map
*Database script (custom column or script)
*Translation (language locale)
*Integration scenario
*Shared reusable filter
*Access rights of roles to forms
*Wiki changes 
*Analytical report
*Push notification
*Mobile app screen
(See [HelpRoot_Dev_Customization\CG_GL_Items|Managing Items in a Project] for instructions.){br}

You can launch the Customization Project Editor only if you have selected a customization project. You can launch the editor from any form of Acumatica ERP by using the [HelpRoot_Dev_Customization\CG_Platform_Tools_Menu|Customization Menu] or from the [HelpRoot_FormReference\SM_20_45_05|Customization Projects] ([~/?ScreenId=SM204505|SM204505]) form, also described in [HelpRoot_Dev_Customization\CG_Platform_Tools_SM204505|Customization Projects Form ].
==The Project Editor Webpage==
The Project Editor, shown in the following screenshot, looks like a regular webpage that consists of the following parts:[anchor|#ul_sfr_5ky_2q]
*The main menu for working with the customization project
*A navigation pane, which displays the list of pages used to manage the corresponding project items
*The main area, which displays the list of project items or provides a work area to edit these items
[anchor|#_ac7037c5-fbd7-4477-8de8-bb998ea8ecf3][anchor|#image_jpr_hdy_2q][image:CustomizationPlatform/images/CG_Platform_Tools_Editor_01.png|popup|430px]In the navigation pane, a node with capitalized name can be expanded to get direct access to items of the appropriate type.
==Main Menu of the Project Editor==
The main menu contains the following items and commands.{br}

[anchor|#table_cyg_clf_fq]
{| class="checklist" | width="100%" 
|- 
!width="20%" ! Item
!width="20%" ! Command
!width="60%" ! Description
|- 
| '''File'''
|  '''Manage Customization Projects'''
| Opens the [HelpRoot_FormReference\SM_20_45_05|Customization Projects] ([~/?ScreenId=SM204505|SM204505]) form.
|- 
| 
| '''Edit Project XML'''
| Opens the Project XML page, which you can use to edit the XML source code of the current customization project, save it to the database, download the project package, and upload a deployment package to replace the project content.
|- 
| 
| '''Edit Project Items'''
| Opens the Edit Project Items page, which you can use to edit the XML source code of a project item.
|- 
| 
| '''Export Project Package'''
| Exports the deployment package of the project—that is, the ZIP file that contains the project. The file has the same name as the exported customization project has.
|- 
| 
| '''Replace from Package'''
| Initiates the import of a previously exported deployment package from a ZIP file. Provides the '''Open Package''' dialog box with the '''Choose File''' button and the '''Upload''' button to replace the current project content.
|- 
| '''Publish'''
|  '''Publish Current Project'''
| Initiates the process of publishing the current customization project. Launches a publication process that opens the '''Compilation''' window to output a log with information about the process. If both the validation and compilation of the project are successful, the process makes the '''Publish''' button available. This button is used to finalize the publishing and to update the website.
|- 
| 
| '''Multiple Projects'''
| Opens the [HelpRoot_FormReference\SM_20_45_05|Customization Projects] in a new window.
|- 
| 
| '''Publish with Cleanup'''
| Initiates the process of publishing the current customization project as the '''Publish Current Project''' command does, but with the following difference: When the Acumatica Customization             Platform publishes a project that contains a database script, the platform executes the script and tries to avoid executing the script at every publication of the project for optimization purposes. Therefore, the platform keeps information about each script that has been executed at least once and has not since been changed in the database, and omits the repeated execution of such scripts. If you run the '''Publish with Cleanup''' operation, the platform cleans all the information about previously executed scripts of the customization project and executes this scripts once more while publishing the project.
|- 
| '''Extension Library'''
|  '''Create New'''
| Creates a solution for Microsoft Visual Studio in which you can develop an extension library for the customization project. The solution contains the website and extension library projects. This action also downloads the <tt>OpenSolution.bat</tt> file. The file contains the absolute path to the <tt>.sln</tt> file in the file system; you can use this file to open the solution in Visual Studio.((({S:Warn}By default, the system uses the <tt>App&#95;Data\Projects</tt> folder of the website as the parent folder for the solution project. If the website folder is outside of the <tt>C:\Program Files (x86)</tt> and <tt>C:\Program Files</tt> folders, such as <tt>C:\AcumaticaSites\MySite</tt>, we recommend that you not change it. Otherwise, we recommend that you specify a parent folder outside these folders to avoid an issue with permission to access files.
)))
|- 
| 
| '''Bind to Existing'''
| Specifies the extension library project in the file system to which the customization code will be moved if you click '''Move to Extension Lib''' on the toolbar of the Code Editor.
|- 
| 
| '''Open in Visual Studio'''
| Downloads the <tt>OpenSolution.bat</tt> file, which is used to open the existing solution in Visual Studio.
|- 
| 
| '''Show Active Extensions'''
| Starts the verification of extensions for data access classes and business logic controllers, and opens the '''Validate Extensions''' pop-up window to display the validation log. In the log, every error is highlighted in red. We recommend that you verify extensions if you have upgraded legacy DAC customization.
|- 
| '''Source Control'''
|  '''Save Project to Folder'''
| Saves the customization project as a set of files to a local folder that is used for integration with source control systems. Invoking this action opens the '''Saves Project to Folder''' dialog box (see [HelpRoot_Dev_Customization\CG_GL_VCS_Saving2Folder|To Save a Project to a Local Folder] for instructions) so that you can select the name and location of the folder inside a repository.
|- 
| 
| '''Open Project from Folder'''
| Loads the customization project from the repository. (See [HelpRoot_Dev_Customization\CG_GL_VCS_Opening|To Update the Content of a Project from a Local Folder] for instructions.)
|}
==Built-In Editors in the Project Editor==
To help you work with screens, data access classes, code, custom files, and database scripts in the scope of a customization project, the Project Editor includes the following editors:[anchor|#ul_dzp_ck3_bw]
*[HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_LayoutEditor|Screen Editor], which is the visual editor for the source code of an .aspx page
*[HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_DataClassEditor|Data Class Editor], which is used to create, develop, manage, and view in XML format the content of extensions for data access classes 
*:((({S:Warn}When the project is published, the Acumatica Customization             Platform transforms the content of extensions for data access classes from XML format to C# code and saves the code in <tt>.cs</tt> files in the <tt>App&#95;RuntimeCode</tt> folder of the website.
)))
*[HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_CodeEditor|Code Editor], which is used to manage, develop, and view the customization code (C#) added to the project, including extensions for business logic controllers (BLCs) and DACs
*[HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_EditFileEditor|File Editor], which is a text editor used to edit and review the content of text files included in the customization project
*[HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_SQLScriptDlg|SQL Script Editor], which is used to add and edit custom SQL scripts in the customization project
*[HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_TableEditor|Table Editor], which is used to edit custom tables in the customization project
*[HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_MobileAppEditor|Mobile App Editor], which is used to add and update mobile app screens in the customization project
{br}

Other types of items are custom data that can be added to the customization project from the database. For these items, the Project Editor provides you the capabilities to add to the project, delete from the project, and reload from the database. To create or edit these items, you can use dedicated forms of Acumatica ERP. For example, to create or edit a generic inquiry in the database, you can use the [HelpRoot_FormReference\SM_20_80_00|Generic Inquiry] ([~/?ScreenId=SM208000|SM208000]) form.{br}

Also, the Project Editor includes the following editors:[anchor|#ul_jfm_p1r_bw]
*[HelpRoot_Dev_Customization\CG_Platform_Tools_ASPXEditor|ASPX Editor], which is used to edit the ASPX code of a page customized by means of the Screen Editor
*[HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_XMLEditor|XML Editors], which are used to edit and review the XML code of the customization project ([HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_XML_Project|Project XML Editor]) or a separate item of the project ([HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_XML_Item|Item XML Editor])
]]></column>
			<column name="PlainText"><![CDATA[ Customization Project EditorYou can use the  Customization Project Editor           ( Project Editor) to develop and manage the content of a customization project. The editor contains         separate pages to add and manage items of the following types in the currently selected         customization project: Screen (form) Data access class (DAC) Code (C#) File Generic inquiry  Acumatica Report                         Designer report Site map Database script (custom column or script) Translation (language locale) Integration scenario Shared reusable filter Access rights of roles to forms Wiki changes  Analytical report Push notification Mobile app screen (See  Managing Items in a Project for instructions.) You can launch the  Customization Project Editor         only if you have selected a customization project. You can launch the editor from any form         of  Acumatica ERP by using the  Customization Menu or from the   ([~/?ScreenId=SM204505|SM204505]) Customization Projects (SM204505) form, also described in            Customization Projects Form . The  Project Editor Webpage The  Project Editor, shown in the following screenshot, looks like a regular webpage that consists of the         following parts: The main menu for working with the customization project A navigation pane, which displays the list of pages used to manage the corresponding             project items The main area, which displays the list of project items or provides a work area to             edit these items In the navigation pane, a node with capitalized name can be expanded to get direct         access to items of the appropriate type. Main Menu of the  Project EditorThe main menu contains the following items and commands. Item Command Description File Manage Customization Projects Opens the   ([~/?ScreenId=SM204505|SM204505]) Customization Projects                   (SM204505) form. Edit Project XML Opens the Project XML page, which you can use to edit the XML source code of                   the current customization project, save it to the database, download the project                   package, and upload a deployment package to replace the project content. Edit Project Items Opens the Edit Project Items page, which you can use to edit the XML source                   code of a project item. Export Project Package Exports the deployment package of the project—that is, the ZIP file that                   contains the project. The file has the same name as the exported customization                   project has. Replace from Package Initiates the import of a previously exported deployment package from a ZIP                   file. Provides the  Open Package  dialog box with the                      Choose File  button and the  Upload                    button to replace the current project content. Publish Publish Current Project Initiates the process of publishing the current customization project.                   Launches a publication process that opens the  Compilation                    window to output a log with information about the process. If both the validation                   and compilation of the project are successful, the process makes the                      Publish  button available. This button is used to finalize                   the publishing and to update the website. Multiple Projects Opens the   ([~/?ScreenId=SM204505|SM204505]) Customization Projects in a new                   window. Publish with Cleanup Initiates the process of publishing the current customization project as the                      Publish Current Project  command does, but with the                   following difference: When the  Acumatica Customization             Platform publishes a project that contains a database script, the platform executes the                   script and tries to avoid executing the script at every publication of the project                   for optimization purposes. Therefore, the platform keeps information about each                   script that has been executed at least once and has not since been changed in the                   database, and omits the repeated execution of such scripts. If you run the                      Publish with Cleanup  operation, the platform cleans all                   the information about previously executed scripts of the customization project and                   executes this scripts once more while publishing the project. Extension Library Create New Creates a solution for Microsoft Visual Studio in which you can develop an                   extension library for the customization project. The solution contains the website                   and extension library projects. This action also downloads the                      OpenSolution.bat  file. The file contains the absolute path                   to the  .sln  file in the file system; you can use this file to                   open the solution in Visual Studio. By default, the system uses the                        App_Data\Projects  folder of the website as the parent                     folder for the solution project. If the website folder is outside of the                        C:\Program Files (x86)  and  C:\Program                       Files  folders, such as                        C:\AcumaticaSites\MySite , we recommend that you not                     change it. Otherwise, we recommend that you specify a parent folder outside                     these folders to avoid an issue with permission to access files. Bind to Existing Specifies the extension library project in the file system to which the                   customization code will be moved if you click  Move to Extension                     Lib  on the toolbar of the Code Editor. Open in Visual Studio Downloads the  OpenSolution.bat  file, which is used to                   open the existing solution in Visual Studio. Show Active Extensions Starts the verification of extensions for data access classes and business                   logic controllers, and opens the  Validate Extensions  pop-up                   window to display the validation log. In the log, every error is highlighted in                   red. We recommend that you verify extensions if you have upgraded legacy DAC                   customization. Source Control Save Project to Folder Saves the customization project as a set of files to a local folder that is                   used for integration with source control systems. Invoking this action opens the                      Saves Project to Folder  dialog box (see  To Save a Project to a Local Folder for instructions) so that you can select                   the name and location of the folder inside a repository. Open Project from Folder Loads the customization project from the repository. (See  To Update the Content of a Project from a Local Folder for instructions.) Built-In Editors in the  Project EditorTo help you work with screens, data access classes, code, custom files, and database         scripts in the scope of a customization project, the  Project Editor includes the following editors: Screen Editor, which is the visual editor             for the source code of an .aspx page Data Class Editor, which is used to create,             develop, manage, and view in XML format the content of extensions for data access             classes  When the project is published, the  Acumatica Customization             Platform transforms the content of extensions for data access classes from XML format to C#               code and saves the code in  .cs  files in the                  App_RuntimeCode  folder of the website. Code Editor, which is used to manage,             develop, and view the customization code (C#) added to the project, including extensions             for business logic controllers (BLCs) and DACs File Editor, which is a text editor             used to edit and review the content of text files included in the customization             project SQL Script Editor, which is used to add and             edit custom SQL scripts in the customization project Table Editor, which is used to edit custom tables in the customization project Mobile App Editor, which is used to add and             update mobile app screens in the customization project Other types of items are custom data that can be added to the customization project from         the database. For these items, the  Project Editor provides you the capabilities to add to the project, delete from the project, and reload         from the database. To create or edit these items, you can use dedicated forms of  Acumatica ERP. For example, to create or edit a generic inquiry in the database, you can use the   ([~/?ScreenId=SM208000|SM208000]) Generic Inquiry (SM208000) form. Also, the  Project Editor includes the following editors: ASPX Editor, which is used to edit the ASPX code             of a page customized by means of the Screen Editor XML Editors, which are used to edit and             review the XML code of the customization project ( Project XML Editor) or a separate item of the project               ( Item XML Editor) ]]></column>
		</row>
		<row PageID="b8446819-ea08-4785-8439-6b7a367f6152" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="ef4b48ba-17f7-9638-0bb2-0b3919b26929" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The Screen Editor is the visual editor for the source code of an ASPX page and the business logic of a screen. You use it to configure ASP.NET containers, such as forms and grids, to specify the properties of UI controls and grids, as well as to configure conditions and apply conditions to actions and fields.{br}

By using the editor, you can perform customizations of a form as follows:[anchor|#ul_cc5_crq_bw]
*By configuring the form&rsquo;s layout in any of the following ways:
**Add a custom form to Acumatica ERP
**Add a container to a form
**Add a custom field to a data access class (DAC)
**Add a control for a field to a container
**View and modify the properties of a control
**Change the order of controls in a container
**Change the order of actions on a form
**Customize the attributes of a field in a data access class
**View the modifications made to the original declaration of the form
**Immediately preview in the browser the changes made during the customization of the layout 
*By changing the business logic of the form in any of the following ways:
**Change properties of an action ('''Visibility''' and '''Enabled''') or a field ('''Visibility''', '''Enabled''', and '''Required''') dynamically by assigning conditions to the properties
**Add new actions to do any of the following:
***Run a report
***Navigate to an existing record
***Navigate to a form to create a new record

During customization, you can open the Screen Editor in the following ways:[anchor|#ul_bjv_g4f_fq]
*From the [HelpRoot_Dev_Customization\CG_Platform_Tools_Inspector_ElProperiesDlg|Element Properties Dialog Box], which you access by clicking the '''Customize''' button on the title bar of the form and selecting '''Inspect Element'''
*From the Customized Screens page of the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor], by selecting the Screen ID of the screen (form) you want to customize
*From the navigation pane of the Customization Project Editor, by clicking the needed item within the '''Screens''' folder
{br}

The title of each Screen Editor page includes the ID and name (in parentheses) of the form being customized. The page also has a toolbar, control tree pane, and tabs, as the following screenshot shows.[anchor|#_d33604d8-13d2-497c-ae70-1813bf0f73ea][anchor|#image_mhm_ssf_fq][image:CustomizationPlatform/images/Cust_LayoutEditor_01.png|popup|400px]
==Page Toolbar==
The page toolbar includes standard and page-specific buttons. The page-specific buttons are described below.[anchor|#table_qkj_55f_fq]
{| class="checklist" | width="100%" 
|- 
!width="20%" ! Button
!width="80%" ! Description
|- 
| '''Cancel'''
| Cancels the latest edit performed in the Screen Editor.
|- 
| '''Save'''
| Saves to the customization project the difference between the modified and original code of the ASPX page, or modifications in the business logic of a form.
|- 
| '''Preview Changes'''
| Opens the customized form in a new browser window.
|- 
| '''Actions'''
| Provides the following actions:[anchor|#ul_vpw_2vf_fq]
*'''Edit Aspx''': Opens the [HelpRoot_Dev_Customization\CG_Platform_Tools_ASPXEditor|ASPX Editor] with the webpage source code.
*'''Open Screen''': Opens the original form of Acumatica ERP.
*'''Customize Business Logic''': Opens the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_CodeEditor|Code Editor] with the extension class template of the business logic container (BLC) that is bound to the form.
*'''Customize Data Class''': Opens the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_DataClassEditor|Data Class Editor] for customization of the DAC that contains the field selected in the Control Tree.

|}
==Control Tree==
The Control Tree displays the hierarchical structure of actions and controls on the webpage. In the tree, you can:{br}

[anchor|#ul_ulf_gwn_gq]
*Select a container, a control, or an action for review or customization.
*Change the order of controls in a container.
*Change the order of actions on a form. The actions are grouped by toolbars on the screen, such as '''Standard''' and '''Form-Specific'''. Other available actions are organized under the '''Other''' group.
*Remove any selected item from the webpage or reset properties of the item to the out-of-the-box state.
{br}

The toolbar of the Control Tree includes the following buttons.[anchor|#table_v5y_r1w_gq]
{| class="checklist" | width="100%" 
|- 
!Button
!Description
|- 
| Refresh
| Refreshes the Control Tree.
|- 
| Add New Action
| Adds new action to the form.
|- 
| Remove
| Removes an item selected in the Control Tree from the form.
|- 
| Reset Properties
| Resets all controls and actions to the out-of-the-box state.
|}{br}

To change the order of controls in a container, manually drag controls on the Control Tree within their containers. You can drag an action in any of the following ways: inside the '''Form-Specific''' folder, between the '''Actions''', '''Inquiries''', and '''Reports''' folders, and to the '''Form-Specific''' folder.
==Layout Properties Tab==
On the '''Layout Properties''' tab, you can review and modify the layout properties of the form controls or actions that are defined on the ASPX page.{br}

The tab contains a toolbar and a table. The tab toolbar includes the '''Hide Advanced Properties''' button ([anchor|#image_ptr_4gr_bw][image:CustomizationPlatform/images/CG_Platform_Tools_LayoutEditor_ShowHideButton.png|10px]) to hide or show advanced properties of the selected control. The tab table consists of the following columns.[anchor|#table_zdr_z1l_fq]
{| class="checklist" | width="100%" 
|- 
!Column
!Description
|- 
| '''Override'''
| A check box that indicates whether the property value was changed. This check box is selected automatically when you change the property.
|- 
| '''Property'''
| The name of the property or the property group.
|- 
| '''Value'''
| The value of the property.
|}
==Attributes Tab==
You use the '''Attributes''' tab to review and customize the attributes of the DAC field that is bound to the control currently selected in the Control Tree.{br}

The tab consists of a Summary area with the DAC field information and buttons to customize the field attributes.{br}

The Summary area contains the following elements.[anchor|#table_ntm_lnl_fq]
{| class="checklist" | width="100%" 
|- 
!Element
!Description
|- 
| '''Field Name'''
| The name of the field in the DAC. The field name is the name of the public virtual property in the public abstract class of the field.
|- 
| '''Data Class'''
| The name of the DAC to which the field belongs.
|- 
| '''Original Attributes'''
| The original attributes of the field in Acumatica ERP.
|}
The '''Attributes''' tab provides the following buttons.[anchor|#table_mbl_xql_fq]
{| class="checklist" | width="100%" 
|- 
!Button
!Description
|- 
| '''Customize Attributes'''
| Opens the Data Class Editor so you can customize the field attributes in the DAC.
|- 
| '''View Source'''
| Opens the [HelpRoot_Dev_Customization\CG_Platform_Tools_SM204570|Source Code Browser] on the '''Data Access''' tab that displays the DAC source code.
|- 
| '''Override On Screen Level'''
| Opens the Code Editor with the BLC extension class template. The template includes the field attributes and the template of the <tt>DACName&#95;FieldPropertyName&#95;CacheAttached()</tt> method, which you can use to replace the attributes within the BLC.
|}
==Events Tab==
On the '''Events''' tab, you can view and add event handlers for the selected control.{br}

The tab consists of a Summary area, a toolbar, and a table. The Summary area contains the following elements.[anchor|#table_wcd_22n_fq]
{| class="checklist" | width="100%" 
|- 
!Element
!Description
|- 
| '''Data Class'''
| The name of the DAC to which the field belongs.
|- 
| '''Field Name'''
| The name of the field in the DAC.
|- 
| '''Business Logic'''
| The name of the BLC bound to the form.
|}
The tab toolbar includes the following specific buttons.[anchor|#table_ddq_v1n_fq]
{| class="checklist" | width="100%" 
|- 
!Button
!Description
|- 
| '''Add Handler'''
| For the selected event, opens the Code Editor with the BLC extension class template. The class template includes a code template for the event handler, so you should implement only the body of the handler. The button provides the following menu commands:[anchor|#ul_kxn_q4r_bw]
*'''Keep Base Method''': Creates the event handler with two parameters, as it is defined in the base BLC. As a result, the event handler is added to the appropriate event handler collection.
*'''Override Base Method''': Creates the event handler with an additional parameter to replace the base BLC event handler collection.

|- 
| '''View Source'''
| Opens the Source Code browser with the source code of the BLC bound to the form.
|}
The table holds information about the event handlers used for the control. It contains the following columns.[anchor|#table_kr5_w2n_fq]
{| class="checklist" | width="100%" 
|- 
!Column
!Description
|- 
| '''Event'''
| The event name.
|- 
| '''Handled in Source'''
| A check box that indicates whether the event handler is implemented within Acumatica ERP.
|- 
| '''Customized'''
| A check box that indicates whether the event handler is customized. This check box is selected automatically when you add the event handler.
|}
==Add Control Tab==
On the '''Add Control''' tab, you can add new containers, controls, and layout rules to the form.{br}

To add a control, drag and drop it to the needed position in the Control Tree. After you have added the control, you can configure its properties on the '''Layout Properties''' tab.
==Add Data Fields Tab==
You can use the '''Add Data Fields''' tab to manage the controls in the form container that is currently selected in the Control Tree. On this tab, you can create a control for a DAC field and add it to the selected container. You can also create new custom field in a DAC, create a control for the field, and add it to the selected container.{br}

The tab contains the '''Data View''' drop-down list, a toolbar, and a table. In the '''Data View''' drop-down list, you can select a DAC to view its fields in the table. The list includes all <tt>DACName(DataViewName)</tt> pairs of the BLC that are bound to the form. The tab toolbar contains the following buttons.{br}

[anchor|#table_ovl_hk4_gq]
{| class="checklist" | width="100%" 
|- 
!Button
!Description
|- 
| '''Create Controls'''
| Adds the selected fields to the container selected in the Control Tree.
|- 
| '''New Field'''
| Opens the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_DataClassEditor_NewFieldDlg|Create New Field Dialog Box], where you can add a new custom field to the DAC that is referenced in the data view selected in the '''Data View''' box.((({S:Warn}Once you have created a field or multiple fields, you need to publish the customization project before creating a control for the new fields.
)))
|}{br}

The table displays the fields that belong to the selected DAC. The table includes the following columns.[anchor|#table_n1v_rj4_gq]
{| class="checklist" | width="100%" 
|- 
!Column
!Description
|- 
| Included
| An unlabeled check box that you can use to select a field for which the '''Create Controls''' operation will create a control in the object that is currently selected in the Control Tree.
|- 
| '''Used'''
| A check box that indicates whether a control for the field exists in the object that is currently selected in the Control Tree. This check box is selected automatically when you create a control for the field.
|- 
| '''Field Name'''
| The name and <tt>DisplayName</tt> (in parentheses) of the field in the DAC.
|- 
| '''Control'''
| The type of the UI control.
|}{br}

You can use the following filters of DAC fields displayed in the table.[anchor|#table_yzp_lh4_gq]
{| class="checklist" | width="100%" 
|- 
!Filter
!Description
|- 
| '''All'''
| Fields that are not represented by controls on the form.
|- 
| '''Visible'''
| Fields that are visible due to the <tt>Visibility</tt> field attribute in the DAC.
|- 
| '''Custom'''
| New custom fields of the DAC.
|}
==View ASPX Tab==
The '''View ASPX''' tab displays the ASPX code of the control selected in the Control Tree.]]></column>
			<column name="PlainText"><![CDATA[Screen Editor The Screen Editor is the visual editor for the source code of an ASPX page and the business    logic of a screen. You use it to configure ASP.NET containers, such as forms and grids, to    specify the properties of UI controls and grids, as well as to configure conditions and apply    conditions to actions and fields. By using the editor, you can perform customizations of a form as follows: By configuring the form's layout in any of the following ways: Add a custom form to  Acumatica ERPAdd a container to a form Add a custom field to a data access class (DAC) Add a control for a field to a container View and modify the properties of a control Change the order of controls in a container Change the order of actions on a form Customize the attributes of a field in a data access class View the modifications made to the original declaration of the form Immediately preview in the browser the changes made during the customization of the layout       By changing the business logic of the form in any of the following ways: Change properties of an action ( Visibility  and         Enabled ) or a field ( Visibility ,         Enabled , and  Required ) dynamically by assigning       conditions to the properties Add new actions to do any of the following: Run a report Navigate to an existing record Navigate to a form to create a new record During customization, you can open the Screen Editor in the following ways: From the  Element Properties Dialog Box, which you access by      clicking the  Customize  button on the title bar of the form and selecting        Inspect Element From the Customized Screens page of the   Customization Project                         Editor, by      selecting the Screen ID of the screen (form) you want to customize From the navigation pane of the  Customization Project Editor, by      clicking the needed item within the  Screens  folder The title of each Screen Editor page includes the ID and name (in parentheses) of the form    being customized. The page also has a toolbar, control tree pane, and tabs, as the following    screenshot shows. Page Toolbar The page toolbar includes standard and page-specific buttons. The page-specific buttons are     described below. Button Description Cancel Cancels the latest edit performed in the Screen Editor. Save Saves to the customization project the difference between the modified and original         code of the ASPX page, or modifications in the business logic of a form. Preview Changes Opens the customized form in a new browser window. Actions Provides the following actions: Edit Aspx : Opens the  ASPX Editor with the webpage source code. Open Screen : Opens the original form of  Acumatica ERP. Customize Business Logic : Opens the  Code Editor with the extension class template of           the business logic container (BLC) that is bound to the form. Customize Data Class : Opens the  Data Class Editor for customization of the DAC that           contains the field selected in the Control Tree. Control Tree The Control Tree displays the hierarchical structure of actions and controls on the webpage.     In the tree, you can: Select a container, a control, or an action for review or customization. Change the order of controls in a container. Change the order of actions on a form. The actions are grouped by toolbars on the screen,       such as  Standard  and  Form-Specific . Other       available actions are organized under the  Other  group. Remove any selected item from the webpage or reset properties of the item to the       out-of-the-box state. The toolbar of the Control Tree includes the following buttons. Button Description Refresh Refreshes the Control Tree. Add New Action Adds new action to the form. Remove Removes an item selected in the Control Tree from the form. Reset Properties Resets all controls and actions to the out-of-the-box state. To change the order of controls in a container, manually drag controls on the Control Tree     within their containers. You can drag an action in any of the following ways: inside the       Form-Specific  folder, between the  Actions ,       Inquiries , and  Reports  folders, and to the       Form-Specific  folder. Layout Properties Tab On the  Layout Properties  tab, you can review and modify the layout     properties of the form controls or actions that are defined on the ASPX page. The tab contains a toolbar and a table. The tab toolbar includes the  Hide Advanced      Properties  button ( ) to hide or show advanced properties of the selected control. The tab     table consists of the following columns. Column Description Override A check box that indicates whether the property value was changed. This check box is         selected automatically when you change the property. Property The name of the property or the property group. Value The value of the property. Attributes Tab You use the  Attributes  tab to review and customize the attributes of     the DAC field that is bound to the control currently selected in the Control Tree. The tab consists of a Summary area with the DAC field information and buttons to customize the     field attributes. The Summary area contains the following elements. Element Description Field Name The name of the field in the DAC. The field name is the name of the public virtual         property in the public abstract class of the field. Data Class The name of the DAC to which the field belongs. Original Attributes The original attributes of the field in  Acumatica ERP. The  Attributes  tab provides the following buttons. Button Description Customize Attributes Opens the Data Class Editor so you can customize the field attributes in the         DAC. View Source Opens the  Source Code Browser on the  Data          Access  tab that displays the DAC source code. Override On Screen Level Opens the Code Editor with the BLC extension class template. The template includes the         field attributes and the template of the           DACName_FieldPropertyName_CacheAttached()  method, which you can use to         replace the attributes within the BLC. Events Tab On the  Events  tab, you can view and add event handlers for the selected     control. The tab consists of a Summary area, a toolbar, and a table. The Summary area contains the     following elements. Element Description Data Class The name of the DAC to which the field belongs. Field Name The name of the field in the DAC. Business Logic The name of the BLC bound to the form. The tab toolbar includes the following specific buttons. Button Description Add Handler For the selected event, opens the Code Editor with the BLC extension class template.         The class template includes a code template for the event handler, so you should implement         only the body of the handler. The button provides the following menu commands: Keep Base Method : Creates the event handler with two parameters,           as it is defined in the base BLC. As a result, the event handler is added to the           appropriate event handler collection. Override Base Method : Creates the event handler with an           additional parameter to replace the base BLC event handler collection. View Source Opens the Source Code browser with the source code of the BLC bound to the         form. The table holds information about the event handlers used for the control. It contains the     following columns. Column Description Event The event name. Handled in Source A check box that indicates whether the event handler is implemented within  Acumatica ERP. Customized A check box that indicates whether the event handler is customized. This check box is         selected automatically when you add the event handler. Add Control Tab On the  Add Control  tab, you can add new containers, controls, and     layout rules to the form. To add a control, drag and drop it to the needed position in the Control Tree. After you have     added the control, you can configure its properties on the  Layout      Properties  tab. Add Data Fields Tab You can use the  Add Data Fields  tab to manage the controls in the form     container that is currently selected in the Control Tree. On this tab, you can create a control     for a DAC field and add it to the selected container. You can also create new custom field in a     DAC, create a control for the field, and add it to the selected container. The tab contains the  Data View  drop-down list, a toolbar, and a table.     In the  Data View  drop-down list, you can select a DAC to view its fields     in the table. The list includes all  DACName(DataViewName)  pairs of the BLC     that are bound to the form. The tab toolbar contains the following buttons. Button Description Create Controls Adds the selected fields to the container selected in the Control Tree. New Field Opens the  Create New Field Dialog Box,          where you can add a new custom field to the DAC that is referenced in the data view          selected in the  Data View  box. Once you have created a field or           multiple fields, you need to publish the customization project before creating a control           for the new fields. The table displays the fields that belong to the selected DAC. The table includes the     following columns. Column Description Included An unlabeled check box that you can use to select a field for which the            Create Controls  operation will create a control in the object that          is currently selected in the Control Tree. Used A check box that indicates whether a control for the field exists in the object that          is currently selected in the Control Tree. This check box is selected automatically when          you create a control for the field. Field Name The name and  DisplayName  (in parentheses) of the field in the          DAC. Control The type of the UI control. You can use the following filters of DAC fields displayed in the table. Filter Description All Fields that are not represented by controls on the form. Visible Fields that are visible due to the  Visibility  field attribute in          the DAC. Custom New custom fields of the DAC. View ASPX Tab The  View ASPX  tab displays the ASPX code of the control selected in the     Control Tree. ]]></column>
		</row>
		<row PageID="c448a0e2-ab36-4e6d-86f4-0c8c1a9a5942" Language="en-US" PageRevisionID="1" Content="&#xA;You can use the ASPX Editor to edit the ASPX code of a page that has been customized by means of the Screen Editor. You can use this editor instead of the Screen Editor if you prefer a text editor rather than a visual tool.{br}&#xA;&#xA;You can launch the ASPX Editor by clicking '''Actions &amp;gt; Edit Aspx''' on the toolbar of the Screen Editor.{br}&#xA;&#xA;The ASPX Editor page contains the work area of the editor and a toolbar with only the '''Generate Customization Script''' button, as shown in the following screenshot.[anchor|#image_emq_4dr_bw][image:CustomizationPlatform/images/CG_Platform_Tools_LayoutEditor_ASPX.png|popup|450px]{br}&#xA;&#xA;You use the '''Generate Customization Script''' button instead of a '''Save''' button because this action saves to the customization project not the modified ASPX code but the difference between the modified code and the original code of the page." PlainText="ASPX Editor You can use the ASPX Editor to edit the ASPX code of a page that has been customized by means       of the Screen Editor. You can use this editor instead of the Screen Editor if you prefer a       text editor rather than a visual tool. You can launch the ASPX Editor by clicking  Actions &gt; Edit Aspx  on the toolbar of the Screen Editor. The ASPX Editor page contains the work area of the editor and a toolbar with only the          Generate Customization Script  button, as shown in the following         screenshot. You use the  Generate Customization Script  button instead of a          Save  button because this action saves to the customization project       not the modified ASPX code but the difference between the modified code and the original code       of the page. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="fccab20d-bccc-1578-99e6-f07dd39a1199" RecordSourceID="22377" />
		<row PageID="7374ac00-5027-4105-a243-26438d9ea335" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="09d1e8e6-a0e6-e5b5-46fa-b3c7b39980d5" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You use the Condition Editor to construct a condition that can later be specified as a property value for the following items on a particular form:[anchor|#_0bf63304-6c82-4454-b06a-ab2a445a4808]
*A UI control
*An action including an auto-run action
*Transition

You open the Condition Editor by clicking '''Conditions''' under the screen ID (of the form for which you are constructing the condition) in the navigation pane of the Customization Project Editor. The Condition Editor contains the following parts:[anchor|#_a3834b99-d2d7-4a97-8417-b5d9bd45ae4c]
*A page toolbar with standard table toolbar buttons
*A table with a list of the created conditions and the basic settings of each of them

When you click the link in the '''Condition Name''' column in the table area, the '''Condition Properties''' dialog box is opened, which shows the rows that make up the condition. You can add new rows and modify existing rows of a condition.{br}

The following screenshot shows the Condition Editor page for the [HelpRoot_FormReference\CR_30_40_00|Opportunities] ([~/?ScreenId=CR304000|CR304000]) form.[anchor|#_b4deed30-7ab6-4d3a-a514-5db8851e7249][anchor|#_f0bb6b4b-b6f3-4c22-9144-f23f7f4e1e32][image:CustomizationPlatform/images/ConditionEditor.png|popup|The Condition Editor page|450px]{br}{TOC}
==Related Articles==
*[HelpRoot_Dev_Customization\CG_GL_Items_AddCondition|To Add a Condition]]]></column>
			<column name="PlainText"><![CDATA[Condition Editor You use the Condition Editor to construct a condition that can later be specified as a     property value for the following items on a particular form: A UI control An action including an auto-run action Transition You open the Condition Editor by clicking  Conditions  under the screen     ID (of the form for which you are constructing the condition) in the navigation pane of the  Customization Project Editor. The     Condition Editor contains the following parts: A page toolbar with standard table toolbar buttons A table with a list of the created conditions and the basic settings of each of them When you click the link in the  Condition Name  column in the table area,     the  Condition Properties  dialog box is opened, which shows the rows that     make up the condition. You can add new rows and modify existing rows of a condition. The following screenshot shows the Condition Editor page for the   ([~/?ScreenId=CR304000|CR304000]) Opportunities (CR304000) form. The Condition Editor page ]]></column>
		</row>
		<row PageID="7666373a-3ac9-4a1c-ab1c-b9f0ddf81c6c" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="a8c4a273-e3c5-1889-d1c4-2de2cc30f827" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can customize a form by defining a ''workflow'' in Customization Project Editor. A ''workflow'' is a process of changing the state of an entity as a result of a the user performing some particular action. A workflow can be described as a state machine. To give you the ability to define workflows for particular forms, the Customization Project Editor provides the Workflow Editor.{br}

You can open the Workflow Editor by clicking '''Workflows''' under the screen ID (of the form on which you are defining or modifying a workflow) in the navigation pane of the Customization Project Editor. The Workflow Editor contains the following pages: Workflows and Workflows: &lt;Workflow Name&gt;.{br}{TOC}
==The Workflows Page==
The Workflows page contains a list of all workflows defined for a form including predefined and custom wokrflows. The Workflows page contains the following parts:[anchor|#_049e8e47-cf36-4568-a66e-8b0a9d3f5e5e]
*A page toolbar with the following buttons:
**The standard '''Cancel''', '''Save''', and '''Clipboard''' buttons.
**The '''Upgrade Predefined Worklow''' button, which you click to upgrade the selected custom workflow based on a predefined workflow with the latest changes from the system.
**The '''Disinherit''' button, which you click to break the relationship between the predefined workflow and a workflow that was based on it. If you click a workflow in the table and then click this button, the selected workflow will no longer get updates from the system, and the '''Upgrade Predefined Workflow''' action will not be available for the workflow.
**:((({S:Warn}You cannot revert the '''Disinherit''' action. That is, you cannot link the selected workflow to a predefined workflow once you have selected the workflow and clicked the '''Disinherit''' action.
)))
**The '''View Changes''' button. When you click the button, the '''Changes''' dialog box is opened where you can view the description of a workflow n in the JSON format. If any changes were applied to a predefined workflow, they are highlighted in the dialog box. You can return the workflow to the predefined state by clicking '''Revert Changes''' in the '''Changes''' dialog box.
**:((({S:Warn}The '''View Changes''' button is available for only inherited workflows, that is workflows based on a predefined wokrflow.
)))
*The Summary area, which contains the state identifier, the workflow-identifying field, and the '''Allow Users to Modify Value''' check box.
*A table that lists all workflows defined for the form.

If you click the workflow name from the Workflows page, you open the Workflows: &lt;Workflow Name&gt; page{br}

The following screenshot shows the Workflows page with a single workflow for the [HelpRoot_FormReference\CR_30_10_00|Leads] ([~/?ScreenId=CR301000|CR301000]) form.[anchor|#_3ef25da6-53cc-4761-af36-4564f04f6b03][anchor|#_9ed4bbbe-d6b5-4968-92d9-0fc3c93531ec][image:CustomizationPlatform/images/CG_Platform_Tools_Workflows_Main_Default.png|popup|The Workflows page|450px]
==The Workflows: &lt;Workflow Name&gt; Page==
You use the Workflows: &lt;Workflow Name&gt; page to define states, transitions, and actions of a workflow. The page contains the following parts:[anchor|#_b3098b90-3ca9-4b85-82f7-5e4c57850f10]
*A page toolbar with the following buttons:
**The standard '''Cancel''' and '''Save''' buttons.
**The '''View Changes''' button. When you click the button, the '''Changes''' dialog box is opened where you can view the description of a workflow n in the JSON format. If any changes were applied to a predefined workflow, they are highlighted in the dialog box. You can return the workflow to the predefined state by clicking '''Revert Changes''' in the '''Changes''' dialog box.
**:((({S:Warn}The '''View Changes''' button is available for only inherited workflows, that is workflows based on a predefined wokrflow.
)))
*The '''States and Transitions''' pane, which contains the list of states and transitions defined for the workflow
*A tab area with three tabs: '''State Properties''', '''Actions''', and '''Transition Properties'''.
*:If a state is selected in the '''States and Transitions''' pane, the '''State Properties''' and '''Actions''' tabs are displayed. If a transition is selected in the '''States and Transitions''' pane, the '''Transition Properties''' tab is displayed.

The following screenshot shows the Workflows: Default workflow page for the [HelpRoot_FormReference\CR_30_10_00|Leads] ([~/?ScreenId=CR301000|CR301000]) form.[anchor|#_cdd407c9-4dc1-43fd-a736-478aad5a190e][anchor|#_451177eb-c3de-4d2b-85b0-bdbfc4cc2811][image:CustomizationPlatform/images/CG_Platform_Tools_Workflows_Default.png|popup|The Workflows: Default workflow page|450px]
==Related Articles==
*[HelpRoot_Dev_Customization\CG_GL_Items_AddWorkflow|To Add a Workflow]]]></column>
			<column name="PlainText"><![CDATA[Workflow Editor You can customize a form by defining a  workflow  in  Customization Project Editor. A  workflow  is a process of changing the state of an entity as a result of a the         user performing some particular action. A workflow can be described as a state machine. To         give you the ability to define workflows for particular forms, the  Customization Project Editor         provides the Workflow Editor. You can open the Workflow Editor by clicking  Workflows  under the         screen ID (of the form on which you are defining or modifying a workflow) in the navigation         pane of the  Customization Project Editor. The Workflow Editor contains the following pages: Workflows and Workflows: <Workflow         Name>. The Workflows Page The Workflows page contains a list of all workflows defined for a form including predefined         and custom wokrflows. The Workflows page contains the following parts: A page toolbar with the following buttons: The standard  Cancel ,  Save , and                  Clipboard  buttons. The  Upgrade Predefined Worklow  button, which you click to               upgrade the selected custom workflow based on a predefined workflow with the latest               changes from the system. The  Disinherit  button, which you click to break the               relationship between the predefined workflow and a workflow that was based on it. If               you click a workflow in the table and then click this button, the selected workflow               will no longer get updates from the system, and the  Upgrade Predefined                 Workflow  action will not be available for the workflow. You cannot                 revert the  Disinherit  action. That is, you cannot link the                 selected workflow to a predefined workflow once you have selected the workflow and                 clicked the  Disinherit  action. The  View Changes  button. When you click the button, the                  Changes  dialog box is opened where you can view the               description of a workflow n in the JSON format. If any changes were applied to a               predefined workflow, they are highlighted in the dialog box. You can return the               workflow to the predefined state by clicking  Revert Changes  in               the  Changes  dialog box. The  View                   Changes  button is available for only inherited workflows, that is                 workflows based on a predefined wokrflow. The Summary area, which contains the state identifier, the workflow-identifying field,           and the  Allow Users to Modify Value  check box. A table that lists all workflows defined for the form. If you click the workflow name from the Workflows page, you open the Workflows:         <Workflow Name> page The following screenshot shows the Workflows page with a single workflow for the   ([~/?ScreenId=CR301000|CR301000]) Leads (CR301000) form. The Workflows page The Workflows: <Workflow Name> Page You use the Workflows: <Workflow Name> page to define states, transitions, and actions         of a workflow. The page contains the following parts: A page toolbar with the following buttons: The standard  Cancel  and  Save                buttons. The  View Changes  button. When you click the button, the                  Changes  dialog box is opened where you can view the               description of a workflow n in the JSON format. If any changes were applied to a               predefined workflow, they are highlighted in the dialog box. You can return the               workflow to the predefined state by clicking  Revert Changes  in               the  Changes  dialog box. The  View                   Changes  button is available for only inherited workflows, that is                 workflows based on a predefined wokrflow. The  States and Transitions  pane, which contains the list of           states and transitions defined for the workflow A tab area with three tabs:  State Properties ,              Actions , and  Transition Properties . If a             state is selected in the  States and Transitions  pane, the                State Properties  and  Actions  tabs are             displayed. If a transition is selected in the  States and               Transitions  pane, the  Transition Properties  tab is             displayed. The following screenshot shows the Workflows: Default workflow page for the   ([~/?ScreenId=CR301000|CR301000]) Leads (CR301000) form. The Workflows: Default workflow page ]]></column>
		</row>
		<row PageID="0f48f3db-c45a-4e1b-aad0-4e4bcd8a388b" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="521cbbaf-b854-2d36-0180-a4c3e320a0ff" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can configure a ''dialog box'' that is shown to a user who clicks a particular action on a specific form. To give you the ability to define workflow dialog boxes, the Customization Project Editor provides the Dialog Box Editor. {br}

You can open the Dialog Box Editor by clicking '''Dialog Boxes''' under the screen ID (of the form for which the workflow has been defined) in the navigation pane of the Customization Project Editor. The Dialog Box Editor contains the following parts:[anchor|#_5992d5c7-c6ab-4ccf-a41a-d24e00b08d9f]
*A page toolbar (see item 1 in the screenshot below) with standard buttons and the following form specific buttons:
**The '''Preview Dialog Box''' button which opens the selected dialog box.
**The '''View Changes''' button. When you click the action, the '''Changes''' dialog box is opened where you can view the description of a dialog box in the JSON format. If any changes were applied to a predefined dialog box, they are highlighted in the '''Changes''' dialog box. You can return the dialog box to the predefined state by clicking '''Revert Changes''' in the '''Changes''' dialog box.
**:((({S:Warn}This button is available for only inherited dialog boxes, that is dialog boxes based on a predefined dialog box.
)))
*A pane that contains the list of defined dialog boxes (item 2)
*An area with information about the dialog box selected in the pane and a list of its fields (item 3)

The following screenshot shows the Dialog Box Editor page for the [HelpRoot_FormReference\CR_30_40_00|Opportunities] ([~/?ScreenId=CR304000|CR304000]) form with three dialog boxes defined.[anchor|#_c57e7f8f-193e-4490-8d69-f29637b2e251][anchor|#_196d9a9d-0249-4f18-aead-28320d17fec2][image:CustomizationPlatform/images/CG_Plarform_Tools_Forms_Example.png|popup|The Dialog Box Editor page|450px]{br}{TOC}
==Related Articles==
*[HelpRoot_Dev_Customization\CG_GL_Items_AddForm|To Add a Dialog Box]]]></column>
			<column name="PlainText"><![CDATA[Dialog Box Editor You can configure a  dialog box  that is shown to a user who clicks a particular action         on a specific form. To give you the ability to define workflow dialog boxes, the  Customization Project Editor         provides the Dialog Box Editor.  You can open the Dialog Box Editor by clicking  Dialog Boxes  under the         screen ID (of the form for which the workflow has been defined) in the navigation pane of         the  Customization Project Editor. The Dialog Box Editor contains the following parts: A page toolbar (see item 1 in the screenshot below) with standard buttons and the following           form specific buttons: The                  Preview Dialog Box  button which opens the selected dialog               box. The  View Changes  button. When you click the action, the                  Changes  dialog box is opened where you can view the               description of a dialog box in the JSON format. If any changes were applied to a               predefined dialog box, they are highlighted in the  Changes                dialog box. You can return the dialog box to the predefined state by clicking                  Revert Changes  in the  Changes  dialog                 box. This button is available for only inherited dialog                 boxes, that is dialog boxes based on a predefined dialog box. A pane that contains the list of defined dialog boxes (item 2) An area with information about the dialog box selected in the pane and a list of its fields      (item 3) The following screenshot shows the Dialog Box Editor page for the   ([~/?ScreenId=CR304000|CR304000]) Opportunities (CR304000) form with three dialog boxes defined. The Dialog Box Editor page ]]></column>
		</row>
		<row PageID="db3fe41f-b23f-4d18-8fbb-27ab021b4ea7" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="e096744a-c599-7ea2-b902-b904794bdf44" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The Customization Project Editor provides the Field Editor to give you the ability to modify the following properties of a particular field of a specific form:[anchor|#_6f6952c6-951b-4441-914e-19b5fd282120]
*{{Disabled}}
*{{Hidden}}
*{{Required}}
*List of combo box values
{br}

You open the Field Editor by clicking '''Fields''' under the screen ID (of the form on which you are modifying the field’s properties) in the navigation pane of the Customization Project Editor. The Field Editor contains the following parts:[anchor|#_5992d5c7-c6ab-4ccf-a41a-d24e00b08d9f]
*A page toolbar with standard table toolbar buttons and the following form specific button:
**The '''Combo Box Values''' button. You click this button to configure the list of values for fields which are displayed as combo boxes. The button is available only for such fields.
**The '''View Changes''' button. When you click the action, the '''Changes''' dialog box is opened where you can view the description of a field in the JSON format. If any changes were applied to a predefined field, they are highlighted in the dialog box. You can return the field to the predefined state by clicking '''Revert Changes''' in the '''Changes''' dialog box.
*An table that lists the fields and their basic properties

The following screenshot shows the Field Editor page for the[HelpRoot_FormReference\CR_30_40_00|Opportunities] ([~/?ScreenId=CR304000|CR304000]) form with four added fields.[anchor|#_c57e7f8f-193e-4490-8d69-f29637b2e251][anchor|#_7f5f7fba-ef64-4b93-8e28-4bcc5075f564][image:CustomizationPlatform/images/RN_2020_R1_Developer_Fields_Editor.png|popup|The Field Editor page|450px]{br}{TOC}
==Related Articles==
*[HelpRoot_Dev_Customization\CG_GL_Items_AddField|To Modify Field Properties]]]></column>
			<column name="PlainText"><![CDATA[Field Editor The  Customization Project Editor         provides the Field Editor to give you the ability to modify the following properties of a         particular field of a specific form: Disabled Hidden Required List of combo box values You open the Field Editor by clicking  Fields  under the screen ID (of         the form on which you are modifying the field’s properties) in the navigation pane of the            Customization Project Editor. The Field Editor contains the following parts: A page toolbar with standard table toolbar buttons and the following form specific             button: The  Combo Box Values  button. You click this button to               configure the list of values for fields which are displayed as combo boxes. The button               is available only for such fields. The  View Changes  button. When you click the action, the                  Changes  dialog box is opened where you can view the               description of a field in the JSON format. If any changes were applied to a predefined               field, they are highlighted in the dialog box. You can return the field to the               predefined state by clicking  Revert Changes  in the                  Changes  dialog box. An table that lists the fields and their basic properties The following screenshot shows the Field Editor page for the  ([~/?ScreenId=CR304000|CR304000]) Opportunities (CR304000) form with four added fields. The Field Editor page ]]></column>
		</row>
		<row PageID="cac7be49-2a2e-48e4-9c9f-0833d40daa60" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="9157bfc5-4cbc-27f4-444e-ff5ddd287594" RecordSourceID="22377">
			<column name="Content"><![CDATA[
For a particular form, you may need to add a new action, modify an action in a predefined workflow, or modify an action defined in a graph. {br}

To give you these abilities, the Customization Project Editor provides the Action Editor. You open the Action Editor by clicking '''Actions''' under the screen ID (of the form on which you are adding or modifying actions) in the navigation pane of the Customization Project Editor. The Action Editor contains the following parts:[anchor|#_5992d5c7-c6ab-4ccf-a41a-d24e00b08d9f]
*A page toolbar with standard table toolbar buttons and the following form specific buttons:
**The '''Reorder Actions''' button. When you click the button, the '''Reorder Action''' dialog box is opened where you can reoder action located on a page toolbar or in a selected folder.
**The '''View Changes''' button. When you click the button, the '''Changes''' dialog box is opened where you can view the description of an action in the JSON format. If any changes were applied to a predefined action, they are highlighted in the dialog box. You can return the action to the predefined state by clicking '''Revert Changes''' in the '''Changes''' dialog box.
**:((({S:Warn}The button is available only for inherited actions, that is actions based on predefined actions.
)))
**The '''Revert All Changes''' button. When you click the button, all actions are returned to their predefined state.
*A table with a list of actions and the basic settings of each of them

When you click the link in the '''Action Name''' column in the table area, the '''Action Properties''' dialog box is opened, which shows the properties. The list of properties may differ depending on the type of the action.{br}

The following screenshot shows the Action Editor page for the [HelpRoot_FormReference\CR_30_40_00|Opportunities] ([~/?ScreenId=CR304000|CR304000]) form.[anchor|#_c57e7f8f-193e-4490-8d69-f29637b2e251][anchor|#_a49290ca-9491-46bc-bd9c-3a873e67e7fc][image:CustomizationPlatform/images/RN_2020_R1_Developer_Actions_Editor.png|popup|The Action Editor page|450px]
((({S:Warn}The editor automatically displays actions added in the predefined workflow and actions added in previous versions of Acumatica ERP in the Screen Editor.
))){br}{TOC}
==Related Articles==
*[HelpRoot_Dev_Customization\CG_GL_items_ConfigureActions|To Configure Actions]]]></column>
			<column name="PlainText"><![CDATA[Action Editor For a particular form, you may need to add a new action, modify an action in a predefined     workflow, or modify an action defined in a graph.  To give you these abilities, the  Customization Project Editor         provides the Action Editor. You open the Action Editor by clicking            Actions  under the screen ID (of the form on which you are adding or         modifying actions) in the navigation pane of the  Customization Project Editor. The Action Editor contains the following parts: A page toolbar with standard table toolbar buttons and the following form specific             buttons: The                  Reorder Actions  button. When you click the button, the                  Reorder Action  dialog box is opened where you can reoder               action located on a page toolbar or in a selected folder. The  View Changes  button. When you click the button, the                  Changes  dialog box is opened where you can view the               description of an action in the JSON format. If any changes were applied to a               predefined action, they are highlighted in the dialog box. You can return the action               to the predefined state by clicking  Revert Changes  in the                  Changes  dialog box. The button is available only for                 inherited actions, that is actions based on predefined actions. The  Revert All Changes  button. When you click the button, all               actions are returned to their predefined state. A table with a list of actions and the basic settings of each of them When you click the link in the  Action Name  column in the table area,     the  Action Properties  dialog box is opened, which shows the properties.     The list of properties may differ depending on the type of the action. The following screenshot shows the Action Editor page for the   ([~/?ScreenId=CR304000|CR304000]) Opportunities (CR304000) form. The Action Editor page The editor automatically displays actions added in the predefined workflow and actions      added in previous versions of  Acumatica ERP      in the Screen Editor. ]]></column>
		</row>
		<row PageID="96390b13-24a9-41cc-a3f3-3a63b2efa552" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="78fd3488-6f28-4bfa-09cd-6b08ebbf5cd0" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You use the Data Class Editor to develop the content of extensions for data access classes (DACs). By using the editor, for example, you can do the following:[anchor|#ul_yhr_gkp_gq]
*Customize the attributes of the existing fields of a DAC
*Add custom fields to a DAC
*For a selector field, add, delete, and sort the columns of the selector table
*Review the modifications made to an original class
*View the source code of an original data access class
*Navigate to the form on which a field of a class is used
{br}

While performing the customization, you can open the editor in the following ways:[anchor|#ul_bjv_g4f_fq]
*From the '''Customization Menu''' > '''Inspect Element''' > '''Element Properties''' dialog box, by selecting the '''Customize Data Fields''' command on the '''Actions''' menu
*From the Customized Data Classes page of the Customization Project Editor, by selecting the '''Name''' field of a DAC
*From the navigation pane of the Customization Project Editor, by clicking an item in the '''Data Access''' folder
{br}

The Data Class Editor page includes the following elements (see the screenshot below):[anchor|#ul_omk_llp_gq]
*The title with the name of the customized class
*A toolbar with standard and page-specific buttons
*A list of the customized fields of the class
*A work area to customize the attributes of the field that is currently selected in the list
[anchor|#image_x2z_dlp_gq][image:CustomizationPlatform/images/Cust_DAC_Editor_01.png|popup|450px]{br}

The page toolbar contains the following page-specific buttons.[anchor|#table_ikc_4np_gq]
{| class="checklist" | width="100%" 
|- 
!Button
!Description
|- 
| '''Add Field'''
| Provides the following actions:[anchor|#ul_tnw_xnp_gq]
*'''Create New Field''': Opens the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_DataClassEditor_NewFieldDlg|Create New Field Dialog Box], which you can use to add a new custom field to the DAC.
*'''Change Attributes of Base Field''': Opens the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_DataClassEditor_ExistingField|Change Existing Field Dialog Box], which you can use to add an existing field of the DAC to the customization project.

|- 
| '''Open Screen'''
| For the DAC, opens the primary form of Acumatica ERP.((({S:Warn}If there is a primary business logic controller (BLC) for the class, then the primary form is the form bound to this container. Otherwise, the primary form is the form bound to the BLC in which the class is the main DAC of the primary view. See the Acumatica Framework training documentation for details.
)))
|- 
| '''View Source'''
| Opens the [HelpRoot_Dev_Customization\CG_Platform_Tools_SM204570|Source Code Browser] on the '''Data Access''' tab, which displays the DAC source code.
|- 
| '''Selector Columns'''
| (Available for only the fields that are selectors.) Opens the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_DataClassEditor_SelectorDlg|Customize Selector Columns Dialog Box], in which you can modify the columns in the selector table.
|- 
| '''Edit Attributes'''
| (Unavailable for new custom fields.) Opens the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_DataClassEditor_CustAttrDlg|Customize Attributes Dialog Box], which you can use to customize the attributes of the selected field.
|}{br}

You use the list of the currently customized fields of the DAC to select the field that you can review or change in the work area.{br}

The work area of the page consists of the following:[anchor|#ul_m4p_fgq_gq]
*The title with the name and type (in parentheses: '''New Field''' or '''Customized Existing Field''') of the selected field
*The '''Customize Attributes''' text area, where you can edit the attributes of the selected field
*The '''Original Attributes''' text area, where you can view the original attributes of the selected field
*A drop-down list that is visible for only existing customized fields of the data access class, so you can select one of the following ways of applying the changes to the field attributes:
**''Keep Original'': The original attributes remain on the field until you select another option in this box.
**''Replace Original'': The original attributes are replaced on the field with the custom attributes specified in the '''Customize Attributes''' text area.
**''Append to Original'': The custom attributes are added to the end of the list of the original attributes of the data field. If you use this option, make sure you do not duplicate attributes on the field.
((({S:Warn}The platform gives you advanced possibilities to control the field customization by using additional attributes in the DAC extension. See [HelpRoot_Dev_Customization\CG_Platform_Framework_CS_DACExt_FieldAttributes|Customization of Field Attributes in DAC Extensions] of [HelpRoot_Dev_Customization\CG_Platform_Framework|Customization Framework] for details.
)))
If you want to change the original attributes in the '''Customize Attributes''' text area, before typing any text in the area, select the ''Replace Original'' option. The original attributes will be copied to the '''Customize Attributes''' text area.]]></column>
			<column name="PlainText"><![CDATA[Data Class Editor You use the Data Class Editor to develop the content of extensions for data access classes       (DACs). By using the editor, for example, you can do the following: Customize the attributes of the existing fields of a DAC Add custom fields to a DAC For a selector field, add, delete, and sort the columns of the selector table Review the modifications made to an original class View the source code of an original data access class Navigate to the form on which a field of a class is used While performing the customization, you can open the editor in the following ways: From the  Customization Menu Inspect Element Element Properties  dialog box, by selecting the  Customize Data Fields            command on the  Actions  menu From the Customized Data Classes page of the  Customization Project Editor, by selecting the  Name  field of a DAC From the navigation pane of the  Customization Project Editor, by clicking an item in the  Data Access  folder The Data Class Editor page includes the following elements (see the screenshot below): The title with the name of the customized class A toolbar with standard and page-specific buttons A list of the customized fields of the class A work area to customize the attributes of the field that is currently selected in the           list The page toolbar contains the following page-specific buttons. Button Description Add Field Provides the following actions: Create New Field : Opens the  Create New Field Dialog Box, which you                     can use to add a new custom field to the DAC. Change Attributes of Base Field : Opens the  Change Existing Field Dialog Box, which                     you can use to add an existing field of the DAC to the customization                     project. Open Screen For the DAC, opens the primary form of  Acumatica ERP. If there is a primary business logic controller (BLC) for the class, then                   the primary form is the form bound to this container. Otherwise, the primary form                   is the form bound to the BLC in which the class is the main DAC of the primary                   view. See the  Acumatica Framework training documentation for details. View Source Opens the  Source Code Browser on the  Data                   Access  tab, which displays the DAC source code. Selector Columns (Available for only the fields that are selectors.) Opens the  Customize Selector Columns Dialog Box, in which you                 can modify the columns in the selector table. Edit Attributes (Unavailable for new custom fields.) Opens the  Customize Attributes Dialog Box, which you can                 use to customize the attributes of the selected field. You use the list of the currently customized fields of the DAC to select the field that you       can review or change in the work area. The work area of the page consists of the following: The title with the name and type (in parentheses:  New Field  or              Customized Existing Field ) of the selected field The  Customize Attributes  text area, where you can edit the           attributes of the selected field The  Original Attributes  text area, where you can view the           original attributes of the selected field A drop-down list that is visible for only existing customized fields of the data access           class, so you can select one of the following ways of applying the changes to the field             attributes: Keep Original : The original attributes remain on the field until you select               another option in this box. Replace Original : The original attributes are replaced on the field with the               custom attributes specified in the  Customize Attributes  text               area. Append to Original : The custom attributes are added to the end of the list of               the original attributes of the data field. If you use this option, make sure you do               not duplicate attributes on the field. The platform gives you advanced possibilities to control the field customization by using       additional attributes in the DAC extension. See  Customization of Field Attributes in DAC Extensions of  Customization Framework for details. If you want to change the original attributes in the  Customize         Attributes  text area, before typing any text in the area, select the  Replace         Original  option. The original attributes will be copied to the  Customize         Attributes  text area. ]]></column>
		</row>
		<row PageID="782ad9a2-f274-499b-8ffe-3bdfdb45fbd9" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="79cf5a8f-8f52-f7bc-76d3-983a86955514" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can use the '''Create New Field''' dialog box to add a new data field to the customized DAC.{br}

You can open the dialog box, shown in the following screenshot, in either of the following ways:[anchor|#ul_fd3_qgd_hq]
*From the '''Add Data Fields''' tab of the Screen Editor, by clicking the '''New Field''' button
*From the '''Add Field''' button of the Data Class Editor, by selecting the '''Create New Field''' command
[anchor|#image_m5l_vbq_gq][image:CustomizationPlatform/images/Cust_DAC_Editor_02.png|popup|200px]
The dialog box controls are described below.[anchor|#table_ddf_xsv_gq]
{| class="checklist" | width="100%" 
|- 
!Control
!Description
|- 
| '''Field Name'''
| The name of the field in the DAC. Because the field is custom, the ''Usr'' prefix is added automatically to the name when the box loses focus.
|- 
| '''Display Name'''
| The name of the field to be displayed on the form. The specified string is inserted into the <tt>DisplayName</tt> parameter of the <tt>PXUIField</tt> attribute of the field.
|- 
| '''Storage Type'''
| The storage type for the field, which can be one of the following:[anchor|#ul_qp5_1gx_gq]
*''NonPersistedField'': An unbound field of the DAC. The unbound field is added only to the data access class and is not mapped to the database.
*''DBTableColumn'': An ordinary bound field. The platform adds the database column to the base table by altering the base table schema.
*''NameValuePair'': A &ldquo;name-value&ldquo; bound field. The platform stores the field value in a dedicated table of the database without altering the schema of the base table.

|- 
| '''Data Type'''
| The data type to be used for a custom fields, which can be one of the following: ''string'', ''int'', ''bool'', ''decimal'', ''datetime'', and ''guid''.
|- 
| '''Length'''
| (Available if you have selected the ''string'' or ''decimal'' type.) For the ''string'' type, the maximum number of symbols in the field value; for the ''decimal'' type, the precision of the value (the maximum total number of decimal digits that will be stored, both to the left of the decimal point and to the right of it).
|- 
| '''Decimal'''
| (Available only if you have selected the ''decimal'' type.) The scale of the value (that is, the number of decimal digits that will be stored to the right of the decimal point).
|- 
| '''OK'''
| Adds the new field with the specified properties to the data access class and closes the dialog box. The field appears in the list of customized fields of the class in the Data Class Editor.
|- 
| '''Cancel'''
| Closes the dialog box.
|}]]></column>
			<column name="PlainText"><![CDATA[Create New Field Dialog Box You can use the  Create New Field  dialog box to add a new data field to       the customized DAC. You can open the dialog box, shown in the following screenshot, in either of the following         ways: From the  Add Data Fields  tab of the Screen Editor, by clicking           the  New Field  button From the  Add Field  button of the Data Class Editor, by selecting           the  Create New Field  command The dialog box controls are described below. Control Description Field Name The name of the field in the DAC. Because the field is custom, the  Usr                  prefix is added automatically to the name when the box loses focus. Display Name The name of the field to be displayed on the form. The specified string is                 inserted into the  DisplayName  parameter of the                    PXUIField  attribute of the field. Storage Type The storage type for the field, which can be one of the following: NonPersistedField : An unbound field of the DAC. The unbound field is                     added only to the data access class and is not mapped to the database. DBTableColumn : An ordinary bound field. The platform adds the database                     column to the base table by altering the base table schema. NameValuePair : A "name-value" bound field. The platform stores the                     field value in a dedicated table of the database without altering the schema of                     the base table. Data Type The data type to be used for a custom fields, which can be one of the                 following:  string ,  int ,  bool ,  decimal ,  datetime ,                 and  guid . Length (Available if you have selected the  string  or  decimal  type.) For                 the  string  type, the maximum number of symbols in the field value; for the                    decimal  type, the precision of the value (the maximum total number of                 decimal digits that will be stored, both to the left of the decimal point and to the                 right of it). Decimal (Available only if you have selected the  decimal  type.) The scale of the                 value (that is, the number of decimal digits that will be stored to the right of the                 decimal point). OK Adds the new field with the specified properties to the data access class and                 closes the dialog box. The field appears in the list of customized fields of the                 class in the Data Class Editor. Cancel Closes the dialog box. ]]></column>
		</row>
		<row PageID="d0435948-97b9-4bc3-8281-54778cc80c1d" Language="en-US" PageRevisionID="1" Content="&#xA;The '''Change Existing Field''' dialog box, shown below, is used to add an existing field of the data access class (DAC) to the list for customization.[anchor|#image_f4r_fdq_gq][image:CustomizationPlatform/images/Cust_DAC_Editor_03.png|popup|200px]{br}&#xA;&#xA;You can open the dialog box by clicking the '''Add Field''' button of the Data Class Editor and selecting the '''Change Attributes of Base Field''' command.{br}&#xA;&#xA;The dialog box controls are described below.[anchor|#table_pjk_dkd_hq]&#xA;{| class=&quot;checklist&quot; | width=&quot;100%&quot; &#xA;|- &#xA;!Control&#xA;!Description&#xA;|- &#xA;| '''Field Name'''&#xA;| The existing field of the DAC you want to change.&#xA;|- &#xA;| '''OK'''&#xA;| Adds the selected field to the list of the customized fields of the data access class, and closes the dialog box.&#xA;|- &#xA;| '''Cancel'''&#xA;| Closes the dialog box.&#xA;|}" PlainText="Change Existing Field Dialog Box The  Change Existing Field  dialog box, shown below, is used to add an       existing field of the data access class (DAC) to the list for customization. You can open the dialog box by clicking the  Add Field  button of the Data       Class Editor and selecting the  Change Attributes of Base Field        command. The dialog box controls are described below. Control Description Field Name The existing field of the DAC you want to change. OK Adds the selected field to the list of the customized fields of the data access                 class, and closes the dialog box. Cancel Closes the dialog box. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="e5d2f308-ec45-6b00-5285-eca9b027c269" RecordSourceID="22377" />
		<row PageID="c461e3e3-61ce-484c-83b3-e87fa7a54553" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="ce554db9-e4b0-b84f-d875-e143ecdaadbc" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The '''Customize Selector Columns''' dialog box, shown below, is available for only a selector field. In the dialog box, you can add, delete, and sort columns to customize the selector table. The dialog box contains a toolbar, a table, the '''OK''' and '''Cancel''' buttons.{br}

You can open the dialog box from the Data Class Editor by clicking the '''Selector Columns''' button.{br}

[anchor|#image_qhh_22q_gq][image:CustomizationPlatform/images/Cust_DAC_Editor_04.png|popup|300px]{br}

The dialog box toolbar includes the buttons described below.[anchor|#table_wkd_rr2_hq]
{| class="checklist" | width="100%" 
|- 
!Button
!Description
|- 
| Refresh
| Refreshes the list of columns displayed in the table.
|- 
| Delete
| Deletes the selected column from the selector.
|- 
| '''Add Columns'''
| Opens the [HelpRoot_Dev_Customization\CG_Platform_Tools_DataClassEditor_SelectorDLG_AddDlg|Add Columns to Selector Dialog Box], which you can use to add columns to the table of this dialog box.
|- 
| '''Up'''
| Moves up the selected field so the column moves left in the selector.
|- 
| '''Down'''
| Moves down the selected field so the column moves right in the selector.
|}
The table contains information on the selector content and includes the following columns.[anchor|#table_qfz_12m_hq]
{| class="checklist" | width="100%" 
|- 
!Column
!Description
|- 
| '''Column Name'''
| The value of the <tt>DisplayName</tt> parameter of the <tt>PXUIField</tt> attribute of the field.
|- 
| '''Data Field'''
| The name of the public virtual property of the field in the DAC.
|}{br}

After you click '''OK''' in the '''Customize Selector Columns''' dialog box, the system applies the modifications to the selector table. As a result, the <tt>PXCustomizeSelectorColumns</tt> attribute is added to the selector field, and you can view the attribute in the '''Customize Attributes''' text area of the Data Class Editor. This attribute defines the new set and order of the columns in the selector.{br}

The '''Cancel''' button closes the dialog box without saving changes to the selector table.]]></column>
			<column name="PlainText"><![CDATA[Customize Selector Columns Dialog Box The  Customize Selector Columns  dialog box, shown below, is available       for only a selector field. In the dialog box, you can add, delete, and sort columns to       customize the selector table. The dialog box contains a toolbar, a table, the          OK  and  Cancel  buttons. You can open the dialog box from the Data Class Editor by clicking the  Selector         Columns  button. The dialog box toolbar includes the buttons described below. Button Description Refresh Refreshes the list of columns displayed in the table. Delete Deletes the selected column from the selector. Add Columns Opens the  Add Columns to Selector Dialog Box, which you can use to add columns to the table of this dialog box. Up Moves up the selected field so the column moves left in the selector. Down Moves down the selected field so the column moves right in the selector. The table contains information on the selector content and includes the following         columns. Column Description Column Name The value of the  DisplayName  parameter of the                    PXUIField  attribute of the field. Data Field The name of the public virtual property of the field in the DAC. After you click  OK  in the  Customize Selector         Columns  dialog box, the system applies the modifications to the selector table.       As a result, the  PXCustomizeSelectorColumns  attribute is added to the       selector field, and you can view the attribute in the  Customize         Attributes  text area of the Data Class Editor. This attribute defines the new       set and order of the columns in the selector. The  Cancel  button closes the dialog box without saving changes to the       selector table. ]]></column>
		</row>
		<row PageID="90ab15e2-4d30-441c-a3b8-7f80df483a8e" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="09553777-9a1d-c2c0-4613-fe21621ce999" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The '''Add Columns to Selector''' dialog box, shown in the following screenshot, is used to add one or multiple columns to the selector table at once. The dialog box contains a table with filters and the '''OK''' and '''Cancel''' buttons.{br}

You can open the dialog box from the '''Customize Selector Columns''' dialog box by clicking the '''Add Columns''' button.{br}

[anchor|#image_oqr_zq2_hq][image:CustomizationPlatform/images/Cust_DAC_Editor_04_1.png|popup|300px]{br}

The table includes the following columns.[anchor|#table_n1v_rj4_gq]
{| class="checklist" | width="100%" 
|- 
!Column
!Description
|- 
| '''Selected'''
| A check box you can use to select fields that will be added to the selector.
|- 
| '''Column Name'''
| The value of the <tt>DisplayName</tt> parameter of the <tt>PXUIField</tt> attribute of the field.
|- 
| '''Data Field'''
| The name of the public virtual property of the field in the DAC.
|}{br}

Each tab of the '''Add Columns to Selector''' dialog box displays the filtered list of fields. The tabs are described below.[anchor|#table_yzp_lh4_gq]
{| class="checklist" | width="100%" 
|- 
!Filter
!Description
|- 
| '''All'''
| All fields.
|- 
| '''Selector'''
| Fields that are selectors.
|- 
| '''Custom'''
| New custom fields.
|}{br}

After you click '''OK''' in the '''Add Columns to Selector''' dialog box, the system applies the modifications. As a result, the selected columns are added to the table of the '''Customize Selector Columns''' dialog box.{br}

The '''Cancel''' button closes the dialog box without saving the changes to the selector table.]]></column>
			<column name="PlainText"><![CDATA[Add Columns to Selector Dialog Box The  Add Columns to Selector  dialog box, shown in the following    screenshot, is used to add one or multiple columns to the selector table at once. The dialog box    contains a table with filters and the  OK  and  Cancel     buttons. You can open the dialog box from the  Customize Selector Columns  dialog    box by clicking the  Add Columns  button. The table includes the following columns. Column Description Selected A check box you can use to select fields that will be added to the selector. Column Name The value of the  DisplayName  parameter of the           PXUIField  attribute of the field. Data Field The name of the public virtual property of the field in the DAC. Each tab of the  Add Columns to Selector  dialog box displays the filtered    list of fields. The tabs are described below. Filter Description All All fields. Selector Fields that are selectors. Custom New custom fields. After you click  OK  in the  Add Columns to Selector     dialog box, the system applies the modifications. As a result, the selected columns are added to    the table of the  Customize Selector Columns  dialog box. The  Cancel  button closes the dialog box without saving the changes to    the selector table. ]]></column>
		</row>
		<row PageID="fc2a18ec-959f-4cc7-9c9c-46b7a29c8b04" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="7984c055-4c16-1581-81a6-c239238d2933" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The '''Customize Attributes''' dialog box (shown in the following screenshot) provides the easiest way to edit attributes of the field selected in the Data Class Editor. The dialog box contains an attribute pane, a work area, and the '''OK''' and '''Cancel''' buttons.{br}

You can open the dialog box from the Data Class Editor by clicking the '''Edit Attributes''' button.{br}

[anchor|#image_pwv_k2q_gq][image:CustomizationPlatform/images/Cust_DAC_Editor_05.png|popup|380px]{br}

The attribute pane includes:[anchor|#ul_w2d_jlr_hq]
*A toolbar with the '''Refresh''' and '''Delete''' buttons.
*The list of the field attributes.
{br}

In the list, you can select an attribute to be deleted or edited.{br}

You can use the '''Delete''' button to delete the selected attribute of the field. After you delete the attribute and click '''OK''', the <tt>&#91;PXRemoveBaseAttribute(typeof(AttrNameAttribute))&#93;</tt> attribute is added to the field and you can view the attribute in the '''Customize Attributes''' text area of the Data Class Editor.{br}

The work area contains a table that lists the parameters of the attribute selected in the list. The table columns are described below.[anchor|#table_lj3_hsr_hq]
{| class="checklist" | width="100%" 
|- 
!Column
!Description
|- 
| '''Property'''
| The name of the parameter.
|- 
| '''Value'''
| The original value of the parameter.
|}{br}

In the table, you can enter any string as the parameter value without type validation. If the value of the customized parameter has an incorrect type, it causes a validation error during the publication of the project.{br}

After you click '''OK''' in the '''Customize Attributes''' dialog box, the platform applies the modifications to the field. As a result, the <tt>&#91;PXCustomizeBaseAttribute(typeof(AttrNameAttribute), &ldquo;ParameterName&ldquo;, NewValue)&#93;</tt> attribute is added to the field for each modified parameter. You can view the attribute in the '''Customize Attributes''' text area of the Data Class Editor.{br}

You can click the '''Cancel''' button to close the dialog box.]]></column>
			<column name="PlainText"><![CDATA[Customize Attributes Dialog Box The  Customize Attributes  dialog box (shown in the following screenshot)    provides the easiest way to edit attributes of the field selected in the Data Class Editor. The    dialog box contains an attribute pane, a work area, and the  OK  and      Cancel  buttons. You can open the dialog box from the Data Class Editor by clicking the  Edit     Attributes  button. The attribute pane includes: A toolbar with the  Refresh  and  Delete       buttons. The list of the field attributes. In the list, you can select an attribute to be deleted or edited. You can use the  Delete  button to delete the selected attribute of the    field. After you delete the attribute and click  OK , the      [PXRemoveBaseAttribute(typeof(AttrNameAttribute))]  attribute is added to the    field and you can view the attribute in the  Customize Attributes  text area    of the Data Class Editor. The work area contains a table that lists the parameters of the attribute selected in the list.    The table columns are described below. Column Description Property The name of the parameter. Value The original value of the parameter. In the table, you can enter any string as the parameter value without type validation. If the    value of the customized parameter has an incorrect type, it causes a validation error during the    publication of the project. After you click  OK  in the  Customize Attributes     dialog box, the platform applies the modifications to the field. As a result, the      [PXCustomizeBaseAttribute(typeof(AttrNameAttribute), "ParameterName",     NewValue)]  attribute is added to the field for each modified parameter. You can view    the attribute in the  Customize Attributes  text area of the Data Class    Editor. You can click the  Cancel  button to close the dialog box. ]]></column>
		</row>
		<row PageID="d93a1854-11b9-4de7-afdd-f1c549ff3fee" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="9fe8bf77-dcc4-c16d-f213-f370b227113d" RecordSourceID="22377">
			<column name="Content"><![CDATA[
With the Code Editor, you can develop, view, and edit the customization code that has been added to the project.{br}

You can open the Code Editor in the following ways:[anchor|#ul_jvk_kjt_hq]
*From a form of Acumatica ERP by using '''Customization''' > '''Inspect Element''' to open the '''Element Properties '''dialog box, and then clicking '''Actions''' > '''Customize Business Logic'''
*From the Code page of the Customization Project Editor—by clicking the '''Object Name''' of an existing <tt>Code</tt> item (see the screenshot below)[anchor|#image_fk3_tl5_fq][image:CustomizationPlatform/images/CG_Platform_Tools_Editor_CodeEditor_01.png|popup|446px]
*From the navigation pane of the Customization Project Editor, by clicking an item in the '''Code''' folder
{br}

The Code Editor page includes a toolbar and a text area for editing code, as shown in the following screenshot.[anchor|#_04449291-67b2-41c0-8588-b92b57e59cd1][anchor|#image_ctj_rht_hq][image:CustomizationPlatform/images/CG_Platform_Tools_Editor_CodeEditor_02.png|popup|450px]{br}

The toolbar buttons of the Code Editor page are described below.[anchor|#table_qv1_kmt_hq]
{| class="checklist" | width="100%" 
|- 
!Button
!Description
|- 
| '''Save'''
| Saves the code in the project.((({S:Warn}You can use the Control-S combination on the keyboard to save the code.
)))
|- 
| '''Cancel'''
| Cancels unsaved changes in the code.
|- 
| '''Open Screen'''
| Opens the form bound to the business logic controller if you are editing the customization code of the business logic executed for a form.
|- 
| '''View Source'''
| Opens the [HelpRoot_Dev_Customization\CG_Platform_Tools_SM204570|Source Code Browser] with the original source code of the business logic controller (BLC) if you are editing the customization code of the business logic executed for a form.
|- 
| '''Override Method'''
| Opens the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_CodeEditor_MethodsToOverrideDlg|Select Methods to Override Dialog Box], which you can use to select multiple virtual methods of the BLC to override.
|- 
| '''New Action'''
| Opens the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_CodeEditor_NewActionDlg|Create Action Dialog Box], which you can use to create a code template for a new action.
|- 
| '''Move to Extension Lib'''
| Launches the operation that converts the current <tt>Code</tt> item into a file of customization code, adds the file to the extension library project in Microsoft Visual Studio, and removes the item from the customization project. See [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_CodeEditor_MoveToExtLib|Move to Extension Lib Action] for details.((({S:Warn}The customization project must be bound to an existing extension library project in Visual Studio before you invoke the '''Move to Extension Lib''' operation. See [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor] for details.
)))
|}]]></column>
			<column name="PlainText"><![CDATA[Code Editor With the Code Editor, you can develop, view, and edit the customization code that has been         added to the project. You can open the Code Editor in the following ways: From a form of  Acumatica ERP by using  Customization Inspect Element  to open the  Element Properties  dialog box, and             then clicking  Actions Customize Business Logic From the Code page of the  Customization Project Editor—by clicking the  Object Name  of an existing                Code  item (see the screenshot below) From the navigation pane of the  Customization Project Editor, by clicking an item in the  Code  folder The Code Editor page includes a toolbar and a text area for editing code, as shown in the         following screenshot. The toolbar buttons of the Code Editor page are described below. Button Description Save Saves the code in the project. You can use the Control-S combination on                   the keyboard to save the code. Cancel Cancels unsaved changes in the code. Open Screen Opens the form bound to the business logic controller if you are editing the                 customization code of the business logic executed for a form. View Source Opens the  Source Code Browser with the original                 source code of the business logic controller (BLC) if you are editing the                 customization code of the business logic executed for a form. Override Method Opens the  Select Methods to Override Dialog Box, which you                 can use to select multiple virtual methods of the BLC to override. New Action Opens the  Create Action Dialog Box,                 which you can use to create a code template for a new action. Move to Extension Lib Launches the operation that converts the current  Code  item                 into a file of customization code, adds the file to the extension library project in                 Microsoft Visual Studio, and removes the item from the customization project. See  Move to Extension Lib Action for                   details. The customization project must be bound to an existing extension                   library project in Visual Studio before you invoke the  Move to                     Extension Lib  operation. See   Customization Project                         Editor for                   details. ]]></column>
		</row>
		<row PageID="08cd64da-e129-4de3-9619-9414f6a7ab7d" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="edfa4a15-3180-02a1-f943-13f7b75485bd" RecordSourceID="22377">
			<column name="Content"><![CDATA[
If the ''Code'' item you are viewing by using the Code Editor is a business logic controller (BLC, also referred to as ''graph'') extension, you can create a new action in this BLC. To do this, you can click the '''New Action''' button of the Code Editor to open the '''Create Action''' dialog box, shown in the following screenshot.[anchor|#fig_jtw_dtr_qr][anchor|#image_xr4_jtr_qr][image:CustomizationPlatform/images/CG_Platform_Tools_Editor_CodeEditor_NewActionDlg.png|popup|Opening the New Action dialog box|450px]To create an action declaration in the BLC extension, you should specify the name of the action delegate method in the '''Action Name''' box and the name of the action button in the '''Display Name''' box, as shown in the screenshot above, and then click '''OK'''. The system adds to the graph extension a template of the action declaration that includes the following class members:[anchor|#ul_brj_fpm_cw]
*The declaration of the action delegate method
*The declaration of the button attributes to add the button to the form toolbar with the specified name
*The template of the action delegate method
{br}

The following example shows the template code for an action.<source lang="csharp">public PXAction&lt;DACName&gt; myActionDelegateMethod;

[PXButton(CommitChanges = true)]
[PXUIField(DisplayName = "MyActionButtonName")]
protected void MyActionDelegateMethod()
{
  // the body of the action delegate method
}</source>]]></column>
			<column name="PlainText"><![CDATA[Create Action Dialog Box If the  Code  item you are viewing by using the Code Editor is a business logic controller    (BLC, also referred to as  graph ) extension, you can create a new action in this BLC. To do    this, you can click the  New Action  button of the Code Editor to open the      Create Action  dialog box, shown in the following screenshot. Opening the New Action dialog box To create an action declaration in the BLC extension, you should specify the name of the    action delegate method in the  Action Name  box and the name of the action    button in the  Display Name  box, as shown in the screenshot above, and then    click  OK . The system adds to the graph extension a template of the action    declaration that includes the following class members: The declaration of the action delegate method The declaration of the button attributes to add the button to the form toolbar with the      specified name The template of the action delegate method The following example shows the template code for an    action. public PXAction<DACName> myActionDelegateMethod;

[PXButton(CommitChanges = true)]
[PXUIField(DisplayName = "MyActionButtonName")]
protected void MyActionDelegateMethod()
{
  // the body of the action delegate method
} ]]></column>
		</row>
		<row PageID="c5742038-1801-46bb-a1ab-c82fa4f29731" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="e703d40b-36ae-3760-df41-7eda9c1444ce" RecordSourceID="22377">
			<column name="Content"><![CDATA[
If the ''Code'' item you are viewing in the Code Editor is a business logic controller (BLC) extension, you can override a virtual method of this BLC. To do this, you can use the '''Override Method''' action of the Code Editor, which opens the '''Select Methods to Override''' dialog box, shown in the following screenshot.[anchor|#fig_jtw_dtr_qr][anchor|#image_xr4_jtr_qr][image:CustomizationPlatform/images/CG_Platform_Tools_Editor_CodeEditor_MethodsToOverrideDlg.png|popup|Opening the Select Methods to Override dialog box|450px]To add a method to the customization, you should select the check box for the method in the table, as shown in the screenshot, and click '''Save'''. The system adds to the graph extension a template of an overridden method for each method selected in the table.{br}

The dialog box contains a table that lists the virtual methods of the current BLC and its parent classes, and the '''Save''' and '''Cancel''' buttons. You use the table, which contains the following columns, to select the virtual methods that you have to override.[anchor|#table_ky1_5tr_qr]
{| class="checklist" | width="100%" 
|- 
!width="20%" ! Column
!width="80%" ! Description
|- 
| '''Selected'''
| A check box that you can use to select the virtual method to be overridden in the BLC extension.
|- 
| '''Type'''
| The identifier of the class type that contains the declaration of the virtual method.
|- 
| '''Method'''
| The signature of the virtual method.
|}{br}

To cancel the operation and close the dialog box, click '''Cancel'''.{br}

Click '''Save''' to close the dialog box and launch the process that adds a code template to the BLC extension for each item selected in the table.{br}

When you override a virtual method, the system generates an overridden method template that includes the delegate declaration of the base method, the <tt>PXOverride</tt> attribute, and the method declaration that invokes the base method delegate.{br}

The following example shows the template code to override the <tt>MethodName</tt> method.<source lang="csharp">
public delegate returnType MethodNameDelegate(...);
[PXOverride]
public returnType MethodName(..., MethodNameDelegate baseMethod)
{
      return baseMethod(...);
}
</source>]]></column>
			<column name="PlainText"><![CDATA[Select Methods to Override Dialog Box If the  Code  item you are viewing in the Code Editor is a business logic controller (BLC)    extension, you can override a virtual method of this BLC. To do this, you can use the      Override Method  action of the Code Editor, which opens the      Select Methods to Override  dialog box, shown in the following     screenshot. Opening the Select Methods to Override dialog box To add a method to the customization, you should select the check box for the method in the    table, as shown in the screenshot, and click  Save . The system adds to the    graph extension a template of an overridden method for each method selected in the table. The dialog box contains a table that lists the virtual methods of the current BLC and its    parent classes, and the  Save  and  Cancel  buttons.    You use the table, which contains the following columns, to select the virtual methods that you    have to override. Column Description Selected A check box that you can use to select the virtual method to be overridden in the BLC         extension. Type The identifier of the class type that contains the declaration of the virtual         method. Method The signature of the virtual method. To cancel the operation and close the dialog box, click  Cancel . Click  Save  to close the dialog box and launch the process that adds a    code template to the BLC extension for each item selected in the table. When you override a virtual method, the system generates an overridden method template that    includes the delegate declaration of the base method, the  PXOverride     attribute, and the method declaration that invokes the base method delegate. The following example shows the template code to override the  MethodName     method. 
public delegate returnType MethodNameDelegate(...);
[PXOverride]
public returnType MethodName(..., MethodNameDelegate baseMethod)
{
      return baseMethod(...);
}
 ]]></column>
		</row>
		<row PageID="f0186613-f9a0-488f-b66c-7be2c7378bae" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="792308c0-4eb0-9cde-a3e4-315507acd9ce" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can develop customization code either as ''Code'' items in a customization project or as source code included in an extension library project to develop in Microsoft Visual Studio. Some part of a customization may exist in the ''Code'' items of a customization project, while another part can be included in an extension library that is added to the customization project as a dynamic link library (DLL) file.{br}

If you have a ''Code'' item in a customization project that you want to move to an extension library to compile it into a DLL, you can use the '''Move to Extension Lib''' action on the page toolbar of the Code Editor.{br}

Before you launch the operation, be aware that the customization project is bound to an existing extension library. (See [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor] for details.){br}

After the operation is complete, the ''Code'' item that is currently displayed in the work area of the Code Editor is removed from the customization project, and the file with the same source code is appended to the extension library that is bound to the customization project. The system assigns a similar name to the file: For example, if the ''Code'' item name was <tt>CodeItemName</tt>, the name of the created file will be <tt>CodeItemName.cs</tt>.{br}

For example, suppose you need to move the <tt>CustomerMaint</tt> ''Code'' item to the <tt>YogiFon</tt> extension library (see the screenshot below).{br}

[anchor|#fig_i5m_zgz_qr][anchor|#image_bmg_ghz_qr][image:CustomizationPlatform/images/MoveToExtLib01.png|popup|Viewing the content of the Code item before you move it to the extension library|450px]{br}

When the operation is complete, the <tt>CustomerMaint</tt> ''Code'' item is removed from the customization project, as the screenshot below shows.[anchor|#fig_szm_f3z_qr][anchor|#image_qyw_l3z_qr][image:CustomizationPlatform/images/MoveToExtLib02.png|popup|Viewing the Code item list after the operation was performed|450px]{br}

In place of the removed item, the <tt>CustomerMaint.cs</tt> file with the same source code is appended to the bound extension library project, as shown in the screenshot below.[anchor|#fig_mbk_qjz_qr][anchor|#image_mw3_xjz_qr][image:CustomizationPlatform/images/MoveToExtLib03.png|popup|Viewing the content of the source code file added to the extension library|450px]{br}

The operation of moving code to an extension library is irreversible. If you need to move source code from an extension library to a ''Code'' item of a customization project, use the following approach:[anchor|#ul_und_ccy_qr]
*In Visual Studio (or any text editor), open the file, select the needed source code, and copy it to the clipboard.
*Create a new ''Code'' item in the customization project.
*Delete the code template from the created item.
*Paste the code from the clipboard, and save the ''Code'' item to the customization project.
*Delete the source code file from the extension library.
]]></column>
			<column name="PlainText"><![CDATA[Move to Extension Lib Action You can develop customization code either as  Code  items in a customization project or as    source code included in an extension library project to develop in Microsoft Visual Studio. Some part of    a customization may exist in the  Code  items of a customization project, while another part    can be included in an extension library that is added to the customization project as a dynamic    link library (DLL) file. If you have a  Code  item in a customization project that you want to move to an extension    library to compile it into a DLL, you can use the  Move to Extension Lib     action on the page toolbar of the Code Editor. Before you launch the operation, be aware that the customization project is bound to an    existing extension library. (See   Customization Project                         Editor for details.) After the operation is complete, the  Code  item that is currently displayed in the work    area of the Code Editor is removed from the customization project, and the file with the same    source code is appended to the extension library that is bound to the customization project. The    system assigns a similar name to the file: For example, if the  Code  item name was      CodeItemName , the name of the created file will be      CodeItemName.cs . For example, suppose you need to move the  CustomerMaint Code  item to the  YogiFon  extension library (see the screenshot    below). Viewing the content of the Code item before you move it to the extension library When the operation is complete, the  CustomerMaint Code  item is removed from the customization project, as the screenshot below shows. Viewing the Code item list after the operation was performed In place of the removed item, the  CustomerMaint.cs  file with the same    source code is appended to the bound extension library project, as shown in the screenshot     below. Viewing the content of the source code file added to the extension library The operation of moving code to an extension library is irreversible. If you need to move    source code from an extension library to a  Code  item of a customization project, use the    following approach: In Visual Studio (or any text editor), open the file, select the needed source code, and      copy it to the clipboard. Create a new  Code  item in the customization project. Delete the code template from the created item. Paste the code from the clipboard, and save the  Code  item to the customization      project. Delete the source code file from the extension library. ]]></column>
		</row>
		<row PageID="c9df6c5d-bf98-4c6c-9110-e48eada4c664" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="7e048100-3f3b-dbe1-160f-6c1cb7a5e587" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can use the File Editor to view or edit a custom file added to the customization project.{br}

To open a custom file in the editor, on the Custom Files page of the Customization Project Editor, click the file name in the list of custom files.{br}

You can use the editor as follows with custom files included in the project:[anchor|#ul_zqk_gkv_dw]
*To review and edit a text file
*To review the content of a binary DLL file (see the following screenshot)[anchor|#image_vlj_1mv_dw][image:CustomizationPlatform/images/CG_Platform_Tools_Editor_EditFileEditor.png|popup|Viewing the content of a custom DLL file in the File Editor|427px]
*:((({S:Warn}In the editor, you cannot save changes in DLL files.
)))
{br}

If you have used the File Editor to modify a custom file in a customization project and have saved the changes in the database, the changes are not saved in the original file in the file system. If you then click '''Detect Modified Files''' on the toolbar of the Custom Files page, the platform does not detect a conflict because the file in the database is newer. The platform automatically updates the original file in the file system during the publication of the customization project.]]></column>
			<column name="PlainText"><![CDATA[File Editor You can use the File Editor to view or edit a custom file added to the customization             project. To open a custom file in the editor, on the Custom Files page of the  Customization Project Editor, click the file name in the list of custom files. You can use the editor as follows with custom files included in the project: To review and edit a text file To review the content of a binary DLL file (see the following screenshot) Viewing the content of a custom DLL file in the File Editor In the editor, you cannot save changes in DLL files. If you have used the File Editor to modify a custom file in a customization project and have             saved the changes in the database, the changes are not saved in the original file in the             file system. If you then click  Detect Modified Files  on the             toolbar of the Custom Files page, the platform does not detect a conflict because the             file in the database is newer. The platform automatically updates the original file in             the file system during the publication of the customization project. ]]></column>
		</row>
		<row PageID="fd393258-3833-4f8a-9a78-cc2bf4e727a0" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="e6380454-74af-f5d8-afad-ec7d3ee3279e" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You use the SQL Script Editor (the '''Edit SQL Script''' dialog box) to add and edit a custom SQL script. You can open the editor from the Database Scripts page of the Customization Project Editor in the following ways:[anchor|#ul_jvk_kjt_hq]
*To create an SQL script: By clicking ''' Add''' > '''Script''' on the page toolbar
*To edit the script: By doing either of the following:
**Clicking the name of the script in the '''Object Name''' column of the table on the Database Scripts page
**Clicking the row of the script in the table on the Database Scripts page and clicking '''Edit''' on the page toolbar
[anchor|#_67767d8d-8a7b-47fc-bf6f-aec18d7b220a]
===Edit SQL Script Dialog Box===The SQL Script Editor has the following elements. 
{| class="checklist" | width="100%" 
|- 
!width="20%" ! Element
!width="80%" ! Description
|- 
| '''Script Name'''
| The name of the SQL script.
|- 
| '''Priority'''
| The priority of the script. The priority can have a value that ranges from –100 to 100. By default, the value is 0.
|- 
| Unlabeled text area
| A text area that you can use to view and edit a custom SQL script.
|- 
| colspan="2" | The SQL Script Editor has the following buttons.
|- 
| '''Specify Database Engine'''
| Opens the '''Specify Database Engine''' dialog box, in which you can specify the attribute of the script that indicates on which database servers the script can be executed (Microsoft SQL Server, MySQL Server, or both).
|- 
| '''OK'''
| Saves the custom SQL script to the customization project and closes the dialog box.
|- 
| '''Cancel'''
| Closes the dialog box without saving the changes to the script.
|}
==Related Articles==
*[HelpRoot_Dev_Customization\CG_GL_Items_DBScripts|Database Scripts]]]></column>
			<column name="PlainText"><![CDATA[SQL Script Editor You use the SQL Script Editor (the  Edit SQL Script  dialog box) to         add and edit a custom SQL script. You can open the editor from the Database Scripts page of         the  Customization Project Editor         in the following ways: To create an SQL script: By clicking   Add Script  on the page toolbar To edit the script: By doing either of the following: Clicking the name of the script in the  Object Name  column of               the table on the Database Scripts page Clicking the row of the script in the table on the Database Scripts page and               clicking  Edit  on the page toolbar Edit SQL Script Dialog Box The SQL Script Editor has the following elements.  Element Description Script Name The name of the SQL script. Priority The priority of the script. The priority can have a value that ranges from –100                 to 100. By default, the value is 0. Unlabeled text area A text area that you can use to view and edit a custom SQL script. The SQL Script Editor has the following                 buttons. Specify Database Engine Opens the  Specify Database Engine  dialog box, in which                 you can specify the attribute of the script that indicates on which database servers                 the script can be executed (Microsoft SQL Server, MySQL Server, or both). OK Saves the custom SQL script to the customization project and closes the dialog                 box. Cancel Closes the dialog box without saving the changes to the script. ]]></column>
		</row>
		<row PageID="62226e90-83e8-4795-8d46-1a8d41ca138c" Language="en-US" PageRevisionID="1" PlainText="Table Editor You use the Table Editor (the  Edit Table Columns  dialog box) to edit a    custom table. You can open the editor from the Database Scripts page of the  Customization Project Editor in    the following ways: By clicking the name of the database table in the  Object Name  column     of the table on the Database Scripts page By selecting the name of the database table in the table on the Database Scripts page and     clicking  Edit  on the page toolbar Edit Table Columns Dialog Box The Table Editor has the following elements. The table toolbar includes only standard buttons. For the list of standard buttons, see  Table Toolbar. Element Description Field Name The name of the field of the database table. Script Type The type of the database script applied to the table. Data Type The type of the field of the database table. The dialog box has the following button. Done Saves the custom columns of the table to the customization project and closes the        dialog box. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="d26e0918-f15b-bb00-2631-eeb61395ed34" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You use the Table Editor (the '''Edit Table Columns''' dialog box) to edit a custom table. You can open the editor from the Database Scripts page of the Customization Project Editor in the following ways:[anchor|#_8cda97a4-cbd8-4f3f-8c72-8712892ea92c]
*By clicking the name of the database table in the '''Object Name''' column of the table on the Database Scripts page
*By selecting the name of the database table in the table on the Database Scripts page and clicking '''Edit''' on the page toolbar
[anchor|#_e4235a23-20cd-4ed3-993e-ebc6bbf487af]
===Edit Table Columns Dialog Box===
The Table Editor has the following elements.[anchor|#_9d890ab8-380d-420c-94e5-4e8a360bfc56]{br}

The table toolbar includes only standard buttons. For the list of standard buttons, see [HelpRoot_Interface\Details_Toolbar|Table Toolbar].
{| class="checklist" | width="100%" 
|- 
!width="20%" ! Element
!width="80%" ! Description
|- 
| '''Field Name'''
| The name of the field of the database table.
|- 
| '''Script Type'''
| The type of the database script applied to the table.
|- 
| '''Data Type'''
| The type of the field of the database table.
|- 
| colspan="2" | The dialog box has the following button.
|- 
| '''Done'''
| Saves the custom columns of the table to the customization project and closes the dialog box.
|}
==Related Articles==
*[HelpRoot_Dev_Customization\CG_GL_Items_DBScripts|Database Scripts]]]></column>
		</row>
		<row PageID="e00f1b06-f7ef-4dca-bad1-c4ec77ccb0b7" Language="en-US" PageRevisionID="1" PlainText="Mobile App Editor You can use the          Mobile         App Editor  to add and update mobile app screens to the customization         project. You can open the editor on the Mobile Application page of the  Customization Project Editor         in one of the following ways: If you want to add a new screen to the mobile app, click  Customize &gt; Add New Screen . If you want to update the main menu of the mobile app, click  Customize &gt; Update Main Menu . If you want to update a screen that is already mapped to the mobile app, click  Customize &gt; Update Existing Screen . An example of the editor's appearance is presented on the following screenshot. Editing the main menu of the mobile app For more details on using the Mobile App Editor, see  Working with Mobile Framework. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="0613ffdc-7486-f68b-50c3-cfb1800dbf4d" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can use the Mobile App Editor to add and update mobile app screens to the customization project.{br}

You can open the editor on the Mobile Application page of the Customization Project Editor in one of the following ways:[anchor|#_d02c1525-5143-405f-860c-a954f2f05497]
*If you want to add a new screen to the mobile app, click '''Customize &gt; Add New Screen'''.
*If you want to update the main menu of the mobile app, click '''Customize &gt; Update Main Menu'''.
*If you want to update a screen that is already mapped to the mobile app, click '''Customize &gt; Update Existing Screen'''.

An example of the editor&rsquo;s appearance is presented on the following screenshot.[anchor|#_58f32e7a-c0f8-4e22-8d43-657ad21591e5][anchor|#_1737bf9e-e6cc-4432-8090-55847889e3a3][image:CustomizationPlatform/images/CG_Platform_Tools_Editor_MobileApp.png|popup|Editing the main menu of the mobile app|450px]
For more details on using the Mobile App Editor, see [HelpRoot_Dev_Mobile\Mobile_Framework_Guide|Working with Mobile Framework].
==Related Articles==
*[HelpRoot_Dev_Customization\CG_GL_Items_MobileApp|Mobile Application]]]></column>
		</row>
		<row PageID="56c5b33e-434d-418c-a5a1-11c8928c5b22" Language="en-US" PageRevisionID="1" Content="&#xA;In the database, the platform keeps each item of the customization project in XML format.{br}&#xA;&#xA;The platform provides the following tools for experienced users to edit the content of a customization project in XML format:[anchor|#ul_hsc_rww_dw]&#xA;*[HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_XML_Project|Project XML Editor]&#xA;*[HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_XML_Item|Item XML Editor]&#xA;" PlainText="XML Editors In the database, the platform keeps each item of the customization project in XML format. The platform provides the following tools for experienced users to edit the content of a    customization project in XML format: Project XML EditorItem XML Editor" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="b6487bac-292c-264c-0be9-b06e4edf5087" RecordSourceID="22377" />
		<row PageID="f8f9d4f5-05e7-4798-a8a5-60552112f087" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="55238e0c-ef88-f9fa-f2c8-d52c7e8137b8" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can use the Project XML Editor to edit and review the content of a customization project in XML format.{br}

To open the editor, in the Customization Project Editor, click '''File &gt; Edit Project XML''' on the menu (see the following screenshot).[anchor|#fig_zgz_lxw_dw][anchor|#image_ltk_4xw_dw][image:CustomizationPlatform/images/CG_Platform_Tools_Editor_XML_Project_01.png|popup|Opening the Project XML Editor|450px]{br}

The editor page, shown in the screenshot below, contains the following UI elements:[anchor|#ul_vdf_2zw_dw]
*At the top of the page, the name of the customization project that is opened in the editor
*The page toolbar, which includes the file name of a selected deployment package (or the ''No file chosen'' message) and the following buttons:
**'''Save to database''': To save the XML code of the project to the database
**'''Download Package''': To save the project locally as a deployment package ZIP file that has the same name as the customization project
**'''Upload Package''': To open the deployment package file whose name is currently selected and displayed in the page toolbar
**'''Choose File''': To select a deployment package file
*The work area of the editor
[anchor|#fig_rjg_fzw_dw][anchor|#image_d51_jzw_dw][image:CustomizationPlatform/images/CG_Platform_Tools_Editor_XML_Project_02.png|popup|Viewing the Project XML Editor page|384px]]]></column>
			<column name="PlainText"><![CDATA[Project XML Editor You can use the Project XML Editor to edit and review the content of a customization project in    XML format. To open the editor, in the  Customization Project Editor,    click  File > Edit Project XML  on the menu (see the following screenshot). Opening the Project XML Editor The editor page, shown in the screenshot below, contains the following UI elements: At the top of the page, the name of the customization project that is opened in the      editor The page toolbar, which includes the file name of a selected deployment package (or the        No file chosen  message) and the following buttons: Save to database : To save the XML code of the project to the        database Download Package : To save the project locally as a deployment        package ZIP file that has the same name as the customization project Upload Package : To open the deployment package file whose name is        currently selected and displayed in the page toolbar Choose File : To select a deployment package file The work area of the editor Viewing the Project XML Editor page ]]></column>
		</row>
		<row PageID="84e2363e-a234-44e1-9aa9-88bd308e3801" Language="en-US" PageRevisionID="1" Content="&#xA;You can use the Item XML Editor to edit and review an item of a customization project.{br}&#xA;&#xA;To open the editor, in the Customization Project Editor, click '''File &amp;gt; Edit Project Items''' on the menu (see the following screenshot).[anchor|#fig_zgz_lxw_dw][anchor|#image_ib4_c2x_dw][image:CustomizationPlatform/images/CG_Platform_Tools_Editor_XML_Item_01.png|popup|Opening the Item XML Editor|450px]{br}&#xA;&#xA;The editor page, shown in the following screenshot, contains the following UI elements:[anchor|#ul_vdf_2zw_dw]&#xA;*The page toolbar, which contains the '''Save''' and '''Cancel''' buttons&#xA;*The list of the items in the customization project&#xA;*The work area of the editor&#xA;[anchor|#fig_rjg_fzw_dw][anchor|#image_dd1_q2x_dw][image:CustomizationPlatform/images/CG_Platform_Tools_Editor_XML_Item_02.png|popup|Viewing the Item XML Editor page|407px]" PlainText="Item XML Editor You can use the Item XML Editor to edit and review an item of a customization project. To open the editor, in the  Customization Project Editor,       click  File &gt; Edit Project Items  on the menu (see the following screenshot). Opening the Item XML Editor The editor page, shown in the following screenshot, contains the following UI elements: The page toolbar, which contains the  Save  and              Cancel  buttons The list of the items in the customization project The work area of the editor Viewing the Item XML Editor page " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="f76e34dd-1dc6-ab5e-e608-0a5fb73ea223" RecordSourceID="22377" />
		<row PageID="dc051d80-2d84-4788-af90-1be322891374" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="eee756dc-f13e-a67c-5e67-f575e0f9bc51" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can explore the source code of the Acumatica ERP application on the [HelpRoot_FormReference\SM_20_45_70|Source Code] ([~/?ScreenId=SM204570|SM204570]) form, which is shown in the following screenshot.[anchor|#fig_sb2_ddw_dw][anchor|#image_hpp_fdw_dw][image:CustomizationPlatform/images/CG_Platform_Tools_SM204570.png|popup|Viewing the Source Code form |450px]{br}

You can open the browser in the following ways:[anchor|#ul_bjv_g4f_fq]
*From the [HelpRoot_Dev_Customization\CG_Platform_Tools_Inspector_ElProperiesDlg|Element Properties Dialog Box], by selecting one of the following commands in the '''Actions''' menu:
**'''View ASPX Source''': To explore the source code of current form
**'''View Business Logic Source''': To explore the source code of the business logic controller (BLC) that is bound to the current form
**'''View Data Class Source''': To explore the source code of the data access class (DAC) that contains the data field of the inspected element
*From the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_DataClassEditor|Data Class Editor], by clicking '''View Source''' on the page toolbar
*From the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_CodeEditor|Code Editor], by clicking '''View Source''' on the page toolbar
*From the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_LayoutEditor|Screen Editor], by clicking '''View Source''' on the toolbar of the '''Attributes''' or '''Events''' tab
{br}

You can use the Source Code browser for the following purposes:[anchor|#ul_vlp_rlw_dw]
*To search for the following types of source code:
**ASPX code, by the screen ID or by the screen title. You can search by any part of an ID or of a title.
**C# source code of a BLC or DAC, by the class name. You can also type any part of the name and select the name from the list of names that match your search string.
**Any source code, by a text fragment.
*To download a ZIP file with the source code for the website 
]]></column>
			<column name="PlainText"><![CDATA[Source Code Browser You can explore the source code of the  Acumatica ERP application on the   ([~/?ScreenId=SM204570|SM204570]) Source Code (SM204570)       form, which is shown in the following screenshot. Viewing the Source Code form  You can open the browser in the following ways: From the  Element Properties Dialog Box, by selecting           one of the following commands in the  Actions  menu: View ASPX Source : To explore the source code of current               form View Business Logic Source : To explore the source code of the               business logic controller (BLC) that is bound to the current form View Data Class Source : To explore the source code of the               data access class (DAC) that contains the data field of the inspected element From the  Data Class Editor, by clicking              View Source  on the page toolbar From the  Code Editor, by clicking              View Source  on the page toolbar From the  Screen Editor, by clicking              View Source  on the toolbar of the              Attributes  or  Events  tab You can use the Source Code browser for the following purposes: To search for the following types of source code: ASPX code, by the screen ID or by the screen title. You can search by any part of an               ID or of a title. C# source code of a BLC or DAC, by the class name. You can also type any part of the               name and select the name from the list of names that match your search string. Any source code, by a text fragment. To download a ZIP file with the source code for the website  ]]></column>
		</row>
		<row PageID="8a86d98c-2852-447b-8dc2-1ab3a80f12a6" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="bbc74c40-b59e-bd14-e9c8-f0c7937108fb" RecordSourceID="22377">
			<column name="Content"><![CDATA[
 The programming framework of the Acumatica Customization             Platform, like Acumatica Framework, is intended for developers experienced in C#.NET. Because the application objects of Acumatica ERP are built on top of Acumatica Framework, the developers need to learn both the programming frameworks to be able to effectively develop quality customizations.{br}

When you have to customize an instance of Acumatica ERP, first you must determine the scope of the customization. For each form that works with data from the database, the instance of Acumatica ERP must contain at least the following objects (see the diagram below):[anchor|#ul_emt_zm5_tv]
*An ASPX page: The page must contain, at minimum, the data source control and a control container with controls for data fields.
*A business logic controller (BLC, also referred to as ''graph''): The graph must be specified in the {{TypeName}} property of the data source control of the page. The graph must contain at least one data view, which is specified in the {{PrimaryView}} property of the data source control as well as in the {{DataMember}} property of the control container. The graph instance is created on each round trip and initializes the creation of the data view instance based on a BQL statement. The data view provides data manipulations and data flows between the container control, the cache object of the graph, and the corresponding table of the database. The BQL statement contains a reference to at least one data access class that is required to map the database table to data records in the cache object.
*A data access class (DAC): On each round trip, the DAC instance is created in the cache object when the data view processes any operation with the corresponding data.
*A table in the database: The table is mapped to the data access class that defines the data record type in the cache object of the graph instance.
[anchor|#fig_fym_xz5_tv][anchor|#image_ppm_zz5_tv][image:CustomizationPlatform/images/CG_Platform_TO.png|popup|Objects required for a form that works with data from a database table|450px]{br}

By using the Acumatica Customization             Platform, you can create or customize each of the object types listed above.
==Customization of ASPX Pages==
To change the layout and behavior of an Acumatica ERP form, you must customize the corresponding ASPX page. However for customizing an ASPX page, the platform uses an approach that does not require you to change the original ASPX code of the Acumatica ERP form. Instead, the platform can apply the <tt>.aspx</tt> file with the same name from a special subfolder within the website folder, if this file exists. At run time, while the platform is processing a request to open a form, the platform first tries to find the needed <tt>.aspx</tt> file inside this subfolder to use it instead of the original file. If the file with customized ASPX code is found, the platform opens the customized form. Otherwise, the original form is opened.{br}

To cancel a customization of a page, you need only to delete the file with the appropriate name from the subfolder.
==Customization of Application Classes (BLCs and DACs)==
To provide the ability to customize the functionality or business logic of a form, the platform uses the technology based on class extensions. With this technology, to customize a BLC or DAC, the platform does not change the original code of Acumatica ERP. Instead, the platform uses an additional C# file for each class extension.{br}

At run time, the platform automatically detects a class extension during the first initialization of the base (original) class. If an extension is found, the platform replaces the base class with the merged result of the base class and the extension that was found.{br}

To cancel a customization of business logic, you need only to delete the file that contains the appropriate class extension.{br}

This approach makes it easy to apply and cancel any customization of business logic in Acumatica ERP.
==Customization of the Database Schema==
The platform provides the following capabilities that you can use to customize the database schema:[anchor|#ul_g33_lnv_tv]
*You can create an [HelpRoot_Dev_Customization\CG_GL_DBSchema_CustomColumns|SQL script] to execute while the customization is applied to an instance of Acumatica ERP.
*You can create a custom bound field to add the corresponding column to a table while the customization is applied to an instance of Acumatica ERP.
*You can define the {{UpdateDatabase()}} method of a class derived from the <tt>CustomizationPlugin</tt> class to execute an SQL script or a stored procedure from the C# code after the customization is applied to an instance of Acumatica ERP. (See [HelpRoot_Dev_Customization\CG_Platform_Framework_PlugIn|Custom Processes During Publication of a Customization] for details.)

==In This Chapter==[anchor|#ul_s2g_1hl_rp]
*[HelpRoot_Dev_Customization\CG_Platform_Framework_ASPX|Changes in Webpages (ASPX)]
*[HelpRoot_Dev_Customization\CG_Platform_Framework_CS|Changes in the Application Code (C#)]
*[HelpRoot_Dev_Customization\CG_Platform_Framework_DBSchema|Changes in the Database Schema]
*[HelpRoot_Dev_Customization\CG_Platform_Framework_PlugIn|Custom Processes During Publication of a Customization]
]]></column>
			<column name="PlainText"><![CDATA[Customization Framework  The programming framework of the  Acumatica Customization             Platform, like  Acumatica Framework,       is intended for developers experienced in C#.NET. Because the application objects of  Acumatica ERP are built on top of  Acumatica Framework,       the developers need to learn both the programming frameworks to be able to effectively develop       quality customizations. When you have to customize an instance of  Acumatica ERP, first you must determine the scope of the customization. For each form that works with       data from the database, the instance of  Acumatica ERP must contain at least the following objects (see the diagram below): An ASPX page: The page must contain, at minimum, the data source control and a control           container with controls for data fields. A business logic controller (BLC, also referred to as  graph ): The graph must be           specified in the  TypeName  property of the data source control of the           page. The graph must contain at least one data view, which is specified in the              PrimaryView  property of the data source control as well as in the              DataMember  property of the control container. The graph instance is           created on each round trip and initializes the creation of the data view instance based on           a BQL statement. The data view provides data manipulations and data flows between the           container control, the cache object of the graph, and the corresponding table of the           database. The BQL statement contains a reference to at least one data access class that is           required to map the database table to data records in the cache object. A data access class (DAC): On each round trip, the DAC instance is created in the cache           object when the data view processes any operation with the corresponding data. A table in the database: The table is mapped to the data access class that defines the           data record type in the cache object of the graph instance. Objects required for a form that works with data from a database table By using the  Acumatica Customization             Platform, you can create or customize each of the object types listed above. Customization of ASPX Pages To change the layout and behavior of an  Acumatica ERP form, you must customize the corresponding ASPX page. However for customizing an ASPX         page, the platform uses an approach that does not require you to change the original ASPX         code of the  Acumatica ERP form. Instead, the platform can apply the  .aspx  file with the same         name from a special subfolder within the website folder, if this file exists. At run time,         while the platform is processing a request to open a form, the platform first tries to find         the needed  .aspx  file inside this subfolder to use it instead of the         original file. If the file with customized ASPX code is found, the platform opens the         customized form. Otherwise, the original form is opened. To cancel a customization of a page, you need only to delete the file with the appropriate         name from the subfolder. Customization of Application Classes (BLCs and DACs) To provide the ability to customize the functionality or business logic of a form, the         platform uses the technology based on class extensions. With this technology, to customize a         BLC or DAC, the platform does not change the original code of  Acumatica ERP. Instead, the platform uses an additional C# file for each class extension. At run time, the platform automatically detects a class extension during the first         initialization of the base (original) class. If an extension is found, the platform replaces         the base class with the merged result of the base class and the extension that was         found. To cancel a customization of business logic, you need only to delete the file that contains         the appropriate class extension. This approach makes it easy to apply and cancel any customization of business logic in  Acumatica ERP. Customization of the Database Schema The platform provides the following capabilities that you can use to customize the database           schema: You can create an  SQL               script SQL script to execute while the customization is applied to an instance of  Acumatica ERP. You can create a custom bound field to add the corresponding column to a table while             the customization is applied to an instance of  Acumatica ERP. You can define the  UpdateDatabase()  method of a class derived from             the  CustomizationPlugin  class to execute an SQL script or a stored             procedure from the C# code after the customization is applied to an instance of  Acumatica ERP. (See  Custom Processes During Publication of a Customization for details.) In This Chapter Changes in Webpages (ASPX)Changes in the Application Code (C#)Changes in the Database SchemaCustom Processes During Publication of a Customization]]></column>
		</row>
		<row PageID="56a4a87c-291d-43d1-827e-d413c3d6a3f1" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="915a07c2-c4d7-71b1-915b-532630119033" RecordSourceID="22377">
			<column name="Content"><![CDATA[
To customize the look and behavior of an Acumatica ERP form, you need to change the ASPX code of the form. Because you need to include all the changes in a customization project, you have to perform the form customization by using the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_LayoutEditor|Screen Editor] of the Customization Project Editor.{br}

To collect all the changes that you make while you customize a form, the Screen Editor creates a ''Page'' item with a name that corresponds to the form ID, and includes the item in the currently selected customization project. This item contains XML code with instructions that have to be applied to the ASPX code of the form during the publication of the project.{br}

For example, the following fragment of a ''Page'' item contains the XML code with the {{<AddItem>}} tag used to add the <tt>UsrSIMCardID</tt> field as a column to the <tt>Transactions</tt> grid.{{{{
&lt;PXGridLevel DataMember="Transactions"
             ParentId="phG_tab_Items#0_grid_Levels#0"
             TypeFullName="PX.Web.UI.PXGridLevel"&gt;
  &lt;Children Key="Columns"&gt;
    &lt;AddItem&gt;
      &lt;PXGridColumn TypeFullName="PX.Web.UI.PXGridColumn"&gt;
        &lt;Prop Key="DataField" Value="UsrSIMCardID" /&gt;
        &lt;Prop Key="Width" Value="160" /&gt;
      &lt;/PXGridColumn&gt;
    &lt;/AddItem&gt;
  &lt;/Children&gt;
&lt;/PXGridLevel&gt;

}}}}{br}

In the XML code above, note that the {{<Prop>}} tag is used to set the <tt>Width</tt> property of the column to ''160''.{br}

With the Screen Editor, you can customize any object in the ASPX code of an Acumatica ERP form and save the resulting changeset to the customization project. To apply the customization to the website, you have to publish the project.{br}

For example, at the publication process, the platform transforms the XML code fragment above to the following fragment of ASPX code.{{{{&lt;px:PXGridColumn DataField="UsrSIMCardID" Width="160" /&gt;
}}}}{br}

During the publication of the project, the platform applies the XML changeset to the appropriate form to create a customized version of the <tt>.aspx</tt> file with the same name in the <tt>pages&#95;xx</tt> subfolder of the <tt>CstPublished</tt> folder of the website. If the form ID contains the ''SO'' prefix, the customized ASPX code is located in the <tt>\CstPublished\pages&#95;so</tt> folder, as the following screenshot shows.[anchor|#fig_ers_bkh_kw][anchor|#image_smx_ckh_kw][image:CustomizationPlatform/images/CG_Platform_TO_Code_ASPX_01.png|popup|Viewing the files with customized ASPX code in the <tt>CstPublished</tt> folder|450px]{br}

After the project has been published, when Acumatica ERP has to display a form, first it tries to find the <tt>.aspx</tt> file of the form in the <tt>CstPublished</tt> folder. If it finds it, Acumatica ERP opens the customized version of the form instead of the original one.{br}

Any customization of Acumatica ERP can be unpublished. If you unpublish a form customization, the platform deletes the corresponding file in the <tt>CstPublished</tt> folder of the website.]]></column>
			<column name="PlainText"><![CDATA[Changes in Webpages (ASPX) To customize the look and behavior of an  Acumatica ERP form, you need to change the ASPX code of the form. Because you need to include all             the changes in a customization project, you have to perform the form customization by             using the  Screen Editor of the  Customization Project Editor. To collect all the changes that you make while you customize a form, the Screen Editor             creates a  Page  item with a name that corresponds to the form ID, and includes the             item in the currently selected customization project. This item contains XML code with             instructions that have to be applied to the ASPX code of the form during the publication             of the project. For example, the following fragment of a  Page  item contains the XML code with the                  <AddItem>  tag used to add the  UsrSIMCardID              field as a column to the  Transactions              grid. 
<PXGridLevel DataMember="Transactions"
             ParentId="phG_tab_Items#0_grid_Levels#0"
             TypeFullName="PX.Web.UI.PXGridLevel">
  <Children Key="Columns">
    <AddItem>
      <PXGridColumn TypeFullName="PX.Web.UI.PXGridColumn">
        <Prop Key="DataField" Value="UsrSIMCardID" />
        <Prop Key="Width" Value="160" />
      </PXGridColumn>
    </AddItem>
  </Children>
</PXGridLevel>
 In the XML code above, note that the  <Prop>  tag is used to set the                  Width  property of the column to  160 . With the Screen Editor, you can customize any object in the ASPX code of an  Acumatica ERP form and save the resulting changeset to the customization project. To apply the             customization to the website, you have to publish the project. For example, at the publication process, the platform transforms the XML code fragment             above to the following fragment of ASPX             code. <px:PXGridColumn DataField="UsrSIMCardID" Width="160" /> During the publication of the project, the platform applies the XML changeset to the             appropriate form to create a customized version of the  .aspx  file             with the same name in the  pages_xx  subfolder of the                  CstPublished  folder of the website. If the form ID contains the                  SO  prefix, the customized ASPX code is located in the                  \CstPublished\pages_so  folder, as the following screenshot                 shows. Viewing the files with customized ASPX code in the                          CstPublished  folder After the project has been published, when  Acumatica ERP has to display a form, first it tries to find the  .aspx  file of             the form in the  CstPublished  folder. If it finds it,  Acumatica ERP opens the customized version of the form instead of the original one. Any customization of  Acumatica ERP can be unpublished. If you unpublish a form customization, the platform deletes the             corresponding file in the  CstPublished  folder of the website. ]]></column>
		</row>
		<row PageID="91f755b8-885c-458a-bcb9-748c5cc03360" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="a27f3ae3-a5f2-0708-9cfa-dd8fa0a3fb32" RecordSourceID="22377">
			<column name="Content"><![CDATA[
In this section, you can find information about the customization of the application functionality, which is provided by the application business logic (implemented in C# code) of data access classes and business logic controllers.{br}{TOC}
==BLC and DAC Extensions==
To give you the ability to customize the functionality or behavior of a form, the Acumatica Customization             Platform uses technology based on extension models. When you are resolving a typical customization task, you generally create extensions for original data access classes and business logic controllers.{br}

An extension for a business logic controller (BLC, also referred to as ''graph'') or a data access class (DAC) is a class derived from a generic class defined in the <tt>PX.Data</tt> assembly of Acumatica ERP. To declare an extension for a DAC, you derive a class from the <tt>PXCacheExtension&lt;T&gt;</tt> generic class. To declare an extension of a BLC, you derive a class from the <tt>PXGraphExtension&lt;T&gt;</tt> generic class.{br}

If you have created an extension for a BLC or DAC in a customization project and published the project, the platform applies the extension to the base class at run time. During publication of the project, all the code extensions created for an instance of Acumatica ERP in the project are saved as C# source code files in the <tt>App&#95;RuntimeCode</tt> folder of the application instance (see the diagram below).[anchor|#fig_e3k_gpj_xt][anchor|#image_ygz_jpj_xt][image:CustomizationPlatform/images/CG_Platform_TO_Code_CS_ExtTec_Extensions.png|popup|Use of DAC and BLC extensions for a customization|420px]{br}

At run time, during the first initialization of a base class, the Acumatica Customization             Platform automatically finds the extension for the class and applies the customization by replacing the base class with the merged result of the base class and the extension it found.{br}

When you unpublish all customization projects, the platform deletes all the code files from the <tt>App&#95;RuntimeCode</tt> folder. As a result, the platform has no custom code to merge at run time.
==Multilevel Extensions==[anchor|#_feaa0d8e-6627-47cc-a032-d4d9cea4474c]
The Acumatica Customization             Platform supports multilevel extensions, which are required when you develop off-the-shelf software that is distributed in multiple editions. Precompiled extensions provide a measure of protection for your source code and intellectual property.{br}

The figure below illustrates the DAC extension model.[anchor|#fig_tgc_dkq_sv][anchor|#image_nd4_3ss_mm][image:CustomizationPlatform/images/CG_Platform_TO_Code_CS_ExtTec_DAC_Extensions.png|popup|DAC extension levels|450px]
The figure below illustrates the BLC extension model.[anchor|#fig_ugc_dkq_sv][anchor|#image_dqz_3ss_mm][image:CustomizationPlatform/images/CG_Platform_TO_Code_CS_ExtTec_Graph_Extensions.png|popup|BLC extension levels|450px][anchor|#_ae61c0e5-f8e4-46a7-a898-e63363c593dc]
You can use multilevel extensions to develop applications that extend the functionality of Acumatica ERP or other software based on Acumatica Framework in multiple markets (that is, specified categories of potential client organizations). You may have a base extension that contains the solution common to all markets as well as multiple market-specific extensions. Every market-specific solution is deployed along with the base extension. Moreover, you can later customize deployed extensions for the end user by using DAC and graph extensions.((({S:Warn}When extensions can be deployed separately, the application developer should use multiple extension levels. Otherwise, we recommend using a single extension level.
)))
==The Order in Which Extensions Are Loaded==
For each DAC or graph type, the system loads and applies extensions at run time as follows:[anchor|#_6973a55a-6114-44cf-bc4a-77b6df035f70]
#The system collects extensions for the DAC or graph type.
#The system sorts the list of extensions in alphabetical order.
#If there is a subscriber to the <tt>PX.Data.PXBuildManager.SortExtentions</tt> event, the system passes the list of extensions in alphabetical order to this subscriber, which can sort extensions in a custom way. A sample implementation of the subscriber is shown in the following code.
#:((({S:Warn}Make sure you use a stable sorting method as the following example does.
))){{{{using System;
using System.Collections.Generic;
using System.Linq;
using System.Web.Compilation;
using Autofac;
using PX.Data.DependencyInjection;

namespace MyLib
{
  public class ServiceRegistration : Module
  {
    protected override void Load(ContainerBuilder builder)
    {
      builder.ActivateOnApplicationStart&lt;ExtensionSorting&gt;();
    }
    private class ExtensionSorting
    {
      private static readonly Dictionary&lt;Type, int&gt; _order = new Dictionary&lt;Type, int&gt;
      {
        { typeof(MultiCurrency), 4 },
        { typeof(SalesPrice), 3 },
        { typeof(Discount), 2 },
        { typeof(SalesTax), 1 },

        { typeof(MyGraphExt1), -1 },
        { typeof(MyGraphExt2), -2 },
      };

      public ExtensionSorting()
      {
        PXBuildManager.SortExtensions += StableSort;
      }
      private static void StableSort(List&lt;Type&gt; list)
      {
        if (list?.Count &gt; 1)
        {
          var stableSortedList = list.OrderByDescending(item =&gt;
                _order.ContainsKey(item) ? _order[item] : 0).ToList();
          list.Clear();
          list.AddRange(stableSortedList);
        }
      }
    }
  }
}  
}}}}
#The system changes the order of dependent extensions (such as {{Dac1Ext: PXCacheExtension<Dac1>}} and {{Dac1ExtExt: PXCacheExtension<Dac1Ext, Dac1>}}) so that the higher-level extensions have higher priorities during the merge operation.
Suppose that the website folder contains five extensions of the <tt>Contact</tt> DAC that are available in the {{MyLib}} and {{ExternalLib}} namespaces, and the customization project includes an external sorter, which sorts the extensions in a custom way. The following diagram shows how these extensions are sorted. As a result of the sorting in this example, the first extension that is applied is {{MyLib.ContactExt}}. The {{ExternalLib.ExtExtForContact}} class has the highest priority during the merge operation.[anchor|#_bfc67d1b-704c-430b-929c-f0a5565dc0a7][anchor|#_3aab8be2-2218-4881-8be7-367835bca79b][image:CustomizationPlatform/images/ExtensionSorting.png|popup|Extension sorting|450px]
==In This Section==[anchor|#ul_s2g_1hl_rp]
*[HelpRoot_Dev_Customization\CG_Platform_Framework_CS_DACExt|DAC Extensions]
*[HelpRoot_Dev_Customization\CG_Platform_TO_Code_CS_GraphExtensions|Graph Extensions]
*[HelpRoot_Dev_Customization\CG_Platform_TO_Code_RunTime|Run-Time Compilation]
*[HelpRoot_Dev_Customization\CG_Platform_TO_Code_CS_ExtLibrary|Extension Library]
]]></column>
			<column name="PlainText"><![CDATA[Changes in the Application Code (C#) In this section, you can find information about the customization of the application         functionality, which is provided by the application business logic (implemented in C# code)         of data access classes and business logic controllers. BLC and DAC Extensions To give you the ability to customize the functionality or behavior of a form, the  Acumatica Customization             Platform uses technology based on extension models. When you are resolving a typical customization         task, you generally create extensions for original data access classes and business logic         controllers. An extension for a business logic controller (BLC, also referred to as  graph ) or a data     access class (DAC) is a class derived from a generic class defined in the       PX.Data  assembly of  Acumatica ERP.     To declare an extension for a DAC, you derive a class from the       PXCacheExtension<T>  generic class. To declare an extension of a BLC, you     derive a class from the  PXGraphExtension<T>  generic class. If you have created an extension for a BLC or DAC in a customization project and published the     project, the platform applies the extension to the base class at run time. During publication of     the project, all the code extensions created for an instance of  Acumatica ERP     in the project are saved as C# source code files in the  App_RuntimeCode      folder of the application instance (see the diagram below). Use of DAC and BLC extensions for a customization At run time, during the first initialization of a base class, the  Acumatica Customization             Platform automatically finds the extension for the class and applies the customization by replacing     the base class with the merged result of the base class and the extension it found. When you unpublish all customization projects, the platform deletes all the code files from     the  App_RuntimeCode  folder. As a result, the platform has no custom code to     merge at run time. Multilevel Extensions The  Acumatica Customization             Platform supports multilevel extensions, which are required when you develop off-the-shelf software that is distributed in multiple editions. Precompiled extensions provide a measure of protection for your source code and intellectual property. The figure below illustrates the DAC extension model. DAC extension levels The figure below illustrates the BLC extension model. BLC extension levels You can use multilevel extensions to develop             applications that extend the functionality of  Acumatica ERP             or other software based on  Acumatica Framework in             multiple markets (that is, specified categories of potential client organizations). You             may have a base extension that contains the solution common to all markets as well as             multiple market-specific extensions. Every market-specific solution is deployed along             with the base extension. Moreover, you can later customize deployed extensions for the             end user by using DAC and graph extensions. When extensions can be deployed separately, the application developer should use multiple         extension levels. Otherwise, we recommend using a single extension level. The Order in Which Extensions Are Loaded For each DAC or graph type, the system loads and applies extensions at run time as follows: The system collects extensions for the DAC or graph type. The system sorts the list of extensions in alphabetical order. If there is a subscriber to the                PX.Data.PXBuildManager.SortExtentions  event, the system passes the             list of extensions in alphabetical order to this subscriber, which can sort extensions             in a custom way. A sample implementation of the subscriber is shown in the following               code. Make sure you use a stable sorting method as the following example               does. using System;
using System.Collections.Generic;
using System.Linq;
using System.Web.Compilation;
using Autofac;
using PX.Data.DependencyInjection;

namespace MyLib
{
  public class ServiceRegistration : Module
  {
    protected override void Load(ContainerBuilder builder)
    {
      builder.ActivateOnApplicationStart<ExtensionSorting>();
    }
    private class ExtensionSorting
    {
      private static readonly Dictionary<Type, int> _order = new Dictionary<Type, int>
      {
        { typeof(MultiCurrency), 4 },
        { typeof(SalesPrice), 3 },
        { typeof(Discount), 2 },
        { typeof(SalesTax), 1 },

        { typeof(MyGraphExt1), -1 },
        { typeof(MyGraphExt2), -2 },
      };

      public ExtensionSorting()
      {
        PXBuildManager.SortExtensions += StableSort;
      }
      private static void StableSort(List<Type> list)
      {
        if (list?.Count > 1)
        {
          var stableSortedList = list.OrderByDescending(item =>
                _order.ContainsKey(item) ? _order[item] : 0).ToList();
          list.Clear();
          list.AddRange(stableSortedList);
        }
      }
    }
  }
}   The system changes the order of dependent extensions (such as  Dac1Ext:               PXCacheExtension<Dac1>  and  Dac1ExtExt:               PXCacheExtension<Dac1Ext, Dac1> ) so that the higher-level extensions have             higher priorities during the merge operation. Suppose that the website folder contains five extensions of the            Contact  DAC that are available in the  MyLib  and            ExternalLib  namespaces, and the customization project includes an         external sorter, which sorts the extensions in a custom way. The following diagram shows how         these extensions are sorted. As a result of the sorting in this example, the first extension         that is applied is  MyLib.ContactExt . The            ExternalLib.ExtExtForContact  class has the highest priority during the         merge operation. Extension sorting In This Section DAC ExtensionsGraph ExtensionsRun-Time CompilationExtension Library]]></column>
		</row>
		<row PageID="114ae5af-8667-4933-b53d-c4c8667c85ac" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="e64e9ea0-40fc-708a-f795-d6d0cd45a95c" RecordSourceID="22377">
			<column name="Content"><![CDATA[
This topic explores the ways provided by the Acumatica Customization             Platform to define data access class (DAC) extensions of different levels and shows how different DAC extensions can interact.{br}

To declare a DAC extension, you derive a class from <tt>PXCacheExtension&lt;T&gt;</tt>.{br}{TOC}
==First-Level DAC Extension==
The example below shows a declaration of a first-level DAC extension.<source lang="csharp">
class BaseDACExtension : PXCacheExtension&lt;BaseDAC&gt;
{
    public void SomeMethod()
    {
        BaseDAC dac = Base;
    }
}</source>
The extension class includes the read-only <tt>Base</tt> property, which returns an instance of the base DAC.
==Second-Level DAC Extension==
The example below shows a declaration of a second-level DAC extension.<source lang="csharp">
class BaseDACExtensionOnExtension :
    PXCacheExtension&lt;BaseDACExtension, BaseDAC&gt;
{
    public void SomeMethod()
    {
        BaseDAC dac = Base;
        BaseDACExtension dacExt = Base1;
    }
}</source>
The extension class includes the following:[anchor|#ul_cxb_l12_wk]
*The read-only <tt>Base</tt> property, which returns the instance of the base DAC
*The read-only <tt>Base1</tt> property, which returns the instance of the first-level DAC extension

==Two Variants of a Higher-Level DAC Extension==
A definition of an extension of a higher level has two possible variants. In the first variant, you derive the extension class from the <tt>PXCacheExtension</tt> generic class with two type parameters, where the first type parameter is set to an extension of the previous level. In the second variant, you derive the extension class from the <tt>PXCacheExtension</tt> generic class with the same number of type parameters as the level of the extension of the new class. In this case, you set type parameters to extension classes from all lower extension levels, from the previous level down to the base class.
==First Variant of a Higher-Level DAC Extension==
The example below shows the declaration of a third- or higher-level DAC extension that derives from the <tt>PXCacheExtension</tt> generic class with two type parameters.<source lang="csharp">
class BaseDACMultiExtensionOnExtension :
    PXCacheExtension&lt;BaseDACExtensionOnExtension, BaseDAC&gt;
{
    public void SomeMethod()
    {
        BaseDAC dac = Base;
        BaseDACExtensionOnExtension dacExtOnExt = Base1;
    }
}</source>
An extension class defined this way includes the following:[anchor|#ul_zjc_gqw_vk]
*The read-only <tt>Base</tt> property, which returns the instance of the base DAC
*The read-only <tt>Base1</tt> property, which returns the instance of the DAC extension from the previous level

==Second Variant of a Higher-Level DAC Extension==
The example below shows a declaration of a third- or higher-level DAC extension that derives from the <tt>PXCacheExtension</tt> generic class with three or more type parameters.<source lang="csharp">class BaseDACAdvMultiExtensionOnExtension : 
    PXCacheExtension&lt;BaseDACExtensionOnExtension, BaseDACExtension, BaseDAC&gt;
{
    public void SomeMethod()
    {
        BaseDAC dac = Base;
        BaseDACExtension dacExt = Base1;
        BaseDACExtensionOnExtension dacExtOnExt = Base2;
    }
}</source>
An extension class defined in this way includes the following:[anchor|#ul_cft_lqw_vk]
*The read-only <tt>Base</tt> property, which returns the instance of the base DAC
*The read-only <tt>BaseN</tt> properties for all extension levels below the current level, where ''N'' is the sequence number of an extension level

==Attributes Hierarchy of a DAC Field==
Conceptually, a DAC extension is a substitution of the base DAC. The base DAC is replaced at run time with the merged result of the base DAC and every extension discovered.{br}

Each extension on another extension completely overrides the DAC field attributes. The attributes declared on the highest-level extension override all previously declared attributes.{br}

For example, suppose that the attributes of the same DAC field are defined on different extension levels as follows:[anchor|#ul_awq_lpw_vk]
*In the base DAC, as shown below<source lang="csharp">
 [PXUIField(DisplayName = "Base Name")]
 [PXDefault("Default base value")]</source>
*In the first-level DAC extension, as the following code shows<source lang="csharp">[PXUIField(DisplayName = "Level1 Name", Visible = false)]</source>
*In the second-level DAC extension, as shown below<source lang="csharp">[PXUIField(DisplayName = "Level2 Name")]
[PXDefault("Default 2nd level value")]</source>

If all the extensions are applied, any field of the second-level DAC extension will have the following parameters specified by attributes:[anchor|#ul_uz4_5pw_vk]
*<tt>Display name</tt>: ''Level2 Name''
* <tt>Visible</tt>: ''true''
* <tt>Default value</tt>: ''Default 2nd level value''
((({S:Warn}You cannot modify the same member of the base DAC in the DAC extensions of the same level. You should use DAC extensions of different levels that successively extend one another.
)))
==DAC Field Read and Write Operations==
The Acumatica Framework can access the value of a DAC field only through an instance of the base DAC. The instance of the DAC extension is used to get the field value only when the field is declared in the extension and is not present in the base DAC.{br}

To assign a value to a field, the application developer should use the instance of the base DAC. You must use the instance of a DAC extension to assign a field value when the field is declared within the extension and is not present in the base DAC.
==In This Section==[anchor|#ul_s2g_1hl_rp]
*[HelpRoot_Dev_Customization\CG_Platform_Framework_CS_DACExt_Access|Access to a Custom Field]
*[HelpRoot_Dev_Customization\CG_Platform_Framework_CS_DACExt_FieldAttributes|Customization of Field Attributes in DAC Extensions]
*[HelpRoot_Dev_Customization\CG_Platform_Framework_CS_DACExt_DACFormat|Supported DAC Extension Formats]
]]></column>
			<column name="PlainText"><![CDATA[DAC Extensions This topic explores the ways provided by the  Acumatica Customization             Platform to define data access class (DAC) extensions of different levels and shows how                 different DAC extensions can interact. To declare a DAC extension, you derive a class from                      PXCacheExtension<T> . First-Level DAC Extension The example below shows a declaration of a first-level DAC extension. 
class BaseDACExtension : PXCacheExtension<BaseDAC>
{
    public void SomeMethod()
    {
        BaseDAC dac = Base;
    }
} The extension class includes the read-only  Base  property, which returns an     instance of the base DAC. Second-Level DAC Extension The example below shows a declaration of a second-level DAC extension. 
class BaseDACExtensionOnExtension :
    PXCacheExtension<BaseDACExtension, BaseDAC>
{
    public void SomeMethod()
    {
        BaseDAC dac = Base;
        BaseDACExtension dacExt = Base1;
    }
} The extension class includes the following: The read-only  Base  property, which returns the instance of the base                     DAC The read-only  Base1  property, which returns the instance of the                     first-level DAC extension Two Variants of a Higher-Level DAC Extension A definition of an extension of a higher level has two possible variants. In the first                 variant, you derive the extension class from the  PXCacheExtension                  generic class with two type parameters, where the first type parameter is set to an                 extension of the previous level. In the second variant, you derive the extension                 class from the  PXCacheExtension  generic class with the same                 number of type parameters as the level of the extension of the new class. In this                 case, you set type parameters to extension classes from all lower extension levels,                 from the previous level down to the base class. First Variant of a Higher-Level DAC Extension The example below shows the declaration of a third- or higher-level DAC extension that derives     from the  PXCacheExtension  generic class with two type parameters. 
class BaseDACMultiExtensionOnExtension :
    PXCacheExtension<BaseDACExtensionOnExtension, BaseDAC>
{
    public void SomeMethod()
    {
        BaseDAC dac = Base;
        BaseDACExtensionOnExtension dacExtOnExt = Base1;
    }
} An extension class defined this way includes the following: The read-only  Base  property, which returns the instance of the base                     DAC The read-only  Base1  property, which returns the instance of the DAC                     extension from the previous level Second Variant of a Higher-Level DAC Extension The example below shows a declaration of a third- or higher-level DAC extension that derives     from the  PXCacheExtension  generic class with three or more type     parameters. class BaseDACAdvMultiExtensionOnExtension : 
    PXCacheExtension<BaseDACExtensionOnExtension, BaseDACExtension, BaseDAC>
{
    public void SomeMethod()
    {
        BaseDAC dac = Base;
        BaseDACExtension dacExt = Base1;
        BaseDACExtensionOnExtension dacExtOnExt = Base2;
    }
} An extension class defined in this way includes the following: The read-only  Base  property, which returns the instance of the base                     DAC The read-only  BaseN  properties for all extension levels below the current                     level, where  N  is the sequence number of an extension level Attributes Hierarchy of a DAC Field Conceptually, a DAC extension is a substitution of the base DAC. The base DAC is replaced at     run time with the merged result of the base DAC and every extension discovered. Each extension on another extension completely overrides the DAC field attributes. The     attributes declared on the highest-level extension override all previously declared     attributes. For example, suppose that the attributes of the same DAC field are defined on different     extension levels as follows: In the base DAC, as shown                     below 
 [PXUIField(DisplayName = "Base Name")]
 [PXDefault("Default base value")] In the first-level DAC extension, as the following code                     shows [PXUIField(DisplayName = "Level1 Name", Visible = false)] In the second-level DAC extension, as shown                     below [PXUIField(DisplayName = "Level2 Name")]
[PXDefault("Default 2nd level value")] If all the extensions are applied, any field of the second-level DAC extension will have the                 following parameters specified by attributes: Display name :  Level2 Name Visible :  true Default value :  Default 2nd level value You cannot modify the same member of the base DAC in the DAC extensions of the same level.                 You should use DAC extensions of different levels that successively extend one                 another. DAC Field Read and Write Operations The  Acumatica Framework can     access the value of a DAC field only through an instance of the base DAC. The instance of the     DAC extension is used to get the field value only when the field is declared in the extension     and is not present in the base DAC. To assign a value to a field, the application developer should use the instance of the base     DAC. You must use the instance of a DAC extension to assign a field value when the field is     declared within the extension and is not present in the base DAC. In This Section Access to a Custom FieldCustomization of Field Attributes in DAC ExtensionsSupported DAC Extension Formats]]></column>
		</row>
		<row PageID="3500f338-2d3c-4a7a-bcc2-b66da393c131" Language="en-US" PageRevisionID="1" PlainText="Access to a Custom Field You can customize a data access class (DAC) in either of the following ways (see the diagram         below): By altering the attributes of existing fields. You can use an altered field just as you           would any other existing field. By declaring new (custom) fields. Analyzing the content of the merged DAC instance in the cache object Every custom field is declared within the code of a DAC extension; therefore, at run time,       the custom field is accessible only through the DAC extension instance of the cache       object. You can access a custom field: From a MethodFrom a BQL StatementFrom a Field Attribute" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="5e8c1dbf-a372-8e13-f3e8-0e8d02789b69" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can customize a data access class (DAC) in either of the following ways (see the diagram below):[anchor|#ul_evc_mgd_vt]
*By altering the attributes of existing fields. You can use an altered field just as you would any other existing field.
*By declaring new (custom) fields.
[anchor|#fig_vtc_1dp_yt][anchor|#image_c1m_bdp_yt][image:CustomizationPlatform/images/CG_Platform_TO_Code_CS_DACExtensions_Access.png|popup|Analyzing the content of the merged DAC instance in the cache object|450px]{br}

Every custom field is declared within the code of a DAC extension; therefore, at run time, the custom field is accessible only through the DAC extension instance of the cache object.{br}

You can access a custom field:[anchor|#ul_fsr_dmn_yv]
*[HelpRoot_Dev_Customization\CG_Platform_Framework_CS_DACExt_Access_Methods|From a Method]
*[HelpRoot_Dev_Customization\CG_Platform_Framework_CS_DACExt_Access_BQL|From a BQL Statement]
*[HelpRoot_Dev_Customization\CG_Platform_Framework_CS_DACExt_Access_FieldAttr|From a Field Attribute]
]]></column>
		</row>
		<row PageID="3a427466-1925-4799-8fee-fe34a77021d0" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="36ba7b8b-0dd8-6952-6567-8d9985970646" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can access the extension instance through the base (original) DAC object by using one of the following generic methods:[anchor|#ul_bzz_tgd_vt]
*The <tt>GetExtension&lt;T&gt;(object)</tt> static generic method of the <tt>PXCache&lt;T&gt;</tt> generic class
*The <tt>GetExtension&lt;T&gt;(object)</tt> static generic method declared within the non-generic <tt>PXCache</tt> class
((({S:Warn}There are no differences between these generic methods. You can use either one.
))){br}

For example, you might access an instance of a DAC extension as follows. This example uses the <tt>row</tt> instance of the base DAC to retrieve the <tt>rowExt</tt> DAC extension object.<source lang="csharp">DACNameExt rowExt = PXCache&lt;DACName&gt;.GetExtension&lt;DACNameExt&gt;(row);</source>{br}

To access a custom field, use the instance of a DAC extension that contains the field as follows. The code below illustrates the use of the <tt>GetExtension&lt;T&gt;(object)</tt> static generic method of the PXCache&lt;T&gt; generic class to access an instance of a DAC extension used to access a custom field.<source lang="csharp">var fieldValue = PXCache&lt;DACName&gt;.GetExtension&lt;DACNameExt&gt;(row).UsrFieldName;</source>{br}

You can retrieve a DAC extension object or particular field from it by using the methods of {{PXCache}}, as shown in the code below. This code demonstrates how you can access a field by using the {{GetExtension<>}} method.<source lang="csharp">
//Access to the field through the GetExtension&lt;&gt; method
//localCategory gets the value of the usrLocalTaxCategoryID custom field 
//defined in the InventoryItemExtension DAC extension for the InventoryItem class
protected void InventoryItem_RowUpdating(PXCache sender, PXRowUpdatingEventArgs e)
{
    InventoryItem row = e.NewRow as InventoryItem;
    InventoryItemExtension rowExt = sender.GetExtension&lt;InventoryItemExtension&gt;(row);
    string localCategory = rowExt.UsrLocalTaxCategoryID;
...
</source>
In event handlers, you can also use the {{GetValue()}} and {{GetValueExt()}} methods to access the custom field by its string name, as the code below shows.<source lang="csharp">
//Access to the field through the GetValue() method
//localCategory gets the value of the usrLocalTaxCategoryID custom field 
//defined in a DAC extension for the InventoryItem class
protected void InventoryItem_RowUpdating(PXCache sender, PXRowUpdatingEventArgs e)
{
    InventoryItem row = e.NewRow as InventoryItem;
    string localCategory = (string)sender.GetValue(row, "usrLocalTaxCategoryID");
...
</source>
For custom fields defined in DAC extensions, you can also use other methods of {{PXCache}} classes, such as {{SetValue()}} and {{SetDefaultExt()}}. For more information, see the {{PXCache<Table>}} class in the API Reference Documentation of Acumatica Framework.{br}

You can refer to the custom field by its BQL name in any methods of Acumatica Framework. The example below shows how you can refer to the field in the {{SetEnabled<T>()}} method of the {{PXUIFieldAttribute}} that you can use to configure the UI representation of the field at run time. For more information on available classes and their methods, see the API Reference Documentation of Acumatica Framework.<source lang="csharp">
//The usrLocalTaxCategoryID custom field is defined
//in the InventoryItemExtension DAC extension for the InventoryItem class
protected void InventoryItem_RowSelected(PXCache sender, PXRowSelectedEventArgs e)
{
    InventoryItem row = e.Row as InventoryItem;
    PXUIFieldAttribute.SetEnabled&lt;InventoryItemExtension.usrLocalTaxCategoryID&gt;(sender, row, true);
...
</source>]]></column>
			<column name="PlainText"><![CDATA[From a Method You can access the extension instance through the base (original) DAC object by using one of       the following generic methods: The  GetExtension<T>(object)  static generic method of the              PXCache<T>  generic class The  GetExtension<T>(object)  static generic method declared within           the non-generic  PXCache  class There are no differences between these generic methods. You can use either         one. For example, you might access an instance of a DAC extension as follows. This example uses       the  row  instance of the base DAC to retrieve the  rowExt        DAC extension       object. DACNameExt rowExt = PXCache<DACName>.GetExtension<DACNameExt>(row); To access a custom field, use the instance of a DAC extension that contains the field as       follows. The code below illustrates the use of the          GetExtension<T>(object)  static generic method of the PXCache<T>       generic class to access an instance of a DAC extension used to access a custom       field. var fieldValue = PXCache<DACName>.GetExtension<DACNameExt>(row).UsrFieldName; You can retrieve a DAC extension object or particular field from it by using the methods of          PXCache , as shown in the code below. This code demonstrates how you can       access a field by using the  GetExtension<>  method. 
//Access to the field through the GetExtension<> method
//localCategory gets the value of the usrLocalTaxCategoryID custom field 
//defined in the InventoryItemExtension DAC extension for the InventoryItem class
protected void InventoryItem_RowUpdating(PXCache sender, PXRowUpdatingEventArgs e)
{
    InventoryItem row = e.NewRow as InventoryItem;
    InventoryItemExtension rowExt = sender.GetExtension<InventoryItemExtension>(row);
    string localCategory = rowExt.UsrLocalTaxCategoryID;
...
 In event handlers, you can also use the  GetValue()  and          GetValueExt()  methods to access the custom field by its string name, as the       code below shows. 
//Access to the field through the GetValue() method
//localCategory gets the value of the usrLocalTaxCategoryID custom field 
//defined in a DAC extension for the InventoryItem class
protected void InventoryItem_RowUpdating(PXCache sender, PXRowUpdatingEventArgs e)
{
    InventoryItem row = e.NewRow as InventoryItem;
    string localCategory = (string)sender.GetValue(row, "usrLocalTaxCategoryID");
...
 For custom fields defined in DAC extensions, you can also use other methods of          PXCache  classes, such as  SetValue()  and          SetDefaultExt() . For more information, see the          PXCache<Table>  class in the API Reference Documentation of  Acumatica Framework. You can refer to the custom field by its BQL name in any methods of  Acumatica Framework.       The example below shows how you can refer to the field in the          SetEnabled<T>()  method of the  PXUIFieldAttribute  that       you can use to configure the UI representation of the field at run time. For more information       on available classes and their methods, see the API Reference Documentation of  Acumatica Framework. 
//The usrLocalTaxCategoryID custom field is defined
//in the InventoryItemExtension DAC extension for the InventoryItem class
protected void InventoryItem_RowSelected(PXCache sender, PXRowSelectedEventArgs e)
{
    InventoryItem row = e.Row as InventoryItem;
    PXUIFieldAttribute.SetEnabled<InventoryItemExtension.usrLocalTaxCategoryID>(sender, row, true);
...
 ]]></column>
		</row>
		<row PageID="433c1a7f-7e1a-4b0a-8d40-ffb1659584d1" Language="en-US" PageRevisionID="1" Content="&#xA;In BQL expressions, you have to refer to the custom field by its BQL name in the extension class.{br}&#xA;&#xA;For example, after you have added the {{UsrSearchKeywords}} field to the {{InventoryItemExtension}} class, which is a DAC extension for the {{InventoryItem}} class, the field is accessible in BQL, as shown in the code below.&lt;source lang=&quot;csharp&quot;&gt;&#xA;//The usrLocalTaxCategoryID custom field is defined&#xA;//in the InventoryItemExtension DAC extension for the InventoryItem class&#xA;PXSelect&amp;lt;InventoryItemExtension, &#xA;    Where&amp;lt;InventoryItemExtension.usrLocalTaxCategoryID, IsNotNull&amp;gt;&amp;gt;&#xA;&lt;/source&gt;" PlainText="From a BQL Statement In BQL expressions, you have to refer to the custom field by its BQL name in the extension    class. For example, after you have added the  UsrSearchKeywords  field to the      InventoryItemExtension  class, which is a DAC extension for the      InventoryItem  class, the field is accessible in BQL, as shown in the code    below. &#xA;//The usrLocalTaxCategoryID custom field is defined&#xA;//in the InventoryItemExtension DAC extension for the InventoryItem class&#xA;PXSelect&lt;InventoryItemExtension, &#xA;    Where&lt;InventoryItemExtension.usrLocalTaxCategoryID, IsNotNull&gt;&gt;&#xA; " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="834b9bea-b538-df17-7d00-9e5673e212b9" RecordSourceID="22377" />
		<row PageID="42cc37fb-86ed-43e7-b962-234f2690ebd8" Language="en-US" PageRevisionID="1" Content="&#xA;In DAC extensions, you have to refer to a custom field by its BQL name.{br}&#xA;&#xA;After you have added the {{UsrSearchKeywords}} field to the {{InventoryItemExtension}} class, which is a DAC extension for the {{InventoryItem}} class, the field is accessible in other DAC extensions.{br}&#xA;&#xA;For example, if you need to specify the type of the custom DAC field. For example, in attributes, you can use the {{typeof}} operator, as shown in the code below.&lt;source lang=&quot;csharp&quot;&gt;&#xA;//The usrLocalTaxCategoryID custom field is defined&#xA;//in the InventoryItemExtension DAC extension for the InventoryItem class&#xA;[PXSelector(typeof(InventoryItemExtension.usrLocalTaxCategoryID))]&lt;/source&gt;" PlainText="From a Field Attribute In DAC extensions, you have to refer to a custom field by its BQL name. After you have added the  UsrSearchKeywords  field to the                  InventoryItemExtension  class, which is a DAC extension for the                  InventoryItem  class, the field is accessible in other DAC             extensions. For example, if you need to specify the type of the custom DAC field. For example, in             attributes, you can use the  typeof  operator, as shown in the code             below. &#xA;//The usrLocalTaxCategoryID custom field is defined&#xA;//in the InventoryItemExtension DAC extension for the InventoryItem class&#xA;[PXSelector(typeof(InventoryItemExtension.usrLocalTaxCategoryID))] " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="f9d54189-4f4b-5ab6-6469-c4b53b6cc1c1" RecordSourceID="22377" />
		<row PageID="664aaeee-0bdc-427f-83da-bd931823c668" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="1bf6f857-f80a-0415-4af1-87ffda4cfc82" RecordSourceID="22377">
			<column name="Content"><![CDATA[
If you have a customization that replaces the original attributes of a field with custom attributes, after you upgrade Acumatica ERP to a new version, new functionality may became unavailable, as the following diagram shows.[anchor|#fig_gwt_ctx_jr][anchor|#image_rnw_ktx_jr][image:CustomizationPlatform/images/CG_Platform_DAC_CustAttributes.png|popup|Possible result of using the Replace (default) method to customize the attributes of a DAC field|450px]
To address this issue, the customization framework provides advanced possibilities for you to control the field customization by using additional attributes in the DAC extension.{br}

When you customize Acumatica ERP, you can specify how the system should apply the original and custom attributes to the field. Thus, you can make the customizations more flexible and use the collections of original attributes that could be updated between Acumatica ERP versions.{br}

To specify the way the system should apply the field attributes in a DAC extension, you can use the following attributes.[anchor|#table_o5x_ztw_3r]
{| class="checklist" | width="100%" 
|- 
!Attribute
!Description
|- 
| [https://help.acumatica.com/Main?ScreenId=ShowWiki&pageid=b78b0a53-b9db-0693-66fa-7d2b432b9f38|PXMergeAttributes]
| Specifies how to apply custom attributes to the existing ones.
|- 
| [https://help.acumatica.com/Main?ScreenId=ShowWiki&pageid=de0837e1-1429-3b5e-8ea2-4c5cf0d2033f|PXRemoveBaseAttribute]
| Removes the specified existing attribute.
|- 
| [https://help.acumatica.com/Main?ScreenId=ShowWiki&pageid=29049e2a-2e62-71c6-2f40-513894226781|PXCustomizeBaseAttribute]
| Defines a new value for the specified attribute parameter.
|- 
| [https://help.acumatica.com/Main?ScreenId=ShowWiki&pageid=4183d63c-7eca-d318-7c14-1bca9477bfec|PXCustomizeSelectorColumns]
| Defines the new set and order of the columns in the selector.
|}
==Application Order of the Custom Attributes==
The customization attributes described above should be declared in the following order:[anchor|#_3df7ffb9-9bb2-4bbf-8642-22ebae8ce92a]
#[https://help.acumatica.com/Main?ScreenId=ShowWiki&pageid=29049e2a-2e62-71c6-2f40-513894226781|PXCustomizeBaseAttribute]
#[https://help.acumatica.com/Main?ScreenId=ShowWiki&pageid=de0837e1-1429-3b5e-8ea2-4c5cf0d2033f|PXRemoveBaseAttribute]
#[https://help.acumatica.com/Main?ScreenId=ShowWiki&pageid=b78b0a53-b9db-0693-66fa-7d2b432b9f38|PXMergeAttributes]
((({S:Warn}The [https://help.acumatica.com/Main?ScreenId=ShowWiki&pageid=4183d63c-7eca-d318-7c14-1bca9477bfec|PXCustomizeSelectorColumns] works independently and can be declared in any place of the attribute section.
)))
For details on how to customize field attributes for a particular screen, see the [HelpRoot_Dev_Customization\cg_gl_modifyingattributesofadacfield|Overriding Attributes of a DAC field in the Graph] topic.]]></column>
			<column name="PlainText"><![CDATA[Customization of Field Attributes in DAC Extensions If you have a customization that replaces the original attributes of a field with custom       attributes, after you upgrade  Acumatica ERP to a new version, new functionality may became unavailable, as the following diagram       shows. Possible result of using the Replace (default) method to customize the attributes of a         DAC field To address this issue, the customization framework provides advanced possibilities for you to       control the field customization by using additional attributes in the DAC extension. When you customize  Acumatica ERP, you can specify how the system should apply the original and custom attributes to the       field. Thus, you can make the customizations more flexible and use the collections of original       attributes that could be updated between  Acumatica ERP versions. To specify the way the system should apply the field attributes in a DAC extension, you can       use the following attributes. Attribute Description PXMergeAttributes PXMergeAttributesSpecifies how to apply custom attributes to the existing ones. PXRemoveBaseAttribute PXRemoveBaseAttributeRemoves the specified existing attribute. PXCustomizeBaseAttribute PXCustomizeBaseAttributeDefines a new value for the specified attribute parameter. PXCustomizeSelectorColumns PXCustomizeSelectorColumnsDefines the new set and order of the columns in the selector. Application Order of the Custom Attributes The customization attributes described above should be declared in the following order: PXCustomizeBaseAttribute PXCustomizeBaseAttributePXRemoveBaseAttribute PXRemoveBaseAttributePXMergeAttributes PXMergeAttributesThe  PXCustomizeSelectorColumns PXCustomizeSelectorColumns works independently and         can be declared in any place of the attribute section. For details on how to customize field attributes for a particular screen, see the  Overriding Attributes of a DAC field in the Graph topic. ]]></column>
		</row>
		<row PageID="bbdc9242-e39a-49bc-bda3-558e27bd21d0" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="81821a9c-dead-cd95-be12-42a419466c13" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can keep a DAC customization in a customization project in any of the following ways:[anchor|#ul_oss_mwk_xt]
*As a ''DAC'' item of a customization project in XML format. When you publish the project, the platform creates the DAC extension source code and saves the code in the <tt>&lt;DACItemName&gt;&#95;extensions.cs</tt> file in the <tt>App&#95;RuntimeCode</tt> folder of the website.
*:((({S:Warn}The system creates the file name based on the item name by replacing all symbols except letters and digits with the ''&#95;'' symbol and adding the ''&#95;extensions'' suffix. For example, the extension code file for the <tt>PX.Objects.CR.Contact</tt> ''DAC'' item has the name <tt>PX&#95;Objects&#95;CR&#95;Contact&#95;extensions.cs</tt>.
)))
*As a ''Code'' item of a customization project that is the C# code of the DAC extension wrapped in XML format. When you publish the project, the platform saves the code in the <tt>&lt;CodeItemName&gt;.cs</tt> file in the <tt>App&#95;RuntimeCode</tt> folder of the website.
*As a <tt>.dll</tt> file of the extension library in the <tt>Bin</tt> folder of the website. The library contains the binary code of the DAC extension. To deploy the extension library to the production environment along with a customization project, you include the extension library in the project as a ''File'' item. See [HelpRoot_Dev_Customization\CG_Platform_TO_Code_CS_ExtLibrary|Extension Library] for details.
{br}

By using the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor], you can:[anchor|#ul_m2v_wcl_xt]
*Convert a ''DAC'' item to a ''Code'' item.
*:((({S:Warn}The system creates the ''Code'' name based on the ''DAC'' item name by using the last word of the name and adding the ''Extensions'' suffix. For example, the <tt>PX.Objects.CR.Contact</tt> ''DAC'' item is converted to the <tt>ContactExtensions</tt> ''Code'' item.
)))
*Move a ''Code'' item to the extension library included in the customization project as a ''File'' item.
{br}

If you have a customized data access class that is added to the project as a ''DAC'' item, then you can click '''Convert to Extension''' on the page toolbar of the Customized Data Classes page to convert the class changes into the class extension code used to complete the extension development in either the Code Editor or Microsoft Visual Studio (see the diagram below).[anchor|#fig_zcc_ldl_xt][anchor|#image_qgp_zbl_2w][image:CustomizationPlatform/images/CG_Platform_Features_DACFormats.png|popup|Converting the code format of a DAC extension in a customization project|450px]{br}

For a ''Code'' item included in a customization project, if you want to move the code to an extension library to compile it into a <tt>.dll</tt> file, you can click the '''Move to Extension Lib''' button on the page toolbar of the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_CodeEditor|Code Editor]. After the operation is complete, the ''Code'' item that is currently displayed in the work area of the Code Editor is removed from the customization project. The file with the same source code is appended to the extension library that is bound to the customization project. If the ''Code'' item name was <tt>CodeItemName</tt>, the name of the created file will be <tt>CodeItemName.cs</tt>.]]></column>
			<column name="PlainText"><![CDATA[Supported DAC Extension Formats You can keep a DAC customization in a customization project in any of the following ways: As a  DAC  item of a customization project in XML format. When you publish the project,           the platform creates the DAC extension source code and saves the code in the              <DACItemName>_extensions.cs  file in the              App_RuntimeCode  folder of the website. The system creates the             file name based on the item name by replacing all symbols except letters and digits with             the  _  symbol and adding the  _extensions  suffix. For example, the extension             code file for the  PX.Objects.CR.Contact DAC  item has the name              PX_Objects_CR_Contact_extensions.cs . As a  Code  item of a customization project that is the C# code of the DAC extension           wrapped in XML format. When you publish the project, the platform saves the code in the              <CodeItemName>.cs  file in the              App_RuntimeCode  folder of the website. As a  .dll  file of the extension library in the  Bin            folder of the website. The library contains the binary code of the DAC extension. To           deploy the extension library to the production environment along with a customization           project, you include the extension library in the project as a  File  item. See  Extension Library for details. By using the   Customization Project                         Editor, you can: Convert a  DAC  item to a  Code  item. The system creates the  Code              name based on the  DAC  item name by using the last word of the name and adding the                Extensions  suffix. For example, the  PX.Objects.CR.Contact DAC  item is converted to the  ContactExtensions Code  item. Move a  Code  item to the extension library included in the customization project           as a  File  item. If you have a customized data access class that is added to the project as a  DAC  item,       then you can click  Convert to Extension  on the page toolbar of the       Customized Data Classes page to convert the class changes into the class extension code used       to complete the extension development in either the Code Editor or Microsoft Visual Studio (see the       diagram below). Converting the code format of a DAC extension in a customization project For a  Code  item included in a customization project, if you want to move the code to an       extension library to compile it into a  .dll  file, you can click the          Move to Extension Lib  button on the page toolbar of the  Code Editor. After the operation is complete, the          Code  item that is currently displayed in the work area of the Code Editor is removed       from the customization project. The file with the same source code is appended to the       extension library that is bound to the customization project. If the  Code  item name was          CodeItemName , the name of the created file will be          CodeItemName.cs . ]]></column>
		</row>
		<row PageID="c86fdae8-fef9-4490-aa57-3528d0fa172e" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="f3899340-083c-22d1-55c4-49709efe1480" RecordSourceID="22377">
			<column name="Content"><![CDATA[
This topic explores the ways provided by the Acumatica Customization             Platform to define business logic controller (BLC, also referred as ''graph'') extensions of different levels, and shows how different BLC extensions can interact.{br}

To declare an extension of a BLC, you derive a class from {{PXGraphExtension<T>}}.
==First-Level BLC Extension==
The example below shows a declaration of a first-level BLC extension.<source lang="csharp">
class BaseBLCExtension : PXGraphExtension&lt;BaseBLC&gt;
{
    public void SomeMethod()
    {
        BaseBLC baseBLC = Base;
    }
}</source>
The extension class includes the read-only <tt>Base</tt> property, which returns an instance of the base BLC.
==Second-Level BLC Extension==
The example below shows a declaration of a second-level BLC extension.<source lang="csharp">
class BaseBLCExtensionOnExtension :
    PXGraphExtension&lt;BaseBLCExtension, BaseBLC&gt;
{
    public void SomeMethod()
    {
        BaseBLC baseBLC = Base;
        BaseBLCExtension ext = Base1;
    }
}</source>
The extension class includes the following:[anchor|#ul_cxb_l12_wk]
*The read-only <tt>Base</tt> property, which returns the instance of the base BLC
*The read-only <tt>Base1</tt> property, which returns the instance of the first-level BLC extension

==Two Variants of a Higher-Level BLC Extension==
A definition of a higher-level BLC extension has two possible variants. In the first variant, you derive the extension class from the <tt>PXGraphExtension</tt> generic class with two type parameters, where the first type parameter is set to an extension of the previous level. In the second variant, you derive the extension class from the <tt>PXGraphExtension</tt> generic class with the same number of type parameters as the level of the extension of the new class. In this case, you set type parameters to extension classes from all lower extension levels, from the previous level down to the base class.
==First Variant of a Higher-Level BLC Extension==
The example below shows a declaration of a third- or higher-level BLC extension that is derived from the <tt>PXGraphExtension</tt> generic class with two type parameters.<source lang="csharp">
class BaseBLCMultiExtensionOnExtension :
    PXGraphExtension&lt;BaseBLCExtensionOnExtension, BaseBLC&gt;
{
    public void SomeMethod()
    {
        BaseBLC BLC = Base;
        BaseBLCExtensionOnExtension prevExt = Base1;
    }
}</source>
An extension class defined in this way includes the following:[anchor|#ul_zjc_gqw_vk]
*The read-only <tt>Base</tt> property, which returns the instance of the base BLC
*The read-only <tt>Base1</tt> property, which returns the instance of the BLC extension from the previous level

==Second Variant of a Higher-Level BLC Extension==
The example below shows a declaration of a third- or higher-level BLC extension that is derived from the <tt>PXGraphExtension</tt> generic class with three or more type parameters.<source lang="csharp">
class BaseBLCAdvMultiExtensionOnExtension : 
    PXGraphExtension&lt;BaseBLCExtensionOnExtension, BaseBLCExtension, BaseBLC&gt;
{
    public void SomeMethod()
    {
        BaseBLC BLC = Base;
        BaseBLCExtension ext = Base1;
        BaseBLCExtensionOnExtension extOnExt = Base2;
    }
}</source>
An extension class defined in this way includes the following:[anchor|#ul_cft_lqw_vk]
*The read-only <tt>Base</tt> property, which returns the instance of the base BLC
*The read-only <tt>BaseN</tt> properties for all extension levels below the current level, where ''N'' is the sequence number of an extension level

Conceptually, a BLC extension is a substitution of the base BLC. The base BLC is replaced at run time with the merged result of the base BLC and every extension the platform found. The higher level of a declaration an extension has, the higher priority it obtains in the merge operation.
==In This Section==[anchor|#ul_s2g_1hl_rp]
*[HelpRoot_Dev_Customization\CG_Platform_TO_Code_CS_GraphExtensions_Event|Event Handlers]
*[HelpRoot_Dev_Customization\CG_Platform_TO_Code_GraphExtensions_DV|Customization of a Data View]
*[HelpRoot_Dev_Customization\CG_Platform_TO_Code_GraphExtensions_Action|Customization of an Action]
*[HelpRoot_Dev_Customization\CG_Platform_TO_Code_GraphExtensions_Graph_Method|Override of a Method]
*[HelpRoot_Dev_Customization\cg_gl_modifyingattributesofadacfield|Overriding Attributes of a DAC field in the Graph]
]]></column>
			<column name="PlainText"><![CDATA[Graph Extensions This topic explores the ways provided by the  Acumatica Customization             Platform to define business logic controller (BLC, also referred as  graph )                 extensions of different levels, and shows how different BLC extensions can                 interact. To declare an extension of a BLC, you derive a class from                      PXGraphExtension<T> . First-Level BLC Extension The example below shows a declaration of a first-level BLC extension. 
class BaseBLCExtension : PXGraphExtension<BaseBLC>
{
    public void SomeMethod()
    {
        BaseBLC baseBLC = Base;
    }
} The extension class includes the read-only  Base  property, which returns an     instance of the base BLC. Second-Level BLC Extension The example below shows a declaration of a second-level BLC extension. 
class BaseBLCExtensionOnExtension :
    PXGraphExtension<BaseBLCExtension, BaseBLC>
{
    public void SomeMethod()
    {
        BaseBLC baseBLC = Base;
        BaseBLCExtension ext = Base1;
    }
} The extension class includes the following: The read-only  Base  property, which returns the instance of the base                     BLC The read-only  Base1  property, which returns the instance of the                     first-level BLC extension Two Variants of a Higher-Level BLC Extension A definition of a higher-level BLC extension has two possible variants. In the first variant,                 you derive the extension class from the  PXGraphExtension  generic                 class with two type parameters, where the first type parameter is set to an                 extension of the previous level. In the second variant, you derive the extension                 class from the  PXGraphExtension  generic class with the same                 number of type parameters as the level of the extension of the new class. In this                 case, you set type parameters to extension classes from all lower extension levels,                 from the previous level down to the base class. First Variant of a Higher-Level BLC Extension The example below shows a declaration of a third- or higher-level BLC extension that is     derived from the  PXGraphExtension  generic class with two type parameters. 
class BaseBLCMultiExtensionOnExtension :
    PXGraphExtension<BaseBLCExtensionOnExtension, BaseBLC>
{
    public void SomeMethod()
    {
        BaseBLC BLC = Base;
        BaseBLCExtensionOnExtension prevExt = Base1;
    }
} An extension class defined in this way includes the following: The read-only  Base  property, which returns the instance of the base                     BLC The read-only  Base1  property, which returns the instance of the BLC                     extension from the previous level Second Variant of a Higher-Level BLC Extension The example below shows a declaration of a third- or higher-level BLC extension that is     derived from the  PXGraphExtension  generic class with three or more type     parameters. 
class BaseBLCAdvMultiExtensionOnExtension : 
    PXGraphExtension<BaseBLCExtensionOnExtension, BaseBLCExtension, BaseBLC>
{
    public void SomeMethod()
    {
        BaseBLC BLC = Base;
        BaseBLCExtension ext = Base1;
        BaseBLCExtensionOnExtension extOnExt = Base2;
    }
} An extension class defined in this way includes the following: The read-only  Base  property, which returns the instance of the base                     BLC The read-only  BaseN  properties for all extension levels below the current                     level, where  N  is the sequence number of an extension level Conceptually, a BLC extension is a substitution of the base BLC. The base BLC is                 replaced at run time with the merged result of the base BLC and every extension the                 platform found. The higher level of a declaration an extension has, the higher                 priority it obtains in the merge operation. In This Section Event HandlersCustomization of a Data ViewCustomization of an ActionOverride of a MethodOverriding Attributes of a DAC field in the Graph]]></column>
		</row>
		<row PageID="914dbe80-719b-4f1c-8630-4519ffdefc44" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="df5d7648-a4b9-573d-7c8b-0a3139eff83b" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The business logic associated with data modifications is implemented through event handlers. Event handlers are methods that are executed when the <tt>PXCache</tt> objects of a particular data access class (DAC) raise data manipulation events.{br}

Every business logic controller (BLC, also referred to as ''graph'') instance has a collection of event handlers for each type of data manipulation event. Every collection is filled automatically with event subscribers that are declared within the base (original) BLC and that meet the naming conventions of Acumatica Framework event handlers.{br}

With Acumatica Customization             Platform, you can define new event handlers within BLC extensions. You can define an event handler in two possible ways:[anchor|#ul_mfk_jst_wk]
*You define the event handler in the same way as it is defined in the base BLC. As a result, the event handler is added to the appropriate event handler collection. Depending on the event type, the event handler is added to either the end of the collection or the start of it. When the event occurs, all event handlers in the collection are executed, from the first to the last one.
*You define the event handler with an additional parameter, which represents the delegate for one of the following:
**The event handler with an additional parameter from the extension of the previous level, if such an event handler exists.
**The first item in the collection of event handlers, if no handlers with additional parameters declared within lower-level extensions exist. The collection contains event handlers without the additional parameter from extensions discovered at all levels.
*:In either case, you can decide whether to invoke the delegate.
*:((({S:Warn}The {{CacheAttached()}} event handler declared in the highest-level BLC extension is used to replace base DAC field attributes. Attributes attached to the <tt>CacheAttached()</tt> event handlers within the base BLC or its extensions are attached to the <tt>PXCache</tt> object, each time completely replacing the previous ones, from the base BLC to the highest extension discovered.
)))

==Event Handler Added to the End of the Collection==
The following event handlers are added to the end of the collection:[anchor|#ul_cdf_1ww_vk]
*{{FieldUpdated(PXCache sender, PXFieldUpdatedEventArgs e)}}
*{{RowSelecting(PXCache sender, PXRowSelectingEventArgs e)}}
*{{RowSelected(PXCache sender, PXRowSelectedEventArgs e)}}
*{{RowInserted(PXCache sender, PXRowInsertedEventArgs e)}}
*{{RowUpdated(PXCache sender, PXRowUpdatedEventArgs e)}}
*{{RowDeleted(PXCache sender, PXRowDeletedEventArgs e)}}
*{{RowPersisted(PXCache sender, PXRowPersistedEventArgs e)}}

The system executes event handlers from the base (original) event handler up to the highest extension level (referred to as the ''bubbling strategy''). The lower the BLC extension&rsquo;s level of declaration, the earlier the event subscriber is called. The figure below illustrates this principle.[anchor|#fig_u2g_rjq_sv][anchor|#image_iry_bjh_zm][image:CustomizationPlatform/images/CG_Platform_TO_Code_CS_GraphExtensions_Event_1.png|popup|Event execution with the bubbling strategy |420px]
==Event Handlers Added to the Beginning of the Collection==
The following event handlers are added to the beginning of the collection:[anchor|#ul_trl_gww_vk]
*{{FieldSelecting(PXCache sender, PXFieldSelectingEventArgs e)}}
*{{FieldDefaulting(PXCache sender, PXFieldDefaultingEventArgs e)}}
*{{FieldUpdating(PXCache sender, PXFieldUpdatingEventArgs e)}}
*{{FieldVerifying(PXCache sender, PXFieldVerifyingEventArgs e)}}
*{{RowInserting(PXCache sender, PXRowInsertingEventArgs e)}}
*{{RowUpdating(PXCache sender, PXRowUpdatingEventArgs e)}}
*{{RowDeleting(PXCache sender, PXRowDeletingEventArgs e)}}
*{{RowPersisting(PXCache sender, PXRowPersistingEventArgs e)}}
*{{CommandPreparing(PXCache sender, PXCommandPreparingEventArgs e)}}
*{{ExceptionHandling(PXCache sender, PXExceptionHandlingEventArgs e)}}

Event handlers are added by the system to the beginning of the collection by using the ''tunneling strategy''. The system executes event handlers from the highest extension level down to the base event handler. The higher the BLC extension&rsquo;s level of declaration, the earlier the event subscriber is called. The figure below illustrates this principle.[anchor|#fig_v2g_rjq_sv][anchor|#image_l15_gjh_zm][image:CustomizationPlatform/images/CG_Platform_TO_Code_CS_GraphExtensions_Event_2.png|popup|Event execution with the tunneling strategy|420px]
==Event Handlers with an Additional Parameter==
The event handler with an additional parameter replaces the base BLC event handler collection. When the event is raised, the system calls the event handler with an additional parameter of the highest-level BLC extension. The system passes a link to the event handler with an additional parameter from the extension of the previous level, if such an event handler exists, or to the first item in the event handler collection. You use a delegate as an additional parameter to encapsulate the appropriate event handler.{br}

The Acumatica Framework provides the following delegates to encapsulate event handlers:{br}

[anchor|#ul_w2g_rjq_sv]
*{{PXFieldSelecting(PXCache sender, PXFieldSelectingEventArgs e)}}
*{{PXFieldDefaulting(PXCache sender, PXFieldDefaultingEventArgs e)}}
*{{PXFieldUpdating(PXCache sender, PXFieldUpdatingEventArgs e)}}
*{{PXFieldVerifying(PXCache sender, PXFieldVerifyingEventArgs e)}}
*{{PXFieldUpdated(PXCache sender, PXFieldUpdatedEventArgs e)}}
*{{PXRowSelecting(PXCache sender, PXRowSelectingEventArgs e)}}
*{{PXRowSelected(PXCache sender, PXRowSelectedEventArgs e)}}
*{{PXRowInserting(PXCache sender, PXRowInsertingEventArgs e)}}
*{{PXRowInserted(PXCache sender, PXRowInsertedEventArgs e)}}
*{{PXRowUpdating(PXCache sender, PXRowUpdatingEventArgs e)}}
*{{PXRowUpdated(PXCache sender, PXRowUpdatedEventArgs e)}}
*{{PXRowDeleting(PXCache sender, PXRowDeletingEventArgs e)}}
*{{PXRowDeleted(PXCache sender, PXRowDeletedEventArgs e)}}
*{{PXRowPersisting(PXCache sender, PXRowPersistingEventArgs e)}}
*{{PXRowPersisted(PXCache sender, PXRowPersistedEventArgs e)}}
*{{PXCommandPreparing(PXCache sender, PXCommandPreparingEventArgs e)}}
*{{PXExceptionHandling(PXCache sender, PXExceptionHandlingEventArgs e)}}
{br}

For example, for the <tt>FieldVerifying</tt> event, the event handler with an additional parameter looks like {{FieldVerifying(PXCache sender, PXFieldVerifyingEventArgs e, PXFieldVerifying del)}}.{br}

You can execute {{del()}} to invoke the event handler to which {{del}} points, or you can decide not to invoke it. When {{del()}} points to the base BLC event handler collection, its invocation causes the execution of the whole collection. All other event handlers in the collection are invoked sequentially after the first handler is executed.{br}

Suppose that you have declared event handlers as follows.<source lang="csharp">
public class BaseBLC : PXGraph&lt;BaseBLC, DAC&gt;
{
    protected void DAC_RowUpdated(PXCache cache, PXRowUpdatedEventArgs e)
    {
        
    }

    protected void DAC_Field_FieldVerifying(PXCache sender, PXFieldVerifyingEventArgs e)
    {
        
    }
}

public class BaseBLCExt : PXGraphExtension&lt;BaseBLC&gt;
{
    protected void DAC_RowUpdated(PXCache cache, PXRowUpdatedEventArgs e)
    {
        
    }

    protected void DAC_Field_FieldVerifying(PXCache sender, PXFieldVerifyingEventArgs e)
    {
        
    }

    protected void DAC_RowUpdated(PXCache cache, PXRowUpdatedEventArgs e, PXRowUpdated del)
    {
        if (del != null)
            del(sender, e);
    }

    protected void DAC_Field_FieldVerifying(PXCache sender, PXFieldVerifyingEventArgs e, PXFieldVerifying del)
    {
        if (del != null)
            del(sender, e);
    }
}

public class BaseBLCExtOnExt : PXGraphExtension&lt;BaseBLCExt, BaseBLC&gt;
{
    protected void DAC_RowUpdated(PXCache cache, PXRowUpdatedEventArgs e)
    {
        
    }

    protected void DAC_Field_FieldVerifying(PXCache sender, PXFieldVerifyingEventArgs e)
    {
        
    }

    protected void DAC_RowUpdated(PXCache cache, PXRowUpdatedEventArgs e, PXRowUpdated del)
    {
        if (del != null)
            del(sender, e);
    }

    protected void DAC_Field_FieldVerifying(PXCache sender, PXFieldVerifyingEventArgs e, PXFieldVerifying del)
    {
        if (del != null)
            del(sender, e);
    }
}</source>
In this case, the <tt>RowUpdated</tt> and <tt>FieldVerifying</tt> event handlers are invoked in the appropriate sequences, explained below.{br}

The following figure illustrates the order in which the <tt>RowUpdated</tt> events are invoked. [anchor|#fig_x2g_rjq_sv][anchor|#image_pn4_hlh_zm][image:CustomizationPlatform/images/CG_Platform_TO_Code_CS_GraphExtensions_Event_3.png|popup|The order of the RowUpdated event handler execution|420px]{br}

The following figure illustrates the order in which the <tt>FieldVerifying</tt> events are invoked.[anchor|#fig_y2g_rjq_sv][anchor|#image_l2n_klh_zm][image:CustomizationPlatform/images/CG_Platform_TO_Code_CS_GraphExtensions_Event_4.png|popup|The order of the FieldVerifying event handler invocation|420px]]]></column>
			<column name="PlainText"><![CDATA[Event Handlers The business logic associated with data modifications is implemented through event handlers.     Event handlers are methods that are executed when the  PXCache  objects of a     particular data access class (DAC) raise data manipulation events. Every business logic controller (BLC, also referred to as  graph ) instance has a     collection of event handlers for each type of data manipulation event. Every collection is     filled automatically with event subscribers that are declared within the base (original) BLC and     that meet the naming conventions of  Acumatica Framework event     handlers. With  Acumatica Customization             Platform, you can define new event handlers within BLC extensions. You can define an event handler in     two possible ways: You define the event handler in the same way as it is defined in the base BLC. As a result,      the event handler is added to the appropriate event handler collection. Depending on the event      type, the event handler is added to either the end of the collection or the start of it. When      the event occurs, all event handlers in the collection are executed, from the first to the last      one. You define the event handler with an additional parameter, which represents the delegate for      one of the following: The event handler with an additional parameter from the extension of the previous level,        if such an event handler exists. The first item in the collection of event handlers, if no handlers with additional        parameters declared within lower-level extensions exist. The collection contains event        handlers without the additional parameter from extensions discovered at all levels. In either case, you can decide whether to invoke the delegate. The         CacheAttached()  event handler declared in the highest-level BLC extension is       used to replace base DAC field attributes. Attributes attached to the         CacheAttached()  event handlers within the base BLC or its extensions are       attached to the  PXCache  object, each time completely replacing the previous       ones, from the base BLC to the highest extension discovered. Event Handler Added to the End of the Collection The following event handlers are added to the end of the collection: FieldUpdated(PXCache sender, PXFieldUpdatedEventArgs e) RowSelecting(PXCache sender, PXRowSelectingEventArgs e) RowSelected(PXCache sender, PXRowSelectedEventArgs e) RowInserted(PXCache sender, PXRowInsertedEventArgs e) RowUpdated(PXCache sender, PXRowUpdatedEventArgs e) RowDeleted(PXCache sender, PXRowDeletedEventArgs e) RowPersisted(PXCache sender, PXRowPersistedEventArgs e) The system executes event handlers from the base (original) event handler up to the highest     extension level (referred to as the  bubbling strategy ). The lower the BLC extension's     level of declaration, the earlier the event subscriber is called. The figure below illustrates     this principle. Event execution with the bubbling strategy  Event Handlers Added to the Beginning of the Collection The following event handlers are added to the beginning of the collection: FieldSelecting(PXCache sender, PXFieldSelectingEventArgs e) FieldDefaulting(PXCache sender, PXFieldDefaultingEventArgs e) FieldUpdating(PXCache sender, PXFieldUpdatingEventArgs e) FieldVerifying(PXCache sender, PXFieldVerifyingEventArgs e) RowInserting(PXCache sender, PXRowInsertingEventArgs e) RowUpdating(PXCache sender, PXRowUpdatingEventArgs e) RowDeleting(PXCache sender, PXRowDeletingEventArgs e) RowPersisting(PXCache sender, PXRowPersistingEventArgs e) CommandPreparing(PXCache sender, PXCommandPreparingEventArgs e) ExceptionHandling(PXCache sender, PXExceptionHandlingEventArgs e) Event handlers are added by the system to the beginning of the collection by using the       tunneling strategy . The system executes event handlers from the highest extension level     down to the base event handler. The higher the BLC extension's level of declaration, the earlier     the event subscriber is called. The figure below illustrates this principle. Event execution with the tunneling strategy Event Handlers with an Additional Parameter The event handler with an additional parameter replaces the base BLC event handler collection.     When the event is raised, the system calls the event handler with an additional parameter of the     highest-level BLC extension. The system passes a link to the event handler with an additional     parameter from the extension of the previous level, if such an event handler exists, or to the     first item in the event handler collection. You use a delegate as an additional parameter to     encapsulate the appropriate event handler. The  Acumatica Framework     provides the following delegates to encapsulate event handlers: PXFieldSelecting(PXCache sender, PXFieldSelectingEventArgs e) PXFieldDefaulting(PXCache sender, PXFieldDefaultingEventArgs e) PXFieldUpdating(PXCache sender, PXFieldUpdatingEventArgs e) PXFieldVerifying(PXCache sender, PXFieldVerifyingEventArgs e) PXFieldUpdated(PXCache sender, PXFieldUpdatedEventArgs e) PXRowSelecting(PXCache sender, PXRowSelectingEventArgs e) PXRowSelected(PXCache sender, PXRowSelectedEventArgs e) PXRowInserting(PXCache sender, PXRowInsertingEventArgs e) PXRowInserted(PXCache sender, PXRowInsertedEventArgs e) PXRowUpdating(PXCache sender, PXRowUpdatingEventArgs e) PXRowUpdated(PXCache sender, PXRowUpdatedEventArgs e) PXRowDeleting(PXCache sender, PXRowDeletingEventArgs e) PXRowDeleted(PXCache sender, PXRowDeletedEventArgs e) PXRowPersisting(PXCache sender, PXRowPersistingEventArgs e) PXRowPersisted(PXCache sender, PXRowPersistedEventArgs e) PXCommandPreparing(PXCache sender, PXCommandPreparingEventArgs e) PXExceptionHandling(PXCache sender, PXExceptionHandlingEventArgs e) For example, for the  FieldVerifying  event, the event handler with an     additional parameter looks like  FieldVerifying(PXCache sender, PXFieldVerifyingEventArgs      e, PXFieldVerifying del) . You can execute  del()  to invoke the event handler to which       del  points, or you can decide not to invoke it. When  del()      points to the base BLC event handler collection, its invocation causes the execution of the     whole collection. All other event handlers in the collection are invoked sequentially after the     first handler is executed. Suppose that you have declared event handlers as follows. 
public class BaseBLC : PXGraph<BaseBLC, DAC>
{
    protected void DAC_RowUpdated(PXCache cache, PXRowUpdatedEventArgs e)
    {
        
    }

    protected void DAC_Field_FieldVerifying(PXCache sender, PXFieldVerifyingEventArgs e)
    {
        
    }
}

public class BaseBLCExt : PXGraphExtension<BaseBLC>
{
    protected void DAC_RowUpdated(PXCache cache, PXRowUpdatedEventArgs e)
    {
        
    }

    protected void DAC_Field_FieldVerifying(PXCache sender, PXFieldVerifyingEventArgs e)
    {
        
    }

    protected void DAC_RowUpdated(PXCache cache, PXRowUpdatedEventArgs e, PXRowUpdated del)
    {
        if (del != null)
            del(sender, e);
    }

    protected void DAC_Field_FieldVerifying(PXCache sender, PXFieldVerifyingEventArgs e, PXFieldVerifying del)
    {
        if (del != null)
            del(sender, e);
    }
}

public class BaseBLCExtOnExt : PXGraphExtension<BaseBLCExt, BaseBLC>
{
    protected void DAC_RowUpdated(PXCache cache, PXRowUpdatedEventArgs e)
    {
        
    }

    protected void DAC_Field_FieldVerifying(PXCache sender, PXFieldVerifyingEventArgs e)
    {
        
    }

    protected void DAC_RowUpdated(PXCache cache, PXRowUpdatedEventArgs e, PXRowUpdated del)
    {
        if (del != null)
            del(sender, e);
    }

    protected void DAC_Field_FieldVerifying(PXCache sender, PXFieldVerifyingEventArgs e, PXFieldVerifying del)
    {
        if (del != null)
            del(sender, e);
    }
} In this case, the  RowUpdated  and  FieldVerifying  event     handlers are invoked in the appropriate sequences, explained below. The following figure illustrates the order in which the  RowUpdated  events     are invoked.  The order of the RowUpdated event handler execution The following figure illustrates the order in which the  FieldVerifying      events are invoked. The order of the FieldVerifying event handler invocation ]]></column>
		</row>
		<row PageID="b1faf924-c742-4eb2-9a88-0fe299cf6137" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="aa537b72-a550-0130-8443-f69aa6304fb2" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The platform provides a way to alter or extend the data views defined in a BLC.((({S:Warn}A ''data view'' is a <tt>PXSelect</tt> BQL expression declared in a BLC for accessing and manipulating data. A data view may contain a delegate, which is an optional graph method that executes when the data view is requested. Every data view is represented by the <tt>PXView</tt> object and placed in the ''Views'' collection of the appropriate BLC. To construct an instance of the <tt>PXView</tt> class, you use a <tt>PXSelect</tt> BQL expression and an optional delegate from the highest-level extension discovered.
))){br}

Suppose that you have declared the <tt>Objects</tt> data view within the base BLC, as shown below.<source lang="csharp">
 public class BaseBLC : PXGraph&lt;BaseBLC, DAC&gt;
{
    public PXSelect&lt;DAC&gt; Objects;
}</source>
You can alter a data view within a BLC extension in the following ways:[anchor|#ul_ynz_d5w_vk]
*By altering the data view within a BLC extension. A data view that is redeclared within a BLC extension replaces the base data view in the ''Views'' collection of the BLC instance. Consider the following example of a first-level BLC extension.<source lang="csharp">
public class BaseBLCExt : PXGraphExtension&lt;BaseBLC&gt;
{
    public PXSelectOrderBy&lt;DAC, 
               OrderBy&lt;Asc&lt;DAC.field&gt;&gt;&gt; Objects;
}</source>
*:The ''Views'' collection of a BLC instance contains the <tt>PXView</tt> object, which uses the <tt>Objects</tt> data view declared within the first-level extension, instead of the data view declared within the base BLC.
*:((({S:Warn}A data view redeclared within a BLC extension completely replaces the base data view within the ''Views'' collection of a BLC instance, including all attributes attached to the data view declared within the base BLC. You can either attach the same set of attributes to the data view or completely redeclare the attributes.
)))
*By declaring or altering the data view delegate in a BLC extension. The new delegate is attached to the corresponding data view. Consider the following example of a second-level BLC extension.<source lang="csharp">
 public class BaseBLCExtOnExt : PXGraphExtension&lt;BaseBLCExt, BaseBLC&gt;
{
    protected IEnumerable objects()
    {
        return PXSelect&lt;DAC&gt;.Select(Base);
    }
}</source>
*:The ''Views'' collection of a BLC instance contains the <tt>PXView</tt> object, which uses the <tt>Objects</tt> data view declared within the first-level extension, with the <tt>objects()</tt> delegate declared within the second-level extension (see the screenshot below).[anchor|#image_p41_p21_zm][image:CustomizationPlatform/images/CG_Platform_TO_Code_GraphExtensions_DV_1.png|popup|The interaction among the levels of a BLC extension|420px]
*:To query a data view declared within the base BLC or a lower-level extension from the data view delegate, you should redeclare the data view within a BLC extension. You do not need to redeclare a data member when it is not meant to be used from the data view delegate. Consider the following example of a second-level BLC extension.<source lang="csharp">public class BaseBLCExtOnExt : PXGraphExtension&lt;BaseBLCExt, BaseBLC&gt;
{
    protected IEnumerable objects()
    {
        return Base.Objects.Select();
    }
}</source>
*:The new delegate queries the data view declared within the base BLC. Having redeclared the data view within the first-level extension, you prevent the data view execution from an infinite loop (see the following screenshot).[anchor|#image_cmy_4f1_zm][image:CustomizationPlatform/images/CG_Platform_TO_Code_GraphExtensions_DV_2.png|popup|The view of the base BLC from the second-level delegate|420px]
*:((({S:Warn}If a data view declared within the base BLC contains a delegate, this delegate also gets invoked when the data view is queried from the new delegate (see the following figure).
)))[anchor|#image_j2v_hg1_zm][image:CustomizationPlatform/images/CG_Platform_TO_Code_GraphExtensions_DV_3.png|popup|The view with the delegate of the base BLC from the second-level delegate|420px]
]]></column>
			<column name="PlainText"><![CDATA[Customization of a Data View The platform provides a way to alter or extend the data views defined in a BLC. A  data                     view  is a  PXSelect  BQL expression declared in a BLC for                 accessing and manipulating data. A data view may contain a delegate, which is an                 optional graph method that executes when the data view is requested. Every data view                 is represented by the  PXView  object and placed in the                      Views  collection of the appropriate BLC. To construct an instance of the                      PXView  class, you use a  PXSelect  BQL                 expression and an optional delegate from the highest-level extension                 discovered. Suppose that you have declared the  Objects  data view within the base BLC, as    shown below. 
 public class BaseBLC : PXGraph<BaseBLC, DAC>
{
    public PXSelect<DAC> Objects;
} You can alter a data view within a BLC extension in the following ways: By altering the data view within a BLC extension. A data view that is redeclared within a BLC                 extension replaces the base data view in the  Views  collection of the BLC                 instance. Consider the following example of a first-level BLC                     extension. 
public class BaseBLCExt : PXGraphExtension<BaseBLC>
{
    public PXSelectOrderBy<DAC, 
               OrderBy<Asc<DAC.field>>> Objects;
} The                          Views  collection of a BLC instance contains the                          PXView  object, which uses the  Objects                      data view declared within the first-level extension, instead of the data view                     declared within the base BLC. A data view redeclared within a BLC                     extension completely replaces the base data view within the  Views                      collection of a BLC instance, including all attributes attached to the data view                     declared within the base BLC. You can either attach the same set of attributes                     to the data view or completely redeclare the attributes. By declaring or altering the data view delegate in a BLC extension. The new delegate is                 attached to the corresponding data view. Consider the following example of a                 second-level BLC                     extension. 
 public class BaseBLCExtOnExt : PXGraphExtension<BaseBLCExt, BaseBLC>
{
    protected IEnumerable objects()
    {
        return PXSelect<DAC>.Select(Base);
    }
} The                          Views  collection of a BLC instance contains the                          PXView  object, which uses the  Objects                      data view declared within the first-level extension, with the                          objects()  delegate declared within the second-level                     extension (see the screenshot below). The interaction among the levels of a BLC extension To query a data view declared within the base BLC or a lower-level                     extension from the data view delegate, you should redeclare the data view within                     a BLC extension. You do not need to redeclare a data member when it is not meant                     to be used from the data view delegate. Consider the following example of a                     second-level BLC                     extension. public class BaseBLCExtOnExt : PXGraphExtension<BaseBLCExt, BaseBLC>
{
    protected IEnumerable objects()
    {
        return Base.Objects.Select();
    }
} The                     new delegate queries the data view declared within the base BLC. Having                     redeclared the data view within the first-level extension, you prevent the data                     view execution from an infinite loop (see the following screenshot). The view of the base BLC from the second-level delegate If a data view declared within the base BLC contains a delegate, this                     delegate also gets invoked when the data view is queried from the new delegate                     (see the following figure). The view with the delegate of the base BLC from the second-level                         delegate ]]></column>
		</row>
		<row PageID="828d4d7a-597c-4fc6-896b-b6bb1b88266f" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="ce11ef0e-cf9b-6138-527e-0cbf442e0a02" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The platform provides a way to alter or extend an action defined in a business logic controller (BLC, also referred as ''graph'').((({S:Warn}An ''action'' is a BLC member of the <tt>PXAction</tt> type. An action always has the delegate defined. Every action is represented by the <tt>PXAction</tt> object and placed in the ''Actions'' collection of the appropriate BLC. To construct an instance of the <tt>PXAction</tt> class, you use a BLC member of the <tt>PXAction</tt> type and a delegate from the highest-level extension discovered.
))){br}

Suppose that you have declared the <tt>Objects</tt> data view and the <tt>ValidateObjects</tt> action within the base BLC, as shown below.<source lang="csharp">
 public class BaseBLC : PXGraph&lt;BaseBLC, DAC&gt;
{
    public PXSelect&lt;DAC&gt; Objects;
 
    public PXAction&lt;DAC&gt; ValidateObjects;
    [PXButton]
    [PXUIField(DisplayName = "Validate Objects")]
    protected virtual void validateObjects()
    {
    }
}</source>{br}

You can alter actions within BLC extensions in the following ways:[anchor|#ul_fpc_glt_ym][anchor|#li_wxh_phh_zm]
*By overriding action attributes within a BLC extension.
*:To override action attributes in a BLC extension, you should declare both the BLC member of the <tt>PXAction</tt> type and the delegate. You should attach a new set of attributes to the action delegate. Also, you need to invoke the <tt>Press</tt> method on the base BLC action. Having redeclared the member of {{PXAction<>}}, you prevent the action delegate execution from an infinite loop. Consider the following example of a first-level BLC extension.<source lang="csharp">
 public class BaseBLCExt : PXGraphExtension&lt;BaseBLC&gt;
{
    public PXAction&lt;DAC&gt; ValidateObjects;
    [PXButton]
    [PXUIField(DisplayName = "Validate All Objects")]
    protected void validateObjects()
    {
        Base.ValidateObjects.Press();
    }
}</source>
*:The ''Actions'' collection of a BLC instance contains the <tt>ValidateObjects</tt> action, which consists of the {{PXAction}} type member and the delegate, both of which were declared within the first-level extension (see the following figure).
*:((({S:Warn}When overriding an action delegate within a BLC extension, you completely redeclare the attributes attached to the action. Every action delegate must have <tt>PXButtonAttribute</tt> (or the derived attribute) and <tt>PXUIFieldAttribute</tt> attached.
)))[anchor|#image_l5f_yg1_zm][image:CustomizationPlatform/images/CG_Platform_TO_Code_GraphExtensions_Action_1.png|popup|The interaction among the first-level and base actions|420px]
*By overriding the action delegate within the BLC extension. 
*:The new delegate is used by the appropriate action. Consider the following example of a second-level BLC extension.<source lang="csharp">
 public class BaseBLCExtOnExt : PXGraphExtension&lt;BaseBLCExt, BaseBLC&gt;
{
    [PXButton]
    [PXUIField(DisplayName = "Validate Objects")]
    protected void validateObjects()
    {
    }
}</source>
*:The ''Actions'' collection of a BLC instance contains the <tt>ValidateObjects</tt> action, which consists of the {{PXAction<>}} type member declared within the first-level extension and the delegate declared within the second-level extension. To use an action declared within the base BLC or the lower-level extension from the action delegate, you should redeclare the action within a BLC extension. You do not need to redeclare an action when it is not meant to be used from the action delegate.[anchor|#image_hs2_n31_zm][image:CustomizationPlatform/images/CG_Platform_TO_Code_GraphExtensions_Action_2.png|popup|The case when you don&rsquo;t need to redeclare an action|420px]
*:((({S:Warn}To modify the same member of the base BLC or any BLC extension, you should use extensions of higher levels.
)))
]]></column>
			<column name="PlainText"><![CDATA[Customization of an Action The platform provides a way to alter or extend an action defined in a business logic controller       (BLC, also referred as  graph ). An  action  is a BLC member of the            PXAction  type. An action always has the delegate defined. Every action         is represented by the  PXAction  object and placed in the  Actions          collection of the appropriate BLC. To construct an instance of the            PXAction  class, you use a BLC member of the  PXAction          type and a delegate from the highest-level extension discovered. Suppose that you have declared the  Objects  data view and the          ValidateObjects  action within the base BLC, as shown       below. 
 public class BaseBLC : PXGraph<BaseBLC, DAC>
{
    public PXSelect<DAC> Objects;
 
    public PXAction<DAC> ValidateObjects;
    [PXButton]
    [PXUIField(DisplayName = "Validate Objects")]
    protected virtual void validateObjects()
    {
    }
} You can alter actions within BLC extensions in the following ways: By overriding action attributes within a BLC extension. To override           action attributes in a BLC extension, you should declare both the BLC member of the              PXAction  type and the delegate. You should attach a new set of           attributes to the action delegate. Also, you need to invoke the  Press            method on the base BLC action. Having redeclared the member of              PXAction<> , you prevent the action delegate execution from an           infinite loop. Consider the following example of a first-level BLC           extension. 
 public class BaseBLCExt : PXGraphExtension<BaseBLC>
{
    public PXAction<DAC> ValidateObjects;
    [PXButton]
    [PXUIField(DisplayName = "Validate All Objects")]
    protected void validateObjects()
    {
        Base.ValidateObjects.Press();
    }
} The              Actions  collection of a BLC instance contains the              ValidateObjects  action, which consists of the              PXAction  type member and the delegate, both of which were declared           within the first-level extension (see the following figure). When overriding an           action delegate within a BLC extension, you completely redeclare the attributes attached           to the action. Every action delegate must have  PXButtonAttribute  (or           the derived attribute) and  PXUIFieldAttribute  attached. The interaction among the first-level and base actions By overriding the action delegate within the BLC extension.  The new delegate is used by           the appropriate action. Consider the following example of a second-level BLC           extension. 
 public class BaseBLCExtOnExt : PXGraphExtension<BaseBLCExt, BaseBLC>
{
    [PXButton]
    [PXUIField(DisplayName = "Validate Objects")]
    protected void validateObjects()
    {
    }
} The              Actions  collection of a BLC instance contains the              ValidateObjects  action, which consists of the              PXAction<>  type member declared within the first-level extension and           the delegate declared within the second-level extension. To use an action declared within           the base BLC or the lower-level extension from the action delegate, you should redeclare           the action within a BLC extension. You do not need to redeclare an action when it is not           meant to be used from the action delegate. The case when you don't need to redeclare an action To modify the same member of the base BLC or any BLC extension, you should use           extensions of higher levels. ]]></column>
		</row>
		<row PageID="635c830e-4617-4d5c-9fa5-035952311aa9" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="a876b89f-c645-a3fe-bd5c-278248f0ab23" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The platform provides a way to override a method of a BLC.{br}

Suppose that you need to override the <tt>Persist</tt> method of the <tt>BaseBLC</tt> class, which is defined in the code below.<source lang="csharp">
public class BaseBLC : PXGraph&lt;BaseBLC&gt;
{
    public virtual void Persist()
    {
        ...
    }
}</source>{br}

You can override the method within a BLC extension as follows.<source lang="csharp">
public class BaseBLC_Extension : PXGraphExtension&lt;BaseBLC&gt;
{
    public delegate void PersistDelegate();
    [PXOverride]
    public void Persist(PersistDelegate baseMethod)
    {
        ...
        baseMethod();        
        ...
    }
}</source>{br}

The graph extension should include the declaration of the base method delegate, the <tt>PXOverride</tt> attribute, and the overridden method, which invokes the base method delegate, as the code above shows.{br}

Because the <tt>PXOverride</tt> attribute on the declaration of the method is included in the graph extension, it forces the system to override the original method in the graph instance. Otherwise, the overridden method will never be invoked. ]]></column>
			<column name="PlainText"><![CDATA[Override of a Method The platform provides a way to override a method of a BLC. Suppose that you need to override the  Persist  method of the                  BaseBLC  class, which is defined in the code             below. 
public class BaseBLC : PXGraph<BaseBLC>
{
    public virtual void Persist()
    {
        ...
    }
} You can override the method within a BLC extension as             follows. 
public class BaseBLC_Extension : PXGraphExtension<BaseBLC>
{
    public delegate void PersistDelegate();
    [PXOverride]
    public void Persist(PersistDelegate baseMethod)
    {
        ...
        baseMethod();        
        ...
    }
} The graph extension should include the declaration of the base method delegate, the                  PXOverride  attribute, and the overridden method, which invokes             the base method delegate, as the code above shows. Because  the  PXOverride  attribute on the declaration of the method is             included in the graph extension, it forces the system to override the original method in             the graph instance. Otherwise, the overridden method will never be invoked.  ]]></column>
		</row>
		<row PageID="d0634e8a-3a21-454c-963a-6741e7ec8390" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="ab2f19a3-d003-26aa-bdbe-cbc46c90ff93" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can override one attribute or multiple attributes of a DAC field for a particular screen without changing the existing behavior of the attribute or attributes for all other screens.{br}

You can do the following to override the attributes of a DAC field:[anchor|#_9e35d99e-97d6-4960-aed0-e6324a3bdf9b]
*Replace the whole set of attributes
*Append an attribute
*Override a single property of an attribute
*Replace one attribute with another
{br}

To override attributes, you should declare a {{CacheAttached}} event handler in the graph that corresponds to the screen for which you want to change the DAC field&rsquo;s behavior. With the declared {{CacheAttached}} event handler, you use special attributes, depending on what you want to do with the original attributes, as described in the following sections.{br}{TOC}[anchor|#_90c28aea-e9c1-4407-b3f8-3b3691b41679]
==Replacing the Whole Set of Attributes==
To override all attributes at once, you should only declare a {{CacheAttached}} event handler in the graph.{br}

Suppose that the original DAC field attributes are declared as shown in the following code.{{{{public class ARInvoice : IBqlTable
{    
    [PXDBDecimal(4)]    
    [PXDefault(TypeCode.Decimal, "0.0")]    
    [PXUIField(DisplayName = "Commission amount")]    
    public virtual Decimal? CommAmt     
    {         
        get;         
        set;     
    }
}
}}}}{br}

To override a DAC field by using the {{CacheAttached}} event handler, in the graph corresponding to the screen whose behavior you want to change, declare the {{CacheAttached}} event handler for the field. The event handler must be named according to the standard conventions for naming graph events that is described in the [HelpRoot_Dev_Platform\BL__con_Event_Handler|Event Handlers] topic.{br}

For the {{CommAmt}} field, the code for the event handler looks like the following.<source lang="csharp">[PXDBDecimal(4)]
[PXDefault(TypeCode.Decimal, "0.0")]
[PXUIField(DisplayName = "Commission Amount")]
[PXAdditionalAttribute(NecessaryProperty = true)]
protected virtual void ARInvoice_CommAmt_CacheAttached(PXCache sender) { }</source>{br}

In this example, we added the {{PXAdditionalAttribute}} to the list of the {{CommAmt}} field attributes.{br}

The set of attributes on the {{CacheAttached}} handler redefines the whole set of attributes placed on the specified DAC field. This results in undesired copying of all unmodified attributes, and the DAC and the graph no longer act synchronously. Therefore, we do not recommend using this method unless you intend to override all attributes of a field.[anchor|#_c3fcabec-1ce4-4939-a5d3-efa39b7b904f]
==Appending an Attribute==
 Acumatica Framework provides a special attribute called [https://help.acumatica.com/Main?ScreenId=ShowWiki&pageid=b78b0a53-b9db-0693-66fa-7d2b432b9f38|PXMergeAttributesAttribute]. When placed on a {{CacheAttached}} event handler for the corresponding DAC field, this attribute allows gives you the ability to reuse the existing attributes of a DAC field.{br}

To append an attribute, you declare the {{CacheAttached}} event handler with the {{PXMergeAttributes}} attribute and the new attribute (or attributes), as shown in the following code.<source lang="csharp">[PXMergeAttributes(Method = MergeMethod.Append)]
[PXAdditionalAttribute(NecessaryProperty = true)]
protected virtual void ARInvoice_CommAmt_CacheAttached(PXCache sender) { }</source>
This example works similarly to the previous one: It adds the {{PXAdditionalAttribute}} attribute to the list of the {{CommAmt}} field attributes, but without code duplication.[anchor|#_2f0c523f-b550-4082-9ce5-38f460c69ceb]
==Overriding a Single Property of an Attribute==
 Acumatica Framework provides a special attribute called [https://help.acumatica.com/Main?ScreenId=ShowWiki&pageid=29049e2a-2e62-71c6-2f40-513894226781|PXCustomizeBaseAttribute]. When placed on a {{CacheAttached}} event handler for the corresponding DAC field, this attribute gives you the ability to redefine a single property of an attribute.{br}

For example, suppose that you need to change the UI display name from '''Commission Amount''' to '''Base Currency Commission''' for only one screen. The code should look like the following.{{{{[PXMergeAttributes(Method = MergeMethod.Append)]
[PXCustomizeBaseAttribute(typeof(PXUIField), 
  nameof(PXUIFieldAttribute.DisplayName), "Base Currency Commission")]
protected virtual void ARInvoice_CommAmt_CacheAttached(PXCache sender) { }
}}}}
This example reuses the existing attributes by using the {{PXMergeAttributes}} attribute and redefines the {{PXUIFieldAttribute}} attribute by using the {{PXCustomizeBaseAttribute}} attribute.[anchor|#_7239f142-936f-476e-a117-8aeaeeac7cdd]
==Replacing One Attribute with Another ==
 Acumatica Framework provides a special attribute called [https://help.acumatica.com/Main?ScreenId=ShowWiki&pageid=de0837e1-1429-3b5e-8ea2-4c5cf0d2033f|PXRemoveBaseAttribute]. When placed on a {{CacheAttached}} event handler for the corresponding DAC field, this attribute gives you the ability to remove the specified attribute.{br}

For example, suppose that you need to replace {{PXDefaultAttribute}} with {{PXDBDefaultAttribute}} for only one screen. Further suppose that the original field declaration looks the one shown in the following code.{{{{[Site(DisplayName = "Warehouse ID", 
  DescriptionField = typeof(INSite.descr))]
[PXDefault(typeof(SOShipment.siteID), 
  PersistingCheck = PXPersistingCheck.Nothing)]
public virtual Int32? SiteID { get; set; }
}}}}
Then replacing {{PXDefaultAttribute}} with {{PXDBDefaultAttribute}} looks as shown in the following code.{{{{[PXMergeAttributes(Method = MergeMethod.Append)]
[PXRemoveBaseAttribute(typeof(PXDefaultAttribute))]
[PXDBDefault(typeof(SOShipment.siteID), 
  PersistingCheck = PXPersistingCheck.Nothing)]
protected void SOOrderShipment_SiteID_CacheAttached(PXCache sender) { }
}}}}
In this example, all existing attributes are reused by the {{PXMergeAttributes}} attribute, the {{PXDefaultAttribute}} is removed by the {{PXRemoveBaseAttribute}} attribute, and the new {{PXDBDefault}} attribute is declared.]]></column>
			<column name="PlainText"><![CDATA[Overriding Attributes of a DAC field in the Graph You can override one attribute or multiple attributes of a DAC field for a particular         screen without changing the existing behavior of the attribute or attributes for all other         screens. You can do the following to override the attributes of a DAC field: Replace the whole set of attributes Append an attribute Override a single property of an attribute Replace one attribute with another To override attributes, you should declare a  CacheAttached  event handler         in the graph that corresponds to the screen for which you want to change the DAC field's         behavior. With the declared  CacheAttached  event         handler ,          you use special         attributes ,          depending on what you want to do with the original attributes, as described in the following         sections. Replacing the Whole Set of Attributes To override all attributes at once, you should only declare a            CacheAttached  event handler in the graph. Suppose that the original DAC field attributes are declared as shown in the following         code. public class ARInvoice : IBqlTable
{    
    [PXDBDecimal(4)]    
    [PXDefault(TypeCode.Decimal, "0.0")]    
    [PXUIField(DisplayName = "Commission amount")]    
    public virtual Decimal? CommAmt     
    {         
        get;         
        set;     
    }
} To override a DAC field by using the  CacheAttached  event handler, in the         graph corresponding to the screen whose behavior you want to change, declare the            CacheAttached  event handler for the field. The event handler must be         named according to the standard conventions for naming graph events that is described in the            Event Handlers topic. For the  CommAmt  field, the code for the event handler looks like the         following. [PXDBDecimal(4)]
[PXDefault(TypeCode.Decimal, "0.0")]
[PXUIField(DisplayName = "Commission Amount")]
[PXAdditionalAttribute(NecessaryProperty = true)]
protected virtual void ARInvoice_CommAmt_CacheAttached(PXCache sender) { } In this example, we added the  PXAdditionalAttribute  to the list of the            CommAmt  field attributes. The set of attributes on the  CacheAttached  handler redefines the whole set         of attributes placed on the specified DAC field.          T his         results in undesired copying of all unmodified attributes,          and          the DAC and the graph no longer act synchronously. Therefore, we do not recommend using this         method unless you intend to override all attributes  of a         field. Appending an Attribute  Acumatica Framework provides a special attribute called  PXMergeAttributesAttribute PXMergeAttributesAttribute. When placed on a            CacheAttached  event handler for the corresponding DAC field, this         attribute allows gives you the ability to reuse the existing attributes of a DAC field. To append an attribute, you declare the  CacheAttached  event handler with         the  PXMergeAttributes  attribute and the new attribute (or attributes), as         shown in the following code. [PXMergeAttributes(Method = MergeMethod.Append)]
[PXAdditionalAttribute(NecessaryProperty = true)]
protected virtual void ARInvoice_CommAmt_CacheAttached(PXCache sender) { } This example works similarly to the previous one: It adds the            PXAdditionalAttribute  attribute to the list of the            CommAmt  field         attributes ,          but without code duplication. Overriding a Single Property of an Attribute  Acumatica Framework provides a special attribute called  PXCustomizeBaseAttribute PXCustomizeBaseAttribute. When placed on a            CacheAttached  event handler for the corresponding DAC field, this         attribute gives you the ability to redefine a single property of an attribute. For example, suppose that you need to change the UI display name from            Commission           Amount  to            Base           Currency Commission  for only one screen. The code should look like the         following. [PXMergeAttributes(Method = MergeMethod.Append)]
[PXCustomizeBaseAttribute(typeof(PXUIField), 
  nameof(PXUIFieldAttribute.DisplayName), "Base Currency Commission")]
protected virtual void ARInvoice_CommAmt_CacheAttached(PXCache sender) { } This example reuses the existing attributes by using the  PXMergeAttributes          attribute and redefines the  PXUIFieldAttribute  attribute by using the            PXCustomizeBaseAttribute  attribute. Replacing One Attribute with Another   Acumatica Framework provides a special attribute called  PXRemoveBaseAttribute PXRemoveBaseAttribute. When placed on a            CacheAttached  event handler for the corresponding DAC field, this         attribute gives you the ability to remove the specified attribute. For example, suppose that you need to replace  PXDefaultAttribute  with            PXDBDefaultAttribute  for only one screen. Further suppose that the         original field declaration looks the one shown in the following code. [Site(DisplayName = "Warehouse ID", 
  DescriptionField = typeof(INSite.descr))]
[PXDefault(typeof(SOShipment.siteID), 
  PersistingCheck = PXPersistingCheck.Nothing)]
public virtual Int32? SiteID { get; set; } Then replacing  PXDefaultAttribute  with            PXDBDefaultAttribute  looks as shown in the following code. [PXMergeAttributes(Method = MergeMethod.Append)]
[PXRemoveBaseAttribute(typeof(PXDefaultAttribute))]
[PXDBDefault(typeof(SOShipment.siteID), 
  PersistingCheck = PXPersistingCheck.Nothing)]
protected void SOOrderShipment_SiteID_CacheAttached(PXCache sender) { } In this example, all existing attributes are reused by the            PXMergeAttributes  attribute, the  PXDefaultAttribute  is         removed by the  PXRemoveBaseAttribute  attribute, and the new            PXDBDefault  attribute is declared. ]]></column>
		</row>
		<row PageID="0f4b53d4-118b-403a-8a5b-076d35713e72" Language="en-US" PageRevisionID="1" PlainText="Run-Time Compilation If you have created an extension for a business logic controller or a data access class in a    customization project, during the project publication, the  Acumatica Customization             Platform stores the code of the class extension in a  .cs  file within the      App_RuntimeCode  folder of the website. At run time, the platform compiles the code in a separate library that is dynamically merged    with the original classes. Run-time compilation is used by default for the code of the  DAC     and  Code  project items. (See  Types of Items in a Customization Project for    details.) Publication of a customization updates the files in the  App_RuntimeCode     folder of the website. Unlike when the  Bin  folder is updated, update of    files in the  App_RuntimeCode  folder doesn't cause the application domain to    restart. (See  Performing the Publication Process for details.) " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="48c0fb5c-d362-8d1b-6edc-bbc30c5271ce" RecordSourceID="22377">
			<column name="Content"><![CDATA[
If you have created an extension for a business logic controller or a data access class in a customization project, during the project publication, the Acumatica Customization             Platform stores the code of the class extension in a <tt>.cs</tt> file within the <tt>App&#95;RuntimeCode</tt> folder of the website.{br}

At run time, the platform compiles the code in a separate library that is dynamically merged with the original classes. Run-time compilation is used by default for the code of the ''DAC'' and ''Code'' project items. (See [HelpRoot_Dev_Customization\CG_Platform_Project_ItemTypes|Types of Items in a Customization Project] for details.){br}

Publication of a customization updates the files in the <tt>App&#95;RuntimeCode</tt> folder of the website. Unlike when the <tt>Bin</tt> folder is updated, update of files in the <tt>App&#95;RuntimeCode</tt> folder doesn&rsquo;t cause the application domain to restart. (See [HelpRoot_Dev_Customization\CG_GL_Projects_Publishing_Understanding|Performing the Publication Process] for details.)]]></column>
		</row>
		<row PageID="a3278167-2285-4c92-8404-367952b42d9e" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="8e7ee493-5c8c-c454-c65f-bcaee1c3cfa7" RecordSourceID="22377">
			<column name="Content"><![CDATA[
An extension library is a Microsoft Visual Studio project that contains customization code and can be individually developed and tested. {br}

To move your code from your customization project to an extension library, you should first create an extension library and then move desired ''Code'' and ''DAC'' items to the extension library. After that you can develop your extension library in Visual Studio. See the following topics for details: [anchor|#_af4c5ab8-3ace-44a2-94dd-07e3f421b7b9]
*[HelpRoot_Dev_Customization\cg_platform_tocreateextensionlib|To Create an Extension Library]
*[HelpRoot_Dev_Customization\cg_platform_toconverdacto|To Convert a DAC Item to an Extension Library]
*[HelpRoot_Dev_Customization\CG_GL_Items_Code_MovingToLib|To Move a Code Item to the Extension Library]
{br}

If you need to deploy the customization code of an extension library to another system, you have to add the library to a customization project as a ''File'' item to include it in a customization package. See [HelpRoot_Dev_Customization\CG_GL_Items_Files_Adding|To Add a Custom File to a Project] for details.[anchor|#_32b4296f-dac7-4c89-833b-216ec8bd80ef]{br}

An extension library <tt>.dll</tt> file must be located in the <tt>Bin</tt> folder of the website. At run time during the website initialization, all the <tt>.dll</tt> files of the folder are loaded into the server memory for use by the Acumatica ERP application. Therefore, all the code extensions included in a library are accessible from the application.[anchor|#_358f8124-0290-497f-b386-0454a08bee55]{br}

During the first initialization of a base class, the Acumatica Customization             Platform automatically discovers an extension for the class in the memory and applies the customization by replacing the base class with the merged result of the base class and the discovered extension.{br}

[anchor|#fig_ktl_cdk_xt][anchor|#image_d44_bzl_jw][image:CustomizationPlatform/images/CG_Platform_TO_Code_CS_ExtLibrary.png|Actual approach to the use of an extension library for a customization|405px]{br}

The use of extension libraries that are precompiled provides a measure of protection for your source code and intellectual property.]]></column>
			<column name="PlainText"><![CDATA[Extension     Library An extension library is a Microsoft Visual Studio project that contains customization code and    can be individually developed and tested.  To move your code from your customization project to an extension library, you should first       create an extension library and then move desired          Code        and          DAC        items to the extension library. After that you can develop your extension library in Visual       Studio. See the following topics for details:  To Create an Extension LibraryTo Convert a DAC Item to an Extension LibraryTo Move a Code Item to the Extension LibraryIf you need to deploy the customization code of an extension library to another system, you       have to add the library to a customization project as a  File  item to include it in a       customization package. See  To Add a Custom File to a Project for details. An extension library  .dll  file must be located in the  Bin  folder of the website. At run time during the website initialization, all the  .dll  files of the folder are loaded into the server memory for use by the  Acumatica ERP application. Therefore, all the code extensions included in a library are accessible from the application. During the first initialization of a base class, the                  Acumatica Customization             Platform automatically discovers an extension for the class in the memory and applies the             customization by replacing the base class with the merged result of the base class and             the discovered extension. Actual approach to the use of an extension library for a customization The use of extension libraries that are precompiled provides a measure of protection for your    source code and intellectual property. ]]></column>
		</row>
		<row PageID="6eef9fa0-ab15-4c9f-8376-3c4f1b4118a4" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="258ef10d-0356-80f6-7531-d45d517e7fc7" RecordSourceID="22377">
			<column name="Content"><![CDATA[
While you are developing source code for a customization task, you can either keep the code in the customization project as ''DAC'' and ''Code'' items or move the code to an extension library and include the library in the project as a ''File'' item.{br}

''DAC'' and ''Code'' items are saved in the database, and, if the customization project is published, in the files located in the <tt>App&#95;RuntimeCode</tt> folder of the website. Acumatica Customization             Platform compiles all the code located in this folder at run time.{br}

We recommend that you keep the source code in the customization project only if the customization is elementary, such as if the code contains an event handler for a control on a form. When you work with a code item, it is easy to view the code of the applied customization directly in the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_CodeEditor|Code Editor] without Microsoft Visual Studio. However, if you are solving a complex customization task, it is generally better to develop the solution code in an extension library by using Visual Studio.{br}

You can use Visual Studio to develop a ''Code'' item as well as code in an extension library. But the ''IntelliSense'' feature in Visual Studio is not available for the source code of a ''Code'' item if the code either uses custom fields or invokes members of class extensions defined in other ''Code'' and ''DAC'' items.{br}

You can later customize deployed extensions for the end user by means of code extensions. Therefore, if the customization is compiled to an extension library, more than one customization can be applied to a single Acumatica ERP form.((({S:Warn}If you have a custom DAC or a DAC extension in one customization and an extension of this custom DAC or a higher-level DAC extension in another customization, a publication of the second customization will fail if the customizations are published in the wrong order. To resolve the issue, convert the DAC extension in the second customization to an extension library. With this approach, no code will be generated during publication, and the order of publication is not important. See [HelpRoot_Dev_Customization\cg_platform_toconverdacto|To Convert a DAC Item to an Extension Library] for details.
))){br}

The following table shows the differences in the use of the code in ''DAC'' and ''Code'' items and in an extension library.[anchor|#table_fcb_gxy_lw]
{| class="checklist" | width="100%" 
|- 
!width="33%" ! 
!width="33%" ! Code in ''DAC'' and ''Code'' items
!width="33%" ! Code in an Extension Library
|- 
| Best for:
| Quick start of a customization 
| Development of a customization project when more than one developer is involved
|- 
| Primary storage:
| Database
| File system
|- 
| Location within the website folder:
| <tt>App&#95;RuntimeCode</tt>
| <tt>Bin</tt>
|- 
| Intellectual property protection:
| No—the source code is open in the deployment package
| Yes—the source code is not provided in the deployment package
|- 
| Run-time compilation without the application domain being restarted:
| Yes
| No
|- 
| Editor:
| [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_CodeEditor|Code Editor], Visual Studio
| Visual Studio
|- 
| ''IntelliSense'' feature in Visual Studio:
| No
| Yes
|- 
| Debugging:
| Yes
| Yes
|- 
| Integration with a version control system:
| Yes
| Yes
|- 
| Additional:
| Can be moved to an extension library when needed
| 
|}{br}

To make a decision about how to work with the code, you should consider the following questions:[anchor|#ul_kqc_ltt_4t]
*How much code will be in the customization project?
*Is there a need for replicability of the customization?
*How many developers will take part in coding?
*Do you need to open the source code in the production environment?
{br}

We recommend that you use an extension library if any of the following conditions is met:[anchor|#ul_zf3_j5t_4t]
*You intend to have more than five class extensions for business logic controllers.
*The customization will be deployed on more than one system.
*The customization code will be developed by a team that needs to use a version control system.
*You have a reason to protect the intellectual property of the source code of the solution.
]]></column>
			<column name="PlainText"><![CDATA[Extension Library (DLL) Versus Code in a Customization Project While you are developing source code for a customization task, you can either keep the code in    the customization project as  DAC  and  Code  items or move the code to an extension    library and include the library in the project as a  File  item. DAC  and  Code  items are saved in the database, and, if the customization project    is published, in the files located in the  App_RuntimeCode  folder of the    website.  Acumatica Customization             Platform compiles all the code located in this folder at run time. We recommend that you keep the source code in the customization project only if the    customization is elementary, such as if the code contains an event handler for a control on a    form. When you work with a code item, it is easy to view the code of the applied customization    directly in the  Code Editor without Microsoft Visual    Studio. However, if you are solving a complex customization task, it is generally better to    develop the solution code in an extension library by using Visual Studio. You can use Visual Studio to develop a  Code  item as well as code in an extension    library. But the  IntelliSense  feature in Visual Studio is not available for the source    code of a  Code  item if the code either uses custom fields or invokes members of class    extensions defined in other  Code  and  DAC  items. You can later customize deployed extensions for the end user by means of code extensions.    Therefore, if the customization is compiled to an extension library, more than one customization    can be applied to a single  Acumatica ERP     form. If you have a custom DAC or a DAC extension in one customization and an extension of     this custom DAC or a higher-level DAC extension in another customization, a publication of the     second customization will fail if the customizations are published in the wrong order. To     resolve the issue, convert the DAC extension in the second customization to an extension     library. With this approach, no code will be generated during     publication ,      and the order of publication is not important. See  To Convert a DAC Item to an Extension Library     for details. The following table shows the differences in the use of the code in  DAC  and  Code     items and in an extension library. Code in  DAC  and  Code  items Code in an Extension Library Best for: Quick start of a customization  Development of a customization project when more than one developer is         involved Primary storage: Database File system Location within the website folder: App_RuntimeCode Bin Intellectual property protection: No—the source code is open in the deployment package Yes—the source code is not provided in the deployment package Run-time compilation without the application domain being restarted: Yes No Editor: Code Editor, Visual Studio Visual Studio IntelliSense  feature in Visual Studio: No Yes Debugging: Yes Yes Integration with a version control system: Yes Yes Additional: Can be moved to an extension library when needed To make a decision about how to work with the code, you should consider the following     questions: How much code will be in the customization project? Is there a need for replicability of the customization? How many developers will take part in coding? Do you need to open the source code in the production environment? We recommend that you use an extension library if any of the following conditions is met: You intend to have more than five class extensions for business logic controllers. The customization will be deployed on more than one system. The customization code will be developed by a team that needs to use a version control      system. You have a reason to protect the intellectual property of the source code of the      solution. ]]></column>
		</row>
		<row PageID="324bf7e9-4a40-4579-909e-ca6ca1554ad8" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="4623201e-77eb-8b76-84cc-163d107187a5" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The Acumatica Customization             Platform permits the following changes to the database in the scope of a customization project:[anchor|#ul_hjx_wkx_gq]
*[[#section_ant_3jc_nw|Creation of custom tables]
*[[#section_hgx_3jc_nw|Creation of custom columns in existing tables]
*[[#section_i4h_jjc_nw|Creation of views, indexes, and other database objects]
[anchor|#section_ant_3jc_nw]
==Creation of Custom Tables==
We recommend that you create a custom table in the database of your development environment by using a database administration tool, such as SQL Server Management Studio, and then import the table schema from the database to a customization project by using the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor]. The project keeps the schema in XML format. While publishing the customization project, the platform executes a special procedure to create the table by the schema, while meeting all the requirements of Acumatica ERP.[anchor|#section_hgx_3jc_nw]
==Creation of Custom Columns in Existing Tables==
To create a custom database-bound field, you add a column to the database table and declare the field in the extension of the base (original) DAC.{br}

The new column is appended to the original table by altering the table schema. When you create the database-bound field by using the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_DataClassEditor|Data Class Editor], the platform generates the DAC extension code for the new field and adds to the customization project the XML definition of the new column to be created in the database. To be able to create a UI control for the new field to display on a form, you have to publish the project to make the system create the column in the database table and compile the customization code. After the publication, you can add the control for the new field to the form by using the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_LayoutEditor|Screen Editor].[anchor|#section_i4h_jjc_nw]
==Creation of Views, Indexes, and Other Database Objects==[anchor|#_cfdb865b-1b65-4e6d-91ca-30702d201fde]
With the platform, you can add to a customization project an SQL script to be executed during the publication of the project. However, we recommend that you avoid doing this. ((({S:Hint}A possible result of a custom SQL script is the loss of the integrity and consistency of the application data.
)))If you do add a custom SQL script, you must adhere to the following requirements for the script:[anchor|#_ea745151-f1b9-427e-a52e-929b1880d491]
*Because Acumatica ERP supports multitenancy, you must create an SQL script that correctly creates a database object that properly specifies and uses the company mask.
*You must correctly specify the attributes for the script so that the script can be executed on the target database servers: MySQL Server, Microsoft SQL Server, or both. For details about attributes, see [HelpRoot_Dev_Customization\CG_GL_Items_DBScripts_Adding_Attr|Using the SQL Script Attributes].
]]></column>
			<column name="PlainText"><![CDATA[Changes in the Database Schema The  Acumatica Customization             Platform permits the following changes to the database in the scope of a customization project: Creation of custom tables Creation of custom tablesCreation of custom columns in existing tables Creation of custom columns in existing tablesCreation of views, indexes, and other database objects Creation of views, indexes, and other database objectsCreation of Custom Tables We recommend that you create a custom table in the database of your development environment         by using a database administration tool, such as SQL Server Management Studio, and then         import the table schema from the database to a customization project by using the   Customization Project                         Editor. The project keeps the schema in XML format. While         publishing the customization project, the platform executes a special procedure to create         the table by the schema, while meeting all the requirements of  Acumatica ERP. Creation of Custom Columns in Existing Tables To create a custom database-bound field, you add a column to the database table and declare         the field in the extension of the base (original) DAC. The new column is appended to the original table by altering the table schema. When you         create the database-bound field by using the  Data Class Editor, the platform generates the DAC         extension code for the new field and adds to the customization project the XML definition of         the new column to be created in the database. To be able to create a UI control for the new         field to display on a form, you have to publish the project to make the system create the         column in the database table and compile the customization code. After the publication, you         can add the control for the new field to the form by using the  Screen Editor. Creation of Views, Indexes, and Other Database Objects With the platform, you can add to a customization             project an SQL script to be executed during the publication of the project. However, we             recommend that you avoid doing this.  A possible result of a custom                 SQL script is the loss of the integrity and consistency of the application                 data. If you do add a custom SQL script, you must adhere to the following             requirements for the script: Because  Acumatica ERP supports multitenancy, you must create an SQL script that correctly creates a                     database object that properly specifies and uses the company mask. You must correctly specify the attributes for the script so that the script can                     be executed on the target database servers: MySQL Server, Microsoft SQL Server,                     or both. For details about attributes, see  Using the SQL Script Attributes. ]]></column>
		</row>
		<row PageID="3ef5784b-1602-4a04-b6b9-52b69c79fe91" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="3ae6cd2b-50ac-3348-de98-71120ba4c645" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The platform provides you the ability to execute custom processes within the instance of Acumatica ERP at the following times during the publication of a customization project:[anchor|#ul_gsr_2w2_1w]
*After website files are updated but before the website is restarted
*After the customization has been published and the website is restarted
{br}

To implement such processes, you can create a class derived from the <tt>CustomizationPlugin</tt> class, further referred to as the ''customization plug-in'', and override one or both of the following methods, which can be invoked at the end of the publication process:[anchor|#ul_j5b_cy2_1w]
*The {{OnPublished()}} method is executed right after website files are updated but before the website are restarted. This method is invoked only if run-time compilation is enabled. In a cluster environment, the method is invoked on each cluster node. By using this method, you can update any files within the website except the customization code files located in the <tt>/Bin</tt> folder. For example, you can set up your own UI styles and skins or log-in images. 
*The {{UpdateDatabase()}} method is executed after the customization is published and the website is restarted. In this method, for example, you can already manipulate data in the database by using the business logic implemented in the customization. For example, you can develop source code to import data by using a scenario included in the customization.
{br}

In a customization project, you can include multiple classes derived from the <tt>CustomizationPlugin</tt> class.((({S:Warn}The platform does not provide you the ability to set the order of execution of customization plug-ins in a published customization.
)))For details about how to create a class derived from the <tt>CustomizationPlugin</tt> class, see [HelpRoot_Dev_Customization\CG_GL_Items_Code_AddingPlugIn|To Add a Customization Plug-In to a Project].]]></column>
			<column name="PlainText"><![CDATA[Custom Processes During Publication of a Customization The platform provides you the ability to execute custom processes within the instance of  Acumatica ERP at the following times during the publication of a customization project: After website files are updated but before the website is restarted After the customization has been published and the website is restarted To implement such processes, you can create a class derived from the          CustomizationPlugin  class, further referred to as the  customization         plug-in , and override one or both of the following methods, which can be invoked at the       end of the publication process: The  OnPublished()  method is executed right after website files are           updated but before the website are restarted. This method is invoked only if run-time           compilation is enabled. In a cluster environment, the method is invoked on each cluster           node. By using this method, you can update any files within the website except the           customization code files located in the  /Bin  folder. For example, you           can set up your own UI styles and skins or log-in images.  The  UpdateDatabase()  method is executed after the customization is           published and the website is restarted. In this method, for example, you can already           manipulate data in the database by using the business logic implemented in the           customization. For example, you can develop source code to import data by using a scenario           included in the customization. In a customization project, you can include multiple classes derived from the          CustomizationPlugin  class. The platform does not provide you the         ability to set the order of execution of customization plug-ins in a published         customization. For details about how to create a class derived from the          CustomizationPlugin  class, see  To Add a Customization Plug-In to a Project. ]]></column>
		</row>
		<row PageID="03b07c52-2ba7-47f0-9b91-00b36aaf21aa" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="2e60900c-3776-7a4f-88ca-340284fe847a" RecordSourceID="22377">
			<column name="Content"><![CDATA[[anchor|#section_gzh_53n_2l]
A customization project is a set of changes to the user interface and functionality of Acumatica ERP. A customization project, described more fully in [HelpRoot_Dev_Customization\CG_Platform_Project|Customization Project], might include the following:[anchor|#ul_wbd_dgl_kx]
*New custom forms and modifications to existing forms of Acumatica ERP
*Extensions for the business logic
*Custom reports
*Custom application configuration
*Additional files that you need for the customization
{br}

In Acumatica ERP, you manage customization projects by means of the [HelpRoot_FormReference\SM_20_45_05|Customization Projects] ([~/?ScreenId=SM204505|SM204505]) form, which is shown in the screenshot below. (See also [HelpRoot_Dev_Customization\CG_Platform_Tools_SM204505|Customization Projects Form ] for more information.) On this form, you can add a new customization project, open a customization project for editing in the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor], publish any number of customization projects, cancel the publication of customization projects, export a customization project as the deployment package, import a customization project from an existing deployment package, and delete a customization project.[anchor|#fig_cwd_dyc_lw][anchor|#image_j2j_kyc_lw][image:CustomizationPlatform/images/CG_GL_Projects.png|popup|Viewing the Customization Projects form |450px]((({S:Warn}In MySQL, the maximum size of one packet that can be transmitted to or from a server is 4MB by default. If you use MySQL and want to manage a customization project with the size that is larger than the default maximum value, you have to increase the <tt>max&#95;allowed&#95;packet</tt> variable in the server. The largest possible packet size is 1GB.
)))
==In This Part==[anchor|#_81e189df-2640-48d6-8260-b99cfad38de7]
*[HelpRoot_Dev_Customization\CG_GL_Projects_Starting_Creating|To Create a New Project]
*[HelpRoot_Dev_Customization\CG_GL_Projects_Starting_Selecting|To Select an Existing Project]
*[HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project]
*[HelpRoot_Dev_Customization\CG_GL_Projects_Updating|To Update a Project]
*[HelpRoot_Dev_Customization\CG_GL_Projects_Deleting|To Delete a Project]
*[HelpRoot_Dev_Customization\CG_GL_Projects_Deploying_Exporting|To Export a Project]
*[HelpRoot_Dev_Customization\CG_GL_Projects_Deploying_Importing|To Import a Project]
*[HelpRoot_Dev_Customization\CG_GL_Projects_ReplacingContent|To Replace the Content of a Project from a Package]
*[HelpRoot_Dev_Customization\CG_GL_Projects_ManagingMultiple_Merge|To Merge Multiple Projects]
*[HelpRoot_Dev_Customization\CG_GL_Projects_API_for_Packages|To Manipulate Customization Projects from the Code]
]]></column>
			<column name="PlainText"><![CDATA[Managing Customization Projects A customization project is a set of changes to the user interface and functionality of  Acumatica ERP. A customization project, described more fully in  Customization Project, might include the following: New custom forms and modifications to existing forms of  Acumatica ERPExtensions for the business logic Custom reports Custom application configuration Additional files that you need for the customization In  Acumatica ERP, you manage customization projects by means of the   ([~/?ScreenId=SM204505|SM204505]) Customization Projects (SM204505) form, which is shown in         the screenshot below. (See also  Customization Projects Form  for more         information.) On this form, you can add a new customization project, open a customization         project for editing in the   Customization Project                         Editor, publish any number         of customization projects, cancel the publication of customization projects, export a         customization project as the deployment package, import a customization project from an         existing deployment package, and delete a customization project. Viewing the Customization Projects form  In MySQL, the maximum size of one packet that can be transmitted to or from a server is         4MB by default. If you use MySQL and want to manage a customization project with the size         that is larger than the default maximum value, you have to increase the            max_allowed_packet  variable in the server. The largest possible packet         size is 1GB. In This Part To Create a New ProjectTo Select an Existing ProjectTo Open a ProjectTo Update a ProjectTo Delete a ProjectTo Export a ProjectTo Import a ProjectTo Replace the Content of a Project from a PackageTo Merge Multiple ProjectsTo Manipulate Customization Projects from the Code]]></column>
		</row>
		<row PageID="cf613c17-34b8-4477-9bff-e892d5bfca41" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="69bf8115-9c7b-272a-8b67-e7caf0e52d44" RecordSourceID="22377">
			<column name="Content"><![CDATA[
Because the Acumatica Customization             Platform uses a customization project as a container for the customization items, the platform does not permit you to perform any customization without starting a customization project.{br}

You can create a customization project in the following ways:[anchor|#ul_dvx_hpd_lw]
*[[#section_yxc_4rd_lw|On the Customization Projects form]
*[[#section_o2y_4rd_lw|From the '''Customization''' menu]
*[[#section_ers_4rd_lw|From the Element Inspector]
There are no differences between these ways because the result is the same: a new customization project with the specified name is added to the Acumatica ERP instance as a record in the database. The platform can then use this project as a container of customization items.((({S:Warn}Customization project name can contain the following symbols: Latin letters, numbers, dots, underscores, and square brackets, The project name must start with a letter. For example, the name ''ISVSolution&#91;18.101.0039&#93;&#91;18R1&#95;2018.01.25&#93;'' is valid. The names ''18R1&#95;ISV'' and ''R1&#0123;ISV&#0125;'' are not valid.
)))[anchor|#section_yxc_4rd_lw]
==Adding a Customization Project on the Customization Projects Form ==
To add a customization project on the [HelpRoot_FormReference\SM_20_45_05|Customization Projects] ([~/?ScreenId=SM204505|SM204505]) form, perform the following actions:[anchor|#ol_fsg_pqd_lw]
#Navigate to '''System &gt; Customization &gt; Manage &gt; Customization Projects'''.
#On the form toolbar, click '''Add Row''' (+), as shown in the following screenshot, to add a row to the list of the projects on the form.[anchor|#image_el4_hf2_lw][image:CustomizationPlatform/images/CG_GL_Projects_Starting_Creating_1.png|popup|Adding a row to the customization project list|450px]
#In the new row, specify a unique name for the project, as the screenshot below shows.
#Click '''Save''' on the form toolbar to save the new project in the database.[anchor|#image_ywl_zf2_lw][image:CustomizationPlatform/images/CG_GL_Projects_Starting_Creating_2.png|popup|Entering the new project name|450px]
[anchor|#section_o2y_4rd_lw]
==Creating a Customization Project from the Customization Menu==
To create a customization project from the [HelpRoot_Dev_Customization\CG_Platform_Tools_Menu|Customization Menu], perform the following actions:[anchor|#ol_om4_krd_lw]
#On any form of Acumatica ERP, click '''Customization &gt; Select Project''', as the following screenshot shows (item a).
#In the [HelpRoot_Dev_Customization\CG_Platform_Tools_Menu_SelectCustProjDlg|Select Customization Project Dialog Box], which opens, click '''New''' (item b).
#In the [HelpRoot_Dev_Customization\CG_Platform_Tools_Menu_NewProjDlg|New Project Dialog Box], which opens, enter the name of the new project (item c).
#In this dialog box, click '''OK''' (item d) to create the project in the database and close the dialog box.[anchor|#image_yk1_nb2_lw][image:CustomizationPlatform/images/CG_GL_Projects_Starting_Creating_01.png|popup|Creating a customization project from the Customization menu|450px]
[anchor|#section_ers_4rd_lw]
==Creating a Customization Project from the Element Inspector==
Suppose that you have not selected a customization project. In the [HelpRoot_Dev_Customization\CG_Platform_Tools_Inspector_ElProperiesDlg|Element Properties Dialog Box], if you have tried to start performing customization by clicking '''Customize''', '''Actions &gt; Customize Business Logic''', or '''Actions &gt; Customize Data Fields''', the inspector opens the '''Select Customization Project''' dialog box to force you to select or create a customization project.{br}

To create a customization project from this dialog box, perform the following actions:[anchor|#ol_v3q_3rd_lw]
#In the dialog box, click '''New'''.
#In the '''New Project''' dialog box, which opens, enter the name for the new project (item c).
#In this dialog box, click '''OK''' to create the project in the database and close the dialog box.
]]></column>
			<column name="PlainText"><![CDATA[To Create a New Project Because the  Acumatica Customization             Platform uses a customization project as a container for the customization items, the platform does       not permit you to perform any customization without starting a customization project. You can create a customization project in the following ways: On             the Customization Projects form On the Customization Projects formFrom the  Customization  menu From the '''Customization''' menuFrom the Element Inspector From the Element InspectorThere are no differences between these ways because the result is the same: a new       customization project with the specified name is added to the  Acumatica ERP instance as a record in the database. The platform can then use this project as a container     of customization items. Customization project name can contain the following symbols: Latin letters, numbers, dots,       underscores, and square brackets, The project name must start with a letter. For example, the       name  ISVSolution[18.101.0039][18R1_2018.01.25]  is valid. The names  18R1_ISV  and          R1{ISV}  are not valid. Adding a Customization Project on the Customization Projects Form  To add a customization project on the   ([~/?ScreenId=SM204505|SM204505]) Customization Projects (SM204505) form, perform the following actions: Navigate to  System > Customization > Manage > Customization Projects . On the form toolbar, click  Add Row  (+), as shown in the             following screenshot, to add a row to the list of the projects on the form. Adding a row to the customization project list In the new row, specify a unique name for the project, as the screenshot below             shows. Click  Save  on the form toolbar to save the new project in the               database. Entering the new project name Creating a Customization Project from the Customization Menu To create a customization project from the  Customization Menu, perform     the following actions: On any form of  Acumatica ERP, click  Customization > Select Project , as the following screenshot shows (item a). In the  Select Customization Project Dialog Box, which opens, click                New  (item b). In the  New Project Dialog Box, which opens, enter the name             of the new project (item c). In this dialog box, click  OK  (item d) to create the project in the             database and close the dialog box. Creating a customization project from the Customization menu Creating a Customization Project from the Element Inspector Suppose that you have not selected a customization project. In the  Element Properties Dialog Box, if you have tried to start         performing customization by clicking  Customize ,  Actions > Customize Business Logic , or  Actions > Customize Data Fields , the inspector opens the  Select Customization Project          dialog box to force you to select or create a customization project. To create a customization project from this dialog box, perform the following actions: In the dialog box, click  New . In the  New Project  dialog box, which opens, enter the name for             the new project (item c). In this dialog box, click  OK  to create the project in the             database and close the dialog box. ]]></column>
		</row>
		<row PageID="810a7398-8e1a-4aad-973a-3c6ed9ae9c17" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="7713fe8c-203b-27a2-d5f2-3e3f939fb4e8" RecordSourceID="22377">
			<column name="Content"><![CDATA[
Because the Acumatica Customization             Platform uses a customization project as a container for the customization items, the platform does not permit you to perform any customization without starting a customization project.{br}

You can select an existing customization project in the following ways:[anchor|#ul_dvx_hpd_lw]
*[[#fig_vk5_lb2_lw|By selecting it from the '''Customization''' menu]
*[[#section_ers_4rd_lw|By selecting it from the Element Inspector]
[anchor|#section_o2y_4rd_lw]
==To Select a Customization Project from the Customization Menu==
To create a customization project from the [HelpRoot_Dev_Customization\CG_Platform_Tools_Menu|Customization Menu], perform the following actions:[anchor|#ol_om4_krd_lw]
#On any form of Acumatica ERP, click '''Customization &gt; Select Project''', as the following screenshot shows (item a).
#In the [HelpRoot_Dev_Customization\CG_Platform_Tools_Menu_SelectCustProjDlg|Select Customization Project Dialog Box], which opens, click the '''Project Name''' selector and select a project name (items b and c).
#In this dialog box, click '''OK''' (item d) to select the project and close the dialog box.[anchor|#image_yk1_nb2_lw][image:CustomizationPlatform/images/CG_GL_Projects_Starting_Selecting_01.png|popup|Selecting a customization project from the Customization menu|450px]
[anchor|#section_ers_4rd_lw]
==To Select a Customization Project from the Element Inspector==
Suppose that you have not selected a customization project. If in the [HelpRoot_Dev_Customization\CG_Platform_Tools_Inspector_ElProperiesDlg|Element Properties Dialog Box], you have tried to perform customization by clicking '''Customize''', '''Actions &gt; Customize Business Logic''', or '''Actions &gt; Customize Data Fields''', the inspector opens the '''Select Customization Project''' dialog box to force you to select a customization project.{br}

To select a customization project, in the '''Select Customization Project''' dialog box, perform the following actions:[anchor|#ol_v3q_3rd_lw]
#In the '''Project Name''' selector, select a project name.
#Click '''OK''' to select the project and to close the dialog box.
]]></column>
			<column name="PlainText"><![CDATA[To Select an Existing Project Because the  Acumatica Customization             Platform uses a customization project as a container for the customization items, the platform does       not permit you to perform any customization without starting a customization project. You can select an existing customization project in the following ways: By             selecting it from the  Customization  menu By selecting it from the '''Customization''' menuBy             selecting it from the Element Inspector By selecting it from the Element InspectorTo Select a Customization Project from the Customization Menu To create a customization project from the  Customization Menu, perform     the following actions: On any form of  Acumatica ERP, click  Customization > Select Project , as the following screenshot shows (item a). In the  Select Customization Project Dialog Box, which opens, click the                Project Name  selector and select a project name (items b and             c). In this dialog box, click  OK  (item d) to select the project and             close the dialog box. Selecting a customization project from the Customization menu To Select a Customization Project from the Element Inspector Suppose that you have not selected a customization project. If in the  Element Properties Dialog Box, you have tried to perform         customization by clicking  Customize ,  Actions > Customize Business Logic , or  Actions > Customize Data Fields , the inspector opens the  Select Customization Project          dialog box to force you to select a customization project. To select a customization project, in the  Select Customization Project          dialog box, perform the following actions: In the  Project Name  selector, select a project name. Click  OK  to select the project and to close the dialog             box. ]]></column>
		</row>
		<row PageID="16a7ba41-cc79-4afd-bd68-0581a292d932" Language="en-US" PageRevisionID="1" Content="&#xA;If you have selected a customization project, you can open the project for editing in the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor] in the following ways:[anchor|#ul_dvx_hpd_lw]&#xA;*On the [HelpRoot_Dev_Customization\CG_Platform_Tools_SM204505|Customization Projects Form ]: Click the project name in the table.&#xA;*From the [HelpRoot_Dev_Customization\CG_Platform_Tools_Menu|Customization Menu]: Click '''Customization &amp;gt; Edit Project'''.&#xA;*From the [HelpRoot_Dev_Customization\CG_Platform_Tools_Inspector_ElProperiesDlg|Element Properties Dialog Box]: Click '''Customize''', '''Actions &amp;gt; Customize Business Logic''', or '''Actions &amp;gt; Customize Data Fields'''.&#xA;" PlainText="To Open a Project If you have selected a customization project, you can open the project for editing in the   Customization Project                         Editor in the following ways: On the  Customization Projects Form : Click the project name in the           table. From the  Customization Menu: Click  Customization &gt; Edit Project . From the  Element Properties Dialog Box: Click              Customize ,  Actions &gt; Customize Business Logic , or  Actions &gt; Customize Data Fields . " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="14086d52-ff6e-3cd8-a721-3201e83ae0aa" RecordSourceID="22377" />
		<row PageID="a65978cc-b25b-419f-9dd3-deaccfb692a6" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="89f5bb7e-36f2-f29f-3493-0af28b743d62" RecordSourceID="22377">
			<column name="Content"><![CDATA[
If you have modified an item of a customization project in the file system by using an integrated development environment (IDE), such as Microsoft Visual Studio, these changes may not be reflected in the customization project yet. You have to update the project in the database before the publication or export of the deployment package of the project.{br}

To update a customization project, perform the following actions:[anchor|#ol_kvg_jpj_lw]
#Open the project in the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor]. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)
#In navigation pane of the editor, select '''Files''' to open the Custom Files page.
#On the page toolbar, click '''Detect Modified Files''', as shown in the screenshot below, to review the files included in the project that could have been modified in the file system but haven&rsquo;t been updated in the customization project yet.
#:If at least one conflict is detected, the '''Modified Files Detected''' dialog box opens (also shown in the following screenshot). The dialog box displays each changed file with the check boxes in the '''Selected''' and '''Conflict''' columns selected. See [HelpRoot_Dev_Customization\CG_Platform_TO_Features_AutoDetectMF|Detecting the Project Items Modified in the File System] for details.
#To update the selected files in the project, on the toolbar of the dialog box, click '''Update Customization Project''', as the following screenshot shows.[anchor|#image_akn_b4q_gq][image:CustomizationPlatform/images/CG_GL_Project_Updating.png|popup|Updating files in the project|350px]
]]></column>
			<column name="PlainText"><![CDATA[To Update a Project If you have modified an item of a customization project in the file system by using an       integrated development environment (IDE), such as Microsoft Visual Studio, these changes may not be       reflected in the customization project yet. You have to update the project in the database       before the publication or export of the deployment package of the project. To update a customization project, perform the following actions: Open the project in the   Customization Project                         Editor. (See  To Open a Project for details.) In navigation pane of the editor, select  Files  to open the Custom           Files page. On the page toolbar, click  Detect Modified Files , as shown in the           screenshot below, to review the files included in the project that could have been           modified in the file system but haven't been updated in the customization project             yet. If at least one conflict is detected, the  Modified Files               Detected  dialog box opens (also shown in the following screenshot). The             dialog box displays each changed file with the check boxes in the                Selected  and  Conflict  columns selected.             See  Detecting the Project Items Modified in the File System for details. To update the selected files in the project, on the toolbar of the dialog box, click              Update Customization Project , as the following screenshot             shows. Updating files in the project ]]></column>
		</row>
		<row PageID="4c712a63-6f89-453a-8364-16ab1aa171b0" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="f8509fd7-77ba-faa0-5f2c-d6351018cb8d" RecordSourceID="22377">
			<column name="Content"><![CDATA[
If a customization project is not published, you can delete the project from the instance of Acumatica ERP by using the [HelpRoot_FormReference\SM_20_45_05|Customization Projects] ([~/?ScreenId=SM204505|SM204505]) form.{br}

To delete a customization project, perform the following actions:[anchor|#ol_qrl_m3k_lw]
#Navigate to '''System &gt; Customization &gt; Manage &gt; Customization Projects'''.
#In the project list, select the row of the project that has to be deleted, as shown in the screenshot below (item a).
#On the form toolbar, click '''Delete Row''' (X), item b in the screenshot, to delete the selected project from the list.
#On the form toolbar, click '''Save''' (item c in the screenshot) to save the changes to the database.[anchor|#image_nlr_mjk_lw][image:CustomizationPlatform/images/CG_GL_Projects_Deleting.png|popup|Deleting a customization project|419px]
The platform deletes from the database the project data and the data of the project items. The platform does not delete the files and the objects that were added to the projects from the database, such as site map nodes, reports, user access rights, and integration scenarios.]]></column>
			<column name="PlainText"><![CDATA[To Delete a Project If a customization project is not published, you can delete the project from the instance of          Acumatica ERP by using the   ([~/?ScreenId=SM204505|SM204505]) Customization Projects (SM204505)       form. To delete a customization project, perform the following actions: Navigate to  System > Customization > Manage > Customization Projects . In the project list, select the row of the project that has to be deleted, as shown in           the screenshot below (item a). On the form toolbar, click  Delete Row  (X), item b in the           screenshot, to delete the selected project from the list. On the form toolbar, click  Save  (item c in the screenshot) to           save the changes to the database. Deleting a customization project The platform deletes from the database the project data and the data of the project       items. The platform does not delete the files and the objects that were added to the projects       from the database, such as site map nodes, reports, user access rights, and integration       scenarios. ]]></column>
		</row>
		<row PageID="5d2160eb-0219-4cc0-af6d-e3cb29ab8d2b" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="c6217a00-6a2c-4789-fcf4-2234eff5bd51" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can export (download) a customization project when the project is finished to deploy the customization to the target system. Also, you can download the package to have a backup copy of the customization project you are working on.{br}

Before you download the package, we recommend that you make sure you have included all the needed changes in the customization project. To do this, you take the following actions:[anchor|#ul_plj_mwf_fq]
*Make sure that you have added all custom files to the project and uploaded the latest actual version of the files to the project. See [HelpRoot_Dev_Customization\CG_GL_Projects_Updating|To Update a Project] for details.
*Make sure that the database schema is updated in the customization project. See [HelpRoot_Dev_Customization\CG_GL_Items_DBScripts_UpdatingCustTable|To Update Custom Tables in the Project] for details.
*Make sure you have added the needed site map nodes to the project. See [HelpRoot_Dev_Customization\CG_GL_Items_SiteMap|Site Map] for details.
*Publish the project and test the customization before downloading the deployment package, to ensure that you have no issues.
{br}

To download the deployment package of a customization project, you should export the project. You can export a customization project in the following ways:[anchor|#ul_xd1_vzc_nw]
*[[#section_ezh_m1d_nw|By using the Customization Projects form]
*[[#section_e54_m1d_nw|Through the Customization Project Editor]
{br}

The system creates the deployment package of the project and downloads the <tt>zip</tt> file of the package on your machine. The file has the same name as the customization project. For more information about a deployment package, see [HelpRoot_Dev_Customization\CG_Platform_Project_Deployment|Deployment of Customization].[anchor|#section_ezh_m1d_nw]
==Exporting a Customization Project by Using the Customization Projects form==
To export a customization project by using the [HelpRoot_FormReference\SM_20_45_05|Customization Projects] ([~/?ScreenId=SM204505|SM204505]) form, perform the following actions:[anchor|#ol_gwp_1kj_5s]
#Navigate to '''System &gt; Customization &gt; Manage &gt; Customization Projects'''.
#In the project list of the form, click the row of the customization project to be exported.
#:The row is highlighted in the table, as the screenshot below shows.
#Click '''Export''' on the form toolbar to export the highlighted project.[anchor|#image_edp_1cd_nw][image:CustomizationPlatform/images/CG_GL_Projects_Exporting_01.png|popup|Exporting a customization project|413px]
[anchor|#section_e54_m1d_nw]
==Exporting the Customization Project Opened in the Customization Project Editor==
To export the customization project that is currently opened in the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor], click '''File &gt; Export Project Package''' on the editor menu, as shown in the following screenshot.[anchor|#fig_kk5_qdd_nw][anchor|#image_wrc_tdd_nw][image:CustomizationPlatform/images/CG_GL_Projects_Exporting_02.png|popup|Exporting the current customization project|450px]{br}

Also, you can export the customization project from the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_XML_Project|Project XML Editor] of the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor] by clicking '''Download Package''' on the page toolbar, as shown in the following screenshot.[anchor|#fig_efx_gj3_nw][anchor|#image_tdm_3j3_nw][image:CustomizationPlatform/images/CG_GL_Projects_Exporting_03.png|popup|Exporting the current customization project from the Project XML Editor|450px]]]></column>
			<column name="PlainText"><![CDATA[To Export a Project You can export (download) a customization project when the project is finished to deploy the       customization to the target system. Also, you can download the package to have a backup copy       of the customization project you are working on. Before you download the package, we recommend that you make sure you have included all the       needed changes in the customization project. To do this, you take the following actions: Make sure that you have added all custom files to the project and uploaded the latest           actual version of the files to the project. See  To Update a Project for details. Make sure that the database schema is updated in the customization project. See  To Update Custom Tables in the Project for details. Make sure you have added the needed site map nodes to the project. See  Site Map for details. Publish the project and test the customization before downloading the deployment           package, to ensure that you have no issues. To download the deployment package of a customization project, you should export the project.       You can export a customization project in the following ways: By             using the Customization Projects form By using the Customization Projects formThrough the Customization Project Editor Through the Customization Project EditorThe system creates the deployment package of the project and downloads the          zip  file of the package on your machine. The file has the same name as       the customization project. For more information about a deployment package, see  Deployment of Customization. Exporting a Customization Project by Using the Customization Projects form To export a customization project by using the   ([~/?ScreenId=SM204505|SM204505]) Customization Projects (SM204505) form, perform the following actions: Navigate to  System > Customization > Manage > Customization Projects . In the project list of the form, click the row of the customization project to be               exported. The row is highlighted in the table, as the screenshot below             shows. Click  Export  on the form toolbar to export the highlighted               project. Exporting a customization project Exporting the Customization Project Opened in the  Customization Project EditorTo export the customization project that is currently opened in the   Customization Project                         Editor, click  File > Export Project Package  on the editor menu, as shown in the following screenshot. Exporting the current customization project Also, you can export the customization project from the  Project XML Editor of the   Customization Project                         Editor by clicking  Download Package          on the page toolbar, as shown in the following screenshot. Exporting the current customization project from the Project XML Editor ]]></column>
		</row>
		<row PageID="0ee24bc5-083d-415d-bd42-6a6647b0d54f" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="83d33f9f-89db-bd2e-610e-d82779f8a7a6" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can import a deployment package to work with the customization project or to publish the final customization on the target website.((({S:Warn}You can import deployment packages of earlier versions of Acumatica ERP to Acumatica ERP 2020 R1.
))){br}

To upload the deployment package of a customization project, you should import the project by using the [HelpRoot_FormReference\SM_20_45_05|Customization Projects] ([~/?ScreenId=SM204505|SM204505]) form. (See [HelpRoot_Dev_Customization\CG_Platform_Tools_SM204505|Customization Projects Form ] for more information.){br}

To do this, perform the following actions:[anchor|#ol_gwp_1kj_5s]
#Navigate to '''System &gt; Customization &gt; Manage &gt; Customization Projects'''.
#Click '''Import''' on the form toolbar, as the screenshot below shows.
#In the '''Open Package''' dialog box, which opens, click '''Choose File'''.
#In the '''Open''' dialog box, which opens, select the deployment package file to be uploaded.
#:The name of the selected file is displayed in the '''File path''' box of the '''Open Package''' dialog box, as shown in the screenshot.[anchor|#image_edp_1cd_nw][image:CustomizationPlatform/images/CG_GL_Projects_Importing_01.png|popup|Importing a customization project|413px]
#In the '''Open Package''' dialog box, click '''Upload'''.
The platform uploads the selected package, create the corresponding customization project, and saves the project in the database. As the result, the new customization project appears in the list on the [HelpRoot_FormReference\SM_20_45_05|Customization Projects] form; therefore, you can access the project data and manage the project.]]></column>
			<column name="PlainText"><![CDATA[To Import a Project You can import a deployment package to work with the customization project or to publish the       final customization on the target website. You can import deployment packages of earlier         versions of  Acumatica ERP to  Acumatica ERP 2020 R1. To upload the deployment package of a customization project, you should import the project by       using the   ([~/?ScreenId=SM204505|SM204505]) Customization Projects (SM204505) form. (See          Customization Projects Form  for more information.) To do this, perform the following actions: Navigate to  System > Customization > Manage > Customization Projects . Click  Import  on the form toolbar, as the screenshot below           shows. In the  Open Package  dialog box, which opens, click              Choose File . In the  Open  dialog box, which opens, select the deployment package           file to be uploaded. The name of the selected file is displayed in the  File               path  box of the  Open Package  dialog box, as shown             in the screenshot. Importing a customization project In the  Open Package  dialog box, click              Upload . The platform uploads the selected package, create the corresponding customization       project, and saves the project in the database. As the result, the new customization project       appears in the list on the   ([~/?ScreenId=SM204505|SM204505]) Customization Projects form;       therefore, you can access the project data and manage the project. ]]></column>
		</row>
		<row PageID="85c31d18-5fbb-4bef-b043-2808af59d1f0" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="5a23e71f-a29b-c5b2-184e-09da6914e549" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You might need to upload a newer version of the customization project that has been modified outside the system on which you are working, or upload the project from a backup copy.{br}

You can replace the content of a customization project from a deployment package in the following ways:[anchor|#ul_ekf_4ld_nw]
*[[#section_ezh_m1d_nw|By using the Customization Projects form]
*[[#section_e54_m1d_nw|Through the Customization Project Editor]
((({S:Warn}The platform does not verify the content of a deployment package before replacing a customization project in the database.
)))[anchor|#section_ezh_m1d_nw]
==Replacing a Customization Project from a File by Using the Customization Projects Form==
To replace the content of a customization project from a file by using the the [HelpRoot_FormReference\SM_20_45_05|Customization Projects] ([~/?ScreenId=SM204505|SM204505]) form (see also [HelpRoot_Dev_Customization\CG_Platform_Tools_SM204505|Customization Projects Form ]), perform the following actions:[anchor|#ol_gwp_1kj_5s]
#Navigate to '''System &gt; Customization &gt; Manage &gt; Customization Projects'''.
#In the project list, click the row of the customization project to be updated, as the screenshot below shows.
#Click '''Import &gt; Replace Highlighted Project Content''' on the form toolbar, as the screenshot below also shows.
#In the '''Open Package''' dialog box, which opens, click '''Choose File'''.
#In the '''Open''' dialog box, which opens, select the deployment package file to be uploaded.
#:The name of the selected file is displayed in the '''File path''' text box of the '''Open Package''' dialog box, as shown in the screenshot.[anchor|#image_edp_1cd_nw][image:CustomizationPlatform/images/CG_GL_Projects_Replacing_01.png|popup|Replacing the content of a customization project|450px]
#In the '''Open Package''' dialog box, click '''Upload'''.
The platform uploads the selected package and replaces in the database the content of the selected project with the content of the deployment package.[anchor|#section_e54_m1d_nw]
==Replacing the Customization Project Opened in the Customization Project Editor from a File==
To replace the content of a customization project that is currently opened in the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor], perform the following actions:[anchor|#ol_sg3_pp3_nw]
#Click '''File &gt; Replace from Package''' on the editor menu, as shown in the following screenshot.[anchor|#image_wrc_tdd_nw][image:CustomizationPlatform/images/CG_GL_Projects_Replacing_02.png|popup|Replacing the content of the current customization project|450px]
#In the '''Open Package''' dialog box, which opens, click '''Choose File'''.
#In the '''Open''' dialog box, which opens, select the deployment package file to be uploaded.
#:The name of the selected file is displayed in the '''File path''' text box of the '''Open Package'''dialog box.
#In the '''Open Package''' dialog box, click '''Upload'''.
The platform uploads the selected package and replaces in the database the content of the selected project with the content of the deployment package.{br}

Also, you can replace the content of the customization project by using the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_XML_Project|Project XML Editor] of the Customization Project Editor. To do this, perform the following actions:[anchor|#ol_ir1_bk3_nw]
#In the Customization Project Editor, click '''File &gt; Edit Project XML''' to open the Project XML Editor for the current customization project.
#On the toolbar of the Project XML Editor, click '''Choose File'''.
#In the '''Open''' dialog box, which opens, select the deployment package file to be uploaded.
#:The name of the selected file is displayed in the text box right of the toolbar buttons instead of the ''No file chosen'' string (which is shown in the screenshot below).
#On the editor toolbar, click '''Upload Package'''.[anchor|#image_gt4_vl3_nw][image:CustomizationPlatform/images/CG_GL_Projects_Replacing_03.png|popup|Replacing the content of a customization project from the Project XML Editor|450px]The platform uploads the selected package and displays its XML code in the Project XML Editor.
#Explore the content of the uploaded package to ensure that this is the needed one.
#To replace the content of the project that is currently opened in the Customization Project Editor with the content of the uploaded package, click '''Save to Database''' on the page toolbar.
{br}

By using this approach, you can explore the content of the package before replacing the content of the customization project that is currently opened in the Customization Project Editor.]]></column>
			<column name="PlainText"><![CDATA[To Replace the Content of a Project from a Package You might need to upload a newer version of the customization project that has been modified       outside the system on which you are working, or upload the project from a backup copy. You can replace the content of a customization project from a deployment package in the       following ways: By             using the Customization Projects form By using the Customization Projects formThrough the Customization Project Editor Through the Customization Project EditorThe platform does not verify the content of a deployment package before replacing a         customization project in the database. Replacing a Customization Project from a File by Using         the Customization Projects Form To replace the content of a customization project         from a file by using the the   ([~/?ScreenId=SM204505|SM204505]) Customization Projects         (SM204505) form (see also  Customization Projects Form ), perform the         following actions: Navigate to  System > Customization > Manage > Customization Projects . In the project list, click the row of the customization project to be updated, as the             screenshot below shows. Click  Import > Replace Highlighted Project Content  on the form toolbar, as the screenshot below also shows. In the  Open Package  dialog box, which opens, click                Choose File . In the  Open  dialog box, which opens, select the deployment             package file to be uploaded. The name of the selected file is displayed in the                  File path  text box of the  Open Package                dialog box, as shown in the screenshot. Replacing the content of a customization project In the  Open Package  dialog box, click                Upload . The platform uploads the selected package and replaces in the database the content       of the selected project with the content of the deployment package. Replacing the Customization Project Opened in the  Customization Project Editor from a File To replace the content of a customization project that is currently opened in the   Customization Project                         Editor, perform the following actions: Click  File > Replace from Package  on the editor menu, as shown in the following screenshot. Replacing the content of the current customization project In the  Open Package  dialog box, which opens, click                Choose File . In the  Open  dialog box, which opens, select the deployment             package file to be uploaded. The name of the selected file is displayed in the                  File path  text box of the  Open               Package dialog box. In the  Open Package  dialog box, click                Upload . The platform uploads the selected package and replaces in the database the content of         the selected project with the content of the deployment package. Also, you can replace the content of the customization project by using the  Project XML Editor of the  Customization Project Editor. To do this, perform the following actions: In the  Customization Project Editor, click  File > Edit Project XML  to open the Project XML Editor for the current customization             project. On the toolbar of the Project XML Editor, click  Choose             File . In the  Open  dialog box, which opens, select the deployment             package file to be uploaded. The name of the selected file is displayed in the text               box right of the toolbar buttons instead of the  No file chosen  string (which is               shown in the screenshot below). On the editor toolbar, click  Upload Package . Replacing the content of a customization project from the Project XML                 Editor The platform uploads the selected package and displays its XML code in the Project             XML Editor. Explore the content of the uploaded package to ensure that this is the needed             one. To replace the content of the project that is currently opened in the  Customization Project Editor with the content of the uploaded package, click  Save to               Database  on the page toolbar. By using this approach, you can explore the content of the package before replacing the         content of the customization project that is currently opened in the  Customization Project Editor. ]]></column>
		</row>
		<row PageID="0450cd3a-9c71-4ee3-a11c-46128f227d04" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="6f865047-3f4d-8279-2bd0-436a9eced812" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You may need to build a customization package that is based on a customization project or that uses existing files. {br}

To do that, you can use the PX.CommandLine tool provided by Acumatica Customization             Platform. {br}{TOC}
==About the PX.CommandLine Tool==
The PX.CommandLine tool represents an executable file ({{PX.CommandLine.exe}}) located in the<tt> \Bin</tt> folder of your customization project.{br}

When you run {{PX.CommandLine.exe}}, you supply a set of command-line parameters where each parameter must be presented in the following format.{{{{parameter_name "parameter_value"
}}}}{br}

The PX.CommandLine tool has the following syntax.{{{{PX.CommandLine.exe 
[/website "path\to\web\site\root"] 
/method BuildProject 
/in "path\to\source\folder" 
/out "path\to\output\file.zip" 
[/include "path\to\additional\file1.ext" "relative\package\path\to\file2.ext" ...] 
[/description "Package description"] 
[/level "customization level"]
}}}}
You can use the following parameters:[anchor|#_566e9eea-3a44-4cf8-a0f5-d4645ef49627]
*{{/in}}: Required. The path to the folder that will be used as a base for the new customization package. The folder may contain either a customization package that will be modified, or the files that will be included in the new customization project.
*{{/out}}: Required. The path to the customization package that you build using the PX.CommandLine tool. The output is a <tt>.zip</tt> archive.
*{{/website}}: Optional. A path to a website folder. Use this parameter if the PX.CommandLine tool executable file is not located in the <tt>\Bin</tt> folder of your website.
*{{/method}}: Required. This parameter must always have the {{BuildProject}} value, which indicates that the tool builds a new project. Other methods of the tool are not available.
*{{include}}: Optional. The argument consists of two parameters: an absolute path to a file that should be added to the output package, and a relative path inside the {{/website}} folder where the file is copied after you publish the customization project. This argument may be repeated any number of times.
*{{/includeDirectory}}: Optional. The argument consists of two parameters: an absolute path to a folder containing files that should be added to the output package, and a relative path to a folder in the website folder where these files are copied after the customization project is published. This argument may be repeated any number of times.
*{{/description}}: Optional. A description of the output customization package.
*{{/level}}: Optional. The level of the customization package, which helps Acumatica Customization             Platform to resolve conflicts while multiple customization projects are being merged. The value must be an integer. For details about the level of a customization project, see the description of the '''Level''' column of the [HelpRoot_QuickReference\SM_20_45_05_NAV|Customization Projects (SM204505)] form.

==Building a Customization Package by Using the PX.CommandLine Tool==
To build a customization package by using the PX.CommandLine tool, you execute {{PX.CommandLine.exe}} with the appropriate keys.{br}

For example, if you have a customization package located in the <tt>C:\AcumaticaSites\T300</tt> folder and you want to build a customization package based on this project, the command is as shown in the following code.{{{{PX.CommandLine.exe /method BuildProject 
/in "C:\AcumaticaSites\T300" 
/out "C:\AcumaticaSites\MyNewPackage.zip"
}}}}
This command builds a customization package and puts the resulting <tt>.zip</tt> archive in the {{C:\AcumaticaSites\MyNewPackage}} folder.{br}

You can also build a new customization package based on a project stored in a source control folder. To do that, execute a command that looks similar the one shown in the following code.{{{{PX.CommandLine.exe /website "path_to_Acumatica_website" /method BuildProject 
/in "path_to_customization_source_control_folder" 
/out "full_name_of_customization_file.zip"
}}}}]]></column>
			<column name="PlainText"><![CDATA[To Build a Package Based on Existing Files You may need to build a customization package that is based on a customization project or that     uses existing files.  To do that, you can use the PX.CommandLine tool provided by  Acumatica Customization             Platform.  About the PX.CommandLine Tool The PX.CommandLine tool represents an executable file ( PX.CommandLine.exe )     located in the  \Bin  folder of your customization project. When you run  PX.CommandLine.exe , you supply a set of command-line parameters     where each parameter must be presented in the following     format. parameter_name "parameter_value" The PX.CommandLine tool has the following syntax. PX.CommandLine.exe 
[/website "path\to\web\site\root"] 
/method BuildProject 
/in "path\to\source\folder" 
/out "path\to\output\file.zip" 
[/include "path\to\additional\file1.ext" "relative\package\path\to\file2.ext" ...] 
[/description "Package description"] 
[/level "customization level"] You can use the following parameters: /in : Required. The path to the folder that will be used as a base for the           new customization package. The folder may contain either a customization package that will           be modified, or the files that will be included in the new customization project. /out : Required. The path to the customization package that you build using      the PX.CommandLine tool. The output is a  .zip  archive. /website : Optional. A path to a website folder. Use this parameter if the           PX.CommandLine tool executable file is not located in the  \Bin  folder           of your website. /method : Required. This parameter must always have the        BuildProject  value, which indicates that the tool builds a new project. Other      methods of the tool are not available. include : Optional. The argument consists of two parameters: an absolute           path to a file that should be added to the output package, and a relative path inside the              /website  folder where the file is copied after you publish the           customization project. This argument may be repeated any number of times. /includeDirectory : Optional. The argument consists of two parameters: an           absolute path to a folder containing files that should be added to the output package, and           a relative path to a folder in the website folder where these files are copied after the           customization project is published. This argument may be repeated any number of           times. /description : Optional. A description of the output customization      package. /level : Optional. The level of the customization package, which helps  Acumatica Customization             Platform to resolve conflicts while multiple customization projects are being merged. The value           must be an integer. For details about the level of a customization project, see the           description of the  Level  column of the   ([~/?ScreenId=SM204505|SM204505]) Customization Projects (SM204505) form. Building a Customization Package by Using the PX.CommandLine Tool To build a customization package by using the PX.CommandLine tool, you execute       PX.CommandLine.exe  with the appropriate keys. For example, if you have a customization package located in the            C:\AcumaticaSites\T300  folder and you want to build a customization         package based on this project, the command is as shown in the following code. PX.CommandLine.exe /method BuildProject 
/in "C:\AcumaticaSites\T300" 
/out "C:\AcumaticaSites\MyNewPackage.zip" This command builds a customization package and puts the resulting  .zip          archive in the  C:\AcumaticaSites\MyNewPackage  folder. You can also build a new customization package based on a project stored in a source control         folder. To do that, execute a command that looks similar the one shown in the following         code. PX.CommandLine.exe /website "path_to_Acumatica_website" /method BuildProject 
/in "path_to_customization_source_control_folder" 
/out "full_name_of_customization_file.zip" ]]></column>
		</row>
		<row PageID="97662a5f-54c4-43b1-80b8-92430ebe46fa" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="73a596ae-d991-d36d-3b9f-0dc89f7a5c9f" RecordSourceID="22377">
			<column name="Content"><![CDATA[
As a rule, it is better to have multiple customization projects instead of a single one. But if you have two or more customization projects that contain changesets with the same items, and if you are sure that each project is valid and that the merged customization applies to the website properly, we recommend that you merge the projects. You use the [HelpRoot_FormReference\SM_20_45_05|Customization Projects] ([~/?ScreenId=SM204505|SM204505]) form as a starting point. {br}

To merge multiple customization projects, perform the following actions:[anchor|#ol_t13_53w_dt]
#Navigate to '''System &gt; Customization &gt; Manage &gt; Customization Projects'''.
#In the project list, select the check boxes for only the projects to be merged.
#Click '''Publish''' on the form toolbar.
#Click '''View Published''' on the form toolbar to open the [HelpRoot_Dev_Customization\CG_Platform_Tools_SM204505_Published|Published Customization Page].
#Click '''Download Package''' on the page toolbar to download the <tt>Customization.zip</tt> file, which includes the full content of the merged customization project.
{br}

The <tt>Customization.zip</tt> file is the deployment package of the merged customization project. You can use the merged project to publish the final customization project on the target website. You can rename the <tt>.zip</tt> file to assign the needed name to the customization project. To upload the deployment package to a target system, import the <tt>.zip</tt> file, as described in [HelpRoot_Dev_Customization\CG_GL_Projects_Deploying_Importing|To Import a Project].]]></column>
			<column name="PlainText"><![CDATA[To Merge Multiple Projects As a rule, it is better to have multiple customization projects instead of a single one. But if       you have two or more customization projects that contain changesets with the same items, and       if you are sure that each project is valid and that the merged customization applies to the       website properly, we recommend that you merge the projects. You use the   ([~/?ScreenId=SM204505|SM204505]) Customization Projects (SM204505) form as a starting point.  To merge multiple customization projects, perform the following actions: Navigate to  System > Customization > Manage > Customization Projects . In the project list, select the check boxes for only the projects to be merged. Click  Publish  on the form toolbar. Click  View Published  on the form toolbar to open the  Published Customization Page. Click  Download Package  on the page toolbar to download the              Customization.zip  file, which includes the full content of the           merged customization project. The  Customization.zip  file is the deployment package of the merged             customization project. You can use the merged project to publish the final customization             project on the target website. You can rename the  .zip  file to             assign the needed name to the customization project. To upload the deployment package to             a target system, import the  .zip  file, as described in  To Import a Project. ]]></column>
		</row>
		<row PageID="fb462e6f-7cbe-4bd0-b797-b329295298eb" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="f49e0cfc-bbee-d2a0-8efd-8b5252c3de27" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can use the web service API for manipulating customization projects from the code. Methods of the web service API can be used, for example, to deploy customization packages to local and remote instances of Acumatica ERP.{br}

For manipulating customization projects, the web service API includes the methods, which are accessible through the SOAP API, described in the following topics:[anchor|#ul_jvm_w4w_rw]
*[HelpRoot_Dev_Customization\CG_GL_Projects_API_GetPackage|GetPackage() Method]
*[HelpRoot_Dev_Customization\CG_GL_Projects_API_PublishPackages|PublishPackages() Method]
*[HelpRoot_Dev_Customization\CG_GL_Projects_API_UnpublishAllPackages|UnpublishAllPackages() Method]
*[HelpRoot_Dev_Customization\CG_GL_Projects_API_UploadPackage|UploadPackage() Method]
((({S:Warn}A user of an application that invokes any of these methods should be assigned the ''Customizer'' role in the appropriate instance of Acumatica ERP. See [HelpRoot_Dev_Customization\CG_GL_Stages_Role|To Assign the Customizer Role to a User Account] for details.
))){br}

The web service used for manipulating customization projects is available under the URL, which is specified in one of the following ways (see the screenshot below):[anchor|#ul_eyy_2xw_rw]
*''http://&lt;Computer Name&gt;/&lt;Website Name&gt;/api/servicegate.asmx'', such as ''http://MyComputer/YogiFon/api/servicegate.asmx''
* ''http://&lt;IP Address&gt;/&lt;Website Name&gt;/api/servicegate.asmx'', such as ''http://111.222.3.44/YogiFon/api/servicegate.asmx''
[anchor|#fig_avl_syw_rw][anchor|#image_jjr_gzw_rw][image:CustomizationPlatform/images/CG_GL_Projects_API_ServiceGate.png|popup|Accessing the web service through the browser|410px]To use the listed methods in the code, you should create a service gate for the specified URL and log in, as shown in the following code fragment.{{{{
var webserviceurl = "http://localhost/AcumaticaInstance/api/ServiceGate.asmx";
var username = "admin";
var password = "123";

var client = new ServiceGate.ServiceGate
{
  Url = webserviceurl,
  CookieContainer = new CookieContainer(),
  Timeout = (int) TimeSpan.FromMinutes(5).TotalMilliseconds
};

var loginResult = client.Login(username, password);

if (loginResult.Code == ErrorCode.OK)
{
  // Use the methods to manipulate customization projects
}

}}}}]]></column>
			<column name="PlainText"><![CDATA[To Manipulate Customization Projects from the Code You can use the web service API for manipulating customization projects from the code.       Methods of the web service API can be used, for example, to deploy customization packages to       local and remote instances of  Acumatica ERP. For manipulating customization projects, the web service API includes the methods, which are       accessible through the SOAP API, described in the following topics: GetPackage() MethodPublishPackages() MethodUnpublishAllPackages() MethodUploadPackage() MethodA user of an application that invokes any of these methods should be assigned the            Customizer  role in the appropriate instance of  Acumatica ERP. See  To Assign the Customizer Role to a User Account for details. The web service used for manipulating customization projects is available under the URL,       which is specified in one of the following ways (see the screenshot below): http://<Computer Name>/<Website Name>/api/servicegate.asmx , such as              http://MyComputer/YogiFon/api/servicegate.asmx http://<IP Address>/<Website Name>/api/servicegate.asmx , such as              http://111.222.3.44/YogiFon/api/servicegate.asmx Accessing the web service through the browser To use the listed methods in the code, you should create a service gate for the       specified URL and log in, as shown in the following code       fragment. 
var webserviceurl = "http://localhost/AcumaticaInstance/api/ServiceGate.asmx";
var username = "admin";
var password = "123";

var client = new ServiceGate.ServiceGate
{
  Url = webserviceurl,
  CookieContainer = new CookieContainer(),
  Timeout = (int) TimeSpan.FromMinutes(5).TotalMilliseconds
};

var loginResult = client.Login(username, password);

if (loginResult.Code == ErrorCode.OK)
{
  // Use the methods to manipulate customization projects
}
 ]]></column>
		</row>
		<row PageID="1aa1e28b-cc5e-4df7-bcdd-032f57483080" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="bfc38a12-a774-301c-4531-68ea8dffb5ba" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You use the <tt>GetPackage()</tt> method to get the content of a customization project from the database of an Acumatica ERP instance.
==Syntax==<source lang="csharp">public byte[] GetPackage(string packageName)</source>
==Parameters==[anchor|#_465e64c7-dd80-4e25-a3ce-fec8361517bf]
*<tt>packageName</tt>: The name of the customization project to be loaded from the database.

==Return Value==
The method returns an array of bytes that corresponds to the content of the deployment package <tt>.zip</tt> file.
==Example==
The following code logs in to an Acumatica ERP instance, gets the content of the ''package1'' customization project from the database, and returns the content as a byte array. You can then, for example, save the array to a <tt>.zip</tt> file to download the deployment package in the file system.{{{{var webserviceurl = "http://localhost/AcumaticaInstance/api/ServiceGate.asmx";
var username = "admin";
var password = "123";
var packageName = "package1";

var client = new ServiceGate.ServiceGate
{
  Url = webserviceurl,
  CookieContainer = new CookieContainer(),
  Timeout = (int) TimeSpan.FromMinutes(5).TotalMilliseconds
};

var loginResult = client.Login(username, password);

if (loginResult.Code == ErrorCode.OK)
{
  var packageContents = client.GetPackage(packageName);
  //do something with the packageContents package content
}
}}}}
==Usage Notes==[anchor|#_763140b6-4319-4124-b27e-7ca9189f7697]
If there are multiple tenants in an instance of Acumatica ERP, this method affects the tenant to which the service is logged in. To log in to a specific tenant, add the tenant name to the user name using the following format: ''user@MyTenant''.]]></column>
			<column name="PlainText"><![CDATA[GetPackage() Method You use the  GetPackage()  method to get the content of a customization         project from the database of an  Acumatica ERP instance. Syntax public byte[] GetPackage(string packageName) Parameters packageName : The name of the customization project to be loaded from the      database. Return Value The method returns an array of bytes that corresponds to the content of the deployment package            .zip  file. Example The following code logs in to an  Acumatica ERP instance, gets the content of the  package1  customization project from the         database, and returns the content as a byte array. You can then, for example, save the array         to a  .zip  file to download the deployment package in the file         system. var webserviceurl = "http://localhost/AcumaticaInstance/api/ServiceGate.asmx";
var username = "admin";
var password = "123";
var packageName = "package1";

var client = new ServiceGate.ServiceGate
{
  Url = webserviceurl,
  CookieContainer = new CookieContainer(),
  Timeout = (int) TimeSpan.FromMinutes(5).TotalMilliseconds
};

var loginResult = client.Login(username, password);

if (loginResult.Code == ErrorCode.OK)
{
  var packageContents = client.GetPackage(packageName);
  //do something with the packageContents package content
} Usage Notes If there are multiple tenants in an instance of  Acumatica ERP, this method affects the tenant to which the service is logged in. To log in to a specific tenant, add the tenant name to the user name using the following format:  user@MyTenant . ]]></column>
		</row>
		<row PageID="f7e0f5e0-48c2-4675-a5ed-7a36433a3d48" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="4f51b736-d1fb-ef17-8edf-9a8c4d4c27da" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You use the <tt>PublishPackages()</tt> method to publish multiple customization projects that exist in the database of an Acumatica ERP instance.
==Syntax==<source lang="csharp">public void PublishPackages(string[] packageNames, bool mergeWithExistingPackages)</source>
==Parameters==[anchor|#_465e64c7-dd80-4e25-a3ce-fec8361517bf]
*<tt>packageNames</tt>: An array of names of the customization projects to be published.
*<tt>mergeWithExistingPackages</tt>: An indicator of whether the specified customization projects must be merged with the customization projects that are currently published in the same instance of Acumatica ERP. If the value of the parameter is ''true'' and there are published customization projects in the instance, the platform merges the content of the projects specified in the method with the content of the currently published projects and then applies the merged customization to the instance. If the value of the parameter is ''false'', the platform cancels the currently applied customization and publishes only the projects specified in the method.

==Example==
The following code logs in to an Acumatica ERP instance and publishes the ''package1'', ''package2'', and ''package3'' customization projects that exist in the database of the instance.{{{{
var webserviceurl = "http://localhost/AcumaticaInstance/api/ServiceGate.asmx";
var username = "admin";
var password = "123";
var packageNames = new []{"package1", "package2", "package3"};
var mergeWithExistingPackages = true;

var client = new ServiceGate.ServiceGate
{
  Url = webserviceurl,
  CookieContainer = new CookieContainer(),
  Timeout = (int) TimeSpan.FromMinutes(5).TotalMilliseconds
};

var loginResult = client.Login(username, password);

if (loginResult.Code == ErrorCode.OK)
{
  client.PublishPackages(packageNames, mergeWithExistingPackages);
}

}}}}
==Usage Notes==[anchor|#_28442dab-de5b-457f-a4c9-197dd2893fea]
If there are multiple tenants in an instance of Acumatica ERP, this method affects the tenant to which the service is logged in. To log in to a specific tenant, add the tenant name to the user name using the following format: ''user@MyTenant''.]]></column>
			<column name="PlainText"><![CDATA[PublishPackages() Method You use the  PublishPackages()  method to publish multiple customization         projects that exist in the database of an  Acumatica ERP instance. Syntax public void PublishPackages(string[] packageNames, bool mergeWithExistingPackages) Parameters packageNames : An array of names of the customization projects to be      published. mergeWithExistingPackages : An indicator of whether the specified           customization projects must be merged with the customization projects that are currently           published in the same instance of  Acumatica ERP. If the value of the parameter is  true  and there are published customization           projects in the instance, the platform merges the content of the projects specified in the           method with the content of the currently published projects and then applies the merged           customization to the instance. If the value of the parameter is  false , the platform           cancels the currently applied customization and publishes only the projects specified in           the method. Example The following code logs in to an  Acumatica ERP instance and publishes the  package1 ,  package2 , and  package3          customization projects that exist in the database of the instance. 
var webserviceurl = "http://localhost/AcumaticaInstance/api/ServiceGate.asmx";
var username = "admin";
var password = "123";
var packageNames = new []{"package1", "package2", "package3"};
var mergeWithExistingPackages = true;

var client = new ServiceGate.ServiceGate
{
  Url = webserviceurl,
  CookieContainer = new CookieContainer(),
  Timeout = (int) TimeSpan.FromMinutes(5).TotalMilliseconds
};

var loginResult = client.Login(username, password);

if (loginResult.Code == ErrorCode.OK)
{
  client.PublishPackages(packageNames, mergeWithExistingPackages);
}
 Usage Notes If there are multiple tenants in an instance of  Acumatica ERP, this method affects the tenant to which the service is logged in. To log in to a specific tenant, add the tenant name to the user name using the following format:  user@MyTenant . ]]></column>
		</row>
		<row PageID="fe931f44-3169-4b48-b0b8-40f82d83aadf" Language="en-US" PageRevisionID="1" Content="&#xA;You use the &lt;tt&gt;UnpublishAllPackages()&lt;/tt&gt; method to cancel customization of an Acumatica ERP instance.&#xA;==Syntax==&lt;source lang=&quot;csharp&quot;&gt;public void UnpublishAllPackages()&lt;/source&gt;&#xA;==Example==&#xA;The following code logs in to an Acumatica ERP instance and cancels all customization projects that is currently applied to the instance.{{{{&#xA;var webserviceurl = &quot;http://localhost/AcumaticaInstance/api/ServiceGate.asmx&quot;;&#xA;var username = &quot;admin&quot;;&#xA;var password = &quot;123&quot;;&#xA;&#xA;var client = new ServiceGate.ServiceGate&#xA;{&#xA; Url = webserviceurl,&#xA; CookieContainer = new CookieContainer(),&#xA; Timeout = (int) TimeSpan.FromMinutes(5).TotalMilliseconds&#xA;};&#xA;&#xA;var loginResult = client.Login(username, password);&#xA;&#xA;if (loginResult.Code == ErrorCode.OK)&#xA;{&#xA; client.UnpublishAllPackages();&#xA;}&#xA;}}}}&#xA;==Usage Notes==&#xA;The method removes all customization changes from the file system, regardless of the tenants where the customization projects were published." PlainText="UnpublishAllPackages() Method You use the  UnpublishAllPackages()  method to cancel customization of an            Acumatica ERP instance. Syntax public void UnpublishAllPackages() Example The following code logs in to an  Acumatica ERP instance and cancels all customization projects that is currently applied to the         instance. &#xA;var webserviceurl = &quot;http://localhost/AcumaticaInstance/api/ServiceGate.asmx&quot;;&#xA;var username = &quot;admin&quot;;&#xA;var password = &quot;123&quot;;&#xA;&#xA;var client = new ServiceGate.ServiceGate&#xA;{&#xA; Url = webserviceurl,&#xA; CookieContainer = new CookieContainer(),&#xA; Timeout = (int) TimeSpan.FromMinutes(5).TotalMilliseconds&#xA;};&#xA;&#xA;var loginResult = client.Login(username, password);&#xA;&#xA;if (loginResult.Code == ErrorCode.OK)&#xA;{&#xA; client.UnpublishAllPackages();&#xA;} Usage Notes The method removes all customization changes from the file system, regardless of the tenants         where the customization projects were published. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="0d6a24f8-6467-5e05-ec85-714b495013f3" RecordSourceID="22377" />
		<row PageID="35ddae49-b8ef-48b8-842e-a2b82424b224" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="60ab8c05-da68-8b38-329e-158b60db7b71" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You use the <tt>UploadPackage()</tt> method to import a customization project from the file system. The method saves the content of an uploaded deployment package to the database of an instance of Acumatica ERP.
==Syntax==<source lang="csharp">public void UploadPackage(string packageName, byte[] packageContents, 
                                    bool replaceIfPackageExists)</source>
==Parameters==[anchor|#_465e64c7-dd80-4e25-a3ce-fec8361517bf]
*<tt>packageName</tt>: The name of the customization project to be saved in the database.
*<tt>packageContents</tt>: An array of bytes that contains the content of the deployment package <tt>.zip</tt> file and will be saved in the database.
*<tt>replaceIfPackageExists</tt>: An indicator of whether the customization platform must replace an existing customization project with the same name in the database. If the value of this parameter is ''true'' and the database contains a customization project with the same name, the platform replaces the project with the specified content. If the value of the parameter is ''false'' and the database contains a customization project with the same name, an exception occurs.

==Example==
The following code logs in to an Acumatica ERP instance, loads the <tt>C:\package1.zip</tt> file content, and saves or updates the ''package1'' customization project in the database of the instance.{{{{
var webserviceurl = "http://localhost/AcumaticaInstance/api/ServiceGate.asmx";
var username = "admin";
var password = "123";
var packageName = "package1";
var packageContents = File.ReadAllBytes("C:\package1.zip");
var replaceIfPackageExists = true;

var client = new ServiceGate.ServiceGate
{
  Url = webserviceurl,
  CookieContainer = new CookieContainer(),
  Timeout = (int) TimeSpan.FromMinutes(5).TotalMilliseconds
};

var loginResult = client.Login(username, password);

if (loginResult.Code == ErrorCode.OK)
{
  client.UploadPackage(packageName, packageContents, replaceIfPackageExists);
}

}}}}
==Usage Notes==[anchor|#_034a61e9-a13e-489d-9974-82ecbd4c2fb9]
If there are multiple tenants in an instance of Acumatica ERP, this method affects the tenant to which the service is logged in. To log in to a specific tenant, add the tenant name to the user name using the following format: ''user@MyTenant''.]]></column>
			<column name="PlainText"><![CDATA[UploadPackage() Method You use the  UploadPackage()  method to import a customization project         from the file system. The method saves the content of an uploaded deployment package to the         database of an instance of  Acumatica ERP. Syntax public void UploadPackage(string packageName, byte[] packageContents, 
                                    bool replaceIfPackageExists) Parameters packageName : The name of the customization project to be saved in the      database. packageContents : An array of bytes that contains the content of the           deployment package  .zip  file and will be saved in the database. replaceIfPackageExists : An indicator of whether the customization           platform must replace an existing customization project with the same name in the           database. If the value of this parameter is  true  and the database contains a           customization project with the same name, the platform replaces the project with the           specified content. If the value of the parameter is  false  and the database contains           a customization project with the same name, an exception occurs. Example The following code logs in to an  Acumatica ERP instance, loads the  C:\package1.zip  file content, and saves or         updates the  package1  customization project in the database of the instance. 
var webserviceurl = "http://localhost/AcumaticaInstance/api/ServiceGate.asmx";
var username = "admin";
var password = "123";
var packageName = "package1";
var packageContents = File.ReadAllBytes("C:\package1.zip");
var replaceIfPackageExists = true;

var client = new ServiceGate.ServiceGate
{
  Url = webserviceurl,
  CookieContainer = new CookieContainer(),
  Timeout = (int) TimeSpan.FromMinutes(5).TotalMilliseconds
};

var loginResult = client.Login(username, password);

if (loginResult.Code == ErrorCode.OK)
{
  client.UploadPackage(packageName, packageContents, replaceIfPackageExists);
}
 Usage Notes If there are multiple tenants in an instance of  Acumatica ERP, this method affects the tenant to which the service is logged in. To log in to a specific tenant, add the tenant name to the user name using the following format:  user@MyTenant . ]]></column>
		</row>
		<row PageID="a9199d94-41fc-4543-b769-9574421d8d74" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="32be4602-897f-f197-e13c-e32fae8a8086" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can see whether a customization project is applied to the application on the Welcome screen, with more detailed information available on the [HelpRoot_FormReference\SM_20_45_05|Customization Projects] ([~/?ScreenId=SM204505|SM204505]) form. To detect whether an Acumatica ERP instance is customized, perform the following actions:[anchor|#ul_ifl_j4z_jw]
#Launch the application in the browser.
#In the bottom of the Welcome screen, check for the presence of the '''Customized''' string.
#:If the string exists, it is followed by the names of the customization projects that are currently published, as shown in the following screenshot.[anchor|#fig_d4j_ypz_jw][anchor|#image_upm_hqz_jw][image:CustomizationPlatform/images/CG_GL_Stages_Explore_CustERP_01.png|popup|Viewing the customization projects that are currently published|450px]
#Enter your credentials and click '''Sign In'''.
#Navigate to '''System &gt; Customization &gt; Manage &gt; Customization Projects'''.
#On the form, view the list of the customization projects that are accessible in the application for your tenant (see the following screenshot).[anchor|#image_xqk_dtz_jw][image:CustomizationPlatform/images/CG_GL_Stages_Explore_CustERP_02.png|popup|Viewing the list of customization projects|450px]
#:((({S:Warn}If a customization project that you know to be published is absent in the list, the project may be published for another tenant. See [HelpRoot_Dev_Customization\CG_Platform_Project_MultiCompany|Customization of a Multitenant Site] for details.
)))
#In the '''Published''' column of the list, notice which customization projects have the check box selected. These are the projects that are currently published.
#Use the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor] to explore the content of each published customization project. To open a project in the editor, click the name of the project.
{br}

You can also view the names of the customization projects that are currently published in the '''About Acumatica''' dialog box, as the following screenshot shows.[anchor|#fig_lzt_3vz_jw][anchor|#image_jwg_4vz_jw][image:CustomizationPlatform/images/CG_GL_Stages_Explore_CustERP_03.png|popup|Viewing the list of the customization projects that are currently published|217px]To open the dialog box, click '''Help &gt; About''' on a form of Acumatica ERP.]]></column>
			<column name="PlainText"><![CDATA[To Detect Whether a Customization Project Is Applied to the Application You can see whether a customization project is applied to the application on the Welcome       screen, with more detailed information available on the   ([~/?ScreenId=SM204505|SM204505]) Customization Projects (SM204505) form. To detect whether       an  Acumatica ERP instance is customized, perform the following actions: Launch the application in the browser. In the bottom of the Welcome screen, check for the presence of the              Customized  string. If the string exists, it is followed by the             names of the customization projects that are currently published, as shown in the             following screenshot. Viewing the customization projects that are currently published Enter your credentials and click  Sign In . Navigate to  System > Customization > Manage > Customization Projects . On the form, view the list of the customization projects that are accessible in the           application for your tenant (see the following screenshot). Viewing the list of customization projects If a customization project that you know to be published is absent in the             list, the project may be published for another tenant. See  Customization of a Multitenant Site for details. In the  Published  column of the list, notice which customization           projects have the check box selected. These are the projects that are currently           published. Use the   Customization Project                         Editor to explore the content of each           published customization project. To open a project in the editor, click the name of the           project. You can also view the names of the customization projects that are currently published in the          About Acumatica  dialog box, as the following screenshot shows. Viewing the list of the customization projects that are currently published To open the dialog box, click  Help > About  on a form of  Acumatica ERP. ]]></column>
		</row>
		<row PageID="c6d4024f-c612-441c-9491-2ca8c0088554" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="41099ace-9074-43ac-38b1-ccc67b7fd9f3" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can specify a prefix that should be added to any object of the customization project. When validation of the customization project is performed, the platform checks all objects to be sure they have the added prefix. {br}

To add a prefix for a customization project, do the following:[anchor|#_d77e3c23-d3f9-49bc-801d-612bad6322c3]
#On the main menu of the Customization Project Editor, select '''File &gt; Validate Project Prefix'''.
#:The '''Customization Project Prefix''' dialog box opens.
#In the '''Project Prefix''' box, add the prefix for the customization project. The prefix is two to four characters in length and can be made up of any of the 26 Latin letters (''A'' through ''Z''). Only capital letters are allowed.
#Click '''Save'''.
#:You can perform validation of the project&rsquo;s items to check for the added prefix. To do this, in the '''Customization Project Prefix''' dialog box, click the '''Validate Project Items''' button. In the '''Validation Result''' area, the result of the validation appears.

==Format of the Validation Result ==
If errors or warnings have been detected during validation, the validation result has the following format:[anchor|#_4702b5fd-2e4b-49fb-b7df-b04df9f123cc]
*&lt;CustomizationProjectName&gt;
**&lt;CustomizationRuleName&gt;
***&lt;PathToTheDLL&gt; | &lt;ProjectItemType&gt; | &lt;NameOfTheProjectItem&gt;
***:List of rules broken by the specified item.
]]></column>
			<column name="PlainText"><![CDATA[To Manage Prefixes in a Customization Project  You can specify a prefix that should be added to any object of the customization                 project. When validation of the customization project is performed, the platform                 checks all objects to be sure they have the added prefix.  To add a prefix for a customization project, do the following: On the main menu of the Customization Project Editor, select  File > Validate Project Prefix . The  Customization Project Prefix  dialog                         box opens. In the  Project Prefix  box, add the prefix for the customization project. The prefix is                     two to four characters in length and can be made up of any of the 26 Latin                     letters ( A  through  Z ). Only capital letters are allowed. Click  Save . You can perform validation of the project's                         items to check for the added prefix. To do this, in the                              Customization Project Prefix  dialog box, click                         the  Validate Project Items  button. In the                              Validation Result  area, the result of the                         validation appears. Format of the Validation Result  If errors or warnings have been detected during validation, the validation result has                 the following format: <CustomizationProjectName> <CustomizationRuleName> <PathToTheDLL> | <ProjectItemType> |                                         <NameOfTheProjectItem> List of rules broken by the                                         specified item. ]]></column>
		</row>
		<row PageID="8285172e-d3b1-48d9-bcc1-5d20e39cc3f0" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="86f88994-166d-ad6e-1551-e1907ab3a023" RecordSourceID="22377">
			<column name="Content"><![CDATA[
This section explains how to add a custom feature switch into an ISV solution. For details about custom feature switches, see [HelpRoot_Dev_Customization\HowAddFeature|Custom Feature Switches].
==Before You Proceed==
Before you start adding a switch for a custom feature, the following prerequisite steps should be performed:[anchor|#_286774be-3cf3-4e9e-8ebe-1b2426c3ab4e]
*The new custom feature should be developed and integrated into Acumatica ERP.
*You should have Acumatica Developer Network (ADN) Level 2 or Level 3. For details, see the [https://adn.acumatica.com/why-join-adn/|Acumatica Developer Network] website.
*You should contact the Independent Software Vendor (ISV) team or Technical Contract Manager to create a Stock Keeping Unit (SKU) and sign a contract.

For the custom feature switch to work properly, make sure you have done the following:[anchor|#_7e0f6def-8475-4a02-8524-fcb8d50dd666]
*Defined access rights for all custom forms if the feature switch you are developing restricts these custom forms partially (that is, it restricts only some caches, actions, or fields on the form, rather than restricting access to the forms as a whole)
*Defined access rights for all standard forms that the custom feature switch restricts completely or partially
*Included the defined access rights in your customization project

For details on access rights, see [HelpRoot_Administration\US__mng_Roles|Managing User Access Rights]. For details on adding access rights to a customization project, see [HelpRoot_Dev_Customization\CG_GL_Items_AccessRights|Access Rights].
==To Add a Custom Feature Switch==
To add a custom feature switch, do the following:[anchor|#_c63d1fb6-5c33-42e1-9d04-2f0c91cf0634]
#Customize the Enable/Disable Features (CS101000) form by adding a check box with the name of the custom feature on it. For details, see [HelpRoot_Dev_Customization\CG_GL_UI_PXForm_AddBox|To Add a Box for a Data Field].
#Add a column to the <tt>FeaturesSet</tt> DAC by using a cache extension, and add a related column to the database. The name of the new column must consist of the {{Usr}} prefix and the feature name. For details, see [HelpRoot_Dev_Customization\CG_GL_BL_DAC_AddCustomField|To Add a Custom Data Field]. As a result, you get the {{FeatureSetExt}} class.
#Create your <tt>Features.xml</tt> file with information about your feature, as shown in the following example.{{{{&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;Features Type="FeatureExtTest.FeaturesSetExt" Key="0"&gt;
	&lt;Feature Name="UsrTestFeature"&gt;
		&lt;Access ScreenID="CR102000"/&gt;
		&lt;Access ScreenID="TT999999"/&gt;
		&lt;Access ScreenID="SM201510" ActionName="installLicense"/&gt;
	&lt;/Feature&gt;
&lt;/Features&gt;
}}}}
#:((({S:Warn}The name of the custom feature in the <tt>FeaturesSet</tt> table column and the<tt> Features.xml</tt> file must be the same.
)))
#Add the <tt>Features.xml</tt> file to your Visual Studio project in the folder with the same name as the namespace that holds the <tt>FeaturesSetExt</tt> class (which contains the database extension for the <tt>FeaturesSet</tt> table). That is, the <tt>Feautres.xml</tt> file and the <tt>FeaturesSetExt</tt> class must be in the same namespace.
#:For example, suppose that you have a Visual Studio project and that in the root folder you have defined the <tt>FeaturesSetExt</tt> class; then you should add the <tt>Features.xml</tt> files to the same project folder, as shown in the following screenshot.[anchor|#_e0f03e1e-adf3-417c-b9ce-2b6309d93350][image:CustomizationPlatform/images/FeaturesXmlLocation.png|popup|Location of the Features.xml files|400px]
#:For details about the <tt>Features.xml</tt> file structure, see [HelpRoot_Dev_Customization\CG_FeatureFile|The Features.xml File].
#Set the '''Build Action''' property of the <tt>Features.xml</tt> file in Visual Studio to ''Embedded Resource''.
]]></column>
			<column name="PlainText"><![CDATA[To Add a Custom Feature Switch This section explains how to add a custom feature switch into an ISV solution. For                 details about custom feature switches, see  Custom Feature Switches. Before You Proceed Before you start adding a switch for a custom feature, the following prerequisite                 steps should be performed: The new custom feature should be developed and integrated into  Acumatica ERP. You should have Acumatica Developer Network (ADN) Level 2 or Level 3. For                     details, see the  Acumatica Developer Network Acumatica Developer Network                     website. You should contact the Independent Software Vendor (ISV) team or Technical                     Contract Manager to create a Stock Keeping Unit (SKU) and sign a contract. For the custom feature switch to work properly, make sure you have done the                 following: Defined access rights for all custom forms if the feature switch you are                     developing restricts these custom forms partially (that is, it restricts only                     some caches, actions, or fields on the form, rather than restricting access to                     the forms as a whole) Defined access rights for all standard forms that the custom feature switch                     restricts completely or partially Included the defined access rights in your customization project For details on access rights, see  Managing User Access Rights. For                 details on adding access rights to a customization project, see  Access Rights. To Add a Custom Feature Switch To add a custom feature switch, do the following: Customize the Enable/Disable Features (CS101000) form by adding a check box with                     the name of the custom feature on it. For details, see  To Add a Box for a Data Field. Add a column to the  FeaturesSet  DAC by using a cache                     extension, and add a related column to the database. The name of the new column                     must consist of the  Usr  prefix and the feature name. For                     details, see  To Add a Custom Data Field. As a result, you                     get the  FeatureSetExt  class. Create your  Features.xml  file with information about your                     feature, as shown in the following                         example. <?xml version="1.0" encoding="utf-8"?>
<Features Type="FeatureExtTest.FeaturesSetExt" Key="0">
	<Feature Name="UsrTestFeature">
		<Access ScreenID="CR102000"/>
		<Access ScreenID="TT999999"/>
		<Access ScreenID="SM201510" ActionName="installLicense"/>
	</Feature>
</Features> The                         name of the custom feature in the  FeaturesSet  table                         column and the  Features.xml  file must be the                         same. Add the  Features.xml  file to your Visual Studio project in                     the folder with the same name as the namespace that holds the                          FeaturesSetExt  class (which contains the database                     extension for the  FeaturesSet  table). That is, the                          Feautres.xml  file and the                          FeaturesSetExt  class must be in the same namespace. For                         example, suppose that you have a Visual Studio project and that in the root                         folder you have defined the  FeaturesSetExt  class; then                         you should add the  Features.xml  files to the same                         project folder, as shown in the following screenshot. Location of the Features.xml files For details about the  Features.xml  file structure,                         see  The Features.xml File. Set the  Build Action  property of the                          Features.xml  file in Visual Studio to  Embedded                         Resource . ]]></column>
		</row>
		<row PageID="f8988de5-6944-46bb-9cf7-3d387bbf5dae" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="c969190d-4eb7-0f68-3888-ddd7d618ebef" RecordSourceID="22377">
			<column name="Content"><![CDATA[[anchor|#_9cd8e739-282e-4a31-a41c-720e582a9252]
You can develop a custom feature and integrate it in Acumatica ERP by using a customization project. After you develop this custom feature, you might want to add a switch for this feature—that is, a check box that the administrator can select to enable the feature—on the [HelpRoot_FormReference\CS_10_00_00|Enable/Disable Features] ([~/?ScreenId=CS100000|CS100000]) form. With this feature switch added, the administrator can enable the feature to make the custom forms associated with the feature available or disable the feature to make the custom forms unavailable.
==Adding a Custom Feature: Process Overview==
After you have developed a custom feature and integrated it in Acumatica ERP, your feature is reviewed by the ISV team, and information about the feature is added to the Acumatica Licensing Server. After that, you can customize the Enable/Disable Features (CS100000) form, the <tt>FeaturesSet</tt> table, and the<tt> Features.xml</tt> file to add information about your feature to the project. The process of exchanging information with the Acumatica Licensing Server is shown in the diagram below.[anchor|#_5f56a017-93f2-45b0-bbf2-e2b5d1f1c687][anchor|#_0fb891fe-d9b5-4c1c-ace4-6ce38f3724d0][image:CustomizationPlatform/images/FeaturesSet.png|popup|Adding a custom feature|400px]
After you have completed all these steps, when your customer purchases your custom feature, you should notify the ISV team about it (for example, by using your ISV solution&rsquo;s page on the partner portal).]]></column>
			<column name="PlainText"><![CDATA[Custom Feature Switches You can develop a custom feature and integrate         it in  Acumatica ERP by using a customization project. After you develop this custom feature, you might want         to add a switch for this feature—that is, a check box that the administrator can         select to enable the feature—on the   ([~/?ScreenId=CS100000|CS100000]) Enable/Disable Features         (CS100000) form. With this feature switch added, the administrator can enable the feature to         make the custom forms associated with the feature available or disable the feature to make         the custom forms unavailable. Adding a Custom Feature: Process Overview After you have developed a custom feature and integrated it in  Acumatica ERP, your feature is reviewed by the ISV team, and information about the feature is added to         the Acumatica Licensing Server. After that, you can customize the Enable/Disable Features         (CS100000) form, the  FeaturesSet  table, and the            Features.xml  file to add information about your feature to the project. The         process of exchanging information with the Acumatica Licensing Server is shown in the         diagram below. Adding a custom feature After you have completed all these steps, when your customer purchases your custom feature,         you should notify the ISV team about it (for example, by using your ISV solution's page on         the partner portal). ]]></column>
		</row>
		<row PageID="9ce76518-8acc-46d2-97c6-f909f5514df7" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="ab008c7b-5980-9b1b-a3c4-fb684e34da4c" RecordSourceID="22377">
			<column name="Content"><![CDATA[Every instance of Acumatica ERP has a <tt>Feature.xml</tt> file, located in the <tt>PX.Data.dll</tt> library. This file contains the description of the out-of-the-box features that are available in the instance and displayed on the Enable/Disable Features (CS100000) form. 
Each feature is represented in the <tt>Features.xml</tt> file by a {{Feature}} element with a number of {{Access}} subelements. (For an example, see the following code.){{{{&lt;Feature Name="Branch"&gt;
   &lt;Access ScreenID="GL201500"
           CacheName="PX.Objects.GL.Ledger"
           FieldName="DefBranchID" /&gt;
   &lt;Access ScreenID="GL101010" /&gt;
   &lt;Access FieldClass="BRANCH"/&gt;
&lt;/Feature&gt;
}}}}
For all custom features you are implementing, you should create a new <tt>Features.xml</tt> file of the same structure that contains information about all new features.
==Targets for Rules==
By using the {{Access}} element, you can set up rules for the following items:[anchor|#_da91df86-d599-4b21-b620-876b20e8277e]
*A specific page, as shown in the following example.{{{{&lt;Access ScreenID="AP506500" /&gt;
}}}}
*All pages whose identifiers start with the provided value; see the following code line.{{{{&lt;Access ScreenID="IN" /&gt;
}}}}
*A specific data field on a page, as shown below.{{{{&lt;Access ScreenID="GL201500"
        CacheName="PX.Objects.GL.Ledger"
        FieldName="PostInterCompany" /&gt;
}}}}
*Data fields having a specific field class. (See the following example.){{{{&lt;Access FieldClass="BRANCH"/&gt;
}}}}
*:To apply this rule to a field, you should specify the name of the field class in the <tt>PXUIField</tt> attribute added to the field definition in the data access class, as follows.{{{{[PXUIField(DisplayName = "Active", FieldClass="BRANCH")]
public bool? Active{
    get;
    set;
}
}}}}
*A specific action on a page, as demonstrated in the following code line.{{{{ &lt;Access ScreenID="AR303000" ActionName="NewSalesOrder"/&gt;
}}}}
*A user role, as the following example shows.{{{{&lt;Access Role="Consultant"/&gt;
}}}}
]]></column>
			<column name="PlainText"><![CDATA[The Features.xml File Every instance of  Acumatica ERP    has a  Feature.xml  file, located in the  PX.Data.dll     library. This file contains the description of the out-of-the-box features that are available in    the instance and displayed on the Enable/Disable Features (CS100000) form.  Each feature is     represented in the  Features.xml  file by a  Feature  element     with a number of  Access  subelements. (For an example, see the following     code.) <Feature Name="Branch">
   <Access ScreenID="GL201500"
           CacheName="PX.Objects.GL.Ledger"
           FieldName="DefBranchID" />
   <Access ScreenID="GL101010" />
   <Access FieldClass="BRANCH"/>
</Feature> For     all custom features you are implementing, you should create a new       Features.xml  file of the same structure that contains information about     all new features. Targets for Rules By using the  Access  element, you can set up rules for the following     items: A specific page, as shown in the following      example. <Access ScreenID="AP506500" /> All pages whose identifiers start with the provided value; see the following code      line. <Access ScreenID="IN" /> A specific data field on a page, as shown      below. <Access ScreenID="GL201500"
        CacheName="PX.Objects.GL.Ledger"
        FieldName="PostInterCompany" /> Data fields having a specific field class. (See the following       example.) <Access FieldClass="BRANCH"/> To apply this rule to a       field, you should specify the name of the field class in the  PXUIField        attribute added to the field definition in the data access class, as      follows. [PXUIField(DisplayName = "Active", FieldClass="BRANCH")]
public bool? Active{
    get;
    set;
} A specific action on a page, as demonstrated in the following code      line.  <Access ScreenID="AR303000" ActionName="NewSalesOrder"/> A user role, as the following example      shows. <Access Role="Consultant"/> ]]></column>
		</row>
		<row PageID="e6a2428f-23e1-4765-8746-bcf5848eb467" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="8d2c1a9f-b44d-6dd0-53d3-4f88734a8a70" RecordSourceID="22377">
			<column name="Content"><![CDATA[
To apply a customization project to an instance of Acumatica ERP, you have to publish the customization project. You can also publish multiple customization projects at once; see [HelpRoot_Dev_Customization\CG_Platform_Project_MultiCust|Simultaneous Use of Multiple Customizations] for details.
When you publish a customization project, the system applies the changes in the project to the website. After the customization project has been published, users see the modified Acumatica ERP. The changes apply to the website of Acumatica ERP and therefore affect all tenants in the system (see [HelpRoot_Dev_Customization\CG_Platform_Project_MultiCompany|Customization of a Multitenant Site] for details).{br}

The Acumatica Customization             Platform provides the following ways to manage the publication process:[anchor|#ol_ert_4pk_zv]
#You can develop and include in a customization project the custom code that is executed during the project publication. See [HelpRoot_Dev_Customization\CG_Platform_Framework_PlugIn|Custom Processes During Publication of a Customization] for details.
#By using additional attributes in DAC extensions, you can specify how the system should apply the original and custom attributes to the field. See [HelpRoot_Dev_Customization\CG_Platform_Framework_CS_DACExt_FieldAttributes|Customization of Field Attributes in DAC Extensions] for details.
#By using SQL script attributes, you can control the execution of batches in SQL scripts. See [HelpRoot_Dev_Customization\CG_GL_Items_DBScripts_Adding_Attr|Using the SQL Script Attributes] for details.
{br}

You can cancel the publication of the project and publish the project again, which you might do often during the development and testing of the customization. The application domain does not restart every time you publish the customization project because [HelpRoot_Dev_Customization\CG_Platform_TO_Code_RunTime|Run-Time Compilation] is enabled for the website by default.{br}

Detailed instructions are provided in the following topics:[anchor|#ul_oxf_mlt_fq]
*[HelpRoot_Dev_Customization\CG_GL_Projects_Publishing_Single|To Publish a Single Project]
*[HelpRoot_Dev_Customization\CG_GL_Projects_Publishing_Multiple|To Publish Multiple Projects]
*[HelpRoot_Dev_Customization\CG_GL_Projects_Preparing|To Prepare a Project for Publication]
*[HelpRoot_Dev_Customization\CG_GL_Projects_Publishing_Current|To Publish the Current Project]
*[HelpRoot_Dev_Customization\CG_GL_Projects_Publishing_Cleanup|To Publish the Current Project with a Cleanup Operation]
*[HelpRoot_Dev_Customization\CG_GL_Projects_MultiCompany|To Publish a Customization for a Multitenant Site]
*[HelpRoot_Dev_Customization\CG_GL_Projects_Publishing_CheckingCompatibility|Validating Customization Code]
*[HelpRoot_Dev_Customization\CG_GL_Projects_ViewingPublished|To View a Published Customization]
*[HelpRoot_Dev_Customization\CG_GL_Projects_Unpublishing|To Unpublish a Customization]
]]></column>
			<column name="PlainText"><![CDATA[Publishing Customization Projects To apply a customization project to an instance of  Acumatica ERP, you have to publish the customization project. You can also publish multiple customization       projects at once; see  Simultaneous Use of Multiple Customizations for details. When you publish a customization project, the system applies the changes in the project to         the website. After the customization project has been published, users see the modified  Acumatica ERP. The changes apply to the website of  Acumatica ERP and therefore affect all tenants in the system (see  Customization of a Multitenant Site for details). The  Acumatica Customization             Platform provides the following ways to manage the publication process: You can develop and include in a customization project the custom code that is             executed during the project publication. See  Custom Processes During Publication of a Customization for details. By using additional attributes in DAC extensions, you can specify how the system             should apply the original and custom attributes to the field. See  Customization of Field Attributes in DAC Extensions for details. By using SQL script attributes, you can control the execution of batches in SQL             scripts. See  Using the SQL Script Attributes for details. You can cancel the publication of the project and publish the project again, which you         might do often during the development and testing of the customization. The application         domain does not restart every time you publish the customization project because  Run-Time Compilation is enabled for the website by default. Detailed instructions are provided in the following topics: To Publish a Single ProjectTo Publish Multiple ProjectsTo Prepare a Project for PublicationTo Publish the Current ProjectTo Publish the Current Project with a Cleanup OperationTo Publish a Customization for a Multitenant SiteValidating Customization CodeTo View a Published CustomizationTo Unpublish a Customization]]></column>
		</row>
		<row PageID="b46ba682-01af-42ff-bd94-c5b4d3d5c066" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="402dec91-c257-34bf-a040-dcb1264827c7" RecordSourceID="22377">
			<column name="Content"><![CDATA[
Before you publish a customization project, we recommend that you make sure you have included all the needed changes in the customization project. To do this, you should take the following actions:[anchor|#ul_plj_mwf_fq]
*Make sure that you have added all custom files to the project and uploaded the latest version of the files to the project. 
*Make sure that the database schema is updated in the customization project. You may have modified custom tables by using a database management tool, such as SQL Management Studio. On the page toolbar of the Database Scripts page, click '''Reload From Database'''. This action regenerates the database table schema of the custom tables. 
*Open the Site Map page, make sure that you have added the needed site map nodes to the project. If you have modified the site map nodes after you have added them to the project, click '''Reload From Database''' to update the customization project.
*Make sure that all other objects (such as generic inquiries, system locales, integration scenarios, shared reusable filters, access rights, wikis, web service endpoints, analytical reports, push notifications) are updated in the project. If an object was changed in the application instance, open the appropriate page of the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor], and click '''Reload From Database''' on the page toolbar to update the corresponding item in the project. (See [HelpRoot_Dev_Customization\CG_GL_Projects_Updating|To Update a Project] for details.)
]]></column>
			<column name="PlainText"><![CDATA[To Prepare a Project for Publication Before you publish a customization project, we recommend that you make sure you have included    all the needed changes in the customization project. To do this, you should take the following    actions: Make sure that you have added all custom files to the project and uploaded the latest version     of the files to the project.  Make sure that the database schema is updated in the customization project. You may have     modified custom tables by using a database management tool, such as SQL Management Studio. On     the page toolbar of the Database Scripts page, click  Reload From     Database . This action regenerates the database table schema of the custom tables.  Open the Site Map page, make sure that you have added the needed site map nodes to the     project. If you have modified the site map nodes after you have added them to the project, click       Reload From Database  to update the customization project. Make sure that all other objects (such as generic inquiries, system locales, integration     scenarios, shared reusable filters, access rights, wikis, web service endpoints, analytical     reports, push notifications) are updated in the project. If an object was changed in the     application instance, open the appropriate page of the   Customization Project                         Editor, and click  Reload From Database      on the page toolbar to update the corresponding item in the project. (See  To Update a Project for details.) ]]></column>
		</row>
		<row PageID="739ba5bb-cf0e-40ff-91ca-4f1f1723db1f" Language="en-US" PageRevisionID="1" Content="&#xA;You can publish a single customization project by using the '''Publish''' action on the [HelpRoot_FormReference\SM_20_45_05|Customization Projects] ([~/?ScreenId=SM204505|SM204505]) form.{br}&#xA;&#xA;To to do this, perform the following actions:[anchor|#ol_rf4_gwc_jq]&#xA;# Navigate to '''System &amp;gt; Customization &amp;gt; Manage &amp;gt; Customization Projects'''.&#xA;#In the project list, select the check box (in the unlabeled column) for the needed customization project, as the screenshot below shows.&#xA;#Clear any selected check boxes in this column for other customization projects.&#xA;#:((({S:Warn}All previously published projects that are not selected will be unpublished.&#xA;)))&#xA;#Click '''Publish''' on the form toolbar to initiate the publication of the selected project.[anchor|#image_ncg_zwc_jq][image:CustomizationPlatform/images/CG_GL_Projects_Publishing_Single.png|popup|Publishing a single customization project|450px]&#xA;" PlainText="To Publish a Single Project You can publish a single customization project by using the  Publish        action on the   ([~/?ScreenId=SM204505|SM204505]) Customization Projects (SM204505)       form. To to do this, perform the following actions:  Navigate to  System &gt; Customization &gt; Manage &gt; Customization Projects . In the project list, select the check box (in the unlabeled column) for the needed           customization project, as the screenshot below shows. Clear any selected check boxes in this column for other customization projects. All             previously published projects that are not selected will be unpublished. Click  Publish  on the form toolbar to initiate the publication of           the selected project. Publishing a single customization project " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="a99aaf29-58b7-b8fc-d9ee-6d7a80f3adaf" RecordSourceID="22377" />
		<row PageID="5484b428-f38f-4f3c-9a1d-041ec3b0739c" Language="en-US" PageRevisionID="1" PlainText="To Publish Multiple Projects To publish multiple customization projects, you perform the following actions on the   ([~/?ScreenId=SM204505|SM204505]) Customization Projects (SM204505) form:  Navigate to  System &gt; Customization &gt; Manage &gt; Customization Projects .  In the project list, select the check boxes (in the unlabeled column) for the           customization projects you want to publish. You can save these selections by clicking                Save  on the form toolbar. The form opens with the selections             that are previously saved in the database. Click  Publish  on the form toolbar to initiate publication of the           selected projects. All previously published projects that are not selected will be             unpublished. The platform merges the selected projects into one project and then publishes the       project. For more details, see  Performing the Publication Process and          Validating Customization Code. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="4f557692-5139-7590-e439-48446cf51afb" RecordSourceID="22377">
			<column name="Content"><![CDATA[
To publish multiple customization projects, you perform the following actions on the [HelpRoot_FormReference\SM_20_45_05|Customization Projects] ([~/?ScreenId=SM204505|SM204505]) form:[anchor|#ol_ctv_1xc_jq]
# Navigate to '''System &gt; Customization &gt; Manage &gt; Customization Projects'''.
# In the project list, select the check boxes (in the unlabeled column) for the customization projects you want to publish.
#:((({S:Warn}You can save these selections by clicking '''Save''' on the form toolbar. The form opens with the selections that are previously saved in the database.
)))
#Click '''Publish''' on the form toolbar to initiate publication of the selected projects.
#:((({S:Warn}All previously published projects that are not selected will be unpublished.
)))
The platform merges the selected projects into one project and then publishes the project. For more details, see [HelpRoot_Dev_Customization\CG_GL_Projects_Publishing_Understanding|Performing the Publication Process] and [HelpRoot_Dev_Customization\CG_GL_Projects_Publishing_CheckingCompatibility|Validating Customization Code].]]></column>
		</row>
		<row PageID="1c134c6b-5135-413c-980f-da66722b53f2" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="f809c35d-33b8-dabb-7a59-a631eea58f0c" RecordSourceID="22377">
			<column name="Content"><![CDATA[
When you run the publication process, the Acumatica Customization             Platform executes the process in the following stages:[anchor|#ol_ebk_jvc_jq]
#If you publish more than one customization project, the platform merges the projects into a single customization project.
#The platform validates the customization project. (See [HelpRoot_Dev_Customization\CG_GL_Projects_Publishing_CheckingCompatibility|Validating Customization Code] for details.)
#If the validation completes successfully, the platform applies the changes to the application instance when you click '''Publish''' in the '''Compilation''' window.

When the platform merges multiple projects, if different projects include customization for the same application object, the customization from the project with the highest level (an optional number assigned to each project) is added to the merged project. See [HelpRoot_Dev_Customization\CG_Platform_Project_MultiCust|Simultaneous Use of Multiple Customizations] for details.((({S:Warn}If you manage multiple customization projects and some projects are published, you do not have to unpublish any projects before other projects are published (leaving the check boxes selected for already-published projects in the list). On the [HelpRoot_FormReference\SM_20_45_05|Customization Projects] ([~/?ScreenId=SM204505|SM204505]) form, you just need to select any projects you want to publish and click '''Publish''' on the toolbar. If you clear the check box for a published project, it will be unpublished.
))){br}

After the publication is complete, you can view the content of the merged customization project by clicking the '''View Published''' button on the form toolbar of the [HelpRoot_FormReference\SM_20_45_05|Customization Projects] form. (See [HelpRoot_Dev_Customization\CG_GL_Projects_ViewingPublished|To View a Published Customization] for details.){br}

After the project is ready, the platform validates and compiles the customization code included in the project. If there are any validation errors, the system displays the error messages in the browser and doesn&rsquo;t compile the code. If the compilation completes successfully, you can click '''Publish''' in the '''Compilation''' window to apply the changes contained in the project items to the website.{br}

During the actual publication, the platform applies the changes to the application and database objects and updates the files in the website folder as follows:[anchor|#ul_vym_pq2_hq]
*The custom layout is applied to the forms of Acumatica ERP.
*The ''.cs'' files with the DAC extension code for the existing data access classes are generated and placed in the file system.
*The ''.cs'' files with the BLC extension code for the existing business logic are generated and placed in the file system.
*The ''.cs'' files with the custom code (<tt>Code</tt> items) are generated and placed in the file system.
*The custom files of the project are added to the website folder.
*The custom tables are created in the database, and custom SQL scripts are executed.
*The custom generic inquiries, reports, site map nodes, system locales, integration scenarios, shared reusable filters, access rights, wikis, web-service endpoints, and analytical reports are added to the database.
((({S:Warn}We recommend that you back up the database before you publish customization projects, because canceling publication doesn&rsquo;t revert changes made to the database. See [HelpRoot_Dev_Customization\CG_GL_Projects_Unpublishing|To Unpublish a Customization] for details.
)))
After the publication is complete, the application domain always restarts if the project includes assemblies, which are placed in the <tt>/Bin</tt> folder of the website. If you have no assemblies in the project, you can enable run-time compilation and publication will not cause a restart.{br}

If a published customization project contains classes derived from the <tt>CustomizationPlugin</tt> class, the platform launches the implemented custom processes after website files were updated and after the website was restarted. (See [HelpRoot_Dev_Customization\CG_Platform_Framework_PlugIn|Custom Processes During Publication of a Customization] for details.){br}

After you have published the customization project, the files with the customization code are updated in the file system, and you can work with them in MS Visual Studio. The <tt>.cs</tt> files with code are placed in the <tt>App&#95;RuntimeCode</tt> folder of the website.]]></column>
			<column name="PlainText"><![CDATA[Performing the Publication Process When you run the publication process, the  Acumatica Customization             Platform executes the process in the following stages: If you publish more than one customization project, the platform merges the projects into a     single customization project. The platform validates the customization project. (See  Validating Customization Code for details.) If the validation completes successfully, the platform applies the changes to the application         instance when you click  Publish  in the            Compilation  window. When the platform merges multiple projects, if different projects include customization for the       same application object, the customization from the project with the highest level (an       optional number assigned to each project) is added to the merged project. See  Simultaneous Use of Multiple Customizations for details. If you manage multiple         customization projects and some projects are published, you do not have to unpublish any         projects before other projects are published (leaving the check boxes selected for         already-published projects in the list). On the   ([~/?ScreenId=SM204505|SM204505]) Customization Projects (SM204505) form, you just need to select any projects you want to         publish and click  Publish  on the toolbar. If you clear the check box         for a published project, it will be unpublished. After the publication is complete, you can view the content of the merged customization project       by clicking the  View Published  button on the form toolbar of the   ([~/?ScreenId=SM204505|SM204505]) Customization Projects form. (See  To View a Published Customization for details.) After the project is ready, the platform validates and compiles the customization code included       in the project. If there are any validation errors, the system displays the error messages in       the browser and doesn't compile the code. If the compilation completes successfully, you can       click  Publish  in the  Compilation  window to apply       the changes contained in the project items to the website. During the actual publication, the platform applies the changes to the application and database       objects and updates the files in the website folder as follows: The custom layout is applied to the forms of  Acumatica ERP. The  .cs  files with the DAC extension code for the existing data access classes           are generated and placed in the file system. The  .cs  files with the BLC extension code for the existing business logic are           generated and placed in the file system. The  .cs  files with the custom code ( Code  items) are generated           and placed in the file system. The custom files of the project are added to the website folder. The custom tables are created in the database, and custom SQL scripts are executed. The custom generic inquiries, reports, site map nodes, system locales, integration           scenarios, shared reusable filters, access rights, wikis, web-service endpoints, and           analytical reports are added to the database. We recommend that you back up the database before you publish customization projects,    because canceling publication doesn't revert changes made to the database. See  To Unpublish a Customization for details. After the publication is complete, the application domain always restarts if the project       includes assemblies, which are placed in the  /Bin  folder of the website.       If you have no assemblies in the project, you can enable run-time compilation and publication       will not cause a restart. If a published customization project contains classes derived from the          CustomizationPlugin  class, the platform launches the implemented custom       processes after website files were updated and after the website was restarted. (See  Custom Processes During Publication of a Customization for details.) After you have published the customization project, the files with the customization code are       updated in the file system, and you can work with them in MS Visual Studio. The          .cs  files with code are placed in the          App_RuntimeCode  folder of the website. ]]></column>
		</row>
		<row PageID="e85d3412-b7e8-452d-8ef3-698a56222db9" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="91cb77d1-786b-3899-8cf0-d2d6a9ee4e8e" RecordSourceID="22377">
			<column name="Content"><![CDATA[
While the Acumatica Customization             Platform processes publication of a customization project, the platform validates the customization code included in the project. This validation of the code provides not only checking for syntax and semantics but also checking of the compatibility of the code included in the customization project with the original application code.{br}

If you have a customization project that works properly for the current version of Acumatica ERP and have upgraded an application instance to a newer version, the customization project might not work properly or might even prevent the website from starting after the upgrade. This could occur because the code of Acumatica ERP is continuously developed to implement new features or enhance existing functionality. Thus, the code of an updated instance of Acumatica ERP can become inconsistent with the code in a customization project. For example, if the signature of a method that is overridden in the customization code is changed in the original code, a run-time error may occur in the graph extension. As another example, modified or deleted database columns and tables might cause the functionality of a data access class extension to fail.{br}

The platform checks the compatibility of the code included in a customization project with the original application code every time it publishes the project. If there are any compatibility errors, the platform displays the warning and error messages in the '''Compilation''' window and stops the publication process. See [HelpRoot_Dev_Customization\CG_GL_Upgrading_Errors|Messages for Validation Errors] and [HelpRoot_Dev_Customization\CG_GL_Upgrading_Resolving|To Resolve an Issue Discovered During the Validation] for detailed information about, respectively, the error messages and the ways to fix the validation errors.]]></column>
			<column name="PlainText"><![CDATA[Validating Customization Code While the  Acumatica Customization             Platform processes publication of a customization project, the platform validates the customization    code included in the project. This validation of the code provides not only checking for syntax    and semantics but also checking of the compatibility of the code included in the customization    project with the original application code. If you have a customization project that works properly for the current version of  Acumatica ERP    and have upgraded an application instance to a newer version, the customization project might not    work properly or might even prevent the website from starting after the upgrade. This could occur    because the code of  Acumatica ERP is    continuously developed to implement new features or enhance existing functionality. Thus, the    code of an updated instance of  Acumatica ERP    can become inconsistent with the code in a customization project. For example, if the signature    of a method that is overridden in the customization code is changed in the original code, a    run-time error may occur in the graph extension. As another example, modified or deleted database    columns and tables might cause the functionality of a data access class extension to fail. The platform checks the compatibility of the code included in a customization project with the    original application code every time it publishes the project. If there are any compatibility    errors, the platform displays the warning and error messages in the      Compilation  window and stops the publication process. See  Messages for Validation Errors and  To Resolve an Issue Discovered During the Validation for    detailed information about, respectively, the error messages and the ways to fix the validation    errors. ]]></column>
		</row>
		<row PageID="4c750ed2-7741-47f6-9d54-136f7dc7198a" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="3822bebc-ce91-d56a-9068-08056dcff8ac" RecordSourceID="22377">
			<column name="Content"><![CDATA[
If you create a customization project in the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor], the best way to publish the customization project that is under development is to use the '''Publish Current Project''' menu command provided by the editor. This publication does not influence the publication of other customization projects that exist in the application instance.{br}

To publish the customization project that is currently open in the Customization Project Editor, perform one of the following actions:[anchor|#ul_xmb_sxc_jq]
*Use the Control+Space combination on the keyboard.
*In the editor menu, select '''Publish''' > '''Publish Current Project'''.
{br}

When you perform one of these actions, the platform initiates the publication of the project. If another customization project is already published, the platform merges the projects into a single project, and then compiles and validates the merged project. If the validation succeeds, the platform applies the merged customization to the application instance.{br}

You can publish the customization project as described above again after you have made any change to the project.]]></column>
			<column name="PlainText"><![CDATA[To Publish the Current Project If you create a customization project in the   Customization Project                         Editor, the       best way to publish the customization project that is under development is to use the          Publish Current Project  menu command provided by the editor. This       publication does not influence the publication of other customization projects that exist in       the application instance. To publish the customization project that is currently open in the  Customization Project Editor, perform one of the following actions: Use the Control+Space combination on the keyboard. In the editor menu, select  Publish Publish Current Project . When you perform one of these actions, the platform initiates the publication of the project.       If another customization project is already published, the platform merges the projects into a       single project, and then compiles and validates the merged project. If the validation       succeeds, the platform applies the merged customization to the application instance. You can publish the customization project as described above again after you have made any       change to the project. ]]></column>
		</row>
		<row PageID="4ee2a834-c0df-4112-8417-b139d927a3fa" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="798e7d0e-cc85-ed0d-c565-254ed3d58ca5" RecordSourceID="22377">
			<column name="Content"><![CDATA[
If a customization project contains a database script, during the project publication, the platform executes the script. For optimization purposes, to avoid the execution of database scripts during every publication of the project, the platform saves information about each script that has been executed at least once and has not yet been changed in the database, and omits the repeated execution of such scripts. You can force the platform to clean up all such information about previously executed scripts of a customization project and execute the scripts once more while publishing the project. This process is called publishing with cleanup.
==When to Publish with a Cleanup Operation==
Database scripts can be separated into two categories: those that modify the database schema, and those that modify data in database tables. The first kind of scripts are applied to the whole instance, so they are called ''database-level scripts''. The second kind of scripts modify the data of a single tenant for which the scripts are published, so these scripts are called ''tenant-level scripts''.{br}

When a customization project that contains database script customization items is published for the first time, a hash for each script is saved to the database. For a tenant-level script, the system also saves the tenant ID for which this script has been published. When the customization project is published again, the system compares the hash of each database script (and the tenant ID, if the script is tenant-level) in the current project to the hash (and tenant IDs, if applicable) of each database script in the database. If the hashes (for a database-level script) or hashes and tenant IDs (for tenant-level script) are equal, the script is not applied. The conditions for which different scripts are applied are shown in the following diagram.[anchor|#_344f5842-673e-486b-be57-dab90c9d2442][anchor|#_1b135c21-ed60-4d3c-8c25-3db7620d377f][image:CustomizationPlatform/images/PublishingScript.png|popup|Conditions for which scripts are applied|450px]
The system behavior with these scripts has the following outcomes:[anchor|#_9a7e69eb-9319-45dd-8d80-20577caa90ce]
*Even minor changes in a database script customization item may lead to the script being applied again.
*The same tenant-level script is not applied for the same tenant twice.
*When a customization project is published for another tenant, all tenant-level scripts are applied.
*A database-level script is never applied again for the same instance.

Publishing with cleanup applies all database scripts again, regardless of whether these scripts have ever been applied. You should use publishing with cleanup only if any changes were made outside of the Customization Project Editor to the tables that are affected by your custom database scripts.{br}

For example, suppose that you have added a database script that creates a new table in the database. Further suppose that you have published this customization project, and the table has been added to the database. Then you have removed this table from the database manually. To apply the script in the customization project and create the table again, publish the project with the cleanup option.
==To Perform Publishing with Cleanup==
To perform publishing with cleanup, do the following:[anchor|#ol_vfn_xd1_mw]
#Open the customization project in the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor] (see [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details).
#On the menu of the editor, click '''Publish &gt; Publish with Cleanup''', as shown in the screenshot below, to clean information about previously executed scripts of the project and initiate the process of publishing the customization project.[anchor|#image_vcs_pf1_mw][image:CustomizationPlatform/images/CG_GL_Projects_Publishing_Cleanup.png|popup|Publishing a customization project with a cleanup operation|411px]
]]></column>
			<column name="PlainText"><![CDATA[To Publish the Current Project with a Cleanup Operation If a customization project contains a database script, during the project publication,             the platform executes the script. For optimization purposes, to avoid the execution of             database scripts during every publication of the project, the platform saves information             about each script that has been executed at least once and has not yet been changed in             the database, and omits the repeated execution of such scripts. You can force the             platform to clean up all such information about previously executed scripts of a             customization project and execute the scripts once more while publishing the project.             This process is called publishing with cleanup. When to Publish with a Cleanup Operation Database scripts can be separated into two categories: those that modify the database                 schema, and those that modify data in database tables. The first kind of scripts are                 applied to the whole instance, so they are called  database-level                     scripts . The second kind of scripts modify the data of a single tenant                 for which the scripts are published, so these scripts are called  tenant-level                     scripts . When a customization project that contains database script customization items is                 published for the first time, a hash for each script is saved to the database. For a                 tenant-level script, the system also saves the tenant ID for which this script has                 been published. When the customization project is published again, the system                 compares the hash of each database script (and the tenant ID, if the script is                 tenant-level) in the current project to the hash (and tenant IDs, if applicable) of                 each database script in the database. If the hashes (for a database-level script) or                 hashes and tenant IDs (for tenant-level script) are equal, the script is not                 applied. The conditions for which different scripts are applied are shown in the                 following diagram. Conditions for which scripts are applied The system behavior with these scripts has the following outcomes: Even minor changes in a database script customization item may lead to the                     script being applied again. The same tenant-level script is not applied for the same tenant twice. When a customization project is published for another tenant, all tenant-level                     scripts are applied. A database-level script is never applied again for the same instance. Publishing with cleanup applies all database scripts again, regardless of whether                 these scripts have ever been applied. You should use publishing with cleanup only if                 any changes were made outside of the  Customization Project Editor to the tables that are affected by your custom database scripts. For example, suppose that you have added a database script that creates a new table                 in the database. Further suppose that you have published this customization project,                 and the table has been added to the database. Then you have removed this table from                 the database manually. To apply the script in the customization project and create                 the table again, publish the project with the cleanup option. To Perform Publishing with Cleanup To perform publishing with cleanup, do the following: Open the customization project in the   Customization Project                         Editor (see  To Open a Project for details). On the menu of the editor, click  Publish > Publish with Cleanup , as shown in the screenshot below, to clean information about                     previously executed scripts of the project and initiate the process of                     publishing the customization project. Publishing a customization project with a cleanup operation ]]></column>
		</row>
		<row PageID="f2cc0701-101e-48c1-8500-31eca30fea96" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="9080d9f5-5412-beb3-43c4-8c737e3360d1" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can publish a customization project for multiple tenants in a multitenant site; see [HelpRoot_Dev_Customization\CG_Platform_Project_MultiCompany|Customization of a Multitenant Site] for details. You use the [HelpRoot_FormReference\SM_20_45_05|Customization Projects] ([~/?ScreenId=SM204505|SM204505]) form to publish this customization.{br}

To share customization content stored exclusively in the database for multiple tenants, perform the following actions:[anchor|#ol_tqv_shp_k5]
#Navigate to '''System &gt; Customization &gt; Manage &gt; Customization Projects'''.
#In the table, select the check boxes in the rows that correspond to the customization projects that you need to publish for multiple tenants.
#On the toolbar of the form, click '''Publish &gt; Publish to Multiple Tenants'''.
#In the '''Publish to Multiple Tenants''' dialog box, which opens, do the following:
##In the '''Selected''' column, select check boxes for the tenants to which you want to apply the selected customization projects.
##To skip updating the site files, select the '''Apply Changes Only to Database (Skip Website Update)''' check box.
##:((({S:Warn}If you have published all the selected customization projects in the website for a single tenant at least once, you do not need to update website files. You can apply only the database changes.
)))
##To execute all database scripts of the selected customization projects, select the '''Execute All Database Scrips (Including Previously Executed)''' check box.
##:((({S:Warn}When the platform publishes a project that contains a database script, it executes the script and tries to avoid the execution of the script during every publication of the project, for optimization purposes. Therefore, the platform keeps information about each script that is executed at least once and has not yet been changed in the database, and omits the repeated execution of such scripts. If you run the publication with the '''Execute All Database Scrips (Including Previously Executed)''' check box selected, the platform cleans up such information about previously executed scripts and executes them once more while publishing the project.
)))
##Click '''OK'''.
{br}

The platform applies the customization content to each tenant selected in the dialog box. As a result, the published customization content is saved in the database for each selected tenant.]]></column>
			<column name="PlainText"><![CDATA[To Publish a Customization for a Multitenant Site You can publish a customization project for multiple tenants in a multitenant site; see  Customization of a Multitenant Site for details. You use the   ([~/?ScreenId=SM204505|SM204505]) Customization Projects (SM204505) form to publish this       customization. To share customization content stored exclusively in the database for multiple tenants, perform       the following actions: Navigate to  System > Customization > Manage > Customization Projects . In the table, select the check boxes in the rows that correspond to the customization           projects that you need to publish for multiple tenants. On the toolbar of the form, click  Publish > Publish to Multiple Tenants . In the  Publish to Multiple Tenants  dialog box, which opens, do           the following: In the  Selected  column, select check boxes for the tenants to               which you want to apply the selected customization projects. To skip updating the site files, select the  Apply Changes Only to                 Database (Skip Website Update)  check box. If you have published all                 the selected customization projects in the website for a single tenant at least                 once, you do not need to update website files. You can apply only the database                 changes. To execute all database scripts of the selected customization projects, select the                  Execute All Database Scrips (Including Previously Executed)                check box. When the platform publishes a project that contains a database script,                 it executes the script and tries to avoid the execution of the script during every                 publication of the project, for optimization purposes. Therefore, the platform keeps                 information about each script that is executed at least once and has not yet been                 changed in the database, and omits the repeated execution of such scripts. If you                 run the publication with the  Execute All Database Scrips (Including                   Previously Executed)  check box selected, the platform cleans up such                 information about previously executed scripts and executes them once more while                 publishing the project. Click  OK . The platform applies the customization content to each tenant selected in the dialog box. As       a result, the published customization content is saved in the database for each selected       tenant. ]]></column>
		</row>
		<row PageID="bd06aff2-4bb8-4ad5-af65-ad878f9e259c" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="10f5d1a0-4e51-fc65-cb5b-0d4774cad3d1" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can view the merged content of multiple customization projects that are currently published by using the [HelpRoot_Dev_Customization\CG_Platform_Tools_SM204505_Published|Published Customization] page of the [HelpRoot_FormReference\SM_20_45_05|Customization Projects] ([~/?ScreenId=SM204505|SM204505]) form.{br}

When you publish multiple projects at once, the platform merges the projects into a single project and then applies this project to the application instance. (See [HelpRoot_Dev_Customization\CG_GL_Projects_Publishing_Multiple|To Publish Multiple Projects] for details.) To view the content of the merged project, perform the following actions:[anchor|#ol_rsz_m4f_mw]
#Navigate to '''System &gt; Customization &gt; Manage &gt; Customization Projects'''.
#On the form toolbar, click '''View Published''' on the toolbar, as the following screenshot shows.[anchor|#image_axt_h1b_sr][image:CustomizationPlatform/images/CG_GL_Projects_ViewingPublished.png|popup|Opening the Published Customization page|450px]
The Published Customization page opens. The screenshot below shows two simultaneously published customization projects, HideSSN and POstatus. The Published Customization page shows the result of merging these projects.[anchor|#fig_ffq_tcb_sr][anchor|#image_r1j_zcb_sr][image:CustomizationPlatform/images/CG_Platform_Tools_SM204505_Published.png|popup|Viewing the merged XML code of published customization projects|450px]]]></column>
			<column name="PlainText"><![CDATA[To View a Published Customization You can view the merged content of multiple customization projects that are currently       published by using the  Published Customization Published Customization page of the   ([~/?ScreenId=SM204505|SM204505]) Customization Projects (SM204505) form. When you publish multiple projects at once, the platform merges the projects into a single       project and then applies this project to the application instance. (See  To Publish Multiple Projects for details.) To view the content of the       merged project, perform the following actions: Navigate to  System > Customization > Manage > Customization Projects . On the form toolbar, click  View Published  on the toolbar, as the           following screenshot shows. Opening the Published Customization page The Published Customization page opens. The screenshot below shows two simultaneously       published customization projects,  HideSSN  and  POstatus .       The Published Customization page shows the result of merging these projects. Viewing the merged XML code of published customization projects ]]></column>
		</row>
		<row PageID="ba27cee1-f36d-4cb1-9259-73993c6fe902" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="79b02ea8-528b-6249-f5ac-85355516b41d" RecordSourceID="22377">
			<column name="Content"><![CDATA[
When there are multiple customization projects published in an instance of Acumatica ERP, you can the following options to unpublish the projects:[anchor|#ul_kvr_psf_mw]
*[[#section_ynt_qtf_mw|Unpublish all projects]
*[[#section_bky_qtf_mw|Unpublish some projects]
{br}

In both cases, you use the [HelpRoot_FormReference\SM_20_45_05|Customization Projects] ([~/?ScreenId=SM204505|SM204505]) form as a starting point.[anchor|#section_ynt_qtf_mw]
==To Unpublish All Projects==
To remove all customization projects from publication, perform the following actions:[anchor|#ol_zch_ytf_mw]
#Navigate to '''System &gt; Customization &gt; Manage &gt; Customization Projects'''.
#On the form toolbar, click '''Unpublish All'''.
The platform removes all published customization from the Acumatica ERP instance. See [HelpRoot_Dev_Customization\CG_GL_Projects_Publishing_UnderstandingCancelling|Unpublishing Customization Projects] for details.[anchor|#section_bky_qtf_mw]
==To Unpublish Some Projects==
To remove some customization projects from publication, perform the following actions:[anchor|#ol_sqf_bwf_mw]
#Navigate to '''System &gt; Customization &gt; Manage &gt; Customization Projects'''.
#In the project list of the form, be sure the check boxes for projects that you want to remain published are selected, and clear the check boxes for the unnecessary projects.
#On the form toolbar, click '''Publish'''.
The platform removes all published customization from the Acumatica ERP instance, merges the content of the customization projects that are currently selected on the form, and applies the merged content to the instance.]]></column>
			<column name="PlainText"><![CDATA[To Unpublish a Customization When there are multiple customization projects published in an instance of  Acumatica ERP, you can the following options to unpublish the projects: Unpublish all projects Unpublish all projectsUnpublish some projects Unpublish some projectsIn both cases, you use the   ([~/?ScreenId=SM204505|SM204505]) Customization Projects       (SM204505) form as a starting point. To Unpublish All Projects To remove all customization projects from publication, perform the following actions: Navigate to  System > Customization > Manage > Customization Projects . On the form toolbar, click  Unpublish All . The platform removes all published customization from the  Acumatica ERP instance. See  Unpublishing Customization Projects for         details. To Unpublish Some Projects To remove some customization projects from publication, perform the following actions: Navigate to  System > Customization > Manage > Customization Projects . In the project list of the form, be sure the check boxes for projects that you want to             remain published are selected, and clear the check boxes for the unnecessary             projects. On the form toolbar, click  Publish . The platform removes all published customization from the  Acumatica ERP instance, merges the content of the customization projects that are currently selected on         the form, and applies the merged content to the instance. ]]></column>
		</row>
		<row PageID="df0be43d-8991-49bb-8a23-fcdb21ecd942" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="8d9f9737-8e12-9a6f-915a-77cc3e2667ba" RecordSourceID="22377">
			<column name="Content"><![CDATA[
When you unpublish all customization projects, the system reverses the changes introduced by the customization as follows:[anchor|#ul_mqz_rv2_hq]
*The forms of Acumatica ERP return to their original layout.
*The <tt>.cs</tt> files of the project with customization code are removed from the website folder in the file system.
*The custom files of these projects are removed from the website folder on the file system.
{br}

Some changes aren&rsquo;t reversed, as described below:[anchor|#ul_ytv_qtc_jq]
*Database changes remain in the database after the customization is unpublished. Thus, the generic inquiries, reports, changes to the site map, custom tables, custom database objects, and custom data remain in the database. Changes to the site map remain in the navigation menu of Acumatica ERP. If you need to remove these changes, you must do so manually.
*The <tt>.sln</tt> file of the integrated Microsoft Visual Studio solution and its projects (if any) remain in the file system. However the customization code of the unpublished customization project and the external files added to the customization project are removed from the solution.
{br}

For example, if a customization project contains a ''Report'' item and a ''SiteMapNode'' item for the report, after you publish and unpublish the project, the report and the site map node remain in the database and remain available in the application, so you need to remove them manually.{br}

There is no difference in the unpublishing process for a single-tenant site and a multitenant site: The platform deletes the same files in the file system and keeps all the changes in the database.]]></column>
			<column name="PlainText"><![CDATA[Unpublishing Customization Projects When you unpublish all customization projects, the system reverses the changes introduced by       the customization as follows: The forms of  Acumatica ERP return to their original layout. The  .cs  files of the project with customization code are removed           from the website folder in the file system. The custom files of these projects are removed from the website folder on the file           system. Some changes aren't reversed, as described below: Database changes remain in the database after the customization is unpublished. Thus,           the generic inquiries, reports, changes to the site map, custom tables, custom database           objects, and custom data remain in the database. Changes to the site map remain in the           navigation menu of  Acumatica ERP. If you need to remove these changes, you must do so manually. The  .sln  file of the integrated Microsoft Visual Studio solution and its           projects (if any) remain in the file system. However the customization code of the           unpublished customization project and the external files added to the customization           project are removed from the solution. For example, if a customization project contains a  Report  item and a          SiteMapNode  item for the report, after you publish and unpublish the project, the       report and the site map node remain in the database and remain available in the application,       so you need to remove them manually. There is no difference in the unpublishing process for a single-tenant site and a multitenant       site: The platform deletes the same files in the file system and keeps all the changes in the       database. ]]></column>
		</row>
		<row PageID="502518d7-8b83-49ab-ab55-c94b80534ec9" Language="en-US" PageRevisionID="1" PlainText="Managing Items in a Project You use the   Customization Project                         Editor to manage the items in a customization    project. The editor includes a page to    support  each type    of item in a customization project. (See  Types of Items in a Customization Project for    details.) By using the navigation pane of the editor,     shown    in  the following    screenshot , you    can open these pages (each of which is described in detail in the corresponding part of this     guide). Viewing the navigation pane of the editor In This Part Customized ScreensCustomized Data ClassesCodeCustom FilesGeneric InquiriesCustom ReportsDashboardsSite MapDatabase ScriptsSystem LocalesImport and Export ScenariosShared FiltersAccess RightsWikisWeb Service EndpointsAnalytical ReportsPush NotificationsBusiness EventsMobile Application" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="5fb679d9-b965-d102-a471-74bef8ce9f77" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You use the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor] to manage the items in a customization project. The editor includes a page to support each type of item in a customization project. (See [HelpRoot_Dev_Customization\CG_Platform_Project_ItemTypes|Types of Items in a Customization Project] for details.) By using the navigation pane of the editor, shown in the following screenshot, you can open these pages (each of which is described in detail in the corresponding part of this guide).[anchor|#fig_srq_1xk_zv][anchor|#_7b3e1bbe-cccd-41e7-a294-5fb8f1294c2b][image:CustomizationPlatform/images/CG_GL_Items_02.png|Viewing the navigation pane of the editor|450px]
==In This Part==[anchor|#ul_hyl_ghy_2q]
*[HelpRoot_Dev_Customization\CG_GL_Items_Screens|Customized Screens]
*[HelpRoot_Dev_Customization\CG_GL_Items_DACs|Customized Data Classes]
*[HelpRoot_Dev_Customization\CG_GL_Items_Code|Code]
*[HelpRoot_Dev_Customization\CG_GL_Items_Files|Custom Files]
*[HelpRoot_Dev_Customization\CG_GL_Items_GI|Generic Inquiries]
*[HelpRoot_Dev_Customization\CG_GL_Items_Reports|Custom Reports]
*[HelpRoot_Dev_Customization\CG_GL_Items_Dashboards|Dashboards]
*[HelpRoot_Dev_Customization\CG_GL_Items_SiteMap|Site Map]
*[HelpRoot_Dev_Customization\CG_GL_Items_DBScripts|Database Scripts]
*[HelpRoot_Dev_Customization\CG_GL_Items_Translations|System Locales]
*[HelpRoot_Dev_Customization\CG_GL_Items_IntScenarios|Import and Export Scenarios]
*[HelpRoot_Dev_Customization\CG_GL_Items_SharedFilters|Shared Filters]
*[HelpRoot_Dev_Customization\CG_GL_Items_AccessRights|Access Rights]
*[HelpRoot_Dev_Customization\CG_GL_Items_Wiki|Wikis]
*[HelpRoot_Dev_Customization\CG_GL_Items_WebServices|Web Service Endpoints]
*[HelpRoot_Dev_Customization\CG_GL_Items_AnaliticalReports|Analytical Reports]
*[HelpRoot_Dev_Customization\CG_GL_Items_PushNotifications|Push Notifications]
*[HelpRoot_Dev_Customization\CG_GL_Items_BusinessEvents|Business Events]
*[HelpRoot_Dev_Customization\CG_GL_Items_MobileApp|Mobile Application]
]]></column>
		</row>
		<row PageID="e87c9468-09fd-45a6-aea8-4e70ff65bc00" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="08a9c27f-da5e-f3f0-8397-8c59dcd61a65" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You use the Customized Screens page of the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor] to manage the ''Page'', ''AUScreenAction'', ''AUScreenNavigationAction'', and ''AutomationScreenField'' items in the customization project. The ''Page'' item for an existing form contains the instructions about changes to the layout that have to be applied by the platform to the ASPX code of the form during publication of the project. For a custom form, the ''Page'' item holds the content of the form and the path to the ASPX file of the form. (The path is required so the plarform can detect changes of the file in the file system in the development environment and update the file while you publish the project.){br}

Using the Customized Screens page, you can do the following:[anchor|#_b13680a6-620b-456a-9a7d-9a53a768e3a8]
*Modify the layour and actions on an existing form. When you start to modify the layout of an existing form, to store the changes, the platform adds a ''Page'' item for the form to the customization project. When you use the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_LayoutEditor|Screen Editor] to change the form layout, the platform saves each change to this item. The changed logic of the form is saved in the ''AUScreenAction'', ''AUScreenNavigationAction'', and ''AutomationScreenField'' items. See [HelpRoot_Dev_Customization\CG_Platform_Project_ItemTypes|Types of Items in a Customization Project] for details about customization project items.
*Create a custom form. To do this, you invoke '''Add Screen &gt; Create New Screen''' on the Customized Screens page to create the workable template for the form, and add the template to the customization project as a ''Page'' item, a ''Code'' item, a ''SiteMapNode'' item, and two ''File'' items, as described in [HelpRoot_Dev_Customization\CG_GL_Items_Screens_AddingCustom|To Add a New Custom Form to a Project]. You can then develop the custom form by using both the Screen Editor and Microsoft Visual Studio.
{br}

The Customized Screens page contains the list of the ''Page'' items for existing and custom forms added to the customization project.{br}

On the page, you can perform the operations with the customized screens that are described in the following topics:[anchor|#ul_odd_xrt_fq]
*[HelpRoot_Dev_Customization\CG_GL_Items_Screens_Adding|To Add a Page Item for an Existing Form]
*[HelpRoot_Dev_Customization\CG_GL_Items_Screens_Deleting|To Delete a Page Item from a Project]
*[HelpRoot_Dev_Customization\CG_GL_Items_Screens_AddingCustom|To Add a New Custom Form to a Project]
*[HelpRoot_Dev_Customization\CG_GL_Items_Screens_DeletingCustom|To Delete a Custom Form from a Project]
*[HelpRoot_Dev_Customization\CG_GL_Items_DeletingANY|To Delete Items from the Project on the Edit Project Items Page]
*[HelpRoot_Dev_Customization\CG_GL_Items_AddCondition|To Add a Condition]
*[HelpRoot_Dev_Customization\CG_GL_Items_WorkflowConcept|Creating Workflows]
]]></column>
			<column name="PlainText"><![CDATA[Customized Screens You use the Customized Screens page of the   Customization Project                         Editor to       manage the  Page ,  AUScreenAction ,  AUScreenNavigationAction , and          AutomationScreenField  items in the customization project. The  Page  item for an       existing form contains the instructions about changes to the layout that have to be applied by       the platform to the ASPX code of the form during publication of the project. For a custom       form, the  Page  item holds the content of the form and the path to the ASPX file of the       form. (The path is required so the plarform can detect changes of the file in the file system       in the development environment and update the file while you publish the project.) Using the Customized Screens page, you can do the following: Modify the layour and actions on an existing form. When you start to modify the layout           of an existing form, to store the changes, the platform adds a  Page  item for the           form to the customization project. When you use the  Screen Editor to change the form layout, the           platform saves each change to this item. The changed logic of the form is saved in the              AUScreenAction ,  AUScreenNavigationAction , and  AutomationScreenField            items. See  Types of Items in a Customization Project for details about           customization project items. Create a custom form. To do this, you invoke  Add Screen > Create New Screen  on the Customized Screens page to create the workable template for the           form, and add the template to the customization project as a  Page  item, a              Code  item, a  SiteMapNode  item, and two  File  items, as described in              To Add a New Custom Form to a Project. You can then develop the custom           form by using both the Screen Editor and Microsoft Visual Studio. The Customized Screens page contains the list of the  Page  items for existing and       custom forms added to the customization project. On the page, you can perform the operations with the customized screens that are described in       the following topics: To Add a Page Item for an Existing FormTo Delete a Page Item from a ProjectTo Add a New Custom Form to a ProjectTo Delete a Custom Form from a ProjectTo Delete Items from the Project on the Edit Project Items PageTo Add a ConditionCreating Workflows]]></column>
		</row>
		<row PageID="cc880c6f-f936-4d52-9751-38c914e10cdf" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="ec86f672-5903-b464-9965-93f7768bd577" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can add a ''Page'' item for an existing form to a customization project by using both the [HelpRoot_Dev_Customization\CG_Platform_Tools_Menu|Customization Menu] and the [HelpRoot_Dev_Customization\CG_Platform_Tools_Inspector|Element Inspector], or you can add the item in the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor].{br}

The following sections provide detailed information:[anchor|#ul_odd_xrt_fq]
*[[#_1ddee5d6-4d9f-4eb8-a340-ee618bcd67c7|To Add a Page Item by Using the Element Inspector]
*[[#_00c904f5-f899-4178-9460-bbb43a0c6d19|To Add a Page Item on the Customized Screens Page]
[anchor|#_1ddee5d6-4d9f-4eb8-a340-ee618bcd67c7]
==To Add a Page Item by Using the Element Inspector==
To add a ''Page'' item for an existing form to a customization project by using the [HelpRoot_Dev_Customization\CG_Platform_Tools_Inspector|Element Inspector], perform the following actions:[anchor|#ol_ohp_qt4_tw]
#Open the form in the browser.
#On the form title bar, click '''Customization &gt; Inspect Element''' to launch the Element Inspector.
#On the form, select the UI element (or area) to be customized, to open the [HelpRoot_Dev_Customization\CG_Platform_Tools_Inspector_ElProperiesDlg|Element Properties Dialog Box] for the element (or area).
#In the dialog box, click '''Customize'''.
#If there is no currently selected customization project and the inspector opens the [HelpRoot_Dev_Customization\CG_Platform_Tools_Menu_SelectCustProjDlg|Select Customization Project Dialog Box], select an existing customization project or create a new one.
{br}

 Acumatica Customization             Platform creates the ''Page'' item for the form, adds the item to the currently selected customization project, and opens the form in the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_LayoutEditor|Screen Editor].{br}

The platform assigns to the new item a name that corresponds to the form ID.[anchor|#_00c904f5-f899-4178-9460-bbb43a0c6d19]
==To Add a Page Item on the Customized Screens Page==
To add a ''Page'' item for an existing form to a customization project by using the Customization Project Editor, perform the following actions:[anchor|#ol_yxh_12p_tw]
#Open the customization project in the editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)
#Click '''Screens''' in the navigation pane to open the Customized Screens page.
#On the page toolbar, click '''Add Screen &gt; Customize Existing Screen'''.
#In the '''Customize Existing Screen''' dialog box, which opens, double-click the needed form in the tree, which corresponds to the site map of the application.
{br}

 The following screenshot demonstrates how you can select the Payments and Applications form ('''Finance''' > '''Accounts Receivable''' > '''Work Area''' > '''Enter''') in the '''Customize Existing Screen''' dialog box.[anchor|#fig_gkv_vph_tw][anchor|#image_hlq_jvk_fq][image:CustomizationPlatform/images/CG_GL_Items_Screens_AddingExisting_01.png|popup|Selecting the form in the Customize Existing Screen dialog box|281px]As soon as you add the item, the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_LayoutEditor|Screen Editor] opens for the form so that you can start changing the form layout.{br}

To go back to the Customized Screens page of the Customization Project Editor, click '''Screens''' on the navigation pane. You can see that the added form is saved to the list of project items.{br}

As an alternative to selecting a form in the tree, if you know the screen ID of the form, you can add the appropriate item directly to the table of the Customized Screens page. To do this, perform the following actions (shown in the screenshot below):[anchor|#ol_nps_rhp_tw]
#On the page toolbar, click '''Add Row''' (+).
#In the '''Screen ID''' column of the new row, type the screen ID of the form.
#On the page toolbar, click '''Save''' to save the item to the project.
{br}

 The screenshot below shows the screen ID of the Journal Transactions form entered in the table: <tt>GL301000</tt>. As soon as you specify the screen ID, press Tab on the keyboard to view the name of the form, which appears in the '''Title''' column; make you sure you are adding the item for the needed form.[anchor|#fig_hkv_vph_tw][anchor|#image_pny_4wk_fq][image:CustomizationPlatform/images/CG_GL_Items_Screens_AddingExisting_02.png|popup|Adding the screen ID of an existing form to the table|360px]
To modify the layout of a form, open the Screen Editor for the form by clicking the '''Screen ID''' of the form in the table or in the navigation pane of the Project Editor.]]></column>
			<column name="PlainText"><![CDATA[To Add a Page Item for an Existing Form You can add a  Page  item for an existing form to a customization project by using both       the  Customization Menu and the  Element Inspector, or you can add the item in the   Customization Project                         Editor. The following sections provide detailed information: To Add a Page Item by Using the Element Inspector To Add a Page Item by Using the Element InspectorTo Add a Page Item on the Customized Screens Page To Add a Page Item on the Customized Screens PageTo Add a Page Item by Using the Element Inspector To add a  Page  item for an existing form to a customization project by using the            Element Inspector, perform the following actions: Open the form in the browser. On the form title bar, click  Customization > Inspect Element  to launch the Element Inspector. On the form, select the UI element (or area) to be customized, to open the  Element Properties Dialog Box for the element (or             area). In the dialog box, click  Customize . If there is no currently selected customization project and the inspector opens the                Select Customization Project Dialog Box, select an existing             customization project or create a new one.  Acumatica Customization             Platform creates the  Page  item for the form, adds the item to the currently selected         customization project, and opens the form in the  Screen Editor. The platform assigns to the new item a name that corresponds to the form ID. To Add a Page Item on the Customized Screens Page To add a  Page  item for an existing form to a customization project by using the  Customization Project Editor, perform the following actions: Open the customization project in the editor. (See  To Open a Project for details.) Click  Screens  in the navigation pane to open the Customized             Screens page. On the page toolbar, click  Add Screen > Customize Existing Screen . In the  Customize Existing Screen  dialog box, which opens,             double-click the needed form in the tree, which corresponds to the site map of the             application.  The following screenshot demonstrates how you can select the Payments and Applications         form ( Finance Accounts Receivable Work Area Enter ) in the  Customize Existing Screen  dialog box. Selecting the form in the Customize Existing Screen dialog box As soon as you add the item, the  Screen Editor opens for the form so that you can         start changing the form layout. To go back to the Customized Screens page of the  Customization Project Editor, click  Screens  on the navigation pane. You can see that the added         form is saved to the list of project items. As an alternative to selecting a form in the tree, if you know the screen ID of the form,         you can add the appropriate item directly to the table of the Customized Screens page. To do         this, perform the following actions (shown in the screenshot below): On the page toolbar, click  Add Row  (+). In the  Screen ID  column of the new row, type the screen ID of             the form. On the page toolbar, click  Save  to save the item to the             project.  The screenshot below shows the screen ID of the Journal Transactions form entered in the         table:  GL301000 . As soon as you specify the screen ID, press Tab         on the keyboard to view the name of the form, which appears in the            Title  column; make you sure you are adding the item for the needed         form. Adding the screen ID of an existing form to the table To modify the layout of a form, open the Screen Editor for the form by clicking the            Screen ID  of the form in the table or in the navigation pane of the            Project Editor. ]]></column>
		</row>
		<row PageID="2254fb17-f081-45da-ab8b-d5531e5dd445" Language="en-US" PageRevisionID="1" Content="&#xA;To remove from a customization project a ''Page'' Item created for an existing or custom form, perform the following actions:[anchor|#ol_qw5_2nt_tw]&#xA;#Open the project in the Customization Project Editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)&#xA;#Click '''Screens''' in the navigation pane to open the Customized Screens page.&#xA;#In the page table, click the item for the form.&#xA;#On the page toolbar, click '''Delete Row''' (X).&#xA;#On the page toolbar, click '''Save''' to save the changes to the customization project.&#xA;" PlainText="To Delete a Page Item from a Project To remove from a customization project a  Page  Item created for an existing or custom       form, perform the following actions: Open the project in the  Customization Project Editor. (See  To Open a Project for details.) Click  Screens  in the navigation pane to open the Customized           Screens page. In the page table, click the item for the form. On the page toolbar, click  Delete Row  (X). On the page toolbar, click  Save  to save the changes to the           customization project. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="c587daa9-ad12-be4a-e16c-3c4a81f90751" RecordSourceID="22377" />
		<row PageID="8c8ea690-7f06-4d4b-9f27-3c67db804008" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="6a22e8a1-7204-27af-e75d-46ef496f3da3" RecordSourceID="22377">
			<column name="Content"><![CDATA[
To add a new custom form to a customization project, perform the following actions:[anchor|#ol_vbn_b3t_tw]
#Open the customization project in the Customization Project Editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)
#Click '''Screens''' in the navigation pane to open the Customized Screens page.
#On the page toolbar, click '''Add Screen &gt; Create New Screen'''.
#In the '''Create New Screen''' dialog box, which opens, specify the following parameters to create the files for the new form:
#*'''Screen ID''': The unique identifier of the new form
#*'''Graph Name''': The name of the new class of the business logic code for the form (also called ''graph'')
#*'''Graph Namespace''': The namespace to which the new business logic class should be added
#*'''Page Title''': The title of the new form
#*'''Template''': The form template that provides the default set of containers on the form
#*'''Site Map Parent''': The parent node in the site map to which the new form should be added
#In the dialog box, click '''OK'''.
#:((({S:Warn}Before you start editing the created screen in the Screen Editor, you must publish the customization project.
)))
{br}

For the new form, the system creates the following items and adds them to the customization project:[anchor|#ul_zdm_fwt_fq]
*The <tt>.aspx</tt> and <tt>.aspx.cs</tt> files, which appear in the '''Files''' list of the project items.
*The <tt>.cs</tt> file with the business logic code for the form, which appears in the '''Code''' list of project items.
*The site map node, which appears in the '''Site Map''' list of project items.
*:((({S:Warn}To give users the ability to navigate to the form in Acumatica ERP, you need to specify the position of the new form in the UI by using the Menu Editing mode and update the ''SiteMapNode'' item, as described in [HelpRoot_Dev_Customization\CG_GL_Items_SiteMap_Updating|To Update a Site Map Node in a Project]. For details on the Menu Editing mode, see [HelpRoot_Interface\UIG__con_New_UI_Edit_Menu_Mode|Menu Editing Mode] in the Interface Guide.
)))
*The ''Page'' item, with a name that corresponds to the new screen ID; this item appears in the '''Screens''' list of project items. This item contains the link to the new page content, which you can later develop by using the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_LayoutEditor|Screen Editor].

To obtain the actual files in the file system, publish the customization project after you have added the form to the project. After that, the following files are available on the file system:[anchor|#ul_usx_jxt_fq]
*The <tt>.aspx</tt> and <tt>.aspx.cs</tt> files in the <tt>Pages/&lt;First segment of ScreenID&gt;/</tt> folder of the website
*The <tt>.cs</tt> file with the business logic code in the <tt>App&#95;RuntimeCode</tt> folder of the website

You can develop business logic code for the custom form in Microsoft Visual Studio later.{br}

The screenshot below shows the files of the custom form that has been added to the customization project (through the '''Add Screen''' > '''Create New Screen''' command) with the following parameters:[anchor|#ul_jxq_nyt_fq]
*'''Screen ID''': ''KW302010''
* '''Graph Name''': ''KeywordsMaint''
[anchor|#fig_ikv_vph_tw][anchor|#image_g3m_kyt_fq][image:CustomizationPlatform/images/CustomPageVS.png|popup|Viewing the files of the custom form in Visual Studio solution|195px]]]></column>
			<column name="PlainText"><![CDATA[To Add a New Custom Form to a Project To add a new custom form to a customization project, perform the following actions: Open the customization project in the  Customization Project Editor. (See  To Open a Project for details.) Click  Screens  in the navigation pane to open the Customized           Screens page. On the page toolbar, click  Add Screen > Create New Screen . In the  Create New Screen  dialog box, which opens, specify the           following parameters to create the files for the new form: Screen ID : The unique identifier of the new form Graph Name : The name of the new class of the business logic               code for the form (also called  graph ) Graph Namespace : The namespace to which the new business               logic class should be added Page Title : The title of the new form Template : The form template that provides the default set of               containers on the form Site Map Parent : The parent node in the site map to which the               new form should be added In the dialog box, click  OK . Before you start editing the             created screen in the Screen Editor, you must publish the customization           project. For the new form, the system creates the following items and adds them to the customization    project: The  .aspx  and  .aspx.cs  files, which appear in the            Files  list of the project items. The  .cs  file with the business logic code for the form, which appears in         the  Code  list of project items. The site map node, which appears in the  Site Map  list of project items. To give users the ability to navigate to the form in  Acumatica ERP, you need to specify the position of the new form in the UI by using the Menu Editing             mode and update the  SiteMapNode  item, as described in  To Update a Site Map Node in a Project. For details on the Menu Editing mode, see                Menu Editing Mode in the Interface             Guide. The  Page  item, with a name that corresponds to the new screen ID; this item appears in         the  Screens  list of project items. This item contains the link to the         new page content, which you can later develop by using the  Screen Editor. To obtain the actual files in the file system, publish the customization project after you have       added the form to the project. After that, the following files are available on the file       system: The  .aspx  and  .aspx.cs  files in the            Pages/<First segment of ScreenID>/  folder of the website The  .cs  file with the business logic code in the            App_RuntimeCode  folder of the website You can develop business logic code for the custom form in Microsoft Visual Studio later. The screenshot below shows the files of the custom form that has been added to the       customization project (through the  Add Screen Create New Screen  command) with the following parameters: Screen ID :  KW302010 Graph Name :  KeywordsMaint Viewing the files of the custom form in Visual Studio solution ]]></column>
		</row>
		<row PageID="22ef2138-f3bd-4461-83dc-3f6f038e89f4" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="9d70de4a-f794-4c1b-f498-87240404b821" RecordSourceID="22377">
			<column name="Content"><![CDATA[
To remove a custom form from a customization project, you have to delete all the items that have been added to the project for the form.{br}

To do this, perform the following actions:[anchor|#_c4d506cd-4245-4497-82d8-77802dbb22dd]
*Delete from the customization project the ''Page'' item that was added by the New Screen wizard. (See [HelpRoot_Dev_Customization\CG_GL_Items_Screens_Deleting|To Delete a Page Item from a Project] for details.)
*Delete from the project the ''Code'' item that was added by the New Screen wizard. (See [HelpRoot_Dev_Customization\CG_GL_Items_Code_Deleting|To Delete a Code Item From a Project].)
*Delete from the project the <tt>&lt;FormID&gt;.aspx</tt> and <tt>&lt;FormID&gt;.aspx.cs</tt>''File'' items that were added by the New Screen wizard. (For more information, see [HelpRoot_Dev_Customization\CG_GL_Items_Files_Deleting|To Delete a Custom File From a Project].)
*Delete from the project the ''SiteMapNode'' item that was added by the New Screen wizard. (See [HelpRoot_Dev_Customization\CG_GL_Items_SiteMap_Deleting|To Delete a Site Map Node from a Project] for details.)
*If you added other items for the custom form, such as items for the mobile site map or custom files, delete these items.
{br}

To delete multiple items from the customization project successively on a single page, you can use the Edit Project Items page of the Customization Project Editor. (See [HelpRoot_Dev_Customization\CG_GL_Items_DeletingANY|To Delete Items from the Project on the Edit Project Items Page] for details.){br}

The system applies the changes to the file system as soon as you publish the customization project.]]></column>
			<column name="PlainText"><![CDATA[To Delete a Custom Form from a Project To remove a custom form from a customization project, you have to delete all the items that have been added to the project for the form. To do this, perform the following actions: Delete from the customization project the  Page  item that was added by the New Screen wizard. (See  To Delete a Page Item from a Project for details.) Delete from the project the  Code  item that was added by the New Screen wizard. (See  To Delete a Code Item From a Project.) Delete from the project the  <FormID>.aspx  and  <FormID>.aspx.cs File  items that were added by the New Screen wizard. (For more information, see  To Delete a Custom File From a Project.) Delete from the project the  SiteMapNode  item that was added by the New Screen wizard. (See  To Delete a Site Map Node from a Project for details.) If you added other items for the custom form, such as items for the mobile site map or custom files, delete these items. To delete multiple items from the customization project successively on a single page, you can use the Edit Project Items page of the  Customization Project Editor. (See  To Delete Items from the Project on the Edit Project Items Page for details.) The system applies the changes to the file system as soon as you publish the customization project. ]]></column>
		</row>
		<row PageID="6dd39f69-956d-4c5a-80e8-87e802c821a2" Language="en-US" PageRevisionID="1" Content="&#xA;You can delete multiple items from the customization project on the Edit Project Items page of the Customization Project Editor. To do this, perform the following actions:[anchor|#ol_nds_f12_vw]&#xA;#On the menu of the editor, click '''File &amp;gt; Edit Project Items'''.&#xA;#In the table of the Edit Project Items page, which opens, click the item to be deleted, as the following screenshot shows.[anchor|#image_xxx_hc2_vw][image:CustomizationPlatform/images/CG_GL_Items_DACs_Deleting.png|popup|Using the Edit Project Items page to delete an item from the customization project|427px]&#xA;#Press Delete on the keyboard to delete the selected row from the table.&#xA;#If you need to delete multiple items from the project, repeat Steps 2–3 for each item.&#xA;#On the page toolbar, click '''Save''' to save the change in the project.&#xA;" PlainText="To Delete Items from the Project on the Edit Project Items Page You can delete multiple items from the customization project on the Edit Project Items page of       the  Customization Project Editor. To do this, perform the following actions: On the menu of the editor, click  File &gt; Edit Project Items . In the table of the Edit Project Items page, which opens, click the item to be deleted,           as the following screenshot shows. Using the Edit Project Items page to delete an item from the customization               project Press Delete on the keyboard to delete the selected row from the table. If you need to delete multiple items from the project, repeat Steps 2–3 for each           item. On the page toolbar, click  Save  to save the change in the           project. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="8e7e93f7-ded0-c65a-3bce-fce5bd9baf9a" RecordSourceID="22377" />
		<row PageID="19bcef30-6972-43e0-9616-8753a4a27353" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="6e66ab25-d006-9d3f-b99b-252bd48a0a44" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can construct a condition and then specify it as a property value for an action or a control, thus changing the business logic of the form.{br}{TOC}
==Before You Proceed==
Conditions can be added to a specific screen. So before adding a condition, you should add the corresponding screen item to the customization project. See [HelpRoot_Dev_Customization\CG_GL_Items_Screens_Adding|To Add a Page Item for an Existing Form] or [HelpRoot_Dev_Customization\CG_GL_Items_Screens_AddingCustom|To Add a New Custom Form to a Project] for details.
==To Add a Custom Condition==
To add a condition, do the following:[anchor|#_e937771b-894a-4c67-98cb-96f7b67c2072]
#In the navigation pane of the Customization Project Editor, click '''Conditions''' under the screen node you want to customize. The Conditions page opens.
#On the page toolbar, click '''Add New Record'''.
#In the '''Condition Properties''' dialog box, which opens, type the name of the condition and configure the condition by adding rows and specifying field values in each row.
#:You can add rows from a predefined condition to a custom condition. A predefined condition is a condition defined for a predefined workflow for the same screen. To add rows from a predefined condition to a custom condition, do the following:[anchor|#_476f5d1e-d129-46bb-b18c-df09b33ceaad]
##Select the '''Append Predefined Condition''' box.
##In the '''Predefined Condition''' box, specify the predefined condition whose rows you want to add.
##In the '''Operator''' box, specify the logical operation between the rows of your custom condition and the predefined condition.
#Click '''OK'''.
#:When you save the added condition, it appears in the lists of possible values for the {{Disable}} and {{Hide}} properties of a control or an action. You can also specify conditions for automatically run actions and transitions. For details, see [HelpRoot_Dev_Customization\CG_GL_Items_AddWorkflow|To Add a Workflow].

==To Customize a Predefined Condition==
A form can have a predefined condition. You can see the predefined conditions in the Condition Editor of the selected form. You can customize a predefined condition by doing the following:[anchor|#_6e6b585b-d631-40ba-a6a6-442700337fab]
#On the page toolbar of the Condition Editor page, click '''Add New Record'''.
#In the '''Condition Properties''' dialog box, which opens, specify the following values:
#*'''Condition Name''': The internal name of the condition
#*'''Append Predefined Condition''': Selected
#*'''Predefined Condition''': The name of the condition you want to customize
#*'''Operator''': The logical operator to be applied between the predefined rows and the custom rows of the condition
#In the table of the dialog box, configure the condition by adding rows and specifying field values in each row.
#Click '''OK''' to close the dialog box.

==To Display an Action When a Field Has a Specific Value (Example)==
Suppose that you want an action to be hidden only when some elements have specific values: On the [HelpRoot_FormReference\SO_30_10_00|Sales Orders] ([~/?ScreenId=SO301000|SO301000]) form, you want the '''Print Sales Order/Quote''' action (which is a menu command on the '''Reports''' menu) to be hidden when the '''Total''' box equals zero and the '''Status''' is ''Open''. To configure this condition, do the following:[anchor|#_3af397a8-8187-4f38-bbc3-47c15b7d9e7f]
#Add the [HelpRoot_FormReference\SO_30_10_00|Sales Orders] form to the list of customized screens, as described in [HelpRoot_Dev_Customization\CG_GL_Items_Screens_Adding|To Add a Page Item for an Existing Form].
#In the navigation pane of the Customization Project Editor, click '''Conditions''' under the SO301000 node.
#:The Conditions: SO301000 (Sales Orders) page opens.
#On the page toolbar, click '''Add New Record'''.
#In the '''Condition Properties''' dialog box, which opens, do the following:
##In the '''Condition Name''' column, type the condition&rsquo;s name : <tt>AmountZero</tt>.
##Add two rows with the following values:
##*Row 1:
##**'''Field Name''': ''Total''
##** '''Condition''': ''Equals''
##** '''Operation''': ''0''
##*Row 2:
##**'''Field Name''': ''Status''
##** '''Condition''': ''Equals''
##** '''Value''': ''Open''
#Click '''OK'''.
#On the page toolbar, click '''Save'''.
#Open the Action Editor for the screen: In the navigation pane, click '''Actions'''.
#In the Action Editor, add the '''Print Sales Order/Quote''' action. 
#:When adding an action, in the '''Action Properties''' dialog box, in the '''Hidden''' box select the ''AmountZero'' value.For details, see [HelpRoot_Dev_Customization\CG_GL_items_ConfigureActions|To Configure Actions].
#Save your changes, and publish the customization project.
#In Acumatica ERP, open a sales order with an ''Open'' status and zero total amount on the [HelpRoot_FormReference\SO_30_10_00|Sales Orders] form. Notice that the '''Reports''' menu is no longer shown on the toolbar.
]]></column>
			<column name="PlainText"><![CDATA[To Add a Condition You can construct a condition and then specify it as a property value for an action or a         control, thus changing the business logic of the form. Before You Proceed Conditions can be added to a specific screen. So before adding a condition, you should add the         corresponding screen item to the customization project. See  To Add a Page Item for an Existing Form or  To Add a New Custom Form to a Project for details. To Add a Custom Condition To add a condition, do the following: In the navigation pane of the  Customization Project Editor, click  Conditions  under the screen node you want to customize.             The Conditions page opens. On the page toolbar, click  Add New Record . In the  Condition Properties  dialog box, which opens, type the             name of the condition and configure the condition by adding rows and specifying field             values in each row. You can add rows from a predefined condition to a custom               condition. A predefined condition is a condition defined for a predefined workflow for               the same screen. To add rows from a predefined condition to a custom condition, do the                 following: Select the  Append Predefined Condition  box. In the  Predefined Condition  box, specify the predefined                   condition whose rows you want to add. In the  Operator  box, specify the logical operation                   between the rows of your custom condition and the predefined condition. Click  OK . When you save the added condition, it appears in               the lists of possible values for the  Disable  and                  Hide  properties of a control or an action. You can also specify               conditions for automatically run actions and transitions. For details, see  To Add a Workflow. To Customize a Predefined Condition A form can have a predefined condition. You can see the predefined conditions in the         Condition Editor of the selected form. You can customize a predefined condition by doing the         following: On the page toolbar of the Condition Editor page, click  Add New             Record . In the  Condition Properties  dialog box, which opens, specify the           following values: Condition Name : The internal name of the condition Append Predefined Condition : Selected Predefined Condition : The name of the condition you want to               customize Operator : The logical operator to be applied between the               predefined rows and the custom rows of the condition In the table of the dialog box, configure the condition by adding rows and specifying           field values in each row. Click  OK  to close the dialog box. To Display an Action When a Field Has a Specific Value (Example) Suppose that you want an action to be hidden only when some elements have specific values:         On the   ([~/?ScreenId=SO301000|SO301000]) Sales Orders (SO301000) form, you want the            Print Sales Order/Quote  action (which is a menu command on the            Reports  menu) to be hidden when the  Total          box equals zero and the  Status  is  Open . To configure this         condition, do the following: Add the   ([~/?ScreenId=SO301000|SO301000]) Sales Orders form to the list of customized             screens, as described in  To Add a Page Item for an Existing Form. In the navigation pane of the Customization Project Editor, click                Conditions  under the SO301000 node. The Conditions: SO301000               (Sales Orders) page opens. On the page toolbar, click  Add New Record . In the  Condition Properties  dialog box, which opens, do the               following: In the  Condition Name  column, type the condition's name :                    AmountZero . Add two rows with the following values: Row 1: Field Name :  Total Condition :  Equals Operation :  0 Row 2: Field Name :  Status Condition :  Equals Value :  Open Click  OK . On the page toolbar, click  Save . Open the Action Editor for the screen: In the navigation pane, click                Actions . In the Action Editor, add the  Print Sales Order/Quote  action.                When adding an action, in the  Action Properties  dialog box,               in the  Hidden  box select the  AmountZero  value. For             details, see  To Configure Actions. Save your changes, and publish the customization project. In  Acumatica ERP, open a sales order with an  Open  status and zero total amount on the   ([~/?ScreenId=SO301000|SO301000]) Sales Orders form. Notice that the                Reports  menu is no longer shown on the toolbar. ]]></column>
		</row>
		<row PageID="2227fdcd-be95-4dcf-baa9-5360b2ad1f60" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="46feb558-51fb-88a1-24e5-e5907aaae2e6" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can customize a form by defining a ''workflow'' in the Customization Project Editor. A workflow is a definition of how the state of an entity should change as a result of a user performing an action. For example, a workflow can involve the changing of the status of an opportunity based on the actions a user has performed on it.{br}

The process of defining a workflow does not require coding. To define a workflow, you can use the editors in the '''Screens''' section of the Customization Project Editor.{br}

We recommend the following types of customization, based on the type of the form to be customized:[anchor|#_f80157a2-ea12-4793-9c50-85b9cbdd29ff]
*For forms with predefined workflows: The customization of predefined workflows and the customization of fields and actions
*For custom forms: Creation of new workflows
*For forms with automation steps: The customization of fields in the Field Editor and the customization of actions in the Action Editor without the creation of a workflow
*:((({S:Warn}The automation step functionality and the workflow functionality cannot be used simultaneously for a single form. Thus, to define workflows for a form, you should deactivate any automation steps for this form first. For details, see [HelpRoot_Dev_Customization\CG_GL_items_DeactivateAutomation|To Deactivate Automation Steps].
)))
{br}{TOC}
==Workflow Inheritance==
Some Acumatica ERP forms have predefined workflows, as described in [[#_d3110efe-5cb7-4675-a4fa-e56da60d1f8f|Predefined Workflows]. You can define custom workflows from scratch or workflows based on the predefined workflow for the form. {br}

A custom workflow based on a predefined workflow inherits all modifications of the predefined workflow. You can view the difference between the predefined workflow and a custom workflow, and cause the custom workflow to revert to the predefined workflow.((({S:Warn} If a predefined workflow is changed in an update after the development of any custom workflows based on the predefined workflow, each of these custom workflows will inherit the changes. If you publish a customization project that contains a custom workflow based on a predefined workflow and there is a newer version of the predefined workflow in the system, a developer can upgrade the customized predefined workflow with the latest changes from the system.
)))
For details on updating a custom workflow based on a predefined workflow with the latest changes in the system, see [HelpRoot_Dev_Customization\CG_GL_Projects_UpgradeWorkflow|To Upgrade a Workflow].
==Workflow Types==
A workflow type defines the set of entities to which the workflow is applied. The applicable entity depends on the particular form for which the workflow is defined; for example, on the [HelpRoot_FormReference\CR_30_10_00|Leads] ([~/?ScreenId=CR301000|CR301000]) form, leads are the applicable entity.{br}

To apply a custom workflow to all entities, regardless of their property values, you set the workflow type to ''DEFAULT''. To apply a custom workflow to entities with a specific property value, you select the '''Workflow-Identifying Field''' on the Workflows page and click '''Add Workflow''' on the page toolbar; in the '''Add Workflow''' dialog box, which opens, you need to specify a type other than ''DEFAULT''. For example, to apply a workflow with a specific opportunity class, on the Workflows page, you select ''Class ID'' in the '''Workflow Identifying Field''' box and click '''Add Worfklow '''on the page toolbar. Then in the '''Add Workflow''' dialog box, you select a type other than ''DEFAULT''.
==Development of Workflows in an Extension Library==
You can develop and customize workflows not only in the Customization Project Editor but also in Visual Studio by using an extension library. To develop workflows, you should use the set of classes that is located in the {{PX.Data.WorkflowAPI}} namespace. For details, see [HelpRoot_Dev_Customization\CG_GL_Items_CodeWorkflows|To Define a Workflow from Code].[anchor|#_d3110efe-5cb7-4675-a4fa-e56da60d1f8f]
==Predefined Workflows==
As of Acumatica ERP 2020 R1, the following forms have predefined workflows:[anchor|#_26c1bbf5-89cd-43b1-994b-9fcd4e1f06dc]
*[HelpRoot_FormReference\CR_30_40_00|Opportunities] ([~/?ScreenId=CR304000|CR304000])
*[HelpRoot_FormReference\CR_30_60_00|Cases ] ([~/?ScreenId=CR306000|CR306000])
*[HelpRoot_FormReference\CR_30_10_00|Leads] ([~/?ScreenId=CR301000|CR301000])

You can customize any of these predefined workflows in Customization Project Editor by adding a new workflow based on a predefined one (for details, see [HelpRoot_Dev_Customization\CG_GL_Items_AddWorkflow#_fde018e7-9022-4699-9e57-788ba24ca3f4|To Customize a Predefined Workflow]) or by extending graphs and workflows in the {{PX.Objects.CR.Workflows}} namespace. An example of a workflow extension is shown in the following code.{{{{public class OpportunityWorkflowExt 
  : PX.Data.PXGraphExtension&lt;OpportunityWorkflow, OpportunityMaint&gt;
}}}}
==Related Articles==
*[HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_WorkflowEditor|Workflow Editor]]]></column>
			<column name="PlainText"><![CDATA[Creating Workflows You can customize a form by defining a  workflow  in the  Customization Project Editor. A workflow is a definition of how the state of an entity should change as a result of a         user performing an action. For example, a workflow can involve the changing of the status of         an opportunity based on the actions a user has performed on it. The process of defining a workflow does not require coding. To define a workflow, you can use         the editors in the  Screens  section of the  Customization Project Editor. We recommend the following types of customization, based on the type of the form to be         customized: For forms with predefined workflows: The customization of predefined workflows and the           customization of fields and actions For custom forms: Creation of new workflows For forms with automation steps: The customization of fields in the Field Editor and the           customization of actions in the Action Editor without the creation of a workflow The             automation step functionality and the workflow functionality cannot be used             simultaneously for a single form. Thus, to define workflows for a form, you should             deactivate any automation steps for this form first. For details, see  To Deactivate Automation Steps. Workflow Inheritance Some  Acumatica ERP forms have predefined workflows, as described in  Predefined Workflows Predefined Workflows. You can define custom workflows from scratch or workflows based on the         predefined workflow for the form.  A custom workflow based on a predefined workflow inherits all modifications of the predefined         workflow. You can view the difference between the predefined workflow and a custom workflow,         and cause the custom workflow to revert to the predefined workflow.  If a predefined workflow is changed in an update after the development of any custom         workflows based on the predefined workflow, each of these custom workflows will inherit the         changes. If you publish a customization project that contains a custom workflow based on a         predefined workflow and there is a newer version of the predefined workflow in the system, a         developer can upgrade the customized predefined workflow with the latest changes from the         system. For details on updating a custom workflow based on a predefined workflow with the latest         changes in the system, see  To Upgrade a Workflow. Workflow Types A workflow type defines the set of entities to which the workflow is applied. The applicable         entity depends on the particular form for which the workflow is defined; for example, on the             ([~/?ScreenId=CR301000|CR301000]) Leads Leads (CR301000) form, leads are the         applicable entity. To apply a custom workflow to all entities, regardless of their property values, you set the         workflow type to  DEFAULT . To apply a custom workflow to entities with a specific         property value, you select the  Workflow-Identifying Field  on the         Workflows page and click  Add Workflow  on the page toolbar; in the            Add Workflow  dialog box, which opens, you need to specify a type         other than  DEFAULT . For example, to apply a workflow with a specific opportunity         class, on the Workflows page, you select  Class ID  in the  Workflow           Identifying Field  box and click  Add Worfklow  on the         page toolbar. Then in the  Add Workflow  dialog box, you select a type         other than  DEFAULT . Development of Workflows in an Extension Library You can develop and customize workflows not only in the  Customization Project Editor         but also in Visual Studio by using an extension library. To develop workflows, you should         use the set of classes that is located in the  PX.Data.WorkflowAPI          namespace. For details, see  To Define a Workflow from Code. Predefined Workflows As of  Acumatica ERP 2020 R1, the following forms have predefined workflows:  ([~/?ScreenId=CR304000|CR304000]) Opportunities Opportunities (CR304000)  ([~/?ScreenId=CR306000|CR306000]) Cases  Cases (CR306000)  ([~/?ScreenId=CR301000|CR301000]) Leads Leads (CR301000) You can customize any of these predefined workflows in  Customization Project Editor         by adding a new workflow based on a predefined one (for details, see  To Customize a Predefined Workflow) or by extending graphs and workflows in the  PX.Objects.CR.Workflows          namespace. An example of a workflow extension is shown in the following code. public class OpportunityWorkflowExt 
  : PX.Data.PXGraphExtension<OpportunityWorkflow, OpportunityMaint> ]]></column>
		</row>
		<row PageID="d3e955b9-2344-4370-a4cb-d05c403860e2" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="af3e94cf-bc4a-4a69-9c9a-d791fddb7a89" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You define a workflow in the following way: First, you determine all possible states of an entity that users work with on the particular form. Then for each state, you add all actions that can be performed with the entity in this state and all transitions associated with each action. A transition is the ways the entity’s state and the values of the entity&rsquo;s properties should be changed when the specific action is performed. If a user has to provide additional information for an entity to transition to a different state, you can define dialog boxes that contain the UI elements whose settings should be specified. For each state of the workflow, you can specify which UI elements and actions on the applicable form are shown, enabled, and required. Also, you can add new values for the field that determines the state of an entity, such as a new status.{br}

You can define a single workflow for the whole form or multiple workflows, one for the entity with each specific field value.{br}{TOC}
==Before You Proceed==
A workflow is applicable to a specific screen. Thus, before adding a workflow, you need to make sure the corresponding screen has been added to the customization project. See [HelpRoot_Dev_Customization\CG_GL_Items_Screens_Adding|To Add a Page Item for an Existing Form] or [HelpRoot_Dev_Customization\CG_GL_Items_Screens_AddingCustom|To Add a New Custom Form to a Project] for details.{br}

The automation steps and workflow functionality cannot work simultaneously for a single form. Thus, if you want to define workflows for a form, you need to deactivate all automation steps for this form first. For details, see [HelpRoot_Dev_Customization\CG_GL_items_DeactivateAutomation|To Deactivate Automation Steps].[anchor|#_faf887ae-380b-4b60-8b38-b68f476f73ea]
==To Add a Simple Workflow==
A workflow is referred to as ''simple'' when it is the only workflow defined for a form, consists of only states and transitions, and does not include dialog boxes. To add a simple workflow, do the following:[anchor|#_cd0e8925-a3a1-4668-8121-4804825d0934]
#In the navigation pane of the Customization Project Editor, click '''Workflows''' under the screen node you want to customize. The Workflows page opens.
#On the page toolbar, click '''Add Workflow'''.
#In the '''Add Workflow''' dialog box, which opens, specify the following settings:
#*'''Operation''': ''Create New Workflow''
#* '''Workflow Type''': ''DEFAULT''
#* '''Workflow Name''': The internal name of the workflow
#Click '''OK'''.
#:This closes the dialog box and displays a new row for the workflow in the table on the page.
#Click the link in the '''Workflow Name''' column.
#:The Workflows: &lt;Workflow Name&gt; page opens.
#For each state of the entity, do the following:
##On the toolbar of the '''States and Transitions''' pane, click '''+''' > '''Add State'''.
##In the '''Add State''' dialog box, which opens, specify the one-letter state identifier and the description of the state.
##Click '''OK'''. The dialog box is closed, and the state is added on the '''States and Transitions''' pane; it is also selected so that you can specify its properties, actions, and action parameters.
##:((({S:Warn}You can add a predefined state by clicking '''+''' > '''Add Predefined State''' in the '''States and Transitions''' pane toolbar.
)))
##Configure the state by doing the following:
###On the '''State Properties''' tab, define the state of the entity in the following way: In the '''Fields''' table, add fields and specify their properties for the selected state.
###On the '''Actions''' tab, specify the actions that are available to a user when the entity has the selected state.
###:By default, an action is placed as a menu command on the toolbar drop-down menu (toolbar folder) which you have configured for the action in the Action Editor. If you want to also place the action on the toolbar (as a button) outside the menu for the selected state, select the '''Duplicate on Toolbar''' check box.
###:If you want an action to be automatically performed if a condition is met on a form, in the '''Auto-Run Action''' column, specify the condition. If the entity has this state, every time a user clicks '''Save''' on the form, the system will check the condition and perform the action if the condition is met.
###:((({S:Warn}You can create a new workflow action in the Workflow Editor and in the Action Editor. For details, see [[#_e75d3580-b93c-43a8-9d6b-83ed67d56c0f|To Add a Workflow Action] and [HelpRoot_Dev_Customization\CG_GL_items_ConfigureActions|To Configure Actions].
)))
##For the state, add and configure transitions by doing the following:
###On the toolbar of the '''States and Transitions''' pane, click '''+''' > '''Add Transition'''.
###In the '''Add Transition''' dialog box, which opens, specify the following properties of the new transitions:
###*'''Transition Name''': The internal name of the transition
###*'''Action Name''' (required): The action that initiates the transition
###*'''Condition''': A condition under which the transition can be performed
###*:((({S:Warn}You must add a condition before you specify it here. Conditions are defined on the Conditions page of the customized screen. For details, see [HelpRoot_Dev_Customization\CG_GL_Items_AddCondition|To Add a Condition].
)))
###*'''Target State''' (required): The target state of the transition
###Click '''OK'''.
###:The dialog box is closed, and the transition appears in the '''States and Transitions''' pane.
###On the '''Transition Properties''' tab, in the '''Fields to Update After Transition''' table, add the fields that should change during this transition.
#On the page toolbar, click '''Save'''.

==Transition Steps==
In the diagram below, you can see the steps that are performed during a transition to change an entity&rsquo;s state from the original state to the target state.[anchor|#_35382e54-9d20-4d67-8dbc-abec6b744628][anchor|#_1c0365f3-5ab4-4c76-a729-f2c01c98d1ca][image:CustomizationPlatform/images/TransitionSteps.png|popup|Steps in a transition |450px]
First, a user invokes an action on the UI (Item 1 in the diagram). If applicable, the dialog box you have specified for the action is displayed, and the user enters the needed values in this dialog box (Item 2). Then the system updates the fields that you specified for the action (Item 3), if any. Optionally, if the action is defined in a graph, the system applies the parameters that you specified on the '''Action Parameters''' tab (Item 4) and invokes the action method (Item 5); only actions defined in a graph can have a method to be invoked and parameters to be applied. If you have specified a condition for this action, the condition is checked (Item 6). ((({S:Warn}In each transition, you can check for only one condition. To check for multiple conditions, you have to define multiple transitions, one for each condition. The system checks transition conditions in the order in which the transitions are defined in the Workflow Editor. Conditions are defined on the Conditions page of the customized screen. For details, see [HelpRoot_Dev_Customization\CG_GL_Items_AddCondition|To Add a Condition].
)))Optionally, the system updates the fields you have specified on the '''Update Fields After Transition''' table of the '''Transition Properties''' tab (Item 7). The system changes the entity&rsquo;s state to the target state specified in the '''Target State''' box of the '''Transition Properties''' tab.{br}

The following steps are performed only if you specified data on the corresponding tabs:[anchor|#_9c4e26ac-ba03-40cc-8558-cbd25052fefc]
*Displaying a dialog box (Item 2)
*Updating the field values before the transition (Item 3)
*Applying action parameters to the action method (Item 4)
*:((({S:Warn}This step can be performed only if an action in a graph and, thus, has an action to apply parameters to.
)))
*Checking for a condition (Item 6)
*Updating field values at the end of the transition (Item 7)
[anchor|#_e75d3580-b93c-43a8-9d6b-83ed67d56c0f]
==To Add a Workflow Action==
For each state of an entity, you can specify which actions are enabled for the current state and create new ''workflow actions''. A workflow action is a simplified type of an action that is not associated with a graph method. A workflow action can be used only to change the state of an entity, display workflow forms, and change the specified field values.((({S:Warn}To learn about other types of custom actions and ways to create them, see [HelpRoot_Dev_Customization\CG_GL_items_ConfigureActions|To Configure Actions].
)))
To configure a workflow action, do the following:[anchor|#_05a8aaac-f183-4992-acba-e4e40973952d]
#Open the Workflow Editor as follows:
##In the navigation pane of the Customization Project Editor, click '''Workflows''' under the screen node you want to customize. The Workflows page opens.
##In the list of workflows, click the name of the workflow for which you want to create an action.
##:The Workflows: &lt;Workflow Name&gt; page opens.
#In the '''States and Transitions''' pane, select the state for which you want to create an action.
#Open the '''Actions''' tab toolbar, click '''Create Action'''.
#In the '''New Action''' dialog box, which opens, specify the following settings:
#*'''Action Name''': The internal name of the action
#*'''Display Name''': The name of the action to be displayed on the form
#*'''Dialog Box''': The dialog box that should be opened when the action is selected
#*:You must define a dialog box before specifying it for the action. For details on creating a dialog box, see [HelpRoot_Dev_Customization\CG_GL_Items_AddForm|To Add a Dialog Box].
#*'''Toolbar Folder''': The menu on the form toolbar that should include the action
#*:If you want the action to be displayed on the toolbar as a button (outside of any menu), select the '''On Top Level''' check box.
#Click '''OK'''.
#:The system closes the dialog box and lists the new action on the '''Actions''' tab.
#On the page toolbar, click '''Save'''.

==To Add Multiple Workflows for a Form==
You can add multiple workflows for a particular form. In this case, each workflow is applied to all entities that have a specific value of a selected field. For example, one workflow can be applied to opportunities of one class (that is, an opportunity class selected on the [HelpRoot_FormReference\CR_30_40_00|Opportunities] ([~/?ScreenId=CR304000|CR304000]) form), and another workflow can be applied to opportunities of another class.{br}

To add a workflow that is based on a specific value of a selected field, do the following:[anchor|#_526a0d85-b900-4eda-8ff2-8f8a42d035c5]
#In the navigation pane of the Customization Project Editor, click '''Workflows''' under the screen node you want to customize. The Workflows page opens.
#In the '''State Identifier''' box, select the field that defines the status of the applicable entity.
#In the '''Workflow-Identifying Field''' box, select the field whose value identifies the workflow.
#:((({S:Warn}Only a text field can be specified as a workflow-identifying field.
)))
#On the page toolbar, click '''Add Workflow'''.
#In the '''Add Workflow''' dialog box which opens, specify the properties of the workflow, and, in the '''Workflow Type''' box, select the value of the workflow-identifying field.
#Define the states and transitions of the new workflow, as described in [[#_faf887ae-380b-4b60-8b38-b68f476f73ea|To Add a Simple Workflow].
[anchor|#_fde018e7-9022-4699-9e57-788ba24ca3f4]
==To Customize a Predefined Workflow==
You cannot directly modify a predefined workflow. To customize a predefined workflow, you instead add a workflow based on a predefined workflow. A workflow based on a predefined workflow can be referred to as ''inherited''. {br}

To create an inherited workflow in the Workflow Editor, do the following:[anchor|#_70ad8809-6349-4dec-ab6f-d07fb2d10d48]
#In the navigation pane of the Customization Project Editor, click '''Workflows''' under the screen node you want to customize. The Workflows page opens.
#On the page toolbar, click '''Add Workflow'''.
#In the '''Add Workflow''' dialog box, which opens, specify the following:
#*'''Operation''': ''Extend System Workflow''
#* '''Base Workflow''': The name of the predefined workflow
#*'''Workflow Type''': The type of the workflow
#*:The type of a custom workflow may be different from the type of the predefined workflow this workflow is based on. You can create several inherited workflows, and they can be of the same type or different types. For example, you can create two workflows based on the same predefined workflow: one for cases of the ''Hardware Support'' type and another one for cases of the ''Software Support ''type if the support case type is specified as the workflow-identifying field.
#*'''Workflow Name''': The internal name of the workflow
#Click '''OK'''.
#In the table, click the name the workflow.
#:The Workflows: &lt;Workflow Name&gt; page opens.
#Analyze the states and transitions of the predefined workflow. Customize them as you need to, or add new ones.
#:For states, transitions, and actions of the predefined workflow, the ''Inherited'' option is inserted in the '''Status''' column of each item. For states, transitions, and actions that you add in your customized workflow. the ''New'' option is inserted in the '''Status''' column.
#:You can view the differences between the items of the predefined workflow and those of the inherited workflow by clicking the '''View Changes''' button on the page toolbar. To return an item to the predefined configuration, click the '''Revert Changes''' button on the page toolbar.
#On the Workflows page, select the '''Active''' check box for the created workflow and save your changes.

For details on upgrading predefined and inherited workflows to the latest changes in the system, see [HelpRoot_Dev_Customization\CG_GL_Projects_UpgradeWorkflow|To Upgrade a Workflow].
==Related Articles==
*[HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_WorkflowEditor|Workflow Editor]]]></column>
			<column name="PlainText"><![CDATA[To Add a Workflow You          define a workflow in the following way: First, you determine all possible states of an         entity that users work with on the particular form. Then for each state, you add all actions         that can be performed with the entity in this state and all transitions associated with each         action. A transition is the ways the entity’s state and the values of the entity's         properties should be changed when the specific action is performed. If a user has to provide         additional information for an entity to transition to a different state, you can define         dialog boxes that contain the UI elements whose settings should be specified. For each state         of the workflow, you can specify which UI elements and actions on the applicable form are         shown, enabled, and required. Also, you can add new values for the field that determines the         state of an entity, such as a new status. You can define a single workflow for the whole form or multiple workflows, one for the         entity with each specific field value. Before You Proceed A workflow is applicable to a specific screen. Thus, before adding a workflow, you need to         make sure the corresponding screen has been added to the customization project. See  To Add a Page Item for an Existing Form or  To Add a New Custom Form to a Project for details. The automation steps and workflow functionality cannot work simultaneously for a single         form. Thus, if you want to define workflows for a form, you need to deactivate all         automation steps for this form first. For details, see  To Deactivate Automation Steps. To Add a Simple Workflow A workflow is referred to as  simple  when it is the only workflow defined for a form,         consists of only states and transitions, and does not include dialog boxes. To add a simple         workflow, do the following: In the navigation pane of the  Customization Project Editor, click  Workflows  under the screen node you want to customize.           The Workflows page opens. On the page toolbar, click  Add Workflow . In the  Add Workflow  dialog box, which opens, specify the           following settings: Operation :  Create New Workflow Workflow Type :  DEFAULT Workflow Name : The internal name of the workflow Click  OK . This closes the dialog box and displays a new row for             the workflow in the table on the page. Click the link in the  Workflow Name  column. The Workflows:             <Workflow Name> page opens. For each state of the entity, do the following: On the toolbar of the  States and Transitions  pane, click  + Add State . In the  Add State  dialog box, which opens, specify the               one-letter state identifier and the description of the state. Click  OK . The dialog box is closed, and the state is added on               the  States and Transitions  pane; it is also selected so that               you can specify its properties, actions, and action parameters. You can add a                 predefined state by clicking  + Add Predefined State  in the  States and Transitions  pane                 toolbar. Configure the state by doing the following: On the  State Properties  tab, define the state of the                   entity in the following way: In the  Fields  table, add                   fields and specify their properties for the selected state. On the  Actions  tab, specify the actions that are                   available to a user when the entity has the selected state. By default, an                     action is placed as a menu command on the toolbar drop-down menu (toolbar                     folder) which you have configured for the action in the Action Editor. If you                     want to also place the action on the toolbar (as a button) outside the menu for                     the selected state, select the  Duplicate on Toolbar  check                     box. If you want an action to be automatically performed if a condition is                     met on a form, in the  Auto-Run Action  column, specify the                     condition. If the entity has this state, every time a user clicks                        Save  on the form, the system will check the condition                     and perform the action if the condition is met. You can create a new                     workflow action in the Workflow Editor and in the Action Editor. For details,                     see  To Add a Workflow Action To Add a Workflow Action and  To Configure Actions. For the state, add and configure transitions by doing the following: On the toolbar of the  States and Transitions  pane, click  + Add Transition . In the  Add Transition  dialog box, which opens, specify                   the following properties of the new transitions: Transition Name : The internal name of the                       transition Action Name  (required): The action that initiates the                       transition Condition : A condition under which the transition can                       be performed You must add a condition before you specify it here.                         Conditions are defined on the Conditions page of the customized screen. For                         details, see  To Add a Condition. Target State  (required): The target state of the                       transition Click  OK . The dialog box is closed, and the transition                     appears in the  States and Transitions  pane. On the  Transition Properties  tab, in the                      Fields to Update After Transition  table, add the fields                   that should change during this transition. On the page toolbar, click  Save . Transition Steps In the diagram below, you can see the steps that are performed during a transition to         change an entity's state from the original state to the target state. Steps in a transition  First, a user invokes an action on the UI (Item 1 in the diagram). If applicable, the         dialog box you have specified for the action is displayed, and the user enters the needed         values in this dialog box (Item 2). Then the system updates the fields that you specified         for the action (Item 3), if any. Optionally, if the action is defined in a graph, the system         applies the parameters that you specified on the  Action Parameters          tab (Item 4) and invokes the action method (Item 5); only actions defined in a graph can         have a method to be invoked and parameters to be applied. If you have specified a condition         for this action, the condition is checked (Item 6).  In each transition, you can check           for only one condition. To check for multiple conditions, you have to define multiple           transitions, one for each condition. The system checks transition conditions in the order           in which the transitions are defined in the Workflow Editor. Conditions are defined on the           Conditions page of the customized screen. For details, see  To Add a Condition. Optionally, the system updates the fields         you have specified on the  Update Fields After Transition  table of the            Transition Properties  tab (Item 7). The system changes the entity's         state to the target state specified in the  Target State  box of the            Transition Properties  tab. The following steps are performed only if you specified data on the corresponding tabs: Displaying a dialog box (Item 2) Updating the field values before the transition (Item 3) Applying action parameters to the action method (Item 4) This step can be               performed only if an action in a graph and, thus, has an action to apply parameters               to. Checking for a condition (Item 6) Updating field values at the end of the transition (Item 7) To Add a Workflow Action For each state of an entity, you can specify which actions are enabled for the current         state and create new  workflow actions . A workflow action is a simplified type of an         action that is not associated with a graph method. A workflow action can be used only to         change the state of an entity, display workflow forms, and change the specified field         values. To learn about other types of custom actions and ways to create them, see  To Configure Actions. To configure a workflow action, do the following: Open the Workflow Editor as follows: In the navigation pane of the  Customization Project Editor, click  Workflows  under the screen node you want to               customize. The Workflows page opens. In the list of workflows, click the name of the workflow for which you want to               create an action. The Workflows: <Workflow Name> page opens. In the  States and Transitions  pane, select the state for which           you want to create an action. Open the  Actions  tab toolbar, click  Create             Action . In the  New Action  dialog box, which opens, specify the following             settings: Action Name : The internal name of the action Display Name : The name of the action to be displayed on the               form Dialog Box : The dialog box that should be opened when the               action is selected You must define a dialog box before specifying it for the action.                 For details on creating a dialog box, see  To Add a Dialog Box. Toolbar Folder : The menu on the form toolbar that should               include the action If you want the action to be displayed on the toolbar as a button                 (outside of any menu), select the  On Top Level  check               box. Click  OK . The system closes the dialog box and lists the new             action on the  Actions  tab. On the page toolbar, click  Save . To Add Multiple Workflows for a Form You can add multiple workflows for a particular form. In this case, each workflow is         applied to all entities that have a specific value of a selected field. For example, one         workflow can be applied to opportunities of one class (that is, an opportunity class         selected on the   ([~/?ScreenId=CR304000|CR304000]) Opportunities Opportunities (CR304000)         form), and another workflow can be applied to opportunities of another class. To add a workflow that is based on a specific value of a selected field, do the         following: In the navigation pane of the  Customization Project Editor, click  Workflows  under the screen node you want to customize.           The Workflows page opens. In the  State Identifier  box, select the field that defines the           status of the applicable entity. In the  Workflow-Identifying Field  box, select the field whose           value identifies the workflow. Only a text field can be specified as a             workflow-identifying field. On the page toolbar, click  Add Workflow . In the  Add Workflow  dialog box which opens, specify the           properties of the workflow, and, in the  Workflow Type  box, select           the value of the workflow-identifying field. Define the states and transitions of the new workflow, as described in  To Add a Simple Workflow To Add a Simple Workflow. To Customize a Predefined Workflow You cannot directly modify a predefined workflow. To customize a predefined workflow, you         instead add a workflow based on a predefined workflow. A workflow based on a predefined         workflow can be referred to as  inherited .  To create an inherited workflow in the Workflow Editor, do the following: In the navigation pane of the  Customization Project Editor, click  Workflows  under the screen node you want to customize.           The Workflows page opens. On the page toolbar, click  Add Workflow . In the  Add Workflow  dialog box, which opens, specify the             following: Operation :  Extend System Workflow Base Workflow : The name of the predefined workflow Workflow Type : The type of the workflow The type of a                 custom workflow may be different from the type of the predefined workflow this                 workflow is based on. You can create several inherited workflows, and they can be of                 the same type or different types. For example, you can create two workflows based on                 the same predefined workflow: one for cases of the  Hardware Support  type and                 another one for cases of the  Software Support  type if the support case type                 is specified as the workflow-identifying field. Workflow Name : The internal name of the workflow Click  OK . In the table, click the name the workflow. The Workflows: <Workflow Name> page             opens. Analyze the states and transitions of the predefined workflow. Customize them as you           need to, or add new ones. For states, transitions, and actions of the predefined             workflow, the  Inherited  option is inserted in the  Status              column of each item. For states, transitions, and actions that you add in your             customized workflow. the  New  option is inserted in the                Status  column. You can view the differences between the             items of the predefined workflow and those of the inherited workflow by clicking the                View Changes  button on the page toolbar. To return an item to             the predefined configuration, click the  Revert Changes  button on             the page toolbar. On the Workflows page, select the  Active  check box for the           created workflow and save your changes. For details on upgrading predefined and inherited workflows to the latest changes in the         system, see  To Upgrade a Workflow. ]]></column>
		</row>
		<row PageID="8010e4c8-9390-477b-bda3-a95c38dc8fed" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="ae0e99e6-e152-12d6-4405-3fec28f67840" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can add a workflow dialog box, which is shown to a user who selects a particular action. By using the dialog box, the user provides additional values to perform the applicable action and change the state of the entity associated with the form.{br}{TOC}
==Before You Proceed==
A dialog box is added to a specific screen. Thus, before adding a dialog box, you need to make sure the corresponding screen has been added to the customization project. See [HelpRoot_Dev_Customization\CG_GL_Items_Screens_Adding|To Add a Page Item for an Existing Form] or [HelpRoot_Dev_Customization\CG_GL_Items_Screens_AddingCustom|To Add a New Custom Form to a Project] for details.
==To Add a Dialog Box==
To add a dialog box, do the following:[anchor|#_92583bd4-b3f6-45ff-bae7-960cb6f4e077]
#In the navigation pane of the Customization Project Editor, click '''Dialog Box''' under the screen node you want to customize. The Dialog Boxes page opens.
#In the '''Dialog Boxes''' pane, click '''Add'''.
#In the '''New Dialog box''' dialog box, which opens, enter the name of the dialog box.
#Click '''OK'''.
#:In the '''Dialog Boxes''' pane, the name of the new dialog box appears.
#In the right pane, do the following:
##In the '''Title''' box, specify the title of the dialog box you are adding.
##In the '''Dialog Box Fields''' table, add the fields for which a user should provide values in the dialog box.
##:You can add the following types of fields:
##*Fields of the form where the dialog box is shown. These fields have the same UI control and set of values as the corresponding fields on the form.
##*Custom drop-down lists. You can configure the list of values displayed in the drop-down.
##*Custom check boxes.
#On the page toolbar, click '''Save'''.

Now that you have saved the added dialog box, you can specify it for a workflow action in the Action Editor. For details, see [HelpRoot_Dev_Customization\CG_GL_Items_AddWorkflow|To Add a Workflow] and [HelpRoot_Dev_Customization\CG_GL_items_ConfigureActions|To Configure Actions].
==Related Articles==
*[HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_FormsEditor|Dialog Box Editor]
*[HelpRoot_Dev_Customization\CG_GL_Items_AddWorkflow|To Add a Workflow]]]></column>
			<column name="PlainText"><![CDATA[To Add a Dialog Box You can add a workflow dialog box, which is shown to a user who selects a particular action.         By using the dialog box, the user provides additional values to perform the applicable         action and change the state of the entity associated with the form. Before You Proceed A dialog box is added to a specific screen. Thus, before adding a dialog box, you need to make         sure the corresponding screen has been added to the customization project. See  To Add a Page Item for an Existing Form or  To Add a New Custom Form to a Project for details. To Add a Dialog Box To add a dialog box, do the following: In the navigation pane of the  Customization Project Editor, click  Dialog Box  under the screen node you want to customize.           The            Dialog           Boxes page  opens. In the  Dialog Boxes  pane, click  Add . In the  New Dialog box  dialog box, which opens, enter the name of the           dialog box. Click  OK . In the  Dialog Boxes  pane, the name             of the new dialog box appears. In the right pane, do the following: In the  Title  box, specify the title of the dialog box you are        adding. In the  Dialog Box Fields  table, add the fields for which a user               should provide values in the dialog box. You can add the following types of                 fields: Fields of the form where the dialog box is shown. These fields have the same UI                   control and set of values as the corresponding fields on the form. Custom drop-down lists. You can configure the list of values displayed in the                   drop-down. Custom check boxes. On the page toolbar, click  Save . Now that you have saved the added dialog box, you can specify it for a workflow action in the         Action Editor. For details, see  To Add a Workflow and  To Configure Actions. ]]></column>
		</row>
		<row PageID="61a73d84-425a-42e1-8de2-3611cbcbbd3c" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="a866cc7e-e79b-9291-c133-7b9f4d1a9467" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can modify the properties of an existing field and view its inheritance status in the Field Editor. To do this, you should first add the field in the Field Editor. Then you will be able to modify the following field properties:[anchor|#_c5b326ab-4cb2-4ca7-aeb9-fe99296aaf3e]
*{{Disabled}}: Whether the field is disabled for editing
*{{Hidden}}: Whether the field is hidden on the form
*<tt>Required</tt>: Whether a user must provide a value for the field to be able to save a record
*<tt>Display Name</tt>: The name of the corresponding box displayed in the UI

Also, for the fields displayed as combo boxes, you can modify the list of possible values.{br}{TOC}
==Before You Proceed==
You configure fields for a particular screen. Thus, before you start configuring fields, you need to make sure the corresponding screen has been added to the customization project. See [HelpRoot_Dev_Customization\CG_GL_Items_Screens_Adding|To Add a Page Item for an Existing Form] or [HelpRoot_Dev_Customization\CG_GL_Items_Screens_AddingCustom|To Add a New Custom Form to a Project] for details.
==To Add a Field in the Field Editor==
To add a field in the Field Editor, do the following:[anchor|#_aa897d46-583b-4a28-92ad-97086242f0bd]
#In the navigation pane of the Customization Project Editor, click '''Fields''' under the screen node you want to customize. The Fields page opens.
#On the form toolbar, click '''Add New Record'''.
#In the '''Add Field''' dialog box, which opens, specify the following values:
#*'''Container''': The form container where the box for the field is located
#*:The '''DAC''' box is filled in automatically.
#*'''Field Name''': Internal name of the field
#Select the field and click '''Add & Close'''.
#On the page toolbar, click '''Save'''.

==To Modify Field Properties==
To modify the properties of a field, do the following:[anchor|#_f27652fa-3809-45b4-989a-4b02c47ce4e2]
#On the Fields page, select the field.
#If needed, modify the display name of the box in the '''Field Name''' column.
#Select the needed values in the '''Disabled''', '''Hidden''', or '''Required''' columns.
#:If any conditions were defined in the Condition Editor for this screen, these conditions will also be displayed in the list of possible values for the column.
#On the page toolbar, click '''Save'''.

==To View Changes Between the Predefined and Customized Field==
You can view the changes to the field performed in the Field Editor by doing the following:[anchor|#_7c35ff7c-5c96-48f8-92b3-d23fb6a8d6a1]
#In the navigation pane of the Customization Project Editor, click '''Fields''' under the screen node you want to customize. The Fields page opens.
#In the table on the page, select the field for which you want to view changes.
#On the form toolbar, click '''View Changes'''.
#:The '''Changes''' dialog box is shown. The original set of properties of the field is displayed in green. Changes are displayed in red.
#If you want to return the properties of the field properties to the original predefined settings, select '''Revert Changes'''. In the '''Revert Changes''' dialog box, which opens, click '''OK''' to confirm the revert process.

==To Configure the Values of a Combo Box ==
For fields that are displayed as combo boxes, you can configure the list of values to be displayed in the combo box. Do the following:[anchor|#_dd0c3161-0ffc-4b4f-ace1-a592009c97ac]
#In the Field Editor, select the field whose values you want to configure.
#On the page toolbar, click '''Combo Box Values'''.
#In the '''Combo Box Values''' dialog box, which opens, analyze the list of fields that are displayed by default, and do any of the following:
#*In the '''Description''' column, change the displayed title of the value.
#*To hide a value from the list of values to be displayed, clear the '''Active''' check box.
#*To add a value, on the table toolbar, click '''Add Row''', and specify the properties of the field in the table.
#Click '''OK''' to close the dialog box and add the field to the list of fields.

==Related Articles==
*[HelpRoot_Dev_Customization\CG_Platfrom_Tools_Editor_Fields|Field Editor]]]></column>
			<column name="PlainText"><![CDATA[To Modify Field Properties You can modify the properties of an existing field and view its inheritance status in the         Field Editor. To do this, you should first add the field in the Field Editor. Then you will         be able to modify the following field properties: Disabled : Whether the field is disabled for editing Hidden : Whether the field is hidden on the form Required : Whether a user must provide a value for the field to be able to           save a record Display Name : The name of the corresponding box displayed in the           UI Also, for the fields displayed as combo boxes, you can modify the list of possible values. Before You Proceed You configure fields for a particular screen. Thus, before you start configuring fields, you         need to make sure the corresponding screen has been added to the customization project. See            To Add a Page Item for an Existing Form or  To Add a New Custom Form to a Project for details. To Add a Field in the Field Editor To add a field in the Field Editor, do the following: In the navigation pane of the  Customization Project Editor, click  Fields  under the screen node you want to customize. The           Fields page opens. On the form toolbar, click  Add New Record . In the  Add Field  dialog box, which opens, specify the following             values: Container : The form container where the box for the field is                 located The  DAC  box is filled in automatically. Field Name : Internal name of the field Select the field and click  Add & Close . On the page toolbar, click  Save . To Modify Field Properties To modify the properties of a field, do the following: On the Fields page, select the field. If needed, modify the display name of the box in the  Field Name            column. Select the needed values in the  Disabled ,              Hidden , or  Required  columns. If any             conditions were defined in the Condition Editor for this screen, these conditions will             also be displayed in the list of possible values for the column. On the page toolbar, click  Save . To View Changes Between the Predefined and Customized Field You can view the changes to the field performed in the Field Editor by doing the     following: In the navigation pane of the  Customization Project Editor, click  Fields  under the screen node you want to customize. The           Fields page opens. In the table on the page, select the field for which you want to view changes. On the form toolbar, click  View Changes . The                Changes  dialog box is shown. The original set of properties of             the field is displayed in green. Changes are displayed in red. If you want to return the properties of the field properties to the original predefined           settings, select  Revert Changes . In the  Revert             Changes  dialog box, which opens, click  OK  to confirm           the revert process. To Configure the Values of a Combo Box  For fields that are displayed as combo boxes, you can configure the list of values to be     displayed in the combo box. Do the following: In the Field Editor, select the field whose values you want to configure. On the page toolbar, click  Combo Box Values . In the  Combo Box Values  dialog box, which opens, analyze the list of           fields that are displayed by default, and do any of the following: In the  Description  column, change the displayed title of the               value. To hide a value from the list of values to be displayed, clear the                  Active  check box. To add a value, on the table toolbar, click  Add Row , and               specify the properties of the field in the table. Click  OK  to close the dialog box and add the field to the list of           fields. ]]></column>
		</row>
		<row PageID="cbbac950-4172-42c7-b950-a589a87df249" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="7a1cb69b-5d71-2863-6c7c-437734dec068" RecordSourceID="22377">
			<column name="Content"><![CDATA[
To define a workflow, you use the Action Editor. In the editor, you can create new actions, add predefined actions, and configure the properties of the actions that have been added in the editor. Actions added in the predefined workflow are automatically displayed in the editor, where you can modify these actions&rsquo; properties.{br}

To understand which of the listed actions are predefined and which are new, you can refer to the '''Status''' setting of each action. Predefined actions have the ''Inherited'' status, and all actions that you have added to the Action Editor list (including existing graph actions) have the ''New'' status.{br}{TOC}
==Before You Proceed==
You configure actions for a particular screen. Thus, before you start configuring actions, you need to make sure the corresponding screen has been added to the customization project. See [HelpRoot_Dev_Customization\CG_GL_Items_Screens_Adding|To Add a Page Item for an Existing Form] or [HelpRoot_Dev_Customization\CG_GL_Items_Screens_AddingCustom|To Add a New Custom Form to a Project] for details.[anchor|#_a09d6f18-f9b8-4519-9aab-1f165de1b975]
==Types of Actions==
You can add the following types of actions in the Action Editor:[anchor|#_6b96d521-08d7-4eb6-baae-69267af2b1bc]
*Actions that redirect a user to a different form or report
*Workflow actions: Actions that change the state of the applicable entity
*Actions that open a side panel
*Actions defined in a graph

The following table lists the types of redirect actions you can add and the screen ID you can specify for an action of the type.[anchor|#_d709cac9-b70d-4160-a10a-76013e4c2e8b]
{| class="checklist"
!Action Type
!Screen ID
|-
| Run report
| The screen ID of the report that you want to run and to which you want to redirect the user, such as [HelpRoot_ReportReference\SO_61_05_00|Sales Order Summary]y (''SO610500'')
|-
| Navigation: Search records
| The screen ID of the form to which you want to redirect the user; this is a form where a user can search for records, such as an inquiry or a generic inquiry. For example, you might specify this action type with the screen ID ''SO3010PL'', which is the ID of the substitute form for the Sales Orders entry form.
|-
| Navigation: Create record
| The screen ID of the form to which you want to redirect the user; this is a form on which a user can create a new record. For example, you might specify ''SO301000'' as the screen ID (which is the ID of the [HelpRoot_FormReference\SO_30_10_00|Sales Orders] ([~/?ScreenId=SO301000|SO301000]) data entry form).
|-
| Navigation: Side Panel
| The screen ID of a form that will be opened in a side panel when a user clicks the action. You can specify the following types of forms: dashboards, reports, and generic inquiries. For example, you might specify ''CR3060PL'' as the screen ID (which is the ID of the Cases (CR3060PL) data entry form).
| }
==To Create a New Action==
You can create actions in the following ways:[anchor|#_14e0e1d6-ea56-4231-9d88-245ec2ac4cf9]
*By clicking the''' Create Action''' button in the '''Add Transition''' dialog box when you are creating a transition in the Workflow Editor
*By clicking the '''Create Action''' button in the '''Actions''' tab for the state selected in the Workflow Editor
*By clicking the '''Create New''' button on the page toolbar of the Actions page
((({S:Warn}Other types of actions (redirect actions) can be created only in the Action Editor.
)))
To create a new action in the Action Editor, do the following:[anchor|#_da8ffbdd-67ad-465e-95e3-9098077ba8e2]
#In the navigation pane of the Customization Project Editor, click '''Actions''' under the screen node you want to customize. The Actions page opens.
#On the page toolbar, click '''Add New Record''' > '''Create New'''.
#In the '''Action Properties''' dialog box, which opens, specify the following properties of the new action:
#*'''Action Name''' (required): The internal name of the action that will be displayed in the Action Editor and Workflow Editor.
#*'''Display Name''' (required): The name of the action that will be displayed on the applicable Acumatica ERP form.
#*'''Destination Screen''' (required): The screen or report that should be opened when the action redirects a user to a different screen.
#*'''Disabled''': An option that indicates whether the action is disabled by default.
#*'''Hidden''': An option that indicates whether the action is hidden by default.
#*:In the '''Disable''' and '''Hide''' boxes, you can also specify a condition, depending on which the action is disabled or hidden. For details, see [HelpRoot_Dev_Customization\CG_GL_Items_AddCondition|To Add a Condition]. If this action is used in a workflow and its availability or visibility depends on the state of the applicable entity, you need to configure these properties in this state. For details, see [HelpRoot_Dev_Customization\CG_GL_Items_AddWorkflow|To Add a Workflow].
#*'''Dialog Box''': The dialog box that should be displayed when the action is clicked. For details, see [HelpRoot_Dev_Customization\CG_GL_Items_AddForm|To Add a Dialog Box].
#*'''Processing Screen''': A processing form of Acumatica ERP on which the action will also be available for mass processing.
#*'''Action Type''': An option that indicates whether the action runs a report, redirects a user to a particular form, or changes a state of an entity as a part of a workflow.
#*'''Toolbar Folder''': The folder on the form toolbar that will contain the action.
#*'''Window Mode''': If the action opens a new page, where the page should be displayed.
#Depending on the type of the action you selected, do the following:
#*For a redirect action, specify the navigation parameters and fields to be updated when the action is selected.
#*:((({S:Warn}To be able to specify navigation parameters, you should first specify a value in the '''Destination Screen''' box.
)))
#*For a workflow action, specify the fields to be updated when the action is performed.
#Click '''OK'''.
#:The dialog box is closed, and the new action appears in the table on the Actions page.

==To Customize an Existing Action==
If you need to customize an existing action (an action defined in a graph), such as changing the action’s properties, first you need to add it to the Action Editor.{br}

To add an action to the Actions page, do the following:[anchor|#_2ec03bfd-079b-4dac-9d04-e19dfe82bde3]
#In the navigation pane of the Customization Project Editor, click '''Actions''' under the screen node you want to customize. The Actions page opens.
#On the page toolbar, click '''Add New Record''' > '''Add Existing'''.
#In the '''Action Properties''' dialog box, which opens, in the '''Action Name''' box, select the internal name of the action.
#:The current properties of the action are copied to the other elements of the '''Action Properties''' dialog box.
#If you want to modify the action properties before adding the action, specify the following values:
#*'''Display Name''': The name of the action that will be displayed on the applicable Acumatica ERP form.
#*'''Disabled''': An option that indicates whether the action is disabled by default.
#*'''Hidden''': An option that indicates whether the action is hidden by default.
#*:In the '''Disable''' and '''Hide''' boxes, you can also specify a condition, depending on which the action is disabled or hidden. For details, see [HelpRoot_Dev_Customization\CG_GL_Items_AddCondition|To Add a Condition]. If this action is used in a workflow and its availability or visibility depends on the state of the applicable entity, you need to configure these properties in this state. For details, see [HelpRoot_Dev_Customization\CG_GL_Items_AddWorkflow|To Add a Workflow].
#*'''Dialog Box''': The dialog box that should be displayed when the action is clicked. For details, see [HelpRoot_Dev_Customization\CG_GL_Items_AddForm|To Add a Dialog Box].
#*'''Processing Screen''': A processing form of Acumatica ERP on which the action will also be available for mass processing.
#*'''Toolbar Folder''': The folder on the form toolbar that will contain the action.
#Depending on the type of the action you have selected, do the following:
#*For a redirect action, specify the navigation parameters and fields to be updated when the action is selected.
#*:((({S:Warn}To be able to specify navigation parameters, you should first specify a value in the '''Destination Screen''' box.
)))
#*For a workflow action, specify the fields to be updated when the action is performed.
#*For a graph action you are customizing, specify the action parameters.
#Click '''OK'''.
#:The added action appears in the table of the Actions page.

Now you can change the properties of the action by selecting the action on the Actions page and specifying its settings in the '''Action Properties''' dialog box.
==To Change the Location of an Action in a Menu==
When you add an action in the Action Editor, you specify a toolbar folder on a form where the action should be displayed. By default, the action is added at the end of that folder. You can change the location of the action in a folder by doing the following:[anchor|#_97bc47c8-5697-4a2c-9d61-db3586d2ead3]
#In the navigation pane of the Customization Project Editor, click '''Actions''' under the screen node you want to customize. The Actions page opens.
#On the page toolbar, click '''Reorder Actions'''.
#In the '''Reorder Actions''' dialog box, which opens, in the '''Toolbar Folder''' box, select the folder where the action is located.
#:The actions located in the selected folder are displayed in the dialog box.
#Select the action you want to move.
#Change the location of the action by using the '''Move Up''' and '''Move Down''' actions on the table toolbar.
#Click '''OK''' to close the dialog box.
#On the page toolbar, click '''Save'''.

==To View Changes Between the Predefined and Customized Action==
All predefined actions of the applicable screen are displayed on the Actions page by default. If you have modified a predefined action in the Action Editor, you can view the changes to the action by doing the following:[anchor|#_7c35ff7c-5c96-48f8-92b3-d23fb6a8d6a1]
#In the navigation pane of the Customization Project Editor, click '''Actions''' under the screen node you want to customize. The Actions page opens.
#In the table, select an action.
#On the form toolbar, click '''View Changes'''.
#:The '''Changes''' dialog box is shown. The original set of properties of the selected action is displayed in green. Changes are displayed in red.
#If you want to return the action properties to the original predefined state, click '''Revert Changes'''.
#:((({S:Warn}If you want to return all customized actions to the predefined properties, on the page toolbar of the Actions page, click '''Revert All Changes'''.
)))

==To Remove an Action==
You can only remove actions that have the ''New'' status—, that is, actions added by a user in the Action Editor. To remove an action from the Actions page, do the following:[anchor|#_8f66e304-26df-4512-a36c-40da84d73270]
#In the navigation pane of the Customization Project Editor, click '''Actions''' under the screen node you want to customize. The Actions page opens.
#In the table, select an action.
#On the page toolbar, click '''Delete Row'''.
#:The action is removed from the Action Editor. If the action was created by using the Action Editor, the action is removed completely. If the action was defined in a graph and added as an existing action in the Actions Editor, it is removed only from the list on the Actions page, and all modifications of the action are removed.

==Related Articles==
*[HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_Actions|Action Editor]]]></column>
			<column name="PlainText"><![CDATA[To Configure Actions To define a workflow, you use the Action Editor. In the editor, you can create new actions,         add predefined actions, and configure the properties of the actions that have been added in         the editor. Actions added in the predefined workflow are automatically displayed in the         editor, where you can modify these actions' properties. To understand which of the listed actions are predefined and which are new, you can refer         to the  Status  setting of each action. Predefined actions have the            Inherited  status, and all actions that you have added to the Action Editor list         (including existing graph actions) have the  New  status. Before You Proceed You configure actions for a particular screen. Thus, before you start configuring actions,         you need to make sure the corresponding screen has been added to the customization project.         See  To Add a Page Item for an Existing Form or  To Add a New Custom Form to a Project for details. Types of Actions You can add the following types of actions in the Action Editor: Actions that redirect a user to a different form or report Workflow actions: Actions that change the state of the applicable entity Actions that open a side panel Actions defined in a graph The following table lists the types of redirect actions you can add and the screen ID you         can specify for an action of the type. Action Type Screen ID Run report The screen ID of the report that you want to run and to which you want to             redirect the user, such as   ([~/?ScreenId=SO610500|SO610500]) Sales Order Summaryy               ( SO610500 ) Navigation: Search records The screen ID of the form to which you want to redirect the user; this is a form             where a user can search for records, such as an inquiry or a generic inquiry. For             example, you might specify this action type with the screen ID  SO3010PL , which is             the ID of the substitute form for the Sales Orders entry form. Navigation: Create record The screen ID of the form to which you want to redirect the user; this is a form             on which a user can create a new record. For example, you might specify  SO301000              as the screen ID (which is the ID of the   ([~/?ScreenId=SO301000|SO301000]) Sales Orders             (SO301000) data entry form). Navigation: Side Panel The screen ID of a form that will be opened in a side panel when a user clicks             the action. You can specify the following types of forms: dashboards, reports, and             generic inquiries. For example, you might specify  CR3060PL  as the screen ID             (which is the ID of the Cases (CR3060PL) data entry form). To Create a New Action You can create actions in the following ways: By clicking the  Create Action  button in the  Add             Transition  dialog box when you are creating a transition in the Workflow           Editor By clicking the  Create Action  button in the              Actions  tab for the state selected in the Workflow Editor By clicking the  Create New  button on the page toolbar of the           Actions page Other types of actions (redirect actions) can be created only in the Action         Editor. To create a new action in the Action Editor, do the following: In the navigation pane of the  Customization Project Editor, click  Actions  under the screen node you want to customize. The           Actions page opens. On the page toolbar, click  Add New Record Create New . In the  Action Properties  dialog box, which opens, specify the           following properties of the new action: Action Name  (required): The internal name of the action that               will be displayed in the Action Editor and Workflow Editor. Display Name  (required): The name of the action that will be               displayed on the applicable  Acumatica ERP form. Destination Screen  (required): The screen or report that               should be opened when the action redirects a user to a different screen. Disabled : An option that indicates whether the action is               disabled by default. Hidden : An option that indicates whether the action is hidden               by default. In the  Disable  and  Hide                  boxes, you can also specify a condition, depending on which the action is disabled                 or hidden. For details, see  To Add a Condition. If this                 action is used in a workflow and its availability or visibility depends on the state                 of the applicable entity, you need to configure these properties in this state. For                 details, see  To Add a Workflow. Dialog Box : The dialog box that should be displayed when the               action is clicked. For details, see  To Add a Dialog Box. Processing Screen : A processing form of  Acumatica ERP on which the action will also be available for mass processing. Action Type : An option that indicates whether the action runs               a report, redirects a user to a particular form, or changes a state of an entity as a               part of a workflow. Toolbar Folder : The folder on the form toolbar that will               contain the action. Window Mode : If the action opens a new page, where the page               should be displayed. Depending on the type of the action you selected, do the following: For a redirect action, specify the navigation parameters and fields to be updated               when the action is selected. To be able to specify navigation parameters, you                 should first specify a value in the  Destination Screen                  box. For a workflow action, specify the fields to be updated when the action is               performed. Click  OK . The dialog box is closed, and the new action appears             in the table on the Actions page. To Customize an Existing Action If you need to customize an existing action (an action defined in a graph), such as         changing the action’s properties, first you need to add it to the Action Editor. To add an action to the Actions page, do the following: In the navigation pane of the  Customization Project Editor, click  Actions  under the screen node you want to customize. The           Actions page opens. On the page toolbar, click  Add New Record Add Existing . In the  Action Properties  dialog box, which opens, in the              Action Name  box, select the internal name of the action. The             current properties of the action are copied to the other elements of the                Action Properties  dialog box. If you want to modify the action properties before adding the action, specify the           following values: Display Name : The name of the action that will be displayed               on the applicable  Acumatica ERP form. Disabled : An option that indicates whether the action is               disabled by default. Hidden : An option that indicates whether the action is hidden               by default. In the  Disable  and  Hide                  boxes, you can also specify a condition, depending on which the action is disabled                 or hidden. For details, see  To Add a Condition. If this                 action is used in a workflow and its availability or visibility depends on the state                 of the applicable entity, you need to configure these properties in this state. For                 details, see  To Add a Workflow. Dialog Box : The dialog box that should be displayed when the               action is clicked. For details, see  To Add a Dialog Box. Processing Screen : A processing form of  Acumatica ERP on which the action will also be available for mass processing. Toolbar Folder : The folder on the form toolbar that will               contain the action. Depending on the type of the action you have selected, do the following: For a redirect action, specify the navigation parameters and fields to be updated               when the action is selected. To be able to specify navigation parameters, you                 should first specify a value in the  Destination Screen                  box. For a workflow action, specify the fields to be updated when the action is               performed. For a graph action you are customizing, specify the action parameters. Click  OK . The added action appears in the table of the Actions             page. Now you can change the properties of the action by selecting the action on the Actions page         and specifying its settings in the  Action Properties  dialog box. To Change the Location of an Action in a Menu When you add an action in the Action Editor, you specify a toolbar folder on a form where         the action should be displayed. By default, the action is added at the end of that folder.         You can change the location of the action in a folder by doing the following: In the navigation pane of the  Customization Project Editor, click  Actions  under the screen node you want to customize.             The Actions page opens. On the page toolbar, click  Reorder Actions . In the  Reorder Actions  dialog box, which opens, in the                Toolbar Folder  box, select the folder where the action is               located. The actions located in the selected folder are displayed in the dialog               box. Select the action you want to move. Change the location of the action by using the  Move Up  and                Move Down  actions on the table toolbar. Click  OK  to close the dialog box. On the page toolbar, click  Save . To View Changes Between the Predefined and Customized Action All predefined actions of the applicable screen are displayed on the Actions page by         default. If you have modified a predefined action in the Action Editor, you can view the         changes to the action by doing the following: In the navigation pane of the  Customization Project Editor, click  Actions  under the screen node you want to customize. The           Actions page opens. In the table, select an action. On the form toolbar, click  View Changes . The                Changes  dialog box is shown. The original set of properties of             the selected action is displayed in green. Changes are displayed in red. If you want to return the action properties to the original predefined state, click              Revert Changes . If you want to return all customized actions             to the predefined properties, on the page toolbar of the Actions page, click                Revert All Changes . To Remove an Action You can only remove actions that have the  New  status—, that is, actions added         by a user in the Action Editor. To remove an action from the Actions page, do the         following: In the navigation pane of the  Customization Project Editor, click  Actions  under the screen node you want to customize. The           Actions page opens. In the table, select an action. On the page toolbar, click  Delete Row . The action is removed             from the Action Editor. If the action was created by using the Action Editor, the action             is removed completely. If the action was defined in a graph and added as an existing             action in the Actions Editor, it is removed only from the list on the Actions page, and             all modifications of the action are removed. ]]></column>
		</row>
		<row PageID="cdd69d6b-59aa-4e9b-a7cd-7996159b27c0" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="f8cde0e7-1786-baed-4413-1d88c7a6011c" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can customize a workflow not only by using the built-in editors of the Customization Project Editor but also by extending a graph. You can also define a new workflow. Acumatica Framework provides the <tt>PX.Data.WorkflowAPI</tt> library to customize workflows.{br}

To create a workflow from code, you define workflow objects and specify their properties. Then you apply your changes to a workflow definition by using calling workflow methods.{br}{TOC}[anchor|#_c6cbdc95-f69d-4146-b942-f14d0241111c]
==Workflow Objects==
A workflow definition may include the following objects:[anchor|#_77af7d9f-297d-4246-8cfe-de0b61a560df]
*<tt>Forms</tt>: Corresponds to a dialog box.
*:A <tt>Forms</tt> object can include <tt>fields</tt>, fields whose values a user should specify in the dialog box.
*<tt>Conditions</tt>: Corresponds to a condition.
*<tt>Actions</tt>: Corresponds to an action. An <tt>Actions</tt> object can include the following object:
**<tt>FieldAssignments</tt>: A set of fields and their values which should be assigned when the action is performed.
**<tt>Assignments</tt>: A set of fields and their values to perform navigation to another form. This object can be used for redirecting actions only. For details, see [HelpRoot_Dev_Customization\CG_GL_items_ConfigureActions#_a09d6f18-f9b8-4519-9aab-1f165de1b975|Types of Actions].
**<tt>ParameterAssignments</tt>: A set of action parameters and their values which should be assigned before the action method is invoked. This object can be used for graph actions only because only those actions have a method to be invoked.
*<tt>Fields</tt>: Corresponds to a DAC field.
*<tt>Flows</tt>: Corresponds to a workflow.
*:A <tt>Flows</tt> object consists of <tt>States</tt> objects, each of which includes the following entities:
**<tt>Fields</tt>
** <tt>Actions</tt>
** <tt>Transitions</tt>
[anchor|#_5877b0ae-413e-4aa5-9544-137277ec7a26]
==Workflow Methods==
You can apply the following methods to each of the workflow objects:[anchor|#_3118c5d2-40d6-40f6-97fd-0721c093e94f]
*<tt>Add</tt>: The method adds an object to a workflow.
*<tt>Remove</tt>: The method removed an object from a workflow.
*<tt>Replace</tt>: The method replaces one object with another in a workflow.
*<tt>Update</tt>: The method updates the definition of an object in a workflow.

==Customization of a Workflow==
To customize a workflow from code, you need to do the following:[anchor|#_7c5a126c-ee7b-4401-adee-a97312daaaba]
#In a customization project, create an extension library to be able to develop code in Visual Studio. 
#:For details on creating an extension library, see [HelpRoot_Dev_Customization\cg_platform_tocreateextensionlib|To Create an Extension Library]. You can also develop customization code in the Code Editor. For details on the Code Editor, see [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_CodeEditor|Code Editor].
#In an extension library, create an extension of a graph where the workflow is defined.
#:For details on creating a graph extension in the Code Editor, see [HelpRoot_Dev_Customization\CG_GL_BL_Graph_ToOpen|To Start the Customization of a Graph]. For details on graph extensions, see [HelpRoot_Dev_Customization\CG_Platform_TO_Code_CS_GraphExtensions|Graph Extensions].
#In the graph extension, override the <tt>void Configure(PXScreenConfiguration config)</tt> method.
#In the overridden method, get the <tt>context</tt> value of the workflow by calling the <tt>config.GetScreenConfigurationContext</tt> method.
#:The method has two parameters: The first parameter refers to the graph type, and the second parameter refers to the primary DAC of the form.
#Declare the new entities you want to add to the workflow, such as dialog boxes, actions, and states.
#Apply the customization by calling the <tt>context.UpdateScreenConfigurationFor</tt> or <tt>context.ReplaceScreenCofigurationFor</tt> method. In the method&rsquo;s lambda expression, you apply workflow methods to workflow entities. For example, add the entities you declared in Instruction 5.
#Build the project and publish the customization project.

See detailed example in [HelpRoot_Dev_Customization\CG_GL_BL_Example_CustomWorkflowCode|Customize a Predefined Workflow from Code].]]></column>
			<column name="PlainText"><![CDATA[To Define a Workflow from Code You can customize a workflow not only by using the built-in editors of the  Customization Project Editor         but also by extending a graph. You can also define a new workflow.  Acumatica Framework         provides the  PX.Data.WorkflowAPI  library to customize workflows. To create a workflow from code, you define workflow objects and specify their properties. Then         you apply your changes to a workflow definition by using calling workflow methods. Workflow Objects A workflow definition may include the following objects: Forms : Corresponds to a dialog box. A  Forms              object can include  fields , fields whose values a user should specify             in the dialog box. Conditions : Corresponds to a condition. Actions : Corresponds to an action. An  Actions            object can include the following object: FieldAssignments :               A set of fields and their values which should be assigned when the action is               performed. Assignments : A set of fields and their values to perform               navigation to another form. This object can be used for redirecting actions only. For               details, see  Types of Actions. ParameterAssignments : A set of action parameters and their values               which should be assigned before the action method is invoked. This object can be used               for graph actions only because only those actions have a method to be               invoked. Fields : Corresponds to a DAC field. Flows : Corresponds to a workflow. A  Flows  object             consists of  States  objects, each of which includes the following             entities: Fields Actions Transitions Workflow Methods You can apply the following methods to each of the workflow objects: Add : The method adds an object to a workflow. Remove : The method removed an object from a workflow. Replace : The method replaces one object with another in a           workflow. Update : The method updates the definition of an object in a           workflow. Customization of a Workflow To customize a workflow from code, you need to do the following: In a customization project, create an extension library to be able to develop code in           Visual Studio.  For details on creating an extension library, see  To Create an Extension Library. You can also develop customization             code in the Code Editor. For details on the Code Editor, see  Code Editor. In an extension library, create an extension of a graph where the workflow is             defined. For details on creating a graph extension in the Code Editor, see  To Start the Customization of a Graph. For details on graph extensions, see  Graph Extensions. In the graph extension, override the  void Configure(PXScreenConfiguration             config)  method. In the overridden method, get the  context  value of the workflow by           calling the  config.GetScreenConfigurationContext  method. The method             has two parameters: The first parameter refers to the graph type, and the second             parameter refers to the primary DAC of the form. Declare the new entities you want to add to the workflow, such as dialog boxes, actions,           and states. Apply the customization by calling the              context.UpdateScreenConfigurationFor  or              context.ReplaceScreenCofigurationFor  method. In the method's lambda           expression, you apply workflow methods to workflow entities. For example, add the entities           you declared in Instruction 5. Build the project and publish the customization project. See detailed example in  Customize a Predefined Workflow from Code. ]]></column>
		</row>
		<row PageID="0e0cf1f6-7697-4ad2-8bb3-8d956930c76b" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="844ac698-2248-5d06-ba32-6c088facd3ca" RecordSourceID="22377">
			<column name="Content"><![CDATA[
Some forms of Acumatica ERP may use the functionality of automation steps, which are sets of conditions for a document or entity that, when reached, cause particular actions to be performed or restrictions on the values to be applied. . The automation step functionality and the workflow functionality cannot be used simultaneously for a single form. Thus, if you want to define workflows for a form, you need to deactivate any automation steps for this form first.{br}

If a form has automation steps defined for it, we do not recommend that you deactivate the steps and create a workflow for the form because the behavior of this form may be unpredictable. For forms with automation steps, we recommend only customization of fields in the Field Editor and actions in the Action Editor without creation of workflows.{br}{TOC}
==To Deactivate Automation Steps==
To deactivate automation steps that have been defined for a form, do the following:[anchor|#_0c31af4d-d473-4232-86f4-2223c53f9366]
#In Acumatica ERP, open the [HelpRoot_FormReference\SM_20_50_00|Automation Steps] ([~/?ScreenId=SM205000|SM205000]) form.
#In the '''Screen ID''' box, select the form for which you want to deactivate automation steps.
#On the form toolbar, click '''Deactivate Steps'''.
#:All automation steps for the selected form are deactivated. The '''Active''' check box for all steps is also cleared.
]]></column>
			<column name="PlainText"><![CDATA[To Deactivate Automation Steps Some forms of  Acumatica ERP may use the functionality of automation steps, which are sets of conditions for a         document or entity that, when reached, cause particular actions to be performed or         restrictions on the values to be applied. . The automation step functionality and the         workflow functionality cannot be used simultaneously for a single form. Thus, if you want to         define workflows for a form, you need to deactivate any automation steps for this form         first. If         a form has automation steps defined for it, we do not recommend that you deactivate the         steps and create a workflow for the form because the behavior of this form may be         unpredictable.  For forms with automation steps, we recommend only         customization of fields in the Field Editor and actions in the Action Editor without         creation of workflows. To Deactivate Automation Steps To deactivate automation steps that have been defined for a form, do the following: In  Acumatica ERP,      open the   ([~/?ScreenId=SM205000|SM205000]) Automation Steps (SM205000) form. In the  Screen ID  box, select the form for which you want to           deactivate automation steps. On the form toolbar, click  Deactivate Steps . All automation steps             for the selected form are deactivated. The  Active  check box for             all steps is also cleared. ]]></column>
		</row>
		<row PageID="5dbcd3a7-2d3c-4549-bda7-f6ddb2775845" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="f6611cdd-8c82-a663-5c68-2718559c3d19" RecordSourceID="22377">
			<column name="Content"><![CDATA[
A customization project might contain custom workflows based on predefined workflows. These workflows are referred to as ''inherited''. You can manually update the workflow, as described below, or it can be updated at runtime{br}

If a customization project contains a workflow, the system checks whether the current version of all predefined workflows (and inherited workflows) is up to date. The checking is performed every time a customization project is opened in the Customization Project Editor. If the version of the workflow is not up to date, the system prompts a customizer to upgrade the inherited workflows.{br}

If a workflow has not been updated in the customization project, on a form with which the workflow is associated, the workflow is updated at runtime. Thus, only the updated version of the workflow is visible to users.{br}{TOC}
==To Manually Upgrade a Worklfow==
You can upgrade workflows manually in the customization project by doing the following:[anchor|#_6eb3289d-ef18-4a4c-a58e-d6861a057e0e]
#In Customization Project Editor, open the Workflow Editor.
#On the page toolbar, click '''Upgrade Predefined Workflow'''. If any conflicts occur during the upgrade, the '''Upgrade Conflicts''' dialog box is shown. 
#If the dialog box is shown and you agree with the changes, click '''OK'''. The changes will be applied to the customization project.

==Related Articles==
*[HelpRoot_Dev_Customization\CG_GL_Items_WorkflowConcept|Creating Workflows]
*[HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_WorkflowEditor|Workflow Editor]]]></column>
			<column name="PlainText"><![CDATA[To Upgrade a Workflow A customization project might contain custom workflows based on predefined workflows. These     workflows are referred to as  inherited . You can manually update the workflow, as     described below, or it can be updated at runtime If a customization project contains a workflow, the system checks whether the current version     of all predefined workflows (and inherited workflows) is up to date. The checking is performed     every time a customization project is opened in the  Customization Project Editor. If     the version of the workflow is not up to date, the system prompts a customizer to upgrade the     inherited workflows. If a workflow has not been updated in the customization project, on a form with which the     workflow is associated, the workflow is updated at runtime. Thus, only the updated version of     the workflow is visible to users. To Manually Upgrade a Worklfow You can upgrade workflows manually in the customization project by doing the following: In  Customization Project Editor,      open the Workflow Editor. On the page toolbar, click  Upgrade Predefined Workflow . If any      conflicts occur during the upgrade, the  Upgrade Conflicts  dialog box is      shown.  If the dialog box is shown and you agree with the changes, click  OK .      The changes will be applied to the customization project. ]]></column>
		</row>
		<row PageID="46a9f940-e878-40c0-b717-c2ef313717d2" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="ec2bc079-6554-9c68-3f26-0d4f6cc18e00" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You use the Customized Data Classes page of the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor] to manage ''DAC'' items in a customization project.((({S:Warn}A ''DAC'' item contains data in the XML format used by the platform to create an appropriate extension for the original data access class.
))){br}

The Customized Data Classes page displays the list of ''DAC'' items for existing data access classes of Acumatica ERP added to the project.{br}

On the page, you can perform several operations with the customized data access classes, as described in the following topics:[anchor|#ul_oxf_mlt_fq]
*[HelpRoot_Dev_Customization\CG_GL_Items_DACs_AddingExisting|To Add a DAC Item for an Existing Data Access Class to a Project]
*[HelpRoot_Dev_Customization\CG_GL_Items_DACs_Deleting|To Delete a DAC Item from a Project]
*[HelpRoot_Dev_Customization\CG_GL_Items_DACs_Converting|To Convert a DAC Item to a Code Item]
*[HelpRoot_Dev_Customization\CG_GL_Items_DAC_LegacyDACs|To Upgrade Technology for Legacy DAC Customization]
((({S:Warn}You cannot create a custom data access class on this page. Instead, you have to use the [HelpRoot_Dev_Customization\CG_GL_Items_Code|Code] page of the editor. Custom classes are added to the project as ''Code'' items. See [HelpRoot_Dev_Customization\CG_GL_Items_Code_CustomDAC|To Create a Custom Data Access Class] for details.
))){br}

You can use Microsoft Visual Studio to work with a ''DAC'' item of a customization project that is currently published. During the project publication, the platform creates the <tt>PX&#95;Objects&#95;&lt;DACItemName&gt;&#95;extensions.cs</tt> file with the item content in the <tt>App&#95;RuntimeCode</tt> folder of the website. If you make changes to the code in Visual Studio, you have to update the item in the customization project. See [HelpRoot_Dev_Customization\CG_Platform_TO_Features_AutoDetectMF|Detecting the Project Items Modified in the File System] for details. ]]></column>
			<column name="PlainText"><![CDATA[Customized Data Classes You use the Customized Data Classes page of the   Customization Project                         Editor       to manage  DAC  items in a customization project. A  DAC  item contains data in         the XML format used by the platform to create an appropriate  extension for the original         data access class. The Customized Data Classes page displays the list of  DAC  items for existing data       access classes of  Acumatica ERP added to the project. On the page, you can perform several operations with the customized data access classes, as       described in the following topics: To Add a DAC Item for an Existing Data Access Class to a ProjectTo Delete a DAC Item from a ProjectTo Convert a DAC Item to a Code ItemTo Upgrade Technology for Legacy DAC CustomizationYou cannot create a custom data access class on this page. Instead, you have to use         the  Code page of the editor. Custom classes are added to the         project as  Code  items. See  To Create a Custom Data Access Class for         details. You can use Microsoft Visual Studio to work with a  DAC  item of a customization project that       is currently published. During the project publication, the platform creates the          PX_Objects_<DACItemName>_extensions.cs  file with the item content in       the  App_RuntimeCode  folder of the website. If you make changes to the       code in Visual Studio, you have to update the item in the customization project. See  Detecting the Project Items Modified in the File System for details.  ]]></column>
		</row>
		<row PageID="79930f45-ab3c-43af-b668-c534fb75ee9a" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="746c8c99-6635-7e65-1a74-4ea94898b0e7" RecordSourceID="22377">
			<column name="Content"><![CDATA[
Before modifying an existing data access class, you have to add a ''DAC'' item for the class to the customization project. This item is used to store the data of the class extension in XML format. After the item is created, you can modify the class members by using the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_DataClassEditor|Data Class Editor]. After the customization project is published, the <tt>.cs</tt> file for the item is created in the file system, and you can develop the C# code of the class extension in Microsoft Visual Studio. You can use the Data Class Editor as well as Visual Studio to add custom fields to existing data access classes.{br}

You can add a ''DAC'' item for an existing data access class to a customization project by using the [HelpRoot_Dev_Customization\CG_Platform_Tools_Inspector|Element Inspector], or you can create and add the item on the Customized Data Classes page of the Customization Project Editor.{br}

The following sections provide detailed information:[anchor|#ul_odd_xrt_fq]
*[[#_4bd6e805-664f-42eb-b280-05363719415c|To Add a DAC Item by Using the Element Inspector]
*[[#_10f4ca24-92c2-400e-9952-964a25302a41|To Add a DAC Item on the Customized Data Classes page]
[anchor|#_4bd6e805-664f-42eb-b280-05363719415c]
==To Add a ''DAC'' Item by Using the Element Inspector==[anchor|#ol_ohp_qt4_tw]
#Open the form in the browser.
#On the form title bar, click '''Customization &gt; Inspect Element''' to launch the Element Inspector.
#On the form, select a UI element for a field of the class to be customized to open the [HelpRoot_Dev_Customization\CG_Platform_Tools_Inspector_ElProperiesDlg|Element Properties Dialog Box] for the element.
#:The dialog box displays the name of the data access class that contains the selected element in the '''Data Class''' box, as shown in the screenshot below.
#In the dialog box, click '''Actions &gt; Customize Data Fields'''.[anchor|#image_xx4_qcz_5w][image:CustomizationPlatform/images/CG_GL_Items_DACs_Adding_CustMent.png|popup|Using the Element Properties dialog box to start customization of the class|240px]
#:If there is no currently selected customization project, the inspector opens the [HelpRoot_Dev_Customization\CG_Platform_Tools_Menu_SelectCustProjDlg|Select Customization Project Dialog Box] to force you to select an existing customization project or to create a new one.

 Acumatica Customization             Platform creates the ''DAC'' item for the class, adds the item to the currently selected customization project, and opens the class in the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_DataClassEditor|Data Class Editor].{br}

The platform assigns the new item the name of the data access class.[anchor|#_10f4ca24-92c2-400e-9952-964a25302a41]
==To Add a ''DAC'' Item on the Customized Data Classes page==[anchor|#ol_yxh_12p_tw]
#Open the customization project in the editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)
#Click '''Data Access''' in the navigation pane to open the Customized Data Classes page.
#On the page toolbar, click '''Add New Record''' (+).
#In the '''Select Existing Data Access Class''' dialog box, which opens, select the class in the '''Class Name''' box.
#:You can type the class name in the '''Class Name''' box or search for the class by a part of its name, as shown in the screenshot below. As soon as you add the class, the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_DataClassEditor|Data Class Editor] opens for it so that you can modify the fields of this class and add custom fields to it.[anchor|#fig_ffz_kxk_zv][anchor|#image_mrm_jcn_fq][image:CustomizationPlatform/images/CG_GL_Items_DACs_Adding_Editor.png|popup|Adding an existing data access class to the project|327px]
#On the page toolbar, click '''Save''' to save the item in the customization project.

As soon as you have modified the attributes of an existing field of the class or added a new field to the class and saved the changes in Data Class Editor, the class is added to the customization project and appears in the table of the Customized Data Classes page.{br}

To go back to the Customized Data Classes page of the Customization Project Editor, select '''Data Access''' on the navigation pane. You can see that the added item is saved to the list of project items.]]></column>
			<column name="PlainText"><![CDATA[To Add a DAC Item for an Existing Data Access Class to a Project Before modifying an existing data access class, you have to add a  DAC  item for the class       to the customization project. This item is used to store the data of the class extension in       XML format. After the item is created, you can modify the class members by using the  Data Class Editor. After the customization project is       published, the  .cs  file for the item is created in the file system, and     you can develop the C# code of the class extension in Microsoft Visual Studio. You can use the Data       Class Editor as well as Visual Studio to add custom fields to existing data access       classes. You can add a  DAC  item for an existing data access class to a customization project by       using the  Element Inspector, or you can create and add the item       on the Customized Data Classes page of the  Customization Project Editor. The following sections provide detailed information: To Add a DAC Item by Using the Element Inspector To Add a DAC Item by Using the Element InspectorTo Add a DAC Item on the Customized Data Classes page To Add a DAC Item on the Customized Data Classes pageTo Add a  DAC  Item by Using the Element Inspector Open the form in the browser. On the form title bar, click  Customization > Inspect Element  to launch the Element Inspector. On the form, select a UI element for a field of the class to be customized to open the              Element Properties Dialog Box for the element. The             dialog box displays the name of the data access class that contains the selected element             in the  Data Class  box, as shown in the screenshot below. In the dialog box, click  Actions > Customize Data Fields . Using the Element Properties dialog box to start customization of the               class If there is no currently selected customization project, the inspector opens the                Select Customization Project Dialog Box to force you to select an             existing customization project or to create a new one.  Acumatica Customization             Platform creates the  DAC  item for the class, adds the item to the currently selected         customization project, and opens the class in the  Data Class Editor. The platform assigns the new item the name of the data access class. To Add a  DAC  Item on the Customized Data Classes page Open the customization project in the editor. (See  To Open a Project for details.) Click  Data Access  in the navigation pane to open the Customized           Data Classes page. On the page toolbar, click  Add New Record  (+). In the  Select Existing Data Access Class  dialog box, which opens,           select the class in the  Class Name  box. You can type the class             name in the  Class Name  box or search for the class by a part of             its name, as shown in the screenshot below. As soon as you add the class, the  Data Class Editor opens for it so that you can             modify the fields of this class and add custom fields to it. Adding an existing data access class to the project On the page toolbar, click  Save  to save the item in the           customization project. As soon as you have modified the attributes of an existing field of the class or added a         new field to the class and saved the changes in Data Class Editor, the class is added to the         customization project and appears in the table of the Customized Data Classes page. To go back to the Customized Data Classes page of the  Customization Project Editor, select  Data Access  on the navigation pane. You can see that the         added item is saved to the list of project items. ]]></column>
		</row>
		<row PageID="f3606f06-f86f-425e-aae0-71c95fd45bc6" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="9ec3ff24-74fc-9f9a-2331-fb7d3b8ef1b5" RecordSourceID="22377">
			<column name="Content"><![CDATA[
To remove changes to an existing data access class from a project, perform the following actions:[anchor|#ol_qw5_2nt_tw]
#Open the customization project in the Customization Project Editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)
#Click '''Data Access''' in the navigation pane to open the Customized Data Classes page.
#In the page table, select the item to be deleted.
#On the page toolbar, click '''Delete Row'''.
#On the page toolbar, click '''Save''' to save the changes to the customization project.
{br}

If you added a bound custom field to an existing data access class, the platform includes the ''DAC'' and ''Table'' items for this class in the customization project.((({S:Warn}The ''Table'' item contains a description of custom columns added to a database table for bound custom fields created in the appropriate data access class.
))) After you publish the customization project at least once, the database schema is changed. Changes to the database schema aren&rsquo;t deleted when you delete the ''DAC'' and ''Table'' items and publish the project. You have to remove the changes manually.{br}

You can delete a ''DAC'' or ''Table'' item (or another item) from the customization project on the Edit Project Items page of the Customization Project Editor. (See [HelpRoot_Dev_Customization\CG_GL_Items_DeletingANY|To Delete Items from the Project on the Edit Project Items Page] for details.)]]></column>
			<column name="PlainText"><![CDATA[To Delete a DAC Item from a Project To remove changes to an existing data access class from a project, perform the following         actions: Open the customization project in the  Customization Project Editor. (See  To Open a Project for details.) Click  Data Access  in the navigation pane to open the Customized           Data Classes page. In the page table, select the item to be deleted. On the page toolbar, click  Delete Row . On the page toolbar, click  Save  to save the changes to the           customization project. If you added a bound custom field to an existing data access class, the platform includes the          DAC  and  Table  items for this class in the customization project. The            Table  item contains a description of custom columns added to a database table for         bound custom fields created in the appropriate data access class.  After you publish       the customization project at least once, the database schema is changed. Changes to the       database schema aren't deleted when you delete the  DAC  and  Table  items and       publish the project. You have to remove the changes manually. You can delete a  DAC  or  Table  item (or another item) from the customization       project on the Edit Project Items page of the  Customization Project Editor. (See  To Delete Items from the Project on the Edit Project Items Page for details.) ]]></column>
		</row>
		<row PageID="4e3f8e4b-7d2b-4720-a833-a8c0a3d02643" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="d6cc4126-296e-9652-bfd9-27f32f5d9a0a" RecordSourceID="22377">
			<column name="Content"><![CDATA[
If you have a customized data access class that is added to the project as a ''DAC'' item, then you can convert the class changes into the class extension code (a ''Code'' item) to complete the extension development in the Code Editor or in Microsoft Visual Studio. (See [HelpRoot_Dev_Customization\CG_Platform_Framework_CS_DACExt_DACFormat|Supported DAC Extension Formats] for details.){br}

To do this, perform the following actions:[anchor|#ol_qw5_2nt_tw]
#Open the customization project in the Customization Project Editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)
#Click '''Data Access''' in the navigation pane to open the Customized Data Classes page.
#In the page table, select the item to be converted, as the screenshot below shows.
#On the page toolbar, click '''Convert to Extension'''.
#:((({S:Hint}This action can be applied for only data access classes customized using the technology based on extensions. If you have legacy DAC customization, upgrade it before converting ''DAC'' items to class extensions. See [HelpRoot_Dev_Customization\CG_GL_Items_DAC_LegacyDACs|To Upgrade Technology for Legacy DAC Customization] for details.
)))[anchor|#image_v3z_3sf_mr][image:CustomizationPlatform/images/CG_GL_Items_DACs_Converting.png|popup|Converting the ''DAC'' item to the ''Code'' item|450px]
The platform converts the XML content of the selected item to C# code, deletes the ''DAC'' item in the customization project, adds the created code to the project as a ''Code'' item, and opens it in the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_CodeEditor|Code Editor], as shown in the following screenshot.[anchor|#fig_mlq_5sf_mr][anchor|#image_p2d_ntf_mr][image:CustomizationPlatform/images/CG_GL_Items_DACs_Converting01.png|popup|Viewing the result of the conversion|450px]{br}

This operation is irreversible. After you convert the XML data to C# code, you will not be able to work with the item in the Data Class Editor or convert it back to a ''DAC'' item. You will be able to edit the code in Code Editor and Visual Studio.((({S:Warn}The '''Convert to Extension''' action also affects all the inherited classes of the specified DAC if the classes are customized.
)))The system obtains the name of the ''Code'' item from the DAC name by appending the ''Extensions'' suffix to it. After the publication of the customization project, the actual customization code of the class is available in the <tt>&lt;DACName&gt;Extensions.cs</tt> file in the <tt>App&#95;RuntimeCode</tt> folder of the website. For example, if you apply the action to the <tt>CR.Contact</tt> class, as shown in the screenshots above, the operation converts the ''DAC'' item to the ''Code'' item, automatically giving it the name of <tt>ContactExtensions</tt>. The action removes the <tt>CR.Contact</tt> ''DAC'' item class from the project and adds the <tt>ContactExtensions</tt> ''Code'' item.]]></column>
			<column name="PlainText"><![CDATA[To Convert a DAC Item to a Code Item If you have a customized data access class that is added to the project as a  DAC  item,    then you can convert the class changes into the class extension code (a  Code  item) to     complete the extension development in the Code Editor or in Microsoft Visual Studio. (See  Supported DAC Extension Formats for details.) To do this, perform the following actions: Open the customization project in the  Customization Project Editor. (See  To Open a Project for details.) Click  Data Access  in the navigation pane to open the Customized Data           Classes page. In the page table, select the item to be converted, as the screenshot below shows. On the page toolbar, click  Convert to Extension . This action can be applied for only data access classes customized using the technology             based on extensions. If you have legacy DAC customization, upgrade it before converting                DAC  items to class extensions. See  To Upgrade Technology for Legacy DAC Customization for details. Converting the  DAC  item to the  Code  item The platform converts the XML content of the selected item to C# code, deletes the      DAC  item in the customization project, adds the created code to the project as a      Code  item, and opens it in the  Code Editor,    as shown in the following screenshot. Viewing the result of the conversion This operation is irreversible. After you convert the XML data to C# code, you will not be able       to work with the item in the Data Class Editor or convert it back to a  DAC  item. You       will be able to edit the code in Code Editor and Visual Studio. The            Convert to Extension  action also affects all the inherited classes         of the specified DAC if the classes are customized. The system obtains the name of the          Code  item from the DAC name by appending the  Extensions  suffix to it. After       the publication of the customization project, the actual customization code of the class is       available in the  <DACName>Extensions.cs  file in the          App_RuntimeCode  folder of the website. For example, if you apply the       action to the  CR.Contact  class, as shown in the screenshots above, the       operation converts the  DAC  item to the  Code  item, automatically giving it the       name of  ContactExtensions . The action removes the          CR.Contact DAC  item class from the project and adds the  ContactExtensions Code  item. ]]></column>
		</row>
		<row PageID="6a13a207-8c77-480a-a268-839c16abbd42" Language="en-US" PageRevisionID="1" Content="&#xA;Only ''Code'' items can be moved to an extension library. To convert a ''DAC'' item to an extension library, you should first convert the ''DAC'' item to a ''Code'' item. {br}&#xA;&#xA;Also, you might need to complete these instructions if you have a custom DAC or a DAC extension developed in one customization and a DAC extension of this custom DAC or a higher-level DAC extension in another customization. To eliminate dependency and to be able to use the DAC extension in your project, you need to convert the DAC extension to an extension library. &#xA;==To Convert a DAC Extension to an Extension Library==[anchor|#_8a397449-3eba-4b4a-8c08-5e1235ef9142]&#xA;#Convert the ''DAC'' item to a ''Code'' item, as described in [HelpRoot_Dev_Customization\CG_GL_Items_DACs_Converting|To Convert a DAC Item to a Code Item].&#xA;#Move the ''Code'' item to the extension library, as described in [HelpRoot_Dev_Customization\CG_GL_Items_Code_MovingToLib|To Move a Code Item to the Extension Library]&#xA;" PlainText="To      Convert a DAC Item to an Extension Library Only            Code          items can be moved to an extension library. To convert a  DAC  item to an extension         library, you should first convert the  DAC  item to a  Code  item.  Also, you might need to complete these instructions if you have a custom DAC or a DAC         extension developed in one customization and a DAC extension of this custom DAC or a         higher-level DAC extension in another customization. To eliminate dependency and to be able         to use the DAC extension in your project, you need to convert the DAC extension to an         extension library.  To Convert a DAC Extension to an Extension Library Convert the  DAC  item to a  Code            item ,            as described in  To Convert a DAC Item to a Code Item. Move the  Code  item to the extension           library ,            as described in  To Move a Code Item to the Extension Library" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="a2f628f5-7d4a-5b10-f669-0ad1521b3968" RecordSourceID="22377" />
		<row PageID="3575707f-3dc7-4285-a221-09b93aec9ecc" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="aba2cff9-4f37-03d3-7002-0608295f49e3" RecordSourceID="22377">
			<column name="Content"><![CDATA[
In Acumatica Customization             Platform 4.2 and earlier versions, the customization of data access classes was implemented through the direct Microsoft Intermediate Language (MSIL) injection of custom fields into <tt>PX.Objects.dll</tt>. This resulted in a complex process of publication in which the original library was replaced with the modified version. In Acumatica Customization             Platform 2020 R1, the customization uses the technology based on class extensions and the DAC extension is compiled into a separate library that is dynamically merged with the original DAC by the platform at run time.{br}

If you do not need to change the contents of a customization project, there is no reason to upgrade it. The system will successfully publish the project using the injection of custom fields into <tt>PX.Objects.dll</tt> in the newer version of the system as well. However if you have to continue the development of the project, we recommend that you upgrade the technology of DAC customization in the project.{br}

The following sections provide detailed information:[anchor|#ul_odd_xrt_fq]
*[[#_d7f97cb1-7775-4904-be66-fbf92157d3c9|To Upgrade a Legacy DAC Customization]
*[[#_7b106bd5-90c5-4341-abc1-4669e5da4564|To Upgrade a Library with a Legacy DAC Customization]
[anchor|#_d7f97cb1-7775-4904-be66-fbf92157d3c9]
==To Upgrade a Legacy DAC Customization==
To upgrade the legacy DAC customization to the technology based on class extensions, perform the following actions:[anchor|#ol_qw5_2nt_tw]
#Open the customization project in the Customization Project Editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)
#Click '''Data Access''' in the navigation pane to open the Customized Data Classes page.
#On the page toolbar, click '''Upgrade All''', as shown in the following screenshot.[anchor|#image_grn_vsl_mr][image:CustomizationPlatform/images/UpgradingLegacyCustomization01.png|popup|Upgrading legacy customization|450px]
{br}

 This action launches the upgrade wizard, which processes all the project items of the ''DAC'' and ''Code'' types to discover and update the following cases of DAC customization based on the MSIL injection technology:[anchor|#ul_c2y_jgb_nr]
*A field of a data access class does not contain the <tt>StorageName</tt> attribute, which specifies the storage type of the field. For more information about the storage types, see [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_DataClassEditor_NewFieldDlg|Create New Field Dialog Box].
*:((({S:Warn}In the Acumatica Customization             Platform, you must select the way a custom field will be stored in the database when you add the field to a data access class.
)))
*The code contains a direct reference to a custom field of a row.
*The code contains a direct reference to an abstract class of a DAC field.
See [HelpRoot_Dev_Customization\CG_GL_Items_DACs_LegacyDACs_Wizard|Using the Upgrade Wizard ] for details.{br}

After the process is complete, the wizard opens the message box with the list of the items that have been upgraded (see the screenshot below).[anchor|#fig_vmq_kqm_mr][anchor|#image_szy_crm_mr][image:CustomizationPlatform/images/UpgradingLegacyCustomization02.png|popup|Viewing the list of upgraded items|180px]{br}

If there is no legacy customization in the project, the wizard opens a message box with the relevant information (see the screenshot below).[anchor|#fig_ktc_cfb_nr][anchor|#image_abq_kfb_nr][image:CustomizationPlatform/images/UpgradingLegacyCustomization03.png|popup|Viewing the message box that indicates no legacy customization in the project|180px][anchor|#_7b106bd5-90c5-4341-abc1-4669e5da4564]
==To Upgrade a Library with a Legacy DAC Customization==
If you have legacy customization of data access classes as a library (<tt>.dll</tt>) and have to modify the customization project, you can add the source code of the library as ''Code'' items to the customization project and then upgrade it as follows:[anchor|#ul_u4x_rls_mr]
#In the Microsoft Visual Studio project of the library, for each source code file that contains a data access class customization, do the following:
##In Visual Studio (or any text editor), open the file, select '''All''', and copy the source code to the clipboard.
##Create a new ''Code'' item in the customization project.
##Delete the code template from the created item.
##Paste the clipboard content into the item and save the ''Code'' item to the customization project.
#Upgrade the customization project.
#Test the upgraded customization project to ensure that the project is valid and applies to the system after publication.
#If you need to move the source code back to the library, use the clipboard and the copy-paste approach as well.
]]></column>
			<column name="PlainText"><![CDATA[To Upgrade Technology for Legacy DAC Customization In  Acumatica Customization             Platform 4.2 and earlier versions, the customization of data access classes was implemented through       the direct Microsoft Intermediate Language (MSIL) injection of custom fields into          PX.Objects.dll . This resulted in a complex process of publication in       which the original library was replaced with the modified version. In  Acumatica Customization             Platform 2020 R1, the customization uses the technology based on class extensions and the DAC extension is       compiled into a separate library that is dynamically merged with the original DAC by the       platform at run time. If you do not need to change the contents of a customization project, there is no reason to       upgrade it. The system will successfully publish the project using the injection of custom       fields into  PX.Objects.dll  in the newer version of the system as well.       However if you have to continue the development of the project, we recommend that you upgrade       the technology of DAC customization in the project. The following sections provide detailed information: To Upgrade a Legacy DAC Customization To Upgrade a Legacy DAC CustomizationTo Upgrade a Library with a Legacy DAC Customization To Upgrade a Library with a Legacy DAC CustomizationTo Upgrade a Legacy DAC Customization To upgrade the legacy DAC customization to the technology based on class extensions,         perform the following actions: Open the customization project in the  Customization Project Editor. (See  To Open a Project for details.) Click  Data Access  in the navigation pane to open the Customized             Data Classes page. On the page toolbar, click  Upgrade All , as shown in the             following screenshot. Upgrading legacy customization  This action launches the upgrade wizard, which processes all the project items of the            DAC  and  Code  types to discover and update the following cases of DAC         customization based on the MSIL injection technology: A field of a data access class does not contain the  StorageName              attribute, which specifies the storage type of the field. For more information about the             storage types, see  Create New Field Dialog Box. In the  Acumatica Customization             Platform, you must select the way a custom field will be stored in the database when you add               the field to a data access class. The code contains a direct reference to a custom field of a row. The code contains a direct reference to an abstract class of a DAC field. See  Using the Upgrade Wizard  for details. After the process is complete, the wizard opens the message box with the list of the items         that have been upgraded (see the screenshot below). Viewing the list of upgraded items If there is no legacy customization in the project, the wizard opens a message box with the         relevant information (see the screenshot below). Viewing the message box that indicates no legacy customization in the             project To Upgrade a Library with a Legacy DAC Customization If you have legacy customization of data access classes as a library           ( .dll ) and have to modify the customization project, you can add the         source code of the library as  Code  items to the customization project and then         upgrade it as follows: In the Microsoft Visual Studio project of the library, for each source code file that             contains a data access class customization, do the following: In Visual Studio (or any text editor), open the file, select  All , and copy                 the source code to the clipboard. Create a new  Code  item in the customization project. Delete the code template from the created item. Paste the clipboard content into the item and save the  Code  item to the                 customization project. Upgrade the customization project. Test the upgraded customization project to ensure that the project is valid and             applies to the system after publication. If you need to move the source code back to the library, use the clipboard and the             copy-paste approach as well. ]]></column>
		</row>
		<row PageID="1c57e4c9-06a0-4148-bf9e-24b3f0294b3b" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="dde244c8-a8f9-833a-a590-086b9e8221d5" RecordSourceID="22377">
			<column name="Content"><![CDATA[
While upgrading the ''DAC'' items, the wizard does the following:[anchor|#ul_xkp_hxm_mr]
*Adds the <tt>StorageName</tt> attribute and sets its value to {{"ExistingColumn"}} for an existing field.
*Adds the <tt>StorageName</tt> attribute and sets its value to {{"AddColumn"}} for a custom field.
*Finds and replaces all references to custom fields in the attributes of other customized fields, such as a <tt>PXSelector</tt>, <tt>PXParent</tt> or <tt>PXFormula</tt>. For example, the wizard inserts the {{typeof(DACNameExt.usrFieldName)}} reference in the <tt>PXSelector</tt> declaration instead of the {{typeof(DACName.usrFileName)}} reference.
{br}

While upgrading items of the ''Code'' type, the wizard processes each item to find references to the custom fields and replaces the references by using the following approach:[anchor|#ul_pss_zcn_mr]
*The wizard updates the references to the abstract class of the DAC field from {{DACName.usrFieldName}} to {{DACNameExt.usrFieldName}}, where the {{DACNameExt}} is the name of the new extension class.
*The wizard replaces the references to the field {{Row.UsrFieldName}} with a reference to the field through the DAC extension: {{Row.GetExtension<DACNameExt>().UsrFieldName}}.
{br}

For example, the following code contains the references to the {{APRegister.usrVoucherNbr}} class and {{doc.UsrVoucherNbr}} field, which is a field customized based on the MSIL injection technology.{br}

<source lang="csharp">
 sender.RaiseExceptionHandling&lt;APRegister.usrVoucherNbr&gt;(doc,
         doc.UsrVoucherNbr,
         new PXSetPropertyException("..."));
</source>{br}

After technological upgrade for the customization of DAC classes in the project, the references will look as the following code shows. Now the code refers to the {{usrVoucherNbr}} class of the {{APRegisterExt}} extension class that will be generated during publication of the project.{br}

<source lang="csharp">
 sender.RaiseExceptionHandling&lt;APRegisterExt.usrVoucherNbr&gt;(doc,
         doc.GetExtension&lt;APRegisterExt&gt;().UsrVoucherNbr,
         new PXSetPropertyException("..."));
</source>((({S:Hint}There might be a situation when a legacy customization includes two data access classes with custom fields that have the same names, such as {{DACName1.usrTheSameFieldName}} and {{DACName2.usrTheSameFieldName}}. When you upgrade the customization, the wizard replaces the {{Row.usrTheSameFieldName}} references to each field by using the following pattern: {{Row.GetExtension<DACName1Ext or DACName2Ext>().usrTheSameFieldName}}. The expression &ldquo;{{GetExtension<DACName1Ext or DACName2Ext>}}&ldquo; is invalid and causes a compilation error. You are supposed to review these references and insert the correct reference to the needed class, {{DACName1Ext}} or {{DACName2Ext}}.
)))]]></column>
			<column name="PlainText"><![CDATA[Using the Upgrade Wizard  While upgrading the  DAC  items, the wizard does the following: Adds the  StorageName  attribute and sets its value to                          "ExistingColumn"  for an existing field. Adds the  StorageName  attribute and sets its value to                          "AddColumn"  for a custom field. Finds and replaces all references to custom fields in the attributes of other                     customized fields, such as a  PXSelector ,                          PXParent  or  PXFormula . For example,                     the wizard inserts the  typeof(DACNameExt.usrFieldName)                      reference in the  PXSelector  declaration instead of the                          typeof(DACName.usrFileName)  reference. While upgrading items of the  Code  type, the wizard processes each item to find             references to the custom fields and replaces the references by using the following                 approach: The wizard updates the references to the abstract class of the DAC field from                          DACName.usrFieldName  to                          DACNameExt.usrFieldName , where the                          DACNameExt  is the name of the new extension class. The wizard replaces the references to the field                          Row.UsrFieldName  with a reference to the field through the                     DAC extension:                      Row.GetExtension<DACNameExt>().UsrFieldName . For example, the following code contains the references to the                  APRegister.usrVoucherNbr  class and                  doc.UsrVoucherNbr  field, which is a field customized based on the             MSIL injection technology. 
 sender.RaiseExceptionHandling<APRegister.usrVoucherNbr>(doc,
         doc.UsrVoucherNbr,
         new PXSetPropertyException("..."));
 After technological upgrade for the customization of DAC classes in the project, the             references will look as the following code shows. Now the code refers to the                  usrVoucherNbr  class of the  APRegisterExt  extension             class that will be generated during publication of the project. 
 sender.RaiseExceptionHandling<APRegisterExt.usrVoucherNbr>(doc,
         doc.GetExtension<APRegisterExt>().UsrVoucherNbr,
         new PXSetPropertyException("..."));
 There might be a situation when a legacy customization includes two                 data access classes with custom fields that have the same names, such as                      DACName1.usrTheSameFieldName  and                      DACName2.usrTheSameFieldName . When you upgrade the                 customization, the wizard replaces the  Row.usrTheSameFieldName                  references to each field by using the following pattern:                      Row.GetExtension<DACName1Ext or                     DACName2Ext>().usrTheSameFieldName . The expression                     " GetExtension<DACName1Ext or DACName2Ext> " is invalid and                 causes a compilation error. You are supposed to review these references and insert                 the correct reference to the needed class,  DACName1Ext  or                      DACName2Ext . ]]></column>
		</row>
		<row PageID="faf4b93e-1a41-4811-a792-a4c4b40c5689" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="eaa8a324-37e6-a680-3518-8eab29846e44" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You use the Code page of the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor] to manage ''Code'' items in the customization project. On the page, you can perform the following operations with items:[anchor|#ul_ogw_5j5_fq]
*Add a new ''Code'' item of any of the following subtypes to the project:
**''New Graph'': A new business logic controller that is derived from the <tt>PXGraph&lt;&gt;</tt> class
**''New DAC'': A data access class that is derived from the <tt>IBqlTable</tt> class
**''Graph Extension'': A graph extension that is derived from the <tt>PXGraphExtension&lt;&gt;</tt> class
**''DAC Extension'': A DAC extension that is derived from the <tt>PXCacheExtension&lt;&gt;</tt> class
**''Code File'': Custom C# code
**''Customization Plug-in'': A class that is derived from the <tt>CustomizationPlugin</tt> class
*Delete a ''Code'' item from the project
{br}

You can open the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_CodeEditor|Code Editor] for a ''Code'' item by clicking the object name of the item in the page table.((({S:Warn}You can develop the customization code in the Code Editor. However we recommend that you develop the code in Microsoft Visual Studio (as described in [HelpRoot_Dev_Customization\CG_Platform_Studio|Integrating the Project Editor with Microsoft Visual Studio]) and use the editor for either minor code correction or the insertion of ready portions of code.
)))To move the code from a ''Code'' item to the extension library that is bound to the customization project, use the '''Move to Extension Lib''' action on the Code Editor toolbar.{br}

For detailed information on working with ''Code'' items, see the following topics:[anchor|#ul_xtf_5wp_gq]
*[HelpRoot_Dev_Customization\CG_GL_Items_Code_NewGraph|To Create a Custom Business Logic Controller]
*[HelpRoot_Dev_Customization\CG_GL_Items_Code_CustomDAC|To Create a Custom Data Access Class]
*[HelpRoot_Dev_Customization\CG_GL_Items_Code_AddingGraphExt|To Customize an Existing Business Logic Controller]
*[HelpRoot_Dev_Customization\CG_GL_Items_Code_AddingDACExt|To Customize an Existing Data Access Class]
*[HelpRoot_Dev_Customization\CG_GL_Items_Code_AddingCustom|To Add Custom Code to a Project]
*[HelpRoot_Dev_Customization\CG_GL_Items_Code_AddingPlugIn|To Add a Customization Plug-In to a Project]
*[HelpRoot_Dev_Customization\CG_GL_Items_Code_Deleting|To Delete a Code Item From a Project]
*[HelpRoot_Dev_Customization\CG_GL_Items_Code_MovingToLib|To Move a Code Item to the Extension Library]
{br}

You can use Visual Studio to work with a ''Code'' item of a customization project that is currently published. During the publication of the project, the platform creates the ''&lt;CodeItemName&gt;.cs'' file with the item content in the ''App&#95;RuntimeCode'' folder of the website. If you make changes to the code in Visual Studio, you have to update the item in the customization project. See [HelpRoot_Dev_Customization\CG_Platform_TO_Features_AutoDetectMF|Detecting the Project Items Modified in the File System] for details. ]]></column>
			<column name="PlainText"><![CDATA[Code You use the Code page of the   Customization Project                         Editor to manage  Code        items in the customization project. On the page, you can perform the following operations with         items: Add a new  Code  item of any of the following subtypes to the project: New Graph : A new business logic controller that is derived from                             the  PXGraph<>  class New DAC : A data access class that is derived from the                                  IBqlTable  class Graph Extension : A graph extension that is derived from the                                  PXGraphExtension<>  class DAC Extension : A DAC extension that is derived from the                                  PXCacheExtension<>  class Code File : Custom C# code Customization Plug-in : A class that is derived from the                                  CustomizationPlugin  class Delete a  Code  item from the project You can open the  Code Editor for a  Code  item             by clicking the object name of the item in the page table. You can develop the                 customization code in the Code Editor. However we recommend that you develop the                 code in Microsoft Visual Studio (as described in  Integrating the Project Editor with Microsoft Visual Studio) and use the editor for either minor code                 correction or the insertion of ready portions of code. To move the code from a                  Code  item to the extension library that is bound to the customization             project, use the  Move to Extension Lib  action on the Code Editor             toolbar. For detailed information on working with  Code  items, see the following topics: To Create a Custom Business Logic ControllerTo Create a Custom Data Access ClassTo Customize an Existing Business Logic ControllerTo Customize an Existing Data Access ClassTo Add Custom Code to a ProjectTo Add a Customization Plug-In to a ProjectTo Delete a Code Item From a ProjectTo Move a Code Item to the Extension LibraryYou can use Visual Studio to work with a  Code  item of a customization project that             is currently published. During the publication of the project, the platform creates the                  <CodeItemName>.cs  file with the item content in the  App_RuntimeCode              folder of the website. If you make changes to the code in Visual Studio, you have to             update the item in the customization project. See  Detecting the Project Items Modified in the File System for details.  ]]></column>
		</row>
		<row PageID="f466950b-6a96-46e1-a4dd-960eed374dd9" Language="en-US" PageRevisionID="1" PlainText="To Create a Custom Business Logic Controller You can add a custom business logic controller to a customization project on the Code page of the  Customization Project Editor. To do this, perform the following actions: Open the customization project in the editor. (See  To Open a Project for details.) Select  Code  in the navigation pane to open the Code page. Click  Add New Record  (+) on the page toolbar. In the  Create Code File  dialog box, which opens, select  New Graph  in the  File Template  box, as the screenshot below shows. In the  Class Name  box, specify the class name of the business logic controller to be created. Click  OK . Adding a Code item for a custom graph to the project  The platform creates the code template of the class derived from the  PXGraph&lt;&gt;  class, saves the code as a  Code  item of the project in the database, and opens the item in the  Code Editor. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="bb9a2959-74ac-e907-d290-8484b570911e" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can add a custom business logic controller to a customization project on the Code page of the Customization Project Editor.{br}

To do this, perform the following actions:[anchor|#_e8d73e20-31c9-46cc-80e0-e2f67bdcb6b9]
#Open the customization project in the editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)
#Select '''Code''' in the navigation pane to open the Code page.
#Click '''Add New Record''' (+) on the page toolbar.
#In the '''Create Code File''' dialog box, which opens, select ''New Graph'' in the '''File Template''' box, as the screenshot below shows.
#In the '''Class Name''' box, specify the class name of the business logic controller to be created.
#Click '''OK'''.[anchor|#_543e1064-dfd2-4338-9741-cdbf135545e9][image:Shared/Images/CG_GL_Items_Code_NewGraph.png|popup|Adding a Code item for a custom graph to the project|197px]
 The platform creates the code template of the class derived from the <tt>PXGraph&lt;&gt;</tt> class, saves the code as a ''Code'' item of the project in the database, and opens the item in the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_CodeEditor|Code Editor].]]></column>
		</row>
		<row PageID="e9fcaaaf-ae3c-4e8e-8109-48edfae405ab" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="c5ca32f3-5208-150c-e067-c5b1975626a6" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can add a new data access class (DAC) to a customization project by generating the code from the definition of a database table.{br}

To create a custom data access class for a custom database table and add the created item to a customization project, you have to generate the class template on the Code page of the Customization Project Editor.{br}

To do this, perform the following actions:[anchor|#_d4eac200-0fe6-4600-b9e1-bc9abbd9f3d3]
#Create the needed custom table in the database by using a database management tool.
#Generate the DAC code for the customization project as follows:
##Open the customization project in the Project Editor.
##In the navigation pane, click '''Code''' to open the Code page.
##On the page toolbar, click '''Add New Record''' (+).
##In the '''Create Code File''' dialog box, which opens, select ''New DAC'' in the '''File Template''' box.
##In the '''Class Name''' box, specify the class name that corresponds to the name of the table created in the database.
##:((({S:Warn}If you have just created the table, restart Internet Information Services (IIS) or recycle the application pool to make sure that Acumatica ERP is aware of the new table, because it caches the database schema once, when the domain starts.
)))
##Select the '''Generate Members from Database''' check box.
##Click '''OK'''.
##:The platform does the following:[anchor|#_d6a97d97-8a1f-48e9-8634-475d7d8f5206]
##*Generates the data access class with members that correspond to the table columns. The class is added to the namespace of the customization project.
##*Adds the class to the customization project as a ''Code'' item.
##*Saves the customization project.
##*Opens the created item in the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_CodeEditor|Code Editor].
#:You can use the Code Editor to modify the generated code. After you publish the customization project, you can work with the custom data access class in MS Visual Studio.
#In the Code Editor, define the key fields in the DAC. To include a data field in the key, in the type attribute of the field, you have to add the <tt>IsKey</tt> parameter, as the example below shows. <source lang="csharp">[PXDBString(15, IsKey=true)]</source>
#Add the table definition to the customization project by doing the following:
##In the navigation pane of the Project Editor, click '''Database Scripts'''.
##On the Database Scripts page, which opens, click '''Add''' > '''Custom Table Schema'''.
##In the '''Add Custom Table Schema''' dialog box, which opens, select the custom table in the '''Table''' box, and click '''OK'''.
##:The platform does the following:[anchor|#_04f1aad3-8467-4505-81cb-0ebbde4713c1]
##*Adds the XML definition of the table to the customization project as an ''Sql'' item
##*Saves the customization project
##:Every time you publish the customization project, the system checks whether a table with this SQL definition exists in the database. If the table doesn&rsquo;t exist, the system creates the table. If the table exists, the system adjusts the table schema if there is any difference between the existing table schema and the table schema from the customization project (no data is truncated).
]]></column>
			<column name="PlainText"><![CDATA[To Create a Custom Data Access Class You can add a new data access class (DAC) to a customization project by generating the code from the definition of a database table. To create a custom data access class for a custom database table and add the created item to a customization project, you have to generate the class template on the Code page of the  Customization Project Editor. To do this, perform the following actions: Create the needed custom table in the database by using a database management tool. Generate the DAC code for the customization project as follows: Open the customization project in the Project Editor. In the navigation pane, click  Code  to open                                 the Code page. On the page toolbar, click  Add New Record                                  (+). In the  Create Code File  dialog box, which                                 opens, select  New DAC  in the  File                                     Template  box. In the  Class Name  box, specify the class name                                 that corresponds to the name of the table created in the                                     database. If you have just created the table, restart                                     Internet Information Services (IIS) or recycle the application                                     pool to make sure that  Acumatica ERP is aware of the new table, because it caches the database                                     schema once, when the domain starts. Select the  Generate Members from Database                                  check box. Click  OK . The platform does the                                         following: Generates the data access class with members that                                             correspond to the table columns. The class is added to                                             the namespace of the customization project. Adds the class to the customization project as a                                                  Code  item. Saves the customization project. Opens the created item in the  Code Editor. You can use the Code Editor to modify the generated code. After you                             publish the customization project, you can work with the custom data                             access class in MS Visual Studio. In the Code Editor, define the key fields in the DAC. To include a data field in the key, in the type attribute of the field, you have to add the  IsKey  parameter, as the example below shows.  [PXDBString(15, IsKey=true)] Add the table definition to the customization project by doing the following: In the navigation pane of the Project Editor, click  Database Scripts . On the Database Scripts page, which opens, click  Add Custom Table Schema . In the  Add Custom Table Schema  dialog box, which opens, select the custom                                 table in the  Table  box, and click                                      OK . The platform does the following: Adds the XML definition of the table to the                                             customization project as an  Sql  item Saves the customization project Every time you publish the customization project,                                     the system checks whether a table with this SQL definition                                     exists in the database. If the table doesn't exist, the system                                     creates the table. If the table exists, the system adjusts the                                     table schema if there is any difference between the existing                                     table schema and the table schema from the customization project                                     (no data is truncated). ]]></column>
		</row>
		<row PageID="5d703f1f-0fea-4176-861f-32d29f00237b" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="d0e31400-ba58-c1da-65ba-f2c7433c0e8e" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can create the class extension for an existing business logic controller (BLC) and add the ''Code'' item with the created code to a customization project in several ways, as described in the following sections:[anchor|#_895fc706-225e-4cdf-9a84-87f2264cb3cf]
*[[#_1e148949-7350-4179-af22-2385841454f3|To Add a Code Item by Using the Element Inspector]
*[[#_f8b94f77-47c0-4a5b-b9e4-60469f12f0fd|To Add a Code Item by Using the Layout Editor]
*[[#_b63d698d-635a-4acc-8201-836fb11d2062|To Add a Code Item on the Code page]
{br}

If you need to extend the code of a BLC that has no webpage associated (such as <tt>ARReleaseProcess</tt>), follow the instructions described in [[#_b63d698d-635a-4acc-8201-836fb11d2062|To Add a Code Item on the Code page].{br}

As soon as you add the <tt>Code</tt> item for customization of the business logic to the project, the system generates an extension class for it and opens the code in the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_CodeEditor|Code Editor]. You can work with the extension classes in the Code Editor. After you publish the customization project, you can develop the code in MS Visual Studio.[anchor|#_1e148949-7350-4179-af22-2385841454f3]
==To Add a ''Code'' Item by Using the Element Inspector==
Typically, you want to modify the business logic that is executed for a certain form of Acumatica ERP.{br}

To add a ''Code'' item for customization of the business logic for an existing form to a customization project by using the [HelpRoot_Dev_Customization\CG_Platform_Tools_Inspector|Element Inspector], perform the following actions:[anchor|#_3667a08f-d170-4850-9e84-6592691eeca1]
#Open the form in the browser.
#On the form title bar, click '''Customization &gt; Inspect Element''' to launch the Element Inspector.
#On the form, select any UI element to open the [HelpRoot_Dev_Customization\CG_Platform_Tools_Inspector_ElProperiesDlg|Element Properties Dialog Box] for the element.
#:The '''Business Logic''' box of the dialog box displays the name of the business logic controller that provides business logic for the form, as shown in the screenshot below.
#In the dialog box, click '''Actions &gt; Customize Business Logic'''.[anchor|#_2c26383e-5d0f-4757-9427-2bc88ed5599e][image:Shared/Images/CG_GL_Items_Code_Adding_GraphExt_CM.png|popup|Using the Element Properties dialog box to customize the business logic for the form|240px]
#If there is no currently selected customization project and the inspector opens the [HelpRoot_Dev_Customization\CG_Platform_Tools_Menu_SelectCustProjDlg|Select Customization Project Dialog Box], select an existing customization project or to create a new one.
{br}

The platform creates the template of the class that is derived from the <tt>PXGraphExtension&lt;&gt;</tt> class, saves the code as a ''Code'' item of the project in the database, and opens the item in the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_CodeEditor|Code Editor], as shown in the following screenshot.[anchor|#_ba834c6a-a7cc-4c46-84d8-5c37c9555706][anchor|#_311402e6-dc27-4f37-8cb1-adcdf049e80c][image:Shared/Images/CG_GL_Items_Code_AddingGraphExt_CM.png|popup|Viewing the created code template in the Code Editor|450px][anchor|#_f8b94f77-47c0-4a5b-b9e4-60469f12f0fd]
==To Add a ''Code'' Item by Using the Layout Editor==
Often, you start a customization of an Acumatica ERP form in the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_LayoutEditor|Screen Editor] and you later want to modify the business logic for this form. To customize the business logic of the form, you can add a ''Code'' item to a customization project from the Layout Editor.{br}

To do this, perform the following action:[anchor|#_2de40590-0356-42df-9f6f-6a024ef45a72]
#On the toolbar of the Layout Editor, click '''Actions &gt; Customize Business Logic''', as the following screenshot shows.[anchor|#_f5a4a995-05c2-4a2d-bd5b-28d878587c19][image:Shared/Images/CG_GL_Items_Code_AddingGraphExt_LE.png|popup|Starting the customization of the business logic from the Layout Editor|422px]
{br}

The platform creates the template of the class that is derived from the <tt>PXGraphExtension&lt;&gt;</tt> class, saves the code as a ''Code'' item of the project in the database, and opens the item in the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_CodeEditor|Code Editor].[anchor|#_b63d698d-635a-4acc-8201-836fb11d2062]
==To Add a ''Code'' Item on the Code page==
If you know the name of the business logic controller to be customized, you can create a ''Code'' item with the graph extension template on the Code page of the Customization Project Editor by using the '''Create Code File''' dialog box.{br}

To do this, perform the following actions:[anchor|#_2142311f-7fee-43e9-9bbb-847497f97ff1]
#Open the customization project in the editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)
#Click '''Code''' in the navigation pane to open the Code page.
#Click '''Add New Record''' (+) on the page toolbar.
#In the '''Create Code File''' dialog box, which opens, select ''Graph Extension'' in the '''File Template''' box, as the screenshot below shows.
#In the '''Base Graph''' box, select the class name of the business logic controller to be customized.
#Click '''OK'''.[anchor|#_a554a44c-f7e1-42f1-bc3d-91d26d6ea268][image:Shared/Images/CG_GL_Items_Code_AddingGraphExt_CE.png|popup|Adding a Code item with the graph extension to the project|353px]
{br}

The platform creates the template of the class that is derived from the <tt>PXGraphExtension&lt;&gt;</tt> class, saves the code as a ''Code'' item of the project in the database, and opens the item in the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_CodeEditor|Code Editor].]]></column>
			<column name="PlainText"><![CDATA[To Customize an Existing Business Logic Controller You can create the class extension for an existing business logic controller (BLC) and add the  Code  item with the created code to a customization project in several ways, as described in the following sections: To Add a Code Item by Using the Element Inspector To Add a Code Item by Using the Element InspectorTo Add a Code Item by Using the Layout Editor To Add a Code Item by Using the Layout EditorTo Add a Code Item on the Code page To Add a Code Item on the Code pageIf you need to extend the code of a BLC that has no webpage associated (such as                      ARReleaseProcess ), follow the instructions described in  To Add a Code Item on the Code page To Add a Code Item on the Code page. As soon as you add the  Code  item for customization of the business logic to the project, the system generates an extension class for it and opens the code in the  Code Editor. You can work with the extension classes in the Code Editor. After you publish the customization project, you can develop the code in MS Visual Studio. To Add a  Code  Item by Using the Element Inspector Typically, you want to modify the business logic that is executed for a certain form of  Acumatica ERP. To add a  Code  item for customization of the business logic for an existing form to a customization project by using the  Element Inspector, perform the following actions: Open the form in the browser. On the form title bar, click  Customization > Inspect Element  to launch the Element Inspector. On the form, select any UI element to open the  Element Properties Dialog Box for the element. The  Business Logic  box of the dialog box displays the name of the business logic controller that provides business logic for the form, as shown in the screenshot below. In the dialog box, click  Actions > Customize Business Logic . Using the Element Properties dialog box to customize the business logic for the form If there is no currently selected customization project and the inspector opens the  Select Customization Project Dialog Box, select an existing customization project or to create a new                             one. The platform creates the template of the class that is derived from the  PXGraphExtension<>  class, saves the code as a  Code  item of the project in the database, and opens the item in the  Code Editor, as shown in the following screenshot. Viewing the created code template in the Code Editor To Add a  Code  Item by Using the Layout Editor Often, you start a customization of an  Acumatica ERP form in the  Screen Editor and you later want to modify the business logic for this form. To customize the business logic of the form, you can add a  Code  item to a customization project from the Layout Editor. To do this, perform the following action: On the toolbar of the Layout Editor, click  Actions > Customize Business Logic , as the following screenshot shows. Starting the customization of the business logic from the Layout Editor The platform creates the template of the class that is derived from the  PXGraphExtension<>  class, saves the code as a  Code  item of the project in the database, and opens the item in the  Code Editor. To Add a  Code  Item on the Code page If you know the name of the business logic controller to be customized, you can create a  Code  item with the graph extension template on the Code page of the  Customization Project Editor by using the  Create Code File  dialog box. To do this, perform the following actions: Open the customization project in the editor. (See  To Open a Project for details.) Click  Code  in the navigation pane to open the Code page. Click  Add New Record  (+) on the page toolbar. In the  Create Code File  dialog box, which opens, select  Graph Extension  in the  File Template  box, as the screenshot below shows. In the  Base Graph  box, select the class name of the business logic controller to be customized. Click  OK . Adding a Code item with the graph extension to the project The platform creates the template of the class that is derived from the  PXGraphExtension<>  class, saves the code as a  Code  item of the project in the database, and opens the item in the  Code Editor. ]]></column>
		</row>
		<row PageID="d8c06d06-e88b-48d7-ad1a-2f3f1d2ddd66" Language="en-US" PageRevisionID="1" PlainText="To Customize an Existing Data Access Class If you know the name of the data access class to be customized, you can create a  Code  item with the DAC extension template on the Code page of the  Customization Project Editor by using the  Create Code File  dialog box. To do this, perform the following actions: Open the customization project in the editor. (See  To Open a Project for details.) Click  Code  in the navigation pane to open the Code page. Click  Add New Record  (+) on the page toolbar. In the  Create Code File  dialog box, which opens, select  DAC Extension  in the  File Template  box, as the screenshot below shows. In the  Base DAC  box, select the name of the data access class to be customized. Click  OK . Adding a Code item with the DAC extension to the project The platform creates the template of the class that is derived from the  PXCacheExtension&lt;&gt;  class, saves the code as a  Code  item of the project in the database, and opens the item in the  Code Editor. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="ecc57e5b-5a7c-d643-8749-468f35bcc214" RecordSourceID="22377">
			<column name="Content"><![CDATA[
If you know the name of the data access class to be customized, you can create a ''Code'' item with the DAC extension template on the Code page of the Customization Project Editor by using the '''Create Code File''' dialog box.{br}

To do this, perform the following actions:[anchor|#_a0ebeb31-3d07-4597-a33d-52835b0e450e]
#Open the customization project in the editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)
#Click '''Code''' in the navigation pane to open the Code page.
#Click '''Add New Record''' (+) on the page toolbar.
#In the '''Create Code File''' dialog box, which opens, select ''DAC Extension'' in the '''File Template''' box, as the screenshot below shows.
#In the '''Base DAC''' box, select the name of the data access class to be customized.
#Click '''OK'''.[anchor|#_a3e21be8-3297-46cb-b035-80143fbdd537][image:Shared/Images/CG_GL_Items_Code_AddingDACExt.png|popup|Adding a Code item with the DAC extension to the project|405px]
{br}

The platform creates the template of the class that is derived from the <tt>PXCacheExtension&lt;&gt;</tt> class, saves the code as a ''Code'' item of the project in the database, and opens the item in the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_CodeEditor|Code Editor].]]></column>
		</row>
		<row PageID="16f9c15a-325b-47f5-bacf-4a06ce72251e" Language="en-US" PageRevisionID="1" PlainText="To Add Custom Code to a Project You can add a  .cs  file with some custom code to a customization project. To do this,       perform the following actions: Open the customization project in the editor. (See  To Open a Project for details.) Click  Code  in the navigation pane to open the Code page. Click  Add New Record  (+) on the page toolbar. In the  Create Code File  dialog box, which opens, select  Code             File  in the  File Template  box, as the screenshot below           shows. In the  Class Name  box, specify the name of the new class to be           added to the project. Click  OK . Adding a Code item for a custom graph to the project The platform creates the code template of the new class, saves the code as a  Code  item       of the project in the database, and opens the item in the  Code Editor, as the following screenshot shows. Viewing the custom code file added to the project " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="b6fce451-e2d5-90d2-cf22-856fac38bc68" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can add a ''.cs'' file with some custom code to a customization project. To do this, perform the following actions:[anchor|#ol_qlr_y4b_l5]
#Open the customization project in the editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)
#Click '''Code''' in the navigation pane to open the Code page.
#Click '''Add New Record''' (+) on the page toolbar.
#In the '''Create Code File''' dialog box, which opens, select ''Code File'' in the '''File Template''' box, as the screenshot below shows.
#In the '''Class Name''' box, specify the name of the new class to be added to the project.
#Click '''OK'''.[anchor|#image_mrm_jcn_fq][image:CustomizationPlatform/images/CG_GL_Items_Code_AddingCustom.png|popup|Adding a Code item for a custom graph to the project|197px]
{br}

The platform creates the code template of the new class, saves the code as a ''Code'' item of the project in the database, and opens the item in the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_CodeEditor|Code Editor], as the following screenshot shows.[anchor|#fig_hsq_txk_zv][anchor|#image_w4z_4sp_gq][image:CustomizationPlatform/images/CustomCodeFile.png|popup|Viewing the custom code file added to the project|450px]]]></column>
		</row>
		<row PageID="c69443fe-4d32-47a9-85aa-b2882aa259ef" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="301167a3-fadb-5bc0-ad78-46fd960d2652" RecordSourceID="22377">
			<column name="Content"><![CDATA[
As a part of a complex customization, you might need to make changes to the website beyond the customization project. For example, you might need to change the website configuration. In such situations, you can add a customization plug-in to the project with the code to be executed at the end of the publication process.{br}

To add a customization plug-in, perform the following actions:[anchor|#ol_qlr_y4b_l5]
#Open the customization project in the editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)
#Click '''Code''' in the navigation pane to open the Code page.
#Click '''Add New Record''' (+) on the page toolbar.
#In the '''Create Code File''' dialog box, which opens, select ''Customization Plug-in'' in the '''File Template''' box, as the screenshot below shows.
#In the '''Class Name''' box, enter the name of the plug-in to be added to the project.
#Click '''OK'''.[anchor|#image_mrm_jcn_fq][image:CustomizationPlatform/images/CG_GL_Items_Code_AddingPlugIn.png|popup|Adding a customization plug-in to the project|197px]
{br}

The system generates the plug-in code by template, as shown below.<source lang="csharp">using System;
using PX.Data;
using Customization;

namespace YogiFon
{
  //The customization plug-in is used to execute custom actions after the customization project has been published	
  public class MyPlugin: CustomizationPlugin
  {
    //This method is executed right after website files are updated, but before the website is restarted
    //The method is invoked on each cluster node in a cluster environment
    //The method is invoked only if runtime compilation is enabled
    //Do not access custom code published to bin folder; it may not be loaded yet
    public override void OnPublished()
    {
      this.WriteLog("OnPublished Event");
    }
    
    //This method is executed after the customization has been published and the website is restarted.	
    public override void UpdateDatabase()
    {
      this.WriteLog("UpdateDatabase Event");
    }
  }
}
</source>{br}

When a customization project that contains a customization plug-in has been published, the corresponding <tt>.cs</tt> file is created in the <tt>App&#95;RuntimeCode</tt> folder of the website.((({S:Warn}The Acumatica Customization             Platform uses the <tt>App&#95;RuntimeCode</tt> folder to keep the CS code of the ''DAC'' and ''Code'' items of all the published customization projects. By default, at run time, the platform compiles the code of this folder in a separate library and dynamically links the library to the Acumatica ERP application. (See [HelpRoot_Dev_Customization\CG_Platform_TO_Code_RunTime|Run-Time Compilation] for details.) If you set the <tt>UseRuntimeCompilation</tt> key in the <tt>&lt;appSettings&gt;</tt> section of the <tt>web.config</tt> file (located in the website folder) to ''False'', the platform uses the <tt>App&#95;Code/Caches</tt> folder instead the <tt>App&#95;RuntimeCode</tt> one for the customization code. In this case, the <tt>OnPublished</tt> method of a customization plug-in cannot be executed. Execution of the <tt>UpdateDatabase</tt> method does not depend on the <tt>UseRuntimeCompilation</tt> key value.
)))]]></column>
			<column name="PlainText"><![CDATA[To Add a Customization Plug-In to a Project As a part of a complex customization, you might need to make changes to the website             beyond the customization project. For example, you might need to change the website             configuration. In such situations, you can add a customization plug-in to the project             with the code to be executed at the end of the publication process. To add a customization plug-in, perform the following actions: Open the customization project in the editor. (See  To Open a Project for details.) Click  Code  in the navigation pane to open the Code                     page. Click  Add New Record  (+) on the page toolbar. In the  Create Code File  dialog box, which opens, select                          Customization Plug-in  in the  File Template                      box, as the screenshot below shows. In the  Class Name  box, enter the name of the plug-in to                     be added to the project. Click  OK . Adding a customization plug-in to the project The system generates the plug-in code by template, as shown             below. using System;
using PX.Data;
using Customization;

namespace YogiFon
{
  //The customization plug-in is used to execute custom actions after the customization project has been published	
  public class MyPlugin: CustomizationPlugin
  {
    //This method is executed right after website files are updated, but before the website is restarted
    //The method is invoked on each cluster node in a cluster environment
    //The method is invoked only if runtime compilation is enabled
    //Do not access custom code published to bin folder; it may not be loaded yet
    public override void OnPublished()
    {
      this.WriteLog("OnPublished Event");
    }
    
    //This method is executed after the customization has been published and the website is restarted.	
    public override void UpdateDatabase()
    {
      this.WriteLog("UpdateDatabase Event");
    }
  }
}
 When a customization project that contains a customization plug-in has been published,             the corresponding  .cs  file is created in the                  App_RuntimeCode  folder of the website. The  Acumatica Customization             Platform uses the  App_RuntimeCode  folder to keep the CS code of the                  DAC  and  Code  items of all the published customization projects. By             default, at run time, the platform compiles the code of this folder in a separate             library and dynamically links the library to the  Acumatica ERP application. (See  Run-Time Compilation for details.) If             you set the  UseRuntimeCompilation  key in the                  <appSettings>  section of the  web.config              file (located in the website folder) to  False , the platform uses the                  App_Code/Caches  folder instead the                  App_RuntimeCode  one for the customization code. In this case,             the  OnPublished  method of a customization plug-in cannot be executed.             Execution of the  UpdateDatabase  method does not depend on the                  UseRuntimeCompilation  key value. ]]></column>
		</row>
		<row PageID="229d1267-36b3-47d6-9a0e-bb80d7b8dd39" Language="en-US" PageRevisionID="1" Content="&#xA;To remove a ''Code'' item from a project, perform the following actions:[anchor|#ol_qw5_2nt_tw]&#xA;#Open the customization project in the Customization Project Editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)&#xA;#Click '''Code''' in the navigation pane to open the Code page.&#xA;#In the page table, click the item to be deleted.&#xA;#On the page toolbar, click '''Delete Row''' (X).&#xA;#On the page toolbar, click '''Save''' to save the changes to the customization project.&#xA;{br}&#xA;&#xA;You can delete a ''Code'' item from the customization project on the Edit Project Items page of the Customization Project Editor. (See [HelpRoot_Dev_Customization\CG_GL_Items_DeletingANY|To Delete Items from the Project on the Edit Project Items Page] for details.){br}&#xA;&#xA;If you are working in Microsoft Visual Studio, to update the files in the file system, publish the customization project. The &lt;tt&gt;.cs&lt;/tt&gt; file of the deleted ''Code'' item will be removed from the file system." PlainText="To Delete a Code Item From a Project To remove a  Code  item from a project, perform the following actions: Open the customization project in the  Customization Project Editor. (See  To Open a Project for details.) Click  Code  in the navigation pane to open the Code page. In the page table, click the item to be deleted. On the page toolbar, click  Delete Row  (X). On the page toolbar, click  Save  to save the changes to the           customization project. You can delete a  Code  item from the customization project on the Edit Project Items       page of the  Customization Project Editor. (See  To Delete Items from the Project on the Edit Project Items Page for details.) If you are working in Microsoft Visual Studio, to update the files in the file system, publish the       customization project. The  .cs  file of the deleted  Code  item will       be removed from the file system. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="84760cbd-c57e-4c5d-689d-fb47717e322c" RecordSourceID="22377" />
		<row PageID="1d898e7c-7547-41d1-b276-da60f964576b" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="fa585490-68b0-3789-c305-cf9c5d9d720c" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can develop customization code either as ''Code'' items in a customization project or as source code included in an extension library project in Microsoft Visual Studio. Some part of a customization may exist in the ''Code'' items of a customization project, while another part can be in an extension library that is included in the customization project as DLL file. (See [HelpRoot_Dev_Customization\CG_Platform_TO_Code_CS_ExtLibrary|Extension Library] for details.){br}

To move the code from a ''Code'' item to an extension library, perform the following actions:[anchor|#ol_qw5_2nt_tw]
#Open the customization project in the Customization Project Editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)
#Click '''Code''' in the navigation pane to open the Code page.
#In the page table, click the name of the item to be moved to open the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_CodeEditor|Code Editor] for the item.
#On the editor toolbar, click '''Move to Extension Lib'''.
#:((({S:Warn}Before you launch the operation, be sure that the customization project is bound to an existing extension library. (See [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor] for details.)
)))
{br}

For more information about the operation, see [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_CodeEditor_MoveToExtLib|Move to Extension Lib Action]. Also, see [HelpRoot_Dev_Customization\CG_Platform_TO_Code_ExtLib_vsCode|Extension Library (DLL) Versus Code in a Customization Project] for our recommendations about where you should keep your customization code.]]></column>
			<column name="PlainText"><![CDATA[To Move a Code Item to the Extension Library You can develop customization code either as  Code  items in a customization project or as     source code included in an extension library project in Microsoft Visual Studio. Some part of a       customization may exist in the  Code  items of a customization project, while another       part can be in an extension library that is included in the customization project as DLL file.       (See  Extension Library for details.) To move the code from a  Code  item to an extension library, perform the following     actions: Open the customization project in the  Customization Project Editor. (See  To Open a Project for details.) Click  Code  in the navigation pane to open the Code page. In the page table, click the name of the item to be moved to open the  Code Editor for the item. On the editor toolbar, click  Move to Extension Lib . Before you             launch the operation, be sure that the customization project is bound to an existing             extension library. (See   Customization Project                         Editor for             details.) For more information about the operation, see  Move to Extension Lib Action. Also, see  Extension Library (DLL) Versus Code in a Customization Project for our recommendations about where you       should keep your customization code. ]]></column>
		</row>
		<row PageID="d474f5d8-47a0-42b3-af00-8e0940e32b7f" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="535e614b-dd3f-06ae-164c-911fd32376b0" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can add to a customization project any custom file located in the website folder of your instance of Acumatica ERP. When you add a file to a project, the Acumatica Customization             Platform stores a copy of the file in the database as a ''File'' item. A ''File'' item contains the path to the custom file and the GUID of the file content in the file storage of the database. The path is relative to the website folder. The platform then includes a copy of the file from the database in the deployment package.[anchor|#_c73b1945-69f4-42fd-91d9-34846b4fe4ba]((({S:Hint}You must include in a customization package any custom files that you need to use with your instance of Acumatica ERP and publish this package on this instance. If you instead copy the files to the website folder of your instance of Acumatica ERP manually, the files will be removed while the instance is being updated.
))){br}

You use the Custom Files page of the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor] to manage ''File'' items in the customization project. The page displays the list of ''File'' items included in the project.{br}

When you publish or export the project, the platform compares each file in the project (in the database) with the original file in the file system and detects the files that have been modified in the file system. If a modified file is found, there is a conflict, and the platform gives you the option to update the files in the project or discard the changes (and use the files from the database). See [HelpRoot_Dev_Customization\CG_Platform_TO_Features_AutoDetectMF|Detecting the Project Items Modified in the File System] for details.{br}

On the Custom Files page, you can perform the operations with items described in the following topics:[anchor|#ul_imt_f4q_gq]
*[HelpRoot_Dev_Customization\CG_GL_Items_Files_Adding|To Add a Custom File to a Project]
*[HelpRoot_Dev_Customization\CG_GL_Items_Files_Updating|To Update a File Item in a Project]
*[HelpRoot_Dev_Customization\CG_GL_Items_Files_Deleting|To Delete a Custom File From a Project]
]]></column>
			<column name="PlainText"><![CDATA[Custom Files You can add to a customization project any custom file located in the website folder of your       instance of  Acumatica ERP. When you add a file to a project, the  Acumatica Customization             Platform stores a copy of the file in the database as a  File  item. A  File  item       contains the path to the custom file and the GUID of the file content in the file storage of       the database. The path is relative to the website folder. The platform then includes a copy of       the file from the database in the deployment package. You must include in a customization             package any custom files that you need to use with your instance of  Acumatica ERP             and publish this package on this instance. If you instead copy the files to the website             folder of your instance of  Acumatica ERP             manually, the files will be removed while the instance is being updated. You use the Custom Files page of the   Customization Project                         Editor to manage          File  items in the customization project. The page displays the list of  File        items included in the project. When you publish or export the project, the platform compares each file in the project (in the       database) with the original file in the file system and detects the files that have been       modified in the file system. If a modified file is found, there is a conflict, and the       platform gives you the option to update the files in the project or discard the changes (and       use the files from the database). See  Detecting the Project Items Modified in the File System       for details. On the Custom Files page, you can perform the operations with items described in the       following topics: To Add a Custom File to a ProjectTo Update a File Item in a ProjectTo Delete a Custom File From a Project]]></column>
		</row>
		<row PageID="01a694bb-8e42-436c-89ad-2c42c040089a" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="b426a6b6-f770-2e75-6410-04f544553a97" RecordSourceID="22377">
			<column name="Content"><![CDATA[
To add a custom file to a customization project, do the following:[anchor|#ol_qw5_2nt_tw]
#In the file system, place the file in an appropriate folder within the website folder.
#:For example, if you need to add an extension library file, place it in the <tt>Bin</tt> folder of the website.
#Open the customization project in the Customization Project Editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)
#Click '''Files''' in the navigation pane to open the Custom Files page.
#On the page toolbar, click '''Add New record''' (+).
#In the '''Add Files''' dialog box, which opens, find the file in the table and select the check box in the '''Selected''' column for it, as shown in the following screenshot.
#:((({S:Warn}You can select multiple custom files to add them to the project at the same time.
)))[anchor|#image_ltl_rbq_gq][image:CustomizationPlatform/images/CG_GL_Items_Files_Adding_01.png|popup|Adding a custom file to the project|450px]
#:((({S:Warn}For any files other than the ones placed in the <tt>Bin</tt> folder, you can click '''Refresh''' on the toolbar of the '''Add Files''' dialog box to make the system update the list of files in the table. If you have changed files in the <tt>Bin</tt> folder of the website, you should refresh the page in the browser by pressing F5 on the keyboard.
)))
#In the dialog box, click '''Save''' to save each selected file to the customization project as a ''File'' item.
{br}

If you modify the file added to a customization project in the file system, you have to update the appropriate ''File'' item in the project.]]></column>
			<column name="PlainText"><![CDATA[To Add a Custom File to a Project To add a custom file to a customization project, do the following: In the file system, place the file in an appropriate folder within the website             folder. For example, if you need to add an extension library file, place it in the                Bin  folder of the website. Open the customization project in the  Customization Project Editor. (See  To Open a Project for details.) Click  Files  in the navigation pane to open the Custom Files           page. On the page toolbar, click  Add New record  (+). In the  Add Files  dialog box, which opens, find the file in the           table and select the check box in the  Selected  column for it, as           shown in the following screenshot. You can select multiple custom files to add them             to the project at the same time. Adding a custom file to the project For any files other than the ones placed in the  Bin              folder, you can click  Refresh  on the toolbar of the                Add Files  dialog box to make the system update the list of             files in the table. If you have changed files in the  Bin  folder of             the website, you should refresh the page in the browser by pressing F5 on the             keyboard. In the dialog box, click  Save  to save each selected file to the           customization project as a  File  item. If you modify the file added to a customization project in the file system, you have to update       the appropriate  File  item in the project. ]]></column>
		</row>
		<row PageID="c55aa41b-44ab-4364-8b11-5725c159bb36" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="13cbd2e4-5b32-38dc-767e-32b4b335b7cf" RecordSourceID="22377">
			<column name="Content"><![CDATA[
If you have modified a file of a customization project in the file system and need to use the modified version of the file in the project, you have to update the copy of the file in the database. To do this, perform the following actions:[anchor|#ol_qw5_2nt_tw]
#Open the customization project in the Customization Project Editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)
#Click '''Files''' in the navigation pane to open the Custom Files page.
#On the page toolbar, click '''Detect Modified Files''', as shown in the screenshot below.
#In the '''Modified Files Detected''' dialog box, which opens, ensure that the '''Conflict''' check box is selected for the file.[anchor|#image_akn_b4q_gq][image:CustomizationPlatform/images/CG_GL_Project_Updating.png|popup|Updating files in the project|445px]
#If multiple files in the project were changed, and you do not want to update some files at the moment, clear the selection of these files in the '''Selected''' column.
#On the toolbar of the dialog box, click '''Update Customization Project''' to update the selected files.
{br}

If you click '''Discard All Changes''', the Acumatica Customization             Platform resolves the conflict by overriding the file in the file system using the file copy in the database.{br}

If you make changes to custom files added to a customization project in the file system, the platform does not publish or export the project while a file in the file system differs its copy in the database. You have to resolve all such conflicts before publication or export of the project. See [HelpRoot_Dev_Customization\CG_Platform_TO_Features_AutoDetectMF|Detecting the Project Items Modified in the File System] for details.]]></column>
			<column name="PlainText"><![CDATA[To Update a File Item in a Project If you have modified a file of a customization project in the file system and need to use the       modified version of the file in the project, you have to update the copy of the file in the       database. To do this, perform the following actions: Open the customization project in the  Customization Project Editor. (See  To Open a Project for details.) Click  Files  in the navigation pane to open the Custom Files           page. On the page toolbar, click  Detect Modified Files , as shown in the           screenshot below. In the  Modified Files Detected  dialog box, which opens, ensure that           the  Conflict  check box is selected for the file. Updating files in the project If multiple files in the project were changed, and you do not want to update some files           at the moment, clear the selection of these files in the  Selected            column. On the toolbar of the dialog box, click  Update Customization             Project  to update the selected files. If you click  Discard All Changes , the  Acumatica Customization             Platform resolves the conflict by overriding the file in the file system using the file copy in the       database. If you make changes to custom files added to a customization project in the file system, the    platform does not publish or export the project while a file in the file system differs its copy    in the database. You have to resolve all such conflicts before publication or export of the    project. See  Detecting the Project Items Modified in the File System for details. ]]></column>
		</row>
		<row PageID="3b85d738-5d52-47e3-a0bb-75a695dc76a1" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="436df1d8-b318-daf6-c435-9ab05e0650c1" RecordSourceID="22377">
			<column name="Content"><![CDATA[
In the website folder in the file system, the platform tracks changes that you make to the following files:[anchor|#ul_zq2_gcq_gq]
*Files with the customization code added to the customization project as <tt>DAC</tt> items
*Files with the customization code added to the project as <tt>Code</tt> items
*Custom files added to the project

If you make changes to these files in the file system, you have to update them in the project before you publish the project or export the deployment package of the project.{br}

When you run the project publication process or export the project, the Acumatica Customization             Platform compares each file in the project (in the database) with the original file and detects the files modified in the file system. If a modified file is found, there is a conflict, and the platform opens the '''Modified Files Detected''' dialog box to give you the option to update the files in the project or discard the changes and use the files from the database.((({S:Warn}If you have used the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_EditFileEditor|File Editor] of the Customization Project Editor to modify a ''File'' item in a customization project and saved the changes in the database, the changes are not saved in the original file in the file system. Then if you click '''Detect Modified Files''' on the toolbar of the Files page, the platform does not detect a conflict because the file in the database is newer. The platform automatically updates the original file during the publication of the customization project.
))){br}

The '''Modified Files Detected''' dialog box lists all custom and customized files in the website folder. The '''Conflict''' check box means that the file version in the file system differs from the file version in the customization project. This could happen, for example, if you have modified the customization code in a file by using MS Visual Studio and the change is not yet reflected in the customization project. You have to resolve all conflicts in the project before you publish the project or export the deployment package of the project.{br}

In the dialog box, you can invoke the following actions for conflicting files:[anchor|#ul_ik1_hkq_gq]
*'''Update Customization Project''': Updates the customization project with the file version from the file system.
*'''Discard All Changes''': Keeps the file version that exists in the customization project and discard the changes in the file system.
These actions are performed on the selected files—that is, all conflicting files for which you have selected the check box in the '''Selected''' column.{br}

You can invoke one action for one individual file and another action for another file. For example, you can first select the files that you want to update in the customization project and click '''Update Customization Project'''. Then you can click '''Discard All Changes''' to cancel the changes made to all other conflicting files.{br}

Make sure you have updated all appropriate files before removing all remaining conflicts. If you discard changes, after you publish the customization project, the platform updates all selected conflicting files from the database, therefore the files will return to the original state in the file system.{br}

No conflicts will appear in the '''Modified Files Detected''' dialog box until a file included in the customization project is modified in the file system again.]]></column>
			<column name="PlainText"><![CDATA[Detecting the Project Items Modified in the File System In the website folder in the file system, the platform tracks changes that you make to the       following files: Files with the customization code added to the customization project as            DAC  items Files with the customization code added to the project as  Code          items Custom files added to the project If you make changes to these files in the file system, you have to update them in the project       before you publish the project or export the deployment package of the project. When you run the project publication process or export the project, the  Acumatica Customization             Platform compares each file in the project (in the database) with the original file and detects the       files modified in the file system. If a modified file is found, there is a conflict, and the       platform opens the  Modified Files Detected  dialog box to give you the       option to update the files in the project or discard the changes and use the files from the         database. If you have used the  File Editor of the  Customization Project Editor to modify a  File  item in a customization project and saved the changes in the         database, the changes are not saved in the original file in the file system. Then if you         click  Detect Modified Files  on the toolbar of the Files page, the         platform does not detect a conflict because the file in the database is newer. The platform         automatically updates the original file during the publication of the customization         project. The  Modified Files Detected  dialog box lists all custom and customized       files in the website folder. The  Conflict  check box means that the file       version in the file system differs from the file version in the customization project. This       could happen, for example, if you have modified the customization code in a file by using MS       Visual Studio and the change is not yet reflected in the customization project. You have to       resolve all conflicts in the project before you publish the project or export the deployment       package of the project. In the dialog box, you can invoke the following actions for conflicting files: Update Customization Project : Updates the customization project           with the file version from the file system. Discard All Changes : Keeps the file version that exists in the           customization project and discard the changes in the file system. These actions are performed on the selected files—that is, all conflicting files       for which you have selected the check box in the  Selected  column. You can invoke one action for one individual file and another action for another file. For       example, you can first select the files that you want to update in the customization project       and click  Update Customization Project . Then you can click          Discard All Changes  to cancel the changes made to all other       conflicting files. Make sure you have updated all appropriate files before removing all remaining conflicts. If       you discard changes, after you publish the customization project, the platform updates all       selected conflicting files from the database, therefore the files will return to the original       state in the file system. No conflicts will appear in the  Modified Files Detected  dialog box       until a file included in the customization project is modified in the file system again. ]]></column>
		</row>
		<row PageID="071e72bc-4ba7-4393-9830-381436ad3ab1" Language="en-US" PageRevisionID="1" Content="&#xA;To delete a custom file from a customization project, perform the following actions:[anchor|#ol_qw5_2nt_tw]&#xA;#Open the customization project in the Customization Project Editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)&#xA;#Click '''Files''' in the navigation pane to open the Custom Files page.&#xA;#In the page table, click the item to be deleted.&#xA;#On the page toolbar, click '''Delete Row''' (X).&#xA;#On the page toolbar, click '''Save''' to save the changes to the customization project.&#xA;The ''File'' item is deleted from the project. The file remains in the file system and you can add it back to the project, if needed.((({S:Hint}If you either publish the customization project after the ''File'' item is deleted or unpublish all customizations of the website, the platform deletes the original file in the file system.&#xA;)))" PlainText="To Delete a Custom File From a Project To delete a custom file from a customization project, perform the following actions: Open the customization project in the  Customization Project Editor. (See  To Open a Project for details.) Click  Files  in the navigation pane to open the Custom Files           page. In the page table, click the item to be deleted. On the page toolbar, click  Delete Row  (X). On the page toolbar, click  Save  to save the changes to the           customization project. The  File  item is deleted from the project. The file remains in the file system and       you can add it back to the project, if needed. If you either publish the         customization project after the  File  item is deleted or unpublish all customizations         of the website, the platform deletes the original file in the file system. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="9181015a-69b9-875a-58d6-996e0a72a3c3" RecordSourceID="22377" />
		<row PageID="38b047fd-a5b8-4a0f-90b2-2ca76535ff1d" Language="en-US" PageRevisionID="1" Content="&#xA;You use the Generic Inquiries page of the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor] to manage ''GenericInquiryScreen'' items in the customization project.((({S:Warn}A ''GenericInquiryScreen'' item contains the data set of a custom or customized generic inquiry form.&#xA;))){br}&#xA;&#xA;The Generic Inquiries page displays the list of the generic inquiries added to the customization project.{br}&#xA;&#xA;On the page, you can perform the operations described in the following topics:[anchor|#ul_mmd_kgc_ww]&#xA;*[HelpRoot_Dev_Customization\CG_GL_Items_GI_Ading|To Add a Generic Inquiry to a Project]&#xA;*[HelpRoot_Dev_Customization\CG_GL_Iems_GI_Deleting|To Delete a Generic Inquiry from a Project]&#xA;*[HelpRoot_Dev_Customization\CG_GL_Items_GI_Updating|To Update Generic Inquiry Items in a Project]&#xA;*[HelpRoot_Dev_Customization\CG_GL_Items_GI_Redirecting|To Navigate to the Generic Inquiry Form ]&#xA;" PlainText="Generic Inquiries You use the Generic Inquiries page of the   Customization Project                         Editor to       manage  GenericInquiryScreen  items in the customization project. A            GenericInquiryScreen  item contains the data set of a custom or customized generic         inquiry form. The Generic Inquiries page displays the list of the generic inquiries added to the       customization project. On the page, you can perform the operations described in the following topics: To Add a Generic Inquiry to a ProjectTo Delete a Generic Inquiry from a ProjectTo Update Generic Inquiry Items in a ProjectTo Navigate to the Generic Inquiry Form " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="46e8c44c-6228-5045-b593-875c3572871c" RecordSourceID="22377" />
		<row PageID="170b2344-8188-4ef5-beef-71b3dd729402" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="c8df1d7e-724c-f3bb-a094-3496f4632590" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can add to a customization project a custom or customized generic inquiry—the generic inquiry that is saved in the database for the current tenant. To do this, perform the following actions:[anchor|#ol_qw5_2nt_tw]
#Open the customization project in the Customization Project Editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)
#Click '''Generic Inquiries''' in the navigation pane to open the Generic Inquiries page.
#On the page toolbar, click '''Add New Record''' (+), as shown in the screenshot below.
#In the list of generic inquiries in the '''Add Generic Inquiries''' dialog box, which opens, select the check box for each generic inquiry form that you want to include in the project.
#:((({S:Warn}The '''Add Generic Inquiries''' dialog box displays all the custom and customized generic inquiries that exist in your instance of Acumatica ERP. You can select multiple generic inquiries to add them to the project simultaneously.
)))
#In the dialog box, click '''Save''' to add the selected generic inquiry or inquiries to the customization project.[anchor|#image_dt1_j1r_ls][image:CustomizationPlatform/images/CG_GL_Items_GI_Ading_1.png|popup|Adding the generic inquiry to the customization project|450px]

The system adds to the project the data for each selected generic inquiry, and you can see each new <tt>GenericInquiryScreen</tt> item in the Project Items table of the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_XML_Item|Item XML Editor], as shown in the following screenshot.[anchor|#fig_dnk_gwc_sr][anchor|#image_jvl_dt1_wr][image:CustomizationPlatform/images/CG_GL_Items_GI_Ading_2.png|popup|Viewing the new GenericInquiryScreen item included in the project|450px]((({S:Warn}The system automatically includes in the customization project information about the workspace to which the generic inquiry have been added in the UI along with other information about the generic inquiry.
)))]]></column>
			<column name="PlainText"><![CDATA[To Add a Generic Inquiry to a Project You can add to a customization project a custom or customized generic inquiry—the generic       inquiry that is saved in the database for the current tenant. To do this, perform the       following actions: Open the customization project in the  Customization Project Editor. (See  To Open a Project for details.) Click  Generic Inquiries  in the navigation pane to open the Generic         Inquiries page. On the page toolbar, click  Add New Record  (+), as shown in the         screenshot below. In the list of generic inquiries in the  Add Generic Inquiries          dialog box, which opens, select the check box for each generic inquiry form that you want to         include in the project. The  Add Generic Inquiries  dialog box           displays all the custom and customized generic inquiries that exist in your instance of              Acumatica ERP. You can select multiple generic inquiries to add them to the project           simultaneously. In the dialog box, click  Save  to add the selected generic inquiry         or inquiries to the customization project. Adding the generic inquiry to the customization project The system adds to the project the data for each selected generic inquiry, and you can see each       new  GenericInquiryScreen  item in the Project Items table of the  Item XML Editor, as shown in the following screenshot. Viewing the new GenericInquiryScreen item included in the project The system automatically includes in the customization project information about the       workspace to which the generic inquiry have been added in the UI along with other information       about the generic inquiry. ]]></column>
		</row>
		<row PageID="49c6930d-3f91-4e60-b47e-a654ec4aeac2" Language="en-US" PageRevisionID="1" PlainText="To Delete a Generic Inquiry from a Project To remove a  GenericInquiryScreen  item from a project, perform the following actions: Open the customization project in the  Customization Project Editor. (See  To Open a Project for details.) Click  Generic Inquiries  in the navigation pane to open the Generic           Inquiries page. In the page table, click the item to be deleted. On the page toolbar, click  Delete Row  (X). On the page toolbar, click  Save  to save the changes to the      customization project. If you delete a  GenericInquiryScreen  item from the project, the generic inquiry       remains in the system unless you delete the inquiry by using the   ([~/?ScreenId=SM208000|SM208000]) Generic Inquiry (SM208000) form. If you have added a site map node for a custom inquiry form to the project and removed the       inquiry from the project,  you should delete the appropriate  SiteMapNode  item. (See          To Delete a Site Map Node from a Project for details.) " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="0099cd51-b402-40b1-059d-2dc5e5528797" RecordSourceID="22377">
			<column name="Content"><![CDATA[
To remove a ''GenericInquiryScreen'' item from a project, perform the following actions:[anchor|#ol_qw5_2nt_tw]
#Open the customization project in the Customization Project Editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)
#Click '''Generic Inquiries''' in the navigation pane to open the Generic Inquiries page.
#In the page table, click the item to be deleted.
#On the page toolbar, click '''Delete Row''' (X).
#On the page toolbar, click '''Save''' to save the changes to the customization project.
{br}

If you delete a ''GenericInquiryScreen'' item from the project, the generic inquiry remains in the system unless you delete the inquiry by using the [HelpRoot_FormReference\SM_20_80_00|Generic Inquiry] ([~/?ScreenId=SM208000|SM208000]) form.{br}

If you have added a site map node for a custom inquiry form to the project and removed the inquiry from the project, you should delete the appropriate ''SiteMapNode'' item. (See [HelpRoot_Dev_Customization\CG_GL_Items_SiteMap_Deleting|To Delete a Site Map Node from a Project] for details.)]]></column>
		</row>
		<row PageID="9610ce4b-7c40-4207-8902-9c3c7bfb17f5" Language="en-US" PageRevisionID="1" Content="&#xA;If you have used the [HelpRoot_FormReference\SM_20_80_00|Generic Inquiry] ([~/?ScreenId=SM208000|SM208000]) form to change a generic inquiry included in the customization project, you have to update the appropriate item in the project. To do this, perform the following actions:[anchor|#ol_qw5_2nt_tw]&#xA;#Open the customization project in the Customization Project Editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)&#xA;#Click '''Generic Inquiries''' in the navigation pane to open the Generic Inquiries page.&#xA;#On the page toolbar, click '''Reload From Database'''.&#xA;{br}&#xA;&#xA;The platform updates all the ''GenericInquiryScreen'' items of the project by using the appropriate data from the database." PlainText="To Update Generic Inquiry Items in a Project If you have used the   ([~/?ScreenId=SM208000|SM208000]) Generic Inquiry (SM208000) form to change       a generic inquiry included in the customization project, you have to update the appropriate       item in the project. To do this, perform the following actions: Open the customization project in the  Customization Project Editor. (See  To Open a Project for details.) Click  Generic Inquiries  in the navigation pane to open the           Generic Inquiries page. On the page toolbar, click  Reload From Database . The platform updates all the  GenericInquiryScreen  items of the project by using the       appropriate data from the database. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="76a5f519-c382-77ce-2214-b7f3e079a06d" RecordSourceID="22377" />
		<row PageID="9daa6cd1-41d3-429e-9e8d-29e9a510748d" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="41b5085f-0d40-9e97-c763-8fa194b50e01" RecordSourceID="22377">
			<column name="Content"><![CDATA[
When you are working with the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor], you may need to open the [HelpRoot_FormReference\SM_20_80_00|Generic Inquiry] ([~/?ScreenId=SM208000|SM208000]) form in the browser. You can use this form, for example, to create a new generic inquiry, to customize an existing one, or to manage existing generic inquiries in Acumatica ERP. {br}

To open the [HelpRoot_FormReference\SM_20_80_00|Generic Inquiry] form from the Customization Project Editor, perform the following actions:[anchor|#ol_qw5_2nt_tw]
#Select '''Generic Inquiries''' in the navigation pane to open the Generic Inquiries page.
#On the page toolbar, click '''Manage Inquiries'''.
{br}

As soon as you save a new inquiry on the [HelpRoot_FormReference\SM_20_80_00|Generic Inquiry] form, you can add the inquiry as a ''GenericInquiryScreen'' item to the project.((({S:Warn}You can limit the list of tables available for constructing generic inquiries on the [HelpRoot_FormReference\SM_20_80_00|Generic Inquiry] form. See [HelpRoot_Dev_Customization\CG_Platform_Features_LimitTables4GI|Limiting the List of Tables Available for Generic Inquiries] for details.
)))]]></column>
			<column name="PlainText"><![CDATA[To Navigate to the Generic Inquiry Form  When you are working with the   Customization Project                         Editor, you may need to    open the   ([~/?ScreenId=SM208000|SM208000]) Generic Inquiry (SM208000) form in the browser. You can    use this form, for example, to create a new generic inquiry, to customize an existing one, or to    manage existing generic inquiries in  Acumatica ERP.  To open the   ([~/?ScreenId=SM208000|SM208000]) Generic Inquiry form from the  Customization Project Editor,    perform the following actions: Select  Generic Inquiries  in the navigation pane to open the Generic      Inquiries page. On the page toolbar, click  Manage Inquiries . As soon as you save a new inquiry on the   ([~/?ScreenId=SM208000|SM208000]) Generic Inquiry form, you    can add the inquiry as a  GenericInquiryScreen  item to the project. You can limit the     list of tables available for constructing generic inquiries on the   ([~/?ScreenId=SM208000|SM208000]) Generic Inquiry form. See  Limiting the List of Tables Available for Generic Inquiries for     details. ]]></column>
		</row>
		<row PageID="10a2e1e8-345e-460e-8cb1-914e3c7fca84" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="f9984af2-3b62-cfe6-437e-42433b8d5c68" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can limit the list of database tables available for constructing generic inquiries on the [HelpRoot_FormReference\SM_20_80_00|Generic Inquiry] ([~/?ScreenId=SM208000|SM208000]) form in the production environment. To do this, in the development environment, use the following approach:[anchor|#ol_cyy_bmg_kr]
#Create the <tt>GITables.xml</tt> configuration file to specify the <tt>Allowed</tt> and <tt>Hidden</tt> collections of masks for the full names of the database tables, as described in [[#_f18917b0-5294-41e6-813c-5cfeb92d0a2c|GITables.xml File Content].
#Save the configuration file to the <tt>App&#95;Data</tt> folder of the website.
#Add the file to a customization project as a ''File'' item. (See [HelpRoot_Dev_Customization\CG_GL_Items_Files_Adding|To Add a Custom File to a Project] for details.)
{br}

The platform automatically checks whether this file exists in the <tt>App&#95;Data</tt> folder. If the customization project is published in the production environment, the platform applies the file content when a user selects a table for a generic inquiry on the [HelpRoot_FormReference\SM_20_80_00|Generic Inquiry] form.[anchor|#_f18917b0-5294-41e6-813c-5cfeb92d0a2c]
==<tt>GITables.xml</tt> File Content==
The configuration file is in XML format and includes the <tt>GITables</tt> element only. This element must include the <tt>Allowed</tt> section and can also contain the <tt>Hidden</tt> section. Each section is a collection of <tt>Table</tt> elements.{br}

The <tt>Allowed</tt> collection specifies the list of tables that are available for use in generic inquiries constructed on the [HelpRoot_FormReference\SM_20_80_00|Generic Inquiry] form. If a table isn't included in the <tt>Allowed</tt> collection, it doesn&rsquo;t appear in the list for selection on the '''Table''' tab of the form. You can also add the <tt>Hidden</tt> section to the configuration file. This section specifies the tables you want to exclude from the list. {br}

If a table is allowed and not hidden (as illustrated by the green area in the figure below), it is included in the list of the tables available for constructing generic inquiries on the [HelpRoot_FormReference\SM_20_80_00|Generic Inquiry] form. Otherwise, the table is not displayed in this list of tables.[anchor|#fig_k2p_z2h_kr][anchor|#image_qkk_dfh_kr][image:CustomizationPlatform/images/CG_Platform_Features_LimitTables4GI.png|popup|250px]{br}

Each <tt>Table</tt> element of the <tt>Allowed</tt> and <tt>Hidden</tt> sections contains the <tt>FullName</tt> attribute, which specifies the table name or the mask for a set of tables.{br}

The attribute value is a string that can contain the following wildcard characters:[anchor|#ul_grq_rdm_kr]
*An asterisk (''&#42;''), which matches any number of characters (or no characters)
*A question mark (''?''), which matches exactly one character
{br}

The example below shows how to exclude the tables by using the {{PX.Objects.CR.BAccount}} and {{PX.*Contact*}} masks.{{{{
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;GITables&gt;
	&lt;Hidden&gt;
		&lt;Table FullName="PX.Objects.CR.BAccount" /&gt;
		&lt;Table FullName="PX.*Contact*" /&gt;
	&lt;/Hidden&gt;
	&lt;Allowed&gt;
		&lt;Table FullName="*" /&gt;
	&lt;/Allowed&gt;
&lt;/GITables&gt;

}}}}{br}

According to the mask with {{Contact}}, users will not be able to use any tables that contain the word ''Contact'' in the table name in their inquiries (for example, the <tt>PX.Objects.CR.Contact</tt> table).{br}

To limit the list of database tables by using only the <tt>Allowed</tt> collection, you can empty or remove the <tt>Hidden</tt> section. The following example shows how to include only the tables that matched the {{PX.Objects.IN.*}} mask.{{{{
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;GITables&gt;
	&lt;Allowed&gt;
		&lt;Table FullName="PX.Objects.IN.*" /&gt;
	&lt;/Allowed&gt;
&lt;/GITables&gt;

}}}}]]></column>
			<column name="PlainText"><![CDATA[Limiting the List of Tables Available for Generic Inquiries You can limit the list of database tables available for constructing generic inquiries on the       ([~/?ScreenId=SM208000|SM208000]) Generic Inquiry (SM208000) form in the production environment.    To do this, in the development environment, use the following approach: Create the  GITables.xml  configuration file to specify the        Allowed  and  Hidden  collections of masks for the full      names of the database tables, as described in  GITables.xml File Content GITables.xml File Content. Save the configuration file to the  App_Data  folder of the website. Add the file to a customization project as a  File  item. (See  To Add a Custom File to a Project for details.) The platform automatically checks whether this file exists in the  App_Data        folder. If the customization project is published in the production environment, the platform       applies the file content when a user selects a table for a generic inquiry on the   ([~/?ScreenId=SM208000|SM208000]) Generic Inquiry form. GITables.xml  File Content The configuration file is in XML format and includes the  GITables  element     only. This element must include the  Allowed  section and can also contain the       Hidden  section. Each section is a collection of  Table      elements. The  Allowed  collection specifies the list of tables that are available for         use in generic inquiries constructed on the   ([~/?ScreenId=SM208000|SM208000]) Generic Inquiry         form. If a table isn't included in the  Allowed  collection, it doesn't         appear in the list for selection on the  Table  tab of the form. You         can also add the  Hidden  section to the configuration file. This section         specifies the tables you want to exclude from the list.  If a table is allowed and not hidden (as illustrated by the green area in the figure below),         it is included in the list of the tables available for constructing generic inquiries on the             ([~/?ScreenId=SM208000|SM208000]) Generic Inquiry form. Otherwise, the table is not displayed         in this list of tables. Each  Table  element of the  Allowed  and       Hidden  sections contains the  FullName  attribute, which     specifies the table name or the mask for a set of tables. The attribute value is a string that can contain the following wildcard characters: An asterisk ( * ), which matches any number of characters (or no characters) A question mark ( ? ), which matches exactly one character The example below shows how to exclude the tables by using the       PX.Objects.CR.BAccount  and  PX.*Contact*      masks. 
<?xml version="1.0" encoding="utf-8"?>
<GITables>
	<Hidden>
		<Table FullName="PX.Objects.CR.BAccount" />
		<Table FullName="PX.*Contact*" />
	</Hidden>
	<Allowed>
		<Table FullName="*" />
	</Allowed>
</GITables>
 According to the mask with  Contact , users will not be able to use any tables     that contain the word  Contact  in the table name in their inquiries (for example, the       PX.Objects.CR.Contact  table). To limit the list of database tables by using only the  Allowed  collection,     you can empty or remove the  Hidden  section. The following example shows how     to include only the tables that matched the  PX.Objects.IN.*      mask. 
<?xml version="1.0" encoding="utf-8"?>
<GITables>
	<Allowed>
		<Table FullName="PX.Objects.IN.*" />
	</Allowed>
</GITables>
 ]]></column>
		</row>
		<row PageID="b966829a-a21f-429e-b4fe-2b474dfef338" Language="en-US" PageRevisionID="1" Content="&#xA;You use the Custom Reports page of the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor] to manage ''Report'' items in the customization project.((({S:Warn}A ''Report'' item contains the data set of a custom report created with Acumatica Report                         Designer.&#xA;))){br}&#xA;&#xA;The Custom Reports page displays the list of the custom reports that have been added to the customization project.{br}&#xA;&#xA;On the page, you can perform the operations described in the following topics:[anchor|#ul_mmd_kgc_ww]&#xA;*[HelpRoot_Dev_Customization\CG_GL_Items_Reports_Adding|To Add a Custom Report to a Project]&#xA;*[HelpRoot_Dev_Customization\CG_GL_Items_Reports_Deleting|To Delete a Custom Report from a Project]&#xA;*[HelpRoot_Dev_Customization\CG_GL_Items_Reports_Updating|To Navigate a Custom Report in a Project]&#xA;" PlainText="Custom Reports You use the Custom Reports page of the   Customization Project                         Editor to manage          Report  items in the customization project. A  Report  item contains the         data set of a custom report created with  Acumatica Report                         Designer. The Custom Reports page displays the list of the custom reports that have been added to the       customization project. On the page, you can perform the operations described in the following topics: To Add a Custom Report to a ProjectTo Delete a Custom Report from a ProjectTo Navigate a Custom Report in a Project" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="d13a6d93-0b93-b5d4-c36d-b9781c507a22" RecordSourceID="22377" />
		<row PageID="776bfc8f-54eb-44c7-845a-0ff36758fb02" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="6d8cf91b-58bb-1c68-730e-0b9498e0c5b9" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can add an Acumatica Report                         Designer custom report to a customization project. Before adding a report to a project, you have to construct the report in Acumatica Report                         Designer and save the report to the database. (For more information about reports, see [HelpRoot_ReportingTools\ReportDesigner_Main| Acumatica Report                         Designer Guide].{br}

To add a custom report to a project, perform the following actions:[anchor|#ol_qw5_2nt_tw]
#Open the customization project in the Customization Project Editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)
#Click '''Reports''' in the navigation pane to open the Custom Reports page.
#On the page toolbar, click '''Add New Record''' (+), as shown in the screenshot below.
#In '''Name''' box of the '''Select Report from Database''' dialog box, which opens, select the report that you want to include in the project.
#:((({S:Warn}If a custom report is created in Acumatica Report                         Designer and saved as a file in the file system, you cannot add the report to a customization project as a ''Report'' item.
)))
#In the dialog box, click '''OK''' to add the selected report to the customization project.[anchor|#image_ytr_22x_gq][image:CustomizationPlatform/images/CG_GL_Items_Reports_Adding_01.png|popup|Adding a custom report to the project|418px]
((({S:Warn}To give users the ability to navigate to the custom report in Acumatica ERP, you have to add the appropriate site map node to the customization project, as described in [HelpRoot_Dev_Customization\CG_GL_Items_SiteMap_Adding|To Add a Site Map Node to a Project].
)))]]></column>
			<column name="PlainText"><![CDATA[To Add a Custom Report to a Project You can add an  Acumatica Report                         Designer custom report to a customization project. Before adding a report to a project, you have to       construct the report in  Acumatica Report                         Designer and save the report to the database. (For more information about reports, see   Acumatica Report                         Designer Guide. To add a custom report to a project, perform the following actions: Open the customization project in the  Customization Project Editor. (See  To Open a Project for details.) Click  Reports  in the navigation pane to open the Custom Reports           page. On the page toolbar, click  Add New Record  (+), as shown in the           screenshot below. In  Name  box of the  Select Report from             Database  dialog box, which opens, select the report that you want to include           in the project. If a custom report is created in  Acumatica Report                         Designer and saved as a file in the file system, you cannot add the report to a customization             project as a  Report  item. In the dialog box, click  OK  to add the selected report to the           customization project. Adding a custom report to the project To give users the ability to navigate to the custom report in  Acumatica ERP, you have to add the appropriate site map node to the customization project, as described       in  To Add a Site Map Node to a Project. ]]></column>
		</row>
		<row PageID="03a8fa03-47e8-4c45-b8ec-63877a2210bf" Language="en-US" PageRevisionID="1" Content="&#xA;To remove a custom report from a project, perform the following actions:[anchor|#ol_qw5_2nt_tw]&#xA;#Open the customization project in the Customization Project Editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)&#xA;#Click '''Reports''' in the navigation pane to open the Custom Reports page.&#xA;#In the page table, click the item to be deleted.&#xA;#On the page toolbar, click '''Delete Row''' (X).&#xA;#On the page toolbar, click '''Save''' to save the changes to the customization project.&#xA;{br}&#xA;&#xA;If you have added a site map node for the custom report to the project, you also have to delete the appropriate ''SiteMapNode'' item. (See [HelpRoot_Dev_Customization\CG_GL_Items_SiteMap_Deleting|To Delete a Site Map Node from a Project] for details.)" PlainText="To Delete a Custom Report from a Project To remove a custom report from a project, perform the following actions: Open the customization project in the  Customization Project Editor. (See  To Open a Project for details.) Click  Reports  in the navigation pane to open the Custom Reports           page. In the page table, click the item to be deleted. On the page toolbar, click  Delete Row  (X). On the page toolbar, click  Save  to save the changes to the      customization project. If you have added a site map node for the custom report to the project, you also have to delete       the appropriate  SiteMapNode  item. (See  To Delete a Site Map Node from a Project       for details.) " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="7c0d1dbd-2024-0cb0-0872-ad4118238838" RecordSourceID="22377" />
		<row PageID="6941012a-5855-4fc7-a0ba-e4b81d41b7ce" Language="en-US" PageRevisionID="1" Content="&#xA;If you have used Acumatica Report                         Designer to change a custom report included in the customization project, you have to update the appropriate item in the project. To do this, perform the following actions:[anchor|#ol_qw5_2nt_tw]&#xA;#Open the customization project in the Customization Project Editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)&#xA;#Click '''Reports''' in the navigation pane to open the Custom Reports page.&#xA;#On the page toolbar, click '''Reload From Database'''.&#xA;{br}&#xA;&#xA;The platform updates all the ''Report'' items that are added to the customization project." PlainText="To Navigate a Custom Report in a Project If you have used  Acumatica Report                         Designer to change a custom report included in the customization project, you have to update the    appropriate item in the project. To do this, perform the following actions: Open the customization project in the  Customization Project Editor. (See  To Open a Project for details.) Click  Reports  in the navigation pane to open the Custom Reports      page. On the page toolbar, click  Reload From Database . The platform updates all the  Report  items that are added to the customization    project. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="ce22d897-5bbf-b29b-9fd7-6fd482412bb7" RecordSourceID="22377" />
		<row PageID="a0681f51-bdd2-433e-881d-ed5d862483bd" Language="en-US" PageRevisionID="1" Content="&#xA;You use the Dashboards page of the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor] to manage ''Dashboard'' items in the customization project.((({S:Warn}A ''Dashboard'' item contains the data set of a custom or customized dashboard.&#xA;)))&#xA;The Dashboards page displays the list of the dashboards that have been added to the customization project.{br}&#xA;&#xA;On the page, you can perform the operations described in the following topics:[anchor|#ul_mmd_kgc_ww]&#xA;*[HelpRoot_Dev_Customization\CG_GL_Items_Dashboards_Adding|To Add a Dashboard to a Project]&#xA;*[HelpRoot_Dev_Customization\CG_GL_Items_Dashboards_Deleting|To Delete a Dashboard from a Project]&#xA;*[HelpRoot_Dev_Customization\CG_GL_Items_Dashboards_Updating|To Update Dashboard Items in a Project]&#xA;*[HelpRoot_Dev_Customization\CG_GL_Items_Dashboards_Redirecting|To Navigate to the Dashboard Form]&#xA;" PlainText="Dashboards You use the Dashboards page of the   Customization Project                         Editor to manage      Dashboard  items in the customization project. A  Dashboard  item contains the data set of a custom or customized dashboard. The Dashboards page displays the list of the dashboards that have been added to the    customization project. On the page, you can perform the operations described in the following topics: To Add a Dashboard to a ProjectTo Delete a Dashboard from a ProjectTo Update Dashboard Items in a ProjectTo Navigate to the Dashboard Form" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="c73f6ce1-f2bd-eda5-800d-f864f31f7f8f" RecordSourceID="22377" />
		<row PageID="d2155b5c-e6b9-420e-b8ed-86f644a97e7f" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="f80dfc88-4a35-3f0c-5e10-5112b0aa0e35" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can add to a customization project a custom or customized dashboard—the dashboard that is saved in the database for the current tenant. To do this, perform the following actions:[anchor|#ol_qw5_2nt_tw]
#Open the customization project in the Customization Project Editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)
#Click '''Dashboards''' in the navigation pane to open the Dashboards page.
#On the page toolbar, click '''Add New Record''' (+).
#In the list of dashboards in the '''Add Dashboards''' dialog box, which opens, select the check box for each dashboard that you want to include in the project.
#:((({S:Warn}The '''Add Dashboards''' dialog box displays all the custom and customized dashboards that exist in your instance of Acumatica ERP. You can select multiple dashboards to add them to the project simultaneously.
)))
#In the dialog box, click '''Save''' to add the selected dashboards to the customization project.

The system adds to the project the data for each selected dashboard, and you can see each new <tt>Dashboard</tt> item in the Project Items table of the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_XML_Item|Item XML Editor]. {br}

Alongside with Dashboard item, the system adds <tt>Generic Inquiry</tt>, <tt>Site Map</tt>, and <tt>Wiki</tt> items for inquiries, site map nodes, and wiki pages associated with the dashboard. If an inquiry, a site map node, or a wiki page is already added to the customization project, it is not duplicated.((({S:Warn}The system automatically includes in the customization project information about the workspace to which the dashboard have been added in the UI along with other information about the dashboard.
)))]]></column>
			<column name="PlainText"><![CDATA[To Add a Dashboard to a Project You can add to a customization project a custom or customized dashboard—the dashboard       that is saved in the database for the current tenant. To do this, perform the following       actions: Open the customization project in the  Customization Project Editor. (See  To Open a Project for details.) Click  Dashboards  in the navigation pane to open the Dashboards         page. On the page toolbar, click  Add New Record  (+). In the list of dashboards in the  Add Dashboards  dialog box, which         opens, select the check box for each dashboard that you want to include in the           project. The  Add Dashboards  dialog box displays all the custom           and customized dashboards that exist in your instance of  Acumatica ERP. You can select multiple dashboards to add them to the project         simultaneously. In the dialog box, click  Save  to add the selected dashboards to the         customization project. The system adds to the project the data for each selected dashboard, and you can see each new          Dashboard  item in the Project Items table of the  Item XML Editor.  Alongside with Dashboard item, the system adds  Generic Inquiry ,          Site Map , and  Wiki  items for inquiries, site map       nodes, and wiki pages associated with the dashboard. If an inquiry, a site map node, or a wiki       page is already added to the customization project, it is not duplicated. The system automatically includes in the customization project information about the       workspace to which the dashboard have been added in the UI along with other information about       the dashboard. ]]></column>
		</row>
		<row PageID="caec88e4-07f1-4f2e-91ae-f694574edeaa" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="e7f0f496-5252-a73c-1b81-c1b0fba989c8" RecordSourceID="22377">
			<column name="Content"><![CDATA[
To remove a ''Dashboard'' item from a project, perform the following actions:[anchor|#ol_qw5_2nt_tw]
#Open the customization project in the Customization Project Editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)
#Click '''Dashboards''' in the navigation pane to open the Dashboards page.
#In the page table, click the item to be deleted.
#On the page toolbar, click '''Delete Row''' (X).
#On the page toolbar, click '''Save''' to save the changes to the customization project.

If you delete a ''Dashboard'' item from the project, the dashboard remains in the system unless you delete the dashboard by using the [HelpRoot_FormReference\SM_20_86_00|Dashboards] ([~/?ScreenId=SM208600|SM208600]) form.{br}

If a site map node or a generic inquiry was added for a custom dashboard to the project (manually or automatically), and you removed the dashboard from the project, you should delete the appropriate ''Site Map'', ''Generic Inquiry'', or ''Wiki'' item manually. (See [HelpRoot_Dev_Customization\CG_GL_Items_SiteMap_Deleting|To Delete a Site Map Node from a Project] for details.)]]></column>
			<column name="PlainText"><![CDATA[To Delete a Dashboard from a Project To remove a  Dashboard  item from a project, perform the following actions: Open the customization project in the  Customization Project Editor. (See  To Open a Project for details.) Click  Dashboards  in the navigation pane to open the Dashboards     page. In the page table, click the item to be deleted. On the page toolbar, click  Delete Row  (X). On the page toolbar, click  Save  to save the changes to the     customization project. If you delete a  Dashboard  item from the project, the dashboard remains in the system    unless you delete the dashboard by using the   ([~/?ScreenId=SM208600|SM208600]) Dashboards    (SM208600) form. If a site map node or a generic inquiry was added for a custom dashboard to the project    (manually or automatically), and you removed the dashboard from the project, you should delete    the appropriate  Site Map ,  Generic Inquiry , or  Wiki  item manually. (See  To Delete a Site Map Node from a Project for details.) ]]></column>
		</row>
		<row PageID="7511e8ea-fb8e-4993-a145-33e20b8ab860" Language="en-US" PageRevisionID="1" Content="&#xA;If you have used the [HelpRoot_FormReference\SM_20_86_00|Dashboards] ([~/?ScreenId=SM208600|SM208600]) form to change a dashboard included in the customization project or changed its design by modifying the set of widgets, you have to update the appropriate item in the project. To do this, perform the following actions:[anchor|#ol_qw5_2nt_tw]&#xA;#Open the customization project in the Customization Project Editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)&#xA;#Click '''Dashboards''' in the navigation pane to open the Dashboard page.&#xA;#On the page toolbar, click '''Reload From Database'''.&#xA;{br}&#xA;&#xA;The platform updates all the ''Dashboard'' items of the project by using the appropriate data from the database." PlainText="To Update Dashboard Items in a Project If you have used the   ([~/?ScreenId=SM208600|SM208600]) Dashboards (SM208600) form to change    a dashboard included in the customization project or changed its design by modifying the set of    widgets, you have to update the appropriate item in the project. To do this, perform the    following actions: Open the customization project in the  Customization Project Editor. (See  To Open a Project for details.) Click  Dashboards  in the navigation pane to open the Dashboard      page. On the page toolbar, click  Reload From Database . The platform updates all the  Dashboard  items of the project by using the appropriate    data from the database. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="5c002c2a-7873-1d9c-acfd-36d5ec9e4961" RecordSourceID="22377" />
		<row PageID="30805146-5dcb-4f32-b018-f218528ed6a8" Language="en-US" PageRevisionID="1" Content="&#xA;When you are working with the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor], you may need to open the [HelpRoot_FormReference\SM_20_86_00|Dashboards] ([~/?ScreenId=SM208600|SM208600]) form in the browser. You can use this form, for example, to create a new dashboard, to modify settings of an existing one, or to manage existing dashboards in Acumatica ERP. {br}&#xA;&#xA;To open the [HelpRoot_FormReference\SM_20_86_00|Dashboards] form from the Customization Project Editor, perform the following actions:[anchor|#ol_qw5_2nt_tw]&#xA;#Select '''Dashboards''' in the navigation pane to open the Dashboards page.&#xA;#On the page toolbar, click '''Manage Dashboards'''.&#xA;&#xA;As soon as you save a dashboard on the [HelpRoot_FormReference\SM_20_86_00|Dashboards] form, you can add the dashboard as a ''Dashboard'' item to the project." PlainText="To Navigate to the Dashboard Form When you are working with the   Customization Project                         Editor, you may need to    open the   ([~/?ScreenId=SM208600|SM208600]) Dashboards (SM208600) form in the browser. You can    use this form, for example, to create a new dashboard, to modify settings of an existing one, or    to manage existing dashboards in  Acumatica ERP.  To open the   ([~/?ScreenId=SM208600|SM208600]) Dashboards form from the  Customization Project Editor,    perform the following actions: Select  Dashboards  in the navigation pane to open the Dashboards     page. On the page toolbar, click  Manage Dashboards . As soon as you save a dashboard on the   ([~/?ScreenId=SM208600|SM208600]) Dashboards form, you    can add the dashboard as a  Dashboard  item to the project. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="46db86c2-d4a4-6437-10cf-0df430918277" RecordSourceID="22377" />
		<row PageID="424cd859-b216-4d88-ab5c-22fdba137f0c" Language="en-US" PageRevisionID="1" PlainText="Site Map You use the Site Map page of the   Customization Project                         Editor to manage                  SiteMapNode  items in the customization project. A  SiteMapNode                  item contains the data set of a custom site map node for a custom form or report                 included in the customization project. The item also includes information about the                 location of the form or report in the UI (such as workspace to which the form or                 report included). The Site Map page displays the list of the custom site map nodes that have been added to the       customization project.  On the page, you can perform the operations described in the following topics: To Add a Site Map Node to a ProjectTo Delete a Site Map Node from a ProjectTo Update a Site Map Node in a ProjectTo Navigate to the Site Map Form " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="38b80764-0e78-6095-d794-627fe10fb22f" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You use the Site Map page of the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor] to manage ''SiteMapNode'' items in the customization project.((({S:Warn}A ''SiteMapNode'' item contains the data set of a custom site map node for a custom form or report included in the customization project. The item also includes information about the location of the form or report in the UI (such as workspace to which the form or report included).
))){br}

The Site Map page displays the list of the custom site map nodes that have been added to the customization project. {br}

On the page, you can perform the operations described in the following topics:[anchor|#ul_mmd_kgc_ww]
*[HelpRoot_Dev_Customization\CG_GL_Items_SiteMap_Adding|To Add a Site Map Node to a Project]
*[HelpRoot_Dev_Customization\CG_GL_Items_SiteMap_Deleting|To Delete a Site Map Node from a Project]
*[HelpRoot_Dev_Customization\CG_GL_Items_SiteMap_Updating|To Update a Site Map Node in a Project]
*[HelpRoot_Dev_Customization\CG_GL_Items_SiteMap_Redirecting|To Navigate to the Site Map Form ]
]]></column>
		</row>
		<row PageID="f474bd1e-f20d-4376-a1e0-4656a0932e67" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="3c454641-6135-3025-d869-2416dbadeca9" RecordSourceID="22377">
			<column name="Content"><![CDATA[
If, for a custom form or report, you have changed the workspace in the UI and saved these changes in the database for the current tenant, you can add these changes to a customization project as a ''SiteMapNode'' item. To do this, perform the following actions:[anchor|#ol_qw5_2nt_tw]
#Open the customization project in the Customization Project Editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)
#Click '''Site Map''' in the navigation pane to open the Site Map page.
#On the page toolbar, click '''Add New Record''' (+), as shown in the screenshot below.
#In the list of site map nodes in the '''Add Site Map''' dialog box, which opens, select the check box for each screen that you want to include in the project.
#:((({S:Warn}The '''Add Site Map''' dialog box displays all the custom site map nodes that have been created in the site map of Acumatica ERP and the nodes that have been modified in the site map. You can select multiple custom site map nodes to add them to the project simultaneously.
)))
#In the dialog box, click '''Save''' to add each selected site map node to the customization project.[anchor|#image_fnr_3vr_ls][image:CustomizationPlatform/images/CG_GL_Items_SiteMap_Adding.png|popup|Adding the site map node to the customization project|450px]
{br}

The system adds to the project the data from the database for each selected site map node. You can view each new ''SiteMapNode'' item in the Project Items table of the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_XML_Item|Item XML Editor].]]></column>
			<column name="PlainText"><![CDATA[To Add a Site Map Node to a Project If, for a custom form or report, you have changed the workspace in the UI and saved these       changes in the database for the current tenant, you can add these changes to a customization       project as a  SiteMapNode  item. To do this, perform the following actions: Open the customization project in the  Customization Project Editor. (See  To Open a Project for details.) Click  Site Map  in the navigation pane to open the Site Map           page. On the page toolbar, click  Add New Record  (+), as shown in the           screenshot below. In the list of site map nodes in the  Add Site Map  dialog box,           which opens, select the check box for each screen that you want to include in the             project. The  Add Site Map  dialog box displays all the custom             site map nodes that have been created in the site map of  Acumatica ERP and the nodes that have been modified in the site map. You can select multiple custom             site map nodes to add them to the project simultaneously. In the dialog box, click  Save  to add each selected site map node           to the customization project. Adding the site map node to the customization project The system adds to the project the data from the database for each selected site map node. You       can view each new  SiteMapNode  item in the Project Items table of the  Item XML Editor. ]]></column>
		</row>
		<row PageID="251adef7-d44b-444b-abc0-344d277855be" Language="en-US" PageRevisionID="1" Content="&#xA;To delete a site map node from a customization project, perform the following actions:[anchor|#ol_rkv_qxv_ww]&#xA;#Open the customization project in the Customization Project Editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)&#xA;#Click '''Site Map''' in the navigation pane to open the Site Map page.&#xA;#In the page table, click the item to be deleted.&#xA;#On the page toolbar, click '''Delete Row''' (X).&#xA;#On the page toolbar, click '''Save''' to save the changes to the customization project.&#xA;{br}&#xA;&#xA;If you delete a ''SiteMapNode'' item from the project, the node remains in the site map unless you delete the node on the [HelpRoot_FormReference\SM_20_05_20|Site Map] ([~/?ScreenId=SM200520|SM200520]) form." PlainText="To Delete a Site Map Node from a Project To delete a site map node from a customization project, perform the following actions: Open the customization project in the  Customization Project Editor. (See  To Open a Project for details.) Click  Site Map  in the navigation pane to open the Site Map page. In the page table, click the item to be deleted. On the page toolbar, click  Delete Row  (X). On the page toolbar, click  Save  to save the changes to the      customization project. If you delete a  SiteMapNode  item from the project, the node remains in the site map       unless you delete the node on the   ([~/?ScreenId=SM200520|SM200520]) Site Map (SM200520)       form. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="e05c4f28-2838-0edb-d1d9-7ef8a0083377" RecordSourceID="22377" />
		<row PageID="ee6d6334-7e48-4171-974f-b434d245ea57" Language="en-US" PageRevisionID="1" Content="&#xA;If you have used the [HelpRoot_FormReference\SM_20_05_20|Site Map] ([~/?ScreenId=SM200520|SM200520]) form or a workspace of the UI of Acumatica ERP to change a site map node included in the customization project, you should update this node in the project. To do this, perform the following actions:[anchor|#ol_qw5_2nt_tw]&#xA;#Open the customization project in the Customization Project Editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)&#xA;#Select '''Site Map''' in the navigation pane to open the Site Map page.&#xA;#On the page toolbar, click '''Reload From Database'''.&#xA;The platform updates all the ''SiteMapNode'' items of the project by using the appropriate data from the database." PlainText="To Update a Site Map Node in a Project If you have used the   ([~/?ScreenId=SM200520|SM200520]) Site Map (SM200520) form or a       workspace of the UI of  Acumatica ERP to change a site map node included in the customization project, you should update this       node in the project. To do this, perform the following actions: Open the customization project in the  Customization Project Editor. (See  To Open a Project for details.) Select  Site Map  in the navigation pane to open the Site Map           page. On the page toolbar, click  Reload From Database . The platform updates all the  SiteMapNode  items of the project by using the       appropriate data from the database. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="f98c2308-1110-3ef1-b5de-17b2003f1a76" RecordSourceID="22377" />
		<row PageID="851a5a5c-0a0e-4993-af84-1379b137d0b8" Language="en-US" PageRevisionID="1" Content="&#xA;You might need to add to Acumatica ERP a site map node for a custom form, inquiry, or report that you develop for a customization project. To create a custom site map node or modify an existing node, you use the [HelpRoot_FormReference\SM_20_05_20|Site Map] ([~/?ScreenId=SM200520|SM200520]) form of Acumatica ERP.{br}&#xA;&#xA;To open the [HelpRoot_FormReference\SM_20_05_20|Site Map] form from the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor], perform the following actions:[anchor|#ol_qw5_2nt_tw]&#xA;#Click '''Site Map''' in the navigation pane to open the Site Map page of the editor.&#xA;#On the page toolbar, click '''Manage Site Map'''.&#xA;{br}&#xA;&#xA;As soon as you save changes to an existing site map node or create a custom node on the [HelpRoot_FormReference\SM_20_05_20|Site Map] form, you can add the node as a ''SiteMapNode'' item to the customization project." PlainText="To Navigate to the Site Map Form  You might need to add to  Acumatica ERP a    site map node for a custom form, inquiry, or report that you develop for a customization project.    To create a custom site map node or modify an existing node, you use the   ([~/?ScreenId=SM200520|SM200520]) Site Map (SM200520) form of  Acumatica ERP. To open the   ([~/?ScreenId=SM200520|SM200520]) Site Map form from the   Customization Project                         Editor, perform the following actions: Click  Site Map  in the navigation pane to open the Site Map page of      the editor. On the page toolbar, click  Manage Site Map . As soon as you save changes to an existing site map node or create a custom node on the   ([~/?ScreenId=SM200520|SM200520]) Site Map form, you can add the node as a  SiteMapNode  item    to the customization project. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="d346fd73-4462-1175-36ec-6a7f806aefb8" RecordSourceID="22377" />
		<row PageID="b53a5313-aa16-468b-93a0-8e2c72495681" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="5030f3ce-eba7-837f-f030-d32fba9e98e0" RecordSourceID="22377">
			<column name="Content"><![CDATA[
With the Acumatica Customization             Platform, you can use custom SQL scripts for the following changes to the database in the scope of a customization project:[anchor|#_1f8ba0a2-800f-47ba-a051-576a74a5caf7]
*The creation of custom tables
*The creation of views, indexes, and other database objects
*The insertion of data into tables
*The increasing of the size of a text column of a table
See [HelpRoot_Dev_Customization\CG_Platform_Framework_DBSchema|Changes in the Database Schema] for details.{br}

You use the Database Scripts page of the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor] to manage ''Sql'' and ''Table'' items in the customization project.((({S:Warn}An ''Sql'' item contains a custom database table definition or a custom SQL script that has to be executed while the customization project is published. A ''Table'' item contains a description of the custom columns added to a table for bound custom fields created in the appropriate data access class.
))){br}

The Database Scripts page displays the list of the custom SQL scripts and customized tables that have been added to the customization project. {br}

When you create a custom table in the database, we recommend that you add the table schema to the customization project, as described in [HelpRoot_Dev_Customization\CG_GL_Items_DBScripts_AddingCustTable|To Add a Custom Table to a Project]. To create other database objects or insert data into the tables, you have to compose the corresponding SQL script and add the script to the customization project, as described in [HelpRoot_Dev_Customization\CG_GL_Items_DBScripts_AddingCustScript|To Add a Custom SQL Script to a Project].{br}

On the Database Scripts page, you can perform various operations, as described in the following topics:[anchor|#_27fe5f65-457d-4893-a273-b7c8913c801c]
*[HelpRoot_Dev_Customization\CG_GL_Items_DBScripts_AddingCustTable|To Add a Custom Table to a Project]
*[HelpRoot_Dev_Customization\CG_GL_Items_DBScripts_UpdatingCustTable|To Update Custom Tables in the Project]
*[HelpRoot_Dev_Customization\CG_GL_Items_DBScripts_AddCustomColumns|To Add a Custom Column to an Existing Table]
*[HelpRoot_Dev_Customization\CG_GL_Items_DBScripts_AlterTableCol|To Increase the Size of a Column in an Existing Table]
*[HelpRoot_Dev_Customization\CG_GL_Items_DBScripts_AddingCustScript|To Add a Custom SQL Script to a Project]
*[HelpRoot_Dev_Customization\CG_GL_Items_DBScripts_Editing|To Edit a Custom SQL Script]
*[HelpRoot_Dev_Customization\CG_GL_Items_DBScripts_Deleting|To Delete an Sql or Table Item From a Project]
]]></column>
			<column name="PlainText"><![CDATA[Database Scripts With the  Acumatica Customization             Platform, you can use custom SQL scripts for the following changes to the database in the scope of a       customization project: The creation of custom tables The creation of views, indexes, and other database objects The insertion of data into tables The increasing of the size of a text column of a table See  Changes in the Database Schema for details. You use the Database Scripts page of the   Customization Project                         Editor to manage          Sql  and  Table  items in the customization project. An  Sql  item         contains a custom database table definition or a custom SQL script that has to be executed         while the customization project is published. A  Table  item contains a description of         the custom columns added to a table for bound custom fields created in the appropriate data         access class. The Database Scripts page displays the list of the custom SQL scripts and customized tables       that have been added to the customization project.  When you create a custom table in the database, we recommend that you add the table schema to       the customization project, as described in  To Add a Custom Table to a Project. To create other database objects or       insert data into the tables, you have to compose the corresponding SQL script and add the       script to the customization project, as described in  To Add a Custom SQL Script to a Project. On the Database Scripts page, you can perform various operations, as described in the following         topics: To Add a Custom Table to a ProjectTo Update Custom Tables in the ProjectTo Add a Custom Column to an Existing TableTo Increase the Size of a Column in an Existing TableTo Add a Custom SQL Script to a ProjectTo Edit a Custom SQL ScriptTo Delete an Sql or Table Item From a Project]]></column>
		</row>
		<row PageID="703bd4ad-81ff-4f4e-ab01-0ebd44191ac9" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="d007967f-add4-b3d2-7e46-8207587e5a62" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You use the Database Scripts page of the Customization Project Editor to add a custom table to a customization project. You can add a custom table to a project by adding the table schema or by adding a custom SQL script.{br}

Adding the table schema is the optimal way of adding custom tables to the project. When you publish the customization project, the platform executes each SQL script of the project to update the database. If an ''Sql'' item contains a custom database table definition, to update the database with the table schema, the Acumatica Customization             Platform checks whether a table with this name already exists in the database. If the table exists, the platform generates SQL statements to alter the existing table so that it matches the schema. The platform doesn&rsquo;t drop the existing table, and it keeps any data in it. This helps to deploy a newer version of the customization project to a system that is already in use. If the table doesn&rsquo;t exist, the platform generates SQL statements to create the table. SQL statements are generated in the SQL dialect of the database management system. Therefore, if you add custom tables to the project by adding the table schema, you keep the customization project independent from the database management system that hosts the database of Acumatica ERP. {br}

Alternatively, you can add custom tables by adding a custom SQL script that creates the table in the project, as described in [HelpRoot_Dev_Customization\CG_GL_Items_DBScripts_AddingCustScript|To Add a Custom SQL Script to a Project].((({S:Warn}The creation or modification of the System tables is forbidden. A customization project containing such changes will not pass validation tests. For details on the System tables, see [HelpRoot_Dev_Platform\DA__con_System_Application_Tables|System and Application Tables].
)))
==To Add a Custom Table to a Customization Project==[anchor|#_a4cb0e0f-a376-4cd8-aeeb-427b097f26c6]
#Create the needed table in the database by using a database administration tool, such as SQL Server Management Studio.
#:((({S:Warn}You have to use a naming convention that provides unique names for your custom tables so that they do not have the names of existing tables of Acumatica ERP.
)))
#Open the customization project in the Customization Project Editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)
#Click '''Database Scripts''' in the navigation pane to open the Database Scripts page.
#On the page toolbar, click '''Add''' > '''Custom Table Schema'''.
#In the '''Add Custom Table Schema''' dialog box, which opens, select the custom table in the '''Table''' box and click '''OK'''. 
#: Acumatica Customization             Platform generates the table schema and adds the schema to the customization project as an ''Sql'' item.

Below is an example of the ''Sql'' item that contains the table schema of the custom table ''RBProduct''.{{{{ &lt;Sql TableName="RBProduct" TableSchemaXml="#CDATA"&gt;
        &lt;CDATA name="TableSchemaXml"&gt;&lt;![CDATA[&lt;table name="RBProduct"&gt;
  &lt;col name="ProductID" type="Int" identity="true" /&gt;
  &lt;col name="ProductCD" type="NVarChar(15)" /&gt;
  &lt;col name="ProductName" type="NVarChar(50)" /&gt;
  &lt;col name="Active" type="Bit" /&gt;
  &lt;col name="StockUnit" type="NVarChar(20)" /&gt;
  &lt;col name="UnitPrice" type="Decimal(19,6)" /&gt;
  &lt;col name="MinAvailQty" type="Decimal(25,6)" /&gt;
  &lt;col name="TStamp" type="Timestamp" /&gt;
  &lt;index name="RBProduct_PK" clustered="true" primary="true" unique="true"&gt;
    &lt;col name="ProductID" /&gt;
  &lt;/index&gt;
&lt;/table&gt;]]&gt;&lt;/CDATA&gt;
    &lt;/Sql&gt;
}}}}]]></column>
			<column name="PlainText"><![CDATA[To Add a Custom Table to a Project You use the Database Scripts page of the  Customization Project Editor to add a custom table to a customization project. You can add a custom                     table to a project by adding the table schema or by adding a custom SQL                     script. Adding the table schema is the optimal way of adding custom tables to the                     project. When you publish the customization project, the platform executes each                     SQL script of the project to update the database. If an  Sql  item contains                     a custom database table definition, to update the database with the table                     schema, the  Acumatica Customization             Platform checks whether a table with this name already exists in the database. If the                     table exists, the platform generates SQL statements to alter the existing table                     so that it matches the schema. The platform doesn't drop the existing table, and                     it keeps any data in it. This helps to deploy a newer version of the                     customization project to a system that is already in use. If the table doesn't                     exist, the platform generates SQL statements to create the table. SQL statements                     are generated in the SQL dialect of the database management system. Therefore,                     if you add custom tables to the project by adding the table schema, you keep the                     customization project independent from the database management system that hosts                     the database of  Acumatica ERP.  Alternatively, you can add custom tables by adding a custom SQL script that                     creates the table in the project, as described in  To Add a Custom SQL Script to a Project. The creation or modification of the System tables is forbidden. A                         customization project containing such changes will not pass validation                         tests. For details on the System tables, see  System and Application Tables. To Add a Custom Table to a Customization Project Create the needed table in the database by using a database administration                         tool, such as SQL Server Management Studio. You have to use a naming                             convention that provides unique names for your custom tables so that                             they do not have the names of existing tables of  Acumatica ERP. Open the customization project in the  Customization Project Editor. (See  To Open a Project for                         details.) Click  Database Scripts  in the navigation pane to open the                         Database Scripts page. On the page toolbar, click  Add Custom Table Schema . In the  Add Custom Table Schema  dialog box, which                         opens, select the custom table in the  Table  box and                         click  OK .                                   Acumatica Customization             Platform generates the table schema and adds the schema to the customization                             project as an  Sql  item. Below is an example of the  Sql  item that contains the table schema of the                     custom table  RBProduct .  <Sql TableName="RBProduct" TableSchemaXml="#CDATA">
        <CDATA name="TableSchemaXml"><![CDATA[<table name="RBProduct">
  <col name="ProductID" type="Int" identity="true" />
  <col name="ProductCD" type="NVarChar(15)" />
  <col name="ProductName" type="NVarChar(50)" />
  <col name="Active" type="Bit" />
  <col name="StockUnit" type="NVarChar(20)" />
  <col name="UnitPrice" type="Decimal(19,6)" />
  <col name="MinAvailQty" type="Decimal(25,6)" />
  <col name="TStamp" type="Timestamp" />
  <index name="RBProduct_PK" clustered="true" primary="true" unique="true">
    <col name="ProductID" />
  </index>
</table>]]]]><![CDATA[></CDATA>
    </Sql> ]]></column>
		</row>
		<row PageID="21dd174b-5412-44c0-80a8-d7b88ef25f4a" Language="en-US" PageRevisionID="1" Content="&#xA;After you have added a custom table to the project, you might want to continue making changes to the table by using a database administration tool, such as SQL Server Management Studio. We recommend that you update the table schema in the customization project before you export the deployment package of the project or publish the project.&#xA;==To Update the Schema of Custom Tables in the Project==&#xA;[anchor|#ol_qw5_2nt_tw]&#xA;#Open the customization project in the Customization Project Editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)&#xA;#Click '''Database Scripts''' in the navigation pane to open the Database Scripts page.&#xA;#On the page toolbar, click '''Reload From Database'''.&#xA;{br}&#xA;&#xA;The platform regenerates the database table schema of all the custom tables added to the project." PlainText="To Update Custom Tables in the Project After you have added a custom table to the project, you might want to continue making         changes to the table by using a database administration tool, such as SQL Server Management         Studio. We recommend that you update the table schema in the customization project before         you export the deployment package of the project or publish the project. To Update the Schema of Custom Tables in the Project Open the customization project in the  Customization Project Editor. (See  To Open a Project for details.) Click  Database Scripts  in the navigation pane to open the Database             Scripts page. On the page toolbar, click  Reload From Database . The platform regenerates the database table schema of all the custom tables added to the         project. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="9ddc6e1c-5e64-5ee3-8f6c-aa7ddfde5213" RecordSourceID="22377" />
		<row PageID="c4f3f7d3-d071-4962-8e12-c1421548f87a" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="4107c67f-161f-478f-7d89-8599c4bbbd75" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You use the Database Scripts page of the Customization Project Editor to add custom columns of an existing table of Acumatica ERP to a customization project. If you add custom fields to a data access class by using the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_DataClassEditor|Data Class Editor], you do not need to add the custom columns to the database table manually; Acumatica Customization             Platform adds these columns automatically. You may need to add a column manually if you added a custom field to a data access class in code.[anchor|#_f623383f-a7f0-4f9a-bf56-3d9ec170ecc3]{br}

We recommend that you not write custom SQL scripts to add changes to the database schema. If you add a custom SQL script, you must adhere to platform requirements that apply to custom SQL scripts, such as the support of multitenancy and the support of SQL dialects of the target database management systems. If you use the approach described in this topic, during the publication of the customization project, the platform generates SQL statements to alter the existing table so that this statement conforms to all platform requirements. 
==To Add a Custom Column to an Existing Table==[anchor|#_60cf7963-ae7b-47ac-801c-933b12ecda96]
#Open the customization project in the Customization Project Editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)
#Click '''Database Scripts''' in the navigation pane to open the Database Scripts page.
#On the page toolbar, click '''Add''' > '''Custom Column to Table'''.
#In the '''Add Custom Column to Table''' dialog box, which opens, specify the table to which the column should be added and the name and type of the new column, and click '''OK'''. Acumatica Customization             Platform adds the columns to the customization project as a ''Table'' item.
]]></column>
			<column name="PlainText"><![CDATA[To Add a Custom Column to an Existing Table You use the Database Scripts page of the  Customization Project Editor     to add custom columns of an existing table of  Acumatica ERP     to a customization project. If you add custom fields to a data access class by using the  Data Class Editor,     you do not need to add the custom columns to the database table manually;  Acumatica Customization             Platform adds these columns automatically. You may need to add a column manually if you added a custom     field to a data access class in code. We recommend that you not write custom SQL scripts to             add changes to the database schema. If you add a custom SQL script, you must adhere to             platform requirements that apply to custom SQL scripts, such as the support of             multitenancy and the support of SQL dialects of the target database management systems.             If you use the approach described in this topic, during the publication of the             customization project, the platform generates SQL statements to alter the existing table             so that this statement conforms to all platform requirements.  To Add a Custom Column to an Existing Table Open the customization project in the  Customization Project Editor. (See  To Open a Project for      details.) Click  Database Scripts  in the navigation pane to open the Database Scripts      page. On the page toolbar, click  Add Custom Column to Table . In the  Add Custom Column to Table  dialog box, which opens, specify the table      to which the column should be added and the name and type of the new column, and click        OK .  Acumatica Customization             Platform adds the columns to the customization project as a  Table  item. ]]></column>
		</row>
		<row PageID="738485ba-ccb9-42a3-9daa-c1df69ea246f" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="049f8d96-f0d3-626f-7e3b-f4a1081a634f" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You use the Database Scripts page of the Customization Project Editor to increase the size of a text column of an existing table of Acumatica ERP. ((({S:Warn}If you publish the customization project, the changes remain in the Acumatica ERP database even if you unpublish the project.
)))
==To Increase the Size of a Column==[anchor|#_c3ed7292-a9f2-4ba3-939f-4c9e91a8b658]
#Open the customization project in the Customization Project Editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)
#In the navigation pane, click '''Database Scripts''' to open the Database Scripts page.
#On the page toolbar, click '''Add''' > '''Column Length Increase'''.
#In the '''Column Length Increase''' dialog box, which opens, specify the following:
##The table in which the column should be altered ('''Table''').
##The name of the column that should be altered ('''Field Name''').
##:((({S:Warn}Only text fields are available in the list because only their length can be changed.
)))
##:The '''Data Type''' field displays the current type and size of the specified column.
##The new length of the text field ('''New Length''').
#Click '''OK''' to save your changes and exit the dialog box.

 Acumatica Customization             Platform creates a script to alter the column in the application database. You can see the change entry on the Database Scripts page with the '''Custom Columns''' type.
==Related Articles==
*[HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_TableEditor|Table Editor]]]></column>
			<column name="PlainText"><![CDATA[To Increase the Size of a Column in an Existing Table You use the Database Scripts page of the  Customization Project Editor to increase the size of a text column of an existing table of  Acumatica ERP.  If you publish the customization project, the changes remain in the                              Acumatica ERP database even if you unpublish the project. To Increase the Size of a Column Open the customization project in the  Customization Project Editor. (See  To Open a Project for details.) In the navigation pane, click  Database Scripts  to open the Database                         Scripts page. On the page toolbar, click  Add Column Length Increase . In the  Column Length Increase  dialog box, which opens, specify the following: The table in which the column should be altered ( Table ). The name of the column that should be altered ( Field Name ). Only                                     text fields are available in the list because only their length                                     can be changed. The  Data Type                                      field displays the current type and size of the specified                                     column. The new length of the text field ( New Length ). Click  OK  to save your changes and exit the dialog box.  Acumatica Customization             Platform creates a script to alter the column in the application database. You can see                     the change entry on the Database Scripts page with the  Custom                         Columns  type. ]]></column>
		</row>
		<row PageID="cb776a15-1661-48a4-994c-1e91412d2227" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="246766bf-83df-986b-20c4-dcc4ab149008" RecordSourceID="22377">
			<column name="Content"><![CDATA[[anchor|#_377f2d16-4bb2-4e2b-9182-b3e5bce26d02]
With the platform, you can add to a customization project an SQL script to be executed during the publication of the project. However, we recommend that you avoid doing this. ((({S:Hint}A possible result of a custom SQL script is the loss of the integrity and consistency of the application data.
)))If you do add a custom SQL script, you must adhere to the following requirements for the script:[anchor|#_5eac3d0c-d214-493f-af76-744c71c06631]
*Because Acumatica ERP supports multitenancy, you must create an SQL script that correctly creates a database object that properly specifies and uses the company mask.
*You must correctly specify the attributes for the script so that the script can be executed on the target database servers: MySQL Server, Microsoft SQL Server, or both. For details about attributes, see [HelpRoot_Dev_Customization\CG_GL_Items_DBScripts_Adding_Attr|Using the SQL Script Attributes].

==To Add a Custom SQL Script to a Customization Project==[anchor|#_715f2f9f-ceec-41f3-a44a-a535889ff65f]
#Prepare, debug, and test the SQL script with a database administration tool, such as SQL Server Management Studio. (See [HelpRoot_Dev_Customization\CG_GL_Items_DBScripts_AddingCustScript_HowCreate|Creating a Custom SQL Script] for details.)
#Open the customization project in the Customization Project Editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)
#Click '''Database Scripts''' in the navigation pane to open the Database Scripts page.
#On the page toolbar, click '''Add''' > '''Script'''.
#In the '''Script Name''' box of the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_SQLScriptDlg|SQL Script Editor], which opens, specify the name of the script to be used as the object name of the customization item. (The name can contain only English characters and digits.)
#Optional: In the '''Priority''' box, specify the priority of the script. By default, the priority is 0.
#For each batch that you want to add, do the following:
##Click '''Specify Database Engine''', and in the '''Attribute''' box, select one of the following options:
##*''Skip Batch on MySQL Server'', which adds the {{--[mysql: Skip]}} attribute to the end of the text in the text area of the script editor.
##*''Skip Batch on Microsoft SQL Server'', which adds the {{--[mssql: Skip]}} attribute to the end of the text in the text area of the script editor.
##*''Use Interpreter'', which adds the {{--[VmSql]}} attribute to the end of the text in the text area of the script editor.
##*:For more information on the database script attributes, see [HelpRoot_Dev_Customization\CG_GL_Items_DBScripts_Adding_Attr|Using the SQL Script Attributes].
##In the text area of the editor, below the added attribute, enter the SQL script.
#In the editor, click '''OK''' to add the script to the customization project.

If a custom script causes an error, the error message will appear during the publication process when the system executes the custom scripts.
==Related Articles==
*[HelpRoot_Dev_Customization\CG_GL_Items_DBScripts_AddingCustScript_HowCreate|Creating a Custom SQL Script]
*[HelpRoot_Dev_Customization\CG_GL_Items_DBScripts_Adding_Attr|Using the SQL Script Attributes]
*[HelpRoot_Dev_Customization\CG_GL_Items_DBScripts_WritingCustSQL|Writing Custom SQL Scripts for Interpretation]]]></column>
			<column name="PlainText"><![CDATA[To Add a Custom SQL Script to a Project With the platform, you can add to a customization             project an SQL script to be executed during the publication of the project. However, we             recommend that you avoid doing this.  A possible result of a custom                 SQL script is the loss of the integrity and consistency of the application                 data. If you do add a custom SQL script, you must adhere to the following             requirements for the script: Because  Acumatica ERP supports multitenancy, you must create an SQL script that correctly creates a                     database object that properly specifies and uses the company mask. You must correctly specify the attributes for the script so that the script can                     be executed on the target database servers: MySQL Server, Microsoft SQL Server,                     or both. For details about attributes, see  Using the SQL Script Attributes. To Add a Custom SQL Script to a Customization Project Prepare, debug, and test the SQL script with a database administration tool,                         such as SQL Server Management Studio. (See  Creating a Custom SQL Script for details.) Open the customization project in the  Customization Project Editor. (See  To Open a Project for                         details.) Click  Database Scripts  in the navigation pane to open the                         Database Scripts page. On the page toolbar, click  Add Script . In the  Script Name  box of the  SQL Script Editor, which opens, specify the name of the script to be used as the object                         name of the customization item. (The name can contain only English                         characters and digits.) Optional: In the  Priority  box, specify the priority                         of the script. By default, the priority is 0. For each batch that you want to add, do the following: Click  Specify Database Engine , and in the                                      Attribute  box, select one of the                                 following options: Skip Batch on MySQL Server , which adds the                                              --[mysql: Skip]  attribute to the end of                                         the text in the text area of the script editor. Skip Batch on Microsoft SQL Server , which adds the                                              --[mssql: Skip]  attribute to the end of                                         the text in the text area of the script editor. Use Interpreter , which adds the                                              --[VmSql]  attribute to the end of the                                         text in the text area of the script editor. For more                                             information on the database script attributes, see  Using the SQL Script Attributes. In the text area of the editor, below the added attribute, enter the                                 SQL script. In the editor, click  OK  to add the script to the                         customization project. If a custom script causes an error, the error message will appear during the                     publication process when the system executes the custom scripts. ]]></column>
		</row>
		<row PageID="416914ca-25c9-4ab7-8d31-fe5c02d9a6aa" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="b0ccefb9-146f-c050-eb5a-3daa7101a053" RecordSourceID="22377">
			<column name="Content"><![CDATA[
To create database objects other than custom tables or to insert data into tables, you can add custom SQL scripts to a customization project. When you publish the project, the Acumatica Customization             Platform executes the custom SQL scripts added to the project.((({S:Warn}When you publish a customization project that contains a database script, the Acumatica Customization             Platform executes the script during the first publication. The platform keeps information about each script that has been executed at least once and has not since been changed in the database, and omits the repeated execution of these scripts for optimization purposes. If you run the '''Publish with Cleanup''' operation, the platform cleans all the information about previously executed scripts of the customization project, and executes this script once more while publishing the project. See [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor] for details.
))){br}

As you write scripts, keep the following guidelines in mind:[anchor|#ul_cbg_kht_hq]
*You have to use a naming convention that provides unique names for your custom objects so that they do not have the same as existing database objects do.
*A script can be executed multiple times. Therefore, in the script, you have to check whether an object already exists before you create a new one; otherwise, an error will occur when the script runs on a database that already contains the object.
{br}

You can prepare the script directly in the dialect of the target database or prepare the script for on-the-fly interpretation by Microsoft SQL Server or MySQL, depending on the target database. So you have the following options:[anchor|#ul_zqv_txd_hq]
*'''Insert the SQL script prepared for the target database, which is Microsoft SQL or MySQL''': During the publication of the project, the Acumatica Customization             Platform executes the script as it is. You can use all the functionality of the SQL dialect of the target database, but this script causes the customization project to depend on the database management system that hosts the database of Acumatica ERP. 
*:You can use SQL script attributes to skip the script batch execution on a database management system. See [HelpRoot_Dev_Customization\CG_GL_Items_DBScripts_Adding_Attr|Using the SQL Script Attributes] for details.
*'''Insert the SQL script with support for interpretation for the target database''': Prepare the script in the Microsoft SQL Server dialect, and insert the script with the {{--[VmSql]}} attribute. During the publication of the project, the system analyzes the script, generates the corresponding SQL statements in the dialect of the target database, and executes the statements. A customization project that includes only these scripts remains independent from the database management system that hosts the database of Acumatica ERP. However, the interpreter supports a relatively limited set of SQL language elements. See [HelpRoot_Dev_Customization\CG_GL_Items_DBScripts_WritingCustSQL|Writing Custom SQL Scripts for Interpretation] for details.
*:In the script for interpretation, you have to place the {{--[VmSql]}} attribute before each batch of the SQL script to be interpreted.
]]></column>
			<column name="PlainText"><![CDATA[Creating a Custom SQL Script To create database objects other than custom tables or to insert data into tables, you can add       custom SQL scripts to a customization project. When you publish the project, the  Acumatica Customization             Platform executes the custom SQL scripts added to the project. When you publish a customization         project that contains a database script, the  Acumatica Customization             Platform executes the script during the first publication. The platform keeps information about         each script that has been executed at least once and has not since been changed in the         database, and omits the repeated execution of these scripts for optimization purposes. If         you run the  Publish with Cleanup  operation, the platform cleans all         the information about previously executed scripts of the customization project, and executes         this script once more while publishing the project. See   Customization Project                         Editor for details. As you write scripts, keep the following guidelines in mind: You have to use a naming convention that provides unique names for your custom objects           so that they do not have the same as existing database objects do. A script can be executed multiple times. Therefore, in the script, you have to check           whether an object already exists before you create a new one; otherwise, an error will           occur when the script runs on a database that already contains the object. You can prepare the script directly in the dialect of the target database or prepare the script       for on-the-fly interpretation by Microsoft SQL Server or MySQL, depending on the target       database. So you have the following options: Insert the SQL script prepared for the target database, which is Microsoft SQL or             MySQL : During the publication of the project, the  Acumatica Customization             Platform executes the script as it is. You can use all the functionality of the SQL dialect of           the target database, but this script causes the customization project to depend on the           database management system that hosts the database of  Acumatica ERP.  You can use SQL script attributes to skip the script batch execution on a database             management system. See  Using the SQL Script Attributes for             details. Insert the SQL script with support for interpretation for the target database :           Prepare the script in the Microsoft SQL Server dialect, and insert the script with the              --[VmSql]  attribute. During the publication of the project, the system           analyzes the script, generates the corresponding SQL statements in the dialect of the           target database, and executes the statements. A customization project that includes only           these scripts remains independent from the database management system that hosts the           database of  Acumatica ERP. However, the interpreter supports a relatively limited set of SQL language elements.           See  Writing Custom SQL Scripts for Interpretation for details. In the script             for interpretation, you have to place the  --[VmSql]  attribute before             each batch of the SQL script to be interpreted. ]]></column>
		</row>
		<row PageID="a59f0325-9639-437a-bc7a-f4f645f93f0e" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="197308f9-400e-6539-8951-3c8d29310b06" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can decorate a batch of an SQL script with various attributes to control the batch execution.((({S:Warn}An SQL batch is a portion of an SQL script located between two <tt>GO</tt> statements.
))){br}

Attributes are based on the line preceding the batch in the following format.{{{{--[Attribute(Parameter1 = Value1, Parameter2 = Value2)]
}}}}{br}

Also, it is possible to specify that an attribute is effective only when the script is executed on a particular platform (MySQL Server or Microsoft SQL Server). To achieve this, add to the beginning of the attribute name a short database platform name followed by a colon, as follows.{br}

{{{{--[mysql: Attribute(Parameter1 = Value1, Parameter2 = Value2)]
--[mssql: Attribute(Parameter1 = Value1, Parameter2 = Value2)] 
}}}}{br}

The currently used platform names are ''azure'', ''mssql'', and ''mysql''.{br}

We recommend that you use the following attributes for batches in SQL scripts.[anchor|#_1918842b-9eb7-456c-9e55-8401fda6dace]
{| class="checklist" | width="100%" 
|- 
!width="23%" ! Attribute
!width="33%" ! Description
!width="10%" ! Parameters
!width="33%" ! Examples
|- 
| <tt>Native</tt>
| The script batch will be executed against the database without any changes or attempts to parse and interpret it. You can use SQL clauses that are specific to the target platform.
| -
| {{--[mssql: Native]}}
|- 
| <tt>Skip</tt>
| A script batch can be skipped when the upgrade is being executed on a specific platform.
| -
| {{--[mysql: Skip]}}
|- 
| <tt>SmartExecute</tt>
| The whole batch will be executed once for every tenant. (Inter-tenant visibility mechanisms (<tt>CompanyMask</tt>) are used.) You write your code in T-SQL, and it will be passed to the interpreter.
| -
| {{--[SmartExecute]}}
|- 
| <tt>VmSql</tt>
| The decorated script batch will be interpreted as T-SQL, and a corresponding script for the current database engine will be generated and executed on the database. The number of correctly translated clauses is a limited subset of T-SQL.
| -
| {{--[VmSql]}}
|}
You can create an SQL script that is executed properly on the MySQL database platform and Microsoft SQL database platform, as shown in the example below. This script contains two batches and demonstrates how to use SQL script attributes to control the execution of the batches.{{{{--[mysql: Skip]
--[mssql: Native]
IF OBJECT_ID('dbo.View1', 'V') IS NOT NULL DROP VIEW [View1];
CREATE VIEW [View1] AS (SELECT TOP 10 * FROM [AccountClass] )
GO

--[mysql: Native]
--[mssql: Skip]
DROP VIEW IF EXISTS `View1`;
CREATE VIEW `View1` AS (SELECT * FROM `AccountClass` LIMIT 10 )
GO
}}}}]]></column>
			<column name="PlainText"><![CDATA[Using the SQL Script Attributes You can decorate a batch of an SQL script with various attributes to control the batch     execution. An SQL batch is a portion of an SQL script located between two       GO  statements. Attributes are based on the line preceding the batch in the following    format. --[Attribute(Parameter1 = Value1, Parameter2 = Value2)] Also, it is possible to specify that an attribute is effective only when the script is executed    on a particular platform (MySQL Server or Microsoft SQL Server). To achieve this, add to the    beginning of the attribute name a short database platform name followed by a colon, as    follows. --[mysql: Attribute(Parameter1 = Value1, Parameter2 = Value2)]
--[mssql: Attribute(Parameter1 = Value1, Parameter2 = Value2)]  The currently used platform names are  azure ,  mssql , and  mysql . We recommend that you use the following attributes for batches in SQL scripts. Attribute Description Parameters Examples Native The script batch will be executed against the database without any changes or attempts        to parse and interpret it. You can use SQL clauses that are specific to the target        platform. - --[mssql: Native] Skip A script batch can be skipped when the upgrade is being executed on a specific        platform. - --[mysql: Skip] SmartExecute The whole batch will be executed once for every tenant. (Inter-tenant visibility        mechanisms ( CompanyMask ) are used.) You write your code in T-SQL, and it        will be passed to the interpreter. - --[SmartExecute] VmSql The decorated script batch will be interpreted as T-SQL, and a corresponding script for        the current database engine will be generated and executed on the database. The number of        correctly translated clauses is a limited subset of T-SQL. - --[VmSql] You can create an SQL script that is executed properly on the MySQL database platform and    Microsoft SQL database platform, as shown in the example below. This script contains two batches    and demonstrates how to use SQL script attributes to control the execution of the    batches. --[mysql: Skip]
--[mssql: Native]
IF OBJECT_ID('dbo.View1', 'V') IS NOT NULL DROP VIEW [View1];
CREATE VIEW [View1] AS (SELECT TOP 10 * FROM [AccountClass] )
GO

--[mysql: Native]
--[mssql: Skip]
DROP VIEW IF EXISTS `View1`;
CREATE VIEW `View1` AS (SELECT * FROM `AccountClass` LIMIT 10 )
GO ]]></column>
		</row>
		<row PageID="0d890897-5b11-41e6-a6bc-c7eceb27c979" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="bfd5132f-f52b-acf1-9d60-67beb3052082" RecordSourceID="22377">
			<column name="Content"><![CDATA[
In custom scripts for interpretation, you can use the data types and SQL statements that are listed below.
==Data Types==
The following data types of Microsoft SQL Server are supported for interpretation:[anchor|#ul_anx_vbp_3q]
*<tt>bit</tt>
* <tt>char</tt>, <tt>nchar</tt>, <tt>varchar</tt>, and <tt>nvarchar</tt>
* <tt>smallint</tt>, <tt>int</tt>, and <tt>bigint</tt>
* <tt>date</tt>, <tt>datetime</tt>, and <tt>datetime2</tt>
* <tt>uniqueidentifier</tt>
* <tt>decimal</tt> and <tt>double</tt>
{br}

The following data types of MySQL Server are supported for interpretation:[anchor|#_c8ffdff4-42a0-4f05-8b15-c397d578e79a]
*<tt>binary</tt>, <tt>varbinary</tt>, and <tt>longblob</tt>
* <tt>char</tt>, <tt>varchar</tt>, and <tt>longtext</tt>
* <tt>tinyint</tt>, <tt>smallint</tt>, <tt>int</tt>, and <tt>bigint</tt>
* <tt>timestamp</tt> and <tt>datetime</tt>
* <tt>decimal</tt> and <tt>double</tt>

==SQL Statements==
If you prepare a script for interpretation, you can use the following elements of Transact-SQL:[anchor|#ul_tgp_jnj_hq]
*<tt>CREATE</tt>, <tt>ALTER</tt>, and <tt>DROP</tt> statements
*<tt>SELECT</tt>, <tt>INSERT</tt>, <tt>UPDATE</tt>, and <tt>DELETE</tt> statements with <tt>WHERE</tt> clauses
*Logical operators: <tt>NOT</tt>, <tt>AND</tt>, <tt>OR</tt>, and <tt>EXISTS</tt>
*Control-of-flow keywords: <tt>IF...ELSE</tt> and <tt>BEGIN...END</tt>
*Expressions: <tt>CASE</tt>, <tt>COALESCE</tt>, and <tt>NULLIF</tt>
*String functions: <tt>LEN</tt>, <tt>CONCAT</tt>, <tt>REPLACE</tt>, <tt>CHAR</tt>, <tt>RTRIM</tt>, <tt>LTRIM</tt>, <tt>SUBSTRING</tt>, <tt>UPPER</tt>, <tt>LOWER</tt>, <tt>REPLICATE</tt>, and <tt>DATALENGTH</tt>
*Arithmetic operators: <tt>+</tt>, <tt>—</tt>, <tt>&#42;</tt>, and <tt>/</tt>
*Mathematical functions: <tt>CEILING</tt>, <tt>ROUND</tt>, and <tt>FLOOR</tt>
*Date and time functions: <tt>GETDATE</tt>, <tt>DAYADD</tt>, <tt>DATEPART</tt>, and <tt>DATALENGTH</tt>
*Aggregate functions: <tt>ABS</tt>, <tt>MIN</tt>, <tt>MAX</tt>, <tt>SUM</tt>, and <tt>COUNT</tt>
*Conversion functions: <tt>CAST</tt> and <tt>CONVERT</tt>
*System functions: <tt>ISNULL</tt> and <tt>NEWID</tt>
*System variables: <tt>@@ROWCOUNT</tt>, <tt>@@IDENTITY</tt>, and <tt>@@FETCH&#95;STATUS</tt>
*Cryptographic functions: <tt>HASHBYTES</tt> with MD5 only
*Local variables
*Cursors
*Scalar subselect
((({S:Warn}The <tt>EXISTS</tt> operator can be applied to the <tt>sys.tables</tt>, <tt>sys.column</tt>, and <tt>sys.indexes</tt> objects. The <tt>DATALENGTH</tt> function can be applied to a string or binary object, and the function returns the object length in bytes.
)))
==VmSQL Variables==
In the script for interpretation, you can use the <tt>@@@is&#95;mssql</tt>, <tt>@@@is&#95;azure</tt>, and <tt>@@@is&#95;mysql</tt> variables. The following table contains the values of these variables for Microsoft SQL Server, Microsoft Azure SQL Database, and MySQL Server.[anchor|#_d9c12c9b-ae2b-4d0e-b815-ccd7b22ee620]
{| class="checklist" | width="100%" 
|- 
!width="40%" ! SQL Server
!width="20%" ! <tt>@@@is&#95;mssql</tt>
!width="20%" !  <tt>@@@is&#95;azure</tt>
!width="20%" !  <tt>@@@is&#95;mysql</tt>
|- 
| MS SQL Server
| 1
| 0
| 0
|- 
| MS Azure SQL Database
| 1
| 1
| 0
|- 
| MySQL Server
| 0
| 0
| 1
|}
==Error Messages==
Unsupported data types cause the following error: ''Cannot figure out DbType for SqlDataTypeOption''.{br}

Unsupported elements can cause the following errors:[anchor|#ul_kqm_cq4_3q]
*''Date interval ... not recognized'': This indicates that the dates are specified in an unknown format in the functions that work with datetime formats.
*''Unknown algorithm in hashbytes ... not implemented'': If you get this error, an unknown algorithm is specified in the <tt>HASHBYTES</tt> function. Currently, the interpreter supports MD5 only.
*''Function ... not implemented'': This means that the script contains an unknown function that cannot be interpreted.
]]></column>
			<column name="PlainText"><![CDATA[Writing Custom SQL Scripts for Interpretation In custom scripts for interpretation, you can use the data types and SQL statements that are    listed below. Data Types The following data types of Microsoft SQL Server are supported for interpretation: bit char ,  nchar ,  varchar , and                nvarchar smallint ,  int , and              bigint date ,  datetime , and              datetime2 uniqueidentifier decimal  and  double The following data types of MySQL Server are supported for interpretation: binary ,  varbinary , and                longblob char ,  varchar , and              longtext tinyint ,  smallint ,  int , and                bigint timestamp  and  datetime decimal  and  double SQL Statements If you prepare a script for interpretation, you can use the following elements of           Transact-SQL: CREATE ,  ALTER , and  DROP              statements SELECT ,  INSERT ,  UPDATE , and                DELETE  statements with  WHERE  clauses Logical operators:  NOT ,  AND ,                OR , and  EXISTS Control-of-flow keywords:  IF...ELSE  and                BEGIN...END Expressions:  CASE ,  COALESCE , and                NULLIF String functions:  LEN ,  CONCAT ,                REPLACE ,  CHAR ,  RTRIM ,                LTRIM ,  SUBSTRING ,  UPPER ,                LOWER ,  REPLICATE , and                DATALENGTH Arithmetic operators:  + ,  — ,              * , and  / Mathematical functions:  CEILING ,  ROUND , and                FLOOR Date and time functions:  GETDATE ,  DAYADD ,                DATEPART , and  DATALENGTH Aggregate functions:  ABS ,  MIN ,                MAX ,  SUM , and  COUNT Conversion functions:  CAST  and  CONVERT System functions:  ISNULL  and  NEWID System variables:  @@ROWCOUNT ,  @@IDENTITY , and                @@FETCH_STATUS Cryptographic functions:  HASHBYTES  with MD5 only Local variables Cursors Scalar subselect The  EXISTS  operator can be applied to the            sys.tables ,  sys.column , and            sys.indexes  objects. The  DATALENGTH  function can be         applied to a string or binary object, and the function returns the object length in         bytes. VmSQL Variables In the script for interpretation, you can use the  @@@is_mssql ,            @@@is_azure , and  @@@is_mysql  variables. The         following table contains the values of these variables for Microsoft SQL Server, Microsoft         Azure SQL Database, and MySQL Server. SQL Server @@@is_mssql @@@is_azure @@@is_mysql MS SQL Server 1 0 0 MS Azure SQL Database 1 1 0 MySQL Server 0 0 1 Error Messages Unsupported data types cause the following error:  Cannot figure out DbType for           SqlDataTypeOption . Unsupported elements can cause the following errors: Date interval ... not recognized : This indicates that the dates are specified             in an unknown format in the functions that work with datetime formats. Unknown algorithm in hashbytes ... not implemented : If you get this error, an             unknown algorithm is specified in the  HASHBYTES  function. Currently,             the interpreter supports MD5 only. Function ... not implemented : This means that the script contains an unknown             function that cannot be interpreted. ]]></column>
		</row>
		<row PageID="e715859d-eca3-43e3-bbc8-08d5cce0648e" Language="en-US" PageRevisionID="1" Content="&#xA;You can edit a custom SQL script once it is added to a customization project. To do this, perform the following actions:[anchor|#ol_rkv_qxv_ww]&#xA;#Open the customization project in the Customization Project Editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)&#xA;#Click '''Database Scripts''' in the navigation pane to open the Database Scripts page.&#xA;#In the table on the page, click the row of the script to be edited.&#xA;#On the page toolbar, click &#xA;#:[image:CustomizationPlatform/images/Icons_Form_Grid_Views.png] ('''Edit''') to open the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_SQLScriptDlg|SQL Script Editor] for the selected item.&#xA;#:((({S:Warn}You can click the name of a ''Script'' item in the '''Object Name''' column of the table to open the SQL Script Editor for the item.&#xA;)))&#xA;" PlainText="To Edit a Custom SQL Script You can edit a custom SQL script once it is added to a customization project. To do this,         perform the following actions: Open the customization project in the  Customization Project Editor. (See  To Open a Project for details.) Click  Database Scripts  in the navigation pane to open the Database             Scripts page. In the table on the page, click the row of the script to be edited. On the page toolbar, click   ( Edit ) to open the                SQL Script Editor for the selected               item. You can click the name of a  Script  item in the  Object                 Name  column of the table to open the SQL Script Editor for the               item. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="70a2662b-1f0a-eab5-ac70-224635a30ff0" RecordSourceID="22377" />
		<row PageID="88d5fc38-5a65-4138-a00e-ddd9086b9cb9" Language="en-US" PageRevisionID="1" Content="&#xA;To delete an ''Sql'' or ''Table'' item from a customization project, perform the following actions:[anchor|#ol_rkv_qxv_ww]&#xA;#Open the customization project in the Customization Project Editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)&#xA;#Click '''Database Scripts''' in the navigation pane to open the Database Scripts page.&#xA;#In the table on the page, click the row of the item to be deleted.&#xA;#On the page toolbar, click &#xA;#:[image:CustomizationPlatform/images/Icons_Delete_Row.png] ('''Delete Row''').&#xA;{br}&#xA;&#xA;The item is removed from the customization project. The database objects that have been created or altered if you have published the customization project remain in the database." PlainText="To Delete an Sql or Table Item From a Project To delete an  Sql  or  Table  item from a customization project, perform the         following actions: Open the customization project in the  Customization Project Editor. (See  To Open a Project for details.) Click  Database Scripts  in the navigation pane to open the Database             Scripts page. In the table on the page, click the row of the item to be deleted. On the page toolbar, click   ( Delete Row ). The item is removed from the customization project. The database objects that have been         created or altered if you have published the customization project remain in the         database. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="6de8b73c-7d25-b8df-11e2-08e5c2388f79" RecordSourceID="22377" />
		<row PageID="1c8e3964-1e9e-469e-8fa5-fe72010d481c" Language="en-US" PageRevisionID="1" PlainText="System Locales You use the System Locales page of the   Customization Project                         Editor to manage          Locale  items in the customization project. A  Locale  item contains the         data set of a system locale, which is a set of parameters that defines the language and         other local preferences—such as how to display numbers, dates, and times in the user         interface—for a group of users. The System Locales page displays the list of the system locales that have been added to the       customization project.  On the page, you can perform various operations, as described in the following topics: To Add a System Locale to a ProjectTo Delete a System Locale from a ProjectTo Update a Custom System Locale in a ProjectTo Navigate to the System Locales Form" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="874700a4-d475-4261-6ec2-ba29ceecb55b" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You use the System Locales page of the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor] to manage ''Locale'' items in the customization project.((({S:Warn}A ''Locale'' item contains the data set of a system locale, which is a set of parameters that defines the language and other local preferences—such as how to display numbers, dates, and times in the user interface—for a group of users.
))){br}

The System Locales page displays the list of the system locales that have been added to the customization project. {br}

On the page, you can perform various operations, as described in the following topics:[anchor|#ul_mmd_kgc_ww]
*[HelpRoot_Dev_Customization\CG_GL_Items_Translations_Adding|To Add a System Locale to a Project]
*[HelpRoot_Dev_Customization\CG_GL_Items_Translations_Deleting|To Delete a System Locale from a Project]
*[HelpRoot_Dev_Customization\CG_GL_Items_Translations_Updating|To Update a Custom System Locale in a Project]
*[HelpRoot_Dev_Customization\CG_GL_Items_Translations_Redirecting|To Navigate to the System Locales Form]
]]></column>
		</row>
		<row PageID="2db2cd74-3dca-4e65-9c1c-fcaed25822fe" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="530f5cb5-f7b6-48b1-f043-83fe968c1e78" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can add a system locale to a customization project. To do this, perform the following actions:[anchor|#ol_qw5_2nt_tw]
#Open the customization project in the Customization Project Editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)
#Click '''System Locales''' in the navigation pane to open the System Locales page.
#On the page toolbar, click '''Add New Record''' (+), as shown in the screenshot below.
#In the list of system locales in the '''Add Locale''' dialog box, which opens, select the check box for each locale that you want to include in the project.
#:((({S:Warn}The '''Add Locale''' dialog box displays all the system locales that exist in your instance of Acumatica ERP. You can select multiple system locales to add them to the project simultaneously.
)))
#In the dialog box, click '''OK''' to add each selected locale to the page table.
#On the page toolbar, click '''Save''' to save the changes to the customization project.[anchor|#image_dt1_j1r_ls][image:CustomizationPlatform/images/CG_GL_Items_Translations_Adding_01.png|popup|Adding the system locale to the customization project|406px]
{br}

The system adds to the project the data from the database for each selected system locale. You can view each new ''Locale'' item in the Project Items table of the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_XML_Item|Item XML Editor], as shown in the following screenshot.[anchor|#fig_dnk_gwc_sr][anchor|#_80a3653e-6ee0-4025-8f0a-56485a701ffe][image:CustomizationPlatform/images/CG_GL_Items_Translations_02.png|popup|Viewing the XML code of the ''Locale'' item included in the project|434px]]]></column>
			<column name="PlainText"><![CDATA[To Add a System Locale to a Project You can add a system locale to a customization project. To do this, perform the following     actions: Open the customization project in the  Customization Project Editor. (See  To Open a Project for details.) Click  System Locales  in the navigation pane to open the System           Locales page. On the page toolbar, click  Add New Record  (+), as shown in the      screenshot below. In the list of system locales in the  Add Locale  dialog box, which           opens, select the check box for each locale that you want to include in the             project. The  Add Locale  dialog box displays all the system             locales that exist in your instance of  Acumatica ERP. You can select multiple system locales to add them to the project             simultaneously. In the dialog box, click  OK  to add each selected locale to the page           table. On the page toolbar, click  Save  to save the changes to the      customization project. Adding the system locale to the customization project The system adds to the project the data from the database for each selected system locale. You       can view each new  Locale  item in the Project Items table of the  Item XML Editor, as shown in the following screenshot. Viewing the XML code of the  Locale  item included in the project ]]></column>
		</row>
		<row PageID="f77ced1d-bbf7-4a1f-b910-d1c61b689d01" Language="en-US" PageRevisionID="1" Content="&#xA;To remove a ''Locale'' item from a project, perform the following actions:[anchor|#ol_qw5_2nt_tw]&#xA;#Open the customization project in the Customization Project Editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)&#xA;#Click '''System Locales''' in the navigation pane to open the System Locales page.&#xA;#In the page table, click the item to be deleted.&#xA;#On the page toolbar, click '''Delete Row''' (X).&#xA;#On the page toolbar, click '''Save''' to save the changes to the customization project.&#xA;{br}&#xA;&#xA;If you delete a ''Locale'' item from the project, the system locale remains in the system unless you delete the locale by using the [HelpRoot_FormReference\SM_20_05_50|System Locales] ([~/?ScreenId=SM200550|SM200550]) form." PlainText="To Delete a System Locale from a Project To remove a  Locale  item from a project, perform the following actions: Open the customization project in the  Customization Project Editor. (See  To Open a Project for details.) Click  System Locales  in the navigation pane to open the System           Locales page. In the page table, click the item to be deleted. On the page toolbar, click  Delete Row  (X). On the page toolbar, click  Save  to save the changes to the           customization project. If you delete a  Locale  item from the project, the system locale remains in the system       unless you delete the locale by using the   ([~/?ScreenId=SM200550|SM200550]) System Locales (SM200550)       form. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="bd254a6f-1b8f-fc4b-688f-c4c42e02c438" RecordSourceID="22377" />
		<row PageID="7cd1251d-16f4-4f28-a739-334a6faf72e2" Language="en-US" PageRevisionID="1" Content="&#xA;If you have used the [HelpRoot_FormReference\SM_20_05_50|System Locales] ([~/?ScreenId=SM200550|SM200550]) form to change a system locale included in a customization project, you have to update the appropriate item in the project. To do this, perform the following actions:[anchor|#ol_qw5_2nt_tw]&#xA;#Open the customization project in the Customization Project Editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)&#xA;#Click '''System Locales''' in the navigation pane to open the System Locales page.&#xA;#On the page toolbar, click '''Reload From Database'''.&#xA;{br}&#xA;&#xA;The platform updates all the ''Locale'' items of the project by using the appropriate data from the database." PlainText="To Update a Custom System Locale in a Project If you have used the   ([~/?ScreenId=SM200550|SM200550]) System Locales (SM200550)       form to change a system locale included in a customization project, you have to update the       appropriate item in the project. To do this, perform the following actions: Open the customization project in the  Customization Project Editor. (See  To Open a Project for details.) Click  System Locales  in the navigation pane to open the System           Locales page. On the page toolbar, click  Reload From Database . The platform updates all the  Locale  items of the project by using the appropriate data       from the database. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="e17458df-c840-90fc-c012-880797484ae5" RecordSourceID="22377" />
		<row PageID="790dbfc5-aee2-4705-92ac-5fef8d588093" Language="en-US" PageRevisionID="1" Content="&#xA;You might need to add a system locale to Acumatica ERP during customization. To manage system locales in Acumatica ERP, you use the [HelpRoot_FormReference\SM_20_05_50|System Locales] ([~/?ScreenId=SM200550|SM200550]) form.{br}&#xA;&#xA;In the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor], to open the [HelpRoot_FormReference\SM_20_05_50|System Locales] form, perform the following actions:[anchor|#ol_qw5_2nt_tw]&#xA;#Click '''System Locales''' in the navigation pane to open the System Locales page of the editor.&#xA;#On the page toolbar, click '''Manage Locales'''.&#xA;{br}&#xA;&#xA;As soon as you add a system locale to the system on the [HelpRoot_FormReference\SM_20_05_50|System Locales] form, you can add the locale as a ''Locale'' item to the customization project. For more information about system locales, see [HelpRoot_FormReference\SM_20_05_50|System Locales] in the User Guide." PlainText="To Navigate to the System Locales Form You might need to add a system locale to  Acumatica ERP    during customization. To manage system locales in  Acumatica ERP,    you use the   ([~/?ScreenId=SM200550|SM200550]) System Locales    (SM200550) form. In the   Customization Project                         Editor, to open the   ([~/?ScreenId=SM200550|SM200550]) System Locales form, perform the    following actions: Click  System Locales  in the navigation pane to open the System      Locales page of the editor. On the page toolbar, click  Manage Locales . As soon as you add a system locale to the system on the   ([~/?ScreenId=SM200550|SM200550]) System Locales form, you can add    the locale as a  Locale  item to the customization project. For more information about    system locales, see   ([~/?ScreenId=SM200550|SM200550]) System Locales in the User    Guide. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="2d1c91b8-99c8-34d4-0ce6-225003d14bfe" RecordSourceID="22377" />
		<row PageID="66b77217-fe2c-459a-a00d-3789b27d4dbb" Language="en-US" PageRevisionID="1" PlainText="Import and Export Scenarios You use the Import and Export Scenarios page of the   Customization Project                         Editor to manage  XportScenario  items in the       customization project. An  XportScenario  item contains the data set of a custom         export or import scenario used to perform data migration between a legacy application and            Acumatica ERP. The Import and Export Scenarios page displays the list of the integration scenarios that have       been added to the customization project. On the page, you can perform a variety of operations, including the following: To Add an Integration Scenario to a ProjectTo Delete an Integration Scenario from a ProjectTo Update an Integration Scenario in a ProjectTo Navigate to the Import Scenarios Form " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="99b874a7-c6f6-7cf3-1845-4d338a894f6e" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You use the Import and Export Scenarios page of the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor] to manage ''XportScenario'' items in the customization project.((({S:Warn}An ''XportScenario'' item contains the data set of a custom export or import scenario used to perform data migration between a legacy application and Acumatica ERP.
))){br}

The Import and Export Scenarios page displays the list of the integration scenarios that have been added to the customization project.{br}

On the page, you can perform a variety of operations, including the following:[anchor|#ul_mmd_kgc_ww]
*[HelpRoot_Dev_Customization\CG_GL_Items_IntScenarios_Adding|To Add an Integration Scenario to a Project]
*[HelpRoot_Dev_Customization\CG_GL_Items_IntScenarios_Deleting|To Delete an Integration Scenario from a Project]
*[HelpRoot_Dev_Customization\CG_GL_Items_IntScenarios_Updating|To Update an Integration Scenario in a Project]
*[HelpRoot_Dev_Customization\CG_GL_Items_IntScenarios_Redirecting|To Navigate to the Import Scenarios Form ]
]]></column>
		</row>
		<row PageID="6ce18c9d-2097-4cb3-b25a-083e75a212ea" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="306577a4-b51e-eb33-68d3-a4b47b2bede1" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can add a custom integration scenario to a customization project. To do this, perform the following actions:[anchor|#ol_qw5_2nt_tw]
#Open the customization project in the Customization Project Editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)
#Click '''Import/Export Scenarios''' in the navigation pane to open the Import and Export Scenarios page.
#On the page toolbar, click '''Add New Record''' (+), as shown in the screenshot below.
#In the list of integration scenarios in the '''Add Import or Export Scenario''' dialog box, which opens, select the check box for each scenario that you want to include in the project.
#:((({S:Warn}The '''Add Import or Export Scenario''' dialog box displays all the custom integration scenarios that exist in your instance of Acumatica ERP. You can select multiple integration scenarios to add them to the project simultaneously.
)))
#In the dialog box, click '''OK''' to add each selected integration scenario to the page table.
#On the page toolbar, click '''Save''' to save the changes to the customization project.[anchor|#image_dt1_j1r_ls][image:CustomizationPlatform/images/CG_GL_Items_IntScenarios_Adding_01.png|popup|Adding an integration scenario to the customization project|406px]
{br}

The system adds to the project the data from the database for each selected integration scenario. You can view each new ''XportScenario'' item in the Project Items table of the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_XML_Item|Item XML Editor], as shown in the following screenshot.[anchor|#fig_dnk_gwc_sr][anchor|#_10347612-037c-4a4b-a61d-72912bc101ea][image:CustomizationPlatform/images/CG_GL_Items_IntScenarios_Adding_02.png|popup|Viewing the XML code of the ''XportScenario'' item included in the project|407px]{br}

An ''XportScenario'' item contains all the data required for the integration scenario. Therefore, the item includes the data of the data provider.]]></column>
			<column name="PlainText"><![CDATA[To Add an Integration Scenario to a Project You can add a custom integration scenario to a customization project. To do this, perform the    following actions: Open the customization project in the  Customization Project Editor. (See  To Open a Project for details.) Click  Import/Export Scenarios  in the navigation pane to open the           Import and Export Scenarios page. On the page toolbar, click  Add New Record  (+), as shown in the      screenshot below. In the list of integration scenarios in the  Add Import or Export             Scenario  dialog box, which opens, select the check box for each scenario           that you want to include in the project. The  Add Import or Export               Scenario  dialog box displays all the custom integration scenarios that             exist in your instance of  Acumatica ERP. You can select multiple integration scenarios to add them to the project             simultaneously. In the dialog box, click  OK  to add each selected integration scenario           to the page table. On the page toolbar, click  Save  to save the changes to the      customization project. Adding an integration scenario to the customization project The system adds to the project the data from the database for each selected integration       scenario. You can view each new  XportScenario  item in the Project Items table of the          Item XML Editor, as shown in the following         screenshot. Viewing the XML code of the  XportScenario  item included in the project An  XportScenario  item contains all the data required for the integration scenario.       Therefore, the item includes the data of the data provider. ]]></column>
		</row>
		<row PageID="b088f20a-2948-4453-97ac-d2b929b26bed" Language="en-US" PageRevisionID="1" Content="&#xA;To remove an ''XportScenario'' item from a project, perform the following actions:[anchor|#ol_qw5_2nt_tw]&#xA;#Open the customization project in the Customization Project Editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)&#xA;#Click '''Import/Export Scenarios''' in the navigation pane to open the Import and Export Scenarios page.&#xA;#In the page table, click the item to be deleted.&#xA;#On the page toolbar, click '''Delete Row''' (X).&#xA;#On the page toolbar, click '''Save''' to save the changes to the customization project.&#xA;{br}&#xA;&#xA;If you delete an ''XportScenario'' item from the project, the integration scenario remains in the system unless you delete the scenario by using the [HelpRoot_FormReference\SM_20_60_25|Import Scenarios] ([~/?ScreenId=SM206025|SM206025]) form." PlainText="To Delete an Integration Scenario from a Project To remove an  XportScenario  item from a project, perform the following actions: Open the customization project in the  Customization Project Editor. (See  To Open a Project for details.) Click  Import/Export Scenarios  in the navigation pane to open the           Import and Export Scenarios page. In the page table, click the item to be deleted. On the page toolbar, click  Delete Row  (X). On the page toolbar, click  Save  to save the changes to the      customization project. If you delete an  XportScenario  item from the project, the integration scenario remains       in the system unless you delete the scenario by using the   ([~/?ScreenId=SM206025|SM206025]) Import Scenarios (SM206025) form. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="6a2d4d38-99dc-e1d4-24ee-4fc223fbc197" RecordSourceID="22377" />
		<row PageID="91594c05-c670-455d-af32-18dc45ba3a7c" Language="en-US" PageRevisionID="1" Content="&#xA;If you have used the [HelpRoot_FormReference\SM_20_60_25|Import Scenarios] ([~/?ScreenId=SM206025|SM206025]) form to change an integration scenario included in a customization project, you have to update the appropriate item in the project. To do this, perform the following actions:[anchor|#ol_qw5_2nt_tw]&#xA;#Open the customization project in the Customization Project Editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)&#xA;#Click '''Import/Export Scenarios''' in the navigation pane to open the Import and Export Scenarios page.&#xA;#On the page toolbar, click '''Reload From Database'''.&#xA;{br}&#xA;&#xA;The platform updates all the ''XportScenario'' items of the project by using the appropriate data from the database." PlainText="To Update an Integration Scenario in a Project If you have used the   ([~/?ScreenId=SM206025|SM206025]) Import Scenarios (SM206025) form to change       an integration scenario included in a customization project, you have to update the       appropriate item in the project. To do this, perform the following actions: Open the customization project in the  Customization Project Editor. (See  To Open a Project for details.) Click  Import/Export Scenarios  in the navigation pane to open the           Import and Export Scenarios page. On the page toolbar, click  Reload From Database . The platform updates all the  XportScenario  items of the project by using the appropriate    data from the database. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="0bfecef9-3de5-2796-bf6a-2d6d57b0724f" RecordSourceID="22377" />
		<row PageID="71699c6e-cce1-4e96-b604-84cc9ea9c736" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="37d716df-2eae-9268-9e1d-bd3fc84da34c" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You might need to add an import or export scenario to Acumatica ERP during customization. To manage import scenarios in Acumatica ERP, you use the [HelpRoot_FormReference\SM_20_60_25|Import Scenarios] ([~/?ScreenId=SM206025|SM206025]) form.{br}

In the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor], to open this form, perform the following actions:[anchor|#ol_qw5_2nt_tw]
#Select '''Import/Export Scenarios''' in the navigation pane to open the Import and Export Scenarios page.
#On the page toolbar, click '''Manage Scenarios'''.
{br}

To manage export scenarios in Acumatica ERP, you use the [HelpRoot_FormReference\SM_20_70_25|Export Scenarios] ([~/?ScreenId=SM207025|SM207025]) form.{br}

As soon as you add an integration scenario to the system on the [HelpRoot_FormReference\SM_20_60_25|Import Scenarios] or [HelpRoot_FormReference\SM_20_70_25|Export Scenarios] form, you can add the scenario as an ''XportScenario'' item to the customization project. For more information about integration scenarios, see the [HelpRoot_Integration\IS__mng_Data_Providers|Preparing Data for Import and Export by Using Scenarios] in the Integrations guide.]]></column>
			<column name="PlainText"><![CDATA[To Navigate to the Import Scenarios Form  You might need to add an import or export scenario to  Acumatica ERP during customization. To manage import scenarios in  Acumatica ERP, you use the   ([~/?ScreenId=SM206025|SM206025]) Import Scenarios (SM206025) form. In the   Customization Project                         Editor, to open this form, perform the following         actions: Select  Import/Export Scenarios  in the navigation pane to open the           Import and Export Scenarios page. On the page toolbar, click  Manage Scenarios . To manage export scenarios in  Acumatica ERP, you use the   ([~/?ScreenId=SM207025|SM207025]) Export Scenarios (SM207025) form. As soon as you add an integration scenario to the system on the   ([~/?ScreenId=SM206025|SM206025]) Import Scenarios or   ([~/?ScreenId=SM207025|SM207025]) Export Scenarios form,       you can add the scenario as an  XportScenario  item to the customization project. For       more information about integration scenarios, see the  Preparing Data for Import and Export by Using Scenarios in the Integrations guide. ]]></column>
		</row>
		<row PageID="5e509a16-c6f8-4d0f-b5c6-eb4b7a839c73" Language="en-US" PageRevisionID="1" PlainText="Shared Filters Users can create reusable filters, which are available on processing and inquiry forms in  Acumatica ERP, to filter the data in the table part of the form; these filters can be reused anytime       after creation. Reusable filters can be shared among all users of the system. You use the Shared Filters page of the   Customization Project                         Editor to manage          SharedFilter  items in the customization project. A  SharedFilter  item         contains the data set of a custom reusable shared filter created on a processing or inquiry         form of  Acumatica ERP. The Shared Filters page displays the list of the custom reusable shared filters that have been       added to the customization project.  On the page, you can perform several operations, as described in the following topics: To Add a Shared Filter to a ProjectTo Delete a Shared Filter from a ProjectTo Update a Shared Filter in a ProjectTo Navigate to the Filters Form " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="f89f7786-d4e2-5ca2-5fe3-ef51368f76d8" RecordSourceID="22377">
			<column name="Content"><![CDATA[
Users can create reusable filters, which are available on processing and inquiry forms in Acumatica ERP, to filter the data in the table part of the form; these filters can be reused anytime after creation. Reusable filters can be shared among all users of the system.{br}

You use the Shared Filters page of the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor] to manage ''SharedFilter'' items in the customization project.((({S:Warn}A ''SharedFilter'' item contains the data set of a custom reusable shared filter created on a processing or inquiry form of Acumatica ERP.
))){br}

The Shared Filters page displays the list of the custom reusable shared filters that have been added to the customization project. {br}

On the page, you can perform several operations, as described in the following topics:[anchor|#ul_mmd_kgc_ww]
*[HelpRoot_Dev_Customization\CG_GL_Items_SharedFilters_Adding|To Add a Shared Filter to a Project]
*[HelpRoot_Dev_Customization\CG_GL_Items_SharedFilters_Deleting|To Delete a Shared Filter from a Project]
*[HelpRoot_Dev_Customization\CG_GL_Items_SharedFilters_Updating|To Update a Shared Filter in a Project]
*[HelpRoot_Dev_Customization\CG_GL_Items_SharedFilters_Redirecting|To Navigate to the Filters Form ]
]]></column>
		</row>
		<row PageID="642204fb-1ec6-4aa9-a166-63ce2deccd1c" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="853e0b78-b915-24ee-7ba7-e51cc68a712f" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can add a custom reusable shared filter to a customization project. To do this, perform the following actions:[anchor|#ol_qw5_2nt_tw]
#Open the customization project in the Customization Project Editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)
#Click '''Shared Filters''' in the navigation pane to open the Shared Filters page.
#On the page toolbar, click '''Add New Record''' (+), as shown in the screenshot below.
#In the list of integration scenarios in the '''Add Shared Filter''' dialog box, which opens, select the check box for each filter that you want to include in the project.
#:((({S:Warn}The '''Add Shared Filter''' dialog box displays all the custom shared filters that exist in your instance of Acumatica ERP. You can select multiple shared filters to add them to the project simultaneously.
)))
#In the dialog box, click '''OK''' to add the selected filter or filters to the page table.
#On the page toolbar, click '''Save''' to save the changes to the customization project.[anchor|#image_dt1_j1r_ls][image:CustomizationPlatform/images/CG_GL_Items_SharedFilters_Adding_01.png|popup|Adding the shared filter to the customization project|349px]
{br}

The system adds to the project the data from the database for each selected shared filter. You can view each new ''SharedFilter'' item in the Project Items table of the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_XML_Item|Item XML Editor], as shown in the following screenshot.[anchor|#fig_dnk_gwc_sr][anchor|#_10347612-037c-4a4b-a61d-72912bc101ea][image:CustomizationPlatform/images/CG_GL_Items_SharedFilters_Adding_02.png|popup|Viewing the XML code of the ''SharedFilter'' item included in the project|364px]]]></column>
			<column name="PlainText"><![CDATA[To Add a Shared Filter to a Project You can add a custom reusable shared filter to a customization project. To do this, perform the       following actions: Open the customization project in the  Customization Project Editor. (See  To Open a Project for details.) Click  Shared Filters  in the navigation pane to open the Shared           Filters page. On the page toolbar, click  Add New Record  (+), as shown in the           screenshot below. In the list of integration scenarios in the  Add Shared Filter            dialog box, which opens, select the check box for each filter that you want to include in           the project. The  Add Shared Filter  dialog box displays all the             custom shared filters that exist in your instance of  Acumatica ERP. You can select multiple shared filters to add them to the project             simultaneously. In the dialog box, click  OK  to add the selected filter or filters           to the page table. On the page toolbar, click  Save  to save the changes to the           customization project. Adding the shared filter to the customization project The system adds to the project the data from the database for each selected shared filter. You       can view each new  SharedFilter  item in the Project Items table of the  Item XML Editor, as shown in the following screenshot. Viewing the XML code of the  SharedFilter  item included in the project ]]></column>
		</row>
		<row PageID="a296f5ff-9394-4cc0-a214-981d3ab19fd7" Language="en-US" PageRevisionID="1" PlainText="To Delete a Shared Filter from a Project To remove a  SharedFilter  item from a project, perform the following actions: Open the customization project in the  Customization Project Editor. (See  To Open a Project for details.) Click  Shared Filters  in the navigation pane to open the Shared           Filters page. In the page table, click the item to be deleted. On the page toolbar, click  Delete Row  (X). On the page toolbar, click  Save  to save the changes to the      customization project. If you delete a  SharedFilter  item from the project, the custom reusable shared filter       remains in the system unless you delete the filter. You can delete the filter by using the           ([~/?ScreenId=CS209010|CS209010]) Filters (CS209010) form, as described in  To Delete a System Filter, or by using the form to which the filter       is applied, as described in  Filtering and Sorting in Acumatica ERP: Process Activity. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="86616d19-bd0a-df64-983a-6da31fd7fbc4" RecordSourceID="22377">
			<column name="Content"><![CDATA[
To remove a ''SharedFilter'' item from a project, perform the following actions:[anchor|#ol_qw5_2nt_tw]
#Open the customization project in the Customization Project Editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)
#Click '''Shared Filters''' in the navigation pane to open the Shared Filters page.
#In the page table, click the item to be deleted.
#On the page toolbar, click '''Delete Row''' (X).
#On the page toolbar, click '''Save''' to save the changes to the customization project.
{br}

If you delete a ''SharedFilter'' item from the project, the custom reusable shared filter remains in the system unless you delete the filter. You can delete the filter by using the [HelpRoot_FormReference\CS_20_90_10|Filters] ([~/?ScreenId=CS209010|CS209010]) form, as described in [HelpRoot_Administration\SM__how_Filters_delete|To Delete a System Filter], or by using the form to which the filter is applied, as described in [HelpRoot_GettingStarted\GS_Filtering_and_Sorting_Process_Activity|Filtering and Sorting in Acumatica ERP: Process Activity].]]></column>
		</row>
		<row PageID="4928e2cf-513f-4e66-b9da-61b1f68d8a10" Language="en-US" PageRevisionID="1" Content="&#xA;If you have used the [HelpRoot_FormReference\CS_20_90_10|Filters] ([~/?ScreenId=CS209010|CS209010]) form or the form to which the filter is applied to change a shared filter included in a customization project, you have to update the appropriate item in the project. To do this, perform the following actions:[anchor|#ol_qw5_2nt_tw]&#xA;#Open the customization project in the Customization Project Editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)&#xA;#Click '''Shared Filters''' in the navigation pane to open the Shared Filters page.&#xA;#On the page toolbar, click '''Reload From Database'''.&#xA;{br}&#xA;&#xA;The platform updates all the ''SharedFilter'' items of the project by using the appropriate data from the database." PlainText="To Update a Shared Filter in a Project If you have used the   ([~/?ScreenId=CS209010|CS209010]) Filters (CS209010) form or the       form to which the filter is applied to change a shared filter included in a customization       project, you have to update the appropriate item in the project. To do this, perform the       following actions: Open the customization project in the  Customization Project Editor. (See  To Open a Project for details.) Click  Shared Filters  in the navigation pane to open the Shared           Filters page. On the page toolbar, click  Reload From Database . The platform updates all the  SharedFilter  items of the project by using the appropriate    data from the database. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="7b2c4b4d-b8e8-5b07-55cd-18044029d126" RecordSourceID="22377" />
		<row PageID="6c0c8ccd-4ae6-48c9-a10f-6efc352b3297" Language="en-US" PageRevisionID="1" Content="&#xA;You might need to add or change a reusable shared filter in Acumatica ERP during a customization. To manage shared filters in Acumatica ERP, you use the [HelpRoot_FormReference\CS_20_90_10|Filters] ([~/?ScreenId=CS209010|CS209010]) form.{br}&#xA;&#xA;In the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor], to open this form, perform the following actions:[anchor|#ol_qw5_2nt_tw]&#xA;#Click '''Shared Filters''' in the navigation pane to open the Shared Filters page.&#xA;#On the page toolbar, click '''Manage Filters'''.&#xA;{br}&#xA;&#xA;For more information about reusable filters, see [HelpRoot_Interface\Using_Reusable_Filters|Saving of Filters for Future Use] in the Interface Guide." PlainText="To Navigate to the Filters Form  You might need to add or change a reusable shared filter in  Acumatica ERP    during a customization. To manage shared filters in  Acumatica ERP,    you use the   ([~/?ScreenId=CS209010|CS209010]) Filters (CS209010) form. In the   Customization Project                         Editor, to open this form, perform the following     actions: Click  Shared Filters  in the navigation pane to open the Shared      Filters page. On the page toolbar, click  Manage Filters . For more information about reusable filters, see  Saving of Filters for Future Use in the Interface Guide. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="9528d725-116e-47a8-7696-0f70b0e73be9" RecordSourceID="22377" />
		<row PageID="10902b74-6f4a-46c0-be0d-6765625e7499" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="f08b5e72-22bb-25ce-7e99-33186e4a386a" RecordSourceID="22377">
			<column name="Content"><![CDATA[
In Acumatica ERP, you can control access to system objects at broad and granular levels, down to the control of form elements, such as buttons, text boxes, and check boxes. Users are assigned to roles, and you give these roles the appropriate levels of access rights to system objects—suites, modules, forms, and form elements.{br}

You use the Access Rights page of the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor] to manage ''ScreenWithRights'' items in the customization project.((({S:Warn}A ''ScreenWithRights'' item contains the data set of custom access rights of roles to a form, down to the control of form elements.
))){br}

The Access Rights page displays the list of the custom access rights of roles that have been added to the customization project.{br}

On the page, you can perform several operations, as described in the following topics:[anchor|#ul_mmd_kgc_ww]
*[HelpRoot_Dev_Customization\CG_GL_Items_AccessRights_Adding|To Add Access Rights to a Project]
*[HelpRoot_Dev_Customization\CG_GL_Items_AccessRights_Deleting|To Delete Access Rights from a Project]
*[HelpRoot_Dev_Customization\CG_GL_Items_AccessRights_Updating|To Update Access Rights in a Project]
*[HelpRoot_Dev_Customization\CG_GL_Items_AccessRights_Redirecting|To Navigate to the Access Rights by Screen Form ]
]]></column>
			<column name="PlainText"><![CDATA[Access Rights In  Acumatica ERP, you can control access to system objects at broad and granular levels, down to the control       of form elements, such as buttons, text boxes, and check boxes. Users are assigned to roles,       and you give these roles the appropriate levels of access rights to system objects—suites,       modules, forms, and form elements. You use the Access Rights page of the   Customization Project                         Editor to manage          ScreenWithRights  items in the customization project. A  ScreenWithRights          item contains the data set of custom access rights of roles to a form, down to the control         of form elements. The Access Rights page displays the list of the custom access rights of roles that have been       added to the customization project. On the page, you can perform several operations, as described in the following topics: To Add Access Rights to a ProjectTo Delete Access Rights from a ProjectTo Update Access Rights in a ProjectTo Navigate to the Access Rights by Screen Form ]]></column>
		</row>
		<row PageID="f8341de4-fec5-4bb7-8c3c-5ee0b45a839f" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="9e1a6477-f60f-756a-61ea-1f68cc51f44e" RecordSourceID="22377">
			<column name="Content"><![CDATA[
When you create or change the access rights by screen, role, or user in an instance of Acumatica ERP, these changes are saved in the database for the current tenant.{br}

You can add to a customization project the access rights of roles by screen that are saved in the database for the current tenant. To do this, perform the following actions:[anchor|#ol_qw5_2nt_tw]
#Open the customization project in the Customization Project Editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)
#Click '''Access Rights''' in the navigation pane to open the Access Rights page.
#On the page toolbar, click '''Add New Record''' (+), as shown in the screenshot below.
#In the '''Add Access Rights for Screen''' dialog box, which opens, in the list of custom access rights of roles by screen, select the check box for the access rights that you want to include in the project.
#:((({S:Warn}The '''Add Access Rights for Screen''' dialog box displays all the custom access rights of roles that exist in your instance of Acumatica ERP. You can select multiple access rights of roles to add them to the project simultaneously.
)))
#In the dialog box, click '''OK''' to add the selected access rights of roles to the page table.
#On the page toolbar, click '''Save''' to save the changes to the customization project.[anchor|#image_dt1_j1r_ls][image:CustomizationPlatform/images/CG_GL_Items_AccessRights_Adding_01.png|popup|Adding the access rights to the customization project|338px]
{br}

The system adds to the project the data from the database for the selected access rights of roles. You can view each new ''ScreenWithRights'' item in the Project Items table of the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_XML_Item|Item XML Editor], as shown in the following screenshot.[anchor|#fig_dnk_gwc_sr][anchor|#_10347612-037c-4a4b-a61d-72912bc101ea][image:CustomizationPlatform/images/CG_GL_Items_AccessRights_Adding_02.png|popup|Viewing the XML code of the ''ScreenWithRights'' item included in the project|339px]{br}

A ''ScreenWithRights'' item contains all the data required for the access rights of roles to the screen. Therefore, the item includes the data of all the roles applied to the screen.]]></column>
			<column name="PlainText"><![CDATA[To Add Access Rights to a Project When you create or change the access rights by screen, role, or user in an instance of  Acumatica ERP, these changes are saved in the database for the current tenant. You can add to a customization project the access rights of roles by screen that are saved in       the database for the current tenant. To do this, perform the following actions: Open the customization project in the  Customization Project Editor. (See  To Open a Project for details.) Click  Access Rights  in the navigation pane to open the Access           Rights page. On the page toolbar, click  Add New Record  (+), as shown in the           screenshot below. In the  Add Access Rights for Screen  dialog box, which opens, in           the list of custom access rights of roles by screen, select the check box for the access           rights that you want to include in the project. The  Add Access Rights for               Screen  dialog box displays all the custom access rights of roles that             exist in your instance of  Acumatica ERP. You can select multiple access rights of roles to add them to the project             simultaneously. In the dialog box, click  OK  to add the selected access rights of           roles to the page table. On the page toolbar, click  Save  to save the changes to the           customization project. Adding the access rights to the customization project The system adds to the project the data from the database for the selected access rights of       roles. You can view each new  ScreenWithRights  item in the Project Items table of the          Item XML Editor, as shown in the following         screenshot. Viewing the XML code of the  ScreenWithRights  item included in the           project A  ScreenWithRights  item contains all the data required for the access rights of roles to    the screen. Therefore, the item includes the data of all the roles applied to the screen. ]]></column>
		</row>
		<row PageID="b1ffe336-5851-4499-a135-7c26462b807b" Language="en-US" PageRevisionID="1" Content="&#xA;To remove a ''ScreenWithRights'' item from a project, perform the following actions:[anchor|#ol_qw5_2nt_tw]&#xA;#Open the customization project in the Customization Project Editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)&#xA;#Click '''Access Rights''' in the navigation pane to open the Access Rights page.&#xA;#In the page table, click the item to be deleted.&#xA;#On the page toolbar, click '''Delete Row''' (X).&#xA;#On the page toolbar, click '''Save''' to save the changes to the customization project.&#xA;{br}&#xA;&#xA;If you delete a ''ScreenWithRights'' item from the project, the customization of the access rights of roles remain in the system unless you delete the changes of access rights from the database." PlainText="To Delete Access Rights from a Project To remove a  ScreenWithRights  item from a project, perform the following actions: Open the customization project in the  Customization Project Editor. (See  To Open a Project for details.) Click  Access Rights  in the navigation pane to open the Access           Rights page. In the page table, click the item to be deleted. On the page toolbar, click  Delete Row  (X). On the page toolbar, click  Save  to save the changes to the           customization project. If you delete a  ScreenWithRights  item from the project, the customization of the       access rights of roles remain in the system unless you delete the changes of access rights       from the database. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="569cfbd4-ae7c-7c44-e3b5-55171acd1847" RecordSourceID="22377" />
		<row PageID="c623433e-764b-44b9-b163-2981b6d86ba3" Language="en-US" PageRevisionID="1" Content="&#xA;If you have used Acumatica ERP forms to change access rights included in a customization project, you have to update the appropriate items in the project. To do this, perform the following actions:[anchor|#ol_qw5_2nt_tw]&#xA;#Open the customization project in the Customization Project Editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)&#xA;#Click '''Access Rights''' in the navigation pane to open the Access Rights page.&#xA;#On the page toolbar, click '''Reload From Database'''.&#xA;{br}&#xA;&#xA;The platform updates all the ''ScreenWithRights'' items of the project by using the appropriate data from the database." PlainText="To Update Access Rights in a Project If you have used  Acumatica ERP forms to change access rights included in a customization project, you have to update the       appropriate items in the project. To do this, perform the following actions: Open the customization project in the  Customization Project Editor. (See  To Open a Project for details.) Click  Access Rights  in the navigation pane to open the Access           Rights page. On the page toolbar, click  Reload From Database . The platform updates all the  ScreenWithRights  items of the project by using the    appropriate data from the database. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="6c140275-4099-ccb1-4734-d94fd495de14" RecordSourceID="22377" />
		<row PageID="f04a2581-da57-45aa-9403-0aa61282f992" Language="en-US" PageRevisionID="1" Content="&#xA;You might need to change the access rights of roles in Acumatica ERP during customization. To manage access rights of roles by screen in Acumatica ERP, you use the [HelpRoot_FormReference\SM_20_10_20|Access Rights by Screen] ([~/?ScreenId=SM201020|SM201020]) form.{br}&#xA;&#xA;To open this form from the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor], perform the following actions:[anchor|#ol_qw5_2nt_tw]&#xA;#Click '''Access Rights''' in the navigation pane to open the Access Rights page.&#xA;#On the page toolbar, click '''Manage Access Rights'''.&#xA;{br}&#xA;&#xA;As soon as you change the access rights of roles in Acumatica ERP, the system saves the changes in the database for your tenant, and you can add the access rights as a ''ScreenWithRights'' item to the customization project. For more information about the access rights of roles, see [HelpRoot_Administration\US__mng_Roles|Managing User Access Rights] in the System Administration Guide." PlainText="To Navigate to the Access Rights by Screen Form  You might need to change the access rights of roles in  Acumatica ERP    during customization. To manage access rights of roles by screen in  Acumatica ERP,    you use the   ([~/?ScreenId=SM201020|SM201020]) Access Rights by Screen (SM201020) form. To open this form from the   Customization Project                         Editor, perform the following     actions: Click  Access Rights  in the navigation pane to open the Access Rights      page. On the page toolbar, click  Manage Access Rights . As soon as you change the access rights of roles in  Acumatica ERP, the system saves the changes in the database for your tenant, and you can add the access       rights as a  ScreenWithRights  item to the customization project. For more information       about the access rights of roles, see  Managing User Access Rights in the       System Administration Guide. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="cf7b485c-8901-d44e-9317-b4483ff4383f" RecordSourceID="22377" />
		<row PageID="d7448024-e022-4e7c-a01c-9151ee12120c" Language="en-US" PageRevisionID="1" Content="&#xA;You use the Wikis page of the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor] to manage ''WikiArticle'' items in the customization project.((({S:Warn}A ''WikiArticle'' item contains the data set of a custom wiki and all the articles created within this wiki.&#xA;))){br}&#xA;&#xA;The Wikis page displays the list of the custom wikis that have been added to the customization project.{br}&#xA;&#xA;On the page, you can perform several operations, as described in the following topics:[anchor|#ul_mmd_kgc_ww]&#xA;*[HelpRoot_Dev_Customization\CG_GL_Items_Wiki_Adding|To Add a Custom Wiki to a Project]&#xA;*[HelpRoot_Dev_Customization\CG_GL_Items_Wiki_Deleting|To Delete a Custom Wiki from a Project]&#xA;*[HelpRoot_Dev_Customization\CG_GL_Items_Wiki_Updating|To Update a Custom Wiki in a Project]&#xA;*[HelpRoot_Dev_Customization\CG_GL_Items_Wiki_Redirecting|To Navigate to the Wiki Form ]&#xA;" PlainText="Wikis You use the Wikis page of the   Customization Project                         Editor to manage          WikiArticle  items in the customization project. A  WikiArticle  item         contains the data set of a custom wiki and all the articles created within this       wiki. The Wikis page displays the list of the custom wikis that have been added to the       customization project. On the page, you can perform several operations, as described in the following topics: To Add a Custom Wiki to a ProjectTo Delete a Custom Wiki from a ProjectTo Update a Custom Wiki in a ProjectTo Navigate to the Wiki Form " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="d419b375-b3c1-c4e1-35ac-236e228dfae0" RecordSourceID="22377" />
		<row PageID="f2df166e-0973-44f3-bf3b-aba8216fa2ba" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="16b12646-0855-f96d-3b19-01847909ac3d" RecordSourceID="22377">
			<column name="Content"><![CDATA[
In Acumatica ERP, you can create a new wiki or modify the properties of an existing one. For example, you can change the access rights to wiki folders and edit the list of categories available for the wiki. Any change to wikis is saved for the appropriate wiki in the database for the current tenant.{br}

You can add to a customization project the wiki that are saved in the database for the current tenant. To do this, perform the following actions:[anchor|#ol_qw5_2nt_tw]
#Open the customization project in the Customization Project Editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)
#Click '''Wikis''' in the navigation pane to open the Wikis page.
#On the page toolbar, click '''Add New Record''' (+), as shown in the screenshot below.
#In the list of custom wikis in the '''Add Wiki Page''' dialog box, which opens, select the check box for each wiki that you want to include in the project.
#:((({S:Warn}The '''Add Wiki Page''' dialog box displays all the custom wikis that exist in your instance of Acumatica ERP. You can select multiple wikis to add them to the project simultaneously.
)))
#In the dialog box, click '''OK''' to add the selected wiki to the page table.
#On the page toolbar, click '''Save''' to save the changes to the customization project.[anchor|#image_dt1_j1r_ls][image:CustomizationPlatform/images/CG_GL_Items_Wiki_Adding_01.png|popup|Adding the custom wiki to the customization project|337px]
{br}

The system adds to the project each selected wiki. You can view each new ''WikiArticle'' item in the Project Items table of the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_XML_Item|Item XML Editor], as shown in the following screenshot.[anchor|#fig_dnk_gwc_sr][anchor|#_80a3653e-6ee0-4025-8f0a-56485a701ffe][image:CustomizationPlatform/images/CG_GL_Items_Wiki_Adding_02.png|popup|Viewing the XML code of the ''WikiArticle'' item included in the project|347px]{br}

A ''WikiArticle'' item contains all the data required to recreate the corresponding wiki in any instance of Acumatica ERP.]]></column>
			<column name="PlainText"><![CDATA[To Add a Custom Wiki to a Project In  Acumatica ERP, you can create a new wiki or modify the properties of an existing one. For example, you       can change the access rights to wiki folders and edit the list of categories available for the       wiki. Any change to wikis is saved for the appropriate wiki in the database for the current       tenant. You can add to a customization project the wiki that are saved in the database for the       current tenant. To do this, perform the following actions: Open the customization project in the  Customization Project Editor. (See  To Open a Project for details.) Click  Wikis  in the navigation pane to open the Wikis page. On the page toolbar, click  Add New Record  (+), as shown in the           screenshot below. In the list of custom wikis in the  Add Wiki Page  dialog box,           which opens, select the check box for each wiki that you want to include in the             project. The  Add Wiki Page  dialog box displays all the             custom wikis that exist in your instance of  Acumatica ERP. You can select multiple wikis to add them to the project simultaneously. In the dialog box, click  OK  to add the selected wiki to the page           table. On the page toolbar, click  Save  to save the changes to the           customization project. Adding the custom wiki to the customization project The system adds to the project each selected wiki. You can view each new  WikiArticle        item in the Project Items table of the  Item XML Editor,       as shown in the following screenshot. Viewing the XML code of the  WikiArticle  item included in the project A  WikiArticle  item contains all the data required to recreate the corresponding wiki in       any instance of  Acumatica ERP. ]]></column>
		</row>
		<row PageID="5fb3c06e-eb24-474f-bb9d-15ad18f95113" Language="en-US" PageRevisionID="1" Content="&#xA;To remove a ''WikiArticle'' item from a project, perform the following actions:[anchor|#ol_qw5_2nt_tw]&#xA;#Open the customization project in the Customization Project Editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)&#xA;#Click '''Wikis''' in the navigation pane to open the Wikis page.&#xA;#In the page table, click the item to be deleted.&#xA;#On the page toolbar, click '''Delete Row''' (X).&#xA;#On the page toolbar, click '''Save''' to save the changes to the customization project.&#xA;{br}&#xA;&#xA;If you delete a ''WikiArticle'' item from the project, the custom wiki remains in the system unless you delete the wiki by using the [HelpRoot_FormReference\SM_20_20_05|Wiki] ([~/?ScreenId=SM202005|SM202005]) form." PlainText="To Delete a Custom Wiki from a Project To remove a  WikiArticle  item from a project, perform the following actions: Open the customization project in the  Customization Project Editor. (See  To Open a Project for details.) Click  Wikis  in the navigation pane to open the Wikis page. In the page table, click the item to be deleted. On the page toolbar, click  Delete Row  (X). On the page toolbar, click  Save  to save the changes to the      customization project. If you delete a  WikiArticle  item from the project, the custom wiki remains in the system       unless you delete the wiki by using the   ([~/?ScreenId=SM202005|SM202005]) Wiki       (SM202005) form. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="acbca765-aa24-d0f6-30e7-aec2c4aac63e" RecordSourceID="22377" />
		<row PageID="61380a20-8b7e-4f3a-b9bf-d145050cac88" Language="en-US" PageRevisionID="1" Content="&#xA;If you have changed a wiki included in a customization project by using Acumatica ERP forms, you have to update the appropriate item in the project. To do this, perform the following actions:[anchor|#ol_qw5_2nt_tw]&#xA;#Open the customization project in the Customization Project Editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)&#xA;#Click '''Wikis''' in the navigation pane to open the Wikis page.&#xA;#On the page toolbar, click '''Reload From Database'''.&#xA;{br}&#xA;&#xA;The platform updates all the ''WikiArticle'' items of the project by using the appropriate data from the database." PlainText="To Update a Custom Wiki in a Project If you have changed a wiki included in a customization project by using  Acumatica ERP forms, you have to update the appropriate item in the project. To do this, perform the       following actions: Open the customization project in the  Customization Project Editor. (See  To Open a Project for details.) Click  Wikis  in the navigation pane to open the Wikis page. On the page toolbar, click  Reload From Database . The platform updates all the  WikiArticle  items of the project by using the appropriate       data from the database. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="3fe0c551-366e-a61d-c9c8-111ff1dd70b3" RecordSourceID="22377" />
		<row PageID="61ccc86b-386d-44e8-8f9c-87a6613ed84e" Language="en-US" PageRevisionID="1" Content="&#xA;You might need to add a new wiki or edit an existing one in Acumatica ERP during customization. To manage wikis in Acumatica ERP, you use the [HelpRoot_FormReference\SM_20_20_05|Wiki] ([~/?ScreenId=SM202005|SM202005]) form.{br}&#xA;&#xA;To open this form from the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor], perform the following actions:[anchor|#ol_qw5_2nt_tw]&#xA;#Click '''Wikis''' in the navigation pane to open the Wikis page.&#xA;#On the page toolbar, click '''Manage Wikis'''.&#xA;{br}&#xA;&#xA;As soon as you create or change a wiki in the system, the system saves this wiki in the database for the current tenant, you can add the wiki as a ''WikiArticle'' item to the customization project. For more information about wikis, see [HelpRoot_Administration\DM__mng_Wikis|Managing Wikis] in the System Administration Guide." PlainText="To Navigate to the Wiki Form  You might need to add a new wiki or edit an existing one in  Acumatica ERP    during customization. To manage wikis in  Acumatica ERP,    you use the   ([~/?ScreenId=SM202005|SM202005]) Wiki (SM202005) form. To open this form from the   Customization Project                         Editor, perform the following     actions: Click  Wikis  in the navigation pane to open the Wikis page. On the page toolbar, click  Manage Wikis . As soon as you create or change a wiki in the system, the system saves this wiki in the    database for the current tenant, you can add the wiki as a  WikiArticle  item to the    customization project. For more information about wikis, see  Managing Wikis in the System Administration Guide. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="365880a2-ee05-b0ca-16d0-e822c09368c6" RecordSourceID="22377" />
		<row PageID="160e7da3-cde1-47d3-a056-0ce198c8e40e" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="926ebd7c-c3ac-c6d6-d371-044f718bdc1b" RecordSourceID="22377">
			<column name="Content"><![CDATA[
 Acumatica ERP provides web services for integration with external systems. Through the web services of Acumatica ERP, external systems can get data records from Acumatica ERP and process these records; new or updated records can also be saved to Acumatica ERP. You can configure contract-based web service endpoints in an instance of Acumatica ERP and include the new configuration in a customization project as an ''EntityEndpoint'' item.{br}

You use the Web Service Endpoints page of the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor] to manage ''EntityEndpoint'' items in the customization project.((({S:Warn}A ''EntityEndpoint'' item contains the data set of a custom contract-based web service endpoint.
))){br}

The Web Service Endpoints page displays the list of the custom contract-based web service endpoints that have been added to the customization project.{br}

On the page, you can perform several operations, as described in the following topics:[anchor|#ul_mmd_kgc_ww]
*[HelpRoot_Dev_Customization\CG_GL_Items_WebServices_Adding|To Add a Custom Web Service Endpoint to a Project]
*[HelpRoot_Dev_Customization\CG_GL_Items_WebServices_Deleting|To Delete a Custom Web Service Endpoint from a Project]
*[HelpRoot_Dev_Customization\CG_GL_Items_WebServices_Updating|To Update a Custom Web Service Endpoint in a Project]
*[HelpRoot_Dev_Customization\CG_GL_Items_WebServices_Redirecting|To Navigate to the Web Service Endpoints Form]
]]></column>
			<column name="PlainText"><![CDATA[Web Service Endpoints  Acumatica ERP provides web services for integration with external systems. Through the web services of          Acumatica ERP, external systems can get data records from  Acumatica ERP and process these records; new or updated records can also be saved to  Acumatica ERP. You can configure contract-based web service endpoints in an instance of  Acumatica ERP and include the new configuration in a customization project as an  EntityEndpoint        item. You use the Web Service Endpoints page of the   Customization Project                         Editor to       manage  EntityEndpoint  items in the customization project. A  EntityEndpoint          item contains the data set of a custom contract-based web service endpoint. The Web Service Endpoints page displays the list of the custom contract-based web service       endpoints that have been added to the customization project. On the page, you can perform several operations, as described in the following topics: To Add a Custom Web Service Endpoint to a ProjectTo Delete a Custom Web Service Endpoint from a ProjectTo Update a Custom Web Service Endpoint in a ProjectTo Navigate to the Web Service Endpoints Form]]></column>
		</row>
		<row PageID="9a21959b-1cb6-4409-9382-625184af60e5" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="011ae253-5353-48b4-951f-66ad7f654e62" RecordSourceID="22377">
			<column name="Content"><![CDATA[
To add a custom contract-based web service endpoint to a customization project, perform the following actions:[anchor|#ol_qw5_2nt_tw]
#Open the customization project in the Customization Project Editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)
#Click '''Web Service Endpoints''' in the navigation pane to open the Web Service Endpoints page.
#On the page toolbar, click '''Add New Record''' (+), as shown in the screenshot below.
#In the list of custom contract-based web service endpoints in the '''Add Entity Endpoint''' dialog box, which opens, select the check box for each endpoint that you want to include in the project.
#:((({S:Warn}The '''Add Entity Endpoint''' dialog box displays all the custom contract-based web service endpoints that exist in your instance of Acumatica ERP. You can select multiple endpoints to add them to the project simultaneously.
)))
#In the dialog box, click '''OK''' to add each selected endpoint to the page table.
#On the page toolbar, click '''Save''' to save the changes to the customization project.[anchor|#image_dt1_j1r_ls][image:CustomizationPlatform/images/CG_GL_Items_WebServices_Adding_01.png|popup|Adding the custom contract-based web service endpoint to the customization project|341px]
{br}

The system adds to the project the data from the database for each selected web service endpoint . You can view each new ''EntityEndpoint'' item in the Project Items table of the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_XML_Item|Item XML Editor], as shown in the following screenshot.[anchor|#fig_dnk_gwc_sr][anchor|#_80a3653e-6ee0-4025-8f0a-56485a701ffe][image:CustomizationPlatform/images/CG_GL_Items_WebServices_Adding_02.png|popup|Viewing the XML code of the ''EntityEndpoint'' item included in the project|337px]]]></column>
			<column name="PlainText"><![CDATA[To Add a Custom Web Service Endpoint to a Project To add a custom contract-based web service endpoint to a customization project, perform the    following actions: Open the customization project in the  Customization Project Editor. (See  To Open a Project for details.) Click  Web Service Endpoints  in the navigation pane to open the Web           Service Endpoints page. On the page toolbar, click  Add New Record  (+), as shown in the      screenshot below. In the list of custom contract-based web service endpoints in the  Add Entity       Endpoint  dialog box, which opens, select the check box for each endpoint that           you want to include in the project. The  Add Entity Endpoint              dialog box displays all the custom contract-based web service endpoints that exist in             your instance of  Acumatica ERP. You can select multiple endpoints to add them to the project           simultaneously. In the dialog box, click  OK  to add each selected endpoint to the page           table. On the page toolbar, click  Save  to save the changes to the      customization project. Adding the custom contract-based web service endpoint to the customization        project The system adds to the project the data from the database for each selected web service       endpoint . You can view each new  EntityEndpoint  item in the Project Items table of the          Item XML Editor, as shown in the following         screenshot. Viewing the XML code of the  EntityEndpoint  item included in the           project ]]></column>
		</row>
		<row PageID="320d79de-ed2b-4184-b4d8-64fb6c2cdeed" Language="en-US" PageRevisionID="1" Content="&#xA;To remove a ''EntityEndpoint'' item from a project, perform the following actions:[anchor|#ol_qw5_2nt_tw]&#xA;#Open the customization project in the Customization Project Editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)&#xA;#Click '''Web Service Endpoints''' in the navigation pane to open the Web Service Endpoints page.&#xA;#In the page table, click the item to be deleted.&#xA;#On the page toolbar, click '''Delete Row''' (X).&#xA;#On the page toolbar, click '''Save''' to save the changes to the customization project.&#xA;{br}&#xA;&#xA;If you delete a ''EntityEndpoint'' item from the project, the custom contract-based web service endpoint remains in the system unless you delete the endpoint by using the [HelpRoot_FormReference\SM_20_70_60|Web Service Endpoints] ([~/?ScreenId=SM207060|SM207060]) form." PlainText="To Delete a Custom Web Service Endpoint from a Project To remove a  EntityEndpoint  item from a project, perform the following actions: Open the customization project in the  Customization Project Editor. (See  To Open a Project for details.) Click  Web Service Endpoints  in the navigation pane to open the Web           Service Endpoints page. In the page table, click the item to be deleted. On the page toolbar, click  Delete Row  (X). On the page toolbar, click  Save  to save the changes to the      customization project. If you delete a  EntityEndpoint  item from the project, the custom contract-based web       service endpoint remains in the system unless you delete the endpoint by using the   ([~/?ScreenId=SM207060|SM207060]) Web Service Endpoints (SM207060) form. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="fd1d85df-2d18-1990-5d4b-7e2e8e8ab501" RecordSourceID="22377" />
		<row PageID="efb03d8e-abd4-484d-99c8-94b6b8f4d590" Language="en-US" PageRevisionID="1" Content="&#xA;If you have used the [HelpRoot_FormReference\SM_20_70_60|Web Service Endpoints] ([~/?ScreenId=SM207060|SM207060]) form to change a custom contract-based web service endpoint included in a customization project, you have to update the appropriate item in the project. To do this, perform the following actions:[anchor|#ol_qw5_2nt_tw]&#xA;#Open the customization project in the Customization Project Editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)&#xA;#Click '''Web Service Endpoints''' in the navigation pane to open the Web Service Endpoints page.&#xA;#On the page toolbar, click '''Reload From Database'''.&#xA;{br}&#xA;&#xA;The platform updates all the ''EntityEndpoint'' items of the project by using the appropriate data from the database." PlainText="To Update a Custom Web Service Endpoint in a Project If you have used the   ([~/?ScreenId=SM207060|SM207060]) Web Service Endpoints (SM207060) form to change       a custom contract-based web service endpoint included in a customization project, you have to       update the appropriate item in the project. To do this, perform the following actions: Open the customization project in the  Customization Project Editor. (See  To Open a Project for details.) Click  Web Service Endpoints  in the navigation pane to open the           Web Service Endpoints page. On the page toolbar, click  Reload From Database . The platform updates all the  EntityEndpoint  items of the project by using the    appropriate data from the database. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="db3f71a4-93eb-54f7-4a67-b6c65a70de7b" RecordSourceID="22377" />
		<row PageID="4637c680-ea6e-41d7-b3c3-c7279b61f963" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="83eaaef8-2ab7-4dac-cc1c-11280f980847" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You might need to configure contract-based web service endpoints in Acumatica ERP during customization. To manage contract-based web service endpoints in Acumatica ERP, you use the [HelpRoot_FormReference\SM_20_70_60|Web Service Endpoints] ([~/?ScreenId=SM207060|SM207060]) form.{br}

To open this form from the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor], perform the following actions:[anchor|#ol_qw5_2nt_tw]
#Click '''Web Service Endpoints''' in the navigation pane to open the Web Service Endpoints page of the editor.
#On the page toolbar, click '''Manage Endpoints'''.
{br}

As soon as you configure a web service endpoint on the [HelpRoot_FormReference\SM_20_70_60|Web Service Endpoints] form, the system saves the endpoint data in the database for the current tenant, and you can add the endpoint as a ''EntityEndpoint'' item to the customization project. For more information about the contract-based web services API, see [HelpRoot_Dev_Integration\IS__mng_Contract_Based_Web_Services|Configuring the Contract-Based REST and SOAP API] in the Integration Development Guide.]]></column>
			<column name="PlainText"><![CDATA[To Navigate to the Web Service Endpoints Form You might need to configure contract-based web service endpoints in  Acumatica ERP    during customization. To manage contract-based web service endpoints in  Acumatica ERP,    you use the   ([~/?ScreenId=SM207060|SM207060]) Web Service Endpoints (SM207060) form. To open this form from the   Customization Project                         Editor, perform the following     actions: Click  Web Service Endpoints  in the navigation pane to open the Web      Service Endpoints page of the editor. On the page toolbar, click  Manage Endpoints . As soon as you configure a web service endpoint on the   ([~/?ScreenId=SM207060|SM207060]) Web Service Endpoints form, the system saves the endpoint data in the database    for the current tenant, and you can add the endpoint as a  EntityEndpoint  item to the    customization project. For more information about the contract-based web services API, see  Configuring the Contract-Based REST and SOAP API in the Integration Development    Guide. ]]></column>
		</row>
		<row PageID="951f3d4d-c997-4ee4-9900-72aa63c6739d" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="ec458eda-88e6-18ca-05b4-ac40103cc3cf" RecordSourceID="22377">
			<column name="Content"><![CDATA[
Analytical reports are used to display the consolidated and summarized data in a view defined by the report designer at the report design stage. The analytical reports are used to provide the summarized and aggregated values in a variety of views: the data in the analytical report can be displayed in the monthly, yearly, and quarterly views, and the data can provide information from the point of view of departments, selected account classes, and other dimensions. {br}

In Acumatica ERP, you can modify defined analytical reports, create a new analytical report, and delete existing reports. You can add the analytical reports that have been created or modified to the customization project as ''ReportDefinition'' items.{br}

You use the Analytical Reports page of the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor] to manage ''ReportDefinition'' items in the customization project.((({S:Warn}A ''ReportDefinition'' item contains the data set of a custom analytical report, including the data of a predefined sets of rows, columns, and units.
))){br}

The Analytical Reports page displays the list of the custom analytical reports that have been added to the customization project.{br}

On the page, you can perform a variety of operations, as described in the following topics:[anchor|#ul_mmd_kgc_ww]
*[HelpRoot_Dev_Customization\CG_GL_Items_AnaliticalReports_Adding|To Add a Custom Analytical Report to a Project]
*[HelpRoot_Dev_Customization\CG_GL_Items_AnaliticalReports_Deleting|To Delete a Custom Analytical Report from a Project]
*[HelpRoot_Dev_Customization\CG_GL_Items_AnaliticalReports_Updating|To Update a Custom Analytical Report in a Project]
*[HelpRoot_Dev_Customization\CG_GL_Items_AnaliticalReports_Redirecting|To Navigate to the Report Definitions Form ]
]]></column>
			<column name="PlainText"><![CDATA[Analytical Reports Analytical reports are used to display the consolidated and summarized data in a view defined       by the report designer at the report design stage. The analytical reports are used to provide       the summarized and aggregated values in a variety of views: the data in the analytical report       can be displayed in the monthly, yearly, and quarterly views, and the data can provide       information from the point of view of departments, selected account classes, and other       dimensions.  In  Acumatica ERP, you can modify defined analytical reports, create a new analytical report, and delete       existing reports. You can add the analytical reports that have been created or modified to the       customization project as  ReportDefinition  items. You use the Analytical Reports page of the   Customization Project                         Editor to       manage  ReportDefinition  items in the customization project. A            ReportDefinition  item contains the data set of a custom analytical report,         including the data of a predefined sets of rows, columns, and units. The Analytical Reports page displays the list of the custom analytical reports that have been       added to the customization project. On the page, you can perform a variety of operations, as described in the following         topics: To Add a Custom Analytical Report to a ProjectTo Delete a Custom Analytical Report from a ProjectTo Update a Custom Analytical Report in a ProjectTo Navigate to the Report Definitions Form ]]></column>
		</row>
		<row PageID="187cd95b-cb0f-4fe2-a399-52df41813fe8" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="877ebc6d-dae1-46dc-bc06-a079ba53a0d1" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can add a custom analytical report to a customization project. To do this, perform the following actions:[anchor|#ol_qw5_2nt_tw]
#Open the customization project in the Customization Project Editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)
#Click '''Analytical Reports''' in the navigation pane to open the Analytical Reports page.
#On the page toolbar, click '''Add New Record''' (+), as shown in the screenshot below.
#In the list of custom analytical reports in the '''Add Report Definition''' dialog box, which opens, select the check box for each report that you want to include in the project.
#:((({S:Warn}The '''Add Report Definition''' dialog box displays all the custom analytical reports that exist in your instance of Acumatica ERP. You can select multiple custom analytical reports to add them to the project simultaneously.
)))
#In the dialog box, click '''OK''' to add each selected analytical report to the page table.
#On the page toolbar, click '''Save''' to save the changes to the customization project.[anchor|#image_dt1_j1r_ls][image:CustomizationPlatform/images/CG_GL_Items_AnaliticalReports_Adding_01.png|popup|Adding the custom analytical report to the customization project|366px]
{br}

The system adds to the project the data from the database for each selected custom analytical report. You can view each new item in the Project Items table of the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_XML_Item|Item XML Editor], as shown in the following screenshot.[anchor|#fig_dnk_gwc_sr][anchor|#_80a3653e-6ee0-4025-8f0a-56485a701ffe][image:CustomizationPlatform/images/CG_GL_Items_AnaliticalReports_Adding_02.png|popup|Viewing the XML code of the ReportDefinition item included in the project|367px]{br}

A ''ReportDefinition'' item contains all the data required to recreate the corresponding analytical report in any instance of Acumatica ERP.((({S:Warn}To give users the ability to navigate to the custom analytical report in Acumatica ERP, you have to add the appropriate site map node to the customization project, as described in [HelpRoot_Dev_Customization\CG_GL_Items_SiteMap_Adding|To Add a Site Map Node to a Project].
)))]]></column>
			<column name="PlainText"><![CDATA[To Add a Custom Analytical Report to a Project You can add a custom analytical report to a customization project. To do this, perform the    following actions: Open the customization project in the  Customization Project Editor. (See  To Open a Project for details.) Click  Analytical Reports  in the navigation pane to open the           Analytical Reports page. On the page toolbar, click  Add New Record  (+), as shown in the      screenshot below. In the list of custom analytical reports in the  Add Report Definition            dialog box, which opens, select the check box for each report that you want to include in           the project. The  Add Report Definition  dialog box displays all             the custom analytical reports that exist in your instance of  Acumatica ERP. You can select multiple custom analytical reports to add them to the project             simultaneously. In the dialog box, click  OK  to add each selected analytical report to           the page table. On the page toolbar, click  Save  to save the changes to the      customization project. Adding the custom analytical report to the customization project The system adds to the project the data from the database for each selected custom analytical       report. You can view each new item in the Project Items table of the  Item XML Editor, as shown in the following screenshot. Viewing the XML code of the ReportDefinition item included in the project A  ReportDefinition  item contains all the data required to recreate the corresponding       analytical report in any instance of  Acumatica ERP. To give users the ability to navigate to the custom analytical report in  Acumatica ERP, you have to add the appropriate site map node to the customization project, as described         in  To Add a Site Map Node to a Project. ]]></column>
		</row>
		<row PageID="3e5b4d0d-b228-4681-9923-0d65cf766575" Language="en-US" PageRevisionID="1" Content="&#xA;To remove a ''ReportDefinition'' item from a project, perform the following actions:[anchor|#ol_qw5_2nt_tw]&#xA;#Open the customization project in the Customization Project Editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)&#xA;#Click '''Analytical Reports''' in the navigation pane to open the Analytical Reports page.&#xA;#In the page table, click the item to be deleted.&#xA;#On the page toolbar, click '''Delete Row''' (X).&#xA;#On the page toolbar, click '''Save''' to save the changes to the customization project.&#xA;{br}&#xA;&#xA;If you delete a ''ReportDefinition'' item from the project, the analytical report remains in the system unless you delete the report by using the [HelpRoot_FormReference\CS_20_60_00|Report Definitions] ([~/?ScreenId=CS206000|CS206000]) form." PlainText="To Delete a Custom Analytical Report from a Project To remove a  ReportDefinition  item from a project, perform the following actions: Open the customization project in the  Customization Project Editor. (See  To Open a Project for details.) Click  Analytical Reports  in the navigation pane to open the           Analytical Reports page. In the page table, click the item to be deleted. On the page toolbar, click  Delete Row  (X). On the page toolbar, click  Save  to save the changes to the      customization project. If you delete a  ReportDefinition  item from the project, the analytical report remains in       the system unless you delete the report by using the   ([~/?ScreenId=CS206000|CS206000]) Report Definitions (CS206000) form. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="c4d6370a-09ad-4831-7e93-45a9f9d81204" RecordSourceID="22377" />
		<row PageID="86602eff-8ef0-48cd-93d1-43226ffc76b4" Language="en-US" PageRevisionID="1" Content="&#xA;If you have used the [HelpRoot_FormReference\CS_20_60_00|Report Definitions] ([~/?ScreenId=CS206000|CS206000]) form to change an analytical report included in a customization project, you have to update the appropriate item in the project. To do this, perform the following actions:[anchor|#ol_qw5_2nt_tw]&#xA;#Open the customization project in the Customization Project Editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)&#xA;#Click '''Analytical Reports''' in the navigation pane to open the Analytical Reports page.&#xA;#On the page toolbar, click '''Reload From Database'''.&#xA;{br}&#xA;&#xA;The platform updates all the ''ReportDefinition'' items of the project by using the appropriate data from the database." PlainText="To Update a Custom Analytical Report in a Project If you have used the   ([~/?ScreenId=CS206000|CS206000]) Report Definitions (CS206000) form to change       an analytical report included in a customization project, you have to update the appropriate       item in the project. To do this, perform the following actions: Open the customization project in the  Customization Project Editor. (See  To Open a Project for details.) Click  Analytical Reports  in the navigation pane to open the           Analytical Reports page. On the page toolbar, click  Reload From Database . The platform updates all the  ReportDefinition  items of the project by using the    appropriate data from the database. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="33421ae2-f52f-bf9c-3831-61a3f997f9eb" RecordSourceID="22377" />
		<row PageID="89238855-811b-4895-ba9c-0effe1106fe0" Language="en-US" PageRevisionID="1" PlainText="To Navigate to the Report Definitions Form  You might need to add an analytical report to  Acumatica ERP    during customization. To manage analytical reports in  Acumatica ERP,    you use the   ([~/?ScreenId=CS206000|CS206000]) Report Definitions (CS206000) form. To open this form from the   Customization Project                         Editor, perform the following     actions: Click  Analytical Reports  in the navigation pane to open the      Analytical Reports page. On the page toolbar, click  Manage Report Definitions . As soon as you add a new analytical report to the system or change an existing analytical    report on the   ([~/?ScreenId=CS206000|CS206000]) Report Definitions form, the report is saved in the    database for the current tenant, and you can add the report to the customization project as a      ReportDefinition  item. For more information about analytical reports, see  Managing Analytical Reports in the Reporting Tools Guide. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="4e1c7286-e9c0-44a0-3090-f754a0c8e9f4" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You might need to add an analytical report to Acumatica ERP during customization. To manage analytical reports in Acumatica ERP, you use the [HelpRoot_FormReference\CS_20_60_00|Report Definitions] ([~/?ScreenId=CS206000|CS206000]) form.{br}

To open this form from the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor], perform the following actions:[anchor|#ol_qw5_2nt_tw]
#Click '''Analytical Reports''' in the navigation pane to open the Analytical Reports page.
#On the page toolbar, click '''Manage Report Definitions'''.
{br}

As soon as you add a new analytical report to the system or change an existing analytical report on the [HelpRoot_FormReference\CS_20_60_00|Report Definitions] form, the report is saved in the database for the current tenant, and you can add the report to the customization project as a ''ReportDefinition'' item. For more information about analytical reports, see [HelpRoot_ReportingTools\GL__GL_ARM_Reports|Managing Analytical Reports] in the Reporting Tools Guide.]]></column>
		</row>
		<row PageID="43fc945a-f762-4924-b538-21632beb8441" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="9da68ae0-376c-648f-c603-0203cff4d86b" RecordSourceID="22377">
			<column name="Content"><![CDATA[[anchor|#_3ea4a830-bf8e-487b-b9f2-2566013275c2]
Push notifications are notifications in JSON format that are sent by Acumatica ERP to notification destinations when specific data changes occur in Acumatica ERP. External applications can receive the notifications and process them to retrieve the information about the changes.{br}

For more information about push notifications in Acumatica ERP, see [HelpRoot_Dev_Integration\IS__mng_Push_Notificatons|Configuring Push Notifications].{br}

You can add the push notification definitions to a customization project as ''PushNotification'' items. A ''PushNotification'' item contains the data set of a push notification definition. A push notification definition includes the push notification destination and the data query, which defines the data changes for which Acumatica ERP sends notifications.{br}

You use the Push Notifications page of the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor] to manage ''PushNotification'' items in the customization project. This page displays the list of the push notification definitions that have been added to the customization project. {br}

On the page, you can perform a variety of operations, as described in the following topics:[anchor|#_3863cd05-b1fb-4cd2-9e8e-4701dddeaaab]
*[HelpRoot_Dev_Customization\CG_GL_Items_PushNotifications_Adding|To Add Push Notification Definitions to a Project]
*[HelpRoot_Dev_Customization\CG_GL_Items_PushNotifications_Deleting|To Delete Push Notification Definitions from a Project]
*[HelpRoot_Dev_Customization\CG_GL_Items_PushNotifications_Updating|To Update Push Notification Definitions in a Project]
*[HelpRoot_Dev_Customization\CG_GL_PushNotifications_Redirecting|To Navigate to the Push Notifications Form]
]]></column>
			<column name="PlainText"><![CDATA[Push Notifications Push notifications are notifications in JSON format             that are sent by  Acumatica ERP             to notification destinations when specific data changes occur in  Acumatica ERP.             External applications can receive the notifications and process them to retrieve the             information about the changes. For more information about push notifications in  Acumatica ERP, see  Configuring Push Notifications. You can add the push notification definitions to a customization project as          PushNotification  items. A  PushNotification  item contains the data set of a       push notification definition. A push notification definition includes the push notification       destination and the data query, which defines the data changes for which  Acumatica ERP sends notifications. You use the Push Notifications page of the   Customization Project                         Editor to       manage  PushNotification  items in the customization project. This page displays the list       of the push notification definitions that have been added to the customization project.  On the page, you can perform a variety of operations, as described in the following         topics: To Add Push Notification Definitions to a ProjectTo Delete Push Notification Definitions from a ProjectTo Update Push Notification Definitions in a ProjectTo Navigate to the Push Notifications Form]]></column>
		</row>
		<row PageID="83d9de9b-fc0a-45bb-9371-ea94f1fe0415" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="a15c3ed1-4da5-5dbb-4e8c-faa105641359" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can add any number of push notification definitions to a customization project as ''PushNotification'' items. A ''PushNotification'' item contains all the data required to recreate the corresponding push notification definition in any instance of Acumatica ERP. {br}

To add a push notification definition to the project, perform the following actions:[anchor|#_163cfd8f-c16c-4106-956f-f153f108b985]
#Open the customization project in the Customization Project Editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)
#In the navigation pane, click '''Push Notifications''' to open the Push Notifications page.
#On the page toolbar, click '''Add New Record''' (+).
#In the list of push notification definitions in the '''Add Push Notifications''' dialog box, which has opened, select the unlabeled check box in the row of each definition that you want to include in the project.
#:((({S:Warn}The '''Add Push Notifications''' dialog box displays all the push notification definitions that are configured in your instance of Acumatica ERP. 
)))
#Click '''OK''' to add each selected notification definition to the page table and close the dialog box.
#On the page toolbar, click '''Save''' to save your changes to the customization project.
#For each data query that defines the data changes for which Acumatica ERP should send notifications in the added push notification definition or definitions, do one of the following:
#*If the data query has been defined with a generic inquiry, add the generic inquiry to the customization project, as described in [HelpRoot_Dev_Customization\CG_GL_Items_GI_Ading|To Add a Generic Inquiry to a Project].
#*If the data query has been defined with a built-in definition, make sure that the built-in definition is available in the customization project: The built-in definition can be added as either a ''Code'' item (if the definition is added directly to the customization project as a class) or a ''File'' item (if the definition is added to the customization project as a class in a DLL file).
#Optional: In the Customization Project Editor, click '''File &gt; Edit Project Items''' on the menu. In the Project Items table of the Item XML Editor, verify that the system has added to the project the data from the database for each selected push notification definition. For details on the Item XML Editor, see [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_XML_Item|Item XML Editor].
]]></column>
			<column name="PlainText"><![CDATA[To Add Push Notification Definitions to a Project You can add any number of push notification definitions to a customization project as                      PushNotification  items. A  PushNotification  item contains all the                 data required to recreate the corresponding push notification definition in any                 instance of  Acumatica ERP.  To add a push notification definition to the project, perform the following                     actions: Open the customization project in the  Customization Project Editor. (See  To Open a Project for details.) In the navigation pane, click  Push Notifications  to                         open the Push Notifications page. On the page toolbar, click  Add New Record  (+). In the list of push notification definitions in the  Add Push                             Notifications  dialog box, which has opened, select the                         unlabeled check box in the row of each definition that you want to include                         in the project. The  Add Push Notifications                              dialog box displays all the push notification definitions that are                             configured in your instance of  Acumatica ERP.  Click  OK  to add each selected notification definition                         to the page table and close the dialog box. On the page toolbar, click  Save  to save your changes                         to the customization project. For each data query that defines the data changes for which  Acumatica ERP should send notifications in the added push notification definition or                         definitions, do one of the following: If the data query has been defined with a generic inquiry, add the                                 generic inquiry to the customization project, as described in  To Add a Generic Inquiry to a Project. If the data query has been defined with a built-in definition, make                                 sure that the built-in definition is available in the customization                                 project: The built-in definition can be added as either a                                      Code  item (if the definition is added directly to the                                 customization project as a class) or a  File  item (if the                                 definition is added to the customization project as a class in a DLL                                 file). Optional: In the  Customization Project Editor, click  File > Edit Project Items  on the menu. In the Project Items table of the Item XML                         Editor, verify that the system has added to the project the data from the                         database for each selected push notification definition. For details on the                         Item XML Editor, see  Item XML Editor. ]]></column>
		</row>
		<row PageID="6e433067-15f0-46c6-a153-b0130a7dee3b" Language="en-US" PageRevisionID="1" Content="&#xA;To remove a ''PushNotification'' item or multiple ''PushNotification'' items from a project, perform the following actions:[anchor|#_3ca4410c-9030-4cde-a931-f63eebfd5b72]&#xA;#Open the customization project in the Customization Project Editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)&#xA;#In the navigation pane, click '''Push Notifications''' to open the Push Notifications page.&#xA;#In the page table, click the item to be deleted.&#xA;#On the page toolbar, click '''Delete Row''' (X).&#xA;#Repeat the two previous steps for each item to be deleted.&#xA;#On the page toolbar, click '''Save''' to save your changes to the customization project.&#xA;#:((({S:Warn}If you delete a ''PushNotification'' item from the project, the push notification definition remains in the system unless it is deleted on the [HelpRoot_FormReference\SM_30_20_00|Push Notifications] ([~/?ScreenId=SM302000|SM302000]) form.&#xA;)))&#xA;" PlainText="To Delete Push Notification Definitions from a Project To remove a  PushNotification  item or multiple  PushNotification  items                 from a project, perform the following actions: Open the customization project in the  Customization Project Editor. (See  To Open a Project for details.) In the navigation pane, click  Push Notifications  to                         open the Push Notifications page. In the page table, click the item to be deleted. On the page toolbar, click  Delete Row  (X). Repeat the two previous steps for each item to be deleted. On the page toolbar, click  Save  to save your changes                         to the customization project. If you delete a  PushNotification                              item from the project, the push notification definition remains in the                             system unless it is deleted on the   ([~/?ScreenId=SM302000|SM302000]) Push Notifications (SM302000) form. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="6a640eff-7fae-fba7-4bda-f1c452da7506" RecordSourceID="22377" />
		<row PageID="fa5e15bb-fc64-48aa-bae6-790f33364939" Language="en-US" PageRevisionID="1" Content="&#xA;If a push notification included in a customization project has been changed (or if multiple push notification definitions have been changed) on the [HelpRoot_FormReference\SM_30_20_00|Push Notifications] ([~/?ScreenId=SM302000|SM302000]) form, you have to update the appropriate item (or items) in the project. To do this, perform the following actions:[anchor|#_e9e55721-caae-4d18-8a6e-74f11eff4d42]&#xA;#Open the customization project in the Customization Project Editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)&#xA;#In the navigation pane, click '''Push Notifications''' to open the Push Notifications page.&#xA;#On the page toolbar, click '''Reload From Database'''.&#xA;{br}&#xA;&#xA;The platform updates all the ''PushNotification'' items of the project with the data in the database." PlainText="To Update Push Notification Definitions in a Project If a push notification included in a customization project has been changed (or if                 multiple push notification definitions have been changed) on the   ([~/?ScreenId=SM302000|SM302000]) Push Notifications                 (SM302000) form, you have to update the appropriate item (or items) in the                 project. To do this, perform the following actions: Open the customization project in the  Customization Project Editor. (See  To Open a Project for details.) In the navigation pane, click  Push Notifications  to                         open the Push Notifications page. On the page toolbar, click  Reload From Database . The platform updates all the  PushNotification  items of the project with the                 data in the database. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="6ec0b0f2-3508-9e09-1102-b386a19bdb03" RecordSourceID="22377" />
		<row PageID="4fb49217-f851-452e-8d28-3d8f682dec4a" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="9ce4ac09-9221-cfed-870a-a7b344628daf" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You might need to add a push notification definition to Acumatica ERP during customization. To manage push notifications in Acumatica ERP, you use the [HelpRoot_FormReference\SM_30_20_00|Push Notifications] ([~/?ScreenId=SM302000|SM302000]) form. For more information about push notifications, see [HelpRoot_Dev_Integration\IS__mng_Push_Notificatons|Configuring Push Notifications] in the Integration Development Guide.{br}

To open this form directly from the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor], perform the following actions:[anchor|#_fe705eb0-71bd-467d-a521-9ef9a213dc83]
#In the navigation pane, click '''Push Notifications''' to open the Push Notifications page.
#On the page toolbar, click '''Manage Notifications'''.
{br}

This opens the [HelpRoot_FormReference\SM_30_20_00|Push Notifications] form, where you can select a particular push notification definitions or create a new one.{br}

((({S:Warn} As soon as you add a new push notification definition to the system or change an existing push notification definition on the [HelpRoot_FormReference\SM_30_20_00|Push Notifications] form, the push notification definition is saved in the database for the current tenant. You can add the definition to the customization project, as described in [HelpRoot_Dev_Customization\CG_GL_Items_PushNotifications_Adding|To Add Push Notification Definitions to a Project]. If you have changed a push notification definition that is already included in a customization project, you have to update the appropriate item in the project, as described in [HelpRoot_Dev_Customization\CG_GL_Items_PushNotifications_Updating|To Update Push Notification Definitions in a Project].
)))]]></column>
			<column name="PlainText"><![CDATA[To Navigate to the Push Notifications Form You might need to add a push notification definition to  Acumatica ERP during customization. To manage push notifications in  Acumatica ERP, you use the   ([~/?ScreenId=SM302000|SM302000]) Push Notifications                 (SM302000) form. For more information about push notifications, see  Configuring Push Notifications in the Integration Development Guide. To open this form directly from the   Customization Project                         Editor,                 perform the following actions: In the navigation pane, click  Push Notifications  to                         open the Push Notifications page. On the page toolbar, click  Manage Notifications . This opens the   ([~/?ScreenId=SM302000|SM302000]) Push Notifications                 form, where you can select a particular push notification definitions or create a                 new one.  As soon as you add a new push notification definition to the system or change                     an existing push notification definition on the   ([~/?ScreenId=SM302000|SM302000]) Push Notifications                     form, the push notification definition is saved in the database for the current                     tenant. You can add the definition to the customization project, as described in                          To Add Push Notification Definitions to a Project. If you have changed a push notification definition that is already included                     in a customization project, you have to update the appropriate item in the                     project, as described in  To Update Push Notification Definitions in a Project. ]]></column>
		</row>
		<row PageID="920e13d8-387c-404f-8b33-c200ac66df98" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="678bd1ef-f450-5515-8846-a42c7a6362ca" RecordSourceID="22377">
			<column name="Content"><![CDATA[[anchor|#_dd72f0bf-3428-411b-86b3-a0eb1bf6c31c]
To configure the system to monitor a business process, on the [HelpRoot_FormReference\SM_30_20_50|Business Events] ([~/?ScreenId=SM302050|SM302050]) form, you define a ''business event'' that relates to this business process and that causes the system to perform an action or multiple actions in the system. The business event is a data change or a set of conditions checked for on a schedule. For details on the business events, see [HelpRoot_Administration\AI__con_Business_Event_By_Data_Change|Business Events Related to Data Changes] and [HelpRoot_Administration\AI__con_Business_Event_By_Schedule|Business Events Monitored on a Schedule].{br}

You can add the business events to a customization project as ''BpEvent'' items. A ''BpEvent'' item contains the data set of a business event. The item includes the following information:[anchor|#_b78d240f-b937-41b4-af0a-c00ee3760dc0]
*The general information about the business event (such as its name and type)
*The trigger conditions of the business event
*The schedule of the business event (if the conditions of the business event are checked for on a schedule)
*The generic inquiry parameters (if any parameter values have been specified for the business event)
*The email notification templates (if the business event has email notification templates as subscribers)
*The link to the ''GenericInquiryScreen'' item related to the business event, which the system adds to the customization project as a separate item
*The links to the ''XportScenario'' items related to the business event, which the system adds to the customization project as separate items (if the business event has import scenarios as subscribers)
{br}

You use the Business Events page of the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor] to manage ''BpEvent'' items in the customization project. This page displays the list of the business events that have been added to the customization project. {br}

On the page, you can perform a variety of operations, as described in the following topics:[anchor|#_508613f4-e9b4-4e2f-80b6-eabf93581e03]
*[HelpRoot_Dev_Customization\CG_GL_Items_BusinessEvents_Adding|To Add Business Events to a Project]
*[HelpRoot_Dev_Customization\CG_GL_Items_BusinessEvents_Deleting|To Delete Business Events from a Project]
*[HelpRoot_Dev_Customization\CG_GL_Items_BusinessEvents_Updating|To Update Business Events in a Project]
*[HelpRoot_Dev_Customization\CG_GL_BusinessEvents_Redirecting|To Navigate to the Business Events Form]
]]></column>
			<column name="PlainText"><![CDATA[Business Events To configure the system to monitor a business process,             on the   ([~/?ScreenId=SM302050|SM302050]) Business Events (SM302050) form, you define a                  business event  that relates to this business process and that causes the             system to perform an action or multiple actions in the system. The business event is a             data change or a set of conditions checked for on a schedule. For details on the             business events, see  Business Events Related to Data Changes and  Business Events Monitored on a Schedule. You can add the business events to a customization project as  BpEvent  items. A          BpEvent  item contains the data set of a business event. The item includes the       following information: The general information about the business event (such as its name and type) The trigger conditions of the business event The schedule of the business event (if the conditions of the business event are checked           for on a schedule) The generic inquiry parameters (if any parameter values have been specified for the           business event) The email notification templates (if the business event has email notification templates           as subscribers) The link to the  GenericInquiryScreen  item related to the business event, which           the system adds to the customization project as a separate item The links to the  XportScenario  items related to the business event, which the           system adds to the customization project as separate items (if the business event has           import scenarios as subscribers) You use the Business Events page of the   Customization Project                         Editor to manage      BpEvent  items in the customization project. This page displays the list of the business    events that have been added to the customization project.  On the page, you can perform a variety of operations, as described in the following topics: To Add Business Events to a ProjectTo Delete Business Events from a ProjectTo Update Business Events in a ProjectTo Navigate to the Business Events Form]]></column>
		</row>
		<row PageID="cde8431d-2785-4453-a7ba-54c25f6f92d3" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="362d3a4a-8ef3-5f3d-15e9-14a3fd1fc49b" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can add any number of business events to a customization project as ''BpEvent'' items. A ''BpEvent'' item contains all the data required to recreate the corresponding business event in any instance of Acumatica ERP. {br}

To add a business event to the project, perform the following actions:[anchor|#_540faebc-1d9e-4996-badd-27192ab5afb0]
#Open the customization project in the Customization Project Editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)
#In the navigation pane, click '''Business Events''' to open the Business Events page.
#On the page toolbar, click '''Add New Record''' (+).
#In the list of business events in the '''Add Business Events''' dialog box, which has opened, select the unlabeled check box in the row of each business event that you want to include in the project.
#:((({S:Warn}The '''Add Business Events''' dialog box displays all the business events that are configured in your instance of Acumatica ERP. 
)))
#Click '''OK''' to add each selected business event to the page table and close the dialog box.
#Optional: In the Customization Project Editor, click '''File &gt; Edit Project Items''' on the menu. In the Project Items table of the Item XML Editor, verify that for each selected business event, the system has added to the project the data of the business event from the database (''BpEvent'' item), the related generic inquiry (''GenericInquiryScreen'' item), and, if the business scenario has any import scenarios as subscribers, the import scenario (''XportScenario'' item) for each import scenario subscriber. For details on the Item XML Editor, see [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_XML_Item|Item XML Editor].
]]></column>
			<column name="PlainText"><![CDATA[To Add Business Events to a Project You can add any number of business events to a customization project as                      BpEvent  items. A  BpEvent  item contains all the data required to                 recreate the corresponding business event in any instance of  Acumatica ERP.  To add a business event to the project, perform the following actions: Open the customization project in the  Customization Project Editor. (See  To Open a Project for details.) In the navigation pane, click  Business Events  to open                         the Business Events page. On the page toolbar, click  Add New Record  (+). In the list of business events in the  Add Business                             Events  dialog box, which has opened, select the unlabeled                         check box in the row of each business event that you want to include in the                             project. The  Add Business Events  dialog box                             displays all the business events that are configured in your instance of                                  Acumatica ERP.  Click  OK  to add each selected business event to the                         page table and close the dialog box. Optional: In the  Customization Project Editor, click  File > Edit Project Items  on the menu. In the Project Items table of the Item XML                         Editor, verify that for each selected business event, the system has added                         to the project the data of the business event from the database                             ( BpEvent  item), the related generic inquiry                             ( GenericInquiryScreen  item), and, if the business scenario has                         any import scenarios as subscribers, the import scenario                             ( XportScenario  item) for each import scenario subscriber. For                         details on the Item XML Editor, see  Item XML Editor. ]]></column>
		</row>
		<row PageID="214ca4c8-addd-4e88-8ad7-c101d5d0eb9d" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="26f2f9c4-958e-d381-7930-9fce66cd6831" RecordSourceID="22377">
			<column name="Content"><![CDATA[
To remove a ''BpEvent'' item or multiple ''BpEvent'' items from a project, perform the following actions:[anchor|#_47955c82-23c0-47f1-85bc-194399fda45d]
#Open the customization project in the Customization Project Editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)
#In the navigation pane, click '''Business Events''' to open the Business Events page.
#In the page table, click the item to be deleted.
#On the page toolbar, click '''Delete Row''' (X).
#Repeat the two previous steps for each item to be deleted.
#On the page toolbar, click '''Save''' to save your changes to the customization project.
#:((({S:Warn}If you delete a ''BpEvent'' item from the project, the business event remains in the system unless it is deleted on the [HelpRoot_FormReference\SM_30_20_50|Business Events] ([~/?ScreenId=SM302050|SM302050]) form.
)))
#If you want to remove from the customization project the generic inquiry that the removed business event used, perform the instructions in [HelpRoot_Dev_Customization\CG_GL_Iems_GI_Deleting|To Delete a Generic Inquiry from a Project].
#If you want to remove from the customization project any of the import scenario scripts that the removed business event used, for each import scenario script, perform the instructions in [HelpRoot_Dev_Customization\CG_GL_Items_IntScenarios_Deleting|To Delete an Integration Scenario from a Project].
]]></column>
			<column name="PlainText"><![CDATA[To Delete Business Events from a Project To remove a  BpEvent  item or multiple  BpEvent  items from a project,                 perform the following actions: Open the customization project in the  Customization Project Editor. (See  To Open a Project for details.) In the navigation pane, click  Business Events  to open                         the Business Events page. In the page table, click the item to be deleted. On the page toolbar, click  Delete Row  (X). Repeat the two previous steps for each item to be deleted. On the page toolbar, click  Save  to save your changes                         to the customization project. If you delete a  BpEvent  item from                             the project, the business event remains in the system unless it is                             deleted on the   ([~/?ScreenId=SM302050|SM302050]) Business Events                             (SM302050) form. If you want to remove from the customization project the generic inquiry                         that the removed business event used, perform the instructions in  To Delete a Generic Inquiry from a Project. If you want to remove from the customization project any of the import                         scenario scripts that the removed business event used, for each import                         scenario script, perform the instructions in  To Delete an Integration Scenario from a Project. ]]></column>
		</row>
		<row PageID="846ac116-0257-4f62-a992-430b090a165a" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="76e41ebd-9a7b-7da8-5c68-2e12b05a7b9a" RecordSourceID="22377">
			<column name="Content"><![CDATA[
If a business event included in a customization project has been changed (or if multiple business events have been changed) on the [HelpRoot_FormReference\SM_30_20_50|Business Events] ([~/?ScreenId=SM302050|SM302050]) form, you have to update the appropriate item (or items) in the project. To do this, perform the following actions:[anchor|#_f50c7b7d-8ed2-45a8-929d-e3ddf51fa271]
#Open the customization project in the Customization Project Editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)
#In the navigation pane, click '''Business Events''' to open the Business Events page.
#On the page toolbar, click '''Reload From Database'''.
{br}

The platform updates all the ''BpEvent'' items of the project with the data in the database.((({S:Warn}If you have changed the generic inquiry used in the business event or the import scenario of the business event, you need to update each changed item separately on the corresponding page of the Customization Project Editor, as described in [HelpRoot_Dev_Customization\CG_GL_Items_GI_Updating|To Update Generic Inquiry Items in a Project] and [HelpRoot_Dev_Customization\CG_GL_Items_IntScenarios_Updating|To Update an Integration Scenario in a Project], respectively. If you have changed the notification template of the business event, the system updates the notification template in the customization project automatically when you update the business event.
)))]]></column>
			<column name="PlainText"><![CDATA[To Update Business Events in a Project If a business event included in a customization project has been changed (or if                 multiple business events have been changed) on the   ([~/?ScreenId=SM302050|SM302050]) Business Events (SM302050) form, you have to update                 the appropriate item (or items) in the project. To do this, perform the following                     actions: Open the customization project in the  Customization Project Editor. (See  To Open a Project for details.) In the navigation pane, click  Business Events  to open                         the Business Events page. On the page toolbar, click  Reload From Database . The platform updates all the  BpEvent  items of the project with the data in the                     database. If you have changed the generic inquiry used in the business                     event or the import scenario of the business event, you need to update                     each changed item separately on the corresponding page of the  Customization Project Editor, as described in  To Update Generic Inquiry Items in a Project and  To Update an Integration Scenario in a Project, respectively. If you have                     changed the notification template of the business event, the system updates the                     notification template in the customization project automatically when you update                     the business event. ]]></column>
		</row>
		<row PageID="beb8765f-34fb-4e86-af99-c69d3b47e077" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="40f35d87-a8f4-8196-6c20-058b72bac798" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You might need to add a business event to Acumatica ERP during customization. To manage business events in Acumatica ERP, you use the [HelpRoot_FormReference\SM_30_20_50|Business Events] ([~/?ScreenId=SM302050|SM302050]) form. For more information about business events, see [HelpRoot_Administration\AI__con_Event_Monitoring|Monitoring and Managing Events] in the User Guide.{br}

To open this form directly from the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor], perform the following actions:[anchor|#_fe705eb0-71bd-467d-a521-9ef9a213dc83]
#In the navigation pane, click '''Business Events''' to open the Business Events page.
#On the page toolbar, click '''Manage Business Events'''.
{br}

This opens the [HelpRoot_FormReference\SM_30_20_50|Business Events] form where you can select a particular business event or create a new one. {br}

((({S:Warn}As soon as you add a new business event to the system or change an existing business event on the [HelpRoot_FormReference\SM_30_20_50|Business Events] form, the business event is saved in the database for the current tenant. You can add the business event to the customization project, as described in [HelpRoot_Dev_Customization\CG_GL_Items_BusinessEvents_Adding|To Add Business Events to a Project]. If you have changed a business event that is already included in a customization project, you have to update the appropriate item in the project, as described in [HelpRoot_Dev_Customization\CG_GL_Items_BusinessEvents_Updating|To Update Business Events in a Project].
)))]]></column>
			<column name="PlainText"><![CDATA[To Navigate to the Business Events Form You might need to add a business event to  Acumatica ERP during customization. To manage business events in  Acumatica ERP, you use the   ([~/?ScreenId=SM302050|SM302050]) Business Events (SM302050) form. For                 more information about business events, see  Monitoring and Managing Events in the User                 Guide. To open this form directly from the   Customization Project                         Editor,                 perform the following actions: In the navigation pane, click  Business Events  to open                         the Business Events page. On the page toolbar, click  Manage Business                         Events . This opens the   ([~/?ScreenId=SM302050|SM302050]) Business Events form where you can select                 a particular business event or create a new one.  As soon as you add a new business event to the system or change an existing                     business event on the   ([~/?ScreenId=SM302050|SM302050]) Business Events form, the                     business event is saved in the database for the current tenant. You can add the                     business event to the customization project, as described in  To Add Business Events to a Project. If you have changed a                     business event that is already included in a customization project, you have to                     update the appropriate item in the project, as described in  To Update Business Events in a Project. ]]></column>
		</row>
		<row PageID="ba454efd-c77e-4503-a6b7-0ad085d0323b" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="e3e9a06b-4a9c-4ea0-b6e3-d82936a8dabf" RecordSourceID="22377">
			<column name="Content"><![CDATA[
An Acumatica mobile client application uses the Mobile API to access the data of the forms that are mapped for mobile apps in the instance of Acumatica ERP. The metadata of the mobile site map is used to configure the user interface of the mobile client application. You can expose any form of Acumatica ERP on your mobile device if the mobile site map includes the metadata for the form. Accessing and using Acumatica ERP mobile app is provided by the Acumatica Mobile                         Framework.{br}

You can customize the Acumatica ERP mobile app by adding new screens to it or updating existing screens. You perform customization of the mobile app using the Mobile Application page of the Customization Project Editor.{br}

On the page you can perfrom a variety of operations, as described in the following topics:[anchor|#_bbc1af21-ad37-4650-8e0d-9c83c1b04306]
*[HelpRoot_Dev_Customization\CG_CL_MobileApp_AddFormToSiteMap|To Add a Form To Mobile Site Map]
*[HelpRoot_Dev_Customization\CG_GL_Items_MobileApp_UpdateMenu|To Update Main Menu of a Mobile App]
*[HelpRoot_Dev_Customization\CG_GL_Items_MobileApp_UpdatingScreen|To Update a Mobile App Screen ]
*[HelpRoot_Dev_Customization\CG_GL_Items_MobileApp_RemoveScreen|To Remove a Screen of a Mobile App]
*[HelpRoot_Dev_Customization\CG_GL_Items_MobileApp_ClearingTenant|To Reverse Changes Made to Mobile App]

For details on how to customize a mobile app using Acumatica Mobile                         Framework see in the [HelpRoot_Dev_Mobile\Mobile_Framework_Guide|Working with Mobile Framework] guide.]]></column>
			<column name="PlainText"><![CDATA[Mobile Application An  Acumatica mobile client application uses the Mobile API to access the data of the forms that             are mapped for mobile apps in the instance of  Acumatica ERP. The metadata of the mobile site map is used to configure the user interface of the             mobile client application. You can expose any form of  Acumatica ERP on your mobile device if the mobile site map includes the metadata for the form.             Accessing and using  Acumatica ERP mobile app is provided by the  Acumatica Mobile                         Framework. You can customize the  Acumatica ERP mobile app by adding new screens to it or updating existing screens. You perform             customization of the mobile app using the Mobile Application page of the  Customization Project Editor. On the page you can perfrom a variety of operations, as described in the following             topics: To Add a Form To Mobile Site MapTo Update Main Menu of a Mobile AppTo Update a Mobile App Screen To Remove a Screen of a Mobile AppTo Reverse Changes Made to Mobile AppFor details on how to customize a mobile app using  Acumatica Mobile                         Framework see in the  Working with Mobile Framework             guide. ]]></column>
		</row>
		<row PageID="933cf90e-5a0a-4791-967f-b1932b5b9897" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="77c4d202-cd9c-b3d1-98fe-64ecfe437137" RecordSourceID="22377">
			<column name="Content"><![CDATA[
Suppose that you need to add to the mobile app a screen that corresponds to an Acumatica ERP form. The form ID is ''XXX''. The desired mobile screen has to contain the <tt>Date</tt> and <tt>Description</tt> fields and the <tt>Insert</tt> and <tt>Delete</tt> actions of the original ''XXX'' form of Acumatica ERP.[anchor|#_7dadd475-e815-4d01-92bc-cde66be69147][anchor|#_d56a5379-bc80-4ee4-83b3-2df87bf1cc6c][image:Shared/Images/Mobile_MSDL_ConfiguringScreen.png|popup|Use of MSDL to configure a screen in the mobile app|450px]{br}

The diagram shows how the Acumatica Mobile                         Framework uses the MSDL code to configure the ''XXX'' screen in the mobile app. (See [HelpRoot_Dev_Mobile\MOBILE_MSDL|Configuring the Mobile Site Map] for details.) You declare the desired screen, containers, fields, actions and other objects by using Mobile Site Map Definition Language (MSDL) in the Customization Project Editor. The objects you want to be displayed on the mobile app screen must be present on the original Acumatica ERPform (See [HelpRoot_Dev_Mobile\MOBILE_BasicInfo|Getting the WSDL Schema]). {br}

After you publish your customization project, the screen you have defined using MSDL appears in the mobile app.
==To Add a Screen to the Mobile Site Map==[anchor|#_cd9a5b05-f6d3-44fe-8d98-dcdadf13d503]
#Get the WSDL schema for the original ''XXX'' screen of Acumatica ERP, as described in [HelpRoot_Dev_Mobile\MOBILE_BasicInfo|Getting the WSDL Schema].
#Open the Customization Project Editor.
#On the page toolbar of the Mobile Application page, click '''Customize''' > '''Add New Screen'''.
#In the '''Add New Screen''' dialog box, which opens, enter the form ID of the Acumatica ERP form (and thus of the corresponding screen in the mobile app) that you want to add to the mobile app, and click '''OK'''.
#:The Add: &lt;screen&#95;name&gt; page opens. The row with the ''add'' screen and its details appears in the list of modified screens on the Mobile Application page of the Customization Project Editor.
#Notice that the initial code of the screen includes only one {{add}} instruction. {{{{add screen &lt;screen_ID&gt; {
# you can add commands here
# ObjectAttribute = Value
}
}}}} (See [HelpRoot_Dev_Mobile\MOBILE_Ref_MSDL_Instr_ADD|add] for details about the instruction.)
#Implement the code of the new screen in the '''Commands''' area of the Add page. For details, see [HelpRoot_Dev_Mobile\mobile_msdl_screens|Screens].
#:While implementing the code, use the WSDL schema to understand which actions and fields are available for the form you are adding. For details, see [HelpRoot_Dev_Mobile\MOBILE_BasicInfo|Getting the WSDL Schema].
#Save your changes.
#:Your commands are applied to the site map. If any errors have occurred, you can see them in the '''Errors''' area of the page. If your changes have been applied successfully, you can see the updated site map of the main menu in the '''Result Preview''' area of the form.
#On the Update: MENU page, add a shortcut for the new screen in the main menu, as illustrated in the following code.{{{{add item &lt;screen_ID&gt; {
    visible = True    
    displayName = "screen_title"  }
}}}}
#Save your changes, and publish the project.

==Related Articles==]]></column>
			<column name="PlainText"><![CDATA[To Add a Form To Mobile Site Map Suppose that you need to add to the mobile app a screen that corresponds to an  Acumatica ERP form. The form ID is  XXX . The desired mobile screen has to contain the                      Date  and  Description  fields and the                      Insert  and  Delete  actions of the original                      XXX  form of  Acumatica ERP. Use of MSDL to configure a screen in the mobile app The diagram shows how the  Acumatica Mobile                         Framework uses the MSDL code to configure the  XXX  screen in the mobile app. (See                      Configuring the Mobile Site Map for details.) You                 declare the desired screen, containers, fields, actions and other objects by using                 Mobile Site Map Definition Language (MSDL) in the Customization Project Editor. The                 objects you want to be displayed on the mobile app screen must be present on the                 original  Acumatica ERPform                  (See  Getting the WSDL Schema).                  After you publish your customization project, the screen you have                 defined using MSDL appears in the mobile app. To Add a Screen to the Mobile Site Map Get the WSDL schema for the original  XXX  screen of Acumatica ERP, as                         described in  Getting the WSDL Schema. Open the Customization Project Editor. On the page toolbar of the Mobile Application page, click  Customize Add New Screen . In the  Add New Screen  dialog box, which opens, enter                         the form ID of the  Acumatica ERP form (and thus of the corresponding screen in the mobile app) that you                         want to add to the mobile app, and click  OK . The                             Add: <screen_name> page opens. The row with the  add  screen and                             its details appears in the list of modified screens on the Mobile                             Application page of the Customization Project Editor. Notice that the initial code of the screen includes only one                              add  instruction.                          add screen <screen_ID> {
# you can add commands here
# ObjectAttribute = Value
}                          (See  add                         for details about the instruction.) Implement the code of the new screen in the  Commands                          area of the Add page. For details, see  Screens. While                             implementing the code, use the WSDL schema to understand which actions                             and fields are available for the form you are adding. For details, see                                  Getting the WSDL Schema. Save your changes. Your commands are applied to the site map. If any                             errors have occurred, you can see them in the                                  Errors  area of the page. If your changes have                             been applied successfully, you can see the updated site map of the main                             menu in the  Result Preview  area of the                         form. On the Update: MENU                         page ,                          add a shortcut for the new screen in the main menu, as illustrated in the                         following                         code. add item <screen_ID> {
    visible = True    
    displayName = "screen_title"  } Save your changes, and publish the project. ]]></column>
		</row>
		<row PageID="3e4450da-b46f-4744-b5b8-0b810d449544" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="8f9db819-2fb7-0edf-3cef-fb906d71f487" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can update the main menu of the customized Acumatica mobile app by using the Customization Project Editor.{br}{TOC}
==To Update the Main Menu of a Mobile App==[anchor|#_40dfc004-6bc7-4227-a237-9b9f168c77cf]
#Open the Customization Project Editor.
#On the page toolbar of the Mobile Application page, click '''Customize''' > '''Update Main Menu'''.
#:The Update: MENU page opens. The ''Update MENU'' appears in the list of modified screens on the Mobile Application page of the Customization Project Editor.
#In the '''Result Preview''' area of the Update: MENU page, explore the original code of the main menu.
#In the '''Commands''' area of the Update: MENU page, implement your code using Mobile Site Map Definition Language (MSDL). For details, see [HelpRoot_Dev_Mobile\mobile_msdl_mainmenu|Main Menu].
#Save your changes.
#:Your commands are applied to the menu. If any errors have occurred, you can see them in the '''Errors''' area of the form. If your changes have been applied successfully, you can see the updated site map of the main menu in the '''Result Preview''' area of the form. 
#Publish your customization project.

==Related Articles==]]></column>
			<column name="PlainText"><![CDATA[To Update Main Menu of a Mobile App You can update the main menu of the customized  Acumatica mobile app by using the Customization Project Editor. To Update the Main Menu of a Mobile App Open the Customization Project Editor. On the page toolbar of the Mobile Application page, click  Customize Update Main Menu . The                              Update :                              MENU  page opens. The  Update MENU  appears in                             the list of modified                              screens                              on the Mobile Application page of the Customization Project                         Editor. In the  Result Preview  area of the Update: MENU page, explore the original                         code of the main menu. In the  Commands  area of the Update: MENU page, implement your code using                         Mobile Site Map Definition Language (MSDL). For details, see  Main Menu. Save your changes. Your commands are applied to the menu. If any errors have occurred, you can                             see them in the  Errors  area of the form. If your                             changes have been applied successfully, you can see the updated site map                             of the main menu in the  Result Preview  area of                             the form.  Publish your customization project. ]]></column>
		</row>
		<row PageID="fbd1ea6d-5ffd-4e25-b26d-0c93ed310d11" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="d173d5a8-c322-14ab-e247-763287ce88e8" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can update an existing screen of a customized mobile app by using the Customization Project Editor.{br}{TOC}
==To Update a Screen of a Mobile App==[anchor|#_7e38d1ea-5ebd-48d1-94be-febc5d34a8f5]
#Open the Customization Project Editor.
#On the page toolbar of the Mobile Application page, click '''Customize''' > '''Update Existing Screen'''.
#In the '''Update Existing Screen''' dialog box, which appears, specify the ID of the screen you want to update, and click OK.
#:The Update: &lt;screen&#95;name&gt; page opens. The new ''update'' screen with its details appears in the list of modified screens on the '''Mobile Application''' page of the Customization Project Editor.
#Explore the original code of the screen in the '''Result Preview''' area of the Update page.
#Implement your code using Mobile Site Map Definition Language (MSDL) in the '''Commands''' area of the Update page. For details, see [HelpRoot_Dev_Mobile\mobile_msdl_screens|Screens].
#Save your changes.
#:Your commands are applied to the site map. If any errors have occurred, you can see them in the '''Errors''' area of the page. If your changes have been applied successfully, you can see the updated site map of the main menu in the '''Result Preview''' area of the form.
#Publish the customization project.

==Related Articles==]]></column>
			<column name="PlainText"><![CDATA[To Update a Mobile App Screen  You can update                      an                     existing                      scre en                      of a customized mobile app by using the Customization Project                     Editor. To Update a Screen of a Mobile App Open the Customization Project Editor. On the page toolbar of the Mobile Application page, click  Customize Update Existing Screen . In the  Update Existing Screen  dialog box, which appears, specify the ID                         of the screen you want to update, and click OK. The Update:                             <screen_name> page opens. The new  update  screen with its                             details appears in the list of modified screens on the  Mobile                                 Application  page of the Customization Project                             Editor. Explore the original code of the screen in the  Result Preview  area of the                         Update page. Implement your code using Mobile Site Map Definition Language (MSDL) in the                              Commands  area of the Update page. For details,                         see  Screens. Save your changes. Your commands are applied to the site map. If any errors have occurred, you                             can see them in the  Errors  area of the page. If                             your changes have been applied successfully, you can see the updated                             site map of the main menu in the  Result Preview                              area of the form. Publish the customization project. ]]></column>
		</row>
		<row PageID="5e1a3753-6792-4c62-9972-a271252f0ddb" Language="en-US" PageRevisionID="1" Content="&#xA; You can remove a screen of a customized mobile app by using the Customization Project Editor.{br}{TOC}&#xA;==To Remove a Screen of a Mobile App==[anchor|#_79072ecd-d6b3-4113-9cc2-ef8d05dd0f7d]&#xA;#Open the Customization Project Editor.&#xA;#On the page toolbar of the Mobile Application page, click '''Customize''' &gt; '''Remove Existing Screen'''.&#xA;#In the '''Remove Existing Screen''' dialog box, which appears, specify the ID of the screen you want to remove, and click '''OK'''.&#xA;#:The selected screen is removed.The ''Remove &amp;lt;screen&amp;#95;name&amp;gt;''row appears in the list of modified screens on the Mobile Application page of the Customization Project Editor.&#xA;&#xA;==Related Articles==" PlainText="To Remove a Screen of a Mobile App  You can remove a screen of a customized mobile app by using the Customization Project                     Editor. To Remove a Screen of a Mobile App Open the Customization Project Editor. On the page toolbar of the Mobile Application page, click  Customize Remove Existing Screen . In the  Remove Existing Screen  dialog box, which appears, specify the ID                         of the screen you want to remove, and click  OK . The                             selected screen is removed. The                                  Remove                                 &lt;screen_name&gt; row                              appears in the list of modified screens on the Mobile Application page                             of the Customization Project Editor. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="403a27e5-2bfa-996b-a373-e2209518283a" RecordSourceID="22377" />
		<row PageID="2686ce8a-9a09-42ce-8728-688f1f0d1748" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="6d5192fb-0dbd-c7a6-9d5d-6ad7bd0fc292" RecordSourceID="22377">
			<column name="Content"><![CDATA[
When you are customizing the mobile site map in the Customization Project Editor, you might need to go back to the out-of-the-box site map and base functionality. You can return to the original site map to one tenant or to all tenants without removing the other changes you have made in the customization project.
==To Reverse Changes Made to the Mobile Site Map==[anchor|#_1aa9e845-af2c-4959-b3c0-70b42c214d95]
#Open the Customization Project Editor.
#Click '''Mobile Application''' in the navigation pane to open the Mobile Application page.
#If you want to reverse the changes to the current tenant only, on the page toolbar, click '''Clear Current Tenant'''. If you want to reverse the changes to all tenants, on the page toolbar, click '''Clear All Tenants'''.

The mobile app customization is unpublished from the selected tenants.{br}

To return to your changes, publish your customization project, as described in [HelpRoot_Dev_Customization\CG_GL_Projects_Publishing_Current|To Publish the Current Project].]]></column>
			<column name="PlainText"><![CDATA[To Reverse Changes Made to Mobile App When you are customizing the mobile site map in the Customization Project Editor, you might need                     to go back to the out-of-the-box site map and base functionality. You can return                     to the original site map to one tenant or to all tenants without removing the                     other changes you have made in the customization project. To Reverse Changes Made to the Mobile Site Map Open the Customization Project Editor. Click  Mobile Application  in the navigation pane to                         open the Mobile Application page. If you want to reverse the changes to the current tenant only, on the page                         toolbar, click  Clear Current Tenant . If you want to                         reverse the changes to all tenants, on the page toolbar, click                              Clear All Tenants . The mobile app customization is unpublished from the selected tenants. To return to your changes, publish your customization project, as described in                          To Publish the Current Project. ]]></column>
		</row>
		<row PageID="ec199ee5-3238-415b-9318-78c4c03bc22b" Language="en-US" PageRevisionID="1" PlainText="User-Defined Fields The  Customization Project Editor     includes the User-Defined Fields page, which is shown in the screenshot below. On this page, you     can do the following: Update fields properties that have been updated by users in an instance of  Acumatica ERP by clicking the  Reload From Database  action. Add a new user-defined field based on existing attributes. For details on defining      attributes, see  Attributes. View detailed information about a user-defined field. Modify the list of screens on which the field is displayed. Remove an existing user-defined field. You can add a user-defined field either on the applicable form of  Acumatica ERP     or on the User-Defined Fields page of the Customization Project Editor. Any user-defined fields     you add in the Customization Project Editor are added to the current customization project with     all other items; when the project has been completed, it can be exported and imported. The User-Defined Fields page " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="47d8bfff-1fae-8382-624b-4a08ff7df45e" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The Customization Project Editor includes the User-Defined Fields page, which is shown in the screenshot below. On this page, you can do the following:[anchor|#_a7fc7c66-83f7-4b2e-a0e8-d448166e313f]
*Update fields properties that have been updated by users in an instance of Acumatica ERP by clicking the '''Reload From Database''' action.
*Add a new user-defined field based on existing attributes. For details on defining attributes, see [HelpRoot_Administration\CS__con_Attributes|Attributes].
*View detailed information about a user-defined field.
*Modify the list of screens on which the field is displayed.
*Remove an existing user-defined field.

You can add a user-defined field either on the applicable form of Acumatica ERP or on the User-Defined Fields page of the Customization Project Editor. Any user-defined fields you add in the Customization Project Editor are added to the current customization project with all other items; when the project has been completed, it can be exported and imported.{br}{TOC}[anchor|#_6d5e4b19-a745-4386-8d9f-72e520957808][anchor|#_d367be83-8f44-4c3a-8a0d-3d01a75dc9c2][image:CustomizationPlatform/images/UserDefinedFieldsPage.png|popup|The User-Defined Fields page|450px]
==Related Articles==
*[HelpRoot_Administration\CS__con_Attributes|Attributes]]]></column>
		</row>
		<row PageID="e01f29d3-b6b1-40f4-a2d1-45c9d01bdde3" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="b01e98ee-d441-92e4-5d3a-6b18eeb26185" RecordSourceID="22377">
			<column name="Content"><![CDATA[
To add a user-defined field to customization project, you can use a field previously defined in Acumatica ERP, or create a field in Customization Project Editor. After that you can include the field in the current customization project.
==To Add a New User-Defined Field==
To add a new user-defined field, proceed as follows:[anchor|#_ba406251-1122-4f8b-a438-6f4696c14a0c]
#On the navigation pane of the Customization Project Editor, click '''User-Defined Fields''' to open the User-Defined Fields page.
#On the page toolbar, click '''Add New Record'''.
#In the '''Add User-Defined Fields''' dialog box, which opens, select an attribute for the user-defined field you are adding, and click '''Save'''.
#:The user-defined field appears in the list on the User-Defined Fields page, and the dialog box is closed. Now you need to specify the IDs of the screens on which the field will appear. By default, the added field appears with all screens where it is used in the instance.
#In the row with the user-defined field, click the link in the '''Attribute ID''' column.
#In the '''Edit Attribute''' dialog box (see the following screenshot), which opens, select the forms for which you want to save the fields in the customization project.
#:((({S:Warn}In this dialog box, you can see only the IDs of the screens for which the user-defined field was added. To add a user-defined field to a screen, on the title bar of the screen, select '''Customization &gt; Manage User-Defined Fields''' and add the field.
)))[anchor|#_c102af30-6acf-4acc-a883-59eaa6cf3315][image:CustomizationPlatform/images/EditAttributeDialog.png|popup|The Edit Attribute dialog box|450px]
#Click '''Save''' to save your changes, close the dialog box, and return to the User-Defined Fields page.
#:The selected form IDs are listed in the '''Screen ID''' column of the user-defined field you edited, as shown in the following screenshot.[anchor|#_a57fd48e-3a37-45d9-beca-cdb71f48fb7e][image:CustomizationPlatform/images/UserDefinedFieldsPageEdited.png|popup|The list of user-defined fields after being edited|450px]
#On the page toolbar, click '''Save'''.

==Related Articles==
*[HelpRoot_Administration\Admin_HOW_AddUserField|To Add User-Defined Fields to a Form]]]></column>
			<column name="PlainText"><![CDATA[To Add a User-Defined Field to a Customization Project To add a user-defined field to customization project, you can use a field previously         defined in  Acumatica ERP, or create a field in Customization Project Editor. After that you can include the field         in the current customization project. To Add a New User-Defined Field To add a new user-defined field, proceed as follows: On the navigation pane of the Customization Project Editor, click              User-Defined Fields  to open the User-Defined Fields page. On the page toolbar, click  Add New Record . In the  Add User-Defined Fields  dialog box, which opens, select an           attribute for the user-defined field you are adding, and click              Save . The user-defined field appears in the list on the             User-Defined Fields page, and the dialog box is closed. Now you need to specify the IDs             of the screens on which the field will appear. By default, the added field appears with             all screens where it is used in the instance. In the row with the user-defined field, click the link in the  Attribute             ID  column. In the  Edit Attribute  dialog box (see the following screenshot),           which opens, select the forms for which you want to save the fields in the customization             project. In this dialog box, you can see only the IDs of the screens for which the             user-defined field was added. To add a user-defined field to a screen, on the title bar             of the screen, select  Customization > Manage User-Defined Fields  and add the field. The Edit Attribute dialog box Click  Save  to save your changes, close the dialog box, and return           to the User-Defined Fields page. The selected form IDs are listed in the                Screen ID  column of the user-defined field you edited, as shown             in the following screenshot. The list of user-defined fields after being edited On the page toolbar, click  Save . ]]></column>
		</row>
		<row PageID="1f6d085c-7968-4a4f-8b77-f37773911fea" Language="en-US" PageRevisionID="1" PlainText="Webhooks The  Customization Project Editor     includes the Webhooks page, which is shown in the screenshot below. On this page, you can do the     following: Update webhook properties that have been updated by users in an instance of  Acumatica ERP      by clicking the  Reload from Database  action. Add a webhook registered on the   ([~/?ScreenId=SM304000|SM304000]) Webhooks (SM304000) form      to the customization project.        For       details on adding a webhook to a customization project, see  To Add a Webhook to a Project. For details on implementing and registering       webhooks, see  Configuring Webhooks. View detailed information about a webhook. Make the implementation class of the webhook unavailable for editing in the instance where      the customization project is published. To do this, you select the        Predefined  box for the webhook. Remove an existing webhook from the customization project. The Webhooks page " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="e1961ff8-aae7-0297-3cf7-f3ef60861ebc" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The Customization Project Editor includes the Webhooks page, which is shown in the screenshot below. On this page, you can do the following:[anchor|#_a7fc7c66-83f7-4b2e-a0e8-d448166e313f]
*Update webhook properties that have been updated by users in an instance of Acumatica ERP by clicking the '''Reload from Database''' action.
*Add a webhook registered on the [HelpRoot_FormReference\SM_30_40_00|Webhooks] ([~/?ScreenId=SM304000|SM304000]) form to the customization project. 
*:For details on adding a webhook to a customization project, see [HelpRoot_Dev_Customization\CG_GL_Items_Webhook_SaveCustomItem|To Add a Webhook to a Project]. For details on implementing and registering webhooks, see [HelpRoot_Dev_Integration\IS___Webhooks|Configuring Webhooks].
*View detailed information about a webhook.
*Make the implementation class of the webhook unavailable for editing in the instance where the customization project is published. To do this, you select the '''Predefined''' box for the webhook.
*Remove an existing webhook from the customization project.
[anchor|#_8dcc9831-2deb-4700-8691-5f6cdb753a00][anchor|#_0431cba7-17f4-4f77-aa01-d68a6dc08fc1][image:CustomizationPlatform/images/CG_GL_Items_Webhooks.png|popup|The Webhooks page|450px]
==Related Articles==
*[HelpRoot_Dev_Integration\IS___Webhooks|Configuring Webhooks]]]></column>
		</row>
		<row PageID="f46e7f1f-b945-4eb5-bb61-184242535080" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="487e82d1-dcd2-de24-ba14-274fe109f578" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can save a webhook to a customization project after you have created and tested the webhook. You perform the steps outlined in this topic to include a webhook in a customization project.{br}{TOC}
==To Add a Webhook to a Project==
To add a webhook to a customization project, do the following:[anchor|#_72794a5c-63aa-430d-b656-a7a6cdce1876]
#Open the customization project in the Customization Project Editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)
#In the navigation pane, click '''Webhooks''' to open the Webhooks page.
#On the page toolbar, click '''Add New Record'''.
#In the '''Add Webhooks''' dialog box, select the webhooks you want to include in the customization project.
#Click '''OK'''.
#:The dialog box is closed, and the selected webhooks appear in the table.
#If you want to make the implementation class of the webhook unavailable for editing in the instance where the customization project is published, select the '''Predefined''' check box, and click '''Save'''. In this instance, an administrative user can still make the webhook inactive and modify the request history settings.
#Save the DLL with the implementation class in the customization project as a ''File'' item. For details, see [HelpRoot_Dev_Customization\CG_GL_Items_Files_Adding|To Add a Custom File to a Project].
]]></column>
			<column name="PlainText"><![CDATA[To Add a Webhook to a Project You can save a webhook to a customization project after you have created and tested the         webhook. You perform the steps outlined in this topic to include a webhook in a         customization project. To Add a Webhook to a Project To add a webhook to a customization project, do the following: Open the customization project in the  Customization Project Editor. (See  To Open a Project for details.) In the navigation pane, click  Webhooks  to open the Webhooks           page. On the page toolbar, click  Add New Record . In the  Add Webhooks  dialog box, select the webhooks you want to           include in the customization project. Click  OK . The dialog box is closed, and the selected webhooks             appear in the table. If you want to make the implementation class of the webhook unavailable for editing in           the instance where the customization project is published, select the              Predefined  check box, and click  Save . In           this instance, an administrative user can still make the webhook inactive and modify the           request history settings. Save the DLL with the implementation class in the customization project as a  File            item. For details, see  To Add a Custom File to a Project. ]]></column>
		</row>
		<row PageID="6b5dbc24-30e9-4f69-8831-010954f13a78" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="af42f5e4-637a-0b3c-8df9-d3d5474de555" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can customize the user interface by creating a new form or by changing the content and layout of a form that already exists in Acumatica ERP.{br}

This part is intended to describe how to use the visual [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_LayoutEditor|Screen Editor] to develop the ASPX code of a custom form and modify the ASPX code of an existing form.{br}

The following table lists most of the types of ASPX objects supported in the Acumatica Customization             Platform.[anchor|#_41733f7b-1e6b-41ed-bf68-4ca4b11147dd]
{| class="checklist" | width="100%" 
|- 
!width="20%" ! Object
!width="80%" ! Description
|- 
| <tt>PXDataSource</tt>
| A data source control that connects to a graph instance on the Acumatica ERP server, retrieves data from the graph instance, and sends data to the graph instance; it also provides the data processing for the control containers that are defined in the ASPX page. In Acumatica ERP, a page must contain a single <tt>PXDataSource</tt> control.
|- 
| <tt>PXFormView</tt>
| A data-bound UI container control that renders a single record from its associated data source.
|- 
| <tt>PXGrid</tt>
| A data-bound UI container control that renders a table with multiple records from its associated data source. The object can be displayed in form view mode for a single record and provides paging buttons that can be used to navigate between records. To define form view mode, the <tt>PXGrid</tt> control must include the <tt>RowTemplate</tt> element, which can contain controls for the record fields and layout rules for these controls.
|- 
| <tt>PXGridColumn</tt>
| In a <tt>PXGrid</tt> container, an object that defines the data field and properties of a column in the grid.
|- 
| <tt>RowTemplate</tt>
| In a <tt>PXGrid</tt> container, an object that defines a record field and layout for each control to be rendered in form view mode for the grid.
|- 
| <tt>PXTab</tt>
| A data-bound UI container control that renders tabs defined by child <tt>PXTabItem</tt> containers.
|- 
| <tt>PXTabItem</tt>
| In a <tt>PXTab</tt> container, a container control that renders a single record from the data source specified for the parent <tt>PXTab</tt> container.
|- 
| <tt>PXSmartPanel</tt>
| An UI container control that renders a dialog box.
|- 
| <tt>PXLayoutRule</tt>
| In a container with controls for a single data record, a component that defines a layout rule used to organize the controls within a row or column.
|- 
| <tt>PXPanel</tt>
| In a container with controls for a single data record, a container with a caption used to group controls. In a dialog box, it is often used as a container to display a horizontal row of buttons with right alignment.
|- 
| <tt>PXGroupBox</tt>
| In a container with controls for a single data record, a container with a caption used to group controls. It is designed to be used as a radio button container to render a drop-down field as a set of radio buttons. It contains scripts with logic to support a nested radio button for each value of a drop-down field.
|- 
| <tt>PXRadioButton</tt>
| In a <tt>PXGroupBox</tt> container, a radio button that is used for a single constant value of a drop-down field.((({S:Warn}In Acumatica ERP, a radio button can work properly only in a <tt>PXGroupBox</tt> container that is used for a drop-down data field.
)))
|- 
| <tt>PXLabel</tt>
| In a container with controls for a single data record, an element to display text.
|- 
| <tt>PXButton</tt>
| In a container with controls for a single data record, an element to display a button control. In a dialog box, it is usually included in a <tt>PXPanel</tt> container.
|- 
| <tt>PXJavaScript</tt>
| In a container with controls for a single data record, a control to keep JavaScript code.
|- 
| <tt>PXTextEdit</tt>
| In a container with controls for a single data record, a text box to display and edit the value of a <tt>string</tt> field.
|- 
| <tt>PXNumberEdit</tt>
| In a container with controls for a single data record, a box to display and edit the value of a <tt>decimal</tt> or <tt>int</tt> field.
|- 
| <tt>PXMaskEdit</tt>
| In a container with controls for a single data record, a text box to display and edit the value of a <tt>string</tt> field that has the format specified in the data access class.
|- 
| <tt>PXDateTimeEdit</tt>
| In a container with controls for a single data record, a box to display and select the value of a <tt>datetime</tt> field.
|- 
| <tt>PXCheckBox</tt>
| In a container with controls for a single data record, a check box to display and select the value of a <tt>bool</tt> field.
|- 
| <tt>PXDropDown</tt>
| In a container with controls for a single data record, a combo box to display, edit, and select the value of a field with a list attribute, such as <tt>PXStringList</tt>, <tt>PXIntList</tt>, or <tt>PXDecimalList</tt>.
|- 
| <tt>PXSelector</tt>
| In a container with controls for a single data record, a lookup control to display, search, and select the value of a field with the <tt>PXSelector</tt> attribute.
|- 
| <tt>PXSegmentMask</tt>
| In a container with controls for a single data record, a lookup control with a specified segmented key value that identifies a data record and consists of one segment or multiple segments, with a list of possible values defined for each segment.
|- 
| <tt>PXTreeSelector</tt>
| In a container with controls for a single data record, a lookup control to select a value for a field with a <tt>PXTreeSelector</tt> attribute from a tree control.
|}{br}

When you use the Screen Editor to add a UI element to another UI element on a form, you should understand the rules that are used for nesting objects in ASPX code for Acumatica ERP forms. The following diagram shows which ASPX objects can be included in other ASPX objects.[anchor|#_33c76b50-e1dd-4fdb-b726-6939bb37a47f][anchor|#_a7dbc75e-1bdc-4b4d-9cf5-9aaba0c6f89a][image:CustomizationPlatform/images/CG_GL_Forms_ASPX_Containers_01.png|popup|Nesting rules for elements of an ASPX page|450px]In the diagram, if an arrow goes from object A to object B, it means that multiple instances of object A can be included in a single object B. For example, <tt>PXTab</tt> can contain multiple <tt>PXTabItem</tt> objects.((({S:Warn}[anchor|#_72c02be9-abd5-47f6-8b8a-b8d52687aff8]
*The <tt>PXGrid</tt> object can contain a single <tt>RowTemplate</tt> object.
*The <tt>PXSmartPanel</tt> object is used to describe the content of a dialog box.
*A control for a data field (also referred as ''box'')—such as <tt>PXTextEdit</tt>, <tt>PXSelector</tt>, and <tt>PXCheckBox</tt>—can be included in ASPX objects of the following types: 
**<tt>PXFormView</tt>
** <tt>RowTemplate</tt>
** <tt>PXTabItem</tt>
** <tt>PXSmartPanel</tt>
)))
==In This Part==[anchor|#_81e189df-2640-48d6-8260-b99cfad38de7]
*[HelpRoot_Dev_Customization\CG_GL_UI_Custom|Custom Form]
*[HelpRoot_Dev_Customization\CG_GL_UI_ExistForm|Existing Form]
*[HelpRoot_Dev_Customization\CG_GL_UI_PXForm|Form Container (PXFormView)]
*[HelpRoot_Dev_Customization\CG_GL_UI_PXGrid|Grid Container (PXGrid)]
*[HelpRoot_Dev_Customization\CG_GL_UI_Tab|Tab Container (PXTab)]
*[HelpRoot_Dev_Customization\CG_GL_UI_TabItem|Tab Item Container (PXTabItem)]
*[HelpRoot_Dev_Customization\CG_GL_UI_Dialogs|Dialog Box (PXSmartPanel)]
*[HelpRoot_Dev_Customization\CG_GL_UI_Box|Box (Control for a Data Field)]
*[HelpRoot_Dev_Customization\CG_GL_UI_LayoutRules|Layout Rule (PXLayoutRule)]
*[HelpRoot_Dev_Customization\CG_GL_UI_Panels|Panel (PXPanel)]
*[HelpRoot_Dev_Customization\CG_GL_UI_GroupBoxes|Group Box (PXGroupBox)]
*[HelpRoot_Dev_Customization\CG_GL_UI_Labels|Label (PXLabel)]
*[HelpRoot_Dev_Customization\CG_GL_UI_Radio|Radio Button (PXRadioButton)]
*[HelpRoot_Dev_Customization\CG_GL_UI_PXButton|Button (PXButton)]
*[HelpRoot_Dev_Customization\CG_GL_UI_PXJavaScript|Java Script (PXJavaScript)]
*[HelpRoot_Dev_Customization\CG_GL_UI_Toolbars|Toolbars, Action Buttons, and Menus]
*[HelpRoot_Dev_Customization\CG_GL_UI_OtherTypes|Other Control Types]
]]></column>
			<column name="PlainText"><![CDATA[Customizing Elements of the User Interface You can customize the user interface by creating a new form or by changing the content and       layout of a form that already exists in  Acumatica ERP. This part is intended to describe how to use the visual  Screen Editor to develop the ASPX code of a custom       form and modify the ASPX code of an existing form. The following table lists most of the types of ASPX objects supported in the  Acumatica Customization             Platform. Object Description PXDataSource A data source control that connects to a graph instance on the  Acumatica ERP server, retrieves data from the graph instance, and sends data to the graph                 instance; it also provides the data processing for the control containers that are                 defined in the ASPX page. In  Acumatica ERP, a page must contain a single  PXDataSource  control. PXFormView A data-bound UI container control that renders a single record from its                 associated data source. PXGrid A data-bound UI container control that renders a table with multiple records                 from its associated data source. The object can be displayed in form view mode for a                 single record and provides paging buttons that can be used to navigate between                 records. To define form view mode, the  PXGrid  control must                 include the  RowTemplate  element, which can contain controls for                 the record fields and layout rules for these controls. PXGridColumn In a  PXGrid  container, an object that defines the data field                 and properties of a column in the grid. RowTemplate In a  PXGrid  container, an object that defines a record field                 and layout for each control to be rendered in form view mode for the grid. PXTab A data-bound UI container control that renders tabs defined by child                    PXTabItem  containers. PXTabItem In a  PXTab  container, a container control that renders a                 single record from the data source specified for the parent  PXTab                  container. PXSmartPanel An UI container control that renders a dialog box. PXLayoutRule In a container with controls for a single data record, a component that defines                 a layout rule used to organize the controls within a row or column. PXPanel In a container with controls for a single data record, a container with a                 caption used to group controls. In a dialog box, it is often used as a container to                 display a horizontal row of buttons with right alignment. PXGroupBox In a container with controls for a single data record, a container with a                 caption used to group controls. It is designed to be used as a radio button                 container to render a drop-down field as a set of radio buttons. It contains scripts                 with logic to support a nested radio button for each value of a drop-down                 field. PXRadioButton In a  PXGroupBox  container, a radio button that is used for a                 single constant value of a drop-down field. In  Acumatica ERP, a radio button can work properly only in a  PXGroupBox                    container that is used for a drop-down data field. PXLabel In a container with controls for a single data record, an element to display                 text. PXButton In a container with controls for a single data record, an element to display a                 button control. In a dialog box, it is usually included in a                    PXPanel  container. PXJavaScript In a container with controls for a single data record, a control to keep                 JavaScript code. PXTextEdit In a container with controls for a single data record, a text box to display                 and edit the value of a  string  field. PXNumberEdit In a container with controls for a single data record, a box to display and                 edit the value of a  decimal  or  int                  field. PXMaskEdit In a container with controls for a single data record, a text box to display                 and edit the value of a  string  field that has the format                 specified in the data access class. PXDateTimeEdit In a container with controls for a single data record, a box to display and                 select the value of a  datetime  field. PXCheckBox In a container with controls for a single data record, a check box to display                 and select the value of a  bool  field. PXDropDown In a container with controls for a single data record, a combo box to display,                 edit, and select the value of a field with a list attribute, such as                    PXStringList ,  PXIntList , or                    PXDecimalList . PXSelector In a container with controls for a single data record, a lookup control to                 display, search, and select the value of a field with the                    PXSelector  attribute. PXSegmentMask In a container with controls for a single data record, a lookup control with a                 specified segmented key value that identifies a data record and consists of one                 segment or multiple segments, with a list of possible values defined for each                 segment. PXTreeSelector In a container with controls for a single data record, a lookup control to                 select a value for a field with a  PXTreeSelector  attribute from a                 tree control. When you use the Screen Editor to add a UI element to another UI element on a form, you       should understand the rules that are used for nesting objects in ASPX code for  Acumatica ERP forms. The following diagram shows which ASPX objects can be included in other ASPX         objects. Nesting rules for elements of an ASPX page In the diagram, if an arrow goes from object A to object B, it means that multiple       instances of object A can be included in a single object B. For example,          PXTab  can contain multiple  PXTabItem  objects. The  PXGrid  object can contain a single                RowTemplate  object. The  PXSmartPanel  object is used to describe the content of a dialog             box. A control for a data field (also referred as  box )—such as                PXTextEdit ,  PXSelector , and                PXCheckBox —can be included in ASPX objects of the following types:                PXFormView RowTemplate PXTabItem PXSmartPanel In This Part Custom FormExisting FormForm Container (PXFormView)Grid Container (PXGrid)Tab Container (PXTab)Tab Item Container (PXTabItem)Dialog Box (PXSmartPanel)Box (Control for a Data Field)Layout Rule (PXLayoutRule)Panel (PXPanel)Group Box (PXGroupBox)Label (PXLabel)Radio Button (PXRadioButton)Button (PXButton)Java Script (PXJavaScript)Toolbars, Action Buttons, and MenusOther Control Types]]></column>
		</row>
		<row PageID="775700e1-7cd4-4a8e-9a09-561238a289ce" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="6eecbb5a-95df-eeeb-8904-bbe690499d98" RecordSourceID="22377">
			<column name="Content"><![CDATA[
By using the Acumatica Customization             Platform, you can develop a custom form from scratch and add it to a customization project. To create a new form, you have to create the following types of code:[anchor|#_eea20dd8-171f-4ada-a3a0-3739e9384b1f]
*ASPX page that contains a description of the UI elements of the form
*CS code that provides the business logic for the form
{br}

For each form that works with data from the database, the instance of Acumatica ERP must contain at least the following objects (see the diagram below):[anchor|#ul_emt_zm5_tv]
*An ASPX page: The page must contain at least the data source control and a container with controls for data fields.
*A business logic controller (BLC, also referred to as ''graph''): The graph must be specified in the {{TypeName}} property of the data source control of the page. The graph must contain at least one data view, which is specified in the {{PrimaryView}} property of the data source control and in the {{DataMember}} property of the container. The graph instance is created on each round trip and initializes the creation of the data view instance based on a BQL statement. The data view provides data manipulation and data flows between the data source control of the ASPX page, the cache object of the graph, and the corresponding table of the database. The BQL statement contains a reference to at least one data access class that is required to map the database table to data records in the cache object.
*A data access class (DAC): On each round trip, the DAC instance is created in the cache object when the data view processes any operation with the corresponding data.
*A table in the database: The table is mapped to the data access class that defines the data record type in the cache object of the graph instance.
[anchor|#fig_fym_xz5_tv][anchor|#image_ppm_zz5_tv][image:CustomizationPlatform/images/CG_Platform_TO.png|popup|Objects required for a form that works with data from a database table|450px]For a custom form to be enabled in an instance of Acumatica ERP, the site map of the instance must contain information about the form.{br}

You use the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor] to perform operations with custom forms, as described in the following topics:[anchor|#ul_mmd_kgc_ww]
*[HelpRoot_Dev_Customization\CG_GL_Forms_DevelopCustom|To Develop a Custom Form]
*[HelpRoot_Dev_Customization\CG_GL_Forms_CreatingCustom_Template|To Create a Custom Form Template]
*[HelpRoot_Dev_Customization\CG_GL_Items_Screens_DeletingCustom|To Delete a Custom Form from a Project]

==Related Articles==
*[HelpRoot_Dev_Customization\CG_Platform_Framework_ASPX|Changes in Webpages (ASPX)]
*[HelpRoot_Dev_Customization\CG_GL_Items_Screens|Customized Screens]]]></column>
			<column name="PlainText"><![CDATA[Custom Form By using the  Acumatica Customization             Platform, you can develop a custom form from scratch and add it to a customization project. To             create a new form, you have to create the following types of code: ASPX page that contains a description of the UI elements of the form CS code that provides the business logic for the form For each form that works with data from the database, the instance of  Acumatica ERP must contain at least the following objects (see the diagram below): An ASPX page: The page must contain at least the data source control and a                     container with controls for data fields. A business logic controller (BLC, also referred to as  graph ): The graph                     must be specified in the  TypeName  property of the data source                     control of the page. The graph must contain at least one data view, which is                     specified in the  PrimaryView  property of the data source                     control and in the  DataMember  property of the container. The                     graph instance is created on each round trip and initializes the creation of the                     data view instance based on a BQL statement. The data view provides data                     manipulation and data flows between the data source control of the ASPX page,                     the cache object of the graph, and the corresponding table of the database. The                     BQL statement contains a reference to at least one data access class that is                     required to map the database table to data records in the cache object. A data access class (DAC): On each round trip, the DAC instance is created in                     the cache object when the data view processes any operation with the                     corresponding data. A table in the database: The table is mapped to the data access class that                     defines the data record type in the cache object of the graph instance. Objects required for a form that works with data from a database                     table For a custom form to be enabled in an instance of  Acumatica ERP, the site map of the instance must contain information about the form. You use the   Customization Project                         Editor to perform operations with             custom forms, as described in the following topics: To Develop a Custom FormTo Create a Custom Form TemplateTo Delete a Custom Form from a Project]]></column>
		</row>
		<row PageID="946973a6-24fd-4b82-9757-772d61c79532" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="0b9d491d-e522-d475-81b6-084777680a60" RecordSourceID="22377">
			<column name="Content"><![CDATA[
To create and develop a custom form within a customization project, you can use the following approach:[anchor|#_fdbb4d46-d9f5-4772-8d23-138332087337]
#Plan the functionality, content, and user interface of the new form.
#If the custom form requires data from a new table, create the table in the database by using a database administration tool, such as SQL Server Management Studio. (See [HelpRoot_Dev_Customization\CG_GL_Items_DBScripts_AddingCustTable|To Add a Custom Table to a Project] for details.)
#Create a workable form template by using the New Screen wizard, as described in [HelpRoot_Dev_Customization\CG_GL_Forms_CreatingCustom_Template|To Create a Custom Form Template].
#:After you have created a custom form template and published the customization project, you can develop the form in the same way as you customize an existing form of Acumatica ERP. (See [HelpRoot_Dev_Customization\CG_GL_UI_ExistForm|Existing Form] for details.) Because the code templates are added to the <tt>App&#95;RuntimeCode</tt> folder of the Acumatica ERP website, you can develop the code in Microsoft Visual Studio.
#'''C#''': Create data access classes that contain the data field declarations required for the form controls. (See [HelpRoot_Dev_Customization\CG_GL_Items_Code_CustomDAC|To Create a Custom Data Access Class] for details.)
#'''C#''': In the graph template, define BQL statements in data views to manage data fields declared in data access classes. (See [HelpRoot_Dev_Customization\CG_GL_BL_Graph_NewMember|To Add a New Member] for details.)
#'''ASPX''': If needed, add nested containers to the main containers of the form template. (See [HelpRoot_Dev_Customization\CG_GL_UI_PXForm_AddNested|To Add a Nested Container] for details.)
#'''C#''': For each nested container, in the graph template, define the appropriate data views.
#'''ASPX''': For each added container, specify the name of an appropriate data view in the <tt>DataMember</tt> property. (See [HelpRoot_Dev_Customization\CG_GL_UI_PXForm_Properties|To Set a Container Property] for details.)
#'''ASPX''': If required, for each added container, specify other properties. (See [HelpRoot_Dev_Customization\CG_GL_UI_PXForm_Properties|To Set a Container Property] for details.)
#'''ASPX''': Add controls for data fields to each container. (See [HelpRoot_Dev_Customization\CG_GL_UI_PXForm_AddBox|To Add a Box for a Data Field] for details.)
#'''ASPX''': Specify properties for controls. (See [HelpRoot_Dev_Customization\CG_GL_UI_Box_SetProperty|To Set a Box Property] for details.)
#'''C#''': Develop business logic for the form in the graph (See [HelpRoot_Dev_Customization\CG_GL_BL|Customizing Business Logic] for details.)
#'''ASPX''': If required, add dialog boxes, as described in [HelpRoot_Dev_Customization\CG_GL_Forms_CustForm_AddCustomDialogBox|To Add a Dialog Box].
{br}

We recommend that you use the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_LayoutEditor|Screen Editor] to create the content of an ASPX page and Visual Studio to develop the business logic for a page. (See [HelpRoot_Dev_Customization\CG_Platform_Studio|Integrating the Project Editor with Microsoft Visual Studio] for details.)]]></column>
			<column name="PlainText"><![CDATA[To Develop a Custom Form To create and develop a custom form within a customization project, you can use the following         approach: Plan the functionality, content, and user interface of the new form. If the custom form requires data from a new table, create the table in the database by           using a database administration tool, such as SQL Server Management Studio. (See  To Add a Custom Table to a Project for details.) Create a workable form template by using the New Screen wizard, as described in  To Create a Custom Form Template. After you have created a custom             form template and published the customization project, you can develop the form in the             same way as you customize an existing form of  Acumatica ERP. (See  Existing Form for details.) Because the code templates             are added to the  App_RuntimeCode  folder of the  Acumatica ERP website, you can develop the code in Microsoft Visual Studio. C# : Create data access classes that contain the data field declarations required           for the form controls. (See  To Create a Custom Data Access Class for           details.) C# : In the graph template, define BQL statements in data views to manage data           fields declared in data access classes. (See  To Add a New Member for details.) ASPX : If needed, add nested containers to the main containers of the form           template. (See  To Add a Nested Container for details.) C# : For each nested container, in the graph template, define the appropriate data           views. ASPX : For each added container, specify the name of an appropriate data view in           the  DataMember  property. (See  To Set a Container Property for details.) ASPX : If required, for each added container, specify other properties. (See  To Set a Container Property for details.) ASPX : Add controls for data fields to each container. (See  To Add a Box for a Data Field for details.) ASPX : Specify properties for controls. (See  To Set a Box Property for details.) C# : Develop business logic for the form in the graph (See  Customizing Business Logic for details.) ASPX : If required, add dialog boxes, as described in  To Add a Dialog Box. We recommend that you use the  Screen Editor to       create the content of an ASPX page and Visual Studio to develop the business logic for a page.       (See  Integrating the Project Editor with Microsoft Visual Studio for details.) ]]></column>
		</row>
		<row PageID="8d5edea3-1256-4df8-ad67-0a855ada4a26" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="b28c2634-c971-0003-c873-a17b7ca7f8c1" RecordSourceID="22377">
			<column name="Content"><![CDATA[
To create a workable template for a custom form by using the New Screen wizard and include the template in a customization project, perform the following actions:[anchor|#ol_cnt_hdq_lt]
#Open the customization project in the Customization Project Editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)
#Select the '''Screens''' node in the navigation pane of the editor to open the Customized Screens page.
#On the page toolbar, click '''Add Screen &gt; Create New Screen''', as item a in the screenshot below shows.
#In the '''Create New Screen''' dialog box, which opens, specify values for input controls as follows (item b in the screenshot):
##'''Screen ID''': Enter an ID of a custom form in the ''XX.&#42;&#42;.&#42;&#42;.&#42;&#42;'' format, which consists of the following parts:
###Two-letter code of the module in Acumatica ERP
###:((({S:Warn}You can use a single unique two-letter code for all custom forms in a solution. Please check the <tt>Pages</tt> folder of the website in the production environment to ensure that the code you want to use is not already used in the instance of Acumatica ERP.
)))
###Two-digit code indicating the form type:
####10: Setup form
####20: Maintenance form
####30: Data entry form
####40: Inquiry form
####50: Processing form
####60: Report form
###Two-digit code indicating the form sequential number
###Two-digit code indicating the subform sequential number
##'''Graph Name''': Enter a unique name for the new graph.
##'''Graph Namespace''': By default, the New Screen wizard specifies the customization project name as the namespace ID. If you want to change the default ID, enter the ID of an existing or a new namespace for the new graph.
##'''Page Title''': Enter the title to be used as the form title in Acumatica ERP.
##'''Template''': Select one of the following ASPX page templates for the custom form.
##:{| class="checklist" | width="100%" 
|- 
!width="20%" ! Template
!width="80%" ! Description
|- 
| ''Form (FormView)''
| A record-editing page with one <tt>PXFormView</tt> container
|- 
| ''Grid (GridView)''
| A record-editing page with one <tt>PXGrid</tt> container
|- 
| ''Tab (TabView)''
| A record-editing page with one <tt>PXTab</tt> container
|- 
| ''FormTab''
| A record-editing page with <tt>PXFormView</tt> and <tt>PXTab</tt> containers
|- 
| ''FormGrid (FormDetail)''
| A master-detail editing page with <tt>PXFormView</tt> and <tt>PXGrid</tt> containers
|- 
| ''TabGrid (TabDetail)''
| A master-detail page with <tt>PXTab</tt> and <tt>PXGrid</tt> containers
|}
##'''Site Map Parent''': Select a parent site map node to place the form in this location in the site map of Acumatica ERP.
#Click '''OK''' (item c) to create the new form.[anchor|#image_dxg_5fq_lt][image:CustomizationPlatform/images/CG_GL_Forms_Creating_Wizard_01.png|popup|Using the New Screen wizard to create the new form|450px]
#:The wizard creates the form template and adds the following items to the customization project.[anchor|#table_yxm_f4q_lt]
{| class="checklist" | width="100%" 
|- 
!width="33%" ! Item
!width="66%" ! Description
|- 
| ''File''
| Contains the <tt>Pages\XX\XX&#42;&#42;&#42;&#42;&#42;&#42;.aspx</tt> file with the ASPX code template that has been selected for the new form. The name of the file corresponds to the value that is entered in the '''Screen ID''' box. The file is located in the <tt>Pages\XX</tt> folder of the Acumatica ERP website, where XX is the two-letter code of the screen ID.
|- 
| ''File''
| Contains the <tt>Pages\XX\XX&#42;&#42;&#42;&#42;&#42;&#42;.aspx.cs</tt> file with the C# code for the ASPX page.
|- 
| ''Code''
| Contains the code template of the business logic controller (BLC, also referred to as ''graph'') for the new form. This item is saved in the database. When you publish the project, the platform creates a copy of the code in the file with the same name in the <tt>App&#95;RuntimeCode</tt> folder of the Acumatica ERP website. You can develop the code in Microsoft Visual Studio.
|- 
| ''Page''
| Contains the link to the new page content, which you can later develop by using the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_LayoutEditor|Screen Editor].
|- 
| ''SiteMapNode''
| Contains the site map object of the new form.
|}
{br}

For example, if you enter in the '''Create New Screen''' dialog box the values that are displayed in the screenshot above, the wizard creates code templates for both the ''CUDetailsInq'' business logic controller and the ''YF401000'' page, which contain all the components required for the form template to work properly (see the following diagram).[anchor|#_d666b512-1408-40d1-ad68-2ff53f341548][anchor|#_834d4705-b9fa-44b2-b14f-937d2dc42355][image:CustomizationPlatform/images/CG_GL_Forms_Creating_Wizard_02.png|popup|Analyzing the content of the new form template|424px]{br}

You can publish the customization project to ensure that it is valid and the custom form can be opened in the browser. At the moment, the form does not contain a control for a field, as the following screenshot shows.[anchor|#_daf03d41-3800-4581-a008-ac873e344b86][anchor|#_ed46438d-5f23-44db-8091-a4607ec3aad0][image:CustomizationPlatform/images/CG_GL_Forms_Creating_Wizard_03.png|popup|Viewing the new form|370px]]]></column>
			<column name="PlainText"><![CDATA[To Create a Custom Form Template To create a workable template for a custom form by using the New Screen wizard and include the    template in a customization project, perform the following actions: Open the customization project in the  Customization Project Editor. (See  To Open a Project for details.) Select the  Screens  node in the navigation pane of the editor to open      the Customized Screens page. On the page toolbar, click  Add Screen > Create New Screen , as item a in the screenshot below shows. In the  Create New Screen  dialog box, which opens, specify values for      input controls as follows (item b in the screenshot): Screen ID : Enter an ID of a custom form in the  XX.**.**.**         format, which consists of the following parts: Two-letter code of the module in  Acumatica ERPYou can use a single unique two-letter code for all custom forms in a solution.           Please check the  Pages  folder of the website in the production           environment to ensure that the code you want to use is not already used in the instance of             Acumatica ERP. Two-digit code indicating the form type: 10: Setup form 20: Maintenance form 30: Data entry form 40: Inquiry form 50: Processing form 60: Report form Two-digit code indicating the form sequential number Two-digit code indicating the subform sequential number Graph Name : Enter a unique name for the new graph. Graph Namespace : By default, the New Screen wizard specifies the        customization project name as the namespace ID. If you want to change the default ID, enter        the ID of an existing or a new namespace for the new graph. Page Title : Enter the title to be used as the form title in  Acumatica ERP. Template : Select one of the following ASPX page templates for the        custom form. Template Description Form (FormView) A record-editing page with one  PXFormView  container Grid (GridView) A record-editing page with one  PXGrid  container Tab (TabView) A record-editing page with one  PXTab  container FormTab A record-editing page with  PXFormView  and               PXTab  containers FormGrid (FormDetail) A master-detail editing page with  PXFormView  and               PXGrid  containers TabGrid (TabDetail) A master-detail page with  PXTab  and  PXGrid              containers Site Map Parent : Select a parent site map node to place the form in        this location in the site map of  Acumatica ERP. Click  OK  (item c) to create the new form. Using the New Screen wizard to create the new form The wizard creates the form template and adds the following items to the customization        project. Item Description File Contains the  Pages\XX\XX******.aspx  file with the ASPX code            template that has been selected for the new form. The name of the file corresponds to the            value that is entered in the  Screen ID  box. The file is located in            the  Pages\XX  folder of the  Acumatica ERP website, where XX is the two-letter code of the screen ID. File Contains the  Pages\XX\XX******.aspx.cs  file with the C# code            for the ASPX page. Code Contains the code template of the business logic controller (BLC, also referred to            as  graph ) for the new form. This item is saved in the database. When you publish            the project, the platform creates a copy of the code in the file with the same name in            the  App_RuntimeCode  folder of the  Acumatica ERP website. You can develop the code in Microsoft Visual Studio. Page Contains the link to the new page content, which you can later develop by using the              Screen Editor. SiteMapNode Contains the site map object of the new form. For example, if you enter in the  Create New Screen  dialog box the values    that are displayed in the screenshot above, the wizard creates code templates for both the      CUDetailsInq  business logic controller and the  YF401000  page, which contain all    the components required for the form template to work properly (see the following diagram). Analyzing the content of the new form template You can publish the customization project to ensure that it is valid and the custom form can be    opened in the browser. At the moment, the form does not contain a control for a field, as the    following screenshot shows. Viewing the new form ]]></column>
		</row>
		<row PageID="288e60c0-2271-4ab2-a31c-71d62af891a7" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="f803dc03-4189-e324-947a-959ec767cddd" RecordSourceID="22377">
			<column name="Content"><![CDATA[
To remove a custom form from a customization project, you have to delete all the items that have been added to the project for the form.{br}

To do this, perform the following actions:[anchor|#_e113eb1c-4527-4f17-8405-cc02a36ee9c7]
*Delete from the customization project the ''Page'' item that was added by the New Screen wizard. (See [HelpRoot_Dev_Customization\CG_GL_Items_Screens_Deleting|To Delete a Page Item from a Project] for details.)
*Delete from the project the ''Code'' item that was added by the New Screen wizard. (See [HelpRoot_Dev_Customization\CG_GL_Items_Code_Deleting|To Delete a Code Item From a Project].)
*Delete from the project the <tt>&lt;FormID&gt;.aspx</tt> and <tt>&lt;FormID&gt;.aspx.cs</tt>''File'' items that were added by the New Screen wizard. (For more information, see [HelpRoot_Dev_Customization\CG_GL_Items_Files_Deleting|To Delete a Custom File From a Project].)
*Delete from the project the ''SiteMapNode'' item that was added by the New Screen wizard. (See [HelpRoot_Dev_Customization\CG_GL_Items_SiteMap_Deleting|To Delete a Site Map Node from a Project] for details.)
*If you added other items for the custom form, such as items for the mobile site map or custom files, delete these items.
{br}

To delete multiple items from the customization project successively on a single page, you can use the Edit Project Items page of the Customization Project Editor. (See [HelpRoot_Dev_Customization\CG_GL_Items_DeletingANY|To Delete Items from the Project on the Edit Project Items Page] for details.){br}

The system applies the changes to the file system as soon as you publish the customization project.]]></column>
			<column name="PlainText"><![CDATA[To Delete a Custom Form from a Project To remove a custom form from a customization project, you have to delete all the items that have been added to the project for the form. To do this, perform the following actions: Delete from the customization project the  Page  item that was added by the New Screen wizard. (See  To Delete a Page Item from a Project for details.) Delete from the project the  Code  item that was added by the New Screen wizard. (See  To Delete a Code Item From a Project.) Delete from the project the  <FormID>.aspx  and  <FormID>.aspx.cs File  items that were added by the New Screen wizard. (For more information, see  To Delete a Custom File From a Project.) Delete from the project the  SiteMapNode  item that was added by the New Screen wizard. (See  To Delete a Site Map Node from a Project for details.) If you added other items for the custom form, such as items for the mobile site map or custom files, delete these items. To delete multiple items from the customization project successively on a single page, you can use the Edit Project Items page of the  Customization Project Editor. (See  To Delete Items from the Project on the Edit Project Items Page for details.) The system applies the changes to the file system as soon as you publish the customization project. ]]></column>
		</row>
		<row PageID="1a4912fa-36a1-4da7-bc77-dcf9575a9a7a" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="9d82d3f2-2847-6d1c-80cd-85c2721674de" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can customize the user interface of an existing form of Acumatica ERP by using the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_LayoutEditor|Screen Editor]. The editor is a visual tool that you can use to perform the following changes in the ASPX code for a form:[anchor|#_7d99e772-670e-41bc-9f55-181dc6018391]
*Add or delete a container.
*Add or delete a button or radio button. (See [HelpRoot_Dev_Customization\CG_GL_UI_PXButton|Button (PXButton)] and [HelpRoot_Dev_Customization\CG_GL_UI_Radio|Radio Button (PXRadioButton)] for details.)
*Add or delete a layout rule. (See [HelpRoot_Dev_Customization\CG_GL_UI_LayoutRules|Layout Rule (PXLayoutRule)] for details.)
*Add or delete a Java script. (See [HelpRoot_Dev_Customization\CG_GL_UI_PXJavaScript|Java Script (PXJavaScript)] for details.)
*Create or delete a control for a data field. (See [HelpRoot_Dev_Customization\CG_GL_UI_Box|Box (Control for a Data Field)] for details.)
*Change the properties of an element in the ASPX code. (See [HelpRoot_Dev_Customization\CG_GL_UI_PXForm_Properties|To Set a Container Property], [HelpRoot_Dev_Customization\CG_GL_UI_Box_SetProperty|To Set a Box Property] and [HelpRoot_Dev_Customization\CG_GL_UI_LayoutRules_Properties|To Set a Layout Rule Property] for details.)
{br}

In Acumatica ERP, an ASPX page must contain a single <tt>PXDataSource</tt> control. You can add the following types of containers immediately to the level of an ASPX page, where the <tt>PXDataSource</tt> control is defined:[anchor|#_25bb1204-b554-4c3e-9d6f-20a9018d0a25]
*[HelpRoot_Dev_Customization\CG_GL_UI_PXForm|Form Container (PXFormView)]
*[HelpRoot_Dev_Customization\CG_GL_UI_PXGrid|Grid Container (PXGrid)]
*[HelpRoot_Dev_Customization\CG_GL_UI_Tab|Tab Container (PXTab)]
*[HelpRoot_Dev_Customization\CG_GL_UI_Dialogs|Dialog Box (PXSmartPanel)]
 The order of containers in the ASPX page defines the order of appropriate areas with controls on the form.{br}

Detailed instructions on the customization of an existing form are provided in the following topics:[anchor|#ul_oxf_mlt_fq]
*[HelpRoot_Dev_Customization\CG_GL_UI_ExistForm_Starting|To Start a Customization of a Form]
*[HelpRoot_Dev_Customization\CG_GL_Forms_DeleteCust|To Delete a Customization of a Form]
*[HelpRoot_Dev_Customization\CG_GL_Forms_CustForm_AdContainer_Form|To Add a Form Container]
*[HelpRoot_Dev_Customization\CG_GL_Forms_CustForm_AdContainer_Tab|To Add a Tab Container]
*[HelpRoot_Dev_Customization\CG_GL_Forms_CustForm_AdContainer_Grid|To Add a Grid Container]
*[HelpRoot_Dev_Customization\CG_GL_Forms_CustForm_AddCustomDialogBox|To Add a Dialog Box]
*[HelpRoot_Dev_Customization\CG_GL_Forms_CustForm_DeleteContainer|To Delete a Container]
{br}

The changeset of a form is stored in the database as a ''Page'' item of a customization project. During the publication of the project, the Acumatica Customization             Platform applies the changeset to the form to create a customized version of the <tt>.aspx</tt> file with the same name in the <tt>pages&#95;xx</tt> subfolder of the <tt>CstPublished</tt> folder of the website.{br}

For example, if you customize the [HelpRoot_FormReference\AR_30_30_00|Customers] ([~/?ScreenId=AR303000|AR303000]) form and publish the project, the platform creates the <tt>ar303000.aspx</tt> and <tt>ar303000.aspx.cs</tt> files in the <tt>\CstPublished\pages&#95;ar</tt> folder. If you delete these files, Acumatica ERP uses the original files from the <tt>\Pages\AR</tt> folder to display this form. However if you again publish the customization project, the platform recreates these files, and Acumatica ERP uses the customized version of the form.{br}

We recommend that you use the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_LayoutEditor|Screen Editor] to customize the content of an ASPX page, the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_DataClassEditor|Data Class Editor] to modify data access classes, and Microsoft Visual Studio to extend the business logic for a page. (See [HelpRoot_Dev_Customization\CG_Platform_Studio|Integrating the Project Editor with Microsoft Visual Studio] for details.)
==Related Articles==
*[HelpRoot_Dev_Customization\CG_Platform_Framework_ASPX|Changes in Webpages (ASPX)]
*[HelpRoot_Dev_Customization\CG_GL_Items_Screens|Customized Screens]]]></column>
			<column name="PlainText"><![CDATA[Existing Form You can customize the user interface of an existing form of  Acumatica ERP by using the  Screen Editor. The editor is a       visual tool that you can use to perform the following changes in the ASPX code for a form: Add or delete a container. Add or delete a button or radio button. (See  Button (PXButton) and              Radio Button (PXRadioButton) for details.) Add or delete a layout rule. (See  Layout Rule (PXLayoutRule) for           details.) Add or delete a Java script. (See  Java Script (PXJavaScript) for           details.) Create or delete a control for a data field. (See  Box (Control for a Data Field) for           details.) Change the properties of an element in the ASPX code. (See  To Set a Container Property,  To Set a Box Property           and  To Set a Layout Rule Property for details.) In  Acumatica ERP, an ASPX page must contain a single  PXDataSource  control. You can add       the following types of containers immediately to the level of an ASPX page, where the          PXDataSource  control is defined: Form Container (PXFormView)Grid Container (PXGrid)Tab Container (PXTab)Dialog Box (PXSmartPanel) The order of containers in the ASPX page defines the order of appropriate areas with       controls on the form. Detailed instructions on the customization of an existing form are provided in the following         topics: To Start a Customization of a FormTo Delete a Customization of a FormTo Add a Form ContainerTo Add a Tab ContainerTo Add a Grid ContainerTo Add a Dialog BoxTo Delete a ContainerThe changeset of a form is stored in the database as a  Page  item of a customization       project. During the publication of the project, the  Acumatica Customization             Platform applies the changeset to the form to create a customized version of the          .aspx  file with the same name in the  pages_xx        subfolder of the  CstPublished  folder of the website. For example, if you customize the   ([~/?ScreenId=AR303000|AR303000]) Customers       (AR303000) form and publish the project, the platform creates the          ar303000.aspx  and  ar303000.aspx.cs  files in the          \CstPublished\pages_ar  folder. If you delete these files,  Acumatica ERP uses the original files from the  \Pages\AR  folder to display this       form. However if you again publish the customization project, the platform recreates these       files, and  Acumatica ERP uses the customized version of the form. We recommend that you use the  Screen Editor to       customize the content of an ASPX page, the  Data Class Editor to modify data access classes, and       Microsoft Visual Studio to extend the business logic for a page. (See  Integrating the Project Editor with Microsoft Visual Studio for details.) ]]></column>
		</row>
		<row PageID="2f7d1f55-8c8c-4c12-9129-cac12043df90" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="c5004c61-6548-3293-31d9-16dc674697ce" RecordSourceID="22377">
			<column name="Content"><![CDATA[
To start the customization of a form, you have to open the form in the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_LayoutEditor|Screen Editor]. To do this, you commonly perform the following operations:[anchor|#_80adf661-56e7-4b08-9995-629912fa6575]
#Open the form in the browser.
#On the form title bar, click '''Customization &gt; Inspect Element''' to launch the [HelpRoot_Dev_Customization\CG_Platform_Tools_Inspector|Element Inspector].
#On the form, click the UI element (or area) to be customized; this opens the [HelpRoot_Dev_Customization\CG_Platform_Tools_Inspector_ElProperiesDlg|Element Properties Dialog Box] for the element (or area).
#In the dialog box, click '''Customize'''.
#If there is no currently selected customization project and the inspector opens the [HelpRoot_Dev_Customization\CG_Platform_Tools_Menu_SelectCustProjDlg|Select Customization Project Dialog Box], select an existing customization project or create a new one. (See [HelpRoot_Dev_Customization\CG_GL_Projects_Starting_Selecting|To Select an Existing Project] and [HelpRoot_Dev_Customization\CG_GL_Projects_Starting_Creating|To Create a New Project] for details.)
{br}

If the customization project does not contain a changeset for the form, the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor] adds a ''Page'' item for the form to the project, to keep the changeset to the ASPX code of the form in the database. The form is opened in the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_LayoutEditor|Screen Editor], and you can start customization of the form.{br}

When you click '''Save''' on the editor toolbar, the editor updates the ''Page'' item in the database.]]></column>
			<column name="PlainText"><![CDATA[To Start a Customization of a Form To start the customization of a form, you have to open the form in the  Screen Editor. To do this, you commonly perform the       following operations: Open the form in the browser. On the form title bar, click  Customization > Inspect Element  to launch the  Element Inspector. On the form, click the UI element (or area) to be customized; this opens the  Element Properties Dialog Box for the element (or area). In the dialog box, click  Customize . If there is no currently selected customization project and the inspector opens the              Select Customization Project Dialog Box, select an existing           customization project or create a new one. (See  To Select an Existing Project and  To Create a New Project for details.) If the customization project does not contain a changeset for the form, the   Customization Project                         Editor adds a  Page  item for the form to the project,       to keep the changeset to the ASPX code of the form in the database. The form is opened in the          Screen Editor, and you can start customization       of the form. When you click  Save  on the editor toolbar, the editor updates the          Page  item in the database. ]]></column>
		</row>
		<row PageID="eca41a3a-f044-4bdc-b430-a83ce1b67f07" Language="en-US" PageRevisionID="1" Content="&#xA;If a customization project contains changes to multiple objects of Acumatica ERP, and you need to remove customization for only a single form, perform the following operations:[anchor|#_a147d6e7-b024-4ad6-a121-926bea32ddcd]&#xA;#Remove from the project the ''Page'' item for the form. (See [HelpRoot_Dev_Customization\CG_GL_Items_Screens_Deleting|To Delete a Page Item from a Project] for details.)&#xA;#Publish the project, as described in [HelpRoot_Dev_Customization\CG_GL_Projects_Publishing_Current|To Publish the Current Project].&#xA;" PlainText="To Delete a Customization of a Form If a customization project contains changes to multiple objects of  Acumatica ERP, and you need to remove customization for only a single form, perform the following                 operations: Remove from the project the  Page  item for the form. (See  To Delete a Page Item from a Project for details.) Publish the project, as described in  To Publish the Current Project. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="9d104930-86b4-537b-b5c0-c925b1fd8d93" RecordSourceID="22377" />
		<row PageID="ee674938-9f49-4f83-8ac7-1731a90944bb" Language="en-US" PageRevisionID="1" PlainText="To Add a Form Container You can add a new  PXFormView  container to a form of  Acumatica ERP. To do this, perform the following actions: Open the form in the  Screen Editor, as           described in  To Add a Page Item for an Existing Form. In the editor, click the  Add Controls  tab item. From the  Main Containers  group, drag the              Form  container to the required place in the Control Tree, as           shown in the following screenshot. Adding a form container to a form The area of a form container is visible on a customized form only if it             contains at least one visible control. In the Control Tree, select the form container that has been added, and specify the item           properties. as described in  To Set a Container Property. Click  Save  on the toolbar of the Screen Editor to save your           changes to the customization project. For more information about  PXFormView , see  Form Container (PXFormView). " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="27e15531-36f9-5142-9661-40e9dbe363f2" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can add a new <tt>PXFormView</tt> container to a form of Acumatica ERP. To do this, perform the following actions:[anchor|#_9980b6e8-8868-40c5-8ec9-9170ef1a4138]
#Open the form in the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_LayoutEditor|Screen Editor], as described in [HelpRoot_Dev_Customization\CG_GL_Items_Screens_Adding|To Add a Page Item for an Existing Form].
#In the editor, click the '''Add Controls''' tab item.
#From the '''Main Containers''' group, drag the '''Form''' container to the required place in the Control Tree, as shown in the following screenshot.[anchor|#_62d74e2d-f419-4aed-ade1-42d971446ea1][image:CustomizationPlatform/images/CG_GL_Forms_CustForm_AddContainer_Form_01.png|popup|Adding a form container to a form|396px]
#:((({S:Warn}The area of a form container is visible on a customized form only if it contains at least one visible control.
)))
#In the Control Tree, select the form container that has been added, and specify the item properties. as described in [HelpRoot_Dev_Customization\CG_GL_UI_PXForm_Properties|To Set a Container Property].
#Click '''Save''' on the toolbar of the Screen Editor to save your changes to the customization project.
{br}

For more information about <tt>PXFormView</tt>, see [HelpRoot_Dev_Customization\CG_GL_UI_PXForm|Form Container (PXFormView)].]]></column>
		</row>
		<row PageID="d2d08267-8757-4330-8f2c-f8d00bbb901c" Language="en-US" PageRevisionID="1" PlainText="To Add a Grid Container You can add a new  PXGrid  container to an existing form of  Acumatica ERP.    To do this, perform the following actions: Open the form in the  Screen Editor, as described           in  To Add a Page Item for an Existing Form. In the editor, click the  Add Controls  tab item. From the  Main Containers  group, drag the  Grid            container to the required place in the Control Tree, as shown in the following             screenshot. Adding a grid container to the tab A grid is visible on a customized form only if it contains at least one column             for a field. In the Control Tree, select the grid that has been added, and specify the item properties,           as described in  To Set a Container Property. Click  Save  on the toolbar of the Screen Editor to save your changes           to the customization project. For more information about  PXTab , see  Tab Container (PXTab). " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="7fcae23d-ed8e-9c45-20d9-1eabe1eba79f" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can add a new <tt>PXGrid</tt> container to an existing form of Acumatica ERP. To do this, perform the following actions:[anchor|#_9980b6e8-8868-40c5-8ec9-9170ef1a4138]
#Open the form in the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_LayoutEditor|Screen Editor], as described in [HelpRoot_Dev_Customization\CG_GL_Items_Screens_Adding|To Add a Page Item for an Existing Form].
#In the editor, click the '''Add Controls''' tab item.
#From the '''Main Containers''' group, drag the '''Grid''' container to the required place in the Control Tree, as shown in the following screenshot.[anchor|#_62d74e2d-f419-4aed-ade1-42d971446ea1][image:CustomizationPlatform/images/CG_GL_Forms_CustForm_AddContainer_Grid_01.png|popup|Adding a grid container to the tab|396px]
#:((({S:Warn}A grid is visible on a customized form only if it contains at least one column for a field.
)))
#In the Control Tree, select the grid that has been added, and specify the item properties, as described in [HelpRoot_Dev_Customization\CG_GL_UI_PXForm_Properties|To Set a Container Property].
#Click '''Save''' on the toolbar of the Screen Editor to save your changes to the customization project.
{br}

For more information about <tt>PXTab</tt>, see [HelpRoot_Dev_Customization\CG_GL_UI_Tab|Tab Container (PXTab)].]]></column>
		</row>
		<row PageID="85eaba7a-eb2f-4787-a6b3-eb5c9718eeaa" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="171fcdcb-a67c-031f-df35-57daa0d9c1dd" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can add a new <tt>PXTab</tt> container to an existing form of Acumatica ERP. To do this, perform the following actions:[anchor|#_9980b6e8-8868-40c5-8ec9-9170ef1a4138]
#Open the form in the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_LayoutEditor|Screen Editor], as described in [HelpRoot_Dev_Customization\CG_GL_Items_Screens_Adding|To Add a Page Item for an Existing Form].
#In the editor, click the '''Add Controls''' tab item.
#From the '''Main Containers''' group, drag the '''Tab''' container to the required place in the Control Tree, as shown in the following screenshot.[anchor|#_62d74e2d-f419-4aed-ade1-42d971446ea1][image:CustomizationPlatform/images/CG_GL_Forms_CustForm_AddContainer_Tab_01.png|popup|Adding a tab container to the tab|396px]The <tt>PXTab</tt> container cannot exist without nested <tt>PXTabItem</tt> containers. Therefore, when you add a <tt>PXTab</tt> container, the Screen Editor creates a nested <tt>PXTabItem</tt> container.
#:((({S:Warn}A tab container is visible on a customized form only if there is at least one control for a field in a nested <tt>PXTabItem</tt> container.
)))
#In the Control Tree, select the tab that has been added, and specify the item properties, as described in [HelpRoot_Dev_Customization\CG_GL_UI_PXForm_Properties|To Set a Container Property].
#Click '''Save''' on the toolbar of the Screen Editor to save your changes to the customization project.
{br}

For more information about <tt>PXTab</tt>, see [HelpRoot_Dev_Customization\CG_GL_UI_Tab|Tab Container (PXTab)].]]></column>
			<column name="PlainText"><![CDATA[To Add a Tab Container You can add a new  PXTab  container to an existing form of  Acumatica ERP.    To do this, perform the following actions: Open the form in the  Screen Editor, as described           in  To Add a Page Item for an Existing Form. In the editor, click the  Add Controls  tab item. From the  Main Containers  group, drag the  Tab            container to the required place in the Control Tree, as shown in the following             screenshot. Adding a tab container to the tab The  PXTab  container cannot exist without nested              PXTabItem  containers. Therefore, when you add a              PXTab  container, the Screen Editor creates a nested              PXTabItem  container. A tab container is visible on a customized             form only if there is at least one control for a field in a nested                PXTabItem  container. In the Control Tree, select the tab that has been added, and specify the item properties, as           described in  To Set a Container Property. Click  Save  on the toolbar of the Screen Editor to save your changes           to the customization project. For more information about  PXTab , see  Tab Container (PXTab). ]]></column>
		</row>
		<row PageID="02894962-1600-4fc7-8599-62f77144119d" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="0bdf8f6f-0c63-e1cb-4474-28cbd373a4f7" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can add a new <tt>PXTabItem</tt> container to a tab on an existing form of Acumatica ERP. To do this, perform the following actions:[anchor|#_9980b6e8-8868-40c5-8ec9-9170ef1a4138]
#Open the form in the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_LayoutEditor|Screen Editor], as described in [HelpRoot_Dev_Customization\CG_GL_Items_Screens_Adding|To Add a Page Item for an Existing Form].
#In the editor, click the '''Add Controls''' tab item.
#From the '''Main Containers''' group of the tab item, drag the '''Tab Item''' container above the customized tab, as shown in the following screenshot.[anchor|#_62d74e2d-f419-4aed-ade1-42d971446ea1][image:CustomizationPlatform/images/CG_GL_Forms_CustForm_AddContainer_TabItem_01.png|popup|Adding a tab item to the tab|407px]If the tab contains multiple tab items and you need to add a tab item to a certain position in the tab, you should expand the tab node in the Control Tree to see the existing tab items and drag the '''Tab Item''' container to the required position, as the following screenshot shows.[anchor|#_40cd24f8-48f6-4602-a6f5-364a3497b8da][image:CustomizationPlatform/images/CG_GL_Forms_CustForm_AddContainer_TabItem_02.png|popup|Adding a tab item to a certain position in the tab|407px]
#:((({S:Warn}A tab item is visible if it contains at least one control for a field.
)))
#In the Control Tree, select the tab item that has been added, and specify the item properties, as described in [HelpRoot_Dev_Customization\CG_GL_UI_PXForm_Properties|To Set a Container Property].
#Click '''Save''' on the toolbar of the Screen Editor to save your changes to the customization project.
]]></column>
			<column name="PlainText"><![CDATA[To Add a New Tab Item to a Tab You can add a new  PXTabItem  container to a tab on an existing form of  Acumatica ERP.    To do this, perform the following actions: Open the form in the  Screen Editor, as described           in  To Add a Page Item for an Existing Form. In the editor, click the  Add Controls  tab item. From the  Main Containers  group of the tab item, drag the              Tab Item  container above the customized tab, as shown in the           following screenshot. Adding a tab item to the tab If the tab contains multiple tab items and you need to add a tab item to a certain           position in the tab, you should expand the tab node in the Control Tree to see the           existing tab items and drag the  Tab Item  container to the required           position, as the following screenshot shows. Adding a tab item to a certain position in the tab A tab item is visible if it contains at least one control for a           field. In the Control Tree, select the tab item that has been added, and specify the item           properties, as described in  To Set a Container Property. Click  Save  on the toolbar of the Screen Editor to save your changes           to the customization project. ]]></column>
		</row>
		<row PageID="28f998fd-0fa5-4439-9bcc-239079ff4db7" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="3b963865-d914-7624-2f8a-b125b28ee0ca" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can add a custom dialog box to an Acumatica ERP form. If the dialog box must contain controls for data fields, you should generally perform the following operations:[anchor|#_8bcc8b51-a7ad-4df1-a3c0-bc6e62edbaa2]
*Add a new <tt>PXSmartPanel</tt> container to the ASPX page, as described in this topic.
*If needed, define a custom data access class with the declaration of the data fields to be used for controls in the dialog box. See [HelpRoot_Dev_Customization\CG_GL_Items_Code_CustomDAC|To Create a Custom Data Access Class] for details.
*If needed, in the extension for the graph that is specified in the <tt>TypeName</tt> property of the <tt>PXDataSource</tt> control of the ASPX page, add business logic for the dialog box. (See [HelpRoot_Dev_Customization\CG_GL_Items_Code_AddingGraphExt|To Customize an Existing Business Logic Controller] for details.) For example, in the graph extension, you can do the following:
**Declare a new data view that provides data for the dialog box controls, as described in [HelpRoot_Dev_Customization\CG_GL_BL_Graph_NewMember|To Add a New Member]
**Add an action (with a button on the form toolbar) to open the dialog box
**Add other business logic for the dialog box
*If the smart panel container must include a box for a data field, add a data-bound container, such as <tt>PXFormView</tt>. Then bind the new container to the data view declared in the graph or graph extension (see [HelpRoot_Dev_Platform\CW__con_PXForm_Properties_DataMember|Use of the DataMember Property of Containers] in the Acumatica Framework Guide for details) whose BQL statement refers to the data access class with the field declaration.
*If the smart panel must contain a row of buttons, add a nested <tt>PXPanel</tt> container with the <tt>SkinID</tt> property set to ''Buttons'' (see [HelpRoot_Dev_Platform\CW__con_PXForm_Properties_SkinID|Use of the SkinID Property of Containers] in the Acumatica Framework Guide for details), and add the buttons to the nested panel, as described in [HelpRoot_Dev_Customization\CG_GL_UI_PXForm_AddStControl|To Add Another Supported Control].
{br}

To add a new <tt>PXSmartPanel</tt> container to an ASPX page, perform the following actions:[anchor|#_9980b6e8-8868-40c5-8ec9-9170ef1a4138]
#Open the form in the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_LayoutEditor|Screen Editor], as described in [HelpRoot_Dev_Customization\CG_GL_Items_Screens_Adding|To Add a Page Item for an Existing Form].
#In the editor, click the '''Add Controls''' tab item.
#From the '''Main Containers''' group of the tab item, drag the '''POPUP PANEL''' container into the '''Dialogs''' node in the Control Tree, as shown in the following screenshot.[anchor|#_62d74e2d-f419-4aed-ade1-42d971446ea1][image:CustomizationPlatform/images/CG_GL_Forms_CustForm_AddCustomDialogBox.png|popup|Adding a form container to a form|399px]
#:((({S:Warn}A dialog box can be displayed if it contains at least one visible control.
)))
#In the Control Tree, select the new container that has been added.
#Specify the item properties, as described in [HelpRoot_Dev_Customization\CG_GL_UI_PXForm_Properties|To Set a Container Property].
#Click '''Save''' on the toolbar of the Screen Editor to save your changes to the customization project.
]]></column>
			<column name="PlainText"><![CDATA[To Add a Dialog Box You can add a custom dialog box to an  Acumatica ERP form. If the dialog box must contain controls for data fields, you should generally perform       the following operations: Add a new  PXSmartPanel  container to the ASPX page, as described in           this topic. If needed, define a custom data access class with the declaration of the data fields to           be used for controls in the dialog box. See  To Create a Custom Data Access Class           for details. If needed, in the extension for the graph that is specified in the              TypeName  property of the  PXDataSource  control of           the ASPX page, add business logic for the dialog box. (See  To Customize an Existing Business Logic Controller for details.) For example, in the graph           extension, you can do the following: Declare a new data view that provides data for the dialog box controls, as described               in  To Add a New MemberAdd an action (with a button on the form toolbar) to open the dialog box Add other business logic for the dialog box If the smart panel container must include a box for a data field, add a data-bound           container, such as  PXFormView . Then bind the new container to the data           view declared in the graph or graph extension (see  Use of the DataMember Property of Containers in the  Acumatica Framework Guide for details) whose BQL statement refers to the data access class with the field           declaration. If the smart panel must contain a row of buttons, add a nested              PXPanel  container with the  SkinID  property set to              Buttons  (see  Use of the SkinID Property of Containers in the  Acumatica Framework Guide for details), and add the buttons to the nested panel, as described in  To Add Another Supported Control. To add a new  PXSmartPanel  container to an ASPX page, perform the following         actions: Open the form in the  Screen Editor, as           described in  To Add a Page Item for an Existing Form. In the editor, click the  Add Controls  tab item. From the  Main Containers  group of the tab item, drag the              POPUP PANEL  container into the  Dialogs            node in the Control Tree, as shown in the following screenshot. Adding a form container to a form A dialog box can be displayed if it contains at least one visible             control. In the Control Tree, select the new container that has been added. Specify the item properties, as described in  To Set a Container Property. Click  Save  on the toolbar of the Screen Editor to save your           changes to the customization project. ]]></column>
		</row>
		<row PageID="fee6e99d-bf07-4948-9598-ff0eeaa88661" Language="en-US" PageRevisionID="1" Content="&#xA;You can delete a container from an Acumatica ERP form. To do this, perform the following actions:[anchor|#_9980b6e8-8868-40c5-8ec9-9170ef1a4138]&#xA;#Open the form in the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_LayoutEditor|Screen Editor], as described in [HelpRoot_Dev_Customization\CG_GL_Items_Screens_Adding|To Add a Page Item for an Existing Form].&#xA;#In the Control Tree of the editor, select the container to be deleted.&#xA;#On the toolbar of the Control Tree, click '''Delete'''.&#xA;#Click '''Save''' on the toolbar of the Screen Editor to save your changes to the customization project.&#xA;" PlainText="To Delete a Container You can delete a container from an  Acumatica ERP form. To do this, perform the following actions: Open the form in the  Screen Editor, as           described in  To Add a Page Item for an Existing Form. In the Control Tree of the editor, select the container to be deleted. On the toolbar of the Control Tree, click  Delete . Click  Save  on the toolbar of the Screen Editor to save your           changes to the customization project. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="f9184d07-c20a-1021-feef-a8cbbb707a05" RecordSourceID="22377" />
		<row PageID="d49d0866-5443-4ed8-b85b-62cad5d2ea8a" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="b7ffaefe-4442-372e-208e-b027ece53d68" RecordSourceID="22377">
			<column name="Content"><![CDATA[
<tt>PXFormView</tt> is a data-bound UI container control that renders a single record from its associated data source.{br}

An ASPX page can contain <tt>PXFormView</tt> as a main container. A form container, as the diagram below shows, can be also included in the following types of containers:[anchor|#_d4be3055-f97a-4f24-8f3e-5361d4c4ef62]
*<tt>PXFormView</tt>
* <tt>PXTabItem</tt>
* <tt>PXSmartPanel</tt>
[anchor|#_8a5aba79-3550-4d54-ada2-29e93ac1d463][anchor|#_b9e2688e-0e9a-4372-8924-f23ca085c2ed][image:CustomizationPlatform/images/CG_GL_Forms_ASPX_Containers_PXFormView.png|popup|Nesting rules for a PXFormView container in an ASPX page|450px]{br}

A form container can include multiple ASPX objects of the following types:[anchor|#_bd6cb282-e80e-479d-b27f-ef26d6962f55]
*A data-bound UI container control: <tt>PXFormView</tt>, <tt>PXGrid</tt>, and <tt>PXTab</tt>
*A layout rule: <tt>PXLayoutRule</tt>
*A box for a data field: <tt>PXTextEdit</tt>, <tt>PXNumberEdit</tt>, <tt>PXMaskEdit</tt>, <tt>PXDateTimeEdit</tt>, <tt>PXCheckBox</tt>, <tt>PXDropDown</tt>, <tt>PXSelector</tt>, <tt>PXSegmentMask</tt>, and <tt>PXTreeSelector</tt>
*Another control: <tt>PXPanel</tt>, <tt>PXGroupBox</tt>, <tt>PXRadioButton</tt>, <tt>PXLabel</tt>, <tt>PXButton</tt>, and <tt>PXJavaScript</tt>
{br}

A box for a data field can be added to a form container if the container is bound to a data view declared within the graph that provides business logic for the ASPX page. If you want to bind a form container to a data view, you must specify the properties as follows for the appropriate <tt>PXFormView</tt> object:[anchor|#_7c079a7a-7da5-41aa-8421-fa804c8705b2]
*The <tt>DataSourceID</tt> property value must be equal to the value of the <tt>ID</tt> property of the <tt>PXDataSource</tt> control.
*The <tt>DataMember</tt> property must contain the name of the data view that is declared in the graph and provides data for the controls of the form container.
{br}

To create a new form container in an ASPX page, follow the instructions described in [HelpRoot_Dev_Customization\CG_GL_Forms_CustForm_AdContainer_Form|To Add a Form Container].{br}

To delete a form container from an ASPX page, follow the instructions described in [HelpRoot_Dev_Customization\CG_GL_Forms_CustForm_DeleteContainer|To Delete a Container].{br}

For detailed information on working with the content of a form container, see the following topics:[anchor|#ul_xtf_5wp_gq]
*[HelpRoot_Dev_Customization\CG_GL_UI_PXForm_ToOpen|To Open a Container in the Screen Editor]
*[HelpRoot_Dev_Customization\CG_GL_UI_PXForm_Properties|To Set a Container Property]
*[HelpRoot_Dev_Customization\CG_GL_UI_PXForm_AddNested|To Add a Nested Container]
*[HelpRoot_Dev_Customization\CG_GL_UI_PXForm_AddBox|To Add a Box for a Data Field]
*[HelpRoot_Dev_Customization\CG_GL_UI_PXForm_AddLayoutRule|To Add a Layout Rule]
*[HelpRoot_Dev_Customization\CG_GL_UI_PXForm_AddStControl|To Add Another Supported Control]
*[HelpRoot_Dev_Customization\CG_GL_UI_PXForm_ReorderChild|To Reorder Child UI Elements]
*[HelpRoot_Dev_Customization\CG_GL_UI_PXForm_DeleteControl|To Delete a Child UI Element]

==Related Articles==
*[HelpRoot_Dev_Customization\CG_Platform_Framework_ASPX|Changes in Webpages (ASPX)]
*[HelpRoot_Dev_Customization\CG_GL_Items_Screens|Customized Screens]]]></column>
			<column name="PlainText"><![CDATA[Form Container (PXFormView) PXFormView  is a data-bound UI container control that renders a single record             from its associated data source. An ASPX page can contain  PXFormView  as a main container. A form container,       as the diagram below shows, can be also included in the following types of containers: PXFormView PXTabItem PXSmartPanel Nesting rules for a PXFormView container in an ASPX page A form container can include multiple ASPX objects of the following types: A data-bound UI container control:  PXFormView ,              PXGrid , and  PXTab A layout rule:  PXLayoutRule A box for a data field:  PXTextEdit ,  PXNumberEdit ,              PXMaskEdit ,  PXDateTimeEdit ,              PXCheckBox ,  PXDropDown ,              PXSelector ,  PXSegmentMask , and              PXTreeSelector Another control:  PXPanel ,  PXGroupBox ,              PXRadioButton ,  PXLabel ,              PXButton , and  PXJavaScript A box for a data field can be added to a form container if the container is bound to a data       view declared within the graph that provides business logic for the ASPX page. If you want to       bind a form container to a data view, you must specify the properties as follows for the       appropriate  PXFormView  object: The  DataSourceID  property value must be equal to the value of the              ID  property of the  PXDataSource  control. The  DataMember  property must contain the name of the data view that           is declared in the graph and provides data for the controls of the form container. To create a new form container in an ASPX page, follow the instructions described in  To Add a Form Container. To delete a form container from an ASPX page, follow the instructions described in  To Delete a Container. For detailed information on working with the content of a form container, see the following         topics: To Open a Container in the Screen EditorTo Set a Container PropertyTo Add a Nested ContainerTo Add a Box for a Data FieldTo Add a Layout RuleTo Add Another Supported ControlTo Reorder Child UI ElementsTo Delete a Child UI Element]]></column>
		</row>
		<row PageID="c145e876-7a6c-44d2-a112-f8bbb9bc751b" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="645f8f5e-f0ee-4e54-1947-5890708fc65d" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You perform the customization of a container by using the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_LayoutEditor|Screen Editor]. To open a container of an Acumatica ERP form in the editor, perform the following actions:[anchor|#_dae33d2f-4696-4515-9b8b-8f0c1b329563]
#Open the form in the browser.
#On the form title bar, click '''Customization &gt; Inspect Element''' to launch the [HelpRoot_Dev_Customization\CG_Platform_Tools_Inspector|Element Inspector].
#On the form, click the area of the container to be customized, which opens the [HelpRoot_Dev_Customization\CG_Platform_Tools_Inspector_ElProperiesDlg|Element Properties Dialog Box] for the container.
#In the dialog box, click '''Customize'''.
#If there is no currently selected customization project and the inspector opens the [HelpRoot_Dev_Customization\CG_Platform_Tools_Menu_SelectCustProjDlg|Select Customization Project Dialog Box], select an existing customization project or create a new one. (See [HelpRoot_Dev_Customization\CG_GL_Projects_Starting_Creating|To Create a New Project] and [HelpRoot_Dev_Customization\CG_GL_Projects_Starting_Selecting|To Select an Existing Project] for details.)
{br}

If the customization project does not contain a changeset for the form, the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor] adds to the project a ''Page'' item for the form to keep the changeset to the ASPX code of the form in the database. The container is opened in the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_LayoutEditor|Screen Editor], and you can start the customization of the container.{br}

When you click '''Save''' on the editor toolbar, the editor updates the ''Page'' item in the database.]]></column>
			<column name="PlainText"><![CDATA[To Open a Container in the Screen Editor You perform the customization of a container by using the  Screen Editor. To open a container of an  Acumatica ERP form in the editor, perform the following actions: Open the form in the browser. On the form title bar, click  Customization > Inspect Element  to launch the  Element Inspector. On the form, click the area of the container to be customized, which opens the  Element Properties Dialog Box for the container. In the dialog box, click  Customize . If there is no currently selected customization project and the inspector opens the              Select Customization Project Dialog Box, select an existing           customization project or create a new one. (See  To Create a New Project and  To Select an Existing Project for details.) If the customization project does not contain a changeset for the form, the   Customization Project                         Editor adds to the project a  Page  item for the form       to keep the changeset to the ASPX code of the form in the database. The container is opened in       the  Screen Editor, and you can start the       customization of the container. When you click  Save  on the editor toolbar, the editor updates the      Page  item in the database. ]]></column>
		</row>
		<row PageID="fb3feacd-463f-4ec5-8d3c-f1f443b2a10b" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="456e8b03-455a-65d3-5f2d-480b91d26406" RecordSourceID="22377">
			<column name="Content"><![CDATA[
To include in a customization project changes to the properties of a container, you have to modify the properties by using the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_LayoutEditor|Screen Editor]. To start setting the properties of a container, perform the following actions:[anchor|#_ccf7e243-c8c4-48d0-8895-c5356b46ec98]
#Open the container in the Screen Editor, as described in [HelpRoot_Dev_Customization\CG_GL_UI_PXForm_ToOpen|To Open a Container in the Screen Editor].
#Ensure that the container node is selected in the Control Tree of the editor. Click the arrow left of the node to expand the node if needed.
#Click the '''Layout Properties''' tab to open the list of properties for the container.
#Specify values for the required properties.
#Click '''Save''' to save your changes to the customization project.
{br}

For detailed information about the <tt>DataMember</tt> property, see [HelpRoot_Dev_Platform\CW__con_PXForm_Properties_DataMember|Use of the DataMember Property of Containers] in the Acumatica Framework Guide.{br}

In Acumatica ERP, for the <tt>PXFormView</tt>, <tt>PXGrid</tt>, and <tt>PXPanel</tt> containers, there are predefined values for the <tt>SkinID</tt> property. For details, see [HelpRoot_Dev_Platform\CW__con_PXForm_Properties_SkinID|Use of the SkinID Property of Containers] in the Acumatica Framework Guide.{br}

If you plan to use a container in the mobile site map, specify the <tt>Caption</tt> property of the container, as described in [HelpRoot_Dev_Platform\CW__con_PXForm_Properties_Caption|Use of the Caption Property of Containers] in the Acumatica Framework Guide.]]></column>
			<column name="PlainText"><![CDATA[To Set a Container Property To include in a customization project changes to the properties of a container, you have to       modify the properties by using the  Screen Editor.       To start setting the properties of a container, perform the following actions: Open the container in the Screen Editor, as described in  To Open a Container in the Screen Editor. Ensure that the container node is selected in the Control Tree of the editor. Click the           arrow left of the node to expand the node if needed. Click the  Layout Properties  tab to open the list of properties           for the container. Specify values for the required properties. Click  Save  to save your changes to the customization           project. For detailed information about the  DataMember  property, see  Use of the DataMember Property of Containers in the  Acumatica Framework       Guide. In  Acumatica ERP, for the  PXFormView ,  PXGrid , and          PXPanel  containers, there are predefined values for the          SkinID  property. For details, see  Use of the SkinID Property of Containers in the  Acumatica Framework       Guide. If you plan to use a container in the mobile site map, specify the  Caption        property of the container, as described in  Use of the Caption Property of Containers in the  Acumatica Framework       Guide. ]]></column>
		</row>
		<row PageID="b21381a3-a589-4aa6-b9fb-a4f87afab758" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="4cb2f9a0-7174-67bf-878f-ba97a2defd0b" RecordSourceID="22377">
			<column name="Content"><![CDATA[
A <tt>PXGrid</tt> container cannot include a nested container. A <tt>PXTab</tt> container can include only <tt>PXTabItem</tt> containers. You can add any container as a nested container to a <tt>PXFormView</tt>, <tt>PXTabItem</tt>, or <tt>PXSmartPanel</tt> container, as the following diagram shows.[anchor|#_87a0f0c5-fc99-4558-99de-8a54ff2a0580][anchor|#_c2612fe1-8ec3-4dbe-8d6f-29513ef33ca5][image:CustomizationPlatform/images/CG_GL_Forms_ASPX_Containers_Nested.png|popup|Nesting rules for containers on an ASPX page|450px]{br}

You can include the <tt>PXPanel</tt> and <tt>PXGroupBox</tt> container controls in the <tt>PXFormView</tt>, <tt>RowTemplate</tt>, <tt>PXTabItem</tt>, and <tt>PXSmartPanel</tt> containers.{br}

To add a nested container to a parent container, perform the following actions:[anchor|#_19a2b06a-5039-4927-9b6a-ec1e3e2875b8]
#Open the parent container in the Screen Editor, as described in [HelpRoot_Dev_Customization\CG_GL_UI_PXForm_ToOpen|To Open a Container in the Screen Editor].
#Ensure that the container node is selected in the Control Tree of the editor. Click the arrow left of the node to expand the node if needed.
#Click the '''Add Controls''' tab item (see the screenshot below).
#From the '''Main Containers''' or '''Other Controls''' group, drag the required type of the nested container into the parent container in the Control Tree, as shown in the following screenshot.[anchor|#_42c988ff-e8ba-4b9b-b4c2-4f827115e685][image:CustomizationPlatform/images/CG_GL_UI_PXForm_AddNested.png|popup|Adding a nested container to a parent container|404px]
#:((({S:Warn}A nested container is visible on the customized form only if it contains at least one visible control.
)))
#If required, specify properties for the new container, as described in [HelpRoot_Dev_Customization\CG_GL_UI_PXForm_Properties|To Set a Container Property].
#Click '''Save''' to save changes in the customization project.
]]></column>
			<column name="PlainText"><![CDATA[To Add a Nested Container A  PXGrid  container cannot include a nested container. A          PXTab  container can include only  PXTabItem  containers.       You can add any container as a nested container to a  PXFormView ,          PXTabItem , or  PXSmartPanel  container, as the following       diagram shows. Nesting rules for containers on an ASPX page You can include the  PXPanel  and  PXGroupBox  container       controls in the  PXFormView ,  RowTemplate ,          PXTabItem , and  PXSmartPanel  containers. To add a nested container to a parent container, perform the following actions: Open the parent container in the Screen Editor, as described in  To Open a Container in the Screen Editor. Ensure that the container node is selected in the Control Tree of the editor. Click the           arrow left of the node to expand the node if needed. Click the  Add Controls  tab item (see the screenshot below). From the  Main Containers  or  Other Controls            group, drag the required type of the nested container into the parent container in the           Control Tree, as shown in the following screenshot. Adding a nested container to a parent container A nested container is visible on the customized form only if it contains at             least one visible control. If required, specify properties for the new container, as described in  To Set a Container Property. Click  Save  to save changes in the customization project. ]]></column>
		</row>
		<row PageID="e1a82e2a-4528-48fb-b425-a50209377b6d" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="52a236aa-0957-9f69-b018-accc3b6eb2e4" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The Acumatica Customization             Platform supports the following types of boxes for data fields:[anchor|#_16f4f169-2e1d-4a1c-a2ac-085c0dca8c7a]
*<tt>PXTextEdit</tt>
* <tt>PXNumberEdit</tt>
* <tt>PXMaskEdit</tt>
* <tt>PXDateTimeEdit</tt>
* <tt>PXCheckBox</tt>
* <tt>PXDropDown</tt>
* <tt>PXSelector</tt>
* <tt>PXSegmentMask</tt>
* <tt>PXTreeSelector</tt>
(See the table in [HelpRoot_Dev_Customization\CG_GL_UI|Customizing Elements of the User Interface] for field type descriptions.){br}

You can add a box for a data field without restrictions immediately to a <tt>PXFormView</tt> or <tt>PXTabItem</tt> element that has the <tt>DataMember</tt> property defined. Also, you can add a box for a data field to a <tt>PXPanel</tt> or <tt>PXGroupBox</tt> container that has the <tt>DataMember</tt> property inherited from the parent container.{br}

Also, you can add a box for a data field to a <tt>RowTemplate</tt> element of a <tt>PXGrid</tt> container that is bound to a data view whose BQL statement refers to the data access class that contains the field declaration.{br}

To add a box for a data field to a container that is bound to a data view, perform the following actions:[anchor|#_812c3d78-1eec-44c0-b015-8e01e0ceffa6]
#Open the parent container in the Screen Editor, as described in [HelpRoot_Dev_Customization\CG_GL_UI_PXForm_ToOpen|To Open a Container in the Screen Editor].
#Ensure that the container node is selected in the Control Tree of the editor. Click the arrow left of the node to expand the node if needed.
#Click the '''Add Data Fields''' tab item (see the screenshot below).
#If you need to create a control for a data field that is not accessible through the data view specified for the container in the <tt>DataMember</tt> property but is accessible through another data view of the same graph, and if the '''Data View''' box is available, select the needed data view in this box. (For details, see [HelpRoot_Dev_Platform\CW__con_PXForm_AddBox_DataViews|Use of Multiple Data Views for Boxes in Containers] in the Acumatica Framework Guide.)
#:((({S:Warn}On the '''Add Data Fields''' tab item of the Screen Editor, if you change the predefined data view in the '''Data View''' box and create a control for a data field from the field list for the selected data view, the editor concatenates the data view name with the field name in the <tt>DataField</tt> property of the created control.
)))
#On the tab item, click the '''All''', '''Visible''', or '''Custom''' filter for the fields provided by the data view to view the appropriate field list.
#:((({S:Warn}You can create a custom field immediately on the '''Add Data Fields''' tab item by clicking the '''New Field''' action and then using the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_DataClassEditor_NewFieldDlg|Create New Field] dialog box.
)))
#Find the required data field in the list, and if the field is not used (the check box in the '''Used''' column is cleared for the field), select the check box for the field in the first (unlabeled) column, as the following screenshot shows.[anchor|#_ef5bcbe6-e756-47d0-af56-72c5fea5eb7f][image:CustomizationPlatform/images/CG_GL_UI_PXForm_AddBox.png|popup|Selecting a data field for which a box to be created|440px]
#:((({S:Warn}You can select multiple data fields to create multiple boxes simultaneously.
)))
#On the list toolbar, click '''Create Controls'''.
#:The platform creates a box for the selected data field and adds a node for the box to the Control Tree.
#Click '''Save''' to save the changes in the customization project.
{br}

You can change the location of a control in a container. See [HelpRoot_Dev_Customization\CG_GL_UI_PXForm_ReorderChild|To Reorder Child UI Elements] for details.{br}

For more information about boxes, see [HelpRoot_Dev_Customization\CG_GL_UI_Box|Box (Control for a Data Field)].]]></column>
			<column name="PlainText"><![CDATA[To Add a Box for a Data Field The  Acumatica Customization             Platform supports the following types of boxes for data fields: PXTextEdit PXNumberEdit PXMaskEdit PXDateTimeEdit PXCheckBox PXDropDown PXSelector PXSegmentMask PXTreeSelector (See the table in  Customizing Elements of the User Interface for field type descriptions.) You can add a box for a data field without restrictions immediately to a          PXFormView  or  PXTabItem  element that has the          DataMember  property defined. Also, you can add a box for a data field to       a  PXPanel  or  PXGroupBox  container that has the          DataMember  property inherited from the parent container. Also, you can add a box for a data field to a  RowTemplate  element of a          PXGrid  container that is bound to a data view whose BQL statement refers       to the data access class that contains the field declaration. To add a box for a data field to a container that is bound to a data view, perform the    following actions: Open the parent container in the Screen Editor, as described in  To Open a Container in the Screen Editor. Ensure that the container node is selected in the Control Tree of the editor. Click the           arrow left of the node to expand the node if needed. Click the  Add Data Fields  tab item (see the screenshot below). If you need to create a control for a data field that is not accessible through the data           view specified for the container in the  DataMember  property but is           accessible through another data view of the same graph, and if the  Data             View  box is available, select the needed data view in this box. (For           details, see  Use of Multiple Data Views for Boxes in Containers           in the  Acumatica Framework Guide.) On the  Add Data Fields  tab item of the Screen             Editor, if you change the predefined data view in the  Data View              box and create a control for a data field from the field list for the selected data             view, the editor concatenates the data view name with the field name in the                DataField  property of the created control. On the tab item, click the  All ,  Visible , or              Custom  filter for the fields provided by the data view to view           the appropriate field list. You can create a custom field immediately on the                Add Data Fields  tab item by clicking the  New               Field  action and then using the  Create New               Field Create New Field dialog box. Find the required data field in the list, and if the field is not used (the check box in the              Used  column is cleared for the field), select the check box for           the field in the first (unlabeled) column, as the following screenshot shows. Selecting a data field for which a box to be created You can select multiple data fields to create multiple boxes             simultaneously. On the list toolbar, click  Create Controls . The platform creates a             box for the selected data field and adds a node for the box to the Control           Tree. Click  Save  to save the changes in the customization project. You can change the location of a control in a container. See  To Reorder Child UI Elements for details. For more information about boxes, see  Box (Control for a Data Field). ]]></column>
		</row>
		<row PageID="dfbe0e68-a4fd-438e-8ce1-cb89cc5d004f" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="162d12e8-ead6-bfd3-24ed-072e11839e73" RecordSourceID="22377">
			<column name="Content"><![CDATA[
In a container with multiple controls, the <tt>PXLayoutRule</tt> component is used to provide the following UI customization capabilities:[anchor|#ul_czt_cr1_xl]
*Placing controls in multiple rows to uniformly distribute them on the form or tab area of a form
*Placing controls in multiple columns in a row
*Spanning controls across multiple columns in a row
*Merging controls into one row to align them horizontally
*Adjusting the widths of controls and labels in a column
*Hiding the labels of controls
*Grouping controls for users&rsquo; convenience
{br}

The [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_LayoutEditor|Screen Editor] supports the following types of the <tt>PXLayoutRule</tt> component (with the respective predefined properties noted):[anchor|#_634cb2e0-175c-48f3-be85-b19eaf897159]
*'''Row''': A layout rule with the <tt>StartRow</tt> property, which is set to ''True''
* '''Column''': A layout rule with the <tt>StartColumn</tt> property, which is set to ''True''
* '''Group''': A layout rule with the <tt>StartGroup</tt> property, which is set to ''True''
* '''Merge''': A layout rule with the <tt>Merge</tt> property, which is set to ''True''
* '''Empty Rule''': A layout rule without predefined properties
{br}

To add a layout rule to a container, perform the following actions:[anchor|#_19a2b06a-5039-4927-9b6a-ec1e3e2875b8]
#Open the container in the Screen Editor, as described in [HelpRoot_Dev_Customization\CG_GL_UI_PXForm_ToOpen|To Open a Container in the Screen Editor].
#Ensure that the container node is selected in the Control Tree of the editor. Click the arrow left of the node to expand the node if needed.
#Click the '''Add Controls''' tab item (see the screenshot below).
#From the '''Layout Rules''' group, drag the required type of the rule to the needed location in the Control Tree within the container, as shown in the following screenshot.[anchor|#_42c988ff-e8ba-4b9b-b4c2-4f827115e685][image:CustomizationPlatform/images/CG_GL_UI_PXForm_AddLayoutRule.png|popup|Adding a layout rule to a container|440px]
#:((({S:Warn}A layout rule is visible on the customized form only if it contains at least one visible control.
)))
#If required, specify properties for the new layout rule.
#:((({S:Warn}In any rule, you can configure any properties that you need. Some properties affect only the next control under the <tt>PXLayoutRule</tt> component, while other properties affect all controls under the rule until the next rule is encountered. Some properties require a corresponding ending rule. See [HelpRoot_Dev_Customization\CG_GL_UI_LayoutRules_Properties|To Set a Layout Rule Property] for details.
)))
#Click '''Save''' to save your changes in the customization project.
{br}

If you add a layout rule beneath another layout rule, you can override the properties of the <tt>PXLayoutRule</tt> component, which apply to the underlying controls. See [HelpRoot_Dev_Customization\CG_GL_UI_LayoutRules|Layout Rule (PXLayoutRule)] for more information about using layout rules.]]></column>
			<column name="PlainText"><![CDATA[To Add a Layout Rule In a container with multiple controls, the  PXLayoutRule  component is used       to provide the following UI customization capabilities: Placing controls in multiple rows to uniformly distribute them on the form or tab area           of a form Placing controls in multiple columns in a row Spanning controls across multiple columns in a row Merging controls into one row to align them horizontally Adjusting the widths of controls and labels in a column Hiding the labels of controls Grouping controls for users' convenience The  Screen Editor supports the following types of       the  PXLayoutRule  component (with the respective predefined properties         noted): Row : A layout rule with the  StartRow  property,           which is set to  True Column : A layout rule with the  StartColumn            property, which is set to  True Group : A layout rule with the  StartGroup            property, which is set to  True Merge : A layout rule with the  Merge  property,           which is set to  True Empty Rule : A layout rule without predefined properties To add a layout rule to a container, perform the following actions: Open the container in the Screen Editor, as described in  To Open a Container in the Screen Editor. Ensure that the container node is selected in the Control Tree of the editor. Click the           arrow left of the node to expand the node if needed. Click the  Add Controls  tab item (see the screenshot below). From the  Layout Rules  group, drag the required type of the rule           to the needed location in the Control Tree within the container, as shown in the following             screenshot. Adding a layout rule to a container A layout rule is visible on the customized form only if it contains at least             one visible control. If required, specify properties for the new layout rule. In any rule, you can             configure any properties that you need. Some properties affect only the next control             under the  PXLayoutRule  component, while other properties affect all             controls under the rule until the next rule is encountered. Some properties require a             corresponding ending rule. See  To Set a Layout Rule Property for             details. Click  Save  to save your changes in the customization           project. If you add a layout rule beneath another layout rule, you can override the properties of the          PXLayoutRule  component, which apply to the underlying controls. See  Layout Rule (PXLayoutRule) for more information about using layout rules. ]]></column>
		</row>
		<row PageID="db3af871-a97f-4d59-b662-aafd486e4c2d" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="d85eb2b1-9186-19a8-0566-29c5a9c2efca" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You use the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_LayoutEditor|Screen Editor] to add to a container a control of any of the following types, which are supported in the Acumatica Customization             Platform (listed under '''Other Controls''' on the '''Add Controls''' tab item):[anchor|#_16f4f169-2e1d-4a1c-a2ac-085c0dca8c7a]
*[HelpRoot_Dev_Customization\CG_GL_UI_Panels|Panel (PXPanel)]
*[HelpRoot_Dev_Customization\CG_GL_UI_GroupBoxes|Group Box (PXGroupBox)]
*[HelpRoot_Dev_Customization\CG_GL_UI_Labels|Label (PXLabel)]
*[HelpRoot_Dev_Customization\CG_GL_UI_Radio|Radio Button (PXRadioButton)]
*[HelpRoot_Dev_Customization\CG_GL_UI_PXButton|Button (PXButton)]
*[HelpRoot_Dev_Customization\CG_GL_UI_PXJavaScript|Java Script (PXJavaScript)]
{br}

We recommend that you not include a <tt>PXRadioButton</tt> control in a container that neither is bound to a data view nor inherits the <tt>DataMember</tt> property from the parent container.{br}

You can nest a control of the listed types in a <tt>PXPanel</tt> or <tt>PXGroupBox</tt> container. However the <tt>PXGroupBox</tt> control type is especially designed to be used as a radio button container to render a drop-down field as a set of radio buttons. It contains scripts with the logic to support a nested radio button for each value of a drop-down field. So we recommend that you use <tt>PXGroupBox</tt> exclusively to include radio buttons.{br}

To add a control of one of the listed types to a container, perform the following actions:[anchor|#_7bf077c3-7b1b-4cec-bdb2-3383b92a565a]
#Open the container in the Screen Editor, as described in [HelpRoot_Dev_Customization\CG_GL_UI_PXForm_ToOpen|To Open a Container in the Screen Editor].
#Ensure that the container node is selected in the Control Tree of the editor. Click the arrow left of the node to expand the node if needed.
#Click the '''Add Controls''' tab item (see the screenshot below).
#From the '''Other Controls''' group, drag the required control type to the needed location in the Control Tree within the container, as shown in the following screenshot.[anchor|#_42c988ff-e8ba-4b9b-b4c2-4f827115e685][image:CustomizationPlatform/images/CG_GL_UI_PXForm_AddStControl.png|popup|Adding a layout rule to a container|404px]
#If required, specify properties for the new control.
#Click '''Save''' to save your changes in the customization project.
]]></column>
			<column name="PlainText"><![CDATA[To Add Another Supported Control You use the  Screen Editor to add to a container a       control of any of the following types, which are supported in the  Acumatica Customization             Platform (listed under  Other Controls  on the  Add         Controls  tab item): Panel (PXPanel)Group Box (PXGroupBox)Label (PXLabel)Radio Button (PXRadioButton)Button (PXButton)Java Script (PXJavaScript)We recommend that you not include a  PXRadioButton  control in a container       that neither is bound to a data view nor inherits the  DataMember  property       from the parent container. You can nest a control of the listed types in a  PXPanel  or          PXGroupBox  container. However the  PXGroupBox  control       type is especially designed to be used as a radio button container to render a drop-down field       as a set of radio buttons. It contains scripts with the logic to support a nested radio button       for each value of a drop-down field. So we recommend that you use          PXGroupBox  exclusively to include radio buttons. To add a control of one of the listed types to a container, perform the following actions: Open the container in the Screen Editor, as described in  To Open a Container in the Screen Editor. Ensure that the container node is selected in the Control Tree of the editor. Click the           arrow left of the node to expand the node if needed. Click the  Add Controls  tab item (see the screenshot below). From the  Other Controls  group, drag the required control type to           the needed location in the Control Tree within the container, as shown in the following             screenshot. Adding a layout rule to a container If required, specify properties for the new control. Click  Save  to save your changes in the customization           project. ]]></column>
		</row>
		<row PageID="e8c5d340-f996-4634-8f84-ce56198286c5" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="340d4c3f-8569-3178-e30b-6a3b51cef8ae" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can reorder UI elements in a container manually by dragging them in the Control Tree of the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_LayoutEditor|Screen Editor]. However before you start to move elements, note the following simple rules:[anchor|#_0de77ef1-d96f-45d0-9f48-62836e2e66a2]
*You can move a child element anywhere within its parent container control.
*To move an element within a container, you have to drag the element to the required place.
*Any element moved within a container is automatically aligned according to the nearest <tt>PXLayoutRule</tt> component placed above it. (See [HelpRoot_Dev_Customization\CG_GL_UI_LayoutRules|Layout Rule (PXLayoutRule)] for details.)
{br}

To move an element within a container, perform the following actions:[anchor|#_19a2b06a-5039-4927-9b6a-ec1e3e2875b8]
#Open the container in the Screen Editor, as described in [HelpRoot_Dev_Customization\CG_GL_UI_PXForm_ToOpen|To Open a Container in the Screen Editor].
#Ensure that the container node is selected and expanded in the Control Tree of the editor. Click the arrow left of the node to expand the node if needed.
#In the Control Tree, drag the element to the required position.
#:The Screen Editor moves the element with all its child elements to the new position in the container.
#Click '''Save''' to save your changes to the customization project.
]]></column>
			<column name="PlainText"><![CDATA[To Reorder Child UI Elements You can reorder UI elements in a container manually by dragging them in the Control Tree of the          Screen Editor. However before you start to move       elements, note the following simple rules: You can move a child element anywhere within its parent container control. To move an element within a container, you have to drag the element to the required           place. Any element moved within a container is automatically aligned according to the nearest              PXLayoutRule  component placed above it. (See  Layout Rule (PXLayoutRule) for details.) To move an element within a container, perform the following actions: Open the container in the Screen Editor, as described in  To Open a Container in the Screen Editor. Ensure that the container node is selected and expanded in the Control Tree of the editor.           Click the arrow left of the node to expand the node if needed. In the Control Tree, drag the element to the required position. The Screen Editor moves             the element with all its child elements to the new position in the container. Click  Save  to save your changes to the customization project. ]]></column>
		</row>
		<row PageID="36ecc137-64ed-4252-be08-8263522dc60a" Language="en-US" PageRevisionID="1" Content="&#xA;You can delete a child UI element from a container. To do this, perform the following actions:[anchor|#_9980b6e8-8868-40c5-8ec9-9170ef1a4138]&#xA;#Open the container in the Screen Editor, as described in [HelpRoot_Dev_Customization\CG_GL_UI_PXForm_ToOpen|To Open a Container in the Screen Editor].&#xA;#In the Control Tree of the editor, click the arrow left of the container node to expand the node.&#xA;#Select the UI element to be deleted.&#xA;#On the toolbar of the Control Tree, click '''Remove &amp;gt; Remove''', as the following screenshot shows.[anchor|#_62d74e2d-f419-4aed-ade1-42d971446ea1][image:CustomizationPlatform/images/CG_GL_UI_PXForm_DeleteControl.png|popup|Deleting an UI element|396px]&#xA;#:The platform deletes all child elements of the deleted object.((({S:Hint}If you delete a &lt;tt&gt;PXLayoutRule&lt;/tt&gt; component, all the controls under this layout rule are deleted too.&#xA;)))&#xA;#Click '''Save''' on the toolbar of the Screen Editor to save your changes to the customization project.&#xA;" PlainText="To Delete a Child UI Element You can delete a child UI element from a container. To do this, perform the following     actions: Open the container in the Screen Editor, as described in  To Open a Container in the Screen Editor. In the Control Tree of the editor, click the arrow left of the container node to expand           the node. Select the UI element to be deleted. On the toolbar of the Control Tree, click  Remove &gt; Remove , as the following screenshot shows. Deleting an UI element The platform deletes all child elements of the deleted object. If you delete a  PXLayoutRule  component, all the               controls under this layout rule are deleted too. Click  Save  on the toolbar of the Screen Editor to save your changes           to the customization project. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="b0eafaeb-de85-dac1-15da-7a44c11d64d5" RecordSourceID="22377" />
		<row PageID="439986fd-e616-43a0-84ca-f6e72a9c74a1" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="d81ffb00-70b4-543a-7c68-a75a8ff71e30" RecordSourceID="22377">
			<column name="Content"><![CDATA[
<tt>PXGrid</tt> is a data-bound UI container control that renders a table with multiple records from its associated data source. For a single record, the object can be displayed in form view mode, which provides navigation buttons to move between records. For form view mode to be defined, <tt>PXGrid</tt> must include the <tt>RowTemplate</tt> element, which can contain controls for the record fields and layout rules for these controls.{br}

An ASPX page can contain <tt>PXGrid</tt> as a main container that is included immediately in the page. A grid container, as the diagram below shows, can also be included in the following types of containers:[anchor|#_d4be3055-f97a-4f24-8f3e-5361d4c4ef62]
*<tt>PXFormView</tt>
* <tt>PXTabItem</tt>
* <tt>PXSmartPanel</tt>
[anchor|#_8a5aba79-3550-4d54-ada2-29e93ac1d463][anchor|#_b9e2688e-0e9a-4372-8924-f23ca085c2ed][image:CustomizationPlatform/images/CG_GL_Forms_ASPX_Containers_PXGrid.png|popup|Nesting rules for a PXGrid container in an ASPX page|450px]{br}

A grid container can include multiple <tt>PXGridColumn</tt> objects and a single <tt>RowTemplate</tt> element. In the ASPX code, grid columns are included in the <tt>Columns</tt> element, whereas controls for the form view of the grid belong to the <tt>RowTemplate</tt> element, as the following code snippet shows.{{{{&lt;px:PXGrid ID="grid" ... DataSourceID="ds" ...&gt;
  ...
    &lt;Columns&gt;
      ...
      &lt;px:PXGridColumn DataField="Qty" TextAlign="Right" Width="81px" AutoCallBack="True" /&gt;
      ...
    &lt;/Columns&gt;
    &lt;RowTemplate&gt;
      ...
      &lt;px:PXNumberEdit ID="edQty" runat="server" DataField="Qty" /&gt;
      ...
    &lt;/RowTemplate&gt;
  ...
&lt;/px:PXGrid&gt;

}}}}In this code, you can see descriptions of both a grid column and a box for the same {{Qty}} data field.{br}

To create a new grid in an ASPX page, follow the instructions described in [HelpRoot_Dev_Customization\CG_GL_Forms_CustForm_AdContainer_Grid|To Add a Grid Container].{br}

To delete a grid from an ASPX page, follow the instructions described in [HelpRoot_Dev_Customization\CG_GL_Forms_CustForm_DeleteContainer|To Delete a Container].{br}

For detailed information on working with the content of a grid container, see the following topics in this section:[anchor|#ul_xtf_5wp_gq]
*[HelpRoot_Dev_Customization\CG_GL_UI_PXGrid_AddColumn|To Add a Column for a Data Field]
*[HelpRoot_Dev_Customization\CG_GL_UI_PXGrid_AddBox2RowTemplate|To Add a Control to the Form View of a Grid]
*[HelpRoot_Dev_Customization\CG_GL_Forms_Hyperlinks|To Provide Hyperlinks for a Grid Column]
The following topics may also be useful as you work with a grid container:[anchor|#_65447455-2f44-48c7-b6dc-3bd6a9abbde9]
*[HelpRoot_Dev_Customization\CG_GL_UI_PXForm_ToOpen|To Open a Container in the Screen Editor]
*[HelpRoot_Dev_Customization\CG_GL_UI_PXForm_Properties|To Set a Container Property]
*[HelpRoot_Dev_Customization\CG_GL_UI_PXForm_ReorderChild|To Reorder Child UI Elements]
*[HelpRoot_Dev_Customization\CG_GL_UI_PXForm_DeleteControl|To Delete a Child UI Element]

==Related Articles==
*[HelpRoot_Dev_Customization\CG_Platform_Framework_ASPX|Changes in Webpages (ASPX)]
*[HelpRoot_Dev_Customization\CG_GL_Items_Screens|Customized Screens]]]></column>
			<column name="PlainText"><![CDATA[Grid Container (PXGrid) PXGrid  is a data-bound UI container control that renders a table with       multiple records from its associated data source. For a single record, the object can be       displayed in form view mode, which provides navigation buttons to move between records. For       form view mode to be defined,  PXGrid  must include the          RowTemplate  element, which can contain controls for the record fields and       layout rules for these controls. An ASPX page can contain  PXGrid  as a main container that is included       immediately in the page. A grid container, as the diagram below shows, can also be included in       the following types of containers: PXFormView PXTabItem PXSmartPanel Nesting rules for a PXGrid container in an ASPX page A grid container can include multiple  PXGridColumn  objects and a single          RowTemplate  element. In the ASPX code, grid columns are included in the          Columns  element, whereas controls for the form view of the grid belong to       the  RowTemplate  element, as the following code snippet       shows. <px:PXGrid ID="grid" ... DataSourceID="ds" ...>
  ...
    <Columns>
      ...
      <px:PXGridColumn DataField="Qty" TextAlign="Right" Width="81px" AutoCallBack="True" />
      ...
    </Columns>
    <RowTemplate>
      ...
      <px:PXNumberEdit ID="edQty" runat="server" DataField="Qty" />
      ...
    </RowTemplate>
  ...
</px:PXGrid>
 In       this code, you can see descriptions of both a grid column and a box for the same          Qty  data field. To create a new grid in an ASPX page, follow the instructions described in  To Add a Grid Container. To delete a grid from an ASPX page, follow the instructions described in  To Delete a Container. For detailed information on working with the content of a grid container, see the following       topics in this section: To Add a Column for a Data FieldTo Add a Control to the Form View of a GridTo Provide Hyperlinks for a Grid ColumnThe following topics may also be useful as you work with a grid container: To Open a Container in the Screen EditorTo Set a Container PropertyTo Reorder Child UI ElementsTo Delete a Child UI Element]]></column>
		</row>
		<row PageID="840d3850-9bff-4718-ba7e-721b761783ad" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="362b3ba0-3ae2-a0e0-f7c4-3a60192b51dc" RecordSourceID="22377">
			<column name="Content"><![CDATA[
In a grid, you can create a column for a data field if the grid container is bound to a data view declared within the graph that provides business logic for the ASPX page. To bind a grid container to a data view, you must specify the properties as follows for the appropriate <tt>PXGrid</tt> object:[anchor|#_7c079a7a-7da5-41aa-8421-fa804c8705b2]
*The <tt>DataSourceID</tt> property value must be equal to the value of the <tt>ID</tt> property of the <tt>PXDataSource</tt> control.
*The <tt>DataMember</tt> property must contain the name of the data view that is declared in the graph and provides data for the grid.
{br}

To add a column to a grid that is bound to a data view, perform the following actions:[anchor|#_812c3d78-1eec-44c0-b015-8e01e0ceffa6]
#Open the grid container in the Screen Editor, as described in [HelpRoot_Dev_Customization\CG_GL_UI_PXForm_ToOpen|To Open a Container in the Screen Editor].
#In the Control Tree of the editor, ensure that the grid node is selected. Click the arrow left of the node to expand the node if needed.
#In the editor, click the '''Add Data Fields''' tab item (see the screenshot below).
#On the tab item, select the '''All''', '''Visible''' (as shown below), or '''Custom''' filter for the data fields provided by the data view, to open the appropriate field list.
#:((({S:Warn}You can create a custom field immediately on the '''Add Data Fields''' tab item by using the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_DataClassEditor_NewFieldDlg|Create New Field] dialog box.
)))
#Find the required data field in the list, and if the field is not used (that is, if the check box in the '''Used''' column is cleared for the field), select the check box in the unlabeled first column for the field.
#:((({S:Warn}[anchor|#_0a1c2dd8-d7a5-43c8-96da-c0982191b02f]
*You can select multiple data fields to create multiple columns simultaneously.
*In the '''Field Name''' column of the list, a data field of a joined data access class (DAC) has a name that consists of the DAC name, two underscore characters, and the field name, such as ''Product&#95;&#95;Active''. If you create a grid column for this field, the new <tt>PXGridColumn</tt> element refers to the field as shown in the following ASPX code.{{{{&lt;px:PXGridColumn DataField="Product__Active" ... /&gt;
}}}}
)))
#On the list toolbar, click '''Create Controls'''.
#:The platform creates a column for the selected data field, appends this column to the end of the grid column list, and adds a node for the column to the appropriate position in the Control Tree.((({S:Warn}If you need to locate the new column in a position after some existing column, you can select this existing column before you click '''Create Controls'''. Then the editor inserts new grid columns after the column that is selected in the Control Tree.
)))At any time, you can change the position of a column in a grid. See [HelpRoot_Dev_Customization\CG_GL_UI_PXForm_ReorderChild|To Reorder Child UI Elements] for details.
#If needed, specify the following properties of the new column:
#*<tt>Type</tt>—to define a specific type of data in a column (for details, see [HelpRoot_Dev_Platform\CW__con_PXGrid_AddColumn_TypeProperty|Use of the Type Property of PXGridColumn] in the Acumatica Framework Guide)
#*<tt>CommitChanges</tt>—to enable callbacks on the column field (for details, see [HelpRoot_Dev_Platform\CW__con_CommitChanges|Use of the CommitChanges Property of Boxes] in the Acumatica Framework Guide)
#*<tt>DisplayMode</tt>—to define the mode of displaying a value in the column (for details, see [HelpRoot_Dev_Platform\CW__con_PXGrid_AddColumn_DistplayModeProperty|Use of the DisplayMode Property of PXGridColumn] in the Acumatica Framework Guide)
#:((({S:Warn}If you need to provide hyperlinks to redirect the user from a column cell to another Acumatica ERP form, follow the recommendations described in [HelpRoot_Dev_Customization\CG_GL_Forms_Hyperlinks|To Provide Hyperlinks for a Grid Column].
)))
#Click '''Save''' to save your changes to the customization project.
]]></column>
			<column name="PlainText"><![CDATA[To Add a Column for a Data Field In a grid, you can create a column for a data field if the grid container is bound to a data       view declared within the graph that provides business logic for the ASPX page. To bind a grid       container to a data view, you must specify the properties as follows for the appropriate          PXGrid  object: The  DataSourceID  property value must be equal to the value of the              ID  property of the  PXDataSource  control. The  DataMember  property must contain the name of the data view that           is declared in the graph and provides data for the grid. To add a column to a grid that is bound to a data view, perform the following actions: Open the grid container in the Screen Editor, as described in  To Open a Container in the Screen Editor. In the Control Tree of the editor, ensure that the grid node is selected. Click the arrow      left of the node to expand the node if needed. In the editor, click the  Add Data Fields  tab item (see the screenshot      below). On the tab item, select the  All ,  Visible  (as           shown below), or  Custom  filter for the data fields provided by the           data view, to open the appropriate field list. You can create a custom field             immediately on the  Add Data Fields  tab item by using the  Create New               Field Create New Field dialog box. Find the required data field in the list, and if the field is not used (that is, if the           check box in the  Used  column is cleared for the field), select the           check box in the unlabeled first column for the field. You can select multiple data fields to create multiple columns                 simultaneously. In the  Field Name  column of the list, a data field of a                 joined data access class (DAC) has a name that consists of the DAC name, two                 underscore characters, and the field name, such as  Product__Active . If you                 create a grid column for this field, the new  PXGridColumn  element                 refers to the field as shown in the following ASPX                 code. <px:PXGridColumn DataField="Product__Active" ... /> On the list toolbar, click  Create Controls . The platform creates a             column for the selected data field, appends this column to the end of the grid column             list, and adds a node for the column to the appropriate position in the Control               Tree. If you need to locate the new column in a position after some existing               column, you can select this existing column before you click  Create                 Controls . Then the editor inserts new grid columns after the column that               is selected in the Control Tree. At any time, you can change the position of a             column in a grid. See  To Reorder Child UI Elements for           details. If needed, specify the following properties of the new column: Type —to define a specific type of data in a column (for details,               see  Use of the Type Property of PXGridColumn               in the  Acumatica Framework Guide) CommitChanges —to enable callbacks on the column field (for               details, see  Use of the CommitChanges Property of Boxes in the                  Acumatica Framework Guide) DisplayMode —to define the mode of displaying a value in the               column (for details, see  Use of the DisplayMode Property of PXGridColumn               in the  Acumatica Framework Guide) If you need to provide hyperlinks to redirect the user from a column cell to             another  Acumatica ERP form, follow the recommendations described in  To Provide Hyperlinks for a Grid Column. Click  Save  to save your changes to the customization project. ]]></column>
		</row>
		<row PageID="adcb6fe5-1b28-4865-82f5-57d9e6c498c1" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="59732320-d6fa-f593-d068-8b8da9681ef0" RecordSourceID="22377">
			<column name="Content"><![CDATA[
If the <tt>AllowFormEdit</tt> property of a grid is set to ''True'', the user can switch the grid to form view mode to display the grid columns as controls on the form. This mode gives you the capability to edit a single record selected in the grid.{br}

Therefore, to add a box for a data field to the form view of a grid, you have to add the box to the <tt>RowTemplate</tt> element in the ASPX code. To do this in the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_LayoutEditor|Screen Editor], perform the following actions:[anchor|#_0ab3feae-4ee5-4e51-8e79-6cd3cd3414de]
#Open the grid container in the Screen Editor, as described in [HelpRoot_Dev_Customization\CG_GL_UI_PXForm_ToOpen|To Open a Container in the Screen Editor].
#In the Control Tree of the editor, click the arrow left of the node to expand the node.
#Click the arrow left of the '''Levels''' node to expand the node, and then expand the node that appears, which has the same name as the grid does.
#:((({S:Warn}In the Control Tree, the Screen Editor assigns to a grid node the ''Grid:&lt;DataMember&gt;'' name, where the ''&lt;DataMember&gt;'' is the value of the <tt>DataMember</tt> property of the grid container. To the node that corresponds to the <tt>RowTemplate</tt> element of the grid, the editor assigns the same ''&lt;DataMember&gt;'' name.
)))
#If the expanded node contains other expandable nodes, such as ''Columns'' nodes, expand them to see which boxes are currently included in the form view of the grid.
#:((({S:Warn}The <tt>RowTemplate</tt> element can contain layout rules, which are used to arrange controls in the form view of the grid. Also, you can use this element to provide specific properties of columns in the grid.
)))
#If you need to place the new box in a position below some existing box, select the node of this box in the Control Tree before you add a new control. (In the screenshot below, the ''Mailing ID'' node is currently selected in the tree.)
#In the editor, click the '''Add Data Fields''' tab item.
#On the tab item, click the '''All''', '''Visible''', or '''Custom''' filter for the data fields provided by the data view to open the appropriate field list.
#:((({S:Warn}You can create a custom field immediately on the '''Add Data Fields''' tab item by using the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_DataClassEditor_NewFieldDlg|Create New Field] dialog box.
)))
#Find the required data field in the list, and if the field is not used (that is, if the check box in the '''Used''' column is cleared for the field), select the check box for the field in the first column, as the following screenshot shows.[anchor|#_ef5bcbe6-e756-47d0-af56-72c5fea5eb7f][image:CustomizationPlatform/images/CG_GL_UI_PXGrid_AddBox2RowTemplate.png|popup|Selecting a data field to create a control on the form view of the grid|439px]
#:((({S:Warn}You can select multiple data fields to create multiple columns simultaneously.
)))
#On the list toolbar, click '''Create Controls'''.
#:The platform creates a box for the selected data field and adds a node for the box to the appropriate position in the Control Tree. At any time, you can change the position of a column in a grid. See [HelpRoot_Dev_Customization\CG_GL_UI_PXForm_ReorderChild|To Reorder Child UI Elements] for details.
#If needed, specify properties for the new control.
#:((({S:Warn}If you need to provide hyperlinks to redirect the user from a column cell to another Acumatica ERP form, follow the recommendations described in [HelpRoot_Dev_Customization\CG_GL_Forms_Hyperlinks|To Provide Hyperlinks for a Grid Column].
)))
#Click '''Save''' to save your changes to the customization project.
]]></column>
			<column name="PlainText"><![CDATA[To Add a Control to the Form View of a Grid If the  AllowFormEdit  property of a grid is set to  True , the user can       switch the grid to form view mode to display the grid columns as controls on the form. This       mode gives you the capability to edit a single record selected in the grid. Therefore, to add a box for a data field to the form view of a grid, you have to add the box to       the  RowTemplate  element in the ASPX code. To do this in the  Screen Editor, perform the following actions: Open the grid container in the Screen Editor, as described in  To Open a Container in the Screen Editor. In the Control Tree of the editor, click the arrow left of the node to expand the           node. Click the arrow left of the  Levels  node to expand the node, and           then expand the node that appears, which has the same name as the grid does. In the             Control Tree, the Screen Editor assigns to a grid node the  Grid:<DataMember>              name, where the  <DataMember>  is the value of the  DataMember              property of the grid container. To the node that corresponds to the                RowTemplate  element of the grid, the editor assigns the same                <DataMember>  name. If the expanded node contains other expandable nodes, such as  Columns  nodes,           expand them to see which boxes are currently included in the form view of the             grid. The  RowTemplate  element can contain layout rules, which             are used to arrange controls in the form view of the grid. Also, you can use this             element to provide specific properties of columns in the grid. If you need to place the new box in a position below some existing box, select the node           of this box in the Control Tree before you add a new control. (In the screenshot below,           the  Mailing ID  node is currently selected in the tree.) In the editor, click the  Add Data Fields  tab item. On the tab item, click the  All ,  Visible ,           or  Custom  filter for the data fields provided by the data view to           open the appropriate field list. You can create a custom field immediately on the                Add Data Fields  tab item by using the  Create New               Field Create New Field dialog box. Find the required data field in the list, and if the field is not used (that is, if the           check box in the  Used  column is cleared for the field), select the           check box for the field in the first column, as the following screenshot shows. Selecting a data field to create a control on the form view of the grid You can select multiple data fields to create multiple columns             simultaneously. On the list toolbar, click  Create Controls . The platform             creates a box for the selected data field and adds a node for the box to the appropriate             position in the Control Tree. At any time, you can change the position of a column in a             grid. See  To Reorder Child UI Elements for details. If needed, specify properties for the new control. If you need to provide             hyperlinks to redirect the user from a column cell to another  Acumatica ERP form, follow the recommendations described in  To Provide Hyperlinks for a Grid Column. Click  Save  to save your changes to the customization           project. ]]></column>
		</row>
		<row PageID="b58cf22a-054d-4cec-971a-8a7c3d24e338" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="d20e714f-f3d1-82d1-05f4-4f9ca18cdc58" RecordSourceID="22377">
			<column name="Content"><![CDATA[
To provide hyperlinks for an existing column in a grid, perform the following actions:[anchor|#ol_sk2_zhw_35]
#Add the <tt>PXSelector</tt> attribute for the field used to create the column.
#For the field, create a selector control in the <tt>RowTemplate</tt> element of the <tt>PXGridLevel</tt> container of the ASPX page, as described in [HelpRoot_Dev_Customization\CG_GL_UI_PXGrid_AddBox2RowTemplate|To Add a Control to the Form View of a Grid].
#Set the <tt>AllowEdit</tt> property of the selector control to ''True''.
((({S:Warn}A selector control contains the value of the key field of a data record from a particular table. Therefore, the control can be used to redirect a user to the form designed to edit the data record.
))){br}

After you have completed these actions:[anchor|#ul_m1s_qtw_35]
*The column fields contain hyperlinks to redirect the user to the data entry form for the records defined by the fields.
*If the form view for the grid is available, the following interface elements appear on the form view:
**The text box created for the field
**The '''Edit''' button, which provides the required redirection to the data entry form for the record defined by the value in the text box
]]></column>
			<column name="PlainText"><![CDATA[To Provide Hyperlinks for a Grid Column To provide hyperlinks for an existing column in a grid, perform the following actions: Add the  PXSelector  attribute for the field used to create the           column. For the field, create a selector control in the  RowTemplate  element           of the  PXGridLevel  container of the ASPX page, as described in  To Add a Control to the Form View of a Grid. Set the  AllowEdit  property of the selector control to            True . A selector control contains the value of the key field of a data record from a         particular table. Therefore, the control can be used to redirect a user to the form designed         to edit the data record. After you have completed these actions: The column fields contain hyperlinks to redirect the user to the data entry form for the      records defined by the fields. If the form view for the grid is available, the following interface elements appear on the           form view: The text box created for the field The  Edit  button, which provides the required redirection to               the data entry form for the record defined by the value in the text box ]]></column>
		</row>
		<row PageID="2be5d728-90d6-4b63-8655-5b6ebfd636ee" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="7012fe8e-3caf-a0c2-bd5b-67c186fbc9d4" RecordSourceID="22377">
			<column name="Content"><![CDATA[
<tt>PXTab</tt> is a data-bound UI container control that renders tabs defined by child <tt>PXTabItem</tt> containers.{br}

An ASPX page can contain <tt>PXTab</tt> as a main container. A tab container, as the diagram below shows, can be also included in the following types of containers:[anchor|#_d4be3055-f97a-4f24-8f3e-5361d4c4ef62]
*<tt>PXFormView</tt>
* <tt>PXTabItem</tt>
* <tt>PXSmartPanel</tt>
[anchor|#_8a5aba79-3550-4d54-ada2-29e93ac1d463][anchor|#_b9e2688e-0e9a-4372-8924-f23ca085c2ed][image:CustomizationPlatform/images/CG_GL_Forms_ASPX_Containers_PXTab.png|popup|Nesting rules for a PXTab container in an ASPX page|450px]{br}

A tab container can include only <tt>PXTabItem</tt> container controls.{br}

A box for a data field can be added immediately to a child <tt>PXTabItem</tt> container if the parent <tt>PXTab</tt> container is bound to a data view declared within the graph that provides business logic for the ASPX page. To bind a tab container to a data view, you must specify the properties as follows for the appropriate <tt>PXTab</tt> object:[anchor|#_7c079a7a-7da5-41aa-8421-fa804c8705b2]
*The <tt>DataSourceID</tt> property value must be equal to the value of the <tt>ID</tt> property of the <tt>PXDataSource</tt> control.
*The <tt>DataMember</tt> property must contain the name of the data view that is declared in the graph and provides data for the controls of a child container that is not a data-bound UI container.
{br}

To create a new tab container in an ASPX page, follow the instructions described in [HelpRoot_Dev_Customization\CG_GL_Forms_CustForm_AdContainer_Tab|To Add a Tab Container].{br}

To delete a tab container from an ASPX page, follow the instructions described in [HelpRoot_Dev_Customization\CG_GL_Forms_CustForm_DeleteContainer|To Delete a Container].{br}

For detailed information about the <tt>PXTabItem</tt> container control, see [HelpRoot_Dev_Customization\CG_GL_UI_TabItem|Tab Item Container (PXTabItem)].
==Related Articles==
*[HelpRoot_Dev_Customization\CG_Platform_Framework_ASPX|Changes in Webpages (ASPX)]
*[HelpRoot_Dev_Customization\CG_GL_Items_Screens|Customized Screens]]]></column>
			<column name="PlainText"><![CDATA[Tab Container (PXTab) PXTab  is a data-bound UI container control that renders tabs defined by       child  PXTabItem  containers. An ASPX page can contain  PXTab  as a main container. A tab container, as       the diagram below shows, can be also included in the following types of containers: PXFormView PXTabItem PXSmartPanel Nesting rules for a PXTab container in an ASPX page A tab container can include only  PXTabItem  container controls. A box for a data field can be added immediately to a child  PXTabItem        container if the parent  PXTab  container is bound to a data view declared       within the graph that provides business logic for the ASPX page. To bind a tab container to a       data view, you must specify the properties as follows for the appropriate          PXTab  object: The  DataSourceID  property value must be equal to the value of the              ID  property of the  PXDataSource  control. The  DataMember  property must contain the name of the data view that           is declared in the graph and provides data for the controls of a child container that is           not a data-bound UI container. To create a new tab container in an ASPX page, follow the instructions described in  To Add a Tab Container. To delete a tab container from an ASPX page, follow the instructions described in  To Delete a Container. For detailed information about the  PXTabItem  container control, see  Tab Item Container (PXTabItem). ]]></column>
		</row>
		<row PageID="035033e1-6d29-46d4-bdf9-55a1d7219349" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="6f835d93-d87b-820a-9b32-4e8fff843ecf" RecordSourceID="22377">
			<column name="Content"><![CDATA[
<tt>PXTabItem</tt> is a container control that can be used to render a single record from the data source specified for the parent <tt>PXTab</tt> container.{br}

A tab item container, as the diagram below shows, can be included only in a <tt>PXTab</tt> container.[anchor|#_8a5aba79-3550-4d54-ada2-29e93ac1d463][anchor|#_b9e2688e-0e9a-4372-8924-f23ca085c2ed][image:CustomizationPlatform/images/CG_GL_Forms_ASPX_Containers_PXTabItem.png|popup|Nesting rules for a PXTabItem container in an ASPX page|450px]{br}

A tab item container can include multiple ASPX objects of the following types:[anchor|#_bd6cb282-e80e-479d-b27f-ef26d6962f55]
*A data-bound UI container control: <tt>PXFormView</tt>, <tt>PXGrid</tt>, and <tt>PXTab</tt>
*A layout rule: <tt>PXLayoutRule</tt>
*A box for a data field: <tt>PXTextEdit</tt>, <tt>PXNumberEdit</tt>, <tt>PXMaskEdit</tt>, <tt>PXDateTimeEdit</tt>, <tt>PXCheckBox</tt>, <tt>PXDropDown</tt>, <tt>PXSelector</tt>, <tt>PXSegmentMask</tt>, and <tt>PXTreeSelector</tt>
*Another control: <tt>PXPanel</tt>, <tt>PXGroupBox</tt>, <tt>PXRadioButton</tt>, <tt>PXLabel</tt>, <tt>PXButton</tt>, and <tt>PXJavaScript</tt>
{br}

A box for a data field can be added to a tab item container if the parent <tt>PXTab</tt> container is bound to a data view declared within the graph that provides business logic for the ASPX page.{br}

To create a new tab item container in a tab container in an ASPX page, follow the instructions described in [HelpRoot_Dev_Customization\CG_GL_UI_PXForm_AddNested|To Add a Nested Container].{br}

To delete a tab item container from an ASPX page, follow the instructions described in [HelpRoot_Dev_Customization\CG_GL_UI_PXForm_DeleteControl|To Delete a Child UI Element].{br}

For specific information on working with a tab item container, see the [HelpRoot_Dev_Platform\CW__con_PXTabItem_Properties_VisibleExp|Conditional Hiding of a Tab Item] topic in this section. You will find additional information in the following topics:[anchor|#ul_xtf_5wp_gq]
*[HelpRoot_Dev_Customization\CG_GL_UI_PXForm_ToOpen|To Open a Container in the Screen Editor]
*[HelpRoot_Dev_Customization\CG_GL_UI_PXForm_Properties|To Set a Container Property]
*[HelpRoot_Dev_Customization\CG_GL_UI_PXForm_AddNested|To Add a Nested Container]
*[HelpRoot_Dev_Customization\CG_GL_UI_PXForm_AddBox|To Add a Box for a Data Field]
*[HelpRoot_Dev_Customization\CG_GL_UI_PXForm_AddLayoutRule|To Add a Layout Rule]
*[HelpRoot_Dev_Customization\CG_GL_UI_PXForm_AddStControl|To Add Another Supported Control]
*[HelpRoot_Dev_Customization\CG_GL_UI_PXForm_ReorderChild|To Reorder Child UI Elements]
*[HelpRoot_Dev_Customization\CG_GL_UI_PXForm_DeleteControl|To Delete a Child UI Element]

==Related Articles==
*[HelpRoot_Dev_Customization\CG_Platform_Framework_ASPX|Changes in Webpages (ASPX)]
*[HelpRoot_Dev_Customization\CG_GL_Items_Screens|Customized Screens]]]></column>
			<column name="PlainText"><![CDATA[Tab Item Container (PXTabItem) PXTabItem  is a container control that can be used to render a single       record from the data source specified for the parent  PXTab  container. A tab item container, as the diagram below shows, can be included only in a          PXTab  container. Nesting rules for a PXTabItem container in an ASPX page A tab item container can include multiple ASPX objects of the following types: A data-bound UI container control:  PXFormView ,              PXGrid , and  PXTab A layout rule:  PXLayoutRule A box for a data field:  PXTextEdit ,  PXNumberEdit ,              PXMaskEdit ,  PXDateTimeEdit ,              PXCheckBox ,  PXDropDown ,              PXSelector ,  PXSegmentMask , and              PXTreeSelector Another control:  PXPanel ,  PXGroupBox ,              PXRadioButton ,  PXLabel ,              PXButton , and  PXJavaScript A box for a data field can be added to a tab item container if the parent          PXTab  container is bound to a data view declared within the graph that       provides business logic for the ASPX page. To create a new tab item container in a tab container in an ASPX page, follow the       instructions described in  To Add a Nested Container. To delete a tab item container from an ASPX page, follow the instructions described in  To Delete a Child UI Element. For specific information on working with a tab item container, see the  Conditional Hiding of a Tab Item topic in this section. You will find       additional information in the following topics: To Open a Container in the Screen EditorTo Set a Container PropertyTo Add a Nested ContainerTo Add a Box for a Data FieldTo Add a Layout RuleTo Add Another Supported ControlTo Reorder Child UI ElementsTo Delete a Child UI Element]]></column>
		</row>
		<row PageID="2fe4a5bb-c249-4d30-b117-af8d1671a589" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="4bf4c152-e0b8-71b4-0286-21afc9a969b9" RecordSourceID="22377">
			<column name="Content"><![CDATA[
<tt>PXSmartPanel</tt> is a UI container control that renders a dialog box.{br}

A <tt>PXSmartPanel</tt> container does not have the <tt>DataMember</tt> property; therefore, it cannot contain a UI element for a data field. To add a box for a data field to a dialog box, in the appropriate <tt>PXSmartPanel</tt> container, you have to include the data-bound container that can contain the required data field.{br}

However without binding a data view, you can create, for example, a message box with the controls that contain all required data in the ASPX code.{br}

A <tt>PXSmartPanel</tt> container can include multiple ASPX objects of the following types (see the diagram below):[anchor|#_bd6cb282-e80e-479d-b27f-ef26d6962f55]
*A data-bound UI container control: <tt>PXFormView</tt>, <tt>PXGrid</tt>, and <tt>PXTab</tt>
*A layout rule: <tt>PXLayoutRule</tt>
*Another control: <tt>PXPanel</tt>, <tt>PXGroupBox</tt>, <tt>PXLabel</tt>, <tt>PXButton</tt>, and <tt>PXJavaScript</tt>
[anchor|#_8a5aba79-3550-4d54-ada2-29e93ac1d463][anchor|#_b9e2688e-0e9a-4372-8924-f23ca085c2ed][image:CustomizationPlatform/images/CG_GL_Forms_ASPX_Containers_PXSmartPanel.png|popup|Nesting rules for a PXSmartPanel container in an ASPX page|450px]((({S:Warn}A box for a data field cannot be added immediately to a dialog box because this type of container cannot be bound to a data view.
))){br}

To create a new dialog box in a form, follow the instructions described in [HelpRoot_Dev_Customization\CG_GL_Forms_CustForm_AddCustomDialogBox|To Add a Dialog Box].{br}

To delete a dialog box from a form, follow the instructions described in [HelpRoot_Dev_Customization\CG_GL_Forms_CustForm_DeleteContainer|To Delete a Container].{br}

In Acumatica ERP, a dialog box usually contains a container for data fields and a <tt>PXPanel</tt> container with <tt>PXButton</tt> elements to get a response from the user. See [HelpRoot_Dev_Customization\CG_GL_UI_Panels|Panel (PXPanel)] and [HelpRoot_Dev_Customization\CG_GL_UI_PXButton_InSmartPanel|To Use a Button in a Dialog Box] for details.{br}

For detailed information on working with the content of a dialog box, see the [HelpRoot_Dev_Customization\CG_GL_Forms_CustForm_CustomizingDialogBox|To Open a Smart Panel in the Screen Editor] topic in this section. You will find additional information in the following topics:[anchor|#ul_xtf_5wp_gq]
*[HelpRoot_Dev_Customization\CG_GL_UI_PXForm_Properties|To Set a Container Property]
*[HelpRoot_Dev_Customization\CG_GL_UI_PXForm_AddNested|To Add a Nested Container]
*[HelpRoot_Dev_Customization\CG_GL_UI_PXForm_AddStControl|To Add Another Supported Control]
*[HelpRoot_Dev_Customization\CG_GL_UI_PXForm_ReorderChild|To Reorder Child UI Elements]
*[HelpRoot_Dev_Customization\CG_GL_UI_PXForm_DeleteControl|To Delete a Child UI Element]

==Related Articles==
*[HelpRoot_Dev_Customization\CG_Platform_Framework_ASPX|Changes in Webpages (ASPX)]
*[HelpRoot_Dev_Customization\CG_GL_Items_Screens|Customized Screens]]]></column>
			<column name="PlainText"><![CDATA[Dialog Box (PXSmartPanel) PXSmartPanel  is a UI container control that renders a dialog box. A  PXSmartPanel  container does not have the 				 DataMember  property; therefore, it cannot contain a UI element 			for a data field. To add a box for a data field to a dialog box, in the appropriate 				 PXSmartPanel  container, you have to include the data-bound 			container that can contain the required data field. However without binding a data view, you can create, for example, a message box with the 			controls that contain all required data in the ASPX code. A  PXSmartPanel  container can include multiple ASPX objects of the 			following types (see the diagram below): A data-bound UI container control:  PXFormView , 						 PXGrid , and  PXTab A layout rule:  PXLayoutRule Another control:  PXPanel ,  PXGroupBox , 						 PXLabel ,  PXButton , and 						 PXJavaScript Nesting rules for a PXSmartPanel container in an ASPX page A box for a data field cannot be added immediately to a dialog box because 				this type of container cannot be bound to a data view. To create a new dialog box in a form, follow the instructions described in  To Add a Dialog Box. To delete a dialog box from a form, follow the instructions described in  To Delete a Container. In  Acumatica ERP, a dialog box usually contains a container for data fields and a 				 PXPanel  container with  PXButton  elements to 			get a response from the user. See  Panel (PXPanel) and  To Use a Button in a Dialog Box for details. For detailed information on working with the content of a dialog box, see the  To Open a Smart Panel in the Screen Editor topic in this section. You 			will find additional information in the following topics: To Set a Container PropertyTo Add a Nested ContainerTo Add Another Supported ControlTo Reorder Child UI ElementsTo Delete a Child UI Element]]></column>
		</row>
		<row PageID="74511317-323f-400a-a76e-692f1999674a" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="56c62d22-8b75-17bb-f35e-3428aa46aaf2" RecordSourceID="22377">
			<column name="Content"><![CDATA[
If you need to activate the [HelpRoot_Dev_Customization\CG_Platform_Tools_Inspector|Element Inspector] for a pop-up panel, a dialog box, or another UI element that opens in modal mode and makes the [HelpRoot_Dev_Customization\CG_Platform_Tools_Menu|Customization Menu] unavailable for selection, you can press Control-Alt.{br}

To open a smart panel in the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_LayoutEditor|Screen Editor], perform the following actions:[anchor|#_f20161b4-0903-4b54-b10e-eec7b0b5e7e3]
#Open the form in the browser.
#On the form, open the needed dialog box by using the appropriate action.
#On the keyboard, press the Control-Alt combination.
#:((({S:Warn}The Element Inspector is activated while you keep the Control-Alt combination pressed on the keyboard.
)))
#Click anywhere inside the dialog box to open the [HelpRoot_Dev_Customization\CG_Platform_Tools_Inspector_ElProperiesDlg|Element Properties] dialog box.
#In the dialog box, click '''Customize'''.
#If there is no currently selected customization project and the inspector opens the [HelpRoot_Dev_Customization\CG_Platform_Tools_Menu_SelectCustProjDlg|Select Customization Project Dialog Box], select an existing customization project or create a new one (see [HelpRoot_Dev_Customization\CG_GL_Projects_Starting_Creating|To Create a New Project] and [HelpRoot_Dev_Customization\CG_GL_Projects_Starting_Selecting|To Select an Existing Project] for details).
{br}

If the customization project does not contain a changeset for the form, the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor] adds to the project a ''Page'' item for the form to keep your changes in the database. The smart panel element is opened in the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_LayoutEditor|Screen Editor], and you can start to customize the dialog box.{br}

When you click '''Save''' on the editor toolbar, the editor updates the ''Page'' item in the database.]]></column>
			<column name="PlainText"><![CDATA[To Open a Smart Panel in the Screen Editor If you need to activate the  Element Inspector for a pop-up panel,       a dialog box, or another UI element that opens in modal mode and makes the  Customization Menu unavailable for selection, you can press     Control-Alt. To open a smart panel in the  Screen Editor, perform    the following actions: Open the form in the browser. On the form, open the needed dialog box by using the appropriate action. On the keyboard, press the Control-Alt combination. The Element Inspector is activated             while you keep the Control-Alt combination pressed on the keyboard. Click anywhere inside the dialog box to open the  Element Properties Element Properties dialog           box. In the dialog box, click  Customize . If there is no currently selected customization project and the inspector opens the  Select Customization Project Dialog Box, select an existing customization           project or create a new one (see  To Create a New Project and              To Select an Existing Project for details). If the customization project does not contain a changeset for the form, the   Customization Project                         Editor adds to the project a  Page  item for the form       to keep your changes in the database. The smart panel element is opened in the  Screen Editor, and you can start to customize the       dialog box. When you click  Save  on the editor toolbar, the editor updates the      Page  item in the database. ]]></column>
		</row>
		<row PageID="c26bf6db-2dbd-4e3e-98f5-edf78a174e2e" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="666fe97e-1f04-56e2-0448-38bc66a440e3" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can use a control for a data field, also referred as a ''box'', to display and edit the value of the field on a form.{br}

The Acumatica Customization             Platform supports the following types of boxes.[anchor|#_41733f7b-1e6b-41ed-bf68-4ca4b11147dd]
{| class="checklist" | width="100%" 
|- 
!width="20%" ! Object
!width="80%" ! Description
|- 
| <tt>PXTextEdit</tt>
| A text box to display and edit the value of a <tt>string</tt> field.
|- 
| <tt>PXNumberEdit</tt>
| A box to display and edit the value of a <tt>decimal</tt> or <tt>int</tt> field.
|- 
| <tt>PXMaskEdit</tt>
| A text box to display and edit the value of a <tt>string</tt> field that has the format specified in the data access class.
|- 
| <tt>PXDateTimeEdit</tt>
| A box to display and select the value of a <tt>datetime</tt> field.
|- 
| <tt>PXCheckBox</tt>
| A check box to display and select the value of a <tt>bool</tt> field.
|- 
| <tt>PXDropDown</tt>
| A combo box to display, edit, and select the value of a field with a list attribute, such as <tt>PXStringList</tt>, <tt>PXIntList</tt>, or <tt>PXDecimalList</tt>.
|- 
| <tt>PXSelector</tt>
| A lookup control to display, search for, and select the value of a field with the <tt>PXSelector</tt> attribute.
|- 
| <tt>PXSegmentMask</tt>
| A lookup control with a specified segmented key value that identifies a data record and consists of one segment or multiple segments, where the list of possible values is defined for each segment.
|- 
| <tt>PXTreeSelector</tt>
| A lookup control to select a value for a field with a <tt>PXTreeSelector</tt> attribute from a tree control.
|}{br}

A box, as the diagram below shows, can be immediately added to the following types of containers:[anchor|#_d4be3055-f97a-4f24-8f3e-5361d4c4ef62]
*<tt>PXFormView</tt>
* <tt>RowTeplate</tt>
* <tt>PXTabItem</tt>
[anchor|#_8a5aba79-3550-4d54-ada2-29e93ac1d463][anchor|#_b9e2688e-0e9a-4372-8924-f23ca085c2ed][image:CustomizationPlatform/images/CG_GL_Forms_ASPX_Boxes.png|popup|Nesting rules for a box bound to a data field|450px]{br}

To create a box in a container, follow the instructions described in [HelpRoot_Dev_Customization\CG_GL_UI_PXForm_AddBox|To Add a Box for a Data Field].{br}

To delete a box from a container, follow the instructions described in [HelpRoot_Dev_Customization\CG_GL_UI_PXForm_DeleteControl|To Delete a Child UI Element].{br}

For detailed information on customizing a box, see the following topics:[anchor|#ul_xtf_5wp_gq]
*[HelpRoot_Dev_Customization\CG_GL_UI_Box_Opening|To Select a Box in the Screen Editor]
*[HelpRoot_Dev_Customization\CG_GL_UI_Box_SetProperty|To Set a Box Property]
*[HelpRoot_Dev_Customization\CG_GL_Forms_CustControl_ChangingType|To Change the Type of a Box]
]]></column>
			<column name="PlainText"><![CDATA[Box (Control for a Data Field) You can use a control for a data field, also referred as a  box , to display and edit the    value of the field on a form. The  Acumatica Customization             Platform supports the following types of boxes. Object Description PXTextEdit A text box to display and edit the value of a  string  field. PXNumberEdit A box to display and edit the value of a  decimal  or           int  field. PXMaskEdit A text box to display and edit the value of a  string  field that has                 the format specified in the data access class. PXDateTimeEdit A box to display and select the value of a  datetime  field. PXCheckBox A check box to display and select the value of a  bool          field. PXDropDown A combo box to display, edit, and select the value of a field with a list attribute,                 such as  PXStringList ,  PXIntList , or                    PXDecimalList . PXSelector A lookup control to display, search for, and select the value of a field with the                    PXSelector  attribute. PXSegmentMask A lookup control with a specified segmented key value that identifies a data record                 and consists of one segment or multiple segments, where the list of possible values                 is defined for each segment. PXTreeSelector A lookup control to select a value for a field with a           PXTreeSelector  attribute from a tree control. A box, as the diagram below shows, can be immediately added to the following types of         containers: PXFormView RowTeplate PXTabItem Nesting rules for a box bound to a data field To create a box in a container, follow the instructions described in  To Add a Box for a Data Field. To delete a box from a container, follow the instructions described in  To Delete a Child UI Element. For detailed information on customizing a box, see the following topics: To Select a Box in the Screen EditorTo Set a Box PropertyTo Change the Type of a Box]]></column>
		</row>
		<row PageID="22137420-2907-4dd8-8771-6c3a660b33d5" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="d6c1df31-d1b3-49d5-8aea-6f2b460aea8c" RecordSourceID="22377">
			<column name="Content"><![CDATA[
To start the customization of a box, you have to select it in the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_LayoutEditor|Screen Editor]. To do this, perform the following actions.[anchor|#_fc7982fd-95f3-49b2-bb84-0428f2f51041]
#Open the form that contains the box to be customized so that the box is displayed on the screen.
#On the form title bar, click '''Customization &gt; Inspect Element''' to launch the [HelpRoot_Dev_Customization\CG_Platform_Tools_Inspector|Element Inspector].
#On the form, click the box to open the [HelpRoot_Dev_Customization\CG_Platform_Tools_Inspector_ElProperiesDlg|Element Properties Dialog Box] for the box.
#In the dialog box, click '''Customize'''.
#If there is no currently selected customization project and the inspector opens the [HelpRoot_Dev_Customization\CG_Platform_Tools_Menu_SelectCustProjDlg|Select Customization Project Dialog Box], select an existing customization project or create a new one. (See [HelpRoot_Dev_Customization\CG_GL_Projects_Starting_Selecting|To Select an Existing Project] and [HelpRoot_Dev_Customization\CG_GL_Projects_Starting_Creating|To Create a New Project] for details.)
{br}

If the customization project does not contain a changeset for the form, the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor] adds to the project a ''Page'' item for the form, to keep the changeset to ASPX code of the form in the database. The container of the box is opened in the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_LayoutEditor|Screen Editor], and the box is selected in the Control Tree of the editor. Therefore you can start customization of the box.{br}

When you click '''Save''' on the editor toolbar, the editor updates the ''Page'' item in the database.]]></column>
			<column name="PlainText"><![CDATA[To Select a Box in the Screen Editor To start the customization of a box, you have to select it in the  Screen Editor. To do this, perform the following         actions. Open the form that contains the box to be customized so that the box is displayed on the           screen. On the form title bar, click  Customization > Inspect Element  to launch the  Element Inspector. On the form, click the box to open the  Element Properties Dialog Box for the box. In the dialog box, click  Customize . If there is no currently selected customization project and the inspector opens the              Select Customization Project Dialog Box, select an existing           customization project or create a new one. (See  To Select an Existing Project and  To Create a New Project for details.) If the customization project does not contain a changeset for the form, the   Customization Project                         Editor adds to the project a  Page  item for the form,       to keep the changeset to ASPX code of the form in the database. The container of the box is       opened in the  Screen Editor, and the box is       selected in the Control Tree of the editor. Therefore you can start customization of the       box. When you click  Save  on the editor toolbar, the editor updates the      Page  item in the database. ]]></column>
		</row>
		<row PageID="4705bea7-63cb-4359-9343-e2e99fec46d0" Language="en-US" PageRevisionID="1" PlainText="To Set a Box Property To include in a customization project changes to properties of a box, you have to modify the       properties by using the  Screen Editor. To start       setting the properties of a box, perform the following actions: Select the box in the Screen Editor, as described in  To Select a Box in the Screen Editor. Click the  Layout Properties  tab item to open the list of           properties for the box. Specify values for the required properties. Click  Save  to save your changes to the customization           project. For detailed information about the  CommitChanges  property, see  Use of the CommitChanges Property of Boxes in the  Acumatica Framework       Guide. You can assign a predefined size abbreviation (such as  XXS ,  L  or  XL ) for       the  LabelsWidth  and  Size  properties of a box. See  Predefined Size Values in the  Acumatica Framework       Guide for details. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="cd4cbdc3-4fe4-5a62-b6cd-36ad3f1f1749" RecordSourceID="22377">
			<column name="Content"><![CDATA[
To include in a customization project changes to properties of a box, you have to modify the properties by using the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_LayoutEditor|Screen Editor]. To start setting the properties of a box, perform the following actions:[anchor|#_ccf7e243-c8c4-48d0-8895-c5356b46ec98]
#Select the box in the Screen Editor, as described in [HelpRoot_Dev_Customization\CG_GL_UI_Box_Opening|To Select a Box in the Screen Editor].
#Click the '''Layout Properties''' tab item to open the list of properties for the box.
#Specify values for the required properties.
#Click '''Save''' to save your changes to the customization project.
{br}

For detailed information about the <tt>CommitChanges</tt> property, see [HelpRoot_Dev_Platform\CW__con_CommitChanges|Use of the CommitChanges Property of Boxes] in the Acumatica Framework Guide.{br}

You can assign a predefined size abbreviation (such as ''XXS'', ''L'' or ''XL'') for the <tt>LabelsWidth</tt> and <tt>Size</tt> properties of a box. See [HelpRoot_Dev_Platform\CW__con_LayoutRules_Properties_Predefined|Predefined Size Values] in the Acumatica Framework Guide for details.]]></column>
		</row>
		<row PageID="a72a595c-f3ee-41e8-80d5-ffe306974ff5" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="82103320-a5e2-18aa-c87b-f0a2eab69ac4" RecordSourceID="22377">
			<column name="Content"><![CDATA[
For a data field, you can create a control of any type that is supported in Acumatica ERP. However to avoid issues with rendering controls and processing control values, you have to have an appropriate control for each data field. Therefore, if you have changed the type of a data field, you should recreate all the controls that exist on Acumatica ERP forms for this field.{br}

For example, a text edit box for the ''MyFieldName'' <tt>PXDBString</tt> field can be defined in the ASPX code as follows. {{{{&lt;px:PXTextEdit ... DataField="MyFieldName" /&gt;

}}}}{br}

Suppose that you have added the <tt>PXStringList</tt> attribute for the field in the data access class to use the control for the field as a drop-down box. Then you need to redefine the control as follows.{{{{&lt;px:PXDropDown ... DataField="MyFieldName" /&gt;

}}}}{br}

Because this change must be saved in a customization project, you have to use the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_LayoutEditor|Screen Editor] to delete the old definition of the box and to add the new one.{br}

To change the type of a box in a container on a form and to include this modification in a customization project, perform the following actions:[anchor|#_e7c5a02a-565a-4fec-b7bd-7d7b6774dda6]
#Select the box in the Screen Editor, as described in [HelpRoot_Dev_Customization\CG_GL_UI_Box_Opening|To Select a Box in the Screen Editor].
#On the toolbar of the Control Tree, click '''Delete'''.
#Click the '''Add Data Fields''' tab item (see the screenshot below).
#If you need to create a control for a data field that is not accessible through the data view specified for the container in the <tt>DataMember</tt> property, but is accessible through another data view of the same graph, and the '''Data View''' box gives you the availability to select a data view, select the needed data view in this box. (See [HelpRoot_Dev_Platform\CW__con_PXForm_AddBox_DataViews|Use of Multiple Data Views for Boxes in Containers] in the Acumatica Framework Guide for details.)
#On the tab item, click the '''All''', '''Visible''', or '''Custom''' filter for the fields provided by the data view selected in the '''Data View''' box to view the appropriate field list.
#Find the required data field in the '''Field Name''' column of the list and select the check box for the field in the unlabeled first column, as the following screenshot shows.[anchor|#_ef5bcbe6-e756-47d0-af56-72c5fea5eb7f][image:CustomizationPlatform/images/CG_GL_UI_PXForm_AddBox.png|popup|Selecting a data field for which a box is to be created|440px]
#:For each data field in the list, the Screen Editor presets the most appropriate control type. However you can select another control type to be created for a field.((({S:Warn}The control type must match the field type. Otherwise, the control cannot work properly with the field data. If you create a control that does not match the data field, you have to update the data field in the DAC (see [HelpRoot_Dev_Customization\CG_GL_BL_DataField_TypeLevel|To Customize a Field on the DAC Level] for details) or in the graph. (See [HelpRoot_Dev_Customization\CG_GL_BL_DataField_CacheLevel|To Customize a Field on the Graph Level] for details.)
)))
#If you need to change the type of the control to be created, select the needed type in the '''Control''' column of the selected field.
#On the list toolbar, click '''Create Controls'''.
#:The platform creates a box for the selected data field and adds to the Control Tree a node for the box.
#Click '''Save''' to save your changes to the customization project.
]]></column>
			<column name="PlainText"><![CDATA[To Change the Type of a Box For a data field, you can create a control of any type that is supported in  Acumatica ERP. However to avoid issues with rendering controls and processing control values, you have       to have an appropriate control for each data field. Therefore, if you have changed the type of       a data field, you should recreate all the controls that exist on  Acumatica ERP forms for this field. For example, a text edit box for the  MyFieldName PXDBString  field can be defined in the ASPX code as follows.        <px:PXTextEdit ... DataField="MyFieldName" />
 Suppose that you have added the  PXStringList  attribute for the field in the       data access class to use the control for the field as a drop-down box. Then you need to       redefine the control as       follows. <px:PXDropDown ... DataField="MyFieldName" />
 Because this change must be saved in a customization project, you have to use the  Screen Editor to delete the old definition of the box       and to add the new one. To change the type of a box in a container on a form and to include this modification in a       customization project, perform the following actions: Select the box in the Screen Editor, as described in  To Select a Box in the Screen Editor. On the toolbar of the Control Tree, click  Delete . Click the  Add Data Fields  tab item (see the screenshot           below). If you need to create a control for a data field that is not accessible through the data           view specified for the container in the  DataMember  property, but is           accessible through another data view of the same graph, and the  Data             View  box gives you the availability to select a data view, select the needed           data view in this box. (See  Use of Multiple Data Views for Boxes in Containers in the  Acumatica Framework Guide for details.) On the tab item, click the  All ,  Visible ,           or  Custom  filter for the fields provided by the data view selected           in the  Data View  box to view the appropriate field list. Find the required data field in the  Field Name  column of the list           and select the check box for the field in the unlabeled first column, as the following           screenshot shows. Selecting a data field for which a box is to be created For each data field in the list, the Screen Editor presets the most appropriate             control type. However you can select another control type to be created for a               field. The control type must match the field type. Otherwise, the control cannot               work properly with the field data. If you create a control that does not match the               data field, you have to update the data field in the DAC (see  To Customize a Field on the DAC Level for details) or in the graph. (See  To Customize a Field on the Graph Level for details.) If you need to change the type of the control to be created, select the needed type in           the  Control  column of the selected field. On the list toolbar, click  Create Controls . The platform             creates a box for the selected data field and adds to the Control Tree a node for the             box. Click  Save  to save your changes to the customization           project. ]]></column>
		</row>
		<row PageID="fd1f3fb5-f5f2-4316-882e-a98232bbfba5" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="e3c8fa52-42a5-035e-8e61-55b6d7791ad4" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The layout of a form is organized into a table of controls, with each control located within a certain column and row. The columns and rows are defined by <tt>PXLayoutRule</tt> components added to the layout of the form. The properties of the <tt>PXLayoutRule</tt> component provide the position of the underlying controls and their size and appearance in the UI.{br}

You can use the <tt>PXLayoutRule</tt> component to do the following to manage the layout of UI elements within a container:[anchor|#ul_czt_cr1_xl]
*Place controls in multiple rows and columns to uniformly distribute them on the form or tab area of a form (see the diagram below)
*Cause controls to span multiple columns
*Merge controls into one row of the column to align them horizontally
*Adjust the widths of controls and labels
*Hide the labels of controls
*Group controls for users&rsquo; convenience
[anchor|#_92b583b8-a3a9-44dc-a5bb-e47acda6ad06][anchor|#_7dd2fef2-bc96-4f82-b6ae-37fcfd3a8fbd][image:CustomizationPlatform/images/CG_GL_Forms_ASPX_LayoutRule_RowsColumns.png|popup|Layout rules to arrange controls within a container|450px]{br}

A layout rule, as the diagram below shows, can be immediately added to the following types of containers:[anchor|#_d4be3055-f97a-4f24-8f3e-5361d4c4ef62]
*<tt>PXFormView</tt>
* <tt>RowTeplate</tt>
* <tt>PXTabItem</tt>
* <tt>PXSmartPanel</tt>
[anchor|#_8a5aba79-3550-4d54-ada2-29e93ac1d463][anchor|#_b9e2688e-0e9a-4372-8924-f23ca085c2ed][image:CustomizationPlatform/images/CG_GL_Forms_ASPX_LayoutRule.png|popup|Nesting rules for a layout rule in an ASPX page|450px]{br}

The Acumatica Customization             Platform supports the following properties for a <tt>PXLayoutRule</tt> component.[anchor|#_91c2d7ac-2077-4955-90ae-49b30eddc53f]
{| class="checklist" | width="100%" 
|- 
!width="20%" ! Property
!width="80%" ! Description
|- 
| <tt>ColumnSpan</tt>
| Specifies the number of columns spanned by a control placed below the target <tt>PXLayoutRule</tt> component. This property applies to a single control that is under the layout rule in the ASPX code. (See [HelpRoot_Dev_Platform\CW__con_LayoutRules_Properties_ColumnSpan|Use of the ColumnSpan Property of PXLayoutRule] in the Acumatica Framework Guide for details.)
|- 
| <tt>ColumnWidth</tt>
| Defines the width (in pixels) of a column containing controls. You can set the property to a predefined value (see [HelpRoot_Dev_Platform\CW__con_LayoutRules_Properties_Predefined|Predefined Size Values] in the Acumatica Framework Guide for details) or to a value in pixels. The specified width is applied to the column and is not changed when the <tt>LabelsWidth</tt> property value is specified for the same <tt>PXLayoutRule</tt> component and when the <tt>Size</tt>, <tt>Width</tt>, or <tt>LabelWidth</tt> property value is specified for a control contained within a column. (See [HelpRoot_Dev_Platform\CW__con_LayoutRules_Properties_Sizes|Use of the ColumnWidth, ControlSize, and LabelsWidth Properties of PXLayoutRule] in the Acumatica Framework Guide for details.)
|- 
| <tt>ControlSize</tt>
| Defines the width for the controls placed within a column. The <tt>ControlSize</tt> property value is assigned from the predefined list of items. (See [HelpRoot_Dev_Platform\CW__con_LayoutRules_Properties_Predefined|Predefined Size Values] in the Acumatica Framework Guide for details.) The specified size is applied to all controls contained within the column if you do not override the size separately for a control by specifying the <tt>Size</tt> or <tt>Width</tt> property values. (See [HelpRoot_Dev_Platform\CW__con_LayoutRules_Properties_Sizes|Use of the ColumnWidth, ControlSize, and LabelsWidth Properties of PXLayoutRule] in the Acumatica Framework Guide for details.)
|- 
| <tt>GroupCaption</tt>
| Specifies the caption for the group of controls that is started from the control placed under this rule in the ASPX code. Any rule that has the <tt>GroupCaption</tt> property value set requires a rule with the <tt>EndGroup</tt> property value set to ''True'' below the last control of the group in the code. All controls between the starting and ending group rules are included in the group. (See [HelpRoot_Dev_Platform\CW__con_LayoutRules_Properties_Group|Use of the GroupCaption, StartGroup, and EndGroup Properties of PXLayoutRule] in the Acumatica Framework Guide for details.)
|- 
| <tt>EndGroup</tt>
| Indicates that the control above the rule in the ASPX code is the last control in the group that starts from the <tt>PXLayoutRule</tt> component with a specified <tt>GroupCaption</tt> property value. (See [HelpRoot_Dev_Platform\CW__con_LayoutRules_Properties_Group|Use of the GroupCaption, StartGroup, and EndGroup Properties of PXLayoutRule] in the Acumatica Framework Guide for details.)
|- 
| <tt>LabelsWidth</tt>
| Defines the width (in pixels) of the control labels placed within a column. You select the <tt>LabelsWidth</tt> property value from the predefined list of items (see [HelpRoot_Dev_Platform\CW__con_LayoutRules_Properties_Predefined|Predefined Size Values] in the Acumatica Framework Guide for details) or by typing the width in pixels. The specified size is applied to all control labels contained within the column if you do not override the size separately for a control by specifying the <tt>LabelWidth</tt> property value. (See [HelpRoot_Dev_Platform\CW__con_LayoutRules_Properties_Sizes|Use of the ColumnWidth, ControlSize, and LabelsWidth Properties of PXLayoutRule] in the Acumatica Framework Guide for details.)
|- 
| <tt>Merge</tt>
| Is used to merge controls into one row and to horizontally align the controls that are placed under this rule in the ASPX code. The first <tt>PXLayoutRule</tt> component added under this rule in the code stops the merging, and the next control is placed alone beneath the merged controls as the leftmost control of the current column. To cancel merging for all controls that follow, you must add the <tt>PXLayoutRule</tt> component without the adjusted property value. (See [HelpRoot_Dev_Platform\CW__con_LayoutRules_Properties_Merge|Use of the Merge Property of PXLayoutRule] in the Acumatica Framework Guide for details.)
|- 
| <tt>StartGroup</tt>
| Starts the group of controls from the control placed under this rule in the ASPX code. If the <tt>GroupCaption</tt> property value is not set to ''True'', the group is displayed without a caption. Any rule that has the <tt>StartGroup</tt> property value set requires a rule with the <tt>EndGroup</tt> property value set to ''True'' below the last control of the group in the code. All controls between the starting and ending group rules in the code are included in the group. (See [HelpRoot_Dev_Platform\CW__con_LayoutRules_Properties_Group|Use of the GroupCaption, StartGroup, and EndGroup Properties of PXLayoutRule] in the Acumatica Framework Guide for details.)
|- 
| <tt>StartRow</tt>
| If set to ''True'', starts a new row for the controls following this rule. (See [HelpRoot_Dev_Platform\CW__con_LayoutRules_Properties_StartRowColumn|Use of the StartRow and StartColumn Properties of PXLayoutRule] in the Acumatica Framework Guide for details.)
|- 
| <tt>SuppressLabel</tt>
| Hides all control labels within a column. All control labels placed within the column are hidden if you do not override them separately for a control by specifying a <tt>SuppressLabel</tt> property value. (See [HelpRoot_Dev_Platform\CW__con_LayoutRules_Properties_SuppressLabel|Use of the SuppressLabel Property of PXLayoutRule] in the Acumatica Framework Guide for details.)
|}{br}

By specifying the values of these properties, you can make a variety of changes to the UI. Some properties affect only the next control under the <tt>PXLayoutRule</tt> component in the ASPX code. Other properties affect all controls under the rule until the next rule is encountered in the code. Still other properties require a corresponding ending rule. For instance, the rule with the <tt>GroupCaption</tt> property value specified requires that a corresponding rule be set with the <tt>EndGroup</tt> property value. All controls in the code between the <tt>GroupCaption</tt> and <tt>EndGroup</tt> rules become part of the group.{br}

To create a layout rule in a container, follow the instructions described in [HelpRoot_Dev_Customization\CG_GL_UI_PXForm_AddLayoutRule|To Add a Layout Rule].{br}

To delete a layout rule from a container, perform the actions described in [HelpRoot_Dev_Customization\CG_GL_UI_PXForm_DeleteControl|To Delete a Child UI Element].{br}

For detailed information on working with the content of a grid container, see the following topics:[anchor|#ul_xtf_5wp_gq]
*[HelpRoot_Dev_Customization\CG_GL_UI_LayoutRules_ToSelect|To Select a Layout Rule in the Screen Editor]
*[HelpRoot_Dev_Customization\CG_GL_UI_LayoutRules_Properties|To Set a Layout Rule Property]
]]></column>
			<column name="PlainText"><![CDATA[Layout Rule (PXLayoutRule) The layout of a form is organized into a table of controls, with each control located within       a certain column and row. The columns and rows are defined by  PXLayoutRule        components added to the layout of the form. The properties of the          PXLayoutRule  component provide the position of the underlying controls       and their size and appearance in the UI. You can use the  PXLayoutRule  component to do the following to manage the       layout of UI elements within a container: Place controls in multiple rows and columns to uniformly distribute them on the form or           tab area of a form (see the diagram below) Cause controls to span multiple columns Merge controls into one row of the column to align them horizontally Adjust the widths of controls and labels Hide the labels of controls Group controls for users' convenience Layout rules to arrange controls within a container A layout rule, as the diagram below shows, can be immediately added to the following types of         containers: PXFormView RowTeplate PXTabItem PXSmartPanel Nesting rules for a layout rule in an ASPX page The  Acumatica Customization             Platform supports the following properties for a  PXLayoutRule  component. Property Description ColumnSpan Specifies the number of columns spanned by a control placed below the target                    PXLayoutRule  component. This property applies to a single                 control that is under the layout rule in the ASPX code. (See  Use of the ColumnSpan Property of PXLayoutRule in                 the  Acumatica Framework Guide for details.) ColumnWidth Defines the width (in pixels) of a column containing controls. You can set the                 property to a predefined value (see  Predefined Size Values in                 the  Acumatica Framework Guide for details) or to a value in pixels. The specified width is applied to the                 column and is not changed when the  LabelsWidth  property value is                 specified for the same  PXLayoutRule  component and when the                    Size ,  Width , or                    LabelWidth  property value is specified for a control contained                 within a column. (See  Use of the ColumnWidth, ControlSize, and LabelsWidth Properties of PXLayoutRule in the                    Acumatica Framework Guide for details.) ControlSize Defines the width for the controls placed within a column. The                    ControlSize  property value is assigned from the predefined list                 of items. (See  Predefined Size Values in                 the  Acumatica Framework Guide for details.) The specified size is applied to all controls contained                 within the column if you do not override the size separately for a control by                 specifying the  Size  or  Width  property values.                 (See  Use of the ColumnWidth, ControlSize, and LabelsWidth Properties of PXLayoutRule in the  Acumatica Framework Guide for details.) GroupCaption Specifies the caption for the group of controls that is started from the                 control placed under this rule in the ASPX code. Any rule that has the                    GroupCaption  property value set requires a rule with the                    EndGroup  property value set to  True  below the last                 control of the group in the code. All controls between the starting and ending group                 rules are included in the group. (See  Use of the GroupCaption, StartGroup, and EndGroup Properties of PXLayoutRule in the                    Acumatica Framework Guide for details.) EndGroup Indicates that the control above the rule in the ASPX code is the last control                 in the group that starts from the  PXLayoutRule  component with a                 specified  GroupCaption  property value. (See  Use of the GroupCaption, StartGroup, and EndGroup Properties of PXLayoutRule in the                    Acumatica Framework Guide for details.) LabelsWidth Defines the width (in pixels) of the control labels placed within a column. You                 select the  LabelsWidth  property value from the predefined list of                 items (see  Predefined Size Values in                 the  Acumatica Framework Guide for details) or by typing the width in pixels. The specified size is                 applied to all control labels contained within the column if you do not override the                 size separately for a control by specifying the  LabelWidth                  property value. (See  Use of the ColumnWidth, ControlSize, and LabelsWidth Properties of PXLayoutRule in the                    Acumatica Framework Guide for details.) Merge Is used to merge controls into one row and to horizontally align the controls                 that are placed under this rule in the ASPX code. The first                    PXLayoutRule  component added under this rule in the code stops                 the merging, and the next control is placed alone beneath the merged controls as the                 leftmost control of the current column. To cancel merging for all controls that                 follow, you must add the  PXLayoutRule  component without the                 adjusted property value. (See  Use of the Merge Property of PXLayoutRule in the                    Acumatica Framework Guide for details.) StartGroup Starts the group of controls from the control placed under this rule in the                 ASPX code. If the  GroupCaption  property value is not set to                    True , the group is displayed without a caption. Any rule that has the                    StartGroup  property value set requires a rule with the                    EndGroup  property value set to  True  below the last                 control of the group in the code. All controls between the starting and ending group                 rules in the code are included in the group. (See  Use of the GroupCaption, StartGroup, and EndGroup Properties of PXLayoutRule in the                    Acumatica Framework Guide for details.) StartRow If set to  True , starts a new row for the controls following this rule.                 (See  Use of the StartRow and StartColumn Properties of PXLayoutRule in the  Acumatica Framework Guide for details.) SuppressLabel Hides all control labels within a column. All control labels placed within the                 column are hidden if you do not override them separately for a control by specifying                 a  SuppressLabel  property value. (See  Use of the SuppressLabel Property of PXLayoutRule                 in the  Acumatica Framework Guide for details.) By specifying the values of these properties, you can make a variety of changes to the UI.       Some properties affect only the next control under the  PXLayoutRule        component in the ASPX code. Other properties affect all controls under the rule until the next       rule is encountered in the code. Still other properties require a corresponding ending rule.       For instance, the rule with the  GroupCaption  property value specified       requires that a corresponding rule be set with the  EndGroup  property value.       All controls in the code between the  GroupCaption  and          EndGroup  rules become part of the group. To create a layout rule in a container, follow the instructions described in  To Add a Layout Rule. To delete a layout rule from a container, perform the actions described in  To Delete a Child UI Element. For detailed information on working with the content of a grid container, see the following         topics: To Select a Layout Rule in the Screen EditorTo Set a Layout Rule Property]]></column>
		</row>
		<row PageID="c1f80bdc-17fd-47d1-9325-b253c95d496b" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="5c898655-2bad-189b-43ca-d15550ad028e" RecordSourceID="22377">
			<column name="Content"><![CDATA[
To start the customization of a layout rule, you have to select it in the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_LayoutEditor|Screen Editor]. To do this, perform the following actions.[anchor|#_fc7982fd-95f3-49b2-bb84-0428f2f51041]
#Open the form that contains the container with the layout rule, so that the container is displayed on the screen.
#On the form title bar, click '''Customization &gt; Inspect Element''' to launch the [HelpRoot_Dev_Customization\CG_Platform_Tools_Inspector|Element Inspector].
#On the form, click the area of the container to be customized, to open the [HelpRoot_Dev_Customization\CG_Platform_Tools_Inspector_ElProperiesDlg|Element Properties Dialog Box] for the container.
#In the dialog box, click '''Customize'''.
#If there is no currently selected customization project and the inspector opens the [HelpRoot_Dev_Customization\CG_Platform_Tools_Menu_SelectCustProjDlg|Select Customization Project Dialog Box], select an existing customization project or create a new one. (See [HelpRoot_Dev_Customization\CG_GL_Projects_Starting_Selecting|To Select an Existing Project] and [HelpRoot_Dev_Customization\CG_GL_Projects_Starting_Creating|To Create a New Project] for details.)
#:If the customization project does not contain a changeset for the form, the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor] adds to the project a ''Page'' item for the form to keep in the database the changeset to the ASPX code of the form. The container is opened in the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_LayoutEditor|Screen Editor] and selected in the Control Tree of the editor.
#If the required layout rule is not displayed in the Control Tree, expand the subnodes of the container node to display the rule.
#In the Control Tree, select the layout rule to start the customization.
{br}

When you click '''Save''' on the editor toolbar, the editor updates the ''Page'' item in the database.]]></column>
			<column name="PlainText"><![CDATA[To Select a Layout Rule in the Screen Editor To start the customization of a layout rule, you have to select it in the  Screen Editor. To do this, perform the following         actions. Open the form that contains the container with the layout rule, so that the container is           displayed on the screen. On the form title bar, click  Customization > Inspect Element  to launch the  Element Inspector. On the form, click the area of the container to be customized, to open the  Element Properties Dialog Box for the container. In the dialog box, click  Customize . If there is no currently selected customization project and the inspector opens the              Select Customization Project Dialog Box, select an existing           customization project or create a new one. (See  To Select an Existing Project and  To Create a New Project for details.) If the customization             project does not contain a changeset for the form, the   Customization Project                         Editor adds to the project a  Page  item for the             form to keep in the database the changeset to the ASPX code of the form. The container             is opened in the  Screen Editor and selected             in the Control Tree of the editor. If the required layout rule is not displayed in the Control Tree, expand the subnodes of           the container node to display the rule. In the Control Tree, select the layout rule to start the customization. When you click  Save  on the editor toolbar, the editor updates the      Page  item in the database. ]]></column>
		</row>
		<row PageID="31e1e86a-36e5-4173-a392-f9c6638131c9" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="b9683fb8-438b-b9c4-38d6-d7758bbf40ff" RecordSourceID="22377">
			<column name="Content"><![CDATA[
To include in a customization project changes to properties of a layout rule, you have to modify the properties by using the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_LayoutEditor|Screen Editor]. To start setting the properties of a layout rule, perform the following actions:[anchor|#_ccf7e243-c8c4-48d0-8895-c5356b46ec98]
#Select the layout rule in the Screen Editor, as described in [HelpRoot_Dev_Customization\CG_GL_UI_LayoutRules_ToSelect|To Select a Layout Rule in the Screen Editor].
#Click the '''Layout Properties''' tab item to open the list of layout properties for the rule. (See the following screenshot.)[anchor|#_aa36f81a-9ee4-48f7-ba5e-0c2212e59357][image:CustomizationPlatform/images/CG_GL_UI_LayoutRules_Properties.png|popup|Viewing the list of layout rule properties in the Screen Editor|394px]
#Specify values for the required properties.
#Click '''Save''' to save changes in the customization project.
{br}

The most important properties of the <tt>PXLayoutRule</tt> component are described in the following topics of the Acumatica Framework Guide:[anchor|#_97ef6317-b887-445b-b7e9-5b73055daca5]
*[HelpRoot_Dev_Platform\CW__con_LayoutRules_Properties_StartRowColumn|Use of the StartRow and StartColumn Properties of PXLayoutRule]
*[HelpRoot_Dev_Platform\CW__con_LayoutRules_Properties_Sizes|Use of the ColumnWidth, ControlSize, and LabelsWidth Properties of PXLayoutRule]
*[HelpRoot_Dev_Platform\CW__con_LayoutRules_Properties_Predefined|Predefined Size Values]
*[HelpRoot_Dev_Platform\CW__con_LayoutRules_Properties_ColumnSpan|Use of the ColumnSpan Property of PXLayoutRule]
*[HelpRoot_Dev_Platform\CW__con_LayoutRules_Properties_Merge|Use of the Merge Property of PXLayoutRule]
*[HelpRoot_Dev_Platform\CW__con_LayoutRules_Properties_Group|Use of the GroupCaption, StartGroup, and EndGroup Properties of PXLayoutRule]
*[HelpRoot_Dev_Platform\CW__con_LayoutRules_Properties_SuppressLabel|Use of the SuppressLabel Property of PXLayoutRule]
]]></column>
			<column name="PlainText"><![CDATA[To Set a Layout Rule Property To include in a customization project changes to properties of a layout rule, you have to       modify the properties by using the  Screen Editor.       To start setting the properties of a layout rule, perform the following actions: Select the layout rule in the Screen Editor, as described in  To Select a Layout Rule in the Screen Editor. Click the  Layout Properties  tab item to open the list of layout           properties for the rule. (See the following screenshot.) Viewing the list of layout rule properties in the Screen Editor Specify values for the required properties. Click  Save  to save changes in the customization project. The most important properties of the  PXLayoutRule  component are described       in the following topics of the  Acumatica Framework         Guide: Use of the StartRow and StartColumn Properties of PXLayoutRuleUse of the ColumnWidth, ControlSize, and LabelsWidth Properties of PXLayoutRulePredefined Size ValuesUse of the ColumnSpan Property of PXLayoutRuleUse of the Merge Property of PXLayoutRuleUse of the GroupCaption, StartGroup, and EndGroup Properties of PXLayoutRuleUse of the SuppressLabel Property of PXLayoutRule]]></column>
		</row>
		<row PageID="9bdb434b-cf85-4fef-b051-5ac4d5196ab1" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="aa1d99fb-5753-972f-f6f5-5519d92ae6e0" RecordSourceID="22377">
			<column name="Content"><![CDATA[
In a container with controls for a single data record, you can use a <tt>PXPanel</tt> element as a container with a caption to group controls. However we recommend that you use the <tt>PXLayoutRule</tt> component for this purpose. (See [HelpRoot_Dev_Customization\CG_GL_UI_LayoutRules|Layout Rule (PXLayoutRule)] for details.){br}

In Acumatica ERP, a panel is used as a container to display a horizontal row of buttons with right alignment in a dialog box (see [HelpRoot_Dev_Customization\CG_GL_UI_Dialogs|Dialog Box (PXSmartPanel)] for details), as the following screenshot shows.[anchor|#_082f4c3b-9e15-4fc0-82e7-a82773fa6cc0][anchor|#_c4442c28-5ed5-4dc4-a514-edec184131fb][image:CustomizationPlatform/images/CG_GL_UI_Panels_01.png|popup|Using a panel as a button container in a dialog box|231px]If you open the dialog box displayed in the screenshot above in the Screen Editor, you can see that the panel is located below a form container and contains two buttons.[anchor|#_a214d2fa-9b43-43b0-b19c-5738907b5463][anchor|#_2fcf8db6-7926-4388-88de-635bfebb3325][image:CustomizationPlatform/images/CG_GL_UI_Panels_02.png|popup|Viewing the panel content in the Screen Editor|392px]{br}

You can add the <tt>PXPanel</tt> element to a dialog box and buttons to this element, as described in [HelpRoot_Dev_Customization\CG_GL_UI_PXForm_AddStControl|To Add Another Supported Control] and [HelpRoot_Dev_Customization\CG_GL_UI_PXButton_InSmartPanel|To Use a Button in a Dialog Box]. In a panel, to arrange buttons in a horizontal row with right alignment, you can specify the <tt>SkinID</tt> property of the <tt>PXPanel</tt> element, as described in [HelpRoot_Dev_Platform\CW__con_PXForm_Properties_SkinID|Use of the SkinID Property of Containers] in the Acumatica Framework Guide.]]></column>
			<column name="PlainText"><![CDATA[Panel (PXPanel) In a container with controls for a single data record, you can use a  PXPanel        element as a container with a caption to group controls. However we recommend that you use       the  PXLayoutRule  component for this purpose. (See  Layout Rule (PXLayoutRule) for details.) In  Acumatica ERP, a panel is used as a container to display a horizontal row of buttons with right alignment       in a dialog box (see  Dialog Box (PXSmartPanel) for details), as the following       screenshot shows. Using a panel as a button container in a dialog box If you open the dialog box displayed in the screenshot above in the Screen Editor, you       can see that the panel is located below a form container and contains two buttons. Viewing the panel content in the Screen Editor You can add the  PXPanel  element to a dialog box and buttons to this element,       as described in  To Add Another Supported Control and  To Use a Button in a Dialog Box. In a panel, to arrange buttons in a horizontal       row with right alignment, you can specify the  SkinID  property of the          PXPanel  element, as described in  Use of the SkinID Property of Containers in the  Acumatica Framework       Guide. ]]></column>
		</row>
		<row PageID="f76ac3c5-3751-49d6-baf1-b5fa786f92f7" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="54fac015-4676-193b-2a17-dc0ee2b207a2" RecordSourceID="22377">
			<column name="Content"><![CDATA[
In a container with controls for a single data record, you can use a <tt>PXGroupBox</tt> element as a container with a caption to group controls. However we recommend that you use the <tt>PXLayoutRule</tt> component for this purpose. (See [HelpRoot_Dev_Customization\CG_GL_UI_LayoutRules|Layout Rule (PXLayoutRule)] for details.){br}

In Acumatica ERP, the <tt>PXGroupBox</tt> element is designed to be exclusively used as a radio button container to render a drop-down data field as a set of radio buttons. It contains scripts with the logic to support a nested radio button for each value of a drop-down field.{br}

A group box for a drop-down data field can be immediately added to the following types of containers:[anchor|#_d4be3055-f97a-4f24-8f3e-5361d4c4ef62]
*<tt>PXFormView</tt>
* <tt>RowTeplate</tt>
* <tt>PXTabItem</tt>
{br}

To add a <tt>PXGroupBox</tt> element to a container, follow the instructions described in [HelpRoot_Dev_Customization\CG_GL_UI_PXForm_AddStControl|To Add Another Supported Control].{br}

To delete a group box from a container, follow the instructions described in [HelpRoot_Dev_Customization\CG_GL_UI_PXForm_DeleteControl|To Delete a Child UI Element].{br}

For detailed information on customizing a group box, see the following topics:[anchor|#ul_xtf_5wp_gq]
*[HelpRoot_Dev_Customization\CG_GL_UI_GroupBoxes_Open|To Open a Group Box in the Screen Editor]
*[HelpRoot_Dev_Customization\CG_GL_UI_GroupBoxes_Create|To Create a Group Box for a Drop-Down Field]
*[HelpRoot_Dev_Customization\CG_GL_UI_GroupBoxes_Property|To Set a Group Box Property]
]]></column>
			<column name="PlainText"><![CDATA[Group Box (PXGroupBox) In a container with controls for a single data record, you can use a          PXGroupBox  element as a container with a caption to group controls.       However we recommend that you use the  PXLayoutRule  component for this       purpose. (See  Layout Rule (PXLayoutRule) for details.) In  Acumatica ERP, the  PXGroupBox  element is designed to be exclusively used as a radio       button container to render a drop-down data field as a set of radio buttons. It contains       scripts with the logic to support a nested radio button for each value of a drop-down       field. A group box for a drop-down data field can be immediately added to the following types of     containers: PXFormView RowTeplate PXTabItem To add a  PXGroupBox  element to a container, follow the instructions    described in  To Add Another Supported Control. To delete a group box from a container, follow the instructions described in  To Delete a Child UI Element. For detailed information on customizing a group box, see the following topics: To Open a Group Box in the Screen EditorTo Create a Group Box for a Drop-Down FieldTo Set a Group Box Property]]></column>
		</row>
		<row PageID="7251d78a-a2ba-43af-8d6c-ea9682514b8b" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="7761af0a-5564-1824-899e-fd63e681e5df" RecordSourceID="22377">
			<column name="Content"><![CDATA[
To start the customization of a group box on a form, you have to open it in the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_LayoutEditor|Screen Editor]. To do this, perform the following actions:[anchor|#_dae33d2f-4696-4515-9b8b-8f0c1b329563]
#Open the form to display the appropriate set of radio buttons in the browser.
#:((({S:Warn}In Acumatica ERP, a radio button can work properly only in a <tt>PXGroupBox</tt> container that is used for a drop-down data field.
)))
#On the form title bar, click '''Customization &gt; Inspect Element''' to launch the [HelpRoot_Dev_Customization\CG_Platform_Tools_Inspector|Element Inspector].
#:((({S:Warn}If you need to activate the [HelpRoot_Dev_Customization\CG_Platform_Tools_Inspector|Element Inspector] for a pop-up panel, a dialog box, or another UI element that opens in modal mode and makes the [HelpRoot_Dev_Customization\CG_Platform_Tools_Menu|Customization Menu] unavailable for selection, you can press Control-Alt.
)))
#On the form, click the area with radio buttons to open the [HelpRoot_Dev_Customization\CG_Platform_Tools_Inspector_ElProperiesDlg|Element Properties] dialog box for the group box.
#In the dialog box, click '''Customize'''.
#If there is no currently selected customization project and the inspector opens the [HelpRoot_Dev_Customization\CG_Platform_Tools_Menu_SelectCustProjDlg|Select Customization Project Dialog Box], select an existing customization project or create a new one. (See [HelpRoot_Dev_Customization\CG_GL_Projects_Starting_Creating|To Create a New Project] and [HelpRoot_Dev_Customization\CG_GL_Projects_Starting_Selecting|To Select an Existing Project] for details.)
{br}

If the customization project does not contain a changeset for the form, the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor] adds to the project a ''Page'' item for the form, to keep the changeset to the ASPX code of the form in the database. The group box is opened in the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_LayoutEditor|Screen Editor], and you can start the customization of the box and the nested radio buttons.{br}

When you click '''Save''' on the editor toolbar, the editor updates the ''Page'' item in the database.]]></column>
			<column name="PlainText"><![CDATA[To Open a Group Box in the Screen Editor To start the customization of a group box on a form, you have to open it in the  Screen Editor. To do this, perform the following         actions: Open the form to display the appropriate set of radio buttons in the browser. In                Acumatica ERP, a radio button can work properly only in a  PXGroupBox  container             that is used for a drop-down data field. On the form title bar, click  Customization > Inspect Element  to launch the  Element Inspector. If you             need to activate the  Element Inspector for a pop-up panel,             a dialog box, or another UI element that opens in modal mode and makes the  Customization Menu unavailable for selection, you can press             Control-Alt. On the form, click the area with radio buttons to open the  Element Properties Element Properties dialog           box for the group box. In the dialog box, click  Customize . If there is no currently selected customization project and the inspector opens the              Select Customization Project Dialog Box, select an existing           customization project or create a new one. (See  To Create a New Project and  To Select an Existing Project for details.) If the customization project does not contain a changeset for the form, the   Customization Project                         Editor adds to the project a  Page  item for the form,       to keep the changeset to the ASPX code of the form in the database. The group box is opened in       the  Screen Editor, and you can start the       customization of the box and the nested radio buttons. When you click  Save  on the editor toolbar, the editor updates the      Page  item in the database. ]]></column>
		</row>
		<row PageID="662d314e-1678-46dc-90d6-8335017c999f" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="14ff34c5-b9f4-bc61-6535-981802dbff5a" RecordSourceID="22377">
			<column name="Content"><![CDATA[
In Acumatica ERP, the <tt>PXDropDown</tt> box type is generally used to display on a form a field with a list attribute, such as <tt>PXStringList</tt>, <tt>PXIntList</tt>, or <tt>PXDecimalList</tt>. However if you want to display such a field as a set of radio buttons, where one radio button is used to display and select each single constant value of the field, you can create a <tt>PXGroupBox</tt> element and include <tt>PXRadioButton</tt> elements in it.{br}

To create a group box for a drop-down data field in a container, perform the following actions:[anchor|#_34d6da48-2e20-4947-b6bf-46f049a6907d]
#Open the container in the Screen Editor, as described in [HelpRoot_Dev_Customization\CG_GL_UI_PXForm_ToOpen|To Open a Container in the Screen Editor].
#In the container, add a group box, as described in [HelpRoot_Dev_Customization\CG_GL_UI_PXForm_AddStControl|To Add Another Supported Control].
#For the new group box, specify the <tt>DataField</tt> property to bind the box to the data field. See [HelpRoot_Dev_Customization\CG_GL_UI_GroupBoxes_Property|To Set a Group Box Property] and [HelpRoot_Dev_Platform\CW__con_GroupBoxes_Property_DataField|Use of the DataField Property of PXGroupBox] for details.
#If required, specify the <tt>Caption</tt> and <tt>RenderStyle</tt> properties of the group box, as the following screenshot shows.[anchor|#_ee669ef0-70e2-445c-bc36-1b14b0bcc3ea][image:CustomizationPlatform/images/CG_GL_UI_GroupBoxes_Create.png|popup|Setting the properties of a group box|442px](See [HelpRoot_Dev_Platform\CW__con_GroupBoxes_Property_Caption|Use of the Caption Property of PXGroupBox] and [HelpRoot_Dev_Platform\CW__con_GroupBoxes_Property_RenderStyle|Use of the RenderStyle Property of PXGroupBox] in the Acumatica Framework Guide for details.)
#For each value defined in the field list, do the following:
##To the group box node of the Control Tree, add a radio button, as described in [HelpRoot_Dev_Customization\CG_GL_UI_PXForm_AddStControl|To Add Another Supported Control].
##In the C# code, find the value (usually it is an one-symbol value) in the list.
##On the '''Layout Properties''' tab item, enter this value in the <tt>Value</tt> property.
#Click '''Save''' to save changes in the customization project.
{br}

For example, as the result of the described actions for the <tt>StatementType</tt> data field with the ''O'' and ''B'' values defined in the list, you might get the following ASPX code.{br}

{{{{
&lt;px:PXGroupBox runat="server" ID="CstGroupBox1" DataField="StatementType"
               Caption="Statement Type" RenderStyle="Fieldset"&gt;
  &lt;Template&gt;
    &lt;px:PXRadioButton runat="server" ID="CstRadioButton2" Value="O" /&gt;
    &lt;px:PXRadioButton runat="server" ID="CstRadioButton3" Value="B" /&gt;
  &lt;/Template&gt;
&lt;/px:PXGroupBox&gt;

}}}}]]></column>
			<column name="PlainText"><![CDATA[To Create a Group Box for a Drop-Down Field In  Acumatica ERP, the  PXDropDown  box type is generally used to display on a form a             field with a list attribute, such as  PXStringList ,                  PXIntList , or  PXDecimalList . However if you             want to display such a field as a set of radio buttons, where one radio button is used             to display and select each single constant value of the field, you can create a                  PXGroupBox  element and include  PXRadioButton              elements in it. To create a group box for a drop-down data field in a container, perform the following         actions: Open the container in the Screen Editor, as described in  To Open a Container in the Screen Editor. In the container, add a group box, as described in  To Add Another Supported Control. For the new group box, specify the  DataField  property to bind the box                     to the data field. See  To Set a Group Box Property and                          Use of the DataField Property of PXGroupBox                     for details. If required, specify the  Caption  and  RenderStyle                      properties of the group box, as the following screenshot shows. Setting the properties of a group box (See  Use of the Caption Property of PXGroupBox                     and  Use of the RenderStyle Property of PXGroupBox in the  Acumatica Framework Guide for details.) For each value defined in the field list, do the following: To the group box node of the Control Tree, add a radio button, as                             described in  To Add Another Supported Control. In the C# code, find the value (usually it is an one-symbol value) in                             the list. On the  Layout Properties  tab item, enter this                             value in the  Value  property. Click  Save  to save changes in the customization project. For example, as the result of the described actions for the  StatementType              data field with the  O  and  B  values defined in the list, you might get the             following ASPX code. 
<px:PXGroupBox runat="server" ID="CstGroupBox1" DataField="StatementType"
               Caption="Statement Type" RenderStyle="Fieldset">
  <Template>
    <px:PXRadioButton runat="server" ID="CstRadioButton2" Value="O" />
    <px:PXRadioButton runat="server" ID="CstRadioButton3" Value="B" />
  </Template>
</px:PXGroupBox>
 ]]></column>
		</row>
		<row PageID="da56ea70-219e-4e4d-947d-96b58d9dfeb4" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="e3486eaa-80c4-71db-3b09-1e7ddbbd4201" RecordSourceID="22377">
			<column name="Content"><![CDATA[
To include changes to the properties of a group box in a customization project, you have to modify the properties by using the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_LayoutEditor|Screen Editor]. To start setting the properties of a group box, perform the following actions:[anchor|#_ccf7e243-c8c4-48d0-8895-c5356b46ec98]
#Select the group box in the Screen Editor, as described in [HelpRoot_Dev_Customization\CG_GL_UI_GroupBoxes_Open|To Open a Group Box in the Screen Editor].
#Click the '''Layout Properties''' tab item to open the list of properties for the group box.
#Specify values for the required properties.
#Click '''Save''' to save your changes to the customization project.
{br}

To bind a group box to a data field, you have to specify the <tt>DataField</tt> property, as described in [HelpRoot_Dev_Platform\CW__con_GroupBoxes_Property_DataField|Use of the DataField Property of PXGroupBox] in the Acumatica Framework Guide.{br}

To set a caption for a group box, you use the <tt>Caption</tt> property. (See [HelpRoot_Dev_Platform\CW__con_GroupBoxes_Property_Caption|Use of the Caption Property of PXGroupBox] in the Acumatica Framework Guide for details.){br}

To define the style of the group box on the form, you have to select a value of the <tt>RenderStyle</tt> property, see [HelpRoot_Dev_Platform\CW__con_GroupBoxes_Property_RenderStyle|Use of the RenderStyle Property of PXGroupBox] in the Acumatica Framework Guide for details.]]></column>
			<column name="PlainText"><![CDATA[To Set a Group Box Property To include changes to the properties of a group box in a customization project, you have to             modify the properties by using the  Screen Editor. To start setting the properties             of a group box, perform the following actions: Select the group box in the Screen Editor, as described in  To Open a Group Box in the Screen Editor. Click the  Layout Properties  tab item to open the list of                     properties for the group box. Specify values for the required properties. Click  Save  to save your changes to the customization                     project. To bind a group box to a data field, you have to specify the  DataField              property, as described in  Use of the DataField Property of PXGroupBox in the                  Acumatica Framework Guide. To set a caption for a group box, you use the  Caption  property. (See  Use of the Caption Property of PXGroupBox in the  Acumatica Framework Guide for details.) To define the style of the group box on the form, you have to select a value of the                  RenderStyle  property, see  Use of the RenderStyle Property of PXGroupBox in the                  Acumatica Framework Guide for details. ]]></column>
		</row>
		<row PageID="4607a078-ced8-4c64-a5ce-4b514a4f4220" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="54e0ba2f-6ae2-e82a-9043-4756bcabc81b" RecordSourceID="22377">
			<column name="Content"><![CDATA[
In a container with controls for a single data record, you can use a <tt>PXLabel</tt> element to display text. For example, you should use a label to render on a form static text that is stored in the ASPX code.{br}

A <tt>PXLabel</tt> element can be immediately added to the following types of containers:[anchor|#_d4be3055-f97a-4f24-8f3e-5361d4c4ef62]
*<tt>PXFormView</tt>
* <tt>RowTeplate</tt>
* <tt>PXTabItem</tt>
* <tt>PXSmartPanel</tt>
{br}

You can view the use of the <tt>PXLabel</tt> elements, for example, in the '''Aging Settings''' group on the Statement Cycles (AR202800) form, shown in the following screenshot.[anchor|#_9a9544e3-4f0a-4729-9ac4-4dca65bc9f1d][anchor|#_81e9215e-fa58-4a01-aafd-a5b6461e1e8e][image:CustomizationPlatform/images/CG_GL_UI_Labels.png|popup|Viewing the labels on the Statement Cycles form|450px]{br}

The use of a label can be required when a field contains a quantity, but you need to add a unit type for the value. For example, if you need to display a field as '''Duration '''&#91;value&#93;''' Days''', where ''Duration'' is the value of the <tt>DisplayName</tt> parameter of the <tt>PXUIField</tt> attribute of the field, you have to add a <tt>PXLabel</tt> element that contains the ''Days'' string constant. To arrange the label in the same column as the field, you need to use the <tt>Merge</tt> layout rule, as described in [HelpRoot_Dev_Customization\CG_GL_UI_LayoutRules_Properties|To Set a Layout Rule Property] and [HelpRoot_Dev_Platform\CW__con_LayoutRules_Properties_Merge|Use of the Merge Property of PXLayoutRule].{br}

You can add the <tt>PXLabel</tt> element to a container, as described in [HelpRoot_Dev_Customization\CG_GL_UI_PXForm_AddStControl|To Add Another Supported Control].{br}

To delete a label from an ASPX page, follow the instructions described in [HelpRoot_Dev_Customization\CG_GL_UI_PXForm_DeleteControl|To Delete a Child UI Element].]]></column>
			<column name="PlainText"><![CDATA[Label (PXLabel) In a container with controls for a single data record, you can use a  PXLabel        element to display text. For example, you should use a label to render on a form static text       that is stored in the ASPX code. A  PXLabel  element can be immediately added to the following types of     containers: PXFormView RowTeplate PXTabItem PXSmartPanel You can view the use of the  PXLabel  elements, for example, in the          Aging Settings  group on the Statement Cycles (AR202800) form,       shown in the following screenshot. Viewing the labels on the Statement Cycles form The use of a label can be required when a field contains a quantity, but you need to add a unit       type for the value. For example, if you need to display a field as  Duration          [value]  Days , where  Duration  is the value of the          DisplayName  parameter of the  PXUIField  attribute of       the field, you have to add a  PXLabel  element that contains the  Days        string constant. To arrange the label in the same column as the field, you need to use the          Merge  layout rule, as described in  To Set a Layout Rule Property and  Use of the Merge Property of PXLayoutRule. You can add the  PXLabel  element to a container, as described in  To Add Another Supported Control. To delete a label from an ASPX page, follow the instructions described in  To Delete a Child UI Element. ]]></column>
		</row>
		<row PageID="99014135-2f7e-4897-9113-c8f4988ddc12" Language="en-US" PageRevisionID="1" Content="&#xA;In Acumatica ERP, a radio button can work properly only in a &lt;tt&gt;PXGroupBox&lt;/tt&gt; container. (See [HelpRoot_Dev_Customization\CG_GL_UI_GroupBoxes|Group Box (PXGroupBox)] for details.) A &lt;tt&gt;PXGroupBox&lt;/tt&gt; element contains scripts to provide the appropriate logic to use a nested radio button for a single constant value of a bound drop-down data field.{br}&#xA;&#xA;To use a &lt;tt&gt;PXRadioButton&lt;/tt&gt; element on a form, follow the instructions described in [HelpRoot_Dev_Customization\CG_GL_UI_GroupBoxes_Create|To Create a Group Box for a Drop-Down Field].{br}&#xA;&#xA;To bind a radio button to a value from the list of a drop-down data field, follow the instructions described in [HelpRoot_Dev_Customization\CG_GL_UI_Radio_FieldValue|To Bind a Radio Button to a Value in the List of a Data Field]." PlainText="Radio Button (PXRadioButton) In  Acumatica ERP, a radio button can work properly only in a  PXGroupBox  container. (See          Group Box (PXGroupBox) for details.) A  PXGroupBox        element contains scripts to provide the appropriate logic to use a nested radio button for a       single constant value of a bound drop-down data field. To use a  PXRadioButton  element on a form, follow the instructions       described in  To Create a Group Box for a Drop-Down Field. To bind a radio button to a value from the list of a drop-down data field, follow the       instructions described in  To Bind a Radio Button to a Value in the List of a Data Field. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="1778a3d1-25f1-53a7-669f-c9ef22b2f2c5" RecordSourceID="22377" />
		<row PageID="4ec17ddb-0099-43d2-901a-f960f423f5e5" Language="en-US" PageRevisionID="1" Content="&#xA;In the parent group box, to bind a radio button to a value in the list of a drop-down data field that is bound to this group box, perform the following actions:[anchor|#_0c3fcf15-f09d-4d54-b7d2-b230dc0902db]&#xA;#Open the group box in the Screen Editor, as described in [HelpRoot_Dev_Customization\CG_GL_UI_GroupBoxes_Open|To Open a Group Box in the Screen Editor].&#xA;#In the Control Tree, select the node of the radio button.&#xA;#Click the '''Layout Properties''' tab item to open the list of properties for the radio button.&#xA;#Set the &lt;tt&gt;Value&lt;/tt&gt; property to an appropriate value (usually it is a one-symbol value) of the list defined in the C# code, as the following screenshot shows.[anchor|#_bb6feec7-4901-4e63-959e-f42b8386979e][image:CustomizationPlatform/images/CG_GL_UI_Radio_FieldValue.png|popup|Setting the &lt;tt&gt;Value&lt;/tt&gt; property of a radio button|442px]&#xA;#Click '''Save''' to save your changes to the customization project.&#xA;" PlainText="To Bind a Radio Button to a Value in the List of a Data Field In the parent group box, to bind a radio button to a value in the list of a drop-down data    field that is bound to this group box, perform the following actions: Open the group box in the Screen Editor, as described in  To Open a Group Box in the Screen Editor. In the Control Tree, select the node of the radio button. Click the  Layout Properties  tab item to open the list of properties           for the radio button. Set the  Value  property to an appropriate value (usually it is a           one-symbol value) of the list defined in the C# code, as the following screenshot             shows. Setting the  Value  property of a radio button Click  Save  to save your changes to the customization project. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="89356d6f-4c24-fb39-38d1-19e6a1d82661" RecordSourceID="22377" />
		<row PageID="54a2a223-b5ee-4e10-96af-a1a0853b6ce6" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="387a7c56-1023-a0e0-81ab-a3385326d2d2" RecordSourceID="22377">
			<column name="Content"><![CDATA[
In Acumatica ERP, the <tt>PXButton</tt> element is used for the following purposes:[anchor|#_a6b4e0e6-b714-47e7-a487-2d1ef21cbe40]
*In a dialog box—to display a button that closes the dialog box and returns a predefined <tt>DialogResult</tt> value
*In a container with controls for a single data record (including a dialog box) of a form—to display a button that invokes a method defined in the graph, which provides the business logic for the form
{br}

The most common use case of the <tt>PXButton</tt> element is in a dialog box.{br}

A button, as the diagram below shows, can be immediately added to the following types of containers:[anchor|#_d4be3055-f97a-4f24-8f3e-5361d4c4ef62]
*<tt>PXFormView</tt>
* <tt>RowTeplate</tt>
* <tt>PXTabItem</tt>
* <tt>PXSmartPanel</tt>
* <tt>PXPanel</tt>
[anchor|#_8a5aba79-3550-4d54-ada2-29e93ac1d463][anchor|#_b9e2688e-0e9a-4372-8924-f23ca085c2ed][image:CustomizationPlatform/images/CG_GL_Forms_ASPX_PXButton.png|popup|Nesting rules for a button in an ASPX page|450px]{br}

To create a button in a container, follow the instructions described in [HelpRoot_Dev_Customization\CG_GL_UI_PXForm_AddStControl|To Add Another Supported Control].{br}

To delete a button from a container, follow the instructions described in [HelpRoot_Dev_Customization\CG_GL_UI_PXForm_DeleteControl|To Delete a Child UI Element].{br}

For detailed information about using a button, see the following topics:[anchor|#ul_xtf_5wp_gq]
*[HelpRoot_Dev_Customization\CG_GL_UI_PXButton_InSmartPanel|To Use a Button in a Dialog Box]
*[HelpRoot_Dev_Customization\CG_GL_UI_PXButton_ForAction|To Use a Button to Invoke a Method]
]]></column>
			<column name="PlainText"><![CDATA[Button (PXButton) In  Acumatica ERP,    the  PXButton  element is used for the following purposes: In a dialog box—to display a button that closes the dialog box and returns a      predefined  DialogResult  value In a container with controls for a single data record (including a dialog box) of a           form—to display a button that invokes a method defined in the graph, which provides           the business logic for the form The most common use case of the  PXButton  element is in a dialog box. A button, as the diagram below shows, can be immediately added to the following types of     containers: PXFormView RowTeplate PXTabItem PXSmartPanel PXPanel Nesting rules for a button in an ASPX page To create a button in a container, follow the instructions described in  To Add Another Supported Control. To delete a button from a container, follow the instructions described in  To Delete a Child UI Element. For detailed information about using a button, see the following topics: To Use a Button in a Dialog BoxTo Use a Button to Invoke a Method]]></column>
		</row>
		<row PageID="51384199-a50a-48b0-b2c5-fc687d937750" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="6ba01e34-ee17-8d03-b151-74cd50d6acdb" RecordSourceID="22377">
			<column name="Content"><![CDATA[
In a dialog box, you can create buttons of the following types:[anchor|#_fb85d9a1-ce25-4dac-93b8-c7aecd4951bb]
*A standard button that invokes no method but closes the dialog box and returns a specified predefined value, which can be processed by the method that has opened the dialog box
*:((({S:Warn} To arrange buttons in a horizontal row with right alignment in a dialog box, we recommend that you use the <tt>PXPanel</tt> container with the <tt>SkinID</tt> property set to ''Buttons''.
)))
*A button that invokes a method of the graph that provides business logic for the form
{br}

To add a standard button to a <tt>PXPanel</tt> container of a dialog box, perform the following actions:[anchor|#_891d1536-bbe3-4421-aaa1-bd1035bf40e5]
#Add the button to a <tt>PXPanel</tt> container, as described in [HelpRoot_Dev_Customization\CG_GL_UI_PXForm_AddStControl|To Add Another Supported Control].
#In the Control Tree of the Screen Editor, select the node of the new button.
#Click the '''Layout Properties''' tab item to open the list of properties for the button.
#Specify values for the following properties:
##<tt>DialogResult</tt>: Specify the value that is returned when the button closes the dialog box. Set the property to one of the following values defined in the <tt>WebDialogResult</tt> enumerator.
##:{| class="checklist" | width="100%" 
|- 
!width="20%" ! Value
!width="80%" ! Description
|- 
| ''OK''
| The user clicked a button with the <tt>DialogResult</tt> property set to ''OK''.
|- 
| ''Cancel''
| The user clicked a button with the <tt>DialogResult</tt> property set to ''Cancel''.
|- 
| ''Abort''
| The user clicked a button with the <tt>DialogResult</tt> property set to ''Abort''.
|- 
| ''Retry''
| The user clicked a button with the <tt>DialogResult</tt> property set to ''Retry''.
|- 
| ''Ignore''
| The user clicked a button with the <tt>DialogResult</tt> property set to ''Ignore''.
|- 
| ''Yes''
| The user clicked a button with the <tt>DialogResult</tt> property set to ''Yes''.
|- 
| ''No''
| The user clicked a button with the <tt>DialogResult</tt> property set to ''No''.
|}When the user clicks the added button, the dialog box is closed, and the specified value is returned to the method that has opened the dialog box.
##<tt>Text</tt>: Specify the text to be displayed on the button.
##:((({S:Warn}In the <tt>Text</tt> property of a standard button, you can define any text, regardless of the value of the <tt>DialogResult</tt> property.
)))
#Click '''Save''' to save changes in the customization project.
{br}

The following ASPX code snippet creates a panel with two standard buttons arranged a horizontal row with right alignment.{{{{&lt;px:PXPanel ... SkinID="Buttons"&gt;
  &lt;px:PXButton ... DialogResult="OK"     Text="Next" /&gt;
  &lt;px:PXButton ... DialogResult="Cancel" Text="Return" /&gt;
&lt;/px:PXPanel&gt;
}}}}{br}

If you need to include in the same dialog box a button that invokes a method of the graph, you can add the button to the same <tt>PXPanel</tt> container and set the button properties as described in [HelpRoot_Dev_Customization\CG_GL_UI_PXButton_ForAction|To Use a Button to Invoke a Method].]]></column>
			<column name="PlainText"><![CDATA[To Use a Button in a Dialog Box In a dialog box, you can create buttons of the following types: A standard button that invokes no method but closes the dialog box and returns a           specified predefined value, which can be processed by the method that has opened the           dialog box  To arrange buttons in a horizontal row with right alignment in a dialog             box, we recommend that you use the  PXPanel  container with the                SkinID  property set to  Buttons . A button that invokes a method of the graph that provides business logic for the           form To add a standard button to a  PXPanel  container of a dialog box, perform the    following actions: Add the button to a  PXPanel  container, as described in  To Add Another Supported Control. In the Control Tree of the Screen Editor, select the node of the new button. Click the  Layout Properties  tab item to open the list of properties           for the button. Specify values for the following properties: DialogResult : Specify the value that is returned when the button closes               the dialog box. Set the property to one of the following values defined in the                  WebDialogResult  enumerator. Value Description OK The user clicked a button with the  DialogResult                          property set to  OK . Cancel The user clicked a button with the  DialogResult                          property set to  Cancel . Abort The user clicked a button with the  DialogResult                          property set to  Abort . Retry The user clicked a button with the  DialogResult                          property set to  Retry . Ignore The user clicked a button with the  DialogResult                          property set to  Ignore . Yes The user clicked a button with the  DialogResult                          property set to  Yes . No The user clicked a button with the  DialogResult                          property set to  No . When the user clicks the added button, the dialog box is closed, and the               specified value is returned to the method that has opened the dialog box. Text : Specify the text to be displayed on the button. In the                    Text  property of a standard button, you can define any text,                 regardless of the value of the  DialogResult  property. Click  Save  to save changes in the customization project. The following ASPX code snippet creates a panel with two standard buttons arranged a horizontal       row with right       alignment. <px:PXPanel ... SkinID="Buttons">
  <px:PXButton ... DialogResult="OK"     Text="Next" />
  <px:PXButton ... DialogResult="Cancel" Text="Return" />
</px:PXPanel> If you need to include in the same dialog box a button that invokes a method of the graph, you    can add the button to the same  PXPanel  container and set the button properties    as described in  To Use a Button to Invoke a Method. ]]></column>
		</row>
		<row PageID="16bf4602-b474-4cb4-8394-de9b09d5adab" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="96ad13bc-c57d-a6b3-8758-b6af6cd4272f" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can use the <tt>PXButton</tt> element on a form to invoke a method of the graph that provides business logic for the form.{br}

To include in a container a button that invokes a method of the graph, perform the following actions:[anchor|#_88ad2b7b-e470-4aca-9998-a91ea1f9c6be]
#Open the container in the Screen Editor, as described in [HelpRoot_Dev_Customization\CG_GL_UI_PXForm_ToOpen|To Open a Container in the Screen Editor].
#Add the button to the container, as described in [HelpRoot_Dev_Customization\CG_GL_UI_PXForm_AddStControl|To Add Another Supported Control].
#In the Control Tree of the Screen Editor, select the node of the new button.
#Click the '''Layout Properties''' tab item to open the list of properties for the button.
#Specify values for the following properties:
##<tt>CommandSourceID</tt>: Set the property to the value specified in the <tt>ID</tt> property of the <tt>PXDataSource</tt> control.
##<tt>CommandName</tt>: In the property, specify the name of the method to be invoked when the user clicks the button on the form.
##:((({S:Warn}The method must be defined in the graph that is specified in the <tt>TypeName</tt> property of the <tt>PXDataSource</tt> control.
)))
##<tt>Text</tt>: Specify the text to be displayed on the button.
#Click '''Save''' to save your changes to the customization project.
{br}

The following ASPX code creates a button that invokes the ''MethodName'' method referenced in the <tt>PXDataSource</tt> control with the <tt>ID</tt> property set to ''ds''.{br}

{{{{
&lt;px:PXButton ... CommandName="MethodName" CommandSourceID="ds" Text="ButtonText" /&gt;
}}}}{br}

The ''MethodName'' method must be referenced in a <tt>PXDSCallbackCommand</tt> element of the <tt>PXDataSource</tt> control as follows.{{{{
&lt;px:PXDataSource ID="ds" ... TypeName="PX.Objects.&lt;GraphName&gt;" ...&gt;
  &lt;CallbackCommands&gt;
  ...
  &lt;px:PXDSCallbackCommand Name="MethodName" Visible="False" ... /&gt;
  ...
  &lt;/CallbackCommands&gt;
&lt;/px:PXDataSource&gt;
}}}}{br}

((({S:Warn}You can see all available <tt>PXDSCallbackCommand</tt> elements in the Control tree. They are added there automatically. 
)))]]></column>
			<column name="PlainText"><![CDATA[To Use a Button to Invoke a Method You can use the  PXButton  element on a form to invoke a method of the graph    that provides business logic for the form. To include in a container a button that invokes a method of the graph, perform the following     actions: Open the container in the Screen Editor, as described in  To Open a Container in the Screen Editor. Add the button to the container, as described in  To Add Another Supported Control. In the Control Tree of the Screen Editor, select the node of the new button. Click the  Layout Properties  tab item to open the list of properties           for the button. Specify values for the following properties: CommandSourceID : Set the property to the value specified in the          ID  property of the  PXDataSource  control. CommandName : In the property, specify the name of the method to be               invoked when the user clicks the button on the form. The method must be defined                 in the graph that is specified in the  TypeName  property of the                    PXDataSource  control. Text : Specify the text to be displayed on the button. Click  Save  to save your changes to the customization project. The following ASPX code creates a button that invokes the  MethodName  method referenced    in the  PXDataSource  control with the  ID  property set to      ds . 
<px:PXButton ... CommandName="MethodName" CommandSourceID="ds" Text="ButtonText" /> The  MethodName  method must be referenced in a  PXDSCallbackCommand        element of the  PXDataSource  control as       follows. 
<px:PXDataSource ID="ds" ... TypeName="PX.Objects.<GraphName>" ...>
  <CallbackCommands>
  ...
  <px:PXDSCallbackCommand Name="MethodName" Visible="False" ... />
  ...
  </CallbackCommands>
</px:PXDataSource> You can see all available  PXDSCallbackCommand  elements in the Control         tree. They are added there automatically.  ]]></column>
		</row>
		<row PageID="22e4972a-4ca2-4683-a2e9-51e88509cb9d" Language="en-US" PageRevisionID="1" Content="&#xA;The &lt;tt&gt;PXJavaScript&lt;/tt&gt; element is designed to keep JavaScript code in an ASPX page.{br}&#xA;&#xA;A &lt;tt&gt;PXJavaScript&lt;/tt&gt; control can be immediately added to the following types of containers:[anchor|#_d4be3055-f97a-4f24-8f3e-5361d4c4ef62]&#xA;*&lt;tt&gt;PXFormView&lt;/tt&gt;&#xA;* &lt;tt&gt;RowTeplate&lt;/tt&gt;&#xA;* &lt;tt&gt;PXTabItem&lt;/tt&gt;&#xA;* &lt;tt&gt;PXSmartPanel&lt;/tt&gt;&#xA;* &lt;tt&gt;PXPanel&lt;/tt&gt;&#xA;{br}&#xA;&#xA;To create a JavaScript control in a container, follow the instructions described in [HelpRoot_Dev_Customization\CG_GL_UI_PXForm_AddStControl|To Add Another Supported Control].{br}&#xA;&#xA;To delete a JavaScript control from a container, follow the instructions described in [HelpRoot_Dev_Customization\CG_GL_UI_PXForm_DeleteControl|To Delete a Child UI Element].{br}&#xA;&#xA;For a detailed example of using a JavaScript control, see [http://stackoverflow.com/questions/39732117/how-do-i-play-a-sound-in-response-to-a-custom-action-or-button-in-acumatica|How do I play a sound in response to a custom action or button in Acumatica?]." PlainText="Java Script (PXJavaScript) The  PXJavaScript  element is designed to keep JavaScript code in an ASPX       page. A  PXJavaScript  control can be immediately added to the following types of     containers: PXFormView RowTeplate PXTabItem PXSmartPanel PXPanel To create a JavaScript control in a container, follow the instructions described in  To Add Another Supported Control. To delete a JavaScript control from a container, follow the instructions described in  To Delete a Child UI Element. For a detailed example of using a JavaScript control, see  How do I play a sound in response to a custom action or         button in Acumatica? How do I play a sound in response to a custom action or button in Acumatica?. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="e15ea7db-6931-1e15-6866-af0efe6e5515" RecordSourceID="22377" />
		<row PageID="775da237-a59a-4235-bb00-28c8adfc8c73" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="cf130bd1-b9b4-06b5-0082-13364732729d" RecordSourceID="22377">
			<column name="Content"><![CDATA[
On an Acumatica ERP form, toolbars, action buttons, and menus are the types of UI elements that are created and processed by the graph that is specified in the <tt>TypeName</tt> property of the <tt>PXDataSource</tt> control and provides business logic for the form. Therefore, these UI elements cannot be created or customized by using the Screen Editor. See [HelpRoot_Dev_Customization\CG_GL_BL|Customizing Business Logic] for details.{br}

The standard page toolbar buttons include data manipulation ('''Insert''', '''Delete''', '''Save''', and '''Cancel'''), navigation ('''Next''', '''Previous''', '''First''', and '''Last'''), and clipboard ('''Copy''' and '''Paste'''). Every toolbar button corresponds to an action declared in the graph. You can use explicit or implicit declaration of actions to add standard buttons to the toolbar. To add standard toolbar buttons to the form and add selector controls, in the graph class declaration, specify the main DAC as the second type parameter of <tt>PXGraph</tt>, as the following code shows.{{{{public class GraphName : PXGraph&lt;GraphName, MainDACName&gt;
{
public PXSelect&lt;MainDACName&gt; PrimaryDataViewName;
}
}}}}{br}

To add a custom action to a form toolbar, you use [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_CodeEditor|Code Editor] to create the action declaration in the graph extension. See [HelpRoot_Dev_Customization\CG_GL_BL_Graph_AddAction|To Add an Action] for details.{br}

To create a menu on a form toolbar, in the graph or graph extension, you have to declare one action as a menu holder on the toolbar, and then declare all required actions and add these actions to the menu holder by using the <tt>AddMenuAction</tt> method of the <tt>PXAction</tt> class.]]></column>
			<column name="PlainText"><![CDATA[Toolbars, Action Buttons, and Menus On an  Acumatica ERP form, toolbars, action buttons, and menus are the types of UI elements that are created and       processed by the graph that is specified in the  TypeName  property of the          PXDataSource  control and provides business logic for the form. Therefore,       these UI elements cannot be created or customized by using the Screen Editor. See  Customizing Business Logic for details. The standard page toolbar buttons include data manipulation ( Insert ,          Delete ,  Save , and          Cancel ), navigation ( Next ,          Previous ,  First , and          Last ), and clipboard ( Copy  and          Paste ). Every toolbar button corresponds to an action declared in the       graph. You can use explicit or implicit declaration of actions to add standard buttons to the       toolbar. To add standard toolbar buttons to the form and add selector controls, in the graph       class declaration, specify the main DAC as the second type parameter of          PXGraph , as the following code       shows. public class GraphName : PXGraph<GraphName, MainDACName>
{
public PXSelect<MainDACName> PrimaryDataViewName;
} To add a custom action to a form toolbar, you use  Code Editor to create the action declaration in the       graph extension. See  To Add an Action for details. To create a menu on a form toolbar, in the graph or graph extension, you have to declare one       action as a menu holder on the toolbar, and then declare all required actions and add these       actions to the menu holder by using the  AddMenuAction  method of the          PXAction  class. ]]></column>
		</row>
		<row PageID="d0152c95-81a8-48d2-9251-72de39a8aae1" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="45e7ae22-2cda-e18b-ad6d-de66f95ff365" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The Acumatica Customization             Platform does not support some control types, such as <tt>PXSplitContainer</tt> and <tt>PXTreeView</tt>, that are supported by the Acumatica Framework. However the Acumatica Customization             Platform gives you the ability to add a control of an unsupported type to an Acumatica ERP form and save the change to a customization project.{br}

To do this, perform the following actions:[anchor|#_2f19a5dd-824e-4e82-b344-dc092b898465]
#Open the form in the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_LayoutEditor|Screen Editor], as described in [HelpRoot_Dev_Customization\CG_GL_UI_ExistForm_Starting|To Start a Customization of a Form].
#On the editor toolbar, click '''Actions &gt; Edit ASPX''' to open the ASPX code of the form in the [HelpRoot_Dev_Customization\CG_Platform_Tools_ASPXEditor|ASPX Editor].
#Modify the code in the editor.
#Click '''Generate Customization Script''' to save to the customization project the changes to the ''Page'' item for the form.
{br}

After you have added a new control to the customization project, you can select the control node in the Control Tree of the Screen Editor and specify the control properties, as described in [HelpRoot_Dev_Customization\CG_GL_UI_Box_SetProperty|To Set a Box Property].]]></column>
			<column name="PlainText"><![CDATA[Other Control Types The  Acumatica Customization             Platform does not support some control types, such as  PXSplitContainer  and      PXTreeView , that are supported by the  Acumatica Framework.    However the  Acumatica Customization             Platform gives you the ability to add a control of an unsupported type to an  Acumatica ERP    form and save the change to a customization project. To do this, perform the following actions: Open the form in the  Screen Editor, as described      in  To Start a Customization of a Form. On the editor toolbar, click  Actions > Edit ASPX  to open the ASPX      code of the form in the  ASPX Editor. Modify the code in the editor. Click  Generate Customization Script  to save to the customization      project the changes to the  Page  item for the form. After you have added a new control to the customization project, you can select the control    node in the Control Tree of the Screen Editor and specify the control properties, as described in      To Set a Box Property. ]]></column>
		</row>
		<row PageID="4156b66b-6d81-4cdd-bb52-1bf76526b0fb" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="64f225cf-03d0-1b38-c459-d21f39946f65" RecordSourceID="22377">
			<column name="Content"><![CDATA[
Business logic is implemented by overloading certain methods invoked by the system in the process of manipulating data. For such procedures as inserting a data record or updating a data record, the cache controllers generate series of events causing invocation of the methods called event handlers. The application is able to interfere in the series of events on different stages. For this purpose, the application implements methods that are executed as event handlers. Business logic can be divided into common logic relevant to different parts of the application and the logic specific to an application form. The common logic is implemented through event handler methods defined in attributes, while the screen-specific logic is implemented as methods in the associated graph.{br}

You use [HelpRoot_Dev_Customization\CG_Platform_Tools|Customization Tools] of the Acumatica Customization             Platform to customize business logic for forms of Acumatica ERP.{br}

The customization of existing business logic is based on the extension technology, which is described in greater detail in [HelpRoot_Dev_Customization\CG_Platform_Framework_CS_DACExt|DAC Extensions] and [HelpRoot_Dev_Customization\CG_Platform_TO_Code_CS_GraphExtensions|Graph Extensions].{br}

This part contains detailed instructions on how to customize a data access class, data field, graph, data view and an action of Acumatica ERP and how to include the changeset in a customization project.
==In This Part==[anchor|#_d4939107-194a-4ac5-9f8b-6742dbd59bb1]
*[HelpRoot_Dev_Customization\CG_GL_BL_DAC|Data Access Class]
*[HelpRoot_Dev_Customization\CG_GL_BL_DataField|Data Field]
*[HelpRoot_Dev_Customization\CG_GL_BL_Graph|Graph]
*[HelpRoot_Dev_Customization\CG_GL_BL_DataView|Data View]
*[HelpRoot_Dev_Customization\CG_GL_BL_Action|Action]
]]></column>
			<column name="PlainText"><![CDATA[Customizing Business Logic Business logic is implemented by overloading certain methods invoked by the system in the       process of manipulating data. For such procedures as inserting a data record or updating a       data record, the cache controllers generate series of events causing invocation of the methods       called event handlers. The application is able to interfere in the series of events on       different stages. For this purpose, the application implements methods that are executed as       event handlers. Business logic can be divided into common logic relevant to different parts of       the application and the logic specific to an application form. The common logic is implemented       through event handler methods defined in attributes, while the screen-specific logic is       implemented as methods in the associated graph. You use  Customization Tools of the  Acumatica Customization             Platform to customize business logic for forms of  Acumatica ERP. The customization of existing business logic is based on the extension technology, which is       described in greater detail in  DAC Extensions and  Graph Extensions. This part contains detailed instructions on how to customize a data access class, data field,       graph, data view and an action of  Acumatica ERP and how to include the changeset in a customization project. In This Part Data Access ClassData FieldGraphData ViewAction]]></column>
		</row>
		<row PageID="c4ba7af4-1145-4781-8dc6-ab706dfc59de" Language="en-US" PageRevisionID="1" PlainText="Data Access Class A data access class (DAC) is used to represent a database table in the code of  Acumatica ERP. If a DAC is bound to the database, it must have the same class name as the database table.       A data access class is inherited from the  IBqlTable  class and contains data       field declarations. You can use   Customization Project                         Editor to do the following: Create a new DAC Add a custom field to an existing DAC Customize the declaration of a data field of an existing DAC For detailed information on customizing data access classes, see the following topics: To Start the Customization of a Data Access ClassTo Add a Custom Data FieldTo Create a New DACTo Create a DAC ExtensionSee  Data Field for detailed instructions on the customization of       a data field. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="341eae0a-1a0a-15ff-adce-0413abd87e43" RecordSourceID="22377">
			<column name="Content"><![CDATA[
A data access class (DAC) is used to represent a database table in the code of Acumatica ERP. If a DAC is bound to the database, it must have the same class name as the database table. A data access class is inherited from the <tt>IBqlTable</tt> class and contains data field declarations.{br}

You can use [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor] to do the following:[anchor|#_04a09291-7282-4a6f-91ca-268e9ba2d40a]
*Create a new DAC
*Add a custom field to an existing DAC
*Customize the declaration of a data field of an existing DAC
{br}

For detailed information on customizing data access classes, see the following topics:[anchor|#ul_xtf_5wp_gq]
*[HelpRoot_Dev_Customization\CG_GL_BL_DAC_ToOpen|To Start the Customization of a Data Access Class]
*[HelpRoot_Dev_Customization\CG_GL_BL_DAC_AddCustomField|To Add a Custom Data Field]
*[HelpRoot_Dev_Customization\CG_GL_BL_DAC_NewDAC|To Create a New DAC]
*[HelpRoot_Dev_Customization\CG_GL_BL_DAC_DACExt|To Create a DAC Extension]
{br}

See [HelpRoot_Dev_Customization\CG_GL_BL_DataField|Data Field] for detailed instructions on the customization of a data field.]]></column>
		</row>
		<row PageID="81300776-772d-40cf-bcc9-bf3fb2e564ad" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="6ef260f5-f3b2-f4d1-cb9a-e170e702e53b" RecordSourceID="22377">
			<column name="Content"><![CDATA[((({S:Warn}Before you start a DAC customization, we recommend that you check the possibility to use the appropriate business entity attributes, which can be defined on the Attributes form (CS205000), instead of custom fields. See [HelpRoot_Dev_Customization\CG_Examples_AttribVSCustomFields|Usage Entity Attributes Instead of Custom Fields] for details.
)))
You might need to customize an existing data access class in the following cases:[anchor|#_7df047cc-95c3-4062-b7e5-ca9c2739242c]
*On a form, you want to create a custom data field to be used for a custom control.
*In Acumatica ERP, you want to change the business logic for a data field in the DAC.
*:((({S:Danger}If multiple Acumatica ERP forms contain controls for the same field, changing an attribute of the field in the DAC modifies the behavior of these controls for the field on all forms.
)))
{br}

If you know the name of the data access class to be customized, you can first add a ''DAC'' item for the class on the Customized Data Classes page of the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor] (see [HelpRoot_Dev_Customization\CG_GL_Items_DACs_AddingExisting|To Add a DAC Item for an Existing Data Access Class to a Project] for details) and then click the item to open it in the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_DataClassEditor|Data Class Editor].{br}

You usually start the customization of a data access class on a form that contains boxes used by users to work with data of an appropriate business entity, such as a sales order invoice.{br}

To start the customization of a DAC from a form, perform the following actions:[anchor|#_057d1796-13c5-4840-8eeb-181b95200518]
#Open the form in the browser.
#On the form title bar, click '''Customization &gt; Inspect Element''' to launch the [HelpRoot_Dev_Customization\CG_Platform_Tools_Inspector|Element Inspector].
#:((({S:Warn}If you need to activate the [HelpRoot_Dev_Customization\CG_Platform_Tools_Inspector|Element Inspector] for a pop-up panel, a dialog box, or another UI element that opens in modal mode and makes the [HelpRoot_Dev_Customization\CG_Platform_Tools_Menu|Customization Menu] unavailable for selection, you can press Control-Alt.
)))
#On the form, click the area with the boxes that are used for the data of the business entity, to open the [HelpRoot_Dev_Customization\CG_Platform_Tools_Inspector_ElProperiesDlg|Element Properties] dialog box for the area.
#In the '''Data Class''' box of the dialog box, view the name of the DAC for the element you clicked. (See the following screenshot.) If you are not sure that this DAC is the needed one, click '''Cancel''' and repeat Step 3.
#Click '''Actions &gt; Customize Data Fields''', as the following screenshot shows.[anchor|#image_xx4_qcz_5w][image:CustomizationPlatform/images/CG_GL_Items_DACs_Adding_CustMent.png|popup|Using the Element Properties dialog box to start the customization of the class|240px]
#If there is no currently selected customization project and the inspector opens the [HelpRoot_Dev_Customization\CG_Platform_Tools_Menu_SelectCustProjDlg|Select Customization Project Dialog Box], select an existing customization project or create a new one (see [HelpRoot_Dev_Customization\CG_GL_Projects_Starting_Creating|To Create a New Project] and [HelpRoot_Dev_Customization\CG_GL_Projects_Starting_Selecting|To Select an Existing Project] for details).
{br}

If the customization project does not contain a ''DAC'' item for the data access class, the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor] adds the item to the project to keep the changes in the database. The DAC is opened in the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_DataClassEditor|Data Class Editor], and you can start the customization of the class.{br}

When you click '''Save''' on the editor toolbar, the editor updates the ''DAC'' item in the database.]]></column>
			<column name="PlainText"><![CDATA[To Start the Customization of a Data Access Class Before you start a DAC customization, we recommend that you check the possibility to use       the appropriate business entity attributes, which can be defined on the Attributes form       (CS205000), instead of custom fields. See  Usage Entity Attributes Instead of Custom Fields for details. You might need to customize an existing data access class in the following cases: On a form, you want to create a custom data field to be used for a custom control. In  Acumatica ERP, you want to change the business logic for a data field in the DAC. If multiple  Acumatica ERP forms contain controls for the same field, changing an attribute of the field in the             DAC modifies the behavior of these controls for the field on all forms. If you know the name of the data access class to be customized, you can first add a  DAC     item for the class on the Customized Data Classes page of the   Customization Project                         Editor (see  To Add a DAC Item for an Existing Data Access Class to a Project    for details) and then click the item to open it in the  Data Class Editor. You usually start the customization of a data access class on a form that contains boxes used       by users to work with data of an appropriate business entity, such as a sales order       invoice. To start the customization of a DAC from a form, perform the following actions: Open the form in the browser. On the form title bar, click  Customization > Inspect Element  to launch the  Element Inspector. If you             need to activate the  Element Inspector for a pop-up panel,             a dialog box, or another UI element that opens in modal mode and makes the  Customization Menu unavailable for selection, you can press             Control-Alt. On the form, click the area with the boxes that are used for the data of the business           entity, to open the  Element             Properties Element Properties dialog box for the area. In the  Data Class  box of the dialog box, view the name of the DAC           for the element you clicked. (See the following screenshot.) If you are not sure that this           DAC is the needed one, click  Cancel  and repeat Step 3. Click  Actions > Customize Data Fields , as the following           screenshot shows. Using the Element Properties dialog box to start the customization of the               class If there is no currently selected customization project and the inspector opens the              Select Customization Project Dialog Box, select an existing           customization project or create a new one (see  To Create a New Project and  To Select an Existing Project for details). If the customization project does not contain a  DAC  item for the data access class, the           Customization Project                         Editor adds the item to the project to keep the       changes in the database. The DAC is opened in the  Data Class Editor, and you can start the customization       of the class. When you click  Save  on the editor toolbar, the editor updates the      DAC  item in the database. ]]></column>
		</row>
		<row PageID="39f35b2f-488f-4f2c-8549-3854e4147754" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="da3d6ed0-5b65-ec0c-c30a-f4894ec50151" RecordSourceID="22377">
			<column name="Content"><![CDATA[
Under some circumstances, you will find it best to use entity attributes defined on the Attributes form (CS205000; '''Configuration &gt; Common Settings &gt; Common Settings'''), while under other circumstances, custom fields will help you better meet the requirements of your customization task.{br}

You might use attributes under the following circumstances:[anchor|#ul_lrj_sbt_cs]
*You don&rsquo;t need a complex layout for attribute fields because they aren&rsquo;t used for manual input, so you can use the easiest way of creating additional fields.
*You&rsquo;d prefer an approach that helps you to localize customizations that you make to the system to a limited number of spaces, which in turn helps you to avoid having scattered changes throughout the system.
{br}

The use of custom fields provides more functionality than attributes do. Using attributes as columns in a grid can present difficulties. For example, in a grid, you can display columns for either all attributes or none of them. Also, you cannot rename a column for an attribute in a grid.{br}

You might use custom fields under the following circumstances:[anchor|#ul_mrj_sbt_cs]
*These fields are for manual input and you need a nice-looking layout for them.
*You also have some business logic of validation based on a custom field, so you might need the customization code for these fields.
]]></column>
			<column name="PlainText"><![CDATA[Usage Entity Attributes Instead of Custom Fields Under some circumstances, you will find it best to use entity attributes defined on the       Attributes form (CS205000;  Configuration > Common Settings > Common Settings ), while under other circumstances, custom fields will help you better meet the       requirements of your customization task. You might use attributes under the following circumstances: You don't need a complex layout for attribute fields because they aren't used for manual           input, so you can use the easiest way of creating additional fields. You'd prefer an approach that helps you to localize customizations that you make to the           system to a limited number of spaces, which in turn helps you to avoid having scattered           changes throughout the system. The use of custom fields provides more functionality than attributes do. Using attributes as    columns in a grid can present difficulties. For example, in a grid, you can display columns for    either all attributes or none of them. Also, you cannot rename a column for an attribute in a    grid. You might use custom fields under the following circumstances: These fields are for manual input and you need a nice-looking layout for them. You also have some business logic of validation based on a custom field, so you might           need the customization code for these fields. ]]></column>
		</row>
		<row PageID="5a2bddc7-dd58-4de4-a9f5-f4d5ce073b77" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="ca33d6b8-100c-52bf-5712-ae64a4d68497" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can add a custom data field to an existing data access class by using the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_LayoutEditor|Screen Editor] or [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_DataClassEditor|Data Class Editor], as described in the following sections:[anchor|#_e672608b-32ef-4054-92fd-df63532e2e7e]
*[[#_b4eba166-5f4f-4438-a03d-afa3f7ab6458|By Using the Data Class Editor]
*[[#_8d5cd29f-d409-447c-9853-ef3632b73e14|By Using the Screen Editor]
{br}

Both of the editors opens the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_DataClassEditor_NewFieldDlg|New Field] dialog box, which you use to enter the parameters of the new field and to launch the New Field wizard, which includes an XML declaration of the new field in the ''DAC'' item for the modified data access class. If the ''DAC'' item for the modified data access class is absent in the customization project, the wizard creates the appropriate item. Also, the wizard creates a ''Table'' item with a description of the custom column added to the table for the custom field.{br}

You can select the way a custom field will be stored in the database when you add the field to a data access class. You can add a custom field as one of the following:[anchor|#ul_e5v_tfy_gq]
*Without mapping to the database
*As a new column to the database table by altering the table schema
*As a name-value pair to a dedicated table without altering the table schema
The detailed information is described in the following sections:[anchor|#_61b01d6a-4bad-4936-a580-3149c4b7e8c2]
*[[#section_mzw_cx2_hq|To Add a Custom Field Without Mapping to the Database]
*[[#section_ihj_zw2_hq|To Add a Custom Field as a New Column]
*[[#section_c5t_cx2_hq|To Add a Custom Field as a Name-Value Pair]
*[[#section_qx1_dx2_hq|To Delete a Custom Field]
{br}

To be able to create a control for the new field to be displayed on a form, you have to publish the project to make the system create the column in the database table and compile the customization code. After the publication, you can add the control for the new field to a form by using the Screen Editor. See [HelpRoot_Dev_Customization\CG_GL_UI_PXForm_AddBox|To Add a Box for a Data Field] or [HelpRoot_Dev_Customization\CG_GL_UI_PXGrid_AddColumn|To Add a Column for a Data Field] for details.[anchor|#_b4eba166-5f4f-4438-a03d-afa3f7ab6458]
==By Using the Data Class Editor==
You generally use the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_DataClassEditor|Data Class Editor] to add a custom field to a data access class (DAC) and store the changes in the customization project as a ''DAC'' item. To do this, perform the following actions:[anchor|#_c20adcf8-6e9a-4c80-b3d4-40e5866f40c4]
#Start customization of the data access class, as described in [HelpRoot_Dev_Customization\CG_GL_BL_DAC_ToOpen|To Start the Customization of a Data Access Class].
#On the toolbar of the Data Class page, click '''Add Field &gt; Create New Field'''.
#In the '''New Field''' dialog box, which opens, specify the custom field parameters that are described in [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_DataClassEditor_NewFieldDlg|Create New Field Dialog Box].
#Click '''OK''' to save changes in the customization project.
[anchor|#_8d5cd29f-d409-447c-9853-ef3632b73e14]
==By Using the Screen Editor==
If you customize a form by using the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_LayoutEditor|Screen Editor], you may need to create a custom data field to be used to create a new control on the form. By using the editor, you can create a new field in the main DAC of the data view that provides data for the object selected in the Control Tree. To do this, perform the following actions:[anchor|#ol_e5h_3x2_hq]
#In the Control Tree of the Screen Editor, select the node of a container to which you intend to add a new control, or a subnode within the container node.
#Click the '''Add Data Fields''' tab item.
#On the table toolbar of the tab item, click '''New Field'''.
#In the '''New Field''' dialog box, which opens, specify the custom field parameters, which are described in [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_DataClassEditor_NewFieldDlg|Create New Field Dialog Box].
#Click '''OK''' to save your changes to the customization project.
[anchor|#section_mzw_cx2_hq]
==To Add a Custom Field Without Mapping to the Database==
To add a custom field without mapping to the database, perform the following actions:[anchor|#ol_yxn_f1f_hq]
#Open '''Create New Field''' dialog box for the data access class [[#_b4eba166-5f4f-4438-a03d-afa3f7ab6458|By Using the Data Class Editor] or [[#_8d5cd29f-d409-447c-9853-ef3632b73e14|By Using the Screen Editor].
#In the dialog box, specify the custom field parameters and select ''NonPersistedField'' in '''Storage Type'''.
#Click '''OK''' to add the field to the data access class.
{br}

The New Field wizard includes an XML declaration of the new field in the ''DAC'' item for the modified data access class. The new field declaration contains the data type attribute that specifies an unbound field, such as {{[PXString]}}.[anchor|#section_ihj_zw2_hq]
==To Add a Custom Field as a New Column==[anchor|#_3cdf8725-14f8-456a-aa81-68b732f7d39d]
To add a custom field as a new column that will be appended to the original table of Acumatica ERP, perform the following actions:[anchor|#_93bc98b0-6397-4145-b268-0ebe6cea86da]
#Open the '''Create New Field''' dialog box for the data access class [HelpRoot_Dev_Customization\CG_GL_BL_DAC_AddCustomField#_b4eba166-5f4f-4438-a03d-afa3f7ab6458|by using the Data Class Editor] or [HelpRoot_Dev_Customization\CG_GL_BL_DAC_AddCustomField#_8d5cd29f-d409-447c-9853-ef3632b73e14|by using the Layout Editor].
#In the dialog box, specify the custom field parameters and select ''DBTableColumn'' in the '''Storage Type''' box to make the system append the column to the original table in the database.
#Click '''OK''' to add the field to the data access class.
The New Field wizard includes an XML declaration of the new field in the ''DAC'' item for the modified data access class. If the ''DAC'' item for the modified data access class is absent in the customization project, the wizard creates the appropriate item. Also, the wizard creates a ''Table'' item with a description of the custom column to be created in the database table for the custom field.{br}

((({S:Warn}If a custom field is added to a DAC with <tt>PXProjectionAttribute</tt> (a projection view DAC), Customization Project Editor also automatically creates an extension of a DAC representing a database table with the same custom field. For details about data projections attributes, see [HelpRoot_Dev_Platform\BL__con_Attr_Projection|Data Projection].
)))[anchor|#section_c5t_cx2_hq]
==To Add a Custom Field as a Name-Value Pair==
To add a custom field a name-value pairs stored in a dedicated table of Acumatica ERP, perform the following actions:[anchor|#ol_gb1_sy2_hq]
#Open '''Create New Field''' dialog box for the data access class [[#_b4eba166-5f4f-4438-a03d-afa3f7ab6458|By Using the Data Class Editor] or [[#_8d5cd29f-d409-447c-9853-ef3632b73e14|By Using the Screen Editor].
#In the dialog box, specify the custom field parameters and select ''NameValuePair'' in '''Storage Type'''.
#Click '''OK''' to add the field to the data access class.
{br}

The New Field wizard includes an XML declaration of the new field in the ''DAC'' item for the modified data access class. If the ''DAC'' item for the modified data access class is absent in the customization project, the wizard creates the appropriate item. The wizard doesn&rsquo;t generate any definitions to change the database schema.[anchor|#section_qx1_dx2_hq]
==To Delete a Custom Field==
To delete a custom field or custom attributes on a field from the data access class, open the data access class in the Data Class Editor and delete the custom field from the field list. If you work in Microsoft Visual Studio, publish the customization project to update the file with the customized data access class in the file system. After the project has been published, the customization will be removed from the data access class.]]></column>
			<column name="PlainText"><![CDATA[To Add a Custom Data Field You can add a custom data field to an existing data access class by using the  Screen Editor or  Data Class Editor, as described in the following     sections: By Using the Data Class Editor By Using the Data Class EditorBy Using the Screen Editor By Using the Screen EditorBoth of the editors opens the  New Field New Field dialog       box, which you use to enter the parameters of the new field and to launch the New Field       wizard, which includes an XML declaration of the new field in the  DAC  item for the       modified data access class. If the  DAC  item for the modified data access class is       absent in the customization project, the wizard creates the appropriate item. Also, the wizard       creates a  Table  item with a description of the custom column added to the table for the       custom field. You can select the way a custom field will be stored in the database when you add the field       to a data access class. You can add a custom field as one of the following: Without mapping to the database As a new column to the database table by altering the table schema As a name-value pair to a dedicated table without altering the table schema The detailed information is described in the following sections: To Add a Custom Field Without Mapping to the Database To Add a Custom Field Without Mapping to the DatabaseTo Add a Custom Field as a New Column To Add a Custom Field as a New ColumnTo Add a Custom Field as a Name-Value Pair To Add a Custom Field as a Name-Value PairTo Delete a Custom Field To Delete a Custom FieldTo be able to create a control for the new field to be displayed on a form, you have to publish       the project to make the system create the column in the database table and compile the       customization code. After the publication, you can add the control for the new field to a form       by using the Screen Editor. See  To Add a Box for a Data Field or  To Add a Column for a Data Field for details. By Using the Data Class Editor You generally use the  Data Class Editor to add a         custom field to a data access class (DAC) and store the changes in the customization project         as a  DAC  item. To do this, perform the following actions: Start customization of the data access class, as described in  To Start the Customization of a Data Access Class. On the toolbar of the Data Class page, click  Add Field > Create New               Field . In the  New Field  dialog box, which opens, specify the custom             field parameters that are described in  Create New Field Dialog Box. Click  OK  to save changes in the customization project. By Using the Screen Editor If you customize a form by using the  Screen Editor, you may need to create a custom data field to be used to create a new control on the form.     By using the editor, you can create a new field in the main DAC of the data view that provides     data for the object selected in the Control Tree. To do this, perform the following actions: In the Control Tree of the Screen Editor, select the node of a container to which you             intend to add a new control, or a subnode within the container node. Click the  Add Data Fields  tab item. On the table toolbar of the tab item, click  New Field . In the  New Field  dialog box, which opens, specify the custom field             parameters, which are described in  Create New Field Dialog Box. Click  OK  to save your changes to the customization project. To Add a Custom Field Without Mapping to the Database To add a custom field without mapping to the database, perform the following actions: Open  Create New Field  dialog box for the data access class                By Using the Data Class Editor By Using the Data Class Editor or  By Using the Screen Editor By Using the Screen Editor. In the dialog box, specify the custom field parameters and select  NonPersistedField              in  Storage Type . Click  OK  to add the field to the data access class. The New Field wizard includes an XML declaration of the new field in the  DAC  item         for the modified data access class. The new field declaration contains the data type         attribute that specifies an unbound field, such as  [PXString] . To Add a Custom Field as a New Column To add a custom field as a new column that will be appended to the original table of  Acumatica ERP, perform the following actions: Open the  Create New Field  dialog box for the data access class  by using the Data Class Editor by using the Data Class Editor or  by using the Layout Editor by using the Layout Editor. In the dialog box, specify the custom field parameters and select  DBTableColumn  in the                          Storage Type  box  to make the system append the column to the                     original table in the database. Click  OK  to add the field to the data access class. The New Field wizard includes an XML declaration of the new field in the  DAC  item for the modified data access class. If the  DAC  item for the modified data access class is absent in the customization project, the wizard creates the appropriate item. Also, the wizard creates a  Table  item with a description of the custom column to be created in the database table for the custom field. If a custom field is added to a DAC with  PXProjectionAttribute                  (a projection view DAC),  Customization Project Editor also automatically creates an extension of a DAC representing a database table                 with the same custom field. For details about data projections attributes, see  Data Projection. To Add a Custom Field as a Name-Value Pair To add a custom field a name-value pairs stored in a dedicated table of  Acumatica ERP, perform the following actions: Open  Create New Field  dialog box for the data access class  By Using the Data Class Editor By Using the Data Class Editor or  By Using the Screen Editor By Using the Screen Editor. In the dialog box, specify the custom field parameters and select  NameValuePair  in                Storage Type . Click  OK  to add the field to the data access class. The New Field wizard includes an XML declaration of the new field in the  DAC  item         for the modified data access class. If the  DAC  item for the modified data access         class is absent in the customization project, the wizard creates the appropriate item. The         wizard doesn't generate any definitions to change the database schema. To Delete a Custom Field To delete a custom field or custom attributes on a field from the data access class, open         the data access class in the Data Class Editor and delete the custom field from the field         list. If you work in Microsoft Visual Studio, publish the customization project to update         the file with the customized data access class in the file system. After the project has         been published, the customization will be removed from the data access class. ]]></column>
		</row>
		<row PageID="cef47ebf-cb3f-41dd-a137-be0201c84140" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="39efb2ba-4e4c-5235-d88c-46812090e90d" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can add a new data access class (DAC) to a customization project by generating the code from the definition of a database table.{br}

To create a custom data access class for a custom database table and add the created item to a customization project, you have to generate the class template on the Code page of the Customization Project Editor.{br}

To do this, perform the following actions:[anchor|#_a45925b0-6b24-4982-8597-fd73f7d5ceae]
#Create the needed custom table in the database by using a database management tool.
#Generate the DAC code for the customization project as follows:
##Open the customization project in the Project Editor.
##In the navigation pane, click '''Code''' to open the Code page.
##On the page toolbar, click '''Add New Record''' (+).
##In the '''Create Code File''' dialog box, which opens, select ''New DAC'' in the '''File Template''' box.
##In the '''Class Name''' box, specify the class name that corresponds to the name of the table created in the database.
##:((({S:Warn}If you have just created the table, restart Internet Information Services (IIS) or recycle the application pool to make sure that Acumatica ERP is aware of the new table, because it caches the database schema once, when the domain starts.
)))
##Select the '''Generate Members from Database''' check box.
##Click '''OK'''.
##:The platform does the following:[anchor|#_5a80d0c1-923b-47a4-a416-dbff41e3d155]
##*Generates the data access class with members that correspond to the table columns. The class is added to the namespace of the customization project.
##*Adds the class to the customization project as a ''Code'' item.
##*Saves the customization project.
##*Opens the created item in the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_CodeEditor|Code Editor].
#:You can use the Code Editor to modify the generated code. After you publish the customization project, you can work with the custom data access class in MS Visual Studio.
#In the Code Editor, define the key fields in the DAC. To include a data field in the key, in the type attribute of the field, you have to add the <tt>IsKey</tt> parameter, as the example below shows. <source lang="csharp">[PXDBString(15, IsKey=true)]</source>
#Add the table definition to the customization project by doing the following:
##In the navigation pane of the Project Editor, click '''Database Scripts'''.
##On the Database Scripts page, which opens, click '''Add''' > '''Custom Table Schema'''.
##In the '''Add Custom Table Schema''' dialog box, which opens, select the custom table in the '''Table''' box, and click '''OK'''.
##:The platform does the following:[anchor|#_697da60d-f03c-473d-8033-b208fe3d7525]
##*Adds the XML definition of the table to the customization project as an ''Sql'' item
##*Saves the customization project
##:Every time you publish the customization project, the system checks whether a table with this SQL definition exists in the database. If the table doesn&rsquo;t exist, the system creates the table. If the table exists, the system adjusts the table schema if there is any difference between the existing table schema and the table schema from the customization project (no data is truncated).
]]></column>
			<column name="PlainText"><![CDATA[To Create a New DAC You can add a new data access class (DAC) to a customization project by generating the code from the definition of a database table. To create a custom data access class for a custom database table and add the created item to a customization project, you have to generate the class template on the Code page of the  Customization Project Editor. To do this, perform the following actions: Create the needed custom table in the database by using a database management tool. Generate the DAC code for the customization project as follows: Open the customization project in the Project Editor. In the navigation pane, click  Code  to open                                 the Code page. On the page toolbar, click  Add New Record                                  (+). In the  Create Code File  dialog box, which                                 opens, select  New DAC  in the  File                                     Template  box. In the  Class Name  box, specify the class name                                 that corresponds to the name of the table created in the                                     database. If you have just created the table, restart                                     Internet Information Services (IIS) or recycle the application                                     pool to make sure that  Acumatica ERP is aware of the new table, because it caches the database                                     schema once, when the domain starts. Select the  Generate Members from Database                                  check box. Click  OK . The platform does the                                         following: Generates the data access class with members that                                             correspond to the table columns. The class is added to                                             the namespace of the customization project. Adds the class to the customization project as a                                                  Code  item. Saves the customization project. Opens the created item in the  Code Editor. You can use the Code Editor to modify the generated code. After you                             publish the customization project, you can work with the custom data                             access class in MS Visual Studio. In the Code Editor, define the key fields in the DAC. To include a data field in the key, in the type attribute of the field, you have to add the  IsKey  parameter, as the example below shows.  [PXDBString(15, IsKey=true)] Add the table definition to the customization project by doing the following: In the navigation pane of the Project Editor, click  Database Scripts . On the Database Scripts page, which opens, click  Add Custom Table Schema . In the  Add Custom Table Schema  dialog box, which opens, select the custom                                 table in the  Table  box, and click                                      OK . The platform does the following: Adds the XML definition of the table to the                                             customization project as an  Sql  item Saves the customization project Every time you publish the customization project,                                     the system checks whether a table with this SQL definition                                     exists in the database. If the table doesn't exist, the system                                     creates the table. If the table exists, the system adjusts the                                     table schema if there is any difference between the existing                                     table schema and the table schema from the customization project                                     (no data is truncated). ]]></column>
		</row>
		<row PageID="f16c78a5-73d6-44b3-8519-59fae75159f7" Language="en-US" PageRevisionID="1" PlainText="To Create a DAC Extension If you know the name of the data access class to be customized, you can create a  Code  item with the DAC extension template on the Code page of the  Customization Project Editor by using the  Create Code File  dialog box. To do this, perform the following actions: Open the customization project in the editor. (See  To Open a Project for details.) Click  Code  in the navigation pane to open the Code page. Click  Add New Record  (+) on the page toolbar. In the  Create Code File  dialog box, which opens, select  DAC Extension  in the  File Template  box, as the screenshot below shows. In the  Base DAC  box, select the name of the data access class to be customized. Click  OK . Adding a Code item with the DAC extension to the project The platform creates the template of the class that is derived from the  PXCacheExtension&lt;&gt;  class, saves the code as a  Code  item of the project in the database, and opens the item in the  Code Editor. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="06699be9-bcbc-86be-48d4-793673088598" RecordSourceID="22377">
			<column name="Content"><![CDATA[
If you know the name of the data access class to be customized, you can create a ''Code'' item with the DAC extension template on the Code page of the Customization Project Editor by using the '''Create Code File''' dialog box.{br}

To do this, perform the following actions:[anchor|#_5d053841-1dc9-451c-85bc-db3a2fa0ffcd]
#Open the customization project in the editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)
#Click '''Code''' in the navigation pane to open the Code page.
#Click '''Add New Record''' (+) on the page toolbar.
#In the '''Create Code File''' dialog box, which opens, select ''DAC Extension'' in the '''File Template''' box, as the screenshot below shows.
#In the '''Base DAC''' box, select the name of the data access class to be customized.
#Click '''OK'''.[anchor|#_1b199378-4164-453d-8d65-fecf0b738493][image:Shared/Images/CG_GL_Items_Code_AddingDACExt.png|popup|Adding a Code item with the DAC extension to the project|405px]
{br}

The platform creates the template of the class that is derived from the <tt>PXCacheExtension&lt;&gt;</tt> class, saves the code as a ''Code'' item of the project in the database, and opens the item in the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_CodeEditor|Code Editor].]]></column>
		</row>
		<row PageID="b3d24079-bda4-4f82-9fbd-c444a8bcb733" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="48bf392f-9e12-ff41-76fe-d7e154618bba" RecordSourceID="22377">
			<column name="Content"><![CDATA[
In a data access class (DAC), a data field declaration consists of the following elements:[anchor|#_a2d71a46-cf23-4aa5-ba86-a3abde15b2cd]
*A public abstract class that implements the <tt>PX.Data.IBqlField</tt> interface. This abstract class is used as a ''type'' to reference the field in the BQL statements specified in the data views and attributes added to data field declarations.
*Attributes that provide the common business logic for the field. On a field, you use attributes to define the data field specification, which includes multiple parameters, such as the data type, default value, and field caption in the UI. The type attribute, such as <tt>PXDBString</tt> and <tt>PXDBDecimal</tt>, is the only mandatory attribute of a DAC field.
*A public virtual property of a nullable data type that corresponds to the data type of this field. This property keeps the value of the data field. The attributes are added to the property and not to the abstract class of the data field declaration.
{br}

For a data field, you can customize only field attributes. You do this in one of the following ways:[anchor|#_d045bc62-75c6-40d8-b375-ae5a6bee7be9]
*In the DAC (on the DAC level)
*In a graph (on the graph level)
{br}

On the DAC level, you can customize the attributes of a field by adding, deleting, replacing, or modifying an attribute in the DAC extension by using the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_DataClassEditor|Data Class Editor].{br}

On the graph level, you can define a new set of attributes for a field and apply changes by means of the <tt>DACName&#95;FieldPropertyName&#95;CacheAttached()</tt> event handler in the graph extension.{br}

The following diagram shows an example that demonstrates how the attributes of a field declared in a data access class can be changed on the DAC and graph levels for two forms.[anchor|#_c349daeb-5cb8-421b-95fd-94ae543d5413][anchor|#_a858bd7c-38d5-4d68-a6c7-8fdc4b3bcaf4][image:CustomizationPlatform/images/CG_GL_BL_DataField.png|popup|Example of the customization of attributes for a data field on the DAC and graph levels|450px]((({S:Warn}In the example, as recommended in [HelpRoot_Dev_Customization\CG_Platform_Framework_CS_DACExt_FieldAttributes|Customization of Field Attributes in DAC Extensions], the <tt>CacheAttached()</tt> event handler is always used to merge the custom attributes of the field with the original ones instead of replacing them on the graph level.
)))On the diagram, you can see that the attribute collection for the same data field in the cache object can be different for graphs that provide business logic for different forms.{br}

For detailed information on customizing a data field, see the following topics:[anchor|#ul_xtf_5wp_gq]
*[HelpRoot_Dev_Customization\CG_GL_BL_DataField_TypeLevel|To Customize a Field on the DAC Level]
*[HelpRoot_Dev_Customization\CG_GL_BL_DataField_CacheLevel|To Customize a Field on the Graph Level]
*[HelpRoot_Dev_Customization\CG_GL_BL_DataField_Default|To Set a Default Value]
*[HelpRoot_Dev_Customization\CG_GL_BL_DataField_Name|To Change the Label of a Field]
*[HelpRoot_Dev_Customization\CG_GL_BL_DataField_Mandatory|To Make a Field Mandatory]
*[HelpRoot_Dev_Customization\CG_GL_BL_DataField_Selector|To Customize the Table of a Selector Field]
*[HelpRoot_Dev_Customization\CG_GL_BL_DataField_Events|To Add an Event Handler for a Field]
*[HelpRoot_Dev_Customization\CG_GL_BL_DataField_MultiLanguage|To Provide Multi-Language Support for a Field]

==Related Articles==
*[http://asiablog.acumatica.com/2017/01/append-and-replace-of-dacs-attributes.html]]]></column>
			<column name="PlainText"><![CDATA[Data Field In a data access class (DAC), a data field declaration consists of the following elements: A public abstract class that implements the  PX.Data.IBqlField            interface. This abstract class is used as a  type  to reference the field in the BQL           statements specified in the data views and attributes added to data field           declarations. Attributes that provide the common business logic for the field. On a field, you use           attributes to define the data field specification, which includes multiple parameters,           such as the data type, default value, and field caption in the UI. The type attribute,           such as  PXDBString  and  PXDBDecimal , is the only           mandatory attribute of a DAC field. A public virtual property of a nullable data type that corresponds to the data type of           this field. This property keeps the value of the data field. The attributes are added to           the property and not to the abstract class of the data field declaration. For a data field, you can customize only field attributes. You do this in one of the       following ways: In the DAC (on the DAC level) In a graph (on the graph level) On the DAC level, you can customize the attributes of a field by adding, deleting, replacing,       or modifying an attribute in the DAC extension by using the  Data Class Editor. On the graph level, you can define a new set of attributes for a field and apply changes by       means of the  DACName_FieldPropertyName_CacheAttached()  event handler in the       graph extension. The following diagram shows an example that demonstrates how the attributes of a field       declared in a data access class can be changed on the DAC and graph levels for two forms. Example of the customization of attributes for a data field on the DAC and graph           levels In the example, as recommended in  Customization of Field Attributes in DAC Extensions, the              CacheAttached()  event handler is always used to merge the custom           attributes of the field with the original ones instead of replacing them on the graph           level. On the diagram, you can see that the attribute collection for the same data field in the       cache object can be different for graphs that provide business logic for different forms. For detailed information on customizing a data field, see the following topics: To Customize a Field on the DAC LevelTo Customize a Field on the Graph LevelTo Set a Default ValueTo Change the Label of a FieldTo Make a Field MandatoryTo Customize the Table of a Selector FieldTo Add an Event Handler for a FieldTo Provide Multi-Language Support for a Field]]></column>
		</row>
		<row PageID="1911428f-d4ca-4207-9396-a744db21cdfb" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="1acc0bf8-ba84-e534-7c3b-06d5696e48ba" RecordSourceID="22377">
			<column name="Content"><![CDATA[
If an attribute is added to a field declaration within a data access class (DAC), the common business logic of this attribute is applied to each data record of this type for each graph that uses this class. Therefore, if multiple Acumatica ERP forms contain controls for the same field, a change to an attribute of the field in the DAC modifies the behavior of these controls for the field on all forms.{br}

You can use the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_DataClassEditor|Data Class Editor] to customize the attributes of an existing data field in the DAC and to store the changes in the customization project as a ''DAC'' item. Because the goal of the customization of a field on the DAC level is to change the behavior or appearance of controls for the field on all forms, you start the customization of a data field from any form that contains a control for the field.{br}

To customize a data field from a form that contains a control for the field, perform the following actions:[anchor|#_31812151-e75f-4564-bf01-09ba630dfca1]
#Open the form in the browser and make the control visible on the form.
#On the form title bar, click '''Customization &gt; Inspect Element''' to launch the [HelpRoot_Dev_Customization\CG_Platform_Tools_Inspector|Element Inspector].
#:((({S:Warn}If you need to activate the [HelpRoot_Dev_Customization\CG_Platform_Tools_Inspector|Element Inspector] for a pop-up panel, a dialog box, or another UI element that opens in modal mode and makes the [HelpRoot_Dev_Customization\CG_Platform_Tools_Menu|Customization Menu] unavailable for selection, you can press Control-Alt.
)))
#On the form, click the control to open the [HelpRoot_Dev_Customization\CG_Platform_Tools_Inspector_ElProperiesDlg|Element Properties] dialog box for the control.
#In the dialog box, click '''Actions &gt; Customize Data Fields'''.
#If there is no currently selected customization project and the inspector opens the [HelpRoot_Dev_Customization\CG_Platform_Tools_Menu_SelectCustProjDlg|Select Customization Project Dialog Box], select an existing customization project or create a new one. (See [HelpRoot_Dev_Customization\CG_GL_Projects_Starting_Selecting|To Select an Existing Project] and [HelpRoot_Dev_Customization\CG_GL_Projects_Starting_Creating|To Create a New Project] for details.)
#:If the customization project does not contain a ''DAC'' item for the data access class, the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor] adds the item to the project to keep the changes in the database. The DAC is opened in the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_DataClassEditor|Data Class Editor], and the needed field is added to list of customized fields of the DAC.
#In the list of customized fields of the DAC, click the name of the field to be customized.
 Now you can start the customization of the field on the DAC level.{br}

The Data Class editor shows the custom and original attributes of the field in the work area, and you can use the following objects:[anchor|#_6aecb648-c52a-4b78-a30a-bcdcdc360c90]
*The '''Customize Attributes''' text area: Use this area to define the custom attributes of the field.
*A drop-down list that is visible for only existing customized fields of the data access class: In this list, select one of the following ways of applying the custom attributes to the field:
**''Keep Original'': The original attributes remain on the field until you select another option in this box.
**''Replace Original'': The original attributes of the field are replaced with the custom attributes specified in the '''Customize Attributes''' text area.
**''Append to Original'': The custom attributes are added to the end of the list of the original attributes of the data field. If you use this option, make sure you do not duplicate the attributes of the field.
*The '''Selector Columns''' toolbar action, which is available for only the fields that are selectors: Use this action to open the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_DataClassEditor_SelectorDlg|Customize Selector Columns] dialog box, in which you can modify the columns in the selector table.
*The '''Edit Attributes''' toolbar action, which is unavailable for a custom field: Invoke this action to change the values of parameters for the existing original attributes of the selected field.
{br}

When you click '''Save''' on the editor toolbar, the editor updates the ''DAC'' item in the database.
==To Start the Customization of a Field from the Screen Editor==
If you customize a form by using the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_LayoutEditor|Screen Editor], you may need to change the attributes a data field to change the appearance or behavior of an appropriate control on the form. If the control node is selected in the Control Tree, you can open the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_DataClassEditor|Data Class] editor for the field immediately from the Screen Editor. To do this, perform the following actions:[anchor|#ol_e5h_3x2_hq]
#Click the '''Attributes''' tab item.
#On the tab item, click '''Customize Attributes'''.
If the ''DAC'' item for the data access class that contains the field declaration is absent in the customization project, the Acumatica Customization             Platform creates an appropriate item and saves it in the database. Then the platform opens the item in the Data Class editor, and you can customize the attributes of the field.]]></column>
			<column name="PlainText"><![CDATA[To Customize a Field on the DAC Level If an attribute is added to a field declaration within a data access class (DAC), the common       business logic of this attribute is applied to each data record of this type for each graph       that uses this class. Therefore, if multiple  Acumatica ERP forms contain controls for the same field, a change to an attribute of the field in the DAC       modifies the behavior of these controls for the field on all forms. You can use the  Data Class Editor to customize the       attributes of an existing data field in the DAC and to store the changes in the customization       project as a  DAC  item. Because the goal of the customization of a field on the DAC       level is to change the behavior or appearance of controls for the field on all forms, you       start the customization of a data field from any form that contains a control for the       field. To customize a data field from a form that contains a control for the field, perform the       following actions: Open the form in the browser and make the control visible on the form. On the form title bar, click  Customization > Inspect Element  to launch the  Element Inspector. If you             need to activate the  Element Inspector for a pop-up panel,             a dialog box, or another UI element that opens in modal mode and makes the  Customization Menu unavailable for selection, you can press             Control-Alt. On the form, click the control to open the  Element Properties Element Properties dialog           box for the control. In the dialog box, click  Actions > Customize Data Fields . If there is no currently selected customization project and the inspector opens the              Select Customization Project Dialog Box, select an existing           customization project or create a new one. (See  To Select an Existing Project and  To Create a New Project for details.) If the customization             project does not contain a  DAC  item for the data access class, the   Customization Project                         Editor adds the item to the project to keep the             changes in the database. The DAC is opened in the  Data Class Editor, and the needed field is added             to list of customized fields of the DAC. In the list of customized fields of the DAC, click the name of the field to be           customized.  Now you can start the customization of the field on the DAC level. The Data Class editor shows the custom and original attributes of the field in the work area,       and you can use the following objects: The  Customize Attributes  text area: Use this area to define the           custom attributes of the field. A drop-down list that is visible for only existing customized fields of the data access           class: In this list, select one of the following ways of applying the custom attributes to           the field: Keep Original : The original attributes remain on the field until you select               another option in this box. Replace Original : The original attributes of the field are replaced with the               custom attributes specified in the  Customize Attributes  text               area. Append to Original : The custom attributes are added to the end of the list of               the original attributes of the data field. If you use this option, make sure you do               not duplicate the attributes of the field. The  Selector Columns  toolbar action, which is available for only           the fields that are selectors: Use this action to open the  Customize Selector             Columns Customize Selector Columns dialog box, in which you can modify the columns in the selector           table. The  Edit Attributes  toolbar action, which is unavailable for a           custom field: Invoke this action to change the values of parameters for the existing           original attributes of the selected field. When you click  Save  on the editor toolbar, the editor updates the          DAC  item in the database. To Start the Customization of a Field from the Screen Editor If you customize a form by using the  Screen Editor, you may need to change the attributes         a data field to change the appearance or behavior of an appropriate control on the form. If         the control node is selected in the Control Tree, you can open the  Data Class Data Class editor for the         field immediately from the Screen Editor. To do this, perform the following actions: Click the  Attributes  tab item. On the tab item, click  Customize Attributes . If the  DAC  item for the data access class that contains the field declaration is         absent in the customization project, the  Acumatica Customization             Platform creates an appropriate item and saves it in the database. Then the platform opens the         item in the Data Class editor, and you can customize the attributes of the field. ]]></column>
		</row>
		<row PageID="5414444d-dd54-41cb-a3ec-eaed76668cdf" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="ca5890c6-c6c6-9ef9-4f37-4dfdd71fc152" RecordSourceID="22377">
			<column name="Content"><![CDATA[
If an attribute is added to a field declaration within a graph, the common business logic of this attribute is applied to each data record of this type on the graph level for only this graph. Therefore, if multiple Acumatica ERP forms contain controls for the same field, a change of an attribute of the field within the graph modifies the behavior of a single control for the field on only the form for which the graph provides business logic.{br}

Because the goal of customizing a field on the graph level is to change the behavior or appearance of a specific control for the field on a specific form, you start the customization of a data field from the form.{br}

To customize a field on the graph level, perform the following actions:[anchor|#_31812151-e75f-4564-bf01-09ba630dfca1]
#Open the form in the browser and make the control visible on the form.
#On the form title bar, click '''Customization &gt; Inspect Element''' to launch the [HelpRoot_Dev_Customization\CG_Platform_Tools_Inspector|Element Inspector].
#:((({S:Warn}If you need to activate the [HelpRoot_Dev_Customization\CG_Platform_Tools_Inspector|Element Inspector] for a pop-up panel, a dialog box, or another UI element that opens in modal mode and makes the [HelpRoot_Dev_Customization\CG_Platform_Tools_Menu|Customization Menu] unavailable for selection, you can press Control-Alt.
)))
#On the form, click the control to open the [HelpRoot_Dev_Customization\CG_Platform_Tools_Inspector_ElProperiesDlg|Element Properties] dialog box for the control.
#In the dialog box, click '''Actions &gt; Customize'''.
#If there is no currently selected customization project and the inspector opens the [HelpRoot_Dev_Customization\CG_Platform_Tools_Menu_SelectCustProjDlg|Select Customization Project Dialog Box], select an existing customization project or create a new one. (See [HelpRoot_Dev_Customization\CG_GL_Projects_Starting_Selecting|To Select an Existing Project] or [HelpRoot_Dev_Customization\CG_GL_Projects_Starting_Creating|To Create a New Project] for details.)
#:If the customization project does not contain a changeset for the form, the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor] adds to the project a ''Page'' item for the form, to keep the changeset to the ASPX code of the form in the database. The container of the control is opened in the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_LayoutEditor|Screen Editor], and the control is selected in the Control Tree of the editor.
#Click the '''Attributes''' tab item, which is used to review and customize the attributes of the DAC field that is bound to the control currently selected in the Control Tree.
#Click '''Override On Screen Level''' to create in the graph extension the code template, which includes the original attributes of the field and the <tt>DACName&#95;FieldPropertyName&#95;CacheAttached()</tt> event handler, which replaces the attributes within the graph.
#:If the customization project does not contain an extension for the graph, the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor] adds to the project a ''Code'' item for the graph extension, to keep the code in the database. Then the Acumatica Customization             Platform opens the ''Code'' item in the Code Editor, and you can start the customization of the field on the graph level.
{br}

In the graph extension, you can define the field attributes as you need to. However you can use one of the following approaches to customize the attributes of a field on the graph level:[anchor|#_733f5a69-e083-49cc-bb18-126767aa21b3]
*Define a new set of custom attributes to replace the original attributes of the field (as in the created template).
*Use the <tt>PXCustomizeBaseAttribute</tt>, <tt>PXMergeAttributes</tt>, <tt>PXRemoveBaseAttribute</tt>, and <tt>PXCustomizeSelectorColumns</tt> attributes to customize the original attributes of a field instead of replacing it with custom ones.
{br}

We recommend that you use the second approach, which is described in [HelpRoot_Dev_Customization\CG_Platform_Framework_CS_DACExt_FieldAttributes|Customization of Field Attributes in DAC Extensions].{br}

When you click '''Save''' on the Code editor toolbar, the editor updates the ''Code'' item in the database.((({S:Warn}You can develop the customization code in the Code Editor. However we recommend that you develop the code in Microsoft Visual Studio (as described in [HelpRoot_Dev_Customization\CG_Platform_Studio|Integrating the Project Editor with Microsoft Visual Studio]) and use the editor for either minor code corrections or the insertion of completed portions of code.
)))]]></column>
			<column name="PlainText"><![CDATA[To Customize a Field on the Graph Level If an attribute is added to a field declaration within a graph, the common business logic of       this attribute is applied to each data record of this type on the graph level for only this       graph. Therefore, if multiple  Acumatica ERP forms contain controls for the same field, a change of an attribute of the field within the       graph modifies the behavior of a single control for the field on only the form for which the       graph provides business logic. Because the goal of customizing a field on the graph level is to change the behavior or       appearance of a specific control for the field on a specific form, you start the customization       of a data field from the form. To customize a field on the graph level, perform the following actions: Open the form in the browser and make the control visible on the form. On the form title bar, click  Customization > Inspect Element  to launch the  Element Inspector. If you             need to activate the  Element Inspector for a pop-up panel,             a dialog box, or another UI element that opens in modal mode and makes the  Customization Menu unavailable for selection, you can press             Control-Alt. On the form, click the control to open the  Element Properties Element Properties dialog           box for the control. In the dialog box, click  Actions > Customize . If there is no currently selected customization project and the inspector opens the              Select Customization Project Dialog Box, select an existing           customization project or create a new one. (See   To Select an Existing Project or  To Create a New Project for details.) If the customization             project does not contain a changeset for the form, the   Customization Project                         Editor adds to the project a  Page  item for the             form, to keep the changeset to the ASPX code of the form in the database. The container             of the control is opened in the  Screen Editor, and the control is selected in the Control Tree of the editor. Click the  Attributes  tab item, which is used to review and           customize the attributes of the DAC field that is bound to the control currently selected           in the Control Tree. Click  Override On Screen Level  to create in the graph extension           the code template, which includes the original attributes of the field and the              DACName_FieldPropertyName_CacheAttached()  event handler, which           replaces the attributes within the graph. If the customization project does not contain             an extension for the graph, the   Customization Project                         Editor adds to the             project a  Code  item for the graph extension, to keep the code in the database.             Then the  Acumatica Customization             Platform opens the  Code  item in the Code Editor, and you can start the customization of             the field on the graph level. In the graph extension, you can define the field attributes as you need to. However you can       use one of the following approaches to customize the attributes of a field on the graph         level: Define a new set of custom attributes to replace the original attributes of the field           (as in the created template). Use the  PXCustomizeBaseAttribute ,              PXMergeAttributes ,  PXRemoveBaseAttribute , and              PXCustomizeSelectorColumns  attributes to customize the original           attributes of a field instead of replacing it with custom ones. We recommend that you use the second approach, which is described in  Customization of Field Attributes in DAC Extensions. When you click  Save  on the Code editor toolbar, the editor updates the          Code  item in the database. You can develop the customization code in the Code         Editor. However we recommend that you develop the code in Microsoft Visual Studio (as         described in  Integrating the Project Editor with Microsoft Visual Studio) and use the editor for either minor         code corrections or the insertion of completed portions of code. ]]></column>
		</row>
		<row PageID="08861773-9b09-4212-a581-5f8db3d36a26" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="52283048-3c18-b393-170b-71d4ee80b489" RecordSourceID="22377">
			<column name="Content"><![CDATA[
When a user creates a new record of a business entity through a form of Acumatica ERP, you might need to set a default value for a data field. You use the <tt>PXDefault</tt> attribute for a data field to set a constant as the default value, or you provide a BQL query to obtain a value from the database or data records from the cache. The default value is assigned to the field when a data record holding this field is inserted into the cache.((({S:Warn}If the default value is taken from a field that can be auto-generated by the database (such as an ID), you should use the <tt>PXDBDefault</tt> attribute instead of the <tt>PXDefault</tt> attribute.
))){br}

You can set a default value for an original or custom text field on the DAC and graph levels. The following sections provide detailed information:[anchor|#ul_odd_xrt_fq]
*[[#_1a95ac32-1599-4105-a9b4-41389790801d|To Set a Default Value for an Original Field on the DAC Level]
*[[#_85b6159e-d4e9-4e86-8fad-8f444b5999ee|To Set a Default Value for an Original Field on the Graph Level]
*[[#_1e21988c-9e40-4800-a52e-6447655322e2|To Set a Default Value for a Custom Field on the DAC Level]
[anchor|#_1a95ac32-1599-4105-a9b4-41389790801d]
==To Set a Default Value for an Original Field on the DAC Level==
To set a default value for a field used on multiple forms, you should customize the original attributes of the field in the data access class extension. To do this, perform the following actions:[anchor|#ol_acp_yq1_rw]
#Open the field in the Data Class Editor, as described in [HelpRoot_Dev_Customization\CG_GL_BL_DataField_TypeLevel|To Customize a Field on the DAC Level].
#In the '''Customize Attributes''' box, select ''Append to Original''.
#In the edit area below the box, add the <tt>PXDefault</tt> attribute and define a default value for the attribute.
#Click '''Save''' on the editor toolbar to save your changes to the customization project.
[anchor|#_85b6159e-d4e9-4e86-8fad-8f444b5999ee]
==To Set a Default Value for an Original Field on the Graph Level==
To set a default value for a field used on a single form, you should customize the original attributes of the field in the graph extension. To do this, perform the following actions:[anchor|#_aefabfcf-390a-49e9-bf85-ec65cae370f1]
#Create the code template that includes the original attributes of the field and the <tt>DACName&#95;FieldPropertyName&#95;CacheAttached()</tt> event handler, which replaces the attributes within the graph, as described in [HelpRoot_Dev_Customization\CG_GL_BL_DataField_CacheLevel|To Customize a Field on the Graph Level].
#By using the Code editor, replace the original attributes in the template, as shown in the following code snippet.{{{{[PXMergeAttributes(Method = MergeMethod.Append)]
[PXDefault(false, PersistingCheck = PXPersistingCheck.Nothing)]
protected void DACName_FieldPropertyName_CacheAttached(PXCache cache)
{
}
}}}}
#Click '''Save''' on the editor toolbar to save your changes to the customization project.
[anchor|#_1e21988c-9e40-4800-a52e-6447655322e2]
==To Set a Default Value for a Custom Field on the DAC Level==
If you need to set a default value for a custom data field on the DAC level, you add the <tt>PXDefault</tt> attribute and define a default value for the attribute in the edit area of the Data Class editor, as shown in the following screenshot.[anchor|#_db14470c-89b1-464a-bdb2-6d29174e5c0e][anchor|#_005ab781-1ad4-412f-b486-e63de8617519][image:CustomizationPlatform/images/CG_GL_BL_DataField_Default.png|popup|Setting a default value for a custom field|437px]]]></column>
			<column name="PlainText"><![CDATA[To Set a Default Value When a user creates a new record of a business entity through a form of  Acumatica ERP, you might need to set a default value for a data field. You use the          PXDefault  attribute for a data field to set a constant as the default       value, or you provide a BQL query to obtain a value from the database or data records from the       cache. The default value is assigned to the field when a data record holding this field is       inserted into the cache. If the default value is taken from a field that can be         auto-generated by the database (such as an ID), you should use the            PXDBDefault  attribute instead of the  PXDefault          attribute. You can set a default value for an original or custom text field on the DAC and graph levels.       The following sections provide detailed information: To Set a Default Value for an Original Field on the DAC Level To Set a Default Value for an Original Field on the DAC LevelTo Set a Default Value for an Original Field on the Graph Level To Set a Default Value for an Original Field on the Graph LevelTo Set a Default Value for a Custom Field on the DAC Level To Set a Default Value for a Custom Field on the DAC LevelTo Set a Default Value for an Original Field on the DAC Level To set a default value for a field used on multiple forms, you should customize the         original attributes of the field in the data access class extension. To do this, perform the         following actions: Open the field in the Data Class Editor, as described in  To Customize a Field on the DAC Level. In the  Customize Attributes  box, select  Append to               Original . In the edit area below the box, add the  PXDefault  attribute and             define a default value for the attribute. Click  Save  on the editor toolbar to save your changes to the             customization project. To Set a Default Value for an Original Field on the Graph Level To set a default value for a field used on a single form, you should customize the original         attributes of the field in the graph extension. To do this, perform the following           actions: Create the code template that includes the original attributes of the field and the                DACName_FieldPropertyName_CacheAttached()  event handler, which             replaces the attributes within the graph, as described in  To Customize a Field on the Graph Level. By using the Code editor, replace the original attributes in the template, as shown in             the following code             snippet. [PXMergeAttributes(Method = MergeMethod.Append)]
[PXDefault(false, PersistingCheck = PXPersistingCheck.Nothing)]
protected void DACName_FieldPropertyName_CacheAttached(PXCache cache)
{
} Click  Save  on the editor toolbar to save your changes to the             customization project. To Set a Default Value for a Custom Field on the DAC Level If you need to set a default value for a custom data field on the DAC level, you add the            PXDefault  attribute and define a default value for the attribute in the         edit area of the Data Class editor, as shown in the following screenshot. Setting a default value for a custom field ]]></column>
		</row>
		<row PageID="a5d3b509-1967-4589-b33b-fc505993459a" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="b16c6bd8-e59c-10d0-b738-36d9be4554e4" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can change the label for an original data field on the DAC and graph levels. The following sections provide detailed information:[anchor|#ul_odd_xrt_fq]
*[[#_1a95ac32-1599-4105-a9b4-41389790801d|To Change the Label of a Field on the DAC Level]
*[[#_85b6159e-d4e9-4e86-8fad-8f444b5999ee|To Change the Label of a Field on the Graph Level]
[anchor|#_1a95ac32-1599-4105-a9b4-41389790801d]
==To Change the Label of a Field on the DAC Level==
To change the label of a control for a field used on multiple forms, you should customize the <tt>PXUIField</tt> attribute of the field in the data access class extension. To do this, perform the following actions:[anchor|#ol_acp_yq1_rw]
#Open the field in the Data Class Editor, as described in [HelpRoot_Dev_Customization\CG_GL_BL_DataField_TypeLevel|To Customize a Field on the DAC Level].
#In the '''Customize Attributes''' box, select ''Append to Original''.
#In the editor, click '''Edit Attributes''' on the page toolbar.
#In the '''Attribute''' list of the '''Customize Attributes''' dialog box, which opens, click the <tt>PXUIField</tt> attribute to select it.
#In the parameter list, specify a new label for the <tt>DisplayName</tt> parameter, as the screenshot below shows.
#Click '''OK''' to exit the dialog box.
#Click '''Save''' on the editor toolbar to save your changes to the customization project.[anchor|#_52fd919d-476f-409c-ad4a-128d9fda6a5b][image:CustomizationPlatform/images/CG_GL_BL_DataField_Name.png|popup|Changing the display label of a field|437px]
As a result, the editor adds the following attribute for the field to the DAC extension.{{{{[PXCustomizeBaseAttribute(typeof(PXUIFieldAttribute), "DisplayName", "NewName")]
}}}}[anchor|#_85b6159e-d4e9-4e86-8fad-8f444b5999ee]
==To Change the Label of a Field on the Graph Level==
To change the label of a field for a single form, you should customize the <tt>PXUIField</tt> attribute of the field in the graph extension. To do this, perform the following actions:[anchor|#_aefabfcf-390a-49e9-bf85-ec65cae370f1]
#Create the code template that includes the original attributes of the field and the <tt>DACName&#95;FieldPropertyName&#95;CacheAttached()</tt> event handler, which replaces the attributes within the graph, as described in [HelpRoot_Dev_Customization\CG_GL_BL_DataField_CacheLevel|To Customize a Field on the Graph Level].
#By using the Code editor, replace the original attributes in the template, as shown in the following code snippet.{{{{[PXCustomizeBaseAttribute(typeof(PXUIFieldAttribute), "DisplayName", "NewName")]
protected void DACName_FieldPropertyName_CacheAttached(PXCache cache)
{
}
}}}}
#Click '''Save''' on the editor toolbar to save your changes to the customization project.
]]></column>
			<column name="PlainText"><![CDATA[To Change the Label of a Field You can change the label for an original data field on the DAC and graph levels. The following    sections provide detailed information: To Change the Label of a Field on the DAC Level To Change the Label of a Field on the DAC LevelTo Change the Label of a Field on the Graph Level To Change the Label of a Field on the Graph LevelTo Change the Label of a Field on the DAC Level To change the label of a control for a field used on multiple forms, you should customize the            PXUIField  attribute of the field in the data access class extension. To         do this, perform the following actions: Open the field in the Data Class Editor, as described in  To Customize a Field on the DAC Level. In the  Customize Attributes  box, select  Append to               Original . In the editor, click  Edit Attributes  on the page toolbar. In the  Attribute  list of the  Customize               Attributes  dialog box, which opens, click the  PXUIField              attribute to select it. In the parameter list, specify a new label for the  DisplayName              parameter, as the screenshot below shows. Click  OK  to exit the dialog box. Click  Save  on the editor toolbar to save your changes to the             customization project. Changing the display label of a field As a result, the editor adds the following attribute for the field to the DAC         extension. [PXCustomizeBaseAttribute(typeof(PXUIFieldAttribute), "DisplayName", "NewName")] To Change the Label of a Field on the Graph Level To change the label of a field for a single form, you should customize the       PXUIField  attribute of the field in the graph extension. To do this, perform     the following actions: Create the code template that includes the original attributes of the field and the                DACName_FieldPropertyName_CacheAttached()  event handler, which             replaces the attributes within the graph, as described in  To Customize a Field on the Graph Level. By using the Code editor, replace the original attributes in the template, as shown in the       following code       snippet. [PXCustomizeBaseAttribute(typeof(PXUIFieldAttribute), "DisplayName", "NewName")]
protected void DACName_FieldPropertyName_CacheAttached(PXCache cache)
{
} Click  Save  on the editor toolbar to save your changes to the             customization project. ]]></column>
		</row>
		<row PageID="97f5b92f-906a-4edd-ae38-f5605e83d845" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="fed3f213-7fa6-fb9a-cd79-cf356846be18" RecordSourceID="22377">
			<column name="Content"><![CDATA[
If a field is mandatory for input, the user has to specify a value for the field before saving the record that contains the field. To make a field mandatory for input, you use the <tt>PXDefault</tt> attribute without parameters. A mandatory field is marked by an asterisk (&#42;) on the form to cue the reader that a value must be specified for it. To mark a control for a mandatory field with an asterisk, you set the <tt>Required</tt> parameter of the <tt>PXUIField</tt> attribute to ''true''.{br}

You can make an original or custom field mandatory and mark a control for the field with an asterisk on the DAC and graph levels. The following sections provide detailed information:[anchor|#ul_odd_xrt_fq]
*[[#_1a95ac32-1599-4105-a9b4-41389790801d|To Make an Original Field Mandatory on the DAC Level]
*[[#_1e21988c-9e40-4800-a52e-6447655322e2|To Make a Custom Field Mandatory on the DAC Level]
*[[#_85b6159e-d4e9-4e86-8fad-8f444b5999ee|To Make a Field Mandatory on the Graph Level]
[anchor|#_1a95ac32-1599-4105-a9b4-41389790801d]
==To Make an Original Field Mandatory on the DAC Level==
To make an original field mandatory and mark the control for the field with an asterisk on multiple forms with an asterisk, you should customize the original attributes of the field in the data access class extension. To do this, perform the following actions:[anchor|#ol_acp_yq1_rw]
#Open the field in the Data Class Editor, as described in [HelpRoot_Dev_Customization\CG_GL_BL_DataField_TypeLevel|To Customize a Field on the DAC Level].
#In the '''Customize Attributes''' box, select ''Append to Original''.
#In the edit area below the box, add the <tt>PXDefault</tt> attribute without parameters.
#In the editor, click '''Edit Attributes''' on the page toolbar.
#In the '''Attribute''' list of the '''Customize Attributes''' dialog box, which opens, click the <tt>PXUIField</tt> attribute to select it.
#In the parameter list, set the <tt>Required</tt> parameter to ''True''.
#Click '''OK''' to exit the dialog box.
#:The edit area of the editor must contain the following code:{{{{[PXDefault]
[PXCustomizeBaseAttribute(typeof(PXUIFieldAttribute), "Required", true)]
}}}}
#Click '''Save''' on the editor toolbar to save your changes to the customization project.
[anchor|#_1e21988c-9e40-4800-a52e-6447655322e2]
==To Make a Custom Field Mandatory on the DAC Level==
If you need to set a default value for a custom data field, you add the <tt>PXDefault</tt> attribute without parameters and set the <tt>Required</tt> parameter of the <tt>PXUIField</tt> attribute to ''True'', as in the following code snippet.{{{{[PXDefault]
[PXUIField(..., Required = true)]
}}}}[anchor|#_85b6159e-d4e9-4e86-8fad-8f444b5999ee]
==To Make a Field Mandatory on the Graph Level==
To make a field mandatory and mark the field with an asterisk for the field control used on a single form, you should customize the field attributes in the graph extension. To do this, perform the following actions:[anchor|#_aefabfcf-390a-49e9-bf85-ec65cae370f1]
#Create the code template that includes the field attributes and the <tt>DACName&#95;FieldPropertyName&#95;CacheAttached()</tt> event handler, which replaces the attributes within the graph, as described in [HelpRoot_Dev_Customization\CG_GL_BL_DataField_CacheLevel|To Customize a Field on the Graph Level].
#By using the Code editor, replace the original attributes in the template, as shown in the following code snippet.{{{{[PXDefault]
[PXCustomizeBaseAttribute(typeof(PXUIFieldAttribute), "Required", true)]
protected void DACName_FieldPropertyName_CacheAttached(PXCache cache)
{
}
}}}}
#Click '''Save''' on the editor toolbar to save your changes to the customization project.
]]></column>
			<column name="PlainText"><![CDATA[To Make a Field Mandatory If a field is mandatory for input, the user has to specify a value for the field before saving       the record that contains the field. To make a field mandatory for input, you use the          PXDefault  attribute without parameters. A mandatory field is marked by an       asterisk (*) on the form to cue the reader that a value must be specified for it. To mark a       control for a mandatory field with an asterisk, you set the  Required        parameter of the  PXUIField  attribute to  true . You can make an original or custom field mandatory and mark a control for the field with an    asterisk on the DAC and graph levels. The following sections provide detailed information: To Make an Original Field Mandatory on the DAC Level To Make an Original Field Mandatory on the DAC LevelTo Make a Custom Field Mandatory on the DAC Level To Make a Custom Field Mandatory on the DAC LevelTo Make a Field Mandatory on the Graph Level To Make a Field Mandatory on the Graph LevelTo Make an Original Field Mandatory on the DAC Level To make an original field mandatory and mark the control for the field with an asterisk on         multiple forms with an asterisk, you should customize the original attributes of the field         in the data access class extension. To do this, perform the following actions: Open the field in the Data Class Editor, as described in  To Customize a Field on the DAC Level. In the  Customize Attributes  box, select  Append to               Original . In the edit area below the box, add the  PXDefault  attribute without             parameters. In the editor, click  Edit Attributes  on the page toolbar. In the  Attribute  list of the  Customize             Attributes  dialog box, which opens, click the  PXUIField              attribute to select it. In the parameter list, set the  Required  parameter to              True . Click  OK  to exit the dialog box. The edit area of the editor               must contain the following               code: [PXDefault]
[PXCustomizeBaseAttribute(typeof(PXUIFieldAttribute), "Required", true)] Click  Save  on the editor toolbar to save your changes to the             customization project. To Make a Custom Field Mandatory on the DAC Level If you need to set a default value for a custom data field, you add the            PXDefault  attribute without parameters and set the            Required  parameter of the  PXUIField  attribute to            True , as in the following code         snippet. [PXDefault]
[PXUIField(..., Required = true)] To Make a Field Mandatory on the Graph Level To make a field mandatory and mark the field with an asterisk for the field control used on a         single form, you should customize the field attributes in the graph extension. To do this,         perform the following actions: Create the code template that includes the field attributes and the                DACName_FieldPropertyName_CacheAttached()  event handler, which             replaces the attributes within the graph, as described in  To Customize a Field on the Graph Level. By using the Code editor, replace the original attributes in the template, as shown in             the following code             snippet. [PXDefault]
[PXCustomizeBaseAttribute(typeof(PXUIFieldAttribute), "Required", true)]
protected void DACName_FieldPropertyName_CacheAttached(PXCache cache)
{
} Click  Save  on the editor toolbar to save your changes to the             customization project. ]]></column>
		</row>
		<row PageID="b20fc284-9627-48bf-9972-a90bee8dabef" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="f01dfd7e-f11a-7177-a1be-4a52121599d1" RecordSourceID="22377">
			<column name="Content"><![CDATA[
For a selector field, you use the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_DataClassEditor|Data Class Editor] to add, delete, and sort the columns of the selector table and store the changes in the customization project as a ''DAC'' item.{br}

You can customize the table of an original selector field on the data access class (DAC) and graph levels. The following sections provide detailed information:[anchor|#ul_odd_xrt_fq]
*[[#_1a95ac32-1599-4105-a9b4-41389790801d|To Customize the Table of an Original Selector Field on the DAC Level]
*[[#_85b6159e-d4e9-4e86-8fad-8f444b5999ee|To Customize the Table of an Original Selector Field on the Graph Level]
[anchor|#_1a95ac32-1599-4105-a9b4-41389790801d]
==To Customize the Table of an Original Selector Field on the DAC Level==
To customize the table of an original selector field for all controls for the field, you should customize the <tt>PXSelector</tt> attribute of the field in the data access class extension. To do this, perform the following actions:[anchor|#ol_acp_yq1_rw]
#Open the field in the Data Class Editor, as described in [HelpRoot_Dev_Customization\CG_GL_BL_DataField_TypeLevel|To Customize a Field on the DAC Level].
#In the editor, click '''Selector Columns''' on the page toolbar.
#In the '''Customize Selector Columns''' dialog box, which opens, make the required changes.
#:You can use this dialog box to add new columns to the selector table and to reorder columns in the table. (See [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_DataClassEditor_SelectorDlg|Customize Selector Columns Dialog Box] for details.)
#Click '''OK''' to add the <tt>PXCustomizeSelectorColumns</tt> attribute for the field in the edit area of the Data Class editor based on your changes, as shown in the following screenshot.[anchor|#_4aa05d0d-a2be-4f6e-9cac-12ad4bf4b652][image:CustomizationPlatform/images/CG_GL_BL_DataField_Selector_01.png|popup|Viewing the <tt>PXCustomizeSelectorColumns</tt> attribute in the Data Class editor|443px]
#Click '''Save''' on the editor toolbar to save your changes to the customization project.
[anchor|#_85b6159e-d4e9-4e86-8fad-8f444b5999ee]
==To Customize the Table of an Original Selector Field on the Graph Level==
To customize the selector table for the selector control on a single form, you should customize the <tt>PXSelector</tt> attribute of the appropriate field in the graph extension. To do this, perform the following actions:[anchor|#_aefabfcf-390a-49e9-bf85-ec65cae370f1]
#Create the code template that includes the field attributes and the <tt>DACName&#95;FieldPropertyName&#95;CacheAttached()</tt> event handler that replaces the attributes within the graph, as described in [HelpRoot_Dev_Customization\CG_GL_BL_DataField_CacheLevel|To Customize a Field on the Graph Level].
#By using the Code editor, replace the original attributes in the template, as shown in the following code snippet.{{{{[PXCustomizeSelectorColumns(&lt;NEW CONTENT OF THE PXSELECTOR ATTRIBUTE&gt;)]
protected void DACName_FieldPropertyName_CacheAttached(PXCache cache)
{
}
}}}}
#Click '''Save''' on the editor toolbar to save your changes to the customization project.
]]></column>
			<column name="PlainText"><![CDATA[To Customize the Table of a Selector Field For a selector field, you use the  Data Class Editor    to add, delete, and sort the columns of the selector table and store the changes in the    customization project as a  DAC  item. You can customize the table of an original selector field on the data access class (DAC) and       graph levels. The following sections provide detailed information: To Customize the Table of an Original Selector Field on the DAC Level To Customize the Table of an Original Selector Field on the DAC LevelTo Customize the Table of an Original Selector Field on the Graph Level To Customize the Table of an Original Selector Field on the Graph LevelTo Customize the Table of an Original Selector Field on the DAC Level To customize the table of an original selector field for all controls for the field, you         should customize the  PXSelector  attribute of the field in the data access         class extension. To do this, perform the following actions: Open the field in the Data Class Editor, as described in  To Customize a Field on the DAC Level. In the editor, click  Selector Columns  on the page toolbar. In the  Customize Selector Columns  dialog box, which opens, make             the required changes. You can use this dialog box to add new columns to the selector               table and to reorder columns in the table. (See  Customize Selector Columns Dialog Box for             details.) Click  OK  to add the                PXCustomizeSelectorColumns  attribute for the field in the edit area             of the Data Class editor based on your changes, as shown in the following               screenshot. Viewing the  PXCustomizeSelectorColumns  attribute in the Data                 Class editor Click  Save  on the editor toolbar to save your changes to the             customization project. To Customize the Table of an Original Selector Field on the Graph Level To customize the selector table for the selector control on a single form, you should     customize the  PXSelector  attribute of the appropriate field in the graph     extension. To do this, perform the following actions: Create the code template that includes the field attributes and the                DACName_FieldPropertyName_CacheAttached()  event handler that             replaces the attributes within the graph, as described in  To Customize a Field on the Graph Level. By using the Code editor, replace the original attributes in the template, as shown in the       following code       snippet. [PXCustomizeSelectorColumns(<NEW CONTENT OF THE PXSELECTOR ATTRIBUTE>)]
protected void DACName_FieldPropertyName_CacheAttached(PXCache cache)
{
} Click  Save  on the editor toolbar to save your changes to the             customization project. ]]></column>
		</row>
		<row PageID="31047724-a1e4-4fce-926b-806bdd130329" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="3e77f7ba-f9b2-e88d-c1b3-e8ccdaf197bd" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can add an event handler for an original or custom field on the graph and DAC levels. The following sections provide detailed information:[anchor|#ul_odd_xrt_fq]
*[[#_85b6159e-d4e9-4e86-8fad-8f444b5999ee|To Add an Event Handler for a Field on the Graph Level]
*[[#_1a95ac32-1599-4105-a9b4-41389790801d|To Add an Event Handler for a Field on the DAC Level]
[anchor|#_85b6159e-d4e9-4e86-8fad-8f444b5999ee]
==To Add an Event Handler for a Field on the Graph Level==
To add an event handler for a field control used on a single form, perform the following actions:[anchor|#_aefabfcf-390a-49e9-bf85-ec65cae370f1]
#Open the form in the browser and make the control visible on the form.
#On the form title bar, click '''Customization &gt; Inspect Element''' to launch the [HelpRoot_Dev_Customization\CG_Platform_Tools_Inspector|Element Inspector].
#:((({S:Warn}If you need to activate the [HelpRoot_Dev_Customization\CG_Platform_Tools_Inspector|Element Inspector] for a pop-up panel, a dialog box, or another UI element that opens in modal mode and makes the [HelpRoot_Dev_Customization\CG_Platform_Tools_Menu|Customization Menu] unavailable for selection, you can press Control-Alt.
)))
#On the form, click the control for which you are adding an event handler to open the [HelpRoot_Dev_Customization\CG_Platform_Tools_Inspector_ElProperiesDlg|Element Properties] dialog box for the control.
#In the dialog box, click '''Actions &gt; Customize'''.
#If there is no currently selected customization project and the inspector opens the [HelpRoot_Dev_Customization\CG_Platform_Tools_Menu_SelectCustProjDlg|Select Customization Project Dialog Box], select an existing customization project or create a new one. (See [HelpRoot_Dev_Customization\CG_GL_Projects_Starting_Selecting|To Select an Existing Project] or [HelpRoot_Dev_Customization\CG_GL_Projects_Starting_Creating|To Create a New Project] for details.)
#:If the customization project does not contain a changeset for the form, the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor] adds a ''Page'' item for the form to the project to keep the changeset to ASPX code of the form in the database. The container of the control is opened in the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_LayoutEditor|Screen Editor], and the control is selected in the Control Tree of the editor.
#If you need to provide additional business logic to process a control value immediately after the value is changed, follow the instructions described in [HelpRoot_Dev_Customization\CG_GL_BL_Graph_AddEventHandler|To Add an Event Handler]. If you need to override the existing business logic for the field, follow the instructions described in [HelpRoot_Dev_Customization\CG_GL_BL_EventHandler_OverrideEvent|To Override an Event Handler].
[anchor|#_1a95ac32-1599-4105-a9b4-41389790801d]
==To Add an Event Handler for a Field on the DAC Level==
Typically, you develop an event handler to provide the business logic for a field on the graph level. However if you need to add the same business logic for a field used on multiple forms, you add the event handler on the DAC level as follow:[anchor|#_2bc01abf-1e08-4374-bbf7-849308d76415]
#Create a custom attribute, as described in Lesson 8 of the [http://acumaticaopenuniversity.com/wp-content/uploads/2016/10/T200_AcumaticaFrameworkFundamentals_6_0.pdf|T200 Acumatica Framework Fundamentals] course.
#Add the needed event handler to the custom attribute.
#Add the custom attribute to the field, as described in [HelpRoot_Dev_Customization\CG_GL_BL_DataField_TypeLevel|To Customize a Field on the DAC Level].
]]></column>
			<column name="PlainText"><![CDATA[To Add an Event Handler for a Field You can add an event handler for an original or custom field on the graph and DAC levels. The       following sections provide detailed information: To Add an Event Handler for a Field on the Graph Level To Add an Event Handler for a Field on the Graph LevelTo Add an Event Handler for a Field on the DAC Level To Add an Event Handler for a Field on the DAC LevelTo Add an Event Handler for a Field on the Graph Level To add an event handler for a field control used on a single form, perform the following           actions: Open the form in the browser and make the control visible on the form. On the form title bar, click  Customization > Inspect Element  to launch the  Element Inspector. If               you need to activate the  Element Inspector for a pop-up               panel, a dialog box, or another UI element that opens in modal mode and makes the                Customization Menu unavailable for selection, you can press               Control-Alt. On the form, click the control for which you are adding an event handler to open the                Element Properties Element Properties             dialog box for the control. In the dialog box, click  Actions > Customize . If there is no currently selected customization project and the inspector opens the                Select Customization Project Dialog Box, select an existing             customization project or create a new one. (See  To Select an Existing Project or  To Create a New Project for details.) If the customization               project does not contain a changeset for the form, the   Customization Project                         Editor adds a  Page  item for the form to the               project to keep the changeset to ASPX code of the form in the database. The container               of the control is opened in the  Screen Editor, and the control is selected in               the Control Tree of the editor. If you need to provide additional business logic to process a control value             immediately after the value is changed, follow the instructions described in  To Add an Event Handler. If you need to override the existing             business logic for the field, follow the instructions described in  To Override an Event Handler. To Add an Event Handler for a Field on the DAC Level Typically, you develop an event handler to provide the business logic for a field on the graph         level. However if you need to add the same business logic for a field used on multiple         forms, you add the event handler on the DAC level as follow: Create a custom attribute, as described in Lesson 8 of the  T200 Acumatica Framework Fundamentals T200 Acumatica Framework Fundamentals             course. Add the needed event handler to the custom attribute. Add the custom attribute to the field, as described in  To Customize a Field on the DAC Level. ]]></column>
		</row>
		<row PageID="ac951f15-9c6c-4b58-9a24-6f04a8084df7" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="e307d011-f3a0-c465-8661-f81957a71e20" RecordSourceID="22377">
			<column name="Content"><![CDATA[
 Acumatica ERP 5.3 supports locale-specific settings and the translation of the strings used on the application interface. Starting with Version 6, Acumatica ERP also provides the functionality to translate user input to multiple languages and store translations in the database. (See [HelpRoot_Administration\SM__CON_Locales_and_Languages|Locales and Languages] for details.){br}

For example, if there are multiple active system locales in an instance of Acumatica ERP, and a text field on a form is declared as a multi-language field, the field control displays the value for the current locale. If the database does not contain a value for the current locale, the control displays the value for the default system locale.{br}

To declare a text field as a multi-language one, in the data access class, you should use the <tt>PXDBLocalizableString</tt> attribute instead of <tt>PXDBString</tt> or <tt>PXDBText</tt>. The <tt>PXDBText</tt> attribute has to be replaced with the <tt>PXDBLocalizableString</tt> one without any length specified.((({S:Warn}[anchor|#_cb527d4a-ddb6-4734-99c7-854f0900a0d8]
*Please do not confuse the <tt>PXDBLocalizableString</tt> attribute with <tt>PXDBLocalString</tt>. The <tt>PXDBLocalString</tt> attribute is deprecated and should not be used in the customization code.
*By default, starting with Acumatica ERP 6, the system supports multilingual user input for some boxes listed in [HelpRoot_Administration\SM__CON_Boxes_MultiLanguage|Boxes that Have Multi-Language Support]. If the <tt>PXDBString</tt> attribute for a box from the list was customized in the earlier versions, after you upgrade to Acumatica ERP 6, the box will not have multi-language support. To resolve the issue, we recommend that you replace the <tt>PXDBString</tt> attribute with <tt>PXDBLocalizableString</tt> in the customization code.
))){br}

You can provide multi-language support for an original or custom text field. The following sections provide detailed information:[anchor|#ul_odd_xrt_fq]
*[[#_1a95ac32-1599-4105-a9b4-41389790801d|To Provide Multi-Language Support for an Original Field on the DAC Level]
*[[#_85b6159e-d4e9-4e86-8fad-8f444b5999ee|To Provide Multi-Language Support for an Original Field on the Graph Level]
*[[#_1e21988c-9e40-4800-a52e-6447655322e2|To Provide Multi-Language Support for a Custom Field]
[anchor|#_1a95ac32-1599-4105-a9b4-41389790801d]
==To Provide Multi-Language Support for an Original Field on the DAC Level==
To provide multi-language support for a field used on multiple forms, you should customize the original attributes of the field in the data access class extension. To do this, perform the following actions:[anchor|#ol_acp_yq1_rw]
#Open the field in the Data Class Editor, as described in [HelpRoot_Dev_Customization\CG_GL_BL_DataField_TypeLevel|To Customize a Field on the DAC Level].
#In the editor, click '''Edit Attributes''' on the page toolbar.
#In the '''Customize Attributes''' dialog box, which opens, select the <tt>PXDBString</tt> (or <tt>PXDBText</tt>) attribute, and click '''Delete''' (Х) on the toolbar.
#Click '''OK''' to save your changes and close the dialog box.
#In the '''Customize Attributes''' box of the editor, select ''Append to Original'', as shown in the screenshot below.
#In the work area below the box, add the <tt>PXDBLocalizableString</tt> attribute, which has the same parameters as the deleted <tt>PXDBString</tt> (or <tt>PXDBText</tt>) attribute.
#Click '''Save''' on the editor toolbar to save your changes to the customization project.
{br}

For example, after you perform these actions for the '''Description''' field on the Sales Orders form (SO301000; '''Distribution &gt; Sales Orders &gt; Work Area &gt; Enter'''), the '''Customize Attributes''' area of the Data Class editor contains the following code (as shown in the screenshot below).{{{{[PXDBLocalizableString(255, IsUnicode = true)]
[PXRemoveBaseAttribute(typeof(PXDBStringAttribute))]
}}}}[anchor|#fig_bbr_px1_rw][anchor|#image_oqs_dy1_rw][image:CustomizationPlatform/images/CG_GL_BL_MultiLanguageField.png|popup|Providing multi-language support for the Description field of the Sales Orders form|416px][anchor|#_85b6159e-d4e9-4e86-8fad-8f444b5999ee]
==To Provide Multi-Language Support for an Original Field on the Graph Level==
To provide multi-language support for a field used on a single form, you should customize the original attributes of the field in the graph extension. To do this, perform the following actions:[anchor|#_aefabfcf-390a-49e9-bf85-ec65cae370f1]
#Create the code template, which includes the original attributes of the field and the <tt>DACName&#95;FieldPropertyName&#95;CacheAttached()</tt> event handler, which replaces the attributes within the graph, as described in [HelpRoot_Dev_Customization\CG_GL_BL_DataField_CacheLevel|To Customize a Field on the Graph Level].
#By using the Code editor, replace the original attributes in the template, as shown in the following code snippet.{{{{[PXMergeAttributes(Method = MergeMethod.Merge)]
[PXDBLocalizableString(255, IsUnicode = true)]
protected void DACName_FieldPropertyName_CacheAttached(PXCache cache)
{
}
}}}}
#Click '''Save''' on the editor toolbar to save the changes to the customization project.
[anchor|#_1e21988c-9e40-4800-a52e-6447655322e2]
==To Provide Multi-Language Support for a Custom Field==
If you need to create a custom text box with multi-language support, first you create a custom field with the <tt>PXDBString</tt> attribute. Then in the DAC, you replace this attribute name with <tt>PXDBLocalizableString</tt>.]]></column>
			<column name="PlainText"><![CDATA[To Provide Multi-Language Support for a Field  Acumatica ERP 5.3 supports locale-specific settings and the translation of the strings used on the       application interface. Starting with Version 6,  Acumatica ERP also provides the functionality to translate user input to multiple languages and store       translations in the database. (See  Locales and Languages for details.) For example, if there are multiple active system locales in an instance of  Acumatica ERP, and a text field on a form is declared as a multi-language field, the field control       displays the value for the current locale. If the database does not contain a value for the       current locale, the control displays the value for the default system locale. To declare a text field as a multi-language one, in the data access class, you should use the          PXDBLocalizableString  attribute instead of  PXDBString        or  PXDBText . The  PXDBText  attribute has to be replaced       with the  PXDBLocalizableString  one without any length specified. Please do not confuse the  PXDBLocalizableString  attribute with                PXDBLocalString . The  PXDBLocalString  attribute             is deprecated and should not be used in the customization code. By default, starting with  Acumatica ERP 6, the system supports multilingual user input for some boxes listed in  Boxes that Have Multi-Language Support. If the                PXDBString  attribute for a box from the list was customized in the             earlier versions, after you upgrade to  Acumatica ERP 6, the box will not have multi-language support. To resolve the issue, we recommend             that you replace the  PXDBString  attribute with                PXDBLocalizableString  in the customization code. You can provide multi-language support for an original or custom text field. The following       sections provide detailed information: To Provide Multi-Language Support for an Original Field on the DAC             Level To Provide Multi-Language Support for an Original Field on the DAC LevelTo Provide Multi-Language Support for an Original Field on the Graph Level To Provide Multi-Language Support for an Original Field on the Graph LevelTo Provide Multi-Language Support for a Custom Field To Provide Multi-Language Support for a Custom FieldTo Provide Multi-Language Support for an Original Field on the DAC Level To provide multi-language support for a field used on multiple forms, you should customize         the original attributes of the field in the data access class extension. To do this, perform         the following actions: Open the field in the Data Class Editor, as described in  To Customize a Field on the DAC Level. In the editor, click  Edit Attributes  on the page toolbar. In the  Customize Attributes  dialog box, which opens, select the                PXDBString  (or  PXDBText ) attribute, and click                Delete  (Х) on the toolbar. Click  OK  to save your changes and close the dialog box. In the  Customize Attributes  box of the editor, select  Append               to Original , as shown in the screenshot below. In the work area below the box, add the  PXDBLocalizableString              attribute, which has the same parameters as the deleted  PXDBString              (or  PXDBText ) attribute. Click  Save  on the editor toolbar to save your changes to the             customization project. For example, after you perform these actions for the  Description          field on the Sales Orders form (SO301000;  Distribution > Sales Orders > Work Area > Enter ), the  Customize Attributes  area of the Data Class         editor contains the following code (as shown in the screenshot           below). [PXDBLocalizableString(255, IsUnicode = true)]
[PXRemoveBaseAttribute(typeof(PXDBStringAttribute))] Providing multi-language support for the Description field of the Sales Orders             form To Provide Multi-Language Support for an Original Field on the Graph Level To provide multi-language support for a field used on a single form, you should customize         the original attributes of the field in the graph extension. To do this, perform the         following actions: Create the code template, which includes the original attributes of the field and the                DACName_FieldPropertyName_CacheAttached()  event handler, which             replaces the attributes within the graph, as described in  To Customize a Field on the Graph Level. By using the Code editor, replace the original attributes in the template, as shown in             the following code             snippet. [PXMergeAttributes(Method = MergeMethod.Merge)]
[PXDBLocalizableString(255, IsUnicode = true)]
protected void DACName_FieldPropertyName_CacheAttached(PXCache cache)
{
} Click  Save  on the editor toolbar to save the changes to the             customization project. To Provide Multi-Language Support for a Custom Field If you need to create a custom text box with multi-language support, first you create a         custom field with the  PXDBString  attribute. Then in the DAC, you replace         this attribute name with  PXDBLocalizableString . ]]></column>
		</row>
		<row PageID="35479a4b-6dd4-43e9-be70-86261be50833" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="c7d6c790-58e2-7efa-5ba8-da78bb2012b8" RecordSourceID="22377">
			<column name="Content"><![CDATA[
A business logic controller (BLC, also referred as ''graph'') is used to provide the business logic for an Acumatica ERP form. A graph instance is created when a data request occurs and discarded after the request is processed.{br}

With Acumatica Framework, the application programmer is restricted from direct database access and from writing SQL queries. Database specifics are hidden for the application behind data access classes, and the SQL queries are constructed declaratively through Business Query Language (BQL). Through a set of generic classes, the BQL library provides a rich syntax for building the equivalents of SQL queries of any complexity. Unlike SQL statements, BQL statements operate with data access classes, rather than database tables, and provide compatibility between different database engines. The BQL library supports MS SQL and MySQL database engines, as well as access to the database through the ODBC provider.{br}

Each graph contains the <tt>Caches</tt> collection of cache objects and the <tt>Views</tt> collection of data view objects. The framework handles these objects automatically; you don&rsquo;t have to initialize and control them. A <tt>PXView</tt> data view object contains two main parts:[anchor|#_15204c1d-a01d-4e6a-ad5a-389eea45f9af]
*The BQL command, which is defined by the type of the data view
*The optional delegate, which constructs the data set that is returned instead of the BQL command&rsquo;s execution result
<tt>PXView</tt> objects, like graphs, are initialized and destructed on each round trip.((({S:Warn}The order in which data views are defined in a graph is important, because it defines the order of saving data to the database. (This order, however doesn&rsquo;t define the order in which data views are executed.) The data view that you specify in the <tt>PrimaryView</tt> property should always be defined first in the graph.
))){br}

If a BQL statement of a data view refers to multiple data access classes (DACs), the data view creates the <tt>PXCache</tt> object for each DAC to keep appropriate data records, as shown in the following diagram.[anchor|#_a42461d4-82d9-4206-a299-d1843f633b34][anchor|#_45f80b40-1512-4311-beb0-3501c21c27da][image:CustomizationPlatform/images/CG_GL_BL_Cases_DataView.png|popup|Example of two data views working with the records of three DACs|450px]If multiple data views contain a reference to the same DAC, for this DAC, the graph cache contains a single <tt>PXCache</tt> object that is used by the data views.{br}

On a webpage, you bind each container to a data view that provides data for the container. To bind a container and a data view, you specify the data view name in the <tt>DataMember</tt> property of the container in the ASPX code. When a webpage requests data, the system invokes the <tt>ExecuteSelect()</tt> method of the graph with the data view name passed as an argument to execute every data view bound to the containers of the webpage. Note that data views that aren&rsquo;t bound to a container are not executed by a request from the UI.{br}

When a data record is modified on the page, the framework invokes the <tt>ExecuteInsert()</tt>,<tt> ExecuteUpdate()</tt>, or <tt>ExecuteDelete()</tt> method of the graph, passing the name of the data view as an argument. The graph gets the data view by its name and invokes the corresponding method of the data view.((({S:Warn}You shouldn&rsquo;t use the <tt>ExecuteSelect()</tt>, <tt>ExecuteInsert()</tt>, <tt>ExecuteUpdate()</tt>, and <tt>ExecuteDelete()</tt> methods for purposes other than debugging.
))){br}

You use the [HelpRoot_Dev_Customization\CG_Platform_Tools|Customization Tools] of the Acumatica Customization             Platform to create a custom graph and to create new members and override existing ones in an existing graph.{br}

For detailed information on creating a custom graph and customizing an existing graph, see the following topics:[anchor|#ul_xtf_5wp_gq]
*[HelpRoot_Dev_Customization\CG_GL_BL_Graph_ToOpen|To Start the Customization of a Graph]
*[HelpRoot_Dev_Customization\CG_GL_BL_Graph_NewGraph|To Create a Custom Graph]
*[HelpRoot_Dev_Customization\CG_GL_BL_Graph_NewMember|To Add a New Member]
*[HelpRoot_Dev_Customization\CG_GL_BL_Graph_AddAction|To Add an Action]
*[HelpRoot_Dev_Customization\CG_GL_BL_Graph_AddEventHandler|To Add an Event Handler]
*[HelpRoot_Dev_Customization\CG_GL_BL_EventHandler_OverrideEvent|To Override an Event Handler]
*[HelpRoot_Dev_Customization\CG_GL_BL_Graph_OverrideMethod|To Override a Virtual Method]
]]></column>
			<column name="PlainText"><![CDATA[Graph A business logic controller (BLC, also referred as  graph ) is used to provide the       business logic for an  Acumatica ERP form. A graph instance is created when a data request occurs and discarded after the       request is processed. With  Acumatica Framework,       the application programmer is restricted from direct database access and from writing SQL       queries. Database specifics are hidden for the application behind data access classes, and the       SQL queries are constructed declaratively through Business Query Language (BQL). Through a set       of generic classes, the BQL library provides a rich syntax for building the equivalents of SQL       queries of any complexity. Unlike SQL statements, BQL statements operate with data access       classes, rather than database tables, and provide compatibility between different database       engines. The BQL library supports MS SQL and MySQL database engines, as well as access to the       database through the ODBC provider. Each graph contains the  Caches  collection of cache objects and the          Views  collection of data view objects. The framework handles these       objects automatically; you don't have to initialize and control them. A          PXView  data view object contains two main parts: The BQL command, which is defined by the type of the data view The optional delegate, which constructs the data set that is returned instead of the BQL           command's execution result PXView  objects, like graphs, are initialized and destructed on each       round trip. The order in which data views are defined in a graph is important, because it         defines the order of saving data to the database. (This order, however doesn't define the         order in which data views are executed.) The data view that you specify in the            PrimaryView  property should always be defined first in the         graph. If a BQL statement of a data view refers to multiple data access classes (DACs), the data view       creates the  PXCache  object for each DAC to keep appropriate data records,       as shown in the following diagram. Example of two data views working with the records of three DACs If multiple data views contain a reference to the same DAC, for this DAC, the graph       cache contains a single  PXCache  object that is used by the data views. On a webpage, you bind each container to a data view that provides data for the container. To       bind a container and a data view, you specify the data view name in the          DataMember  property of the container in the ASPX code. When a webpage       requests data, the system invokes the  ExecuteSelect()  method of the graph       with the data view name passed as an argument to execute every data view bound to the       containers of the webpage. Note that data views that aren't bound to a container are not       executed by a request from the UI. When a data record is modified on the page, the framework invokes the          ExecuteInsert() ,  ExecuteUpdate() , or          ExecuteDelete()  method of the graph, passing the name of the data view as       an argument. The graph gets the data view by its name and invokes the corresponding method of       the data view. You shouldn't use the  ExecuteSelect() ,            ExecuteInsert() ,  ExecuteUpdate() , and            ExecuteDelete()  methods for purposes other than debugging. You use the  Customization Tools of the  Acumatica Customization             Platform to create a custom graph and to create new members and override existing ones in an       existing graph. For detailed information on creating a custom graph and customizing an existing graph, see the    following topics: To Start the Customization of a GraphTo Create a Custom GraphTo Add a New MemberTo Add an ActionTo Add an Event HandlerTo Override an Event HandlerTo Override a Virtual Method]]></column>
		</row>
		<row PageID="8278c2df-219d-4bba-9c9d-3411f019c02c" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="91f1108b-d210-30ad-5645-d62f9069e813" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can create the class extension for an existing business logic controller (BLC) and add the ''Code'' item with the created code to a customization project in several ways, as described in the following sections:[anchor|#_49e0442f-c919-4685-a9c9-efda9a50a541]
*[[#_dad6fbea-be91-4d76-85e3-6a5eeb2203cc|To Add a Code Item by Using the Element Inspector]
*[[#_3f22d977-2d80-4c19-ac30-ae2ebd83f379|To Add a Code Item by Using the Layout Editor]
*[[#_ebfd3ca1-9c2b-43ec-9cf5-f0e755521cfd|To Add a Code Item on the Code page]
{br}

If you need to extend the code of a BLC that has no webpage associated (such as <tt>ARReleaseProcess</tt>), follow the instructions described in [[#_ebfd3ca1-9c2b-43ec-9cf5-f0e755521cfd|To Add a Code Item on the Code page].{br}

As soon as you add the <tt>Code</tt> item for customization of the business logic to the project, the system generates an extension class for it and opens the code in the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_CodeEditor|Code Editor]. You can work with the extension classes in the Code Editor. After you publish the customization project, you can develop the code in MS Visual Studio.[anchor|#_dad6fbea-be91-4d76-85e3-6a5eeb2203cc]
==To Add a ''Code'' Item by Using the Element Inspector==
Typically, you want to modify the business logic that is executed for a certain form of Acumatica ERP.{br}

To add a ''Code'' item for customization of the business logic for an existing form to a customization project by using the [HelpRoot_Dev_Customization\CG_Platform_Tools_Inspector|Element Inspector], perform the following actions:[anchor|#_b63fad3e-97d9-435f-9cdd-cd2d17dee3a6]
#Open the form in the browser.
#On the form title bar, click '''Customization &gt; Inspect Element''' to launch the Element Inspector.
#On the form, select any UI element to open the [HelpRoot_Dev_Customization\CG_Platform_Tools_Inspector_ElProperiesDlg|Element Properties Dialog Box] for the element.
#:The '''Business Logic''' box of the dialog box displays the name of the business logic controller that provides business logic for the form, as shown in the screenshot below.
#In the dialog box, click '''Actions &gt; Customize Business Logic'''.[anchor|#_94800240-fdd1-4ab0-bb84-1da815fb6c67][image:Shared/Images/CG_GL_Items_Code_Adding_GraphExt_CM.png|popup|Using the Element Properties dialog box to customize the business logic for the form|240px]
#If there is no currently selected customization project and the inspector opens the [HelpRoot_Dev_Customization\CG_Platform_Tools_Menu_SelectCustProjDlg|Select Customization Project Dialog Box], select an existing customization project or to create a new one.
{br}

The platform creates the template of the class that is derived from the <tt>PXGraphExtension&lt;&gt;</tt> class, saves the code as a ''Code'' item of the project in the database, and opens the item in the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_CodeEditor|Code Editor], as shown in the following screenshot.[anchor|#_d75b9781-250d-4dcd-a3f3-cf1ecc3cb583][anchor|#_3236693e-55e1-4f86-86f7-7f57b032bac8][image:Shared/Images/CG_GL_Items_Code_AddingGraphExt_CM.png|popup|Viewing the created code template in the Code Editor|450px][anchor|#_3f22d977-2d80-4c19-ac30-ae2ebd83f379]
==To Add a ''Code'' Item by Using the Layout Editor==
Often, you start a customization of an Acumatica ERP form in the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_LayoutEditor|Screen Editor] and you later want to modify the business logic for this form. To customize the business logic of the form, you can add a ''Code'' item to a customization project from the Layout Editor.{br}

To do this, perform the following action:[anchor|#_164e8584-7223-43ec-a215-43bfdde662d0]
#On the toolbar of the Layout Editor, click '''Actions &gt; Customize Business Logic''', as the following screenshot shows.[anchor|#_7610c0d8-5dde-44e3-a0a7-eedfbad7c2b7][image:Shared/Images/CG_GL_Items_Code_AddingGraphExt_LE.png|popup|Starting the customization of the business logic from the Layout Editor|422px]
{br}

The platform creates the template of the class that is derived from the <tt>PXGraphExtension&lt;&gt;</tt> class, saves the code as a ''Code'' item of the project in the database, and opens the item in the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_CodeEditor|Code Editor].[anchor|#_ebfd3ca1-9c2b-43ec-9cf5-f0e755521cfd]
==To Add a ''Code'' Item on the Code page==
If you know the name of the business logic controller to be customized, you can create a ''Code'' item with the graph extension template on the Code page of the Customization Project Editor by using the '''Create Code File''' dialog box.{br}

To do this, perform the following actions:[anchor|#_8512ac56-8576-4c3f-9a8a-3a86296044e5]
#Open the customization project in the editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)
#Click '''Code''' in the navigation pane to open the Code page.
#Click '''Add New Record''' (+) on the page toolbar.
#In the '''Create Code File''' dialog box, which opens, select ''Graph Extension'' in the '''File Template''' box, as the screenshot below shows.
#In the '''Base Graph''' box, select the class name of the business logic controller to be customized.
#Click '''OK'''.[anchor|#_fef6da90-2989-4955-aabb-06a809ba59fe][image:Shared/Images/CG_GL_Items_Code_AddingGraphExt_CE.png|popup|Adding a Code item with the graph extension to the project|353px]
{br}

The platform creates the template of the class that is derived from the <tt>PXGraphExtension&lt;&gt;</tt> class, saves the code as a ''Code'' item of the project in the database, and opens the item in the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_CodeEditor|Code Editor].]]></column>
			<column name="PlainText"><![CDATA[To Start the Customization of a Graph You can create the class extension for an existing business logic controller (BLC) and add the  Code  item with the created code to a customization project in several ways, as described in the following sections: To Add a Code Item by Using the Element Inspector To Add a Code Item by Using the Element InspectorTo Add a Code Item by Using the Layout Editor To Add a Code Item by Using the Layout EditorTo Add a Code Item on the Code page To Add a Code Item on the Code pageIf you need to extend the code of a BLC that has no webpage associated (such as                      ARReleaseProcess ), follow the instructions described in  To Add a Code Item on the Code page To Add a Code Item on the Code page. As soon as you add the  Code  item for customization of the business logic to the project, the system generates an extension class for it and opens the code in the  Code Editor. You can work with the extension classes in the Code Editor. After you publish the customization project, you can develop the code in MS Visual Studio. To Add a  Code  Item by Using the Element Inspector Typically, you want to modify the business logic that is executed for a certain form of  Acumatica ERP. To add a  Code  item for customization of the business logic for an existing form to a customization project by using the  Element Inspector, perform the following actions: Open the form in the browser. On the form title bar, click  Customization > Inspect Element  to launch the Element Inspector. On the form, select any UI element to open the  Element Properties Dialog Box for the element. The  Business Logic  box of the dialog box displays the name of the business logic controller that provides business logic for the form, as shown in the screenshot below. In the dialog box, click  Actions > Customize Business Logic . Using the Element Properties dialog box to customize the business logic for the form If there is no currently selected customization project and the inspector opens the  Select Customization Project Dialog Box, select an existing customization project or to create a new                             one. The platform creates the template of the class that is derived from the  PXGraphExtension<>  class, saves the code as a  Code  item of the project in the database, and opens the item in the  Code Editor, as shown in the following screenshot. Viewing the created code template in the Code Editor To Add a  Code  Item by Using the Layout Editor Often, you start a customization of an  Acumatica ERP form in the  Screen Editor and you later want to modify the business logic for this form. To customize the business logic of the form, you can add a  Code  item to a customization project from the Layout Editor. To do this, perform the following action: On the toolbar of the Layout Editor, click  Actions > Customize Business Logic , as the following screenshot shows. Starting the customization of the business logic from the Layout Editor The platform creates the template of the class that is derived from the  PXGraphExtension<>  class, saves the code as a  Code  item of the project in the database, and opens the item in the  Code Editor. To Add a  Code  Item on the Code page If you know the name of the business logic controller to be customized, you can create a  Code  item with the graph extension template on the Code page of the  Customization Project Editor by using the  Create Code File  dialog box. To do this, perform the following actions: Open the customization project in the editor. (See  To Open a Project for details.) Click  Code  in the navigation pane to open the Code page. Click  Add New Record  (+) on the page toolbar. In the  Create Code File  dialog box, which opens, select  Graph Extension  in the  File Template  box, as the screenshot below shows. In the  Base Graph  box, select the class name of the business logic controller to be customized. Click  OK . Adding a Code item with the graph extension to the project The platform creates the template of the class that is derived from the  PXGraphExtension<>  class, saves the code as a  Code  item of the project in the database, and opens the item in the  Code Editor. ]]></column>
		</row>
		<row PageID="2a5390d4-caa6-4e07-bbd2-879dc004ef2d" Language="en-US" PageRevisionID="1" PlainText="To Create a Custom Graph You can add a custom business logic controller to a customization project on the Code page of the  Customization Project Editor. To do this, perform the following actions: Open the customization project in the editor. (See  To Open a Project for details.) Select  Code  in the navigation pane to open the Code page. Click  Add New Record  (+) on the page toolbar. In the  Create Code File  dialog box, which opens, select  New Graph  in the  File Template  box, as the screenshot below shows. In the  Class Name  box, specify the class name of the business logic controller to be created. Click  OK . Adding a Code item for a custom graph to the project  The platform creates the code template of the class derived from the  PXGraph&lt;&gt;  class, saves the code as a  Code  item of the project in the database, and opens the item in the  Code Editor. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="0784bbfa-c10d-7cfb-22d9-d1084510b937" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can add a custom business logic controller to a customization project on the Code page of the Customization Project Editor.{br}

To do this, perform the following actions:[anchor|#_a46a4ea1-fc35-4ec5-a20b-c48d99c8b117]
#Open the customization project in the editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)
#Select '''Code''' in the navigation pane to open the Code page.
#Click '''Add New Record''' (+) on the page toolbar.
#In the '''Create Code File''' dialog box, which opens, select ''New Graph'' in the '''File Template''' box, as the screenshot below shows.
#In the '''Class Name''' box, specify the class name of the business logic controller to be created.
#Click '''OK'''.[anchor|#_57d3e9e7-3af6-402e-82d3-4c92bf7ca5b1][image:Shared/Images/CG_GL_Items_Code_NewGraph.png|popup|Adding a Code item for a custom graph to the project|197px]
 The platform creates the code template of the class derived from the <tt>PXGraph&lt;&gt;</tt> class, saves the code as a ''Code'' item of the project in the database, and opens the item in the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_CodeEditor|Code Editor].]]></column>
		</row>
		<row PageID="bf546967-0fc8-4e5c-9508-441ee7b4922e" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="15b40464-3f3d-0a7d-a9b3-bc3e96ad9f3d" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can add a new member (such as a variable, data view, or method) to a custom graph or to an extension for a graph in Acumatica ERP.{br}

Initially, the code of a custom graph or an extension for an existing graph is saved in the appropriate ''Code'' item of the customization project. If the project has not been published, you can use only the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_CodeEditor|Code Editor] to add a new member to the graph code.{br}

After the customization project has been published, the code is also saved in the corresponding C# file in the <tt>App&#95;RuntimeCode</tt> folder of the website. (See [HelpRoot_Dev_Customization\CG_Platform_Framework_CS|Changes in the Application Code (C#)] for details.) You can open the file in Microsoft Visual Studio and use Visual Studio to add a new member to the graph code. To do this, perform the following actions:[anchor|#_b3ff6a52-228c-4f04-b26a-98032f37bde5]
#In Visual Studio, click '''File &gt; Open &gt; Web Site''', and select your Acumatica ERP development environment.
#Open the <tt>App&#95;RuntimeCode\&lt;CodeItemName&gt;.cs</tt> file.
#In the code, add the needed class member.
#Save the file.
#In the Customization Project Editor, select the '''Files''' node in the navigation pane.
#On the Custom Files page, which opens, click '''Detect Modified Files''' on the page toolbar.
#:((({S:Warn}The customization platform compares the content of each file added to the site with the content of the associated item of the customization project in the database. If a difference is detected, the platform opens the '''Modified Files Detected''' dialog box so you can resolve the detected conflicts. You can either update the customization project in the database or discard the file changes in the file system to resolve the conflicts.
)))
#In the '''Modified Files Detected''' dialog box, which opens, ensure that the modified code file is selected.
#Click '''Update Customization Project''' on the dialog box toolbar to update the ''Code'' item that is saved in the database.
{br}

If the graph code is included in an extension library whose binary file is added to the customization project as a ''File'' item, you can use Visual Studio to add a new member to the graph code in the library solution. (See [HelpRoot_Dev_Customization\CG_Platform_TO_Code_CS_ExtLibrary|Extension Library] for details.) If you make changes to the extension library file in the file system, you have to update the appropriate ''File'' item in the customization project. See [HelpRoot_Dev_Customization\CG_GL_Items_Files_Updating|To Update a File Item in a Project] for details.]]></column>
			<column name="PlainText"><![CDATA[To Add a New Member You can add a new member (such as a variable, data view, or method) to a custom graph or to       an extension for a graph in  Acumatica ERP. Initially, the code of a custom graph or an extension for an existing graph is saved in the       appropriate  Code  item of the customization project. If the project has not been       published, you can use only the  Code Editor to add       a new member to the graph code. After the customization project has been published, the code is also saved in the       corresponding C# file in the  App_RuntimeCode  folder of the website. (See          Changes in the Application Code (C#) for details.) You can open the file in       Microsoft Visual Studio and use Visual Studio to add a new member to the graph code. To do       this, perform the following actions: In Visual Studio, click  File > Open > Web Site , and select your              Acumatica ERP development environment. Open the  App_RuntimeCode\<CodeItemName>.cs  file. In the code, add the needed class member. Save the file. In the Customization Project Editor, select the  Files  node in the           navigation pane. On the Custom Files page, which opens, click  Detect Modified             Files  on the page toolbar. The customization platform compares the             content of each file added to the site with the content of the associated item of the             customization project in the database. If a difference is detected, the platform opens             the  Modified Files Detected  dialog box so you can resolve the             detected conflicts. You can either update the customization project in the database or             discard the file changes in the file system to resolve the conflicts. In the  Modified Files Detected  dialog box, which opens, ensure           that the modified code file is selected. Click  Update Customization Project  on the dialog box toolbar to           update the  Code  item that is saved in the database. If the graph code is included in an extension library whose binary file is added to the       customization project as a  File  item, you can use Visual Studio to add a new member to       the graph code in the library solution. (See  Extension Library for details.) If you make changes to the       extension library file in the file system, you have to update the appropriate  File  item       in the customization project. See  To Update a File Item in a Project for       details. ]]></column>
		</row>
		<row PageID="02d50988-c79a-43ce-99a7-af697b506551" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="6bd2185e-016a-3a34-bf9b-1ab4777bbefa" RecordSourceID="22377">
			<column name="Content"><![CDATA[
To add a new action to the toolbar of an original form of Acumatica ERP, you have to add to the appropriate graph extension the action declaration, toolbar button declaration, and action delegate method. (See [HelpRoot_Dev_Customization\CG_GL_BL_Graph_ToOpen|To Start the Customization of a Graph] for details.){br}

To add a new action to the toolbar of a custom form, you have to add the action code to the appropriate custom graph. (See [HelpRoot_Dev_Customization\CG_GL_Forms_CreatingCustom_Template|To Create a Custom Form Template] and [HelpRoot_Dev_Customization\CG_GL_BL_Graph_NewGraph|To Create a Custom Graph] for details.)((({S:Warn}You can also add an action in the Screen Editor. For details, see [HelpRoot_Dev_Customization\CG_GL_items_ConfigureActions|To Configure Actions].
))){br}

You can use the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_CodeEditor|Code Editor] to add an action template to the graph extension or custom graph that is saved in a customization project as a ''Code'' item and currently opened in the editor. To do this, perform the following actions:[anchor|#_c9dc8fbb-be3e-4b22-98f7-1d9d171d80e8]
#Click the '''New Action''' button of the Code Editor to open the '''Create Action''' dialog box.
#In the dialog box, specify the name of the action delegate method in the '''Action Name''' box and the name of the action button in the '''Display Name''' box, as shown in the following screenshot.[anchor|#image_xr4_jtr_qr][image:CustomizationPlatform/images/CG_Platform_Tools_Editor_CodeEditor_NewActionDlg.png|popup|Opening the New Action dialog box|450px]
# Click '''OK''' to create the action template and add it to the item.
The system adds to the code a template of the action declaration that includes the following class members:[anchor|#ul_brj_fpm_cw]
*The declaration of the action delegate method
*The declaration of the button attributes to add the button to the form toolbar with the specified name
*The template of the action delegate method
{br}

The following example shows the template code for an action.<source lang="csharp">public PXAction&lt;DACName&gt; myActionDelegateMethod;

[PXButton(CommitChanges = true)]
[PXUIField(DisplayName = "MyActionButtonName")]
protected void MyActionDelegateMethod()
{
  // the body of the action delegate method
}</source>{br}

If the code of a graph extension or custom graph is moved to an extension library whose binary file is added to the customization project as a ''File'' item, you should develop the action code from scratch by using Visual Studio. If you make changes to the extension library file in the file system, you have to update the appropriate ''File'' item in the customization project. See [HelpRoot_Dev_Customization\CG_GL_Items_Files_Updating|To Update a File Item in a Project] for details.]]></column>
			<column name="PlainText"><![CDATA[To Add an Action To add a new action to the toolbar of an original form of  Acumatica ERP, you have to add to the appropriate graph extension the action declaration, toolbar button       declaration, and action delegate method. (See  To Start the Customization of a Graph for       details.) To add a new action to the toolbar of a custom form, you have to add the action code to the       appropriate custom graph. (See  To Create a Custom Form Template and          To Create a Custom Graph for details.) You can also add an action in         the Screen Editor. For details, see  To Configure Actions. You can use the  Code Editor to add an action    template to the graph extension or custom graph that is saved in a customization project as a      Code  item and currently opened in the editor. To do this, perform the following     actions: Click the  New Action  button of the Code Editor to open the        Create Action  dialog box. In the dialog box, specify the name of the action delegate method in the  Action       Name  box and the name of the action button in the  Display       Name  box, as shown in the following screenshot. Opening the New Action dialog box  Click  OK  to create the action template and add it to the item. The system adds to the code a template of the action declaration that includes the following    class members: The declaration of the action delegate method The declaration of the button attributes to add the button to the form toolbar with the      specified name The template of the action delegate method The following example shows the template code for an    action. public PXAction<DACName> myActionDelegateMethod;

[PXButton(CommitChanges = true)]
[PXUIField(DisplayName = "MyActionButtonName")]
protected void MyActionDelegateMethod()
{
  // the body of the action delegate method
} If the code of a graph extension or custom graph is moved to an extension library whose binary       file is added to the customization project as a  File  item, you should develop the       action code from scratch by using Visual Studio. If you make changes to the extension library       file in the file system, you have to update the appropriate  File  item in the       customization project. See  To Update a File Item in a Project for details. ]]></column>
		</row>
		<row PageID="89a2890c-9d0e-43ef-8546-718d38fdc578" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="9a4dd9b6-94b7-6647-8ef5-490b508b3775" RecordSourceID="22377">
			<column name="Content"><![CDATA[
If you customize a form, you may need to provide additional business logic for processing a control value immediately after the value is changed.{br}

To implement business logic for data changed by the user on an original form, you should add event handlers for data fields (or data records) to the extension of the graph that provides business logic for the form.{br}

To process data modification on a custom form, you should add event handlers for data fields (or data records) to the appropriate custom graph.{br}

You can use the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_LayoutEditor|Screen Editor] to add to the appropriate customization code a workable template of an event handler for a data field (or data record) that can be modified on a form. To do this, perform the following actions:[anchor|#_aefabfcf-390a-49e9-bf85-ec65cae370f1]
#Open the form in the browser and make the control for the field visible on the form.
#On the form title bar, click '''Customization &gt; Inspect Element''' to launch the [HelpRoot_Dev_Customization\CG_Platform_Tools_Inspector|Element Inspector].
#:((({S:Warn}If you need to activate the [HelpRoot_Dev_Customization\CG_Platform_Tools_Inspector|Element Inspector] for a pop-up panel, dialog box, or another UI element that opens in modal mode and makes the [HelpRoot_Dev_Customization\CG_Platform_Tools_Menu|Customization Menu] unavailable for selection, you can press Control-Alt.
)))
#On the form, click the control to open the [HelpRoot_Dev_Customization\CG_Platform_Tools_Inspector_ElProperiesDlg|Element Properties] dialog box for the control.
#In the dialog box, click '''Actions &gt; Customize'''.
#If there is no currently selected customization project and the inspector opens the [HelpRoot_Dev_Customization\CG_Platform_Tools_Menu_SelectCustProjDlg|Select Customization Project Dialog Box], select an existing customization project or create a new one. (See [HelpRoot_Dev_Customization\CG_GL_Projects_Starting_Creating|To Create a New Project] and [HelpRoot_Dev_Customization\CG_GL_Projects_Starting_Selecting|To Select an Existing Project] for details.)
#:If the customization project does not contain a changeset for the form, the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor] adds to the project a ''Page'' item for the form, to keep the changeset to the ASPX code of the form in the database. The container of the control is opened in the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_LayoutEditor|Screen Editor], and the control is selected in the Control Tree of the editor.
#Select the node of the control in the Control Tree.
#Click the '''Layout Properties''' tab item to open the list of properties for the control.
#In the list, set the <tt>CommitChange</tt> property to ''True''. (For detailed information about the property, see [HelpRoot_Dev_Platform\CW__con_CommitChanges|Use of the CommitChanges Property of Boxes] in the Acumatica Framework Guide.)
#Click '''Save''' to save your changes in the customization project.
#Click the '''Events''' tab item to open the list of available event types for the control.
#In the list, click the type of the event that you want to process for the field to highlight the type, as shown in the screenshot below.
#On the list toolbar, click '''Add Handler &gt; Keep Base Method'''.[anchor|#_00c484fc-c72d-4b2e-bc92-4b18d0f202ed][image:CustomizationPlatform/images/CG_GL_BL_UsingLayoutEditor_AddEvent.png|popup|Adding an event handler for a data field|388px]
If there is no extension for the graph that provides business logic for the form in the customization project, the Acumatica Customization             Platform creates a template for the extension and saves it as a ''Code'' item in the database. Then the platform adds to the graph extension a template for the event handler highlighted in the list and opens the ''Code'' item in the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_CodeEditor|Code Editor], as shown in the following screenshot.[anchor|#_2eda2e47-c20b-46a9-96f7-c5ee839d8f24][anchor|#_92e38559-86e9-452d-bee6-08b54833ea4f][image:CustomizationPlatform/images/CG_GL_BL_UsingLayoutEditor_AddEvent_01.png|popup|Viewing the event handler template|444px]In the template, the event handler has two parameters, as is defined in the base graph. As a result, the event handler is added to the appropriate event handler collection.{br}

When you publish the customization project, the platform saves the graph extension as a C# source code file in the <tt>App&#95;RuntimeCode</tt> folder of the website. You can later develop the event handler in Microsoft Visual Studio. (See [HelpRoot_Dev_Customization\CG_Platform_Studio|Integrating the Project Editor with Microsoft Visual Studio] for details.)]]></column>
			<column name="PlainText"><![CDATA[To Add an Event Handler If you customize a form, you may need to provide additional business logic for processing a       control value immediately after the value is changed. To implement business logic for data changed by the user on an original form, you should add       event handlers for data fields (or data records) to the extension of the graph that provides       business logic for the form. To process data modification on a custom form, you should add event handlers for data fields    (or data records) to the appropriate custom graph. You can use the  Screen Editor to add to the       appropriate customization code a workable template of an event handler for a data field (or       data record) that can be modified on a form. To do this, perform the following actions: Open the form in the browser and make the control for the field visible on the           form. On the form title bar, click  Customization > Inspect Element  to launch the  Element Inspector. If you             need to activate the  Element Inspector for a pop-up panel,             dialog box, or another UI element that opens in modal mode and makes the  Customization Menu unavailable for selection, you can press             Control-Alt. On the form, click the control to open the  Element Properties Element Properties dialog           box for the control. In the dialog box, click  Actions > Customize . If there is no currently selected customization project and the inspector opens the              Select Customization Project Dialog Box, select an existing           customization project or create a new one. (See  To Create a New Project and  To Select an Existing Project for details.) If the customization             project does not contain a changeset for the form, the   Customization Project                         Editor adds to the project a  Page  item for the             form, to keep the changeset to the ASPX code of the form in the database. The container             of the control is opened in the  Screen Editor, and the control is selected in the Control Tree of the editor. Select the node of the control in the Control Tree. Click the  Layout Properties  tab item to open the list of           properties for the control. In the list, set the  CommitChange  property to  True . (For           detailed information about the property, see  Use of the CommitChanges Property of Boxes in the  Acumatica Framework Guide.) Click  Save  to save your changes in the customization           project. Click the  Events  tab item to open the list of available event           types for the control. In the list, click the type of the event that you want to process for the field to           highlight the type, as shown in the screenshot below. On the list toolbar, click  Add Handler > Keep Base Method . Adding an event handler for a data field If there is no extension for the graph that provides business logic for the form in the       customization project, the  Acumatica Customization             Platform creates a template for the extension and saves it as a  Code  item in the database.       Then the platform adds to the graph extension a template for the event handler highlighted in       the list and opens the  Code  item in the  Code Editor, as shown in the following screenshot. Viewing the event handler template In the template, the event handler has two parameters, as is defined in the base graph.       As a result, the event handler is added to the appropriate event handler collection. When you publish the customization project, the platform saves the graph extension as a C#     source code file in the  App_RuntimeCode  folder of the website. You can later develop the event handler in Microsoft Visual Studio. (See  Integrating the Project Editor with Microsoft Visual Studio for details.) ]]></column>
		</row>
		<row PageID="4a05d4c2-cd8b-4131-bf3b-d05861de3ae6" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="c1e13780-19cc-2dfc-1df8-bf5a4f956f0f" RecordSourceID="22377">
			<column name="Content"><![CDATA[
If you customize a form, you may need to override the business logic that processes a control value immediately after the value is changed.{br}

To implement business logic for data changed by the user on an original form, you should add event handlers for data fields (or data records) to the extension of the graph that provides business logic for the form.{br}

To process data modification on a custom form, you should add event handlers for data fields (or data records) to the appropriate custom graph.{br}

You can use the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_LayoutEditor|Screen Editor] to add to the appropriate customization code a workable template of an event handler that overrides the base event handler for a data field (or data record). To do this, perform the following actions:[anchor|#ol_e5h_3x2_hq]
#Open the form in the browser and make the control for the field visible on the form.
#On the form title bar, click '''Customization &gt; Inspect Element''' to launch the [HelpRoot_Dev_Customization\CG_Platform_Tools_Inspector|Element Inspector].
#:((({S:Warn}If you need to activate the [HelpRoot_Dev_Customization\CG_Platform_Tools_Inspector|Element Inspector] for a pop-up panel, dialog box, or other UI element that opens in modal mode and makes the [HelpRoot_Dev_Customization\CG_Platform_Tools_Menu|Customization Menu] unavailable for selection, you can press Control-Alt.
)))
#On the form, click the control to open the [HelpRoot_Dev_Customization\CG_Platform_Tools_Inspector_ElProperiesDlg|Element Properties] dialog box for the control.
#In the dialog box, click '''Actions &gt; Customize'''.
#If there is no currently selected customization project and the inspector opens the [HelpRoot_Dev_Customization\CG_Platform_Tools_Menu_SelectCustProjDlg|Select Customization Project Dialog Box], elect an existing customization project or create a new one. (See [HelpRoot_Dev_Customization\CG_GL_Projects_Starting_Creating|To Create a New Project] and [HelpRoot_Dev_Customization\CG_GL_Projects_Starting_Selecting|To Select an Existing Project] for details.)
#:If the customization project does not contain a changeset for the form, the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor] adds a ''Page'' item for the form to the project, to keep the changeset to the ASPX code of the form in the database. The container of the control is opened in the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_LayoutEditor|Screen Editor], and the control is selected in the Control Tree of the editor.
#Select the node of the control in the Control Tree.
#Click the '''Layout Properties''' tab item to open the list of properties for the control.
#In the list, ensure that the <tt>CommitChange</tt> property is set to ''True''. (For detailed information about the property, see [HelpRoot_Dev_Platform\CW__con_CommitChanges|Use of the CommitChanges Property of Boxes] in the Acumatica Framework Guide.)
#Click '''Save''' to save your changes in the customization project.
#Click the '''Events''' tab item to open the list of available event types for the control.
#In the list, click the type of the event that you want to process for the field to highlight the type, as shown in the screenshot below.
#On the list toolbar, click '''Add Handler &gt; Override Base Method'''.[anchor|#_00c484fc-c72d-4b2e-bc92-4b18d0f202ed][image:CustomizationPlatform/images/CG_GL_BL_UsingLayoutEditor_OverrideEvent.png|popup|Adding an event handler for a data field|367px]
If there is no extension for the graph that provides business logic for the form in the customization project, the Acumatica Customization             Platform creates a template for the extension and saves it as a ''Code'' item in the database. Then the platform adds to the graph extension a template for the event handler highlighted in the list and opens the ''Code'' item in the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_CodeEditor|Code Editor], as shown in the following screenshot.[anchor|#_2eda2e47-c20b-46a9-96f7-c5ee839d8f24][anchor|#_92e38559-86e9-452d-bee6-08b54833ea4f][image:CustomizationPlatform/images/CG_GL_BL_UsingLayoutEditor_OverrideEvent_01.png|popup|Viewing the event handler template|450px]In the template, the event handler has an additional parameter to replace the base event handler collection of the graph.{br}

When you publish the customization project, the platform saves the graph extension as a C# source code file in the <tt>App&#95;RuntimeCode</tt> folder of the website. You can later develop the event handler in Microsoft Visual Studio. (See [HelpRoot_Dev_Customization\CG_Platform_Studio|Integrating the Project Editor with Microsoft Visual Studio] for details.)]]></column>
			<column name="PlainText"><![CDATA[To Override an Event Handler If you customize a form, you may need to override the business logic that processes a control       value immediately after the value is changed. To implement business logic for data changed by the user on an original form, you should add       event handlers for data fields (or data records) to the extension of the graph that provides       business logic for the form. To process data modification on a custom form, you should add event handlers for data fields       (or data records) to the appropriate custom graph. You can use the  Screen Editor to add to the       appropriate customization code a workable template of an event handler that overrides the base       event handler for a data field (or data record). To do this, perform the following actions: Open the form in the browser and make the control for the field visible on the           form. On the form title bar, click  Customization > Inspect Element  to launch the  Element Inspector. If you             need to activate the  Element Inspector for a pop-up panel,             dialog box, or other UI element that opens in modal mode and makes the  Customization Menu unavailable for selection, you can press             Control-Alt. On the form, click the control to open the  Element Properties Element Properties dialog           box for the control. In the dialog box, click  Actions > Customize . If there is no currently selected customization project and the inspector opens the              Select Customization Project Dialog Box, elect an existing           customization project or create a new one. (See  To Create a New Project and  To Select an Existing Project for details.) If the customization             project does not contain a changeset for the form, the   Customization Project                         Editor adds a  Page  item for the form to the             project, to keep the changeset to the ASPX code of the form in the database. The             container of the control is opened in the  Screen Editor, and the control is selected in             the Control Tree of the editor. Select the node of the control in the Control Tree. Click the  Layout Properties  tab item to open the list of           properties for the control. In the list, ensure that the  CommitChange  property is set to              True . (For detailed information about the property, see  Use of the CommitChanges Property of Boxes in the  Acumatica Framework Guide.) Click  Save  to save your changes in the customization           project. Click the  Events  tab item to open the list of available event           types for the control. In the list, click the type of the event that you want to process for the field to           highlight the type, as shown in the screenshot below. On the list toolbar, click  Add Handler > Override Base             Method . Adding an event handler for a data field If there is no extension for the graph that provides business logic for the form in the       customization project, the  Acumatica Customization             Platform creates a template for the extension and saves it as a  Code  item in the database.       Then the platform adds to the graph extension a template for the event handler highlighted in       the list and opens the  Code  item in the  Code Editor, as shown in the following screenshot. Viewing the event handler template In the template, the event handler has an additional parameter to replace the base event       handler collection of the graph. When you publish the customization project, the platform saves the graph extension as a C#       source code file in the  App_RuntimeCode  folder of the website. You can later develop the event handler in Microsoft Visual Studio. (See  Integrating the Project Editor with Microsoft Visual Studio for details.) ]]></column>
		</row>
		<row PageID="6fa2a444-17b4-42f9-9e6a-64e85167626a" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="fdf8d3da-7fac-5259-539a-ed68a8378aa1" RecordSourceID="22377">
			<column name="Content"><![CDATA[
In a graph extension, you can override the virtual methods defined within the base graph. As with the event handlers, you have two options:[anchor|#_a89d24bf-e7cd-4800-9b61-673fc3f98b42]
*You can define the override method with exactly the same signature—that is, the return value, the name of the method, and all method parameters—as the overridden base virtual method has. As a result, the method is added to the queue of all override methods. When the system invokes the base method, all methods in the queue are executed sequentially, from the first one to the last one. The lower the level of the graph extension, the earlier the system invokes the override method.
*You can define the override method with an additional parameter, which represents the delegate for one of the following:
**The override method with an additional parameter from the extension of the previous level, if such a method exists
**The base virtual method, if no override methods with additional parameters declared within lower-level extensions exist
{br}

In both cases, you should attach the <tt>PXOverride</tt> attribute to the override method declared within the BLC extension, as described in the following sections below:[anchor|#ul_qdl_3sp_lq]
*[[#section_gyv_rrp_lq|Override Method That Is Added to the Override Method Queue]
*[[#section_d44_srp_lq|Override Method That Replaces the Original Method]
[anchor|#section_gyv_rrp_lq]
==Override Method That Is Added to the Override Method Queue==
By declaring an override method with exactly the same signature as the overridden base virtual method has, you extend the base method execution. The base BLC method is replaced at run time with the queue of methods, which starts with the base BLC method. When the system invokes the base method, all methods in the queue are executed sequentially, from the first one to the last one. The lower the level the BLC extension has, the earlier the system invokes the override method. If the system has invoked the base method, you have no option to prevent the override method queue from execution. To prevent the base method executions, see the [[#section_d44_srp_lq|Override Method That Replaces the Original Method] section below.{br}

To add an override method that is added to the override method queue, perform the following actions:[anchor|#_f65bb023-c21f-464e-a7b0-733eeaa153a0]
#Create the graph extension, as described in [HelpRoot_Dev_Customization\CG_GL_BL_Graph_ToOpen|To Start the Customization of a Graph].
#In the Code Editor, click '''View Source''' to view the code of the base graph in the [HelpRoot_Dev_Customization\CG_Platform_Tools_SM204570|Source Code Browser].
#:((({S:Warn}In an instance of Acumatica ERP, a repository with the original C# source code of the application is kept in the <tt>\App&#95;Data\CodeRepository</tt> folder of the website.
)))
#In the browser, select and copy the code of the method.
#In the Code Editor, paste the method code in the graph extension.
#In the graph extension, insert the <tt>PXOverride</tt> attribute immediately before the method signature.
#Clear the method body.
#Develop the code of the method.
#Click '''Save''' in Code Editor to save your changes.
[anchor|#section_d44_srp_lq]
==Override Method That Replaces the Original Method==
The override method with an additional parameter replaces the base BLC virtual method. When the virtual method is invoked, the system invokes the override method with an additional parameter of the highest-level BLC extension. The system passes a link to the override method with an additional parameter from the extension of the previous level, if such a method exists, or to the base virtual method.{br}

You use a delegate as an additional parameter to encapsulate the method with exactly the same signature as the base virtual method. If the base virtual method contains a list of parameters, then you should not use the same list of parameters when you declare the override method with an additional parameter. To declare a <tt>MyMethod</tt> override method with an additional parameter within a BLC extension, you can use the following example.{{{{
public class BaseBLCExt : PXGraphExtension&lt;BaseBLC&gt;
{
  public delegate ReturnType MyMethodDelegate([List of Parameters]); 
  [PXOverride]
  public ReturnType MyMethod([List of Parameters,] MyMethodDelegate baseMethod)
  {
    return baseMethod(adapter);
  }
}
}}}}{br}

You can decide whether to call the method pointed to by the delegate. By invoking the base method, you also start the execution of the override method queue.{br}

To add an override method that replaces the base BLC virtual method, perform the following actions:[anchor|#_465573dc-b4d5-4e57-b66f-87c78170ff46]
#Create the graph extension, as described in [HelpRoot_Dev_Customization\CG_GL_BL_Graph_ToOpen|To Start the Customization of a Graph].
#In the Code Editor, click '''Override Method''', as shown in the screenshot below.
#In the '''Selected''' column of the '''Select Methods to Override''' dialog box, which opens, select the method to be overridden.
#Click '''Save''' to add the code template for the override method to the graph extension.[anchor|#_0817867f-4ba8-49a1-9c54-c5692b76d531][image:CustomizationPlatform/images/CG_GL_BL_Graph_OverrideMethod_01.png|popup|Selecting a method to be overridden|450px]
Once the override method template has been created (see the following screenshot), you can implement the needed code within the template.[anchor|#_a47581b1-cc3d-4f5c-b1f1-36c4ff72ac2a][anchor|#_ee5f562e-31a8-4a3f-bc53-36a96df3a303][image:CustomizationPlatform/images/CG_GL_BL_Graph_OverrideMethod_02.png|popup|Viewing the override method template in the Code Editor|450px]{br}

When you publish the customization project, the platform saves the graph extension as a C# source code file in the <tt>App&#95;RuntimeCode</tt> folder of the website. You can later develop the event handler in Microsoft Visual Studio. (See [HelpRoot_Dev_Customization\CG_Platform_Studio|Integrating the Project Editor with Microsoft Visual Studio] for details.)]]></column>
			<column name="PlainText"><![CDATA[To Override a Virtual Method In a graph extension, you can override the virtual methods defined within the base graph. As       with the event handlers, you have two options: You can define the override method with exactly the same signature—that is, the return                 value, the name of the method, and all method parameters—as the overridden                 base virtual method has. As a result, the method is added to the queue of all                 override methods. When the system invokes the base method, all methods in the queue                 are executed sequentially, from the first one to the last one. The lower the level                 of the graph extension, the earlier the system invokes the override method. You can define the override method with an additional parameter, which represents the delegate for one of the following: The override method with an additional parameter from the extension of the previous level, if such a method exists The base virtual method, if no override methods with additional parameters declared within lower-level extensions exist In both cases, you should attach the  PXOverride  attribute to the override       method declared within the BLC extension, as described in the following sections below: Override Method That Is Added to the Override Method Queue Override Method That Is Added to the Override Method QueueOverride Method That Replaces the Original Method Override Method That Replaces the Original MethodOverride Method That Is Added to the Override Method Queue By declaring an override method with exactly the same signature as the overridden base virtual         method has, you extend the base method execution. The base BLC method is replaced at run         time with the queue of methods, which starts with the base BLC method. When the system         invokes the base method, all methods in the queue are executed sequentially, from the first         one to the last one. The lower the level the BLC extension has, the earlier the system         invokes the override method. If the system has invoked the base method, you have no option         to prevent the override method queue from execution. To prevent the base method executions,         see the  Override Method That Replaces the Original Method Override Method That Replaces the Original Method section below. To add an override method that is added to the override method queue, perform the following      actions: Create the graph extension, as described in  To Start the Customization of a Graph. In the Code Editor, click  View Source  to view the code of the base             graph in the  Source Code Browser. In an instance of  Acumatica ERP, a repository with the original C# source code of the application is kept in the                  \App_Data\CodeRepository  folder of the website. In the browser, select and copy the code of the method. In the Code Editor, paste the method code in the graph extension. In the graph extension, insert the  PXOverride  attribute immediately       before the method signature. Clear the method body. Develop the code of the method. Click  Save  in Code Editor to save your changes. Override Method That Replaces the Original Method The override method with an additional parameter replaces the base BLC virtual method. When     the virtual method is invoked, the system invokes the override method with an additional     parameter of the highest-level BLC extension. The system passes a link to the override method     with an additional parameter from the extension of the previous level, if such a method exists,     or to the base virtual method. You use a delegate as an additional parameter to encapsulate the method with exactly the same         signature as the base virtual method. If the base virtual method contains a list of         parameters, then you should not use the same list of parameters when you declare the         override method with an additional parameter. To declare a  MyMethod          override method with an additional parameter within a BLC extension, you can use the         following         example. 
public class BaseBLCExt : PXGraphExtension<BaseBLC>
{
  public delegate ReturnType MyMethodDelegate([List of Parameters]); 
  [PXOverride]
  public ReturnType MyMethod([List of Parameters,] MyMethodDelegate baseMethod)
  {
    return baseMethod(adapter);
  }
} You can decide whether to call the method pointed to by the delegate. By invoking the base         method, you also start the execution of the override method queue. To add an override method that replaces the base BLC virtual method, perform the following           actions: Create the graph extension, as described in  To Start the Customization of a Graph. In the Code Editor, click  Override Method , as shown in the             screenshot below. In the  Selected  column of the  Select Methods to               Override  dialog box, which opens, select the method to be overridden. Click  Save  to add the code template for the override method to             the graph extension. Selecting a method to be overridden Once the override method template has been created (see the following screenshot), you         can implement the needed code within the template. Viewing the override method template in the Code Editor When you publish the customization project, the platform saves the graph extension as a C#      source code file in the  App_RuntimeCode  folder of the website.     You can later develop the event handler in Microsoft Visual Studio. (See  Integrating the Project Editor with Microsoft Visual Studio for details.) ]]></column>
		</row>
		<row PageID="a0e0c90e-daf2-44c1-a4bc-b6dd4cda0580" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="69f8a2c4-4840-0212-a420-188e1087f165" RecordSourceID="22377">
			<column name="Content"><![CDATA[
In a business logic controller (BLC, also referred to as ''graph''), a ''data view'' is a <tt>PXView</tt> object that is used to access and manipulate data. In an ASPX page, to obtain data for controls, each container has to be bound to a data view of the BLC that is bound to the <tt>PXDataSource</tt> control of the page.{br}

A data view object contains two main parts:[anchor|#_15204c1d-a01d-4e6a-ad5a-389eea45f9af]
*The BQL command, which is defined by the type of the data view
*The optional delegate, which constructs the data set that is returned instead of the result of the execution of the BQL command
{br}

In a graph extension, you can include the following member types:[anchor|#_a9508273-f706-4a94-a483-e88b5e1fc82c]
*Declaration of a custom data view
*Redefinition for an existing data view
*Declaration of the delegate for an existing data view
*An override method for an existing data view delegate
{br}

To declare a custom data view in a graph extension, you can follow the instructions described in [HelpRoot_Dev_Customization\CG_GL_BL_Graph_NewMember|To Add a New Member].{br}

For detailed information on customizing a data view, see the following topics:[anchor|#ul_xtf_5wp_gq]
*[HelpRoot_Dev_Customization\CG_GL_BL_Graph_OverrideDataView|To Override a Data View]
*[HelpRoot_Dev_Customization\CG_GL_BL_Graph_AddDataViewDelegate|To Add a Data View Delegate]
*[HelpRoot_Dev_Customization\CG_GL_BL_Graph_OverrideDataViewDelegate|To Override a Data View Delegate]
]]></column>
			<column name="PlainText"><![CDATA[Data View In a business logic controller (BLC, also referred to as  graph ), a  data view  is       a  PXView  object that is used to access and manipulate data. In an ASPX       page, to obtain data for controls, each container has to be bound to a data view of the BLC       that is bound to the  PXDataSource  control of the page. A data view object contains two main parts: The BQL command, which is defined by the type of the data view The optional delegate, which constructs the data set that is returned instead of the           result of the execution of the BQL command In a graph extension, you can include the following member types: Declaration of a custom data view Redefinition for an existing data view Declaration of the delegate for an existing data view An override method for an existing data view delegate To declare a custom data view in a graph extension, you can follow the instructions described       in  To Add a New Member. For detailed information on customizing a data view, see the following topics: To Override a Data ViewTo Add a Data View DelegateTo Override a Data View Delegate]]></column>
		</row>
		<row PageID="5312e75a-6f0a-4b2c-a28c-38da20782087" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="bc0dad74-6b17-c37d-b0ab-3327f954facf" RecordSourceID="22377">
			<column name="Content"><![CDATA[
To modify a data view, you have to redefine the data view in the graph extension class. The data view redefined within a BLC extension completely replaces the base data view within the ''Views'' collection of a graph instance, including all attributes attached to the data view declared within the base graph. You can either attach the same set of attributes to the data view or completely redeclare the attributes. For details, see [HelpRoot_Dev_Customization\CG_Platform_TO_Code_CS_GraphExtensions|Graph Extensions]. The data view must have exactly the same identifier, which is referred to in the appropriate container in the ASPX page.{br}

To redefine a data view in the graph extension, perform the following actions:[anchor|#_f65bb023-c21f-464e-a7b0-733eeaa153a0]
#Create the graph extension, as described in [HelpRoot_Dev_Customization\CG_GL_BL_Graph_ToOpen|To Start the Customization of a Graph], if required.
#In the Code Editor, click '''View Source''' to view the code of the base graph in the [HelpRoot_Dev_Customization\CG_Platform_Tools_SM204570|Source Code Browser].
#:((({S:Warn}In an instance of Acumatica ERP, a repository with the original C# source code of the application is kept in the <tt>\App&#95;Data\CodeRepository</tt> folder of the website.
)))
#In the browser, select and copy the data view declaration.
#In the Code Editor, paste the data view declaration in the graph extension.
#In the graph extension, redefine the data view declaration as required.
#Click '''Save''' in the Code Editor to save your changes.
]]></column>
			<column name="PlainText"><![CDATA[To Override a Data View To modify a data view, you have to redefine the data view in the graph extension class. The       data view redefined within a BLC extension completely replaces the base data view within the          Views  collection of a graph instance, including all attributes attached to the data       view declared within the base graph. You can either attach the same set of attributes to the       data view or completely redeclare the attributes. For details, see  Graph Extensions. The data view must have exactly the       same identifier, which is referred to in the appropriate container in the ASPX page. To redefine a data view in the graph extension, perform the following actions: Create the graph extension, as described in  To Start the Customization of a Graph, if      required. In the Code Editor, click  View Source  to view the code of the base           graph in the  Source Code Browser. In an instance of  Acumatica ERP, a repository with the original C# source code of the application is kept in the                \App_Data\CodeRepository  folder of the website. In the browser, select and copy the data view declaration. In the Code Editor, paste the data view declaration in the graph extension. In the graph extension, redefine the data view declaration as required. Click  Save  in the Code Editor to save your changes. ]]></column>
		</row>
		<row PageID="f3c57501-ccca-4d62-93d2-7eb4ea8e377f" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="df3a39d0-ae23-387f-10f5-9391ee2f6cb0" RecordSourceID="22377">
			<column name="Content"><![CDATA[
By default, when a data view object is requested by the UI or you invoke the <tt>Select()</tt> method on the object, the system executes the query specified in the data view declaration. However you can define a dynamic query, which is an optional graph method (called the data view delegate) that is executed when the data view is requested. If no dynamic query is defined in the graph, Acumatica Framework executes the BQL statement from the data view declaration.{br}

You can use the data view delegate in the following cases:[anchor|#_8f35975d-7d5b-4298-beb3-31e731f613f3]
*If you construct the query dynamically at run time by adding <tt>Where&lt;&gt;</tt> and <tt>Join&lt;&gt;</tt> clauses depending on some condition, typically a filter
*If the query retrieves data fields that cannot be calculated declaratively by attributes—for instance, if you retrieve values aggregated by calculated data fields
*If the result set has data records that aren&rsquo;t retrieved from the database and are composed dynamically in code
In a graph extension, to define the delegate for a data view, you should redeclare the data view and add a method that has the same name as the data view but uses a different case of the first letter (for example, if the data view name is ''MyDataView'', the name of the delegate must be ''myDataView''). The delegate returns an <tt>IEnumerable</tt> object, as shown in the code below.{{{{// The delegate for the MyDataView data view
protected virtual IEnumerable myDataView()
{
  // The code to be used to construct the query dynamically at run time, execute
  // the query, and return the list of retrieved records
}
}}}}((({S:Warn}When you declare or alter a data view delegate within a graph extension, the new delegate is attached to the corresponding data view. To query a data view declared within the base graph or lower-level extension from the data view delegate, you should redeclare the data view within the graph extension. You do not need to redeclare a generic <tt>PXSelect&lt;Table&gt;</tt> data member in the graph extension when it will not be used from the data view delegate. For details, see [HelpRoot_Dev_Customization\CG_Platform_TO_Code_CS_GraphExtensions|Graph Extensions].
))){br}

You can add a data view delegate to a custom graph or to an extension for an existing graph, which is saved in the appropriate ''Code'' item of the customization project. See [HelpRoot_Dev_Customization\CG_GL_BL_Graph_NewGraph|To Create a Custom Graph] and [HelpRoot_Dev_Customization\CG_GL_BL_Graph_ToOpen|To Start the Customization of a Graph] for details.{br}

If the project has not been published, you can use only the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_CodeEditor|Code Editor] to add a new member to the graph code.{br}

After the customization project has been published, the code is also saved in the corresponding C# file in the <tt>App&#95;RuntimeCode</tt> folder of the website. (See [HelpRoot_Dev_Customization\CG_Platform_Framework_CS|Changes in the Application Code (C#)] for details.) You can open the file in Microsoft Visual Studio and use Visual Studio to add a data view delegate to the graph code. To do this, perform the following actions:[anchor|#_b3ff6a52-228c-4f04-b26a-98032f37bde5]
#In Visual Studio, click '''File &gt; Open &gt; Web Site''', and select your Acumatica ERP development environment.
#Open the <tt>App&#95;RuntimeCode\&lt;CodeItemName&gt;.cs</tt> file.
#In the code, develop the delegate for the data view.
#:((({S:Warn}An example of implementation of a data view delegate for a custom graph is described in Step 11.7 of the [http://acumaticaopenuniversity.com/wp-content/uploads/2016/10/T300-Acumatica-Customization-Platform-6.0.pdf|T300 Acumatica Customization Platform] course. See [HelpRoot_Dev_Customization\HowACEDataDelegate|Declaring or Altering a BLC Data View Delegate] for an example of a data view delegate for a graph extension.
)))
#Debug the code by using Visual Studio, as described in [HelpRoot_Dev_Customization\CG_GL_BL_Graph_ToDebug|To Debug the Customization Code].
#Save the file.
#In the Customization Project Editor, select the '''Files''' node in the navigation pane.
#On the Custom Files page, which opens, click '''Detect Modified Files''' on the page toolbar.
#:((({S:Warn}The customization platform compares the content of each file added to the site with the content of the associated item of the customization project in the database. If a difference is detected, the platform opens the '''Modified Files Detected''' dialog box so you can resolve the detected conflicts. You can either update the customization project in the database or discard the file changes in the file system to resolve the conflicts.
)))
#In the '''Modified Files Detected''' dialog box, which opens, ensure that the modified code file is selected.
#Click '''Update Customization Project''' on the dialog box toolbar to update the ''Code'' item that is saved in the database.
]]></column>
			<column name="PlainText"><![CDATA[To Add a Data View Delegate By default, when a data view object is requested by the UI or you invoke the          Select()  method on the object, the system executes the query specified in       the data view declaration. However you can define a dynamic query, which is an optional graph       method (called the data view delegate) that is executed when the data view is requested. If no       dynamic query is defined in the graph,  Acumatica Framework       executes the BQL statement from the data view declaration. You can use the data view delegate in the following cases: If you construct the query dynamically at run time by adding              Where<>  and  Join<>  clauses depending on some           condition, typically a filter If the query retrieves data fields that cannot be calculated declaratively by           attributes—for instance, if you retrieve values aggregated by calculated data fields If the result set has data records that aren't retrieved from the database and are           composed dynamically in code In a graph extension, to define the delegate for a data view, you should redeclare the       data view and add a method that has the same name as the data view but uses a different case       of the first letter (for example, if the data view name is  MyDataView , the name of the       delegate must be  myDataView ). The delegate returns an  IEnumerable        object, as shown in the code         below. // The delegate for the MyDataView data view
protected virtual IEnumerable myDataView()
{
  // The code to be used to construct the query dynamically at run time, execute
  // the query, and return the list of retrieved records
} When         you declare or alter a data view delegate within a graph extension, the new delegate is         attached to the corresponding data view. To query a data view declared within the base graph         or lower-level extension from the data view delegate, you should redeclare the data view         within the graph extension. You do not need to redeclare a generic            PXSelect<Table>  data member in the graph extension when it will not         be used from the data view delegate. For details, see  Graph Extensions. You can add a data view delegate to a custom graph or to an extension for an existing graph,       which is saved in the appropriate  Code  item of the customization project. See  To Create a Custom Graph and  To Start the Customization of a Graph for       details. If the project has not been published, you can use only the  Code Editor to add a new member to the graph code. After the customization project has been published, the code is also saved in the corresponding       C# file in the  App_RuntimeCode  folder of the website. (See  Changes in the Application Code (C#) for details.) You can open the file in Microsoft       Visual Studio and use Visual Studio to add a data view delegate to the graph code. To do this,       perform the following actions: In Visual Studio, click  File > Open > Web Site , and select your           Acumatica ERP development environment. Open the  App_RuntimeCode\<CodeItemName>.cs  file. In the code, develop the delegate for the data view. An example of implementation             of a data view delegate for a custom graph is described in Step 11.7 of the  T300 Acumatica Customization Platform T300 Acumatica Customization Platform course.             See  Declaring or Altering a BLC Data View Delegate for an example of a data view delegate for a             graph extension. Debug the code by using Visual Studio, as described in  To Debug the Customization Code. Save the file. In the Customization Project Editor, select the  Files  node in the           navigation pane. On the Custom Files page, which opens, click  Detect Modified             Files  on the page toolbar. The customization platform compares the             content of each file added to the site with the content of the associated item of the             customization project in the database. If a difference is detected, the platform opens             the  Modified Files Detected  dialog box so you can resolve the             detected conflicts. You can either update the customization project in the database or             discard the file changes in the file system to resolve the conflicts. In the  Modified Files Detected  dialog box, which opens, ensure           that the modified code file is selected. Click  Update Customization Project  on the dialog box toolbar to           update the  Code  item that is saved in the database. ]]></column>
		</row>
		<row PageID="d50ee403-753c-41b9-b996-90dad1f2e98e" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="903cb95c-bf40-cf5a-0064-8a68f7b40de2" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can modify the data view delegate—that is, the method that is invoked when the records are retrieved through the data view. To do this, perform the following actions:[anchor|#_f65bb023-c21f-464e-a7b0-733eeaa153a0]
#Create the graph extension, as described in [HelpRoot_Dev_Customization\CG_GL_BL_Graph_ToOpen|To Start the Customization of a Graph], if required.
#In the Code Editor, click '''View Source''' to view the code of the base graph in the [HelpRoot_Dev_Customization\CG_Platform_Tools_SM204570|Source Code Browser].
#:((({S:Warn}In an instance of Acumatica ERP, a repository with the original C# source code of the application is kept in the <tt>\App&#95;Data\CodeRepository</tt> folder of the website.
)))
#In the browser, select and copy the data view declaration and the data view delegate.
#:((({S:Warn}The override data view delegate must have exactly the same signature—the return value, the name of the method, and any method parameters—as the base data view delegate.
)))
#In the Code Editor, paste the code in the graph extension.
#:((({S:Warn}When you declare or alter a data view delegate within a graph extension, the new delegate is attached to the corresponding data view. To query a data view declared within the base graph or a lower-level extension from the data view delegate, you should redeclare the data view within the graph extension. You do not need to redeclare a generic <tt>PXSelect&lt;Table&gt;</tt> data member in the graph extension when it will not be used from the data view delegate. For details, see [HelpRoot_Dev_Customization\CG_Platform_TO_Code_CS_GraphExtensions|Graph Extensions].
)))
#In the graph extension, rewrite the data view delegate code as you need to.
#Click '''Save''' in the Code Editor to save your changes.
]]></column>
			<column name="PlainText"><![CDATA[To Override a Data View Delegate You can modify the data view delegate—that is, the method that is invoked when the records are    retrieved through the data view. To do this, perform the following actions: Create the graph extension, as described in  To Start the Customization of a Graph, if      required. In the Code Editor, click  View Source  to view the code of the base           graph in the  Source Code Browser. In an instance of  Acumatica ERP, a repository with the original C# source code of the application is kept in the                \App_Data\CodeRepository  folder of the website. In the browser, select and copy the data view declaration and the data view             delegate. The override data view delegate must have exactly the same signature—the             return value, the name of the method, and any method parameters—as the base data view             delegate. In the Code Editor, paste the code in the graph extension. When you declare or alter a             data view delegate within a graph extension, the new delegate is attached to the             corresponding data view. To query a data view declared within the base graph or a             lower-level extension from the data view delegate, you should redeclare the data view             within the graph extension. You do not need to redeclare a generic                PXSelect<Table>  data member in the graph extension when it will             not be used from the data view delegate. For details, see  Graph Extensions. In the graph extension, rewrite the data view delegate code as you need to. Click  Save  in the Code Editor to save your changes. ]]></column>
		</row>
		<row PageID="3693f848-4a5a-41fd-80e9-c0c7cfc38f1a" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="4312015d-0ab2-b75c-3766-add0577c69fb" RecordSourceID="22377">
			<column name="Content"><![CDATA[
An ''action'' is a graph member of the <tt>PXAction</tt> type. An action always has the delegate defined. Every action is represented by the <tt>PXAction</tt> object and placed in the ''Actions'' collection of the appropriate graph. To construct an instance of the <tt>PXAction</tt> class, you use a graph member of the <tt>PXAction</tt> type and a delegate from the highest-level extension discovered.{br}

To modify the business logic of an action that is defined within a graph, you should override the action delegate.{br}

To rename, disable, or hide an action button, you should override the action attributes.{br}

The redefined action delegate must have exactly the same signature—that is, the return value, the name of the method, and any method parameters—as the base action delegate has. You always have to redefine the action delegate to alter either its delegate or the attributes attached to the action. To use the action declared within the base graph or a lower-level extension from the action delegate, you should redefine the generic {{PXAction<TNode>}} data member within the graph extension. You do not need to redefine the data member when it is not meant to be used from the action delegate. For details, see [HelpRoot_Dev_Customization\CG_Platform_TO_Code_CS_GraphExtensions|Graph Extensions]. When you redefine an action delegate, you have to repeat the attributes attached to the action. Every action delegate must have <tt>PXButtonAttribute</tt> (or the derived attribute) and <tt>PXUIFieldAttribute</tt> attached.{br}

For detailed information on customizing an action, see the following topics:[anchor|#ul_xtf_5wp_gq]
*[HelpRoot_Dev_Customization\CG_GL_BL_Action_ToStart|To Start the Customization of an Action]
*[HelpRoot_Dev_Customization\CG_GL_BL_Graph_OverrideActionDelegate|To Override an Action Delegate Method]
*[HelpRoot_Dev_Customization\CG_GL_BL_Graph_RenameActionButton|To Rename an Action Button]
*[HelpRoot_Dev_Customization\CG_GL_BL_Graph_DisableAction|To Disable or Enable an Action]
*[HelpRoot_Dev_Customization\CG_GL_BL_Graph_HideShowAction|To Hide or Show an Action]

==Related Articles==
*[HelpRoot_Dev_Customization\CG_Platform_TO_Code_GraphExtensions_Action|Customization of an Action]
*[HelpRoot_Dev_Platform\BL__con_Attr_Actions| Action Attributes]
*[https://help.acumatica.com/Main?ScreenId=ShowWiki&pageid=e1a6f32e-fa9b-010a-b85f-0b2c2ffa0fea|PXButtonAttribute Class]
*[https://help.acumatica.com/Main?ScreenId=ShowWiki&pageid=ea7ce94e-4b3e-0f91-df1d-a4ce8023b184|PXUIFieldAttribute Class]
*[HelpRoot_Dev_Customization\CG_GL_items_ConfigureActions|To Configure Actions]]]></column>
			<column name="PlainText"><![CDATA[Action An  action  is a graph member of the  PXAction  type. An action always       has the delegate defined. Every action is represented by the  PXAction        object and placed in the  Actions  collection of the appropriate graph. To construct an       instance of the  PXAction  class, you use a graph member of the          PXAction  type and a delegate from the highest-level extension       discovered. To modify the business logic of an action that is defined within a graph, you should override       the action delegate. To rename, disable, or hide an action button, you should override the action attributes. The redefined action delegate must have exactly the same signature—that is, the return       value, the name of the method, and any method parameters—as the base action delegate       has. You always have to redefine the action delegate to alter either its delegate or the       attributes attached to the action. To use the action declared within the base graph or a       lower-level extension from the action delegate, you should redefine the generic          PXAction<TNode>  data member within the graph extension. You do not need       to redefine the data member when it is not meant to be used from the action delegate. For       details, see  Graph Extensions. When you redefine an       action delegate, you have to repeat the attributes attached to the action. Every action       delegate must have  PXButtonAttribute  (or the derived attribute) and          PXUIFieldAttribute  attached. For detailed information on customizing an action, see the following topics: To Start the Customization of an ActionTo Override an Action Delegate MethodTo Rename an Action ButtonTo Disable or Enable an ActionTo Hide or Show an ActionPXButtonAttribute Class PXUIFieldAttribute Class ]]></column>
		</row>
		<row PageID="3e5693da-8e64-4586-9b82-dcfdda267e2c" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="bf5e1bd8-7ea7-3995-cdd5-99e12a7a3dab" RecordSourceID="22377">
			<column name="Content"><![CDATA[
If you need to customize an action represented by a button on a form, perform the following actions:[anchor|#_6b9f26ea-53b9-4c41-9950-b0eb2a11684c]
#To find the declaration of the action, do the following:
##Open the form in the browser, and make the button visible on the form (if it isn&rsquo;t when the form is brought up).
##On the form title bar, click '''Customization &gt; Inspect Element''' to launch the [HelpRoot_Dev_Customization\CG_Platform_Tools_Inspector|Element Inspector].
##On the form, click the button to open the [HelpRoot_Dev_Customization\CG_Platform_Tools_Inspector_ElProperiesDlg|Element Properties] dialog box for the button.
##:((({S:Warn}If the action command is a part of an action menu, open the menu to display the command and use the keyboard shortcut Ctrl+Alt+Click to inspect the action item in the menu, as shown in the following screenshot.[anchor|#_38086233-49b6-4d81-9e64-98de8e7f4045][anchor|#_667550d1-d933-4f99-a4f9-60397be27a51][image:CustomizationPlatform/images/CG_GL_BL_Action_ToStart.png|popup|Displaying the action name in the Element Properties dialog box|430px]
)))
##In the dialog box, click '''Actions &gt; View Business Logic Source''' to open the source code of the graph whose name is displayed in the Business Logic box of the Element Properties dialog box.
##:((({S:Warn}In an instance of Acumatica ERP, the repository with the original C# source code of the application is kept in the <tt>\App&#95;Data\CodeRepository</tt> folder of the website.
)))
##In the '''Methods''' list of the [HelpRoot_Dev_Customization\CG_Platform_Tools_SM204570|Source Code] browser, which opens for the graph, search for and click the action name to display the action delegate method in the work area of the browser, as the following screenshot shows.[anchor|#_f1818fc6-4822-4026-b32d-52c2cabeab7d][image:CustomizationPlatform/images/CG_GL_BL_Action_ToStart_2.png|popup|Viewing the action delegate method in the Source Code browser|450px]
##If the search fails, try to find the action declaration in the base class of the graph.
#:((({S:Warn}If the button has an unique name, you can also find the action declaration in the Source Code Browser, as described in [HelpRoot_Dev_Customization\CG_GL_Stages_Explore_FindCode|To Find Source Code by a Fragment], by using the button name as a code fragment.
)))
#Explore the action declaration in the source code of the original graph.
#Select and copy the action declaration.
#Create an extension for the graph, as described in [HelpRoot_Dev_Customization\CG_GL_BL_Graph_ToOpen|To Start the Customization of a Graph], if needed.
#In the graph extension, paste the action declaration and develop the needed code to change the behavior and appearance of the action.
]]></column>
			<column name="PlainText"><![CDATA[To Start the Customization of an Action If you need to customize an action represented by a button on a form, perform the following         actions: To find the declaration of the action, do the following: Open the form in the browser, and make the button visible on the form (if it isn't               when the form is brought up). On the form title bar, click  Customization > Inspect Element  to launch the  Element Inspector. On the form, click the button to open the  Element                                 Properties Element Properties dialog box for the button. If the action                                 command is a part of an action menu, open the menu to display the                                 command and use the keyboard shortcut Ctrl+Alt+Click to inspect the                                 action item in the menu, as shown in the following screenshot. Displaying the action name in the Element Properties                                         dialog box In the dialog box, click  Actions > View Business Logic Source                              to open the source code of the graph whose name is displayed in the                             Business Logic box of the Element Properties dialog box. In an                                 instance of  Acumatica ERP, the repository with the original C# source code of the                                 application is kept in the                                      \App_Data\CodeRepository  folder of the                                 website. In the  Methods  list of the  Source Code Source Code browser,                             which opens for the graph, search for and click the action name to                             display the action delegate method in the work area of the browser, as                             the following screenshot shows. Viewing the action delegate method in the Source Code                                     browser If the search fails, try to find the action declaration in the base class of the               graph. If the button has an unique name, you can also find the action declaration in             the Source Code Browser, as described in  To Find Source Code by a Fragment, by using the button name as a code fragment. Explore the action declaration in the source code of the original graph. Select and copy the action declaration. Create an extension for the graph, as described in  To Start the Customization of a Graph, if needed. In the graph extension, paste the action declaration and develop the needed code to           change the behavior and appearance of the action. ]]></column>
		</row>
		<row PageID="33ec6d90-f8a1-4f57-811b-2de3fd9d1ea6" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="c70706ae-b22d-dfc5-90f2-4ba66118e560" RecordSourceID="22377">
			<column name="Content"><![CDATA[
With the technology based on extension models, an action from base graph is always completely replaced by the identically named action declared within a graph extension.{br}

To override an action delegate method in a graph extension, you should declare both the graph member of the <tt>PXAction</tt> type and the delegate. You should attach a new set of attributes to the action delegate declared within the graph extension. Also, you need to invoke the <tt>Press()</tt> method on the base graph action. Because you have redeclared the member of <tt>PXAction</tt>, you have prevented the action delegate execution from infinite loops.((({S:Warn}If you have a customization that replaces an original action declaration statically, after you upgrade Acumatica ERP to a new version, new functionality of the action may became unavailable.
))){br}

Do the following to override an action delegate method:[anchor|#_8afd03cc-a710-4023-949e-2d489c9fc5fd]
#Explore the original action declaration and copy the declaration to the graph extension, as described in [HelpRoot_Dev_Customization\CG_GL_BL_Action_ToStart|To Start the Customization of an Action].
#:((({S:Warn}We recommend that you not remove or change any attributes of the action.
)))
#In the action declaration, replace the action delegate with the following code template.{{{{public virtual IEnumerable myAction(PXAdapter adapter)
{
  return Base.MyAction.Press(adapter);;
}
#endregion

}}}}
#In the code template, replace {{myAction}} and {{MyAction}} with the appropriate names.
#In the template, redefine the action delegate arguments and return type based on the signature of the base action delegate.
#Implement the needed code in the override action delegate.
#Click '''Save''' in the Code Editor to save your changes.
]]></column>
			<column name="PlainText"><![CDATA[To Override an Action Delegate Method With the technology based on extension models, an action from base graph is always completely       replaced by the identically named action declared within a graph extension. To override an action delegate method in a graph extension, you should declare both the graph       member of the  PXAction  type and the delegate. You should attach a new set       of attributes to the action delegate declared within the graph extension. Also, you need to       invoke the  Press()  method on the base graph action. Because you have       redeclared the member of  PXAction , you have prevented the action delegate       execution from infinite loops. If you have a customization that replaces an original         action declaration statically, after you upgrade  Acumatica ERP to a new version, new functionality of the action may became unavailable. Do the following to override an action delegate method: Explore the original action declaration and copy the declaration to the graph extension,           as described in  To Start the Customization of an Action. We             recommend that you not remove or change any attributes of the action. In the action declaration, replace the action delegate with the following code           template. public virtual IEnumerable myAction(PXAdapter adapter)
{
  return Base.MyAction.Press(adapter);;
}
#endregion
 In the code template, replace  myAction  and  MyAction            with the appropriate names. In the template, redefine the action delegate arguments and return type based on the           signature of the base action delegate. Implement the needed code in the override action delegate. Click  Save  in the Code Editor to save your changes. ]]></column>
		</row>
		<row PageID="c1cbe9cb-cfca-4720-a16a-38e003055690" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="566882ce-a672-2e66-3256-e1595b0c4907" RecordSourceID="22377">
			<column name="Content"><![CDATA[
To rename an action button, you should redefine the <tt>DisplayName</tt> parameter of the <tt>PXUIField</tt> attribute for the button.{br}

You can change attributes of an action button in one of the following ways:[anchor|#_15c69c72-f991-4bfc-8198-5f0f32c4f6fe]
*[[#_7ff62fb1-a453-4a27-925a-641eb6776463|Dynamically at run time, in the <tt>Initialize()</tt> method of the graph extension]
*[[#_7651431c-dc11-4cd9-8ba2-98c8c3c29147|Statically, by overriding the action attributes in the graph extension]
[anchor|#_7ff62fb1-a453-4a27-925a-641eb6776463]
==To Rename an Action Button Dynamically at Run Time==[anchor|#_b3b6461b-3710-450d-b9d6-847a03782ac7]
#Explore the original action declaration, as described in [HelpRoot_Dev_Customization\CG_GL_BL_Action_ToStart|To Start the Customization of an Action] but without copying the declaration to the graph extension.
#In the graph extension, add the following code.{{{{#region Extended initialization

public override void Initialize()
{
  base.Initialize();
  Base.MyAction.SetCaption("NEW NAME");
}
#endregion

}}}}
#In the added code, replace {{MyAction}} with the action name and specify the needed button name.
#Click '''Save''' in Code Editor to save the changes.
[anchor|#_7651431c-dc11-4cd9-8ba2-98c8c3c29147]
==To Rename an Action Button Statically==
To override action attributes in a graph extension statically, you should declare both the graph member of the <tt>PXAction</tt> type and the delegate. You should attach a new set of attributes to the action delegate, declared within the graph extension. Also, you need to invoke the <tt>Press()</tt> method on the base graph action. Because you have redeclared the member of <tt>PXAction</tt>, you have prevented the action delegate execution from infinite loops.((({S:Warn}If you have a customization that replaces an original action declaration statically, after you upgrade Acumatica ERP to a new version, the new functionality of the action may became unavailable.
))){br}

To rename an action button statically, perform the following actions:[anchor|#_8afd03cc-a710-4023-949e-2d489c9fc5fd]
#Explore the original action declaration, and copy the declaration to the graph extension, as described in [HelpRoot_Dev_Customization\CG_GL_BL_Action_ToStart|To Start the Customization of an Action].
#In the action declaration, specify the required name for the action button in the <tt>PXUIField</tt> attribute, as the following code snippet shows.{{{{...
[PXUIField(DisplayName = "NEW NAME", ...)]
...
}}}}
#:((({S:Warn}We recommend that you not remove or change other attributes of the action.
)))
#Replace the action delegate with the following code template.{{{{public virtual IEnumerable myAction(PXAdapter adapter)
{
  return Base.MyAction.Press(adapter);;
}
#endregion

}}}}
#In the code template, replace {{myAction}} and {{MyAction}} with the appropriate names.
#In the template, redefine the action delegate arguments and return type based on the signature of the base action delegate.
#Click '''Save''' in the Code Editor to save your changes.
]]></column>
			<column name="PlainText"><![CDATA[To Rename an Action Button To rename an action button, you should redefine the  DisplayName  parameter       of the  PXUIField  attribute for the button. You can change attributes of an action button in one of the following ways: Dynamically at run time, in the  Initialize()  method of             the graph extension Dynamically at run time, in the <tt>Initialize()</tt> method of the graph extensionStatically, by overriding the action attributes in the graph             extension Statically, by overriding the action attributes in the graph extensionTo Rename an Action Button Dynamically at Run Time Explore the original action declaration, as described in  To Start the Customization of an Action but without copying the declaration to the graph           extension. In the graph extension, add the following           code. #region Extended initialization

public override void Initialize()
{
  base.Initialize();
  Base.MyAction.SetCaption("NEW NAME");
}
#endregion
 In the added code, replace  MyAction  with the action name and specify           the needed button name. Click  Save  in Code Editor to save the changes. To Rename an Action Button Statically To override action attributes in a graph extension statically, you should declare both the         graph member of the  PXAction  type and the delegate. You should attach a         new set of attributes to the action delegate, declared within the graph extension. Also, you         need to invoke the  Press()  method on the base graph action. Because you         have redeclared the member of  PXAction , you have prevented the action         delegate execution from infinite loops. If you have a customization that replaces an           original action declaration statically, after you upgrade  Acumatica ERP to a new version, the new functionality of the action may became         unavailable. To rename an action button statically, perform the following actions: Explore the original action declaration, and copy the declaration to the graph             extension, as described in  To Start the Customization of an Action. In the action declaration, specify the required name for the action button in the                PXUIField  attribute, as the following code snippet               shows. ...
[PXUIField(DisplayName = "NEW NAME", ...)]
... We recommend that you not remove or change other attributes of the               action. Replace the action delegate with the following code             template. public virtual IEnumerable myAction(PXAdapter adapter)
{
  return Base.MyAction.Press(adapter);;
}
#endregion
 In the code template, replace  myAction  and  MyAction              with the appropriate names. In the template, redefine the action delegate arguments and return type based on the             signature of the base action delegate. Click  Save  in the Code Editor to save your changes. ]]></column>
		</row>
		<row PageID="f4670986-f434-436d-85d6-1393259821e7" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="ea93d345-1c6b-b9df-7e8c-36fb7184a870" RecordSourceID="22377">
			<column name="Content"><![CDATA[
To disable or enable an action button, you can redefine the <tt>Enabled</tt> parameter of the <tt>PXUIField</tt> attribute for the button. However we recommend that you change the attribute dynamically at run time in the <tt>Initialize()</tt> method of the graph extension.((({S:Warn}If you have a customization that replaces an original action declaration statically, after you upgrade Acumatica ERP to a new version, any new functionality of the action may became unavailable.
))){br}

To disable or enable an action button, do the following:[anchor|#_b3b6461b-3710-450d-b9d6-847a03782ac7]
#Explore the original action declaration, as described in [HelpRoot_Dev_Customization\CG_GL_BL_Action_ToStart|To Start the Customization of an Action] but without copying the declaration to the graph extension.
#In the graph extension, add the following code.{{{{#region Extended initialization

public override void Initialize()
{
  base.Initialize();
  Base.MyAction.SetEnabled(false);
}
#endregion

}}}}
#:((({S:Warn}To enable the action button, use ''true'' instead of ''false'' for the <tt>SetEnabled</tt> method call.
)))
#In the added code, replace {{MyAction}} with the action name.
#Click '''Save''' in the Code Editor to save your changes.
]]></column>
			<column name="PlainText"><![CDATA[To Disable or Enable an Action To disable or enable an action button, you can redefine the  Enabled        parameter of the  PXUIField  attribute for the button. However we recommend       that you change the attribute dynamically at run time in the  Initialize()        method of the graph extension. If you have a customization that replaces an original         action declaration statically, after you upgrade  Acumatica ERP to a new version, any new functionality of the action may became unavailable. To disable or enable an action button, do the following: Explore the original action declaration, as described in  To Start the Customization of an Action but without copying the declaration to the graph           extension. In the graph extension, add the following       code. #region Extended initialization

public override void Initialize()
{
  base.Initialize();
  Base.MyAction.SetEnabled(false);
}
#endregion
 To       enable the action button, use  true  instead of  false  for the         SetEnabled  method call. In the added code, replace  MyAction  with the action name. Click  Save  in the Code Editor to save your changes. ]]></column>
		</row>
		<row PageID="65b43077-9080-418e-8949-3c96a5bede68" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="bec8f16d-c167-8cf0-90a8-27276b0d5616" RecordSourceID="22377">
			<column name="Content"><![CDATA[
To hide or show an action button, you should redefine the <tt>Visible</tt> parameter of the <tt>PXUIField</tt> attribute for the button.{br}

You can change attributes of an action button by using one of the following approaches:[anchor|#_15c69c72-f991-4bfc-8198-5f0f32c4f6fe]
*[[#_7ff62fb1-a453-4a27-925a-641eb6776463|Dynamically at run time, in the <tt>Initialize()</tt> method of the graph extension]
*[[#_7651431c-dc11-4cd9-8ba2-98c8c3c29147|Statically, by overriding the action attributes in the graph extension]
*[[#_5b243136-c707-4cc8-bed6-f1e39430c875|Statically, by changing visibility of the button in the ASPX code]
[anchor|#_7ff62fb1-a453-4a27-925a-641eb6776463]
==To Hide or Show an Action Button at Run Time==[anchor|#_b3b6461b-3710-450d-b9d6-847a03782ac7]
#Explore the original action declaration, as described in [HelpRoot_Dev_Customization\CG_GL_BL_Action_ToStart|To Start the Customization of an Action] but without copying the declaration to the graph extension.
#In the graph extension, add the following code.{{{{#region Extended initialization

public override void Initialize()
{
  base.Initialize();
  Base.MyAction.SetVisible(false);
}
#endregion

}}}}
#:((({S:Warn}To show the action button, use ''true'' instead of ''false'' for the <tt>SetVisible</tt> method call.
)))
#In the added code, replace {{MyAction}} with the action name.
#Click '''Save''' in the Code Editor to save your changes.
[anchor|#_7651431c-dc11-4cd9-8ba2-98c8c3c29147]
==To Hide or Show an Action Button Statically==
To override action attributes in a graph extension statically, you should declare both the graph member of the <tt>PXAction</tt> type and the delegate. You should attach a new set of attributes to the action delegate declared within the graph extension. Also, you need to invoke the <tt>Press()</tt> method on the base graph action. Because you have redeclared the member of <tt>PXAction</tt>, you prevent the action delegate execution from infinite loops.((({S:Warn}If you have a customization that replaces an original action declaration statically, after you upgrade Acumatica ERP to a new version, any new functionality of the action may became unavailable.
))){br}

To hide or show the action button, perform the following actions:[anchor|#_8afd03cc-a710-4023-949e-2d489c9fc5fd]
#Explore the original action declaration and copy the declaration to the graph extension, as described in [HelpRoot_Dev_Customization\CG_GL_BL_Action_ToStart|To Start the Customization of an Action].
#In the action declaration, set the <tt>Visible</tt> parameter of the <tt>PXUIField</tt> attribute to ''false'', as the following code snippet shows.
#:((({S:Warn}To show the action button, set the <tt>Visible</tt> parameter to ''true''.
))){{{{...
[PXUIField(…, Visible = false)]
...
}}}}
#:((({S:Warn}We recommend that you not remove or change other attributes of the action.
)))
#Replace the action delegate with the following code template.{{{{public virtual IEnumerable myAction(PXAdapter adapter)
{
  return Base.MyAction.Press(adapter);
}
}}}}
#In the code template, replace {{myAction}} and {{MyAction}} with the appropriate names.
#In the template, redefine the action delegate arguments and return type based on the signature of the base action delegate.
#Click '''Save''' in the Code Editor to save your changes.
[anchor|#_5b243136-c707-4cc8-bed6-f1e39430c875]
==To Hide or Show an Action Button in the ASPX Code==
If a callback command for the button is declared in the <tt>PXDataSource</tt> control, you can hide the button by customizing the ASPX code. To do this, perform the following actions:[anchor|#_8ce3dfa3-4ee0-4734-8144-a529536cbbf8]
#Open the form in the browser and make the button visible on the form.
#On the form title bar, click '''Customization &gt; Inspect Element''' to launch the [HelpRoot_Dev_Customization\CG_Platform_Tools_Inspector|Element Inspector].
#On the form, click the button to open the [HelpRoot_Dev_Customization\CG_Platform_Tools_Inspector_ElProperiesDlg|Element Properties] dialog box for the button.
#:((({S:Warn}If the button is a part of an action menu, inspect the menu button instead of the button.
)))
#In the dialog box, click '''Customize'''.
#If there is no currently selected customization project and the inspector opens the [HelpRoot_Dev_Customization\CG_Platform_Tools_Menu_SelectCustProjDlg|Select Customization Project Dialog Box], select an existing customization project or create a new one.
#:If there is no a ''Page'' item for the form in the customization project, the Acumatica Customization             Platform creates such item, adds the item to the project, and opens the form in the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_LayoutEditor|Screen Editor].
#In the Control Tree of the editor, click the arrow left of the <tt>PXDataSource</tt> node to expand it.
#Select the <tt>PXDSCallbackCommand</tt> element with the button name.
#Click the '''Layout Properties''' tab item to open the list of properties for the callback.
#Set the <tt>Visible</tt> property of the element to ''False'' to hide the button.
#:((({S:Warn}To show the button, set <tt>Visible</tt> property to ''True''.
)))
#Click '''Save''' to save your changes to the customization project.
]]></column>
			<column name="PlainText"><![CDATA[To Hide or Show an Action To hide or show an action button, you should redefine the  Visible  parameter    of the  PXUIField  attribute for the button. You can change attributes of an action button by using one of the following approaches: Dynamically at run time, in the  Initialize()  method of             the graph extension Dynamically at run time, in the <tt>Initialize()</tt> method of the graph extensionStatically, by overriding the action attributes in the graph             extension Statically, by overriding the action attributes in the graph extensionStatically, by changing visibility of the button in the ASPX           code Statically, by changing visibility of the button in the ASPX codeTo Hide or Show an Action Button at Run Time Explore the original action declaration, as described in  To Start the Customization of an Action but without copying the declaration to the graph           extension. In the graph extension, add the following       code. #region Extended initialization

public override void Initialize()
{
  base.Initialize();
  Base.MyAction.SetVisible(false);
}
#endregion
 To       show the action button, use  true  instead of  false  for the         SetVisible  method call. In the added code, replace  MyAction  with the action name. Click  Save  in the Code Editor to save your changes. To Hide or Show an Action Button Statically To override action attributes in a graph extension statically, you should declare both the         graph member of the  PXAction  type and the delegate. You should attach a         new set of attributes to the action delegate declared within the graph extension. Also, you         need to invoke the  Press()  method on the base graph action. Because you         have redeclared the member of  PXAction , you prevent the action delegate         execution from infinite loops. If you have a customization that replaces an original           action declaration statically, after you upgrade  Acumatica ERP to a new version, any new functionality of the action may became         unavailable. To hide or show the action button, perform the following actions: Explore the original action declaration and copy the declaration to the graph extension, as       described in  To Start the Customization of an Action. In the action declaration, set the  Visible  parameter of the                PXUIField  attribute to  false , as the following code snippet               shows. To show the action button, set the  Visible  parameter to                  true . ...
[PXUIField(…, Visible = false)]
... We recommend that you not remove or change other attributes of the               action. Replace the action delegate with the following code             template. public virtual IEnumerable myAction(PXAdapter adapter)
{
  return Base.MyAction.Press(adapter);
} In the code template, replace  myAction  and  MyAction  with       the appropriate names. In the template, redefine the action delegate arguments and return type based on the             signature of the base action delegate. Click  Save  in the Code Editor to save your changes. To Hide or Show an Action Button in the ASPX Code If a callback command for the button is declared in the  PXDataSource          control, you can hide the button by customizing the ASPX code. To do this, perform the         following actions: Open the form in the browser and make the button visible on the form. On the form title bar, click  Customization > Inspect Element  to launch the  Element Inspector. On the form, click the button to open the  Element Properties Element Properties             dialog box for the button. If the button is a part of an action menu, inspect the               menu button instead of the button. In the dialog box, click  Customize . If there is no currently selected customization project and the inspector opens the                Select Customization Project Dialog Box, select an existing             customization project or create a new one. If there is no a  Page  item for the               form in the customization project, the  Acumatica Customization             Platform creates such item, adds the item to the project, and opens the form in the  Screen Editor. In the Control Tree of the editor, click  the arrow left of the                PXDataSource  node to expand it. Select the  PXDSCallbackCommand  element with the button name. Click the  Layout Properties  tab item to open the list of             properties for the callback. Set the  Visible  property of the element to  False  to hide the               button. To show the button, set  Visible  property to                  True . Click  Save  to save your changes to the customization             project. ]]></column>
		</row>
		<row PageID="6e1b9ff0-1fd5-492a-ad1a-f7cee87a40d5" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="c7ae46d7-94fb-7386-dddd-afac5f6e80bd" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can use the platform to customize the database of an Acumatica ERP instance. The database customization can include changes in both the data and the schema of the database.{br}

To change the database schema, you can add to a customization project the following scripts:[anchor|#_a3267ca5-0588-49ec-9309-5b9eb98e918e]
*A script to create a custom table
*A script to create a custom column in an existing table
*A script to create an extension table for an existing table
*A custom script
{br}

When you publish a customization project with a database script, which changes the database schema, the script is executed. Changes to the database schema aren&rsquo;t deleted when you unpublish the project or delete the script and publish the project once more. You have to remove the changes to the database schema manually.{br}

For detailed information on creating custom database scripts and adding the scripts to a customization project, see the following topics:[anchor|#ul_xtf_5wp_gq]
*[HelpRoot_Dev_Customization\CG_GL_DBSchema_AddCustomTable|To Create a Custom Table]
*[HelpRoot_Dev_Customization\CG_GL_DBSchema_AddColunm|To Create a Custom Column in an Existing Table]
*[HelpRoot_Dev_Customization\CG_GL_DBSchema_CustomColumns|To Create an Extension Table]
*[HelpRoot_Dev_Customization\CG_GL_DBSchema_AddCustScript|To Add a Custom SQL Script to a Customization Project]

==Related Articles==
*[HelpRoot_Dev_Customization\CG_Platform_Framework_DBSchema|Changes in the Database Schema]
*[HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_SQLScriptDlg|SQL Script Editor]
*[HelpRoot_Dev_Customization\CG_GL_Items_DBScripts_AddingCustScript_HowCreate|Creating a Custom SQL Script]
*[HelpRoot_Dev_Customization\CG_GL_Items_DBScripts_Adding_Attr|Using the SQL Script Attributes]
*[HelpRoot_Dev_Customization\CG_GL_Items_DBScripts_WritingCustSQL|Writing Custom SQL Scripts for Interpretation]]]></column>
			<column name="PlainText"><![CDATA[Customizing the Database Schema You can use the platform to customize the database of an  Acumatica ERP instance. The database customization can include changes in both the data and the schema of       the database. To change the database schema, you can add to a customization project the following         scripts: A script to create a custom table A script to create a custom column in an existing table A script to create an extension table for an existing table A custom script When you publish a customization project with a database script, which changes the database       schema, the script is executed. Changes to the database schema aren't deleted when you       unpublish the project or delete the script and publish the project once more. You have to       remove the changes to the database schema manually. For detailed information on creating custom database scripts and adding the scripts to a       customization project, see the following topics: To Create a Custom TableTo Create a Custom Column in an Existing TableTo Create an Extension TableTo Add a Custom SQL Script to a Customization Project]]></column>
		</row>
		<row PageID="b18a0209-3408-4873-854c-75e7e7fb25a4" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="f7c4770b-ae35-aade-1f83-71db4e0b4502" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You use the Database Scripts page of the Customization Project Editor to add a custom table to a customization project. You can add a custom table to a project by adding the table schema or by adding a custom SQL script.{br}

Adding the table schema is the optimal way of adding custom tables to the project. When you publish the customization project, the platform executes each SQL script of the project to update the database. If an ''Sql'' item contains a custom database table definition, to update the database with the table schema, the Acumatica Customization             Platform checks whether a table with this name already exists in the database. If the table exists, the platform generates SQL statements to alter the existing table so that it matches the schema. The platform doesn&rsquo;t drop the existing table, and it keeps any data in it. This helps to deploy a newer version of the customization project to a system that is already in use. If the table doesn&rsquo;t exist, the platform generates SQL statements to create the table. SQL statements are generated in the SQL dialect of the database management system. Therefore, if you add custom tables to the project by adding the table schema, you keep the customization project independent from the database management system that hosts the database of Acumatica ERP. {br}

Alternatively, you can add custom tables by adding a custom SQL script that creates the table in the project, as described in [HelpRoot_Dev_Customization\CG_GL_Items_DBScripts_AddingCustScript|To Add a Custom SQL Script to a Project].((({S:Warn}The creation or modification of the System tables is forbidden. A customization project containing such changes will not pass validation tests. For details on the System tables, see [HelpRoot_Dev_Platform\DA__con_System_Application_Tables|System and Application Tables].
)))
==To Add a Custom Table to a Customization Project==[anchor|#_92bb4fae-db5a-4dad-ab6a-75d5dba09ecd]
#Create the needed table in the database by using a database administration tool, such as SQL Server Management Studio.
#:((({S:Warn}You have to use a naming convention that provides unique names for your custom tables so that they do not have the names of existing tables of Acumatica ERP.
)))
#Open the customization project in the Customization Project Editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)
#Click '''Database Scripts''' in the navigation pane to open the Database Scripts page.
#On the page toolbar, click '''Add''' > '''Custom Table Schema'''.
#In the '''Add Custom Table Schema''' dialog box, which opens, select the custom table in the '''Table''' box and click '''OK'''. 
#: Acumatica Customization             Platform generates the table schema and adds the schema to the customization project as an ''Sql'' item.

Below is an example of the ''Sql'' item that contains the table schema of the custom table ''RBProduct''.{{{{ &lt;Sql TableName="RBProduct" TableSchemaXml="#CDATA"&gt;
        &lt;CDATA name="TableSchemaXml"&gt;&lt;![CDATA[&lt;table name="RBProduct"&gt;
  &lt;col name="ProductID" type="Int" identity="true" /&gt;
  &lt;col name="ProductCD" type="NVarChar(15)" /&gt;
  &lt;col name="ProductName" type="NVarChar(50)" /&gt;
  &lt;col name="Active" type="Bit" /&gt;
  &lt;col name="StockUnit" type="NVarChar(20)" /&gt;
  &lt;col name="UnitPrice" type="Decimal(19,6)" /&gt;
  &lt;col name="MinAvailQty" type="Decimal(25,6)" /&gt;
  &lt;col name="TStamp" type="Timestamp" /&gt;
  &lt;index name="RBProduct_PK" clustered="true" primary="true" unique="true"&gt;
    &lt;col name="ProductID" /&gt;
  &lt;/index&gt;
&lt;/table&gt;]]&gt;&lt;/CDATA&gt;
    &lt;/Sql&gt;
}}}}]]></column>
			<column name="PlainText"><![CDATA[To Create a Custom Table You use the Database Scripts page of the  Customization Project Editor to add a custom table to a customization project. You can add a custom                     table to a project by adding the table schema or by adding a custom SQL                     script. Adding the table schema is the optimal way of adding custom tables to the                     project. When you publish the customization project, the platform executes each                     SQL script of the project to update the database. If an  Sql  item contains                     a custom database table definition, to update the database with the table                     schema, the  Acumatica Customization             Platform checks whether a table with this name already exists in the database. If the                     table exists, the platform generates SQL statements to alter the existing table                     so that it matches the schema. The platform doesn't drop the existing table, and                     it keeps any data in it. This helps to deploy a newer version of the                     customization project to a system that is already in use. If the table doesn't                     exist, the platform generates SQL statements to create the table. SQL statements                     are generated in the SQL dialect of the database management system. Therefore,                     if you add custom tables to the project by adding the table schema, you keep the                     customization project independent from the database management system that hosts                     the database of  Acumatica ERP.  Alternatively, you can add custom tables by adding a custom SQL script that                     creates the table in the project, as described in  To Add a Custom SQL Script to a Project. The creation or modification of the System tables is forbidden. A                         customization project containing such changes will not pass validation                         tests. For details on the System tables, see  System and Application Tables. To Add a Custom Table to a Customization Project Create the needed table in the database by using a database administration                         tool, such as SQL Server Management Studio. You have to use a naming                             convention that provides unique names for your custom tables so that                             they do not have the names of existing tables of  Acumatica ERP. Open the customization project in the  Customization Project Editor. (See  To Open a Project for                         details.) Click  Database Scripts  in the navigation pane to open the                         Database Scripts page. On the page toolbar, click  Add Custom Table Schema . In the  Add Custom Table Schema  dialog box, which                         opens, select the custom table in the  Table  box and                         click  OK .                                   Acumatica Customization             Platform generates the table schema and adds the schema to the customization                             project as an  Sql  item. Below is an example of the  Sql  item that contains the table schema of the                     custom table  RBProduct .  <Sql TableName="RBProduct" TableSchemaXml="#CDATA">
        <CDATA name="TableSchemaXml"><![CDATA[<table name="RBProduct">
  <col name="ProductID" type="Int" identity="true" />
  <col name="ProductCD" type="NVarChar(15)" />
  <col name="ProductName" type="NVarChar(50)" />
  <col name="Active" type="Bit" />
  <col name="StockUnit" type="NVarChar(20)" />
  <col name="UnitPrice" type="Decimal(19,6)" />
  <col name="MinAvailQty" type="Decimal(25,6)" />
  <col name="TStamp" type="Timestamp" />
  <index name="RBProduct_PK" clustered="true" primary="true" unique="true">
    <col name="ProductID" />
  </index>
</table>]]]]><![CDATA[></CDATA>
    </Sql> ]]></column>
		</row>
		<row PageID="78783859-14f5-4b5d-a4a4-03cca2772ad2" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="ce31f635-7752-1224-385b-fcfb16a4dcba" RecordSourceID="22377">
			<column name="Content"><![CDATA[
Because you can need a new column in an existing database table only for a bound data field, the Acumatica Customization             Platform automatically creates a custom column when you create a custom bound data field by using the New Field wizard.[anchor|#_9dc1c7b1-9478-4248-9dd3-fec98d38711d]{br}

To add a custom field as a new column that will be appended to the original table of Acumatica ERP, perform the following actions:[anchor|#_42f29f4f-1d62-47ee-aa55-91cafa905650]
#Open the '''Create New Field''' dialog box for the data access class [HelpRoot_Dev_Customization\CG_GL_BL_DAC_AddCustomField#_b4eba166-5f4f-4438-a03d-afa3f7ab6458|by using the Data Class Editor] or [HelpRoot_Dev_Customization\CG_GL_BL_DAC_AddCustomField#_8d5cd29f-d409-447c-9853-ef3632b73e14|by using the Layout Editor].
#In the dialog box, specify the custom field parameters and select ''DBTableColumn'' in the '''Storage Type''' box to make the system append the column to the original table in the database.
#Click '''OK''' to add the field to the data access class.
The New Field wizard includes an XML declaration of the new field in the ''DAC'' item for the modified data access class. If the ''DAC'' item for the modified data access class is absent in the customization project, the wizard creates the appropriate item. Also, the wizard creates a ''Table'' item with a description of the custom column to be created in the database table for the custom field.{br}

((({S:Warn}If a custom field is added to a DAC with <tt>PXProjectionAttribute</tt> (a projection view DAC), Customization Project Editor also automatically creates an extension of a DAC representing a database table with the same custom field. For details about data projections attributes, see [HelpRoot_Dev_Platform\BL__con_Attr_Projection|Data Projection].
))){br}

After you publish the customization project at least once, the database schema is changed. Changes to the database schema aren&rsquo;t deleted when you unpublish the project or delete the ''DAC'' and ''Table'' items and publish the project once more. You have to remove the changes manually.]]></column>
			<column name="PlainText"><![CDATA[To Create a Custom Column in an Existing Table Because you can need a new column in an existing database table only for a bound data field,       the  Acumatica Customization             Platform automatically creates a custom column when you create a custom bound data field by using       the New Field wizard. To add a custom field as a new column that will be appended to the original table of  Acumatica ERP, perform the following actions: Open the  Create New Field  dialog box for the data access class  by using the Data Class Editor by using the Data Class Editor or  by using the Layout Editor by using the Layout Editor. In the dialog box, specify the custom field parameters and select  DBTableColumn  in the                          Storage Type  box  to make the system append the column to the                     original table in the database. Click  OK  to add the field to the data access class. The New Field wizard includes an XML declaration of the new field in the  DAC  item for the modified data access class. If the  DAC  item for the modified data access class is absent in the customization project, the wizard creates the appropriate item. Also, the wizard creates a  Table  item with a description of the custom column to be created in the database table for the custom field. If a custom field is added to a DAC with  PXProjectionAttribute                  (a projection view DAC),  Customization Project Editor also automatically creates an extension of a DAC representing a database table                 with the same custom field. For details about data projections attributes, see  Data Projection. After you publish the customization project at least once, the database schema is changed.       Changes to the database schema aren't deleted when you unpublish the project or delete the          DAC  and  Table  items and publish the project once more. You have to remove the       changes manually. ]]></column>
		</row>
		<row PageID="5bed40cb-5224-404f-965e-a57880593de2" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="26e423f9-9f72-473f-4eb0-60ad63fa5f14" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The Acumatica Customization             Platform provides the following options to create a custom column in a table of the database:[anchor|#ul_gbb_fbz_zv]
*Add the column to the original table
*Create a separate table that is an extension of the original table, and add the column to the extension table
{br}

In some cases, you may need to store new field values in a separate table or use this table independently from the original database table. You can use the Acumatica Customization             Platform to create a separate extension database table. This table must include all main key fields from the original database table and your new fields. You should create a DAC extension that holds the new fields and is mapped to the extension table. The platform will automatically synchronize the extension table with the original database table by expanding every create, retrieve, update, and delete operation on the base (original) DAC to each discovered DAC extension that is mapped to an extension table.{br}

To declare a DAC extension that is mapped to an extension table, perform the following actions:[anchor|#_0784dda4-dbc9-4337-92f9-affa6bbfa260]
#Create an extension table in the database according to the requirements described in [HelpRoot_Dev_Customization\CG_GL_DBSchema_CustomColumns_ExtTable|Requirements for an Extension Table Schema].
#Declare a DAC extension mapped to the created table, as described in [HelpRoot_Dev_Customization\CG_GL_DBSchema_CustomColumns_DACExtTable|DAC Extension Mapped to an Extension Table].
#:By using the <tt>PXTable</tt> attribute, you specify that the DAC extension is mapped to the extension table with the same name.
]]></column>
			<column name="PlainText"><![CDATA[To Create an Extension Table The  Acumatica Customization             Platform provides the following options to create a custom column in a table of the database: Add the column to the original table Create a separate table that is an extension of the original table, and add the column to           the extension table In some cases, you may need to store new field values in a separate table or use this table    independently from the original database table. You can use the  Acumatica Customization             Platform to create a separate extension database table. This table must include all main key fields    from the original database table and your new fields. You should create a DAC extension that    holds the new fields and is mapped to the extension table. The platform will automatically    synchronize the extension table with the original database table by expanding every create,    retrieve, update, and delete operation on the base (original) DAC to each discovered DAC    extension that is mapped to an extension table. To declare a DAC extension that is mapped to an extension table, perform the following     actions: Create an extension table in the database according to the requirements described in  Requirements for an Extension Table Schema. Declare a DAC extension mapped to the created table, as described in  DAC Extension Mapped to an Extension Table. By using the                PXTable  attribute, you specify that the DAC extension is mapped to             the extension table with the same name. ]]></column>
		</row>
		<row PageID="d5881298-51ce-4ed9-8cef-2dddbb09261f" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="cccd2453-8383-20e0-fa0f-b81c985d14b6" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You should ensure that the following requirements are met when you create an extension table:[anchor|#ul_jy4_pq3_xm]
*The extension table should have the same set of main key columns as the original database table has.
*The extension table must include the following columns if they are declared within the original database table:
**{{[CompanyID][int] NOT NULL}}
**{{[DeletedDatabaseRecord][bit] NOT NULL}}
*For an extension table that can be used separately, you should also declare the following audit columns:
**{{[tstamp][timestamp] NULL}}
**{{[CreatedByID][uniqueidentifier] NOT NULL}}
**{{[CreatedByScreenID][char] ( 8 ) NOT NULL}}
**{{[CreatedDateTime][datetime] NOT NULL}}
**{{[LastModifiedByID][uniqueidentifier] NOT NULL}}
**{{[LastModifiedByScreenID][char] ( 8 ) NOT NULL}}
**{{[LastModifiedDateTime][datetime] NOT NULL}}
{br}

The example below shows the declaration of the <tt>InventoryItemTableExtension</tt> extension table. Notice that this table will not be used independently from the original database table.<source lang="csharp">
CREATE TABLE [dbo].[InventoryItemTableExtension]
(
    [CompanyID] [int] NOT NULL,
    [InventoryID] [int] NOT NULL,
    [DeletedDatabaseRecord] [bit] NOT NULL,
    [ExtTableDescr] [nvarchar](256) NULL
    CONSTRAINT [InventoryItemTableExtension_PK] PRIMARY KEY CLUSTERED 
    (
        [CompanyID] ASC,
        [InventoryID] ASC
    )
    WITH (PAD_INDEX  = OFF, 
          STATISTICS_NORECOMPUTE  = OFF, 
          IGNORE_DUP_KEY = OFF, 
          ALLOW_ROW_LOCKS  = ON, 
          ALLOW_PAGE_LOCKS  = ON) 
    ON [PRIMARY]
) ON [PRIMARY]
ALTER TABLE [dbo].[InventoryItemTableExtension] ADD  DEFAULT ((0))
    FOR [DeletedDatabaseRecord]
GO
</source>]]></column>
			<column name="PlainText"><![CDATA[Requirements for an Extension Table Schema You should ensure that the following requirements are met when you create an extension     table: The extension table should have the same set of main key columns as the original           database table has. The extension table must include the following columns if they are declared within the           original database table: [CompanyID][int] NOT NULL [DeletedDatabaseRecord][bit] NOT NULL For an extension table that can be used separately, you should also declare the following      audit columns: [tstamp][timestamp] NULL [CreatedByID][uniqueidentifier] NOT NULL [CreatedByScreenID][char] ( 8 ) NOT NULL [CreatedDateTime][datetime] NOT NULL [LastModifiedByID][uniqueidentifier] NOT NULL [LastModifiedByScreenID][char] ( 8 ) NOT NULL [LastModifiedDateTime][datetime] NOT NULL The example below shows the declaration of the  InventoryItemTableExtension        extension table. Notice that this table will not be used independently from the original       database       table. 
CREATE TABLE [dbo].[InventoryItemTableExtension]
(
    [CompanyID] [int] NOT NULL,
    [InventoryID] [int] NOT NULL,
    [DeletedDatabaseRecord] [bit] NOT NULL,
    [ExtTableDescr] [nvarchar](256) NULL
    CONSTRAINT [InventoryItemTableExtension_PK] PRIMARY KEY CLUSTERED 
    (
        [CompanyID] ASC,
        [InventoryID] ASC
    )
    WITH (PAD_INDEX  = OFF, 
          STATISTICS_NORECOMPUTE  = OFF, 
          IGNORE_DUP_KEY = OFF, 
          ALLOW_ROW_LOCKS  = ON, 
          ALLOW_PAGE_LOCKS  = ON) 
    ON [PRIMARY]
) ON [PRIMARY]
ALTER TABLE [dbo].[InventoryItemTableExtension] ADD  DEFAULT ((0))
    FOR [DeletedDatabaseRecord]
GO
 ]]></column>
		</row>
		<row PageID="6ec2fdc9-f489-468d-b0d6-1edbc908870f" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="03af5d42-3e76-57f5-c82b-7a66b9c48603" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can define a DAC extension mapped to an extension table by using either the default ''Inner Join'' way or the optional ''Left Outer Join'' way. To specify which way is used, you need to set the value for the <tt>IsOptional</tt> parameter of the <tt>PXTable</tt> attribute. By default, the system sets this parameter value to ''false''. You need to specify the <tt>IsOptional</tt> parameter value only if you need to set its value to ''true''.<source lang="csharp">
[PXTable(IsOptional = value)]
public class TableExtension : PXCacheExtension&lt;BaseDAC&gt;
{ ... }</source>
If the DAC contains surrogate and natural keys, then the <tt>PXTable</tt> attribute attached to the DAC extension should reference the surrogate key as well as other database key fields (but not the natural key). If the DAC doesn&rsquo;t have surrogate and natural keys, no key fields should be specified in the <tt>PXTable</tt> attribute. See the following code example of the declaration of the <tt>PXTable</tt> attribute with key references.<source lang="csharp">
[PXTable(typeof(BaseDAC.surrogateKey),
         typeof(BaseDAC.otherDBKeyField),
         IsOptional = value)]
public class TableExtension : PXCacheExtension&lt;BaseDAC&gt;
{ ... }</source>((({S:Warn}The natural key is a user-friendly value that is not used as a key in the database. The surrogate key, which is the internal value corresponding to the natural key, is not shown to the user and is assigned by the system. When you use a natural key, the DAC field that serves as a surrogate key is bound to the database key column, but is not marked as key within its attributes.
)))
In the sample code shown below, the <tt>Location</tt> database table contains both the surrogate <tt>LocationID</tt> key and the natural <tt>LocationCD</tt> key. The <tt>Location</tt> database table main key contains the <tt>BAccountID</tt> and <tt>LocationID</tt> columns. Because <tt>LocationCD</tt> is a natural key, we need to specify the corresponding surrogate key, <tt>LocationID</tt>, as well as the other database key field, <tt>BAccountID</tt>, in the <tt>PXTable</tt> attribute.<source lang="csharp">
[PXTable(typeof(Location.locationID),
         typeof(Location.bAccountID))]
public class LocationTableExtension : PXCacheExtension&lt;Location&gt;
{ ... }</source>[anchor|#_fed09a3f-917c-46b4-a6f7-bb523fb65cd8]
==The Left Outer Join Way==
The following example shows the declaration of a DAC extension mapped to an extension table with the ''Left Outer Join'' way. Notice that the <tt>IsOptional</tt> parameter of the <tt>PXTable</tt> attribute is set to <tt>true</tt>.<source lang="csharp">[PXTable(IsOptional = true)]
class LeftJoinTableExtension : PXCacheExtension&lt;BaseDAC&gt;
{
}</source>
The ''Left Outer Join'' way covers the common steps required to add an extension tables to a customization project. For details on populating an extension table with records, see [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_SQLScriptDlg|SQL Script Editor].{br}

The ''Left Outer Join'' way:[anchor|#ul_g1z_sq3_xm]
*Can be used when the original and extension database tables are not necessarily synchronized.
*Causes an extension table record to be created when the appropriate original table record is created or updated.
*Never excludes an original database table record from the result set.
*Calculates the default field values if no extension table record is found. 
*Can be used as a standalone DAC.

The following example shows the declaration of the <tt>InventoryItemTableExtension</tt> DAC extension mapped to the extension table with the ''Left Outer Join'' way.<source lang="csharp">
[PXTable(typeof(InventoryItem.inventoryID), IsOptional = true)]
public class InventoryItemTableExtension : PXCacheExtension&lt;InventoryItem&gt;
{
    #region ExtTableDescr
    public abstract class extTableDescr : PX.Data.IBqlField
    {
    }
    [PXDBString(255)]
    [PXDefault("Additional description")]
    [PXUIField(DisplayName = "Ext_Table Description")]
    public string ExtTableDescr { get; set; }
    #endregion
}</source>
Suppose that you have added the corresponding '''Ext&#95;Table Description''' control to the header area of the Stock Items (IN202500) form. If you open the form, by clicking navigation buttons on the form toolbar, you can ensure that all the stock items are visible, while the '''Ext&#95;Table Description''' control has the default ''Additional description'' value set, as the screenshot below illustrates.[anchor|#fig_tck_yjq_sv][anchor|#image_rw4_pzq_jq][image:CustomizationPlatform/images/CG_GL_DBSchema_CustomColumns_DACExtTable_01.png|popup|Exploring the behavior of the customized Stock Items form|450px]
If you update a data record (by changing the value of any control, including '''Ext&#95;Table Description'''), a new database record is added to the extension table, as the following two screenshots illustrate.[anchor|#fig_uck_yjq_sv][anchor|#image_tls_c1r_jq][image:CustomizationPlatform/images/CG_GL_DBSchema_CustomColumns_DACExtTable_02.png|popup|Entering and saving the description in the new control|450px][anchor|#fig_vck_yjq_sv][anchor|#image_zlw_4x4_zm][image:CustomizationPlatform/images/CG_GL_DBSchema_CustomColumns_DACExtTable_03.png|popup|Analyzing the record added to the new database table|420px]{br}

When you use the ''Left Outer Join'' way, data records within the original and extension tables are not necessarily synchronized (as the figure below illustrates); data record synchronization works as follows:[anchor|#ul_dth_x4j_cn]
*If an appropriate data record does not exist within an extension table when the system queries the original table, the system automatically generates and assigns default values to every field of the DAC extension that is mapped to the extension table; otherwise, DAC extension field values are read from the database.
*When a new record is inserted into the original table, the system automatically inserts a new record into the extension table.
*If a data record does not exist within an extension table when the system updates the original table, the system automatically inserts a data record into the extension table. Otherwise, if there are no modified fields of the DAC extension that is mapped to the extension table, the system does not update the extension table data record.
*When the system deletes the data record in the original table, it automatically deletes the appropriate data record from the extension table, if such a record exists.
((({S:Warn}
To use an extension table independently from the original database table, you should declare a data view by using a DAC extension that is mapped to an extension table as the main DAC, as shown below.<source lang="csharp">
public class BaseBLCExt : PXGraphExtension&lt;BaseBLC&gt;
{
    public PXSelect&lt;TableExtension&gt; Objects;
}</source>
In the example of the data view declaration above, extension table data records have no reference to the original database table records. You can work with these data records just as you would work with any other DAC instance.
)))[anchor|#fig_wck_yjq_sv][anchor|#image_unc_sjq_cn][image:CustomizationPlatform/images/CG_GL_DBSchema_CustomColumns_DACExtTable_LeftJoin.png|popup|Exploring data record synchronization when the Left Outer Join way is used|450px]
==The Inner Join Way==
The ''Inner Join'' is the default way.{br}

The following example shows the declaration of a DAC extension mapped to an extension table with the default ''Inner Join'' way.<source lang="csharp">
[PXTable]
class InnerJoinTableExtension : PXCacheExtension&lt;BaseDAC&gt;
{
}</source>
The ''Inner Join'' way:[anchor|#ul_d1z_sq3_xm]
*Can be used only when the original table and extension table are always synchronized.
*Causes an extension table record to be automatically created only when the appropriate original database table record is created.
*Requires the main key column values to be copied from the original table to each extension table.
*Excludes an original database table record from the result set when no corresponding extension table record is found.
*Can be used as a standalone DAC.

The sample code below shows the declaration of the <tt>InventoryItemTableExtension</tt> DAC extension, which is mapped to the extension table by using the default ''Inner Join'' way.<source lang="csharp">
[PXTable(typeof(InventoryItem.inventoryID))]
 public class InventoryItemTableExtension : PXCacheExtension&lt;InventoryItem&gt;
{
    #region ExtTableDescr
    public abstract class extTableDescr : PX.Data.IBqlField
    {
    }
    [PXDBString(255)]
    [PXDefault("Additional description")]
    [PXUIField(DisplayName = "Ext_Table Description")]
    public string ExtTableDescr { get; set; }
    #endregion
}</source>
If you again open the Stock Items (IN202500) form, by clicking navigation buttons on the form toolbar of the Stock Items form, you will see that only one stock item is visible, and it has the modified '''Ext&#95;Table Description'''.{br}

To have access to the other database table records, you need to populate the extension table with the appropriate records. You can do this by using the following script.{{{{
INSERT INTO [dbo].[InventoryItemTableExtension]
SELECT 
    CompanyID, 
    InventoryID, 
    0, 
    N'Additional description'
FROM [dbo].[InventoryItem]
WHERE NOT EXISTS
(
    SELECT * FROM [dbo].[InventoryItemTableExtension] AS t 
    WHERE t.CompanyID = [dbo].[InventoryItem].CompanyID 
        AND t.InventoryID = [dbo].[InventoryItem].InventoryID
)
GO
}}}}
After you copy data records from the <tt>InventoryItem</tt> database table to the <tt>InventoryItemTableExtension</tt> user extension table, you will notice that all stock items are visible again.{br}

When you use the ''Inner Join'' way, the data records within the base and extended tables must always be synchronized (see the screenshot below). With this way, data record synchronization works as follows:[anchor|#ul_g5k_ttj_cn]
*If an appropriate data record does not exist within an extension table when the system queries the original table, the system excludes the original table record from the result set.
*When a new record is inserted into the original table, the system automatically inserts a new record into the extension table.
*When the system updates the data record in the original table, it does not update the extension table if there are no modified fields of the DAC extension that is mapped to the extension table.
*When it deletes the original table data record, the system automatically deletes the appropriate data record from the extension table, if such a record exists.
((({S:Warn}To use the extension table independently from the original database table, you should declare a data view by using a DAC extension, which is mapped to an extension table, as the main DAC (for details, see the [[#_fed09a3f-917c-46b4-a6f7-bb523fb65cd8|The Left Outer Join Way] section).
)))[anchor|#fig_xck_yjq_sv][anchor|#image_ozj_xjq_cn][image:CustomizationPlatform/images/CG_GL_DBSchema_CustomColumns_DACExtTable_InnerJoin.png|popup|Exploring data record synchronization when you use the Inner Join way|450px]]]></column>
			<column name="PlainText"><![CDATA[DAC Extension Mapped to an Extension Table You can define a DAC extension mapped to an extension table by using either the default          Inner Join  way or the optional  Left Outer Join  way. To specify which way is       used, you need to set the value for the  IsOptional  parameter of the          PXTable  attribute. By default, the system sets this parameter value to          false . You need to specify the  IsOptional  parameter value only if       you need to set its value to  true . 
[PXTable(IsOptional = value)]
public class TableExtension : PXCacheExtension<BaseDAC>
{ ... } If the DAC contains surrogate and natural keys, then the  PXTable  attribute       attached to the DAC extension should reference the surrogate key as well as other database key       fields (but not the natural key). If the DAC doesn't have surrogate and natural keys, no key       fields should be specified in the  PXTable  attribute. See the following code       example of the declaration of the  PXTable  attribute with key       references. 
[PXTable(typeof(BaseDAC.surrogateKey),
         typeof(BaseDAC.otherDBKeyField),
         IsOptional = value)]
public class TableExtension : PXCacheExtension<BaseDAC>
{ ... } The natural key is a user-friendly value that is not used as a key in the database. The    surrogate key, which is the internal value corresponding to the natural key, is not shown to the    user and is assigned by the system. When you use a natural key, the DAC field that serves as a    surrogate key is bound to the database key column, but is not marked as key within its    attributes. In the sample code shown below, the  Location  database table contains both       the surrogate  LocationID  key and the natural  LocationCD        key. The  Location  database table main key contains the          BAccountID  and  LocationID  columns. Because          LocationCD  is a natural key, we need to specify the corresponding       surrogate key,  LocationID , as well as the other database key field,          BAccountID , in the  PXTable  attribute. 
[PXTable(typeof(Location.locationID),
         typeof(Location.bAccountID))]
public class LocationTableExtension : PXCacheExtension<Location>
{ ... } The Left Outer Join Way The following example shows the declaration of a DAC extension mapped to an extension table         with the  Left Outer Join  way. Notice that the  IsOptional  parameter         of the  PXTable  attribute is set to  true . [PXTable(IsOptional = true)]
class LeftJoinTableExtension : PXCacheExtension<BaseDAC>
{
} The  Left Outer Join  way covers the common steps required to add an extension tables         to a customization project. For details on populating an extension table with records, see            SQL Script Editor. The  Left Outer Join  way: Can be used when the original and extension database tables are not necessarily           synchronized. Causes an extension table record to be created when the appropriate original table           record is created or updated. Never excludes an original database table record from the result set. Calculates the default field values if no extension table record is found.  Can be used as a standalone DAC. The following example shows the declaration of the            InventoryItemTableExtension  DAC extension mapped to the extension table         with the  Left Outer Join  way. 
[PXTable(typeof(InventoryItem.inventoryID), IsOptional = true)]
public class InventoryItemTableExtension : PXCacheExtension<InventoryItem>
{
    #region ExtTableDescr
    public abstract class extTableDescr : PX.Data.IBqlField
    {
    }
    [PXDBString(255)]
    [PXDefault("Additional description")]
    [PXUIField(DisplayName = "Ext_Table Description")]
    public string ExtTableDescr { get; set; }
    #endregion
} Suppose that you have added the corresponding  Ext_Table Description          control to the header area of the Stock Items (IN202500) form. If you open the form, by         clicking navigation buttons on the form toolbar, you can ensure that all the stock items are         visible, while the  Ext_Table Description  control has the default            Additional description  value set, as the screenshot below illustrates. Exploring the behavior of the customized Stock Items form If you update a data record (by changing the value of any control, including            Ext_Table Description ), a new database record is added to the         extension table, as the following two screenshots illustrate. Entering and saving the description in the new control Analyzing the record added to the new database table When you use the  Left Outer Join  way, data records within the original and extension         tables are not necessarily synchronized (as the figure below illustrates); data record         synchronization works as follows: If an appropriate data record does not exist within an extension table when the system             queries the original table, the system automatically generates and assigns default             values to every field of the DAC extension that is mapped to the extension table;             otherwise, DAC extension field values are read from the database. When a new record is inserted into the original table, the system automatically             inserts a new record into the extension table. If a data record does not exist within an extension table when the system updates the             original table, the system automatically inserts a data record into the extension table.             Otherwise, if there are no modified fields of the DAC extension that is mapped to the             extension table, the system does not update the extension table data record. When the system deletes the data record in the original table, it automatically             deletes the appropriate data record from the extension table, if such a record             exists. To use an extension table independently from the original database table, you should             declare a data view by using a DAC extension that is mapped to an extension table as the             main DAC, as shown below. 
public class BaseBLCExt : PXGraphExtension<BaseBLC>
{
    public PXSelect<TableExtension> Objects;
} In the example of the data view declaration above, extension table data records have no             reference to the original database table records. You can work with these data records             just as you would work with any other DAC instance. Exploring data record synchronization when the Left Outer Join way is used The Inner Join Way The  Inner Join  is the default way. The following example shows the declaration of a DAC extension mapped to an extension table     with the default  Inner Join  way. 
[PXTable]
class InnerJoinTableExtension : PXCacheExtension<BaseDAC>
{
} The  Inner Join  way: Can be used only when the original table and extension table are always synchronized. Causes an extension table record to be automatically created only when the appropriate      original database table record is created. Requires the main key column values to be copied from the original table to each extension           table. Excludes an original database table record from the result set when no corresponding      extension table record is found. Can be used as a standalone DAC. The sample code below shows the declaration of the       InventoryItemTableExtension  DAC extension, which is mapped to the extension     table by using the default  Inner Join  way. 
[PXTable(typeof(InventoryItem.inventoryID))]
 public class InventoryItemTableExtension : PXCacheExtension<InventoryItem>
{
    #region ExtTableDescr
    public abstract class extTableDescr : PX.Data.IBqlField
    {
    }
    [PXDBString(255)]
    [PXDefault("Additional description")]
    [PXUIField(DisplayName = "Ext_Table Description")]
    public string ExtTableDescr { get; set; }
    #endregion
} If you again open the Stock Items (IN202500) form, by clicking navigation buttons on the         form toolbar of the  Stock Items form, you will see that only one stock item is visible, and         it has the modified  Ext_Table Description . To have access to the other database table records, you need to populate the extension table     with the appropriate records. You can do this by using the following script. 
INSERT INTO [dbo].[InventoryItemTableExtension]
SELECT 
    CompanyID, 
    InventoryID, 
    0, 
    N'Additional description'
FROM [dbo].[InventoryItem]
WHERE NOT EXISTS
(
    SELECT * FROM [dbo].[InventoryItemTableExtension] AS t 
    WHERE t.CompanyID = [dbo].[InventoryItem].CompanyID 
        AND t.InventoryID = [dbo].[InventoryItem].InventoryID
)
GO After you copy data records from the  InventoryItem  database table to the       InventoryItemTableExtension  user extension table, you will notice that all     stock items are visible again. When you use the  Inner Join  way, the data records within the base and extended tables         must always be synchronized (see the screenshot below). With this way, data record         synchronization works as follows: If an appropriate data record does not exist within an extension table when the system             queries the original table, the system excludes the original table record from the             result set. When a new record is inserted into the original table, the system automatically             inserts a new record into the extension table. When the system updates the data record in the original table, it does not update the             extension table if there are no modified fields of the DAC extension that is mapped to             the extension table. When it deletes the original table data record, the system automatically deletes the             appropriate data record from the extension table, if such a record exists. To use the extension table independently from the original database table, you           should declare a data view by using a DAC extension, which is mapped to an extension           table, as the main DAC (for details, see the  The Left Outer Join Way The Left Outer Join Way section). Exploring data record synchronization when you use the Inner Join way ]]></column>
		</row>
		<row PageID="8fc09ca1-c7c2-483d-ab2c-d170489c00ab" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="d0e54fa5-6daa-9349-3e20-97d8965848c4" RecordSourceID="22377">
			<column name="Content"><![CDATA[[anchor|#_3d7ad05f-37cc-4564-a261-3af54ab0dac0]
With the platform, you can add to a customization project an SQL script to be executed during the publication of the project. However, we recommend that you avoid doing this. ((({S:Hint}A possible result of a custom SQL script is the loss of the integrity and consistency of the application data.
)))If you do add a custom SQL script, you must adhere to the following requirements for the script:[anchor|#_b059c2aa-4668-44be-a665-7b512ed2e397]
*Because Acumatica ERP supports multitenancy, you must create an SQL script that correctly creates a database object that properly specifies and uses the company mask.
*You must correctly specify the attributes for the script so that the script can be executed on the target database servers: MySQL Server, Microsoft SQL Server, or both. For details about attributes, see [HelpRoot_Dev_Customization\CG_GL_Items_DBScripts_Adding_Attr|Using the SQL Script Attributes].

==To Add a Custom SQL Script to a Customization Project==[anchor|#_9471a5b0-108b-43cf-b304-83a208021c6d]
#Prepare, debug, and test the SQL script with a database administration tool, such as SQL Server Management Studio. (See [HelpRoot_Dev_Customization\CG_GL_Items_DBScripts_AddingCustScript_HowCreate|Creating a Custom SQL Script] for details.)
#Open the customization project in the Customization Project Editor. (See [HelpRoot_Dev_Customization\CG_GL_Project_Opening|To Open a Project] for details.)
#Click '''Database Scripts''' in the navigation pane to open the Database Scripts page.
#On the page toolbar, click '''Add''' > '''Script'''.
#In the '''Script Name''' box of the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_SQLScriptDlg|SQL Script Editor], which opens, specify the name of the script to be used as the object name of the customization item. (The name can contain only English characters and digits.)
#Optional: In the '''Priority''' box, specify the priority of the script. By default, the priority is 0.
#For each batch that you want to add, do the following:
##Click '''Specify Database Engine''', and in the '''Attribute''' box, select one of the following options:
##*''Skip Batch on MySQL Server'', which adds the {{--[mysql: Skip]}} attribute to the end of the text in the text area of the script editor.
##*''Skip Batch on Microsoft SQL Server'', which adds the {{--[mssql: Skip]}} attribute to the end of the text in the text area of the script editor.
##*''Use Interpreter'', which adds the {{--[VmSql]}} attribute to the end of the text in the text area of the script editor.
##*:For more information on the database script attributes, see [HelpRoot_Dev_Customization\CG_GL_Items_DBScripts_Adding_Attr|Using the SQL Script Attributes].
##In the text area of the editor, below the added attribute, enter the SQL script.
#In the editor, click '''OK''' to add the script to the customization project.

If a custom script causes an error, the error message will appear during the publication process when the system executes the custom scripts.
==Related Articles==
*[HelpRoot_Dev_Customization\CG_GL_Items_DBScripts_AddingCustScript_HowCreate|Creating a Custom SQL Script]
*[HelpRoot_Dev_Customization\CG_GL_Items_DBScripts_Adding_Attr|Using the SQL Script Attributes]
*[HelpRoot_Dev_Customization\CG_GL_Items_DBScripts_WritingCustSQL|Writing Custom SQL Scripts for Interpretation]]]></column>
			<column name="PlainText"><![CDATA[To Add a Custom SQL Script to a Customization Project With the platform, you can add to a customization             project an SQL script to be executed during the publication of the project. However, we             recommend that you avoid doing this.  A possible result of a custom                 SQL script is the loss of the integrity and consistency of the application                 data. If you do add a custom SQL script, you must adhere to the following             requirements for the script: Because  Acumatica ERP supports multitenancy, you must create an SQL script that correctly creates a                     database object that properly specifies and uses the company mask. You must correctly specify the attributes for the script so that the script can                     be executed on the target database servers: MySQL Server, Microsoft SQL Server,                     or both. For details about attributes, see  Using the SQL Script Attributes. To Add a Custom SQL Script to a Customization Project Prepare, debug, and test the SQL script with a database administration tool,                         such as SQL Server Management Studio. (See  Creating a Custom SQL Script for details.) Open the customization project in the  Customization Project Editor. (See  To Open a Project for                         details.) Click  Database Scripts  in the navigation pane to open the                         Database Scripts page. On the page toolbar, click  Add Script . In the  Script Name  box of the  SQL Script Editor, which opens, specify the name of the script to be used as the object                         name of the customization item. (The name can contain only English                         characters and digits.) Optional: In the  Priority  box, specify the priority                         of the script. By default, the priority is 0. For each batch that you want to add, do the following: Click  Specify Database Engine , and in the                                      Attribute  box, select one of the                                 following options: Skip Batch on MySQL Server , which adds the                                              --[mysql: Skip]  attribute to the end of                                         the text in the text area of the script editor. Skip Batch on Microsoft SQL Server , which adds the                                              --[mssql: Skip]  attribute to the end of                                         the text in the text area of the script editor. Use Interpreter , which adds the                                              --[VmSql]  attribute to the end of the                                         text in the text area of the script editor. For more                                             information on the database script attributes, see  Using the SQL Script Attributes. In the text area of the editor, below the added attribute, enter the                                 SQL script. In the editor, click  OK  to add the script to the                         customization project. If a custom script causes an error, the error message will appear during the                     publication process when the system executes the custom scripts. ]]></column>
		</row>
		<row PageID="82193b77-5be3-47a0-9bf6-ae654b00c9a3" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="f2d51623-f489-9a84-dd0e-167ccfbc80d7" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You do not need to install MS Visual Studio to customize the Acumatica ERP UI or to develop a simple changes of business logic, because the platform includes the [HelpRoot_Dev_Customization\CG_Platform_Tools|Customization Tools], which are designed for these purposes and available in your web browser. However you can use Visual Studio to develop the customization code.{br}

If you plan to use Visual Studio on the server that hosts the website of Acumatica ERP 2020 R1, the environment where you install and use Acumatica Framework or Acumatica ERP should meet particular requirements, which are described in [HelpRoot_Install\System_Requirements_Studio|System Requirements for Acumatica Framework 2020 R1].{br}

To use Visual Studio while customizing Acumatica ERP, you can select one of the following approaches:[anchor|#ul_cyh_rkc_2w]
*Create an [HelpRoot_Dev_Customization\CG_Platform_TO_Code_CS_ExtLibrary|Extension Library], develop the customization code in Visual Studio, compile the DLL binary file within the <tt>Bin</tt> folder of the website, and add this custom file to the customization project
*Develop and debug the customization code of a customization project on the fly by using Visual Studio
{br}

This part of the guide describes the second approach, because the first one is obvious and does not require any integration between the Customization Project Editor and Visual Studio.{br}

To use the second approach, you should perform the following steps each time you want to use Visual Studio to develop and debug the customization code on the fly:[anchor|#ol_y3r_jwc_2w]
#In [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_DataClassEditor|Data Class Editor], create extensions for existing data access classes if required, as described in [HelpRoot_Dev_Customization\CG_GL_BL_DAC_DACExt|To Create a DAC Extension].
#In [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_CodeEditor|Code Editor], for business logic controllers, create new classes or class extensions that contain required code templates, as described in [HelpRoot_Dev_Customization\CG_GL_BL_Graph_NewGraph|To Create a Custom Graph] and [HelpRoot_Dev_Customization\CG_GL_BL_Graph_ToOpen|To Start the Customization of a Graph].
#Publish the customization project to obtain the corresponding C# files within the <tt>App&#95;RuntimeCode</tt> website folder. (See [HelpRoot_Dev_Customization\CG_GL_Projects_Publishing_Understanding|Performing the Publication Process] for details.).\
#By using Visual Studio, develop, modify, and debug the customization code in these files on the fly. (See [HelpRoot_Dev_Customization\CG_GL_BL_Graph_ToDebug|To Debug the Customization Code] for details.)
#In the Customization Project Editor, update the code in the customization project, as described in [HelpRoot_Dev_Customization\CG_Platform_Studio_CodeItems|To Synchronize Code Changes with the Customization Project].

==In This Chapter==[anchor|#_6abd2ec6-2de4-436c-9c72-c9dd58cbf6b4]
*[HelpRoot_Dev_Customization\CG_Platform_Studio_CodeItem|To Work with a Code Item]
*[HelpRoot_Dev_Customization\CG_GL_Items_DACs_Studio|To Work with Data Access Classes]
*[HelpRoot_Dev_Customization\CG_GL_BL_Graph_ToDebug|To Debug the Customization Code]
*[HelpRoot_Dev_Customization\CG_Platform_Studio_CodeItems|To Synchronize Code Changes with the Customization Project]
*[HelpRoot_Dev_Customization\cg_platform_tocreateextensionlib|To Create an Extension Library]
*[HelpRoot_Dev_Customization\cg_gs_usefultips|Useful Tips]
]]></column>
			<column name="PlainText"><![CDATA[Integrating the  Project Editor with Microsoft Visual Studio You do not need to install MS Visual Studio to customize the  Acumatica ERP UI or to develop a simple changes of business logic, because the platform includes the          Customization Tools, which are designed for these purposes and available       in your web browser. However you can use Visual Studio to develop the customization code. If you plan to use Visual Studio on the server that hosts the website of  Acumatica ERP 2020 R1, the environment where you install and use  Acumatica Framework or          Acumatica ERP should meet particular requirements, which are described in  System Requirements for Acumatica Framework 2020 R1. To use Visual Studio while customizing  Acumatica ERP, you can select one of the following approaches: Create an  Extension Library, develop the           customization code in Visual Studio, compile the DLL binary file within the              Bin  folder of the website, and add this custom file to the           customization project Develop and debug the customization code of a customization project on the fly by using           Visual Studio This part of the guide describes the second approach, because the first one is obvious and       does not require any integration between the  Customization Project Editor and Visual Studio. To use the second approach, you should perform the following steps each time you want to use       Visual Studio to develop and debug the customization code on the fly: In  Data Class Editor, create extensions for           existing data access classes if required, as described in  To Create a DAC Extension. In  Code Editor, for business logic           controllers, create new classes or class extensions that contain required code templates,           as described in  To Create a Custom Graph and  To Start the Customization of a Graph. Publish the customization project to obtain the corresponding C# files within the              App_RuntimeCode  website folder. (See  Performing the Publication Process for details.).\ By using Visual Studio, develop, modify, and debug the customization code in these files           on the fly. (See  To Debug the Customization Code for details.) In the  Customization Project Editor, update the code in the customization project, as described in  To Synchronize Code Changes with the Customization Project. In This Chapter To Work with a Code ItemTo Work with Data Access ClassesTo Debug the Customization CodeTo Synchronize Code Changes with the Customization ProjectTo Create an Extension LibraryUseful Tips]]></column>
		</row>
		<row PageID="bb254435-c33a-453a-bc58-9d0798deba59" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="13dc2535-1193-ef46-007f-d77d7f4cf6db" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_CodeEditor|Code Editor] does not provide facilities you can use in Microsoft Visual Studio to develop and debug any source code in customization projects. To start working with a ''Code'' item in Visual Studio, perform the following instructions:[anchor|#_4453cfb5-e108-4946-9123-82ef77fa8279]
#Publish the customization project, as described in [HelpRoot_Dev_Customization\CG_GL_Projects_Publishing|Publishing Customization Projects].
#:After you have published the customization project, the <tt>&lt;CodeItemName&gt;.cs</tt> file with the item code is placed in the <tt>App&#95;RuntimeCode</tt> folder of the website.
#Launch Visual Studio.
#To open the <tt>&lt;CodeItemName&gt;.cs</tt> file in Visual Studio, on the main menu, click '''File &gt; Open &gt; File''', and select the file in the '''Open File''' dialog box, which opens.
#:((({S:Warn}If you need to debug the customization code, you have to open the website instead of the file. See [HelpRoot_Dev_Customization\CG_GL_BL_Graph_ToDebug|To Debug the Customization Code] for details.
)))
#After you have finished editing the source code of the item, click '''Save''' to save your changes in the file.
#:Because the <tt>App&#95;RuntimeCode</tt> folder contains the customization code that is published, the changes in the file are immediately applied to the application instance.
#Open or refresh the form that uses the code, to make sure that the business logic has been changed for the form.
#:((({S:Warn}If an error exists in the changed file, the website might be corrupted. You can recover the website, for example, in one of the following ways:[anchor|#_580f087c-8b6b-4e41-a685-aff56eff29eb]
*Debug the code
*Undo the changes
*Publish the customization project again to update the files in the <tt>App&#95;RuntimeCode</tt> folder
*Delete the file from the <tt>App&#95;RuntimeCode</tt> folder
)))
#To update the ''Code'' item in the customization project, follow the instructions described in [HelpRoot_Dev_Customization\CG_Platform_Studio_CodeItems|To Synchronize Code Changes with the Customization Project].
]]></column>
			<column name="PlainText"><![CDATA[To Work with a Code Item The  Code Editor does not provide facilities you can    use in Microsoft Visual Studio to develop and debug any source code in customization projects. To    start working with a  Code  item in Visual Studio, perform the following instructions: Publish the customization project, as described in  Publishing Customization Projects. After you have published the customization project,       the  <CodeItemName>.cs  file with the item code is placed in the         App_RuntimeCode  folder of the website. Launch Visual Studio. To open the  <CodeItemName>.cs  file in Visual Studio, on the main           menu, click  File > Open > File , and select the file in the              Open File  dialog box, which opens. If you need to debug the             customization code, you have to open the website instead of the file. See  To Debug the Customization Code for details. After you have finished editing the source code of the item, click              Save  to save your changes in the file. Because the                App_RuntimeCode  folder contains the customization code that is             published, the changes in the file are immediately applied to the application             instance. Open or refresh the form that uses the code, to make sure that the business logic has been           changed for the form. If an error exists in the changed file, the website might be             corrupted. You can recover the website, for example, in one of the following ways: Debug the code Undo the changes Publish the customization project again to update the files in the                    App_RuntimeCode  folder Delete the file from the  App_RuntimeCode  folder To update the  Code  item in the customization project, follow the instructions           described in  To Synchronize Code Changes with the Customization Project. ]]></column>
		</row>
		<row PageID="0951313e-02f6-4a87-b51c-9125e5570737" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="c7021f1a-b93a-3309-14df-31f0ef0f0440" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can use Microsoft Visual Studio to work with a data access class (DAC) that has been added to a customization project.{br}

A customization project can contain code for a DAC in the following item types (see [HelpRoot_Dev_Customization\CG_Platform_Framework_CS_DACExt_DACFormat|Supported DAC Extension Formats] for details):[anchor|#_76e1c3d3-0847-403b-9491-122e3702f74d]
*As a ''DAC'' item with XML data for an existing DAC
*As a ''Code'' item with the code of an existing DAC extension
*As a ''Code'' item with the code of a custom DAC
*In a ''File'' item that keeps a <tt>.dll</tt> file of the extension library that contains the binary code of a DAC extension or custom DAC
{br}

Once a customization project is published, you can use Visual Studio to develop, modify, and debug the customization code of a ''Code'' item on the fly. However, you cannot use this approach for a ''DAC'' item.{br}

If you need to work in Visual Studio with the code of the DAC whose changeset is added to a customization project as a ''DAC'' item in XML format, perform the following actions:[anchor|#_b2e5ea91-6df6-411a-89ad-0012b6790828]
#Follow the instructions described in [HelpRoot_Dev_Customization\CG_GL_Items_DACs_Converting|To Convert a DAC Item to a Code Item] to convert the item to the ''Code'' item.
#Follow the instructions described in [HelpRoot_Dev_Customization\CG_Platform_Studio_CodeItem|To Work with a Code Item] to change the code of the DAC extension.
]]></column>
			<column name="PlainText"><![CDATA[To Work with Data Access Classes You can use Microsoft Visual Studio to work with a data access class (DAC) that has been added             to a customization project. A customization project can contain code for a DAC in the following item types (see  Supported DAC Extension Formats for details): As a  DAC  item with XML data for an existing DAC As a  Code  item with the code of an existing DAC extension As a  Code  item with the code of a custom DAC In a  File  item that keeps a  .dll  file of the                     extension library that contains the binary code of a DAC extension or custom                     DAC Once a customization project is published, you can use Visual Studio to develop, modify, and             debug the customization code of a  Code  item on the fly. However, you cannot use             this approach for a  DAC  item. If you need to work in Visual Studio with the code of the DAC whose changeset is added to a    customization project as a  DAC  item in XML format, perform the following actions: Follow the instructions described in  To Convert a DAC Item to a Code Item to                     convert the item to the  Code  item. Follow the instructions described in  To Work with a Code Item to                     change the code of the DAC extension. ]]></column>
		</row>
		<row PageID="43396c5f-3cda-423f-b98d-e6d3c161f01b" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="000dd764-8a0f-1439-b316-655183c91413" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_CodeEditor|Code Editor] does not provide facilities you can use to debug a code item of a customization project. We recommend that you use Microsoft Visual Studio to develop and debug any source code in customization projects. To start debugging an existing ''Code'' item in Visual Studio, perform the following instructions:[anchor|#_7909e1d3-4a86-4037-83b3-095e0b09c110]
#Publish the customization project, as described in [HelpRoot_Dev_Customization\CG_GL_Projects_Publishing|Publishing Customization Projects].
#In the file system, open in a text editor the <tt>web.config</tt> file located in the website folder.
#In <tt>&lt;system.web&gt;</tt> tag of the file, locate the <tt>&lt;compilation&gt;</tt> element.
#Set to ''true'' the <tt>debug</tt> attribute of the element, as follows.{{{{&lt;compilation debug="true" ...&gt;
}}}}
#:((({S:Warn}See [https://msdn.microsoft.com/en-us/library/e8z01xdh(vs.71)|Debug Mode in ASP.NET Applications] for details.
)))
#In a browser, launch your instance of Acumatica ERP to have a running process in the system.
#Launch Visual Studio.
#To open the website of your instance of Acumatica ERP in Visual Studio, on the main menu, click '''File &gt; Open &gt; Web Site''', and select the website folder in the '''Open Web Site''' dialog box, which opens.
#In the Solution Explorer of Visual Studio, expand the <tt>App&#95;RuntimeCode</tt> website folder, and double-click the file of the ''Code'' item to open it.
#In the item source code, which opens, set a breakpoint on the line of the code where you need to stop the process for debugging.
#On the main menu, click '''Debug &gt; Attach to Process''', and in the '''Attach to Process''' dialog box, which opens, select the <tt>w3wp.exe</tt> process in the list of '''Available Processes'''.
#:((({S:Warn}In the dialog box, ensure that the '''Show processes from all users''' check box is selected. If the check box is cleared, the list will not display the <tt>w3wp.exe</tt> process record.
)))
#In the browser, open the form of Acumatica ERP whose business logic code you want to debug.
#In the browser, run an operation that invokes the fragment of the code that contains the breakpoint.
The process will be stopped at the breakpoint, and you can debug the code in Visual Studio.]]></column>
			<column name="PlainText"><![CDATA[To Debug the Customization Code The  Code Editor does not provide facilities you can use to debug a code item of a customization project. We recommend that you use Microsoft Visual Studio to develop and debug any source code in customization projects. To start debugging an existing  Code  item in Visual Studio, perform the following instructions: Publish the customization project, as described in  Publishing Customization Projects. In the file system, open in a text editor the                              web.config  file located in the website folder. In  <system.web>  tag of the file, locate the                              <compilation>  element. Set to  true  the  debug  attribute of the element, as                             follows. <compilation debug="true" ...> See                                  Debug Mode in ASP.NET                                 Applications Debug Mode in ASP.NET Applications for details. In a browser, launch your instance of  Acumatica ERP to have a running process in the system. Launch Visual Studio. To open the website of your instance of  Acumatica ERP in Visual Studio, on the main menu, click  File > Open > Web Site , and select the website folder in the  Open Web Site  dialog box, which opens. In the Solution Explorer of Visual Studio, expand the  App_RuntimeCode  website folder, and double-click the file of the  Code  item to open it. In the item source code, which opens, set a breakpoint on the line of the code where you need to stop the process for debugging. On the main menu, click  Debug > Attach to Process , and in the                              Attach to Process  dialog box, which opens, select                         the  w3wp.exe  process in the list of                              Available Processes . In the dialog box,                             ensure that the  Show processes from all users                              check box is selected. If the check box is cleared, the list will not                             display the  w3wp.exe  process record. In the browser, open the form of  Acumatica ERP whose business logic code you want to debug. In the browser, run an operation that invokes the fragment of the code that contains the breakpoint. The process will be stopped at the breakpoint, and you can debug the code in Visual Studio. ]]></column>
		</row>
		<row PageID="40fcc931-64ac-4016-9d05-7426a22712da" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="0b18969c-7544-6c0c-405d-9e23c5afac22" RecordSourceID="22377">
			<column name="Content"><![CDATA[
 Acumatica has open source code and you can easily view it with the Source Code browser. For details, see [HelpRoot_Dev_Customization\CG_Platform_Tools_SM204570|Source Code Browser].{br}

However, in some cases, for example, when you need to find a method to override, it is helpful to debug Acumatica ERP source code with breakpoints and see which breakpoint is hit in which scenario. To be able to debug Acumatica ERP code, you should configure your extension library in Visual Studio.
==Before You Proceed==
You can view and debug Acumatica source code inside an extension library. Before you start configuring your extension library in Visual Studio, create it. For details, see [HelpRoot_Dev_Customization\cg_platform_tocreateextensionlib|To Create an Extension Library].
==To Configure the Extension Library==[anchor|#_bf2dfb6d-f17b-4892-aafa-32acab94a281]
#Check whether the Acumatica debugger tools are installed and remember their location.
#:The Acumatica debugger tools are PDB files located in the <tt>Bin</tt> folder of the Acumatica ERP site folder.
#:The PDB files are copied to the <tt>Acumatica ERP/Files/Bin</tt> during the installation process if the '''Install Debugger Tools''' option is selected. If you haven&rsquo;t selected this option during installation, you should remove Acumatica ERP and install it again with the '''Install Debugger Tools''' option selected. For details, see [https://help.acumatica.com/(W(25))/Help?ScreenId=ShowWiki&pageid=6b8a047e-4a7c-435f-b30c-265509560a70|To Install the Acumatica ERP Tools].
#:Every time when you install or upgrade any Acumatica instance, the Acumatica ERP Configuration                             Wizard copies data from the <tt>Acumatica ERP/Files/Bin</tt> folder to replace instance files. These files are not copied to any instance automatically. But to be able to debug Acumatica, you must have them in every instance that you need to debug.
#:So to distribute these PDB files, you can do one of the following:
#*Install a new instance
#*Upgrade an existing one
#*Copy files manually from <tt>Acumatica ERP/Files/Bin</tt>
#:((({S:Warn}DLL and PDB files should be from the same version of Acumatica
)))
#Configure the <tt>web.config</tt> file of the instance by doing the following:
##In the file system, open in the text editor the <tt>web.config</tt> file that is located in the root folder of the your instance.
##In the {{<system.web>}} tag of the file, locate the {{<compilation>}} element.
##Set the debug attribute of the element to ''True'', as shown in the following code. {{{{&lt;system.web&gt;
 &lt;compilation debug="True" ...&gt;
}}}}
##Save your changes.
#:((({S:Warn}Be careful with this option on production environment, as debug configuration can significantly slow down Acumatica ERP performance.
)))
#Configure the extension library by doing the following:
##In Visual Studio, open the extension library.
##In the main menu, select '''Tools''' > '''Options'''.
##In the '''Debugging''' > '''General''' section, clear the '''Enable Just My Code''' check box.
##In the '''Debugging''' > '''Symbols''' section, in the '''Symbols file (.pdb) locations''' list, add the path to the location of the PDB files which you discovered in instruction 1 of the step. For example,{{{{C:\Program Files\Acumatica ERP\Files\Bin
}}}}
##Click '''OK'''.

==To Browse and Debug the Source Code==
After you have configured the extension library, you can view and debug source code of Acumatica ERP. Do the following:
#Learn the full name of the graph in which the method you want to debug is located. It is shown in the '''Graph Name''' box of the Source Code Browser. For details, see [HelpRoot_Dev_Customization\CG_GL_Stages_Explore_BLC|To Explore the C# Code of a BLC].
#:For example, suppose you want to debug the '''Release''' action of the Payments and Applications (AR302000) form. The full graph name is {{PX.Objects.AR.ARPaymentEntry}}.
#Open Acumatica source code files. All files are located in the <tt>&lt;Site&#95;folder&gt;/App&#95;Data/CodeRepository</tt> folder.
#Navigate to the file with the code of the graph.
#:For the '''Release''' action of the Payments and Applications form, the graph is located in <tt>PX.Objects/AR/ARPaymentEntry.cs</tt>.
#Add a breakpoint inside the method you want to debug.
#Attach the Visual Studio debugger to a running process.
#:To do that, on the main menu, click '''Debug &gt; Attach to Process''', and in the '''Attach to Process''' dialog box, which opens, select the <tt>w3wp.exe</tt> process in the list of '''Available Processes'''.((({S:Warn}In the dialog box, ensure that the '''Show processes from all users''' check box is selected. If the check box is cleared, the list will not display the <tt>w3wp.exe</tt> process record.
)))
#In Acumatica ERP, open a form on which the method being debugged is called and perform actions to hit the added breakpoint.

==Other Tips on Debugging Acumatica Code==
Besides action methods like the {{ARPaymentEntry.Release}} method, you can debug event handlers implemented for attributes (located in the {{PX.Data}} namespace) and {{{Get; Set;}}} methods of DAC properties.{br}

For debugging Acumatica code, you can also use the following Visual Studio features:[anchor|#_2fd100e6-7cba-4d83-ba30-0471b109bf9a]
*The Immediate Window where you can debug and evaluate expressions, execute statements, and print variable values. For details, see [https://docs.microsoft.com/en-us/visualstudio/ide/reference/immediate-window?view=vs-2019|Immediate window].
*The Locals Window where you can see and edit variable values. For details, see [https://docs.microsoft.com/en-us/visualstudio/debugger/autos-and-locals-windows?view=vs-2019|Inspect variables in the Autos and Locals windows].
*The Call Stack window to view the method calls that are currently on the stack. For details, see [https://docs.microsoft.com/en-us/visualstudio/debugger/how-to-use-the-call-stack-window?view=vs-2019|View the call stack and use the Call Stack window in the debugger].
]]></column>
			<column name="PlainText"><![CDATA[To View and Debug  Acumatica Source Code  Acumatica has open source code and you can easily view it with the Source Code browser. For                 details, see  Source Code Browser. However, in some cases, for example, when you need to find a method to override, it                 is helpful to debug  Acumatica ERP source code with breakpoints and see which breakpoint is hit in which scenario.                 To be able to debug  Acumatica ERP code, you should configure your extension library in Visual Studio. Before You Proceed You can view and debug  Acumatica source code inside an extension library. Before you start configuring your                 extension library in Visual Studio, create it. For details, see  To Create an Extension Library. To Configure the Extension Library Check whether the  Acumatica debugger tools are installed and remember their location. The  Acumatica debugger tools are PDB files located in the  Bin                          folder of the  Acumatica ERP site folder. The PDB files are copied to the  Acumatica                             ERP/Files/Bin  during the installation process if the                              Install Debugger Tools  option is selected. If you                         haven't selected this option during installation, you should remove  Acumatica ERP and install it again with the  Install Debugger                             Tools  option selected. For details, see  To Install the Acumatica ERP                         Tools To Install the Acumatica ERP Tools. Every time when you install or upgrade any  Acumatica instance, the  Acumatica ERP Configuration                             Wizard copies data from the  Acumatica ERP/Files/Bin  folder                         to replace instance files. These files are not copied to any instance                         automatically. But to be able to debug  Acumatica, you must have them in every instance that you need to debug. So to                         distribute these PDB files, you can do one of the following: Install a new instance Upgrade an existing one Copy files manually from  Acumatica                             ERP/Files/Bin DLL and PDB files should be from the same version of  AcumaticaConfigure the  web.config  file of the instance by doing the                         following: In the file system, open in the text editor the                                  web.config  file that is located in the root                             folder of the your instance. In the  <system.web>  tag of the file, locate the                                  <compilation>  element. Set the debug attribute of the element to  True , as shown in the                             following code.                              <system.web>
 <compilation debug="True" ...> Save your changes. Be careful with this option on production environment, as debug                         configuration can significantly slow down  Acumatica ERP performance. Configure the extension library by doing the following: In Visual Studio, open the extension library. In the main menu, select  Tools Options . In the  Debugging General  section, clear the  Enable Just My                                 Code  check box. In the  Debugging Symbols  section, in the  Symbols file (.pdb)                                 locations  list, add the path to the location of the PDB                             files which you discovered in instruction 1 of the step. For                             example, C:\Program Files\Acumatica ERP\Files\Bin Click  OK . To Browse and Debug the Source Code After you have configured the extension library, you can view and debug source code                 of  Acumatica ERP. Do the following: Learn the full name of the graph in which the method you want to debug is                     located. It is shown in the  Graph Name  box of the Source                     Code Browser. For details, see  To Explore the C# Code of a BLC. For example, suppose you want to debug the                              Release  action of the Payments and Applications                         (AR302000) form. The full graph name is                              PX.Objects.AR.ARPaymentEntry . Open  Acumatica source code files. All files are located in the                          <Site_folder>/App_Data/CodeRepository  folder. Navigate to the file with the code of the graph. For the                              Release  action of the Payments and Applications                         form, the graph is located in                              PX.Objects/AR/ARPaymentEntry.cs . Add a breakpoint inside the method you want to debug. Attach the Visual Studio debugger to a running process. To do that, on the                         main menu, click  Debug > Attach to Process , and in                         the  Attach to Process  dialog box, which opens, select                         the  w3wp.exe  process in the list of                              Available Processes . In the dialog box,                             ensure that the  Show processes from all users                              check box is selected. If the check box is cleared, the list will not                             display the  w3wp.exe  process                     record. In  Acumatica ERP, open a form on which the method being debugged is called and perform actions                     to hit the added breakpoint. Other Tips on Debugging  Acumatica Code Besides action methods like the  ARPaymentEntry.Release  method, you                 can debug event handlers implemented for attributes (located in the                      PX.Data  namespace) and  {Get; Set;}  methods of                 DAC properties. For debugging  Acumatica code, you can also use the following Visual Studio features: The Immediate Window where you can debug and evaluate expressions, execute                     statements, and print variable values. For details, see  Immediate window Immediate window. The Locals Window where you can see and edit variable values. For details, see                          Inspect variables in the Autos and Locals                         windows Inspect variables in the Autos and Locals windows. The Call Stack window to view the method calls that are currently on the stack.                     For details, see  View the call stack and use the Call Stack                         window in the debugger View the call stack and use the Call Stack window in the debugger. ]]></column>
		</row>
		<row PageID="ab57b220-bebe-4b22-af61-21c70e5fb49f" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="6aa44633-178d-7e48-9a7b-2fd4a08a2170" RecordSourceID="22377">
			<column name="Content"><![CDATA[
When you create a ''Code'' item in a customization project, Acumatica Customization             Platform performs the following actions:[anchor|#ul_xjw_vfx_nt]
*Saves the item content in the database as a ''Code'' item
*Adds the item ID to the customization project
{br}

When you publish the project, the platform creates the <tt>&lt;CodeItemName&gt;.cs</tt> file in the <tt>App&#95;RuntimeCode</tt> website folder of the current instance of Acumatica ERP.{br}

If you use the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_CodeEditor|Code Editor] to modify a ''Code'' item and click '''Save''' on the page toolbar, the platform saves the changes only in the database. To update files in the <tt>App&#95;RuntimeCode</tt> folder, you have to publish the project again.{br}

If you have modified the item code in Microsoft Visual Studio, you have to synchronize the changes with the item in the database. To do that, do the following:[anchor|#_37ccdfea-e1c9-4a5c-8fed-44ea560e19b9]
*Follow the instructions described in [HelpRoot_Dev_Customization\CG_GL_Items_Files_Updating|To Update a File Item in a Project] to update files in the customization project.
{br}

For more information about the synchronization mechanism provided by the Acumatica Customization             Platform, see [HelpRoot_Dev_Customization\CG_Platform_TO_Features_AutoDetectMF|Detecting the Project Items Modified in the File System].]]></column>
			<column name="PlainText"><![CDATA[To Synchronize Code Changes with the Customization Project When you create a  Code  item in a customization project,  Acumatica Customization             Platform performs the following actions: Saves the item content in the database as a  Code  item Adds the item ID to the customization project When you publish the project, the platform creates the      <CodeItemName>.cs  file in the  App_RuntimeCode     website folder of the current instance of  Acumatica ERP. If you use the  Code Editor to modify a          Code  item and click  Save  on the page toolbar, the platform       saves the changes only in the database. To update files in the          App_RuntimeCode  folder, you have to publish the project again. If you have modified the item code in Microsoft Visual Studio, you have to synchronize the       changes with the item in the database. To do that, do the following: Follow the instructions described in  To Update a File Item in a Project to           update files in the customization project. For more information about the synchronization mechanism provided by the  Acumatica Customization             Platform, see  Detecting the Project Items Modified in the File System. ]]></column>
		</row>
		<row PageID="f7e12f94-c8be-4013-8990-9341161bb252" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="4aa93f54-27d4-6771-28f8-20ad98d8857a" RecordSourceID="22377">
			<column name="Content"><![CDATA[
To develop customization code in an extension library, you should first create this extension library. This topic describes how to create the extension library using the [anchor|#cust_Manager]Customization Project Editor. 
==To Create an Extension Library==[anchor|#_f972e020-3a40-4f69-80b8-307ffe87d42b]
#On the main menu of the Customization Project Editor, click '''Extension Library &gt; Create New'''.
#:The '''Create Extension Library''' dialog box opens.
#Specify the location and name name of the Visual Studio project that will contain the extension library.
#Click '''OK''' to close the dialog box and start the process of creating the library.

During the process, [anchor|#application_customization]Acumatica Customization           Platform creates the following files in the folder specified in the dialog box.[anchor|#_c5a3ca17-f097-4866-97d9-0b6216dd07e1]
{| class="checklist"
!File
!Description
|-
| {{<Project_name>.sln}}
| The Microsoft Visual Studio Solution file
|-
| {{Solution.bat}}
| The Windows batch file to open the website solution in Microsoft Visual Studio
|-
| {{Solution.lnk}}
| The shortcut file to the project to open the website solution in Microsoft Visual Studio
|-
| {{folder.lnk}}
| The shortcut file to the website folder
|-
| {{<Project_name>/<Project_name>.csproj}}
| The Visual C# Project file
|-
| {{<Project_name>/Examples.cs}}
| The Visual C# Source file that contains examples of source code to customize data access classes and business logic controllers
|-
| {{<Project_name>/Properties/AssemblyInfo.cs}}
|  The Visual C# Source file that contains general information about the assembly
| }
The platform also creates the {{OpenSolution.bat}} batch file, which is a copy of the {{Solution.bat}} file created in the solution project folder. Depending on the settings of your browser, the {{OpenSolution.bat}} file is saved either in the {{Downloads}} folder or in another location.]]></column>
			<column name="PlainText"><![CDATA[To Create an Extension Library To develop customization code in an extension library, you should first create this         extension library. This topic describes how to create the extension library using the  Customization Project Editor .  To Create an Extension Library On the main menu of the Customization Project Editor, click  Extension Library > Create New . The  Create Extension Library  dialog box             opens. Specify the location and name name of the Visual Studio project that will contain the           extension library. Click  OK  to close the dialog box and start the process of           creating the library. During the process,  Acumatica Customization           Platform  creates the following files in the folder specified in the dialog box. File Description <Project_name>.sln The Microsoft Visual Studio Solution file Solution.bat The Windows batch file to open the website solution in Microsoft Visual             Studio Solution.lnk The shortcut file to the project to open the website solution in Microsoft Visual             Studio folder.lnk The shortcut file to the website folder <Project_name>/<Project_name>.csproj The Visual C# Project file <Project_name>/Examples.cs The Visual C# Source file that contains examples of source code to customize data             access classes and business logic controllers <Project_name>/Properties/AssemblyInfo.cs  The Visual C# Source file that contains general information about the             assembly The platform also creates the  OpenSolution.bat  batch file, which is a copy         of the  Solution.bat  file created in the solution project folder. Depending         on the settings of your browser, the  OpenSolution.bat  file is saved either         in the  Downloads  folder or in another location. ]]></column>
		</row>
		<row PageID="5bc1f3a3-a149-4c00-ade4-c6c3ff4b1f48" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="cd458c58-76b4-64ca-f4a0-c6e79eafdf10" RecordSourceID="22377">
			<column name="Content"><![CDATA[
Here are some tips and tools that you can use to simplify your development process.{br}{TOC}
==Organize team development==
If several developers are working on the customization project, it is important to organize a continuous team development. Here are several essential points for it:[anchor|#_65d4dbc4-ae80-4460-bfb2-266c1593f18d]
*Organize a centralized source control, where all developers can push the work they&rsquo;ve done. To integrate the changes into source control, you can use automation scripts.
*All developers should have a local version of Visual Studio, project&rsquo;s database and repository. This ensures independent development and debugging at all times.
*Every developer should have Acumatica ERP instance in the same directory and with the same name. This helps to maintain the same references of the extension library (DLL) to the project&rsquo;s {{/bin}} folder.
*All changes to the customization project and Acumatica ERP related development should be stored in the source control. Code should be stored as a part of Visual Studio project. UI, database, and data changes should be included into a customization project and also stored in source control.
*Developers may work on different features in separate branches and merge their work to the main branch only when the changes are completed and tested.
*You can do parts of continuous integration manually on your local machine and automatically on the build server from centralized repository.

==Use Acuminator==
You can simplify customization development in Visual Studio by using Acuminator - a static code analysis and colorizer tool. Acuminator provides diagnostics and code fixes for common developer challenges related to Acumatica Framework. Also, Acuminator can colorize and format BQL statements, and can collapse attributes and parts of BQL queries.{br}

To use Acuminator in Visual Studio:[anchor|#_dfb55ea2-2572-4901-a6de-ecee2af1d1d7]
#Download Acuminator from [https://marketplace.visualstudio.com/items?itemName=V-for-Volodymyr.Acuminator|the Visual Studio Marketplace].
#:You get a Visual Studio extension installer (VSIX file).
#Install Acuminator by launching the downloaded VSIX file.

 Acuminator is ready for use. To check it, open your customization project in Visual Studio. BQL statements and DAC code Acumatica Framework should be highlighted.]]></column>
			<column name="PlainText"><![CDATA[Useful Tips Here are some tips and tools that you can use to simplify your development process. Organize         team development If several developers are working on the customization project, it is important to organize         a continuous team development. Here are several essential points for it: Organize a centralized source control, where all developers can push the work they've           done. To integrate the changes into source control, you can use automation scripts. All developers should have a local version of Visual Studio, project's database and           repository. This ensures independent development and debugging at all times. Every developer should have  Acumatica ERP instance in the same directory and with the same name. This helps to maintain the same           references of the extension library (DLL) to the project's  /bin            folder. All changes to the customization project and  Acumatica ERP related development should be stored in the source control. Code should be stored as a           part of Visual Studio project. UI, database, and data changes should be included into a           customization project and also stored in source control. Developers may work on different features in separate branches and merge their work to           the main branch only when the changes are completed and tested. You can do parts of continuous integration manually on your local machine and           automatically on the build server from centralized repository. Use            AcuminatorYou can simplify customization development in Visual Studio by using  Acuminator -         a static code analysis and colorizer tool.  Acuminator         provides diagnostics and code fixes for common developer challenges related to  Acumatica Framework.         Also,  Acuminator         can colorize and format BQL statements, and can collapse attributes and parts of BQL         queries. To use  Acuminator         in Visual Studio: Download  Acuminator           from  the Visual Studio Marketplace the Visual Studio Marketplace. You get a Visual             Studio extension installer (VSIX file). Install  Acuminator           by launching the downloaded VSIX file.  Acuminator is ready for use. To check it, open your customization project in Visual Studio. BQL         statements and DAC code  Acumatica Framework         should be highlighted. ]]></column>
		</row>
		<row PageID="9a7ebc5d-4e87-4714-9d31-cba55c59ffd0" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="c1eaad68-fd1d-cf36-2de6-78e034158cff" RecordSourceID="22377">
			<column name="Content"><![CDATA[
If a customization task is large or complex or it is implemented by a group of developers, you might need to use a version control system for the customization project. The platform supports the integration of the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor] with a version control system.{br}

The Customization Project Editor includes the '''Source Control''' menu, which contains the following commands to integrate the editor with a version control system:[anchor|#_e37f0f49-d7a6-46ef-b81c-fbf563f57b61]
*'''Save Project to Folder''': Saves the customization project as a set of files to a local folder that is used for integration with a source control system. When you invoke this action, the system opens the '''Saves Project to Folder''' dialog box so that you can select the name and location of the folder inside a repository.
*'''Open Project from Folder''': Loads the customization project from the repository.
*'''Set Up Source Control''': Opens the '''Source Control Setup''' dialog box, which you can use to specify a configuration string for connection to a version control system, if required.
{br}

For detailed information on integrating the editor with a version control system, see the following topics:[anchor|#_85b4e8e5-e4a0-47fc-af2d-3343cf230ba3]
*[HelpRoot_Dev_Customization\CG_GL_VCS_Saving2Folder|To Save a Project to a Local Folder]
*[HelpRoot_Dev_Customization\CG_GL_VCS_Opening|To Update the Content of a Project from a Local Folder]
*[HelpRoot_Dev_Customization\CG_GL_VCS_Configuring|To Configure a Connection String]
*[HelpRoot_Dev_Customization\CG_GL_VCS_TFS|To Integrate the Customization Project Editor with Source Control]
]]></column>
			<column name="PlainText"><![CDATA[Integrating the  Project Editor   with a Version Control System If a customization task is large or complex or it is implemented by a group of developers, you    might need to use a version control system for the customization project. The platform supports    the integration of the   Customization Project                         Editor with a version control    system. The  Customization Project Editor    includes the  Source Control  menu, which contains the following commands to    integrate the editor with a version control system: Save Project to Folder : Saves the customization project as a set of      files to a local folder that is used for integration with a source control system. When you      invoke this action, the system opens the  Saves Project to Folder  dialog      box so that you can select the name and location of the folder inside a repository. Open Project from Folder : Loads the customization project from the      repository. Set Up Source Control : Opens the  Source Control       Setup  dialog box, which you can use to specify a configuration string for      connection to a version control system, if required. For detailed information on integrating the editor with a version control system, see the    following topics: To Save a Project to a Local FolderTo Update the Content of a Project from a Local FolderTo Configure a Connection StringTo Integrate the Customization Project Editor with Source Control]]></column>
		</row>
		<row PageID="71f286e1-1c11-49ca-9aaa-590e5a308568" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="45362e49-9ad5-a563-6c77-472bcb2ab6d5" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can save a customization project as set of files to a local folder that can be used for integration with a source control system. To do this, perform the following actions:[anchor|#_3f0acf9d-2543-45a8-be22-59d17904293f]
#Open the project in the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor].
#On the editor menu, click '''Source Control &gt; Saves Project to Folder'''.
#In the '''Saves Project to Folder''' dialog box, which opens, do the following:
##In the '''Parent Folder''' selector, select the parent folder.
##In the '''Project Name''' box, specify the name of the new folder to be used as the project storage.
#Click '''OK'''.
{br}

Within the selected parent folder, the platform creates the folder with the project name that you have specified. This folder includes at least the <tt>&#95;project</tt> subfolder that contains an XML file for each item of the project, as the following screenshot shows.[anchor|#fig_ebb_tl2_2w][anchor|#_6abfb991-0fcf-43be-996c-5eb5aeed848d][image:CustomizationPlatform/images/CG_Platform_VCS_02.png|popup|Viewing the content of the <tt>.project</tt> folder|450px]{br}

If the customization project contains custom files, the platform keeps the paths to these files. Therefore, the project folder includes the corresponding folders for these custom files, as shown in the following screenshot.[anchor|#fig_r2w_dm2_2w][anchor|#image_pkr_cfw_bw][image:CustomizationPlatform/images/CG_Platform_VCS_01.png|popup|Viewing the folders inside the project folder|450px]]]></column>
			<column name="PlainText"><![CDATA[To Save a Project to a Local Folder You can save a customization project as set of files to a local folder that can be used for       integration with a source control system. To do this, perform the following actions: Open the project in the   Customization Project                         Editor. On the editor menu, click  Source Control > Saves Project to             Folder . In the  Saves Project to Folder  dialog box, which opens, do the             following: In the  Parent Folder  selector, select the parent folder. In the  Project Name  box, specify the name of the new folder               to be used as the project storage. Click  OK . Within the selected parent folder, the platform creates the folder with the project name that    you have specified. This folder includes at least the  _project  subfolder    that contains an XML file for each item of the project, as the following screenshot shows. Viewing the content of the  .project  folder If the customization project contains custom files, the platform keeps the paths to these       files. Therefore, the project folder includes the corresponding folders for these custom       files, as shown in the following screenshot. Viewing the folders inside the project folder ]]></column>
		</row>
		<row PageID="3b8c021d-3400-4e07-88c6-d7ff538306d3" Language="en-US" PageRevisionID="1" Content="&#xA;If you have saved a customization project to a local folder by invoking the '''Source Control &amp;gt; Saves Project to Folder''' command of the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor], you can update the content of the project that is currently opened in the editor with the data from the folder.{br}&#xA;&#xA;To do this, perform the following actions:[anchor|#_8014903b-cb26-40b1-96b0-bd41d154d6dd]&#xA;#On the editor menu, click '''Source Control &amp;gt; Open Project from Folder'''.&#xA;#In the '''Containing Folder''' box of the '''Open Project from Folder''' dialog box, which opens, select the local folder that contains the files of the needed customization project.&#xA;#:((({S:Warn}If the folder is empty, the content of the project in the database is cleared.&#xA;)))&#xA;#Click '''OK'''.&#xA;" PlainText="To Update the Content of a Project from a Local Folder If you have saved a customization project to a local folder by invoking the  Source                 Control &gt; Saves Project to Folder  command of the   Customization Project                         Editor, you can update the content of the project             that is currently opened in the editor with the data from the folder. To do this, perform the following actions: On the editor menu, click  Source Control &gt; Open Project from                         Folder . In the  Containing Folder  box of the  Open Project from                         Folder  dialog box, which opens, select the local folder that                     contains the files of the needed customization project. If                         the folder is empty, the content of the project in the database is                         cleared. Click  OK . " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="8b7f0b50-50ae-6124-e370-e36515753c16" RecordSourceID="22377" />
		<row PageID="9151800d-b893-4dda-926b-27b5d5eaa971" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="8c7367b7-9ab4-4f68-bae1-f7f7d8a5015d" RecordSourceID="22377">
			<column name="Content"><![CDATA[
To use a self-made or third-party plug-in to integrate with a version control system, you can specify the configuration string required to connect the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor] with the version control system through the plug-in. To do this, perform the following actions:[anchor|#_b9e22b5b-4722-47c7-a755-758534270913]
#Open the customization project in the Customization Project Editor.
#On the editor menu, click '''Source Control &gt; Set Up Source Control'''.
#In '''Config''' box of the '''Source Control Setup''' dialog box, which opens, specify the plug-in to be used and the data required by the plug-in to connect to the version control system.
#Click '''OK'''.
#:The editor tries to connect with the version control system by using the specified configuration string. If the connection fails, the editor displays an error message with the issue description, as the following screenshot shows.[anchor|#_f0213dd6-a5aa-4744-818c-f6f54a856157][anchor|#_46a7d8ac-7f5f-475e-a712-dd678f1a0554][image:CustomizationPlatform/images/CG_GL_VCS_Configuring_02.png|popup|Viewing the box with a connection error message|278px]
]]></column>
			<column name="PlainText"><![CDATA[To Configure a Connection String To use a self-made or third-party plug-in to integrate with a version control system, you can       specify the configuration string required to connect the   Customization Project                         Editor with the version control system through the plug-in.       To do this, perform the following actions: Open the customization project in the Customization Project Editor. On the editor menu, click  Source Control > Set Up Source           Control . In  Config  box of the  Source Control Setup            dialog box, which opens, specify the plug-in to be used and the data required by the           plug-in to connect to the version control system. Click  OK . The editor tries to connect with the version control             system by using the specified configuration string. If the connection fails, the editor             displays an error message with the issue description, as the following screenshot               shows. Viewing the box with a connection error message ]]></column>
		</row>
		<row PageID="ddf1e582-0abb-4720-825d-2d7867809a62" Language="en-US" PageRevisionID="1" PlainText="To Integrate the  Customization Project Editor with Source Control To start tracking changes in a customization project by using source control, perform the             following actions: Configure Visual Studio to use source control. In Visual Studio, do the following: Open your customization project, and add it to the source control. Sync your project with the latest server version. Before starting the project development, you have to do the following each time: Get the latest version of the customization project from the server. Load the project from the local storage, as described in  To Update the Content of a Project from a Local Folder. After the project has been modified, you have to do the following: Update the project in the local storage, as described in  To Save a Project to a Local Folder. Check in the changes to the server. Use Team Foundation Version Control " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="7b9ed007-e7b3-7e1b-1e91-6bba09b5d15f" RecordSourceID="22377">
			<column name="Content"><![CDATA[
To start tracking changes in a customization project by using source control, perform the following actions:[anchor|#_2d166c9c-c716-4bff-a6a8-0d8330ce6dee]
#Configure Visual Studio to use source control.
#In Visual Studio, do the following:
##Open your customization project, and add it to the source control.
##Sync your project with the latest server version.
{br}

Before starting the project development, you have to do the following each time:[anchor|#_b544a70c-a21c-4245-8e0f-fca350d24396]
#Get the latest version of the customization project from the server.
#Load the project from the local storage, as described in [HelpRoot_Dev_Customization\CG_GL_VCS_Opening|To Update the Content of a Project from a Local Folder].
{br}

After the project has been modified, you have to do the following:[anchor|#_7333288b-5c46-49a8-a2e9-026638ab9bf5]
#Update the project in the local storage, as described in [HelpRoot_Dev_Customization\CG_GL_VCS_Saving2Folder|To Save a Project to a Local Folder].
#Check in the changes to the server.

==Related Articles==
*[https://docs.microsoft.com/en-us/vsts/tfvc/overview?view=vsts|Use Team Foundation Version Control]]]></column>
		</row>
		<row PageID="77cf9e6f-7d3d-4501-95d2-bf8c8b0bb7af" Language="en-US" PageRevisionID="1" PlainText="Troubleshooting Customization This part is intended to describe how to solve issues that occur while you are developing or    applying a customization. It will be under ongoing development to cover all the approaches and    ways required to solve each typical issue that is result of an error in customization or a    misunderstanding of the platform features. In This Part To Discover the Method That Has Thrown an ExceptionTo Write to the Trace Log from the CodeTo Log All Exceptions to a FileTo Debug the Customization CodeTo Validate a BQL StatementTo Measure the Execution Time of a BQL StatementTo Discover the Cause of Performance DegradationTo Force the Platform to Execute Database ScriptsTo Resolve Issues While Upgrading a Customized Website" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="4939576b-69f3-943c-a188-be245da9b3f0" RecordSourceID="22377">
			<column name="Content"><![CDATA[
This part is intended to describe how to solve issues that occur while you are developing or applying a customization. It will be under ongoing development to cover all the approaches and ways required to solve each typical issue that is result of an error in customization or a misunderstanding of the platform features.
==In This Part==[anchor|#_d4939107-194a-4ac5-9f8b-6742dbd59bb1]
*[HelpRoot_Dev_Customization\CG_Troubleshooting_Trace_DiscoverMethod|To Discover the Method That Has Thrown an Exception]
*[HelpRoot_Dev_Customization\CG_Troubleshooting_Trace_PXFileTraceProvider|To Write to the Trace Log from the Code]
*[HelpRoot_Dev_Customization\CG_Troubleshooting_Log_FirstChanceException|To Log All Exceptions to a File]
*[HelpRoot_Dev_Customization\CG_Troubleshooting_ToDebug|To Debug the Customization Code]
*[HelpRoot_Dev_Customization\CG_Troubleshooting_ToValidateBQL|To Validate a BQL Statement]
*[HelpRoot_Dev_Customization\CG_Troubleshooting_ToMeasureBQLTime|To Measure the Execution Time of a BQL Statement]
*[HelpRoot_Dev_Customization\CG_Troubleshooting_Performance|To Discover the Cause of Performance Degradation]
*[HelpRoot_Dev_Customization\CG_Troubleshooting_DBScripts|To Force the Platform to Execute Database Scripts]
*[HelpRoot_Dev_Customization\CG_GL_Upgrading|To Resolve Issues While Upgrading a Customized Website]

==Related Articles==
*[HelpRoot_Administration\CON_Troubleshooting_Tools|Troubleshooting Acumatica ERP]]]></column>
		</row>
		<row PageID="a466e076-68db-4557-bd42-1366310a18d2" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="0d751a17-4228-04f4-63d6-813e5e4fb377" RecordSourceID="22377">
			<column name="Content"><![CDATA[
If an exception has occurred at run time and a message box with an error or a warning has been displayed on the form, you can easily discover the method that has thrown the exception. To do this, perform the following actions:[anchor|#_e2f30b88-d71c-44c6-a59a-d3849f6cff5f]
#Read the message, and close the message box.
#On the title bar of an Acumatica ERP form, click '''Tools''' > '''Trace'''.
#On the Acumatica Trace page, which opens to display the trace log, find the appropriate error message, and click the arrow left of the '''Details''' label for the message to show the detailed information on the error.
#:In the list of the method calls that were on the stack at the moment of the error, the upper method is the one that threw the exception.
#:((({S:Warn}By default, the trace log is stored on the Acumatica ERP server for the current user session. If the user opens two Acumatica ERP forms simultaneously in two tabs or windows of a browser, the Acumatica ERP server creates a subsession for each opened form and stores the trace logs separately for each subsession. After a session or subsession of the user is completed (due to the user logging off or being timed out), the server clears the appropriate log. To save the trace logs of all subsessions of all users in a single file on the server, a user with the ''Administrator'' role has to change the <tt>web.config</tt> file of the Acumatica ERP instance to configure the appropriate trace provider. See the ''Trace'' section of [HelpRoot_Administration\CON_Troubleshooting_Tools_Logs|Using Logs] for details.
)))
]]></column>
			<column name="PlainText"><![CDATA[To Discover the Method That Has Thrown an Exception If an exception has occurred at run time and a message box with an error or a warning has       been displayed on the form, you can easily discover the method that has thrown the exception.       To do this, perform the following actions: Read the message, and close the message box. On the title bar of an  Acumatica ERP form, click  Tools Trace . On the  Acumatica Trace page, which opens to display the trace log, find the appropriate error message,           and click the arrow left of the  Details  label for the message to           show the detailed information on the error. In the list of the method calls that were on             the stack at the moment of the error, the upper method is the one that threw the             exception. By default, the trace log is stored on the  Acumatica ERP             server for the current user session. If the user opens two  Acumatica ERP             forms simultaneously in two tabs or windows of a browser, the  Acumatica ERP             server creates a subsession for each opened form and stores the trace logs separately             for each subsession. After a session or subsession of the user is completed (due to the             user logging off or being timed out), the server clears the appropriate log.  To save                 the trace logs of all subsessions of all users in a single file on the server, a                 user with the  Administrator  role has to change the                      web.config  file of the  Acumatica ERP instance to configure the appropriate trace provider. See the  Trace                  section of  Using Logs                 for details. ]]></column>
		</row>
		<row PageID="02895968-0545-41ca-8b2b-0c1b39256bce" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="e6123ffe-e57c-2ca8-e04e-492309bf4209" RecordSourceID="22377">
			<column name="Content"><![CDATA[
When you are developing and troubleshooting the customization code, you may need to know what happens during code execution (for example, an action being called or an event being raised). You can write information to the trace log directly from your code by using one of the following approaches:[anchor|#_87dbe291-5ab9-4f30-bb86-85cd9c3c8d05]
*Using the methods of the <tt>ILogger&lt;T&gt;</tt> interface, which is provided by Microsoft
*Using the methods of the <tt>PXTrace</tt> static class
[anchor|#_fe3007af-cfe9-4927-8656-3dfb1f1ca055]((({S:Warn}By default, the trace log is stored on the Acumatica ERP server for the current user session. If the user opens two Acumatica ERP forms simultaneously in two tabs or windows of a browser, the Acumatica ERP server creates a subsession for each opened form and stores the trace logs separately for each subsession. After a session or subsession of the user is completed (due to the user logging off or being timed out), the server clears the appropriate log. 
To save the trace logs of all subsessions of all users in a single file on the server, a user with the ''Administrator'' role has to change the <tt>web.config</tt> file of the Acumatica ERP instance to configure the appropriate trace provider. See the ''Trace'' section of [HelpRoot_Administration\CON_Troubleshooting_Tools_Logs|Using Logs] for details.
)))A user can see the log message in the trace log if the user clicks '''Tools''' > '''Trace''' on the form title bar after the corresponding logic has been executed.{br}{TOC}
==Writing to the Trace Log by Using the Methods of ILogger&lt;T&gt;==
 Acumatica ERP supports the logging mechanism provided by the <tt>Microsoft.Extensions.Logging.Abstractions</tt> NuGet package. You can use this mechanism in custom code to write to the trace log.{br}

To use this mechanism, you should do the following:[anchor|#_549873e5-27fa-40b8-981a-aa9848bedec4]
#Install the <tt>Microsoft.Extensions.Logging.Abstractions</tt> NuGet package to the Visual Studio project that contains custom code.
#Add the following {{using}} directive to the code file that contains the logic for which you need to write to the log.<source lang="csharp">using Microsoft.Extensions.Logging;</source>
#In the graph that executes the logic, add a property of the <tt>ILogger&lt;T&gt;</tt> type, and assign the <tt>InjectDependency</tt> attribute to the property, as shown in the following example. Use the graph as the type parameter.
#:((({S:Hint}For details about the <tt>InjectDependency</tt> attribute, see [HelpRoot_Dev_Platform\BL__CON_DependencyInjection|Dependency Injection].
))){{{{public class RSSVWorkOrderEntry : PXGraph&lt;RSSVWorkOrderEntry, RSSVWorkOrder&gt;
{
    //Other code of the graph

    //The logger
    [InjectDependency]
    private ILogger&lt;RSSVWorkOrderEntry&gt; MyLogger { get; set; }
}
}}}}
#In the code for which you need to write to the log, such as in an action of the graph, call the methods of the <tt>ILogger&lt;T&gt;</tt> interface to write to the trace log. For details about the methods of the interface, see [https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.logging.ilogger-1?view=dotnet-plat-ext-3.1|ILogger&lt;TCategoryName&gt; Interface] in the Microsoft documentation. The following example shows the call of the <tt>LogInformation</tt> method.<source lang="csharp">public class RSSVWorkOrderEntry : PXGraph&lt;RSSVWorkOrderEntry, RSSVWorkOrder&gt;
{
    //Other code of the graph

    //The logger
    [InjectDependency]
    private ILogger&lt;RSSVWorkOrderEntry&gt; MyLogger { get; set; }

    //A method in the graph
    public void AssignOrder(RSSVWorkOrder order)
    {
        //Implementation of the method
        
        //Writing to the log
        MyLogger.LogInformation(
            "The {OrderNbr} work order has been assigned.", order.OrderNbr);
    }
}</source>
#:((({S:Warn}Do not use string formatting inside the log messages, as is shown in the following code example.<source lang="csharp">MyLogger.LogInformation(
    string.Format("The {0} work order has been assigned.", order.OrderNbr));
MyLogger.LogInformation(
    $"The {order.OrderNbr} work order has been assigned."));</source>
)))

==Writing to the Trace Log by Using the Methods of PXTrace==
You can write information to the trace log directly from your code by using the following methods of the <tt>PXTrace</tt> static class:[anchor|#_3b3f508a-2505-4352-bdd6-bea06095935a]
*{{public static void WriteError(string message)}}
*{{public static void WriteError(Exception e)}}
*{{public static void WriteWarning(string message)}}
*{{public static void WriteWarning(Exception e)}}
*{{public static void WriteInformation(string message)}}
*{{public static void WriteInformation(Exception e)}}
*{{public static void WriteVerbose(string message)}}
{br}

To manage writing information to the trace log, you can use the following methods of the <tt>PXTrace</tt> static class:[anchor|#_142a428f-894f-4553-bf7b-1b5f02e26a05]
*{{public static Serilog.ILogger WithStack()}}
*:By default, the stack trace is not collected so that the project does not impair system performance. To turn on the collection of the stack trace, call the <tt>WithStack</tt> method, as the following code example shows. Note that in the presented code, the stack trace is collected only if the appropriate logging level has been set up.{{{{PXTrace.WithStack().Information(“some info”);
}}}}
*{{public static Serilog.ILogger WithSourceLocation()}}
((({S:Warn}To use the <tt>WithStack</tt> and <tt>WithSourceLocation</tt> methods, you must include the external <tt>Serilog</tt> library. We recommend that you use the <tt>Serilog</tt> library located in the {{Bin}} folder of Acumatica ERP.
)))
The <tt>WithStack</tt> and <tt>WithSourceLocation</tt> methods can be chained with <tt>Serilog.ILogger</tt> methods.
==Adding a Log Method to the Published Customization Code==
If you want to avoid changes in the customization project, you can add this method to the customization code that has already been applied to the application instance. To do this, perform the following actions:[anchor|#_f281180f-042f-4dbe-b6bd-65570677079a]
#Make sure that the customization project that contains the code you are debugging has been published. If the project is unpublished, publish it, as described in [HelpRoot_Dev_Customization\CG_GL_Projects_Publishing|Publishing Customization Projects].
#Launch Microsoft Visual Studio.
#In Visual Studio, open the file with the code that is currently saved in the <tt>App&#95;RuntimeCode</tt> website folder.
#Add a call of one of the methods listed above to the appropriate code sample.
#Save your changes to the file.
#In the browser, open or refresh the form that you are troubleshooting.
#On the form, perform the sequence of actions that invokes the changed code.
#Click '''Tools''' > '''Trace''' to open the Acumatica Trace page.
#On the page, explore the trace log to make sure that the changed code sample has been executed.
((({S:Hint}When you publish or export the project, the Acumatica Customization           Platform compares the code in the <tt>App&#95;RuntimeCode</tt> website folder with the appropriate code in the database and discovers the files that have been changed in the file system. If a modified file is found, there is a conflict, and the platform opens the '''Modified Files Detected''' dialog box, in which you can direct the system to update the files in the project or discard the changes. See [HelpRoot_Dev_Customization\CG_Platform_TO_Features_AutoDetectMF|Detecting the Project Items Modified in the File System] for details.
)))
==Specifying the Logging Level==
Events that you log in code have different logging levels. You can specify a logging level in {{web.config}} so that only events up to that level will be logged. You set up the logging level by using the following settings in the {{web.config}} file:[anchor|#_1a9e8234-7a78-4f5b-8851-73bf6445bb5e]
*{{system.web/pxtrace/@minimumLevel}}: An indicator of the overall minimum level of severity of events that can be logged by the providers defined in the {{pxtrace}} section.
*{{system.web/pxtrace/add/@minimumLevel}}: An indicator of the minimum level of severity of events that a particular provider in the {{pxtrace}} section must log. For example, you can specify a different level of severity for a provider that saves log messages to a file.
The logging levels are the following: {{Fatal}}, {{Error}}, {{Warning}}, {{Information}}, {{Debug}}, {{Verbose}}. By default, the {{Verbose}} level is specified.]]></column>
			<column name="PlainText"><![CDATA[To Write to the Trace Log from the Code When you are developing and troubleshooting the customization code, you may need to know         what happens during code execution (for example, an action being called or an event being         raised). You can write information to the trace log directly from your code by using one of         the following approaches: Using the methods of the  ILogger<T>  interface, which is provided             by Microsoft Using the methods of the  PXTrace  static class By default, the trace log is stored on the  Acumatica ERP             server for the current user session. If the user opens two  Acumatica ERP             forms simultaneously in two tabs or windows of a browser, the  Acumatica ERP             server creates a subsession for each opened form and stores the trace logs separately             for each subsession. After a session or subsession of the user is completed (due to the             user logging off or being timed out), the server clears the appropriate log.  To save                 the trace logs of all subsessions of all users in a single file on the server, a                 user with the  Administrator  role has to change the                      web.config  file of the  Acumatica ERP instance to configure the appropriate trace provider. See the  Trace                  section of  Using Logs                 for details. A user can see the log message in the trace log if the user clicks  Tools Trace  on the form title bar after the corresponding logic has been executed. Writing to the Trace Log by Using the Methods of ILogger<T>  Acumatica ERP supports the logging mechanism provided by the            Microsoft.Extensions.Logging.Abstractions  NuGet package. You can use         this mechanism in custom code to write to the trace log. To use this mechanism, you should do the following: Install the  Microsoft.Extensions.Logging.Abstractions  NuGet             package to the Visual Studio project that contains custom code. Add the following  using  directive to the code file that contains the             logic for which you need to write to the             log. using Microsoft.Extensions.Logging; In the graph that executes the logic, add a property of the                ILogger<T>  type, and assign the                InjectDependency  attribute to the property, as shown in the             following example. Use the graph as the type parameter. For details               about the  InjectDependency  attribute, see  Dependency Injection. public class RSSVWorkOrderEntry : PXGraph<RSSVWorkOrderEntry, RSSVWorkOrder>
{
    //Other code of the graph

    //The logger
    [InjectDependency]
    private ILogger<RSSVWorkOrderEntry> MyLogger { get; set; }
} In the code for which you need to write to the log, such as in an action of the graph,             call the methods of the  ILogger<T>  interface to write to the trace             log. For details about the methods of the interface, see  ILogger<TCategoryName> Interface ILogger&lt;TCategoryName&gt; Interface in the             Microsoft documentation. The following example shows the call of the                LogInformation                method. public class RSSVWorkOrderEntry : PXGraph<RSSVWorkOrderEntry, RSSVWorkOrder>
{
    //Other code of the graph

    //The logger
    [InjectDependency]
    private ILogger<RSSVWorkOrderEntry> MyLogger { get; set; }

    //A method in the graph
    public void AssignOrder(RSSVWorkOrder order)
    {
        //Implementation of the method
        
        //Writing to the log
        MyLogger.LogInformation(
            "The {OrderNbr} work order has been assigned.", order.OrderNbr);
    }
} Do               not use string formatting inside the log messages, as is shown in the following code               example. MyLogger.LogInformation(
    string.Format("The {0} work order has been assigned.", order.OrderNbr));
MyLogger.LogInformation(
    $"The {order.OrderNbr} work order has been assigned.")); Writing to the Trace Log by Using the Methods of PXTrace You can write information to the trace log directly from your code by using the following         methods of the  PXTrace  static class: public static void WriteError(string message) public static void WriteError(Exception e) public static void WriteWarning(string message) public static void WriteWarning(Exception e) public static void WriteInformation(string message) public static void WriteInformation(Exception e) public static void WriteVerbose(string message) To manage writing information to the trace log, you can use the following methods of the            PXTrace  static class: public static Serilog.ILogger WithStack() By default, the stack trace             is not collected so that the project does not impair system performance. To turn on the             collection of the stack trace, call the  WithStack  method, as the             following code example shows. Note that in the presented code, the stack trace is             collected only if the appropriate logging level has been set             up. PXTrace.WithStack().Information(“some info”); public static Serilog.ILogger WithSourceLocation() To use the  WithStack  and            WithSourceLocation  methods, you must include the external            Serilog  library. We recommend that you use the            Serilog  library located in the  Bin  folder of  Acumatica ERP. The  WithStack  and  WithSourceLocation  methods can be         chained with  Serilog.ILogger  methods. Adding a Log Method to the Published Customization Code If you want to avoid changes in the customization project, you can add this method to the         customization code that has already been applied to the application instance. To do this,         perform the following actions: Make sure that the customization project that contains the code you are debugging has             been published. If the project is unpublished, publish it, as described in  Publishing Customization Projects. Launch Microsoft Visual Studio. In Visual Studio, open the file with the code that is currently saved in the                App_RuntimeCode  website folder. Add a call of one of the methods listed above to the appropriate code sample. Save your changes to the file. In the browser, open or refresh the form that you are troubleshooting. On the form, perform the sequence of actions that invokes the changed code. Click  Tools Trace  to open the  Acumatica Trace page. On the page, explore the trace log to make sure that the changed code sample has been             executed. When you publish or export the project, the  Acumatica Customization           Platform compares the code in the  App_RuntimeCode  website folder with the           appropriate code in the database and discovers the files that have been changed in the           file system. If a modified file is found, there is a conflict, and the platform opens the              Modified Files Detected  dialog box, in which you can direct the           system to update the files in the project or discard the changes. See  Detecting the Project Items Modified in the File System for details. Specifying the Logging Level Events that you log in code have different logging levels. You can specify a logging level         in  web.config  so that only events up to that level will be logged. You set         up the logging level by using the following settings in the  web.config            file: system.web/pxtrace/@minimumLevel : An indicator of the overall minimum             level of severity of events that can be logged by the providers defined in the                pxtrace  section. system.web/pxtrace/add/@minimumLevel : An indicator of the minimum             level of severity of events that a particular provider in the  pxtrace              section must log. For example, you can specify a different level of severity for a             provider that saves log messages to a file. The logging levels are the following:  Fatal ,  Error ,            Warning ,  Information ,  Debug ,            Verbose . By default, the  Verbose  level is specified. ]]></column>
		</row>
		<row PageID="c9abc50f-4b48-4527-bdd4-0e2111176f14" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="eb03cc73-1587-107d-8bd2-8bc0a3726b86" RecordSourceID="22377">
			<column name="Content"><![CDATA[
 Acumatica ERP provides a mechanism you can use for catching and logging all exceptions in the system. (See the ''First-Chance Exception Log'' section of [HelpRoot_Administration\CON_Troubleshooting_Tools_Logs|Using Logs] for details.) If you have been assigned the ''Administrator'' role, you can activate this mechanism and specify the name of the log file. To do this, perform the following actions:[anchor|#_d1bc5a07-f59a-46ff-aa66-efa7afb4cda5]
#In the file system, open in a text editor the <tt>web.config</tt> file located in the website folder.
#Within the <tt>&lt;appSettings&gt;</tt> tag of the file, turn on the <tt>EnableFirstChanceExceptionsLogging</tt> key, as follows.{{{{&lt;add key="EnableFirstChanceExceptionsLogging" value="True" /&gt;
}}}}
#If you need to change the log file name, which is <tt>firstchanceexceptions.log</tt> by default, you can specify the needed name in the <tt>FirstChanceExceptionsLogFileName</tt> key, as follows.{{{{&lt;add key="FirstChanceExceptionsLogFileName" value="MyLog.log" /&gt;
}}}}
#:((({S:Warn}By default, the first-chance exception log file is saved in the <tt>App&#95;Data</tt> folder of the website.
)))
{br}

You can open the log file in a text editor to view the content of the first-change exception log, as the following screenshot shows.[anchor|#_7cff5cae-2a66-4a51-a2f3-20c512f44629][anchor|#_5822a85a-fbd5-455b-a640-658268b08efb][image:CustomizationPlatform/images/CG_Troubleshooting_Trace_FirstChanceException_01.png|popup|Viewing the first-chance exception log|450px]]]></column>
			<column name="PlainText"><![CDATA[To Log All Exceptions to a File  Acumatica ERP provides a mechanism you can use for catching and logging all exceptions in the system. (See    the  First-Chance Exception Log  section of  Using Logs for details.) If you have been    assigned the  Administrator  role, you can activate this mechanism and specify the name of    the log file. To do this, perform the following actions: In the file system, open in a text editor the  web.config  file located      in the website folder. Within the  <appSettings>  tag of the file, turn on the        EnableFirstChanceExceptionsLogging  key, as      follows. <add key="EnableFirstChanceExceptionsLogging" value="True" /> If you need to change the log file name, which is        firstchanceexceptions.log  by default, you can specify the needed name in      the  FirstChanceExceptionsLogFileName  key, as       follows. <add key="FirstChanceExceptionsLogFileName" value="MyLog.log" /> By       default, the first-chance exception log file is saved in the  App_Data        folder of the website. You can open the log file in a text editor to view the content of the first-change exception    log, as the following screenshot shows. Viewing the first-chance exception log ]]></column>
		</row>
		<row PageID="be6a54e2-0f6c-4566-99f8-aeba6c3944dd" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="33ac2acc-8ade-dee1-7bda-c6863282883a" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_CodeEditor|Code Editor] does not provide facilities you can use to debug a code item of a customization project. We recommend that you use Microsoft Visual Studio to develop and debug any source code in customization projects. To start debugging an existing ''Code'' item in Visual Studio, perform the following instructions:[anchor|#_07d8f9a5-84c0-4786-ac6b-ab0a92efe6a4]
#Publish the customization project, as described in [HelpRoot_Dev_Customization\CG_GL_Projects_Publishing|Publishing Customization Projects].
#In the file system, open in a text editor the <tt>web.config</tt> file located in the website folder.
#In <tt>&lt;system.web&gt;</tt> tag of the file, locate the <tt>&lt;compilation&gt;</tt> element.
#Set to ''true'' the <tt>debug</tt> attribute of the element, as follows.{{{{&lt;compilation debug="true" ...&gt;
}}}}
#:((({S:Warn}See [https://msdn.microsoft.com/en-us/library/e8z01xdh(vs.71)|Debug Mode in ASP.NET Applications] for details.
)))
#In a browser, launch your instance of Acumatica ERP to have a running process in the system.
#Launch Visual Studio.
#To open the website of your instance of Acumatica ERP in Visual Studio, on the main menu, click '''File &gt; Open &gt; Web Site''', and select the website folder in the '''Open Web Site''' dialog box, which opens.
#In the Solution Explorer of Visual Studio, expand the <tt>App&#95;RuntimeCode</tt> website folder, and double-click the file of the ''Code'' item to open it.
#In the item source code, which opens, set a breakpoint on the line of the code where you need to stop the process for debugging.
#On the main menu, click '''Debug &gt; Attach to Process''', and in the '''Attach to Process''' dialog box, which opens, select the <tt>w3wp.exe</tt> process in the list of '''Available Processes'''.
#:((({S:Warn}In the dialog box, ensure that the '''Show processes from all users''' check box is selected. If the check box is cleared, the list will not display the <tt>w3wp.exe</tt> process record.
)))
#In the browser, open the form of Acumatica ERP whose business logic code you want to debug.
#In the browser, run an operation that invokes the fragment of the code that contains the breakpoint.
The process will be stopped at the breakpoint, and you can debug the code in Visual Studio.]]></column>
			<column name="PlainText"><![CDATA[To Debug the Customization Code The  Code Editor does not provide facilities you can use to debug a code item of a customization project. We recommend that you use Microsoft Visual Studio to develop and debug any source code in customization projects. To start debugging an existing  Code  item in Visual Studio, perform the following instructions: Publish the customization project, as described in  Publishing Customization Projects. In the file system, open in a text editor the                              web.config  file located in the website folder. In  <system.web>  tag of the file, locate the                              <compilation>  element. Set to  true  the  debug  attribute of the element, as                             follows. <compilation debug="true" ...> See                                  Debug Mode in ASP.NET                                 Applications Debug Mode in ASP.NET Applications for details. In a browser, launch your instance of  Acumatica ERP to have a running process in the system. Launch Visual Studio. To open the website of your instance of  Acumatica ERP in Visual Studio, on the main menu, click  File > Open > Web Site , and select the website folder in the  Open Web Site  dialog box, which opens. In the Solution Explorer of Visual Studio, expand the  App_RuntimeCode  website folder, and double-click the file of the  Code  item to open it. In the item source code, which opens, set a breakpoint on the line of the code where you need to stop the process for debugging. On the main menu, click  Debug > Attach to Process , and in the                              Attach to Process  dialog box, which opens, select                         the  w3wp.exe  process in the list of                              Available Processes . In the dialog box,                             ensure that the  Show processes from all users                              check box is selected. If the check box is cleared, the list will not                             display the  w3wp.exe  process record. In the browser, open the form of  Acumatica ERP whose business logic code you want to debug. In the browser, run an operation that invokes the fragment of the code that contains the breakpoint. The process will be stopped at the breakpoint, and you can debug the code in Visual Studio. ]]></column>
		</row>
		<row PageID="e300d3d5-4db8-4fe2-8d4f-8644fe031c13" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="dfa0e843-d174-c506-07b0-828dbdc9ba32" RecordSourceID="22377">
			<column name="Content"><![CDATA[
Suppose that you have a BQL statement in the customization code that does not work properly or you want to make sure that a BQL statement is correctly converted into an SQL query. To validate the BQL statement, you can use the Request Profiler.{br}

To do this, perform the following actions:[anchor|#_17e06fa5-bc88-4dfc-884b-482cdc47cfe3]
#Open the [HelpRoot_FormReference\SM_20_50_70|Request Profiler] form ([~/?ScreenId=SM205070|SM205070]) in the browser.
#In the '''Profiler Options''' section, select the '''Log SQL Requests''' check box, which indicates that the SQL request data should be stored in the database.
#On the form toolbar, click '''Start''', as shown in the following screenshot.[anchor|#_da54caf1-b2aa-4418-9aa2-b323b2c584f7][image:CustomizationPlatform/images/CG_Troubleshooting_ToValidateBQL_01.png|popup|Launching the SQL Profiler|450px]
#In the browser, open the form that uses the customization code with the BQL statement.
#On this form, perform the action that executes the BQL statement.
#Open the [HelpRoot_FormReference\SM_20_50_70|Request Profiler] form ([~/?ScreenId=SM205070|SM205070]).
#On the form toolbar, click '''Refresh Results''' to refresh the log table.
#In the '''Command Name''' column of the log table, find the URL request that is related to the needed BQL statement.
#Select the needed URL request, as shown in the screenshot below.
#On the table toolbar, click '''SQL''' to open the '''SQL Profiler''' pop-up panel.[anchor|#_8e48263d-7644-4d09-8b37-a7cc97edc671][image:CustomizationPlatform/images/CG_Troubleshooting_ToValidateBQL_02.png|popup|Opening the SQL Profiler pop-up panel for the selected URL request|450px]
#On the panel, in the list of SQL requests for the currently selected URL request, find and click the SQL request that corresponds to the BQL statement.
#On the panel toolbar, click '''Switch Between Grid and Form''' (
#:[image:CustomizationPlatform/images/Icons_Form_Grid_Views.png|Opening the SQL Profiler pop-up panel for the selected URL request|16px]), as shown in the following screenshot, to view the SQL statement of the selected request.[anchor|#_686d98b6-1808-45f2-a680-3cba373e5491][image:CustomizationPlatform/images/CG_Troubleshooting_ToValidateBQL_03.png|popup|Switching the panel to display the content of the selected SQL request|450px]
#:((({S:Warn}Because you know the name of the table that you use in the BQL statement, we recommend that you specify the name as a filter in the '''Tables''' column of the SQL profiler table, as the following screenshot shows.[anchor|#_b4680800-30f8-46bc-b14d-3e67e99b7160][anchor|#_713ba633-526d-406c-9c0e-8934f431bd8c][image:CustomizationPlatform/images/CG_Troubleshooting_ToValidateBQL_05.png|popup|Setting a filter for the SQL request list|420px]If the BQL statement contains a parameter, you can also use the parameter to filter the list.If a filter is specified for a column of the table of the '''SQL Profiler''' pop-up panel, the filter icon is displayed in the column caption, as shown in the following screenshot.[anchor|#_fb369ac2-09f3-4c9d-8e34-aa5c8bc0a404][anchor|#_bfc381b4-642e-4210-8408-1e247b9ec05a][image:CustomizationPlatform/images/CG_Troubleshooting_ToValidateBQL_06.png|popup|Viewing the filter icon on the panel|410px]A filter is applied to the list for every URL request until you clear the filter.
)))
#In the SQL area of the panel, shown in the following screenshot, view the SQL statement to validate the BQL statement used in the customization code.[anchor|#_aeb3570f-6a92-4659-976f-b08005fd004c][image:CustomizationPlatform/images/CG_Troubleshooting_ToValidateBQL_04.png|popup|Viewing the SQL statement|450px]
#On the form toolbar of the [HelpRoot_FormReference\SM_20_50_70|Request Profiler] form ([~/?ScreenId=SM205070|SM205070]), click '''Stop''' to stop the Request Profiler.
#:((({S:Hint}We recommend that you activate the ''Log SQL'' mode for only a limited period because it can degrade system performance.
)))
#On the form toolbar, click '''Clear Log''' to delete the SQL request data from the database.
]]></column>
			<column name="PlainText"><![CDATA[To Validate a BQL Statement Suppose that you have a BQL statement in the customization code that does not work properly       or you want to make sure that a BQL statement is correctly converted into an SQL query. To       validate the BQL statement, you can use the Request Profiler. To do this, perform the following actions: Open the   ([~/?ScreenId=SM205070|SM205070]) Request Profiler form (SM205070) in the           browser. In the  Profiler Options  section, select the  Log SQL             Requests  check box, which indicates that the SQL request data should be           stored in the database. On the form toolbar, click  Start , as shown in the following             screenshot. Launching the SQL Profiler In the browser, open the form that uses the customization code with the BQL           statement. On this form, perform the action that executes the BQL statement. Open the   ([~/?ScreenId=SM205070|SM205070]) Request Profiler form (SM205070). On the form toolbar, click  Refresh Results  to refresh the log           table. In the  Command Name  column of the log table, find the URL request           that is related to the needed BQL statement. Select the needed URL request, as shown in the screenshot below. On the table toolbar, click  SQL  to open the  SQL             Profiler  pop-up panel. Opening the SQL Profiler pop-up panel for the selected URL request On the panel, in the list of SQL requests for the currently selected URL request, find           and click the SQL request that corresponds to the BQL statement. On the panel toolbar, click  Switch Between Grid and Form  ( ), as shown in the following screenshot, to           view the SQL statement of the selected request. Switching the panel to display the content of the selected SQL request Because you know the name of the table that you use in the BQL statement, we             recommend that you specify the name as a filter in the  Tables              column of the SQL profiler table, as the following screenshot shows. Setting a filter for the SQL request list If the BQL statement contains a parameter, you can also use the parameter to             filter the list. If a filter is specified for a column of the table of the                  SQL Profiler  pop-up panel, the filter icon is displayed in               the column caption, as shown in the following screenshot. Viewing the filter icon on the panel A filter is applied to the list for every URL request until you clear the               filter. In the SQL area of the panel, shown in the following screenshot, view the SQL statement           to validate the BQL statement used in the customization code. Viewing the SQL statement On the form toolbar of the   ([~/?ScreenId=SM205070|SM205070]) Request Profiler form           (SM205070), click  Stop  to stop the Request Profiler. We recommend that you activate the  Log SQL              mode for only a limited period because it can degrade system performance. On the form toolbar, click  Clear Log  to delete the SQL request           data from the database. ]]></column>
		</row>
		<row PageID="0cbc6cc9-8288-49ac-a4cd-609d7d474431" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="0fb6cece-4949-2cd2-8342-f4dd16cf5123" RecordSourceID="22377">
			<column name="Content"><![CDATA[
Suppose that in the customization code you have a BQL statement that can affect system performance. To measure the execution time of the BQL statement, you can use the Request Profiler.{br}

To do this, perform the following actions:[anchor|#_17e06fa5-bc88-4dfc-884b-482cdc47cfe3]
#Open the [HelpRoot_FormReference\SM_20_50_70|Request Profiler] form ([~/?ScreenId=SM205070|SM205070]) in the browser.
#In the '''Profiler Options''' area of the form, select the '''Log SQL Requests''' check box, that indicates that the SQL request data should be stored in the database.
#On the form toolbar, click '''Start''', as shown in the following screenshot.[anchor|#_da54caf1-b2aa-4418-9aa2-b323b2c584f7][image:CustomizationPlatform/images/CG_Troubleshooting_ToValidateBQL_01.png|popup|Launching the SQL Profiler|450px]
#In the browser, open the form that uses the customization code with the BQL statement.
#On the form, perform the action that executes the BQL statement.
#Open the [HelpRoot_FormReference\SM_20_50_70|Request Profiler] form ([~/?ScreenId=SM205070|SM205070]).
#On the form toolbar, click '''Refresh Results''' to refresh the log table.
#In the '''Command Name''' column of the log table, find the URL request that is related to the needed BQL statement.
#Click the needed URL request, as shown in the screenshot below.
#On table toolbar, click '''SQL''' to open the '''SQL Profiler''' pop-up panel.[anchor|#_8e48263d-7644-4d09-8b37-a7cc97edc671][image:CustomizationPlatform/images/CG_Troubleshooting_ToMeasureBQLTime_02.png|popup|Opening the SQL Profiler pop-up panel for the selected URL request|450px]
#On the panel, in the table, specify filters for one or both of the '''Tables''' and '''Parameters''' columns to shorten the list, as follows:
##Click the column caption to open a simple filter for the column, as the following screenshot shows.
##Enter the name of the needed table (for the '''Tables''' column) or parameter (for the '''Parameters''' column) that is used in the BQL statement you are referring to.
##Click '''OK''' to save the filter.[anchor|#_713ba633-526d-406c-9c0e-8934f431bd8c][image:CustomizationPlatform/images/CG_Troubleshooting_ToMeasureBQLTime_03.png|popup|Setting a filter for the SQL request list|420px]
#:((({S:Warn}If a filter is specified for a column of the table of the '''SQL Profiler''' pop-up panel, the filter icon is displayed in the column caption, as shown in the following screenshot.[anchor|#_fb369ac2-09f3-4c9d-8e34-aa5c8bc0a404][anchor|#_bfc381b4-642e-4210-8408-1e247b9ec05a][image:CustomizationPlatform/images/CG_Troubleshooting_ToValidateBQL_06.png|popup|Viewing the filter icon on the panel|410px]The filter is applied to the list for every URL request until you clear the filter.
)))
#In the filtered list of SQL requests for the currently selected URL request, find the SQL request that corresponds to the BQL statement.[anchor|#_686d98b6-1808-45f2-a680-3cba373e5491][image:CustomizationPlatform/images/CG_Troubleshooting_ToMeasureBQLTime_04.png|popup|Viewing the duration of the selected SQL request|410px]
#:The execution time of the SQL request is displayed in the '''TimeMs''' column.
#On the form toolbar of the [HelpRoot_FormReference\SM_20_50_70|Request Profiler] form ([~/?ScreenId=SM205070|SM205070]), click '''Stop''' to stop the Request Profiler.
#:((({S:Hint}We recommend that you activate the ''Log SQL'' mode for only a limited period because it can degrade system performance.
)))
#On the form toolbar, click '''Clear Log''' to delete the SQL request data from the database.
]]></column>
			<column name="PlainText"><![CDATA[To Measure the Execution Time of a BQL Statement Suppose that in the customization code you have a BQL statement that can affect system       performance. To measure the execution time of the BQL statement, you can use the Request       Profiler. To do this, perform the following actions: Open the   ([~/?ScreenId=SM205070|SM205070]) Request Profiler form (SM205070) in the           browser. In the  Profiler Options  area of the form, select the  Log       SQL Requests  check box, that indicates that the SQL request data should be stored      in the database. On the form toolbar, click  Start , as shown in the following             screenshot. Launching the SQL Profiler In the browser, open the form that uses the customization code with the BQL statement. On the form, perform the action that executes the BQL statement. Open the   ([~/?ScreenId=SM205070|SM205070]) Request Profiler form (SM205070). On the form toolbar, click  Refresh Results  to refresh the log      table. In the  Command Name  column of the log table, find the URL request           that is related to the needed BQL statement. Click the needed URL request, as shown in the screenshot below. On table toolbar, click  SQL  to open the  SQL       Profiler  pop-up panel. Opening the SQL Profiler pop-up panel for the selected URL request On the panel, in the table, specify filters for one or both of the              Tables  and  Parameters  columns to shorten           the list, as follows: Click the column caption to open a simple filter for the column, as the following               screenshot shows. Enter the name of the needed table (for the  Tables  column) or               parameter (for the  Parameters  column) that is used in the BQL               statement you are referring to. Click  OK  to save the filter. Setting a filter for the SQL request list If a filter is specified for a column of the table of the  SQL               Profiler  pop-up panel, the filter icon is displayed in the column caption,             as shown in the following screenshot. Viewing the filter icon on the panel The filter is applied to the list for every URL request until you clear the             filter. In the filtered list of SQL requests for the currently selected URL request, find the SQL           request that corresponds to the BQL statement. Viewing the duration of the selected SQL request The execution time of the SQL request is displayed in the                TimeMs  column. On the form toolbar of the   ([~/?ScreenId=SM205070|SM205070]) Request Profiler form (SM205070),           click  Stop  to stop the Request Profiler. We recommend that you activate the  Log SQL              mode for only a limited period because it can degrade system performance. On the form toolbar, click  Clear Log  to delete the SQL request data      from the database. ]]></column>
		</row>
		<row PageID="11666144-db7d-4055-ad71-bd4906f4fc65" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="821e4b5c-fafb-b287-e68c-b703122ca35d" RecordSourceID="22377">
			<column name="Content"><![CDATA[
Suppose that after publishing a customization project, you notice that the Acumatica ERP performance on a customized form is degraded. To check whether the content of the customization project is the cause of the performance degradation and to find the code fragment that affects system performance, you can use the Request Profiler.{br}

The following sections provide detailed information:[anchor|#ul_odd_xrt_fq]
*[[#_fe5fdf6e-4727-4249-910c-3468945f90cb|To Check Whether a Customization Project Affects System Performance]
*[[#_3f9fa934-c620-4e17-8fbe-ede97555f53d|To Find the Code Fragment That Is Affecting System Performance]
[anchor|#_fe5fdf6e-4727-4249-910c-3468945f90cb]
==To Check Whether a Customization Project Affects System Performance==
To check whether a customization project degrades the Acumatica ERP performance, perform the following actions:[anchor|#_c92b573f-7cf6-41f4-a718-d24eed818103]
#Unpublish all customization projects, as described in [HelpRoot_Dev_Customization\CG_GL_Projects_Unpublishing|To Unpublish a Customization].
#Open the [HelpRoot_FormReference\SM_20_50_70|Request Profiler] form ([~/?ScreenId=SM205070|SM205070]) in the browser.
#In the '''Profiler Options''' section, select the '''Log SQL Requests''' check box, which indicates that the SQL request data should be stored in the database.
#On the form toolbar, click '''Start''', as shown in the following screenshot.[anchor|#_da54caf1-b2aa-4418-9aa2-b323b2c584f7][image:CustomizationPlatform/images/CG_Troubleshooting_ToValidateBQL_01.png|popup|Launching the SQL Profiler|450px]
#In the browser, open the form that you suspect has experienced performance issues since the customization project was published.
#Reload the page by using the browser toolbar button.
#On the form, sequentially perform multiple actions available on the form toolbar, such as '''Refresh''' or '''Save'''. Be sure to execute each action that is customized on the form.
#On the form toolbar of the [HelpRoot_FormReference\SM_20_50_70|Request Profiler] form ([~/?ScreenId=SM205070|SM205070]), click '''Refresh Results''' to refresh the log table.
#On the table toolbar, click '''Export to Excel '''(
#:[image:CustomizationPlatform/images/form_toolbar_buttons_Excel.png|Launching the SQL Profiler|16px]) to save the log data to a Microsoft Excel file.
#Publish the customization project, as described in [HelpRoot_Dev_Customization\CG_GL_Projects_Publishing_Single|To Publish a Single Project].
#Return to the [HelpRoot_FormReference\SM_20_50_70|Request Profiler] form, and on the form toolbar, click '''Clear Log''' to clear the table.
#In the browser, open the form that you use for the performance test.
#Perform the same sequence of actions that you did in Step 6 and Step 7.
#Return to the [HelpRoot_FormReference\SM_20_50_70|Request Profiler] form, and on the form toolbar, click '''Refresh Results''' to refresh the log table.
#On the table toolbar, click '''Export to Excel''' (
#:[image:CustomizationPlatform/images/form_toolbar_buttons_Excel.png|Launching the SQL Profiler|16px]) to save the log data to a Microsoft Excel file.
#In Microsoft Excel, open the Microsoft Excel files you have saved to compare the duration values for the same actions.
#:Customization of the business logic for a form can degrade the system performance, however the duration of an action can increase by no more than 10 percent. If the duration of an action on the customized form is more than 10 percent longer than the duration of the same action before customization, then the customization code must be reworked. To do this, follow the instructions described in [[#_3f9fa934-c620-4e17-8fbe-ede97555f53d|To Find the Code Fragment That Is Affecting System Performance].
#On the form toolbar of the [HelpRoot_FormReference\SM_20_50_70|Request Profiler] form ([~/?ScreenId=SM205070|SM205070]), click '''Stop''' to stop the Request Profiler.
#:((({S:Hint}We recommend that you activate the ''Log SQL'' mode for only a limited period because it can degrade system performance.
)))
#On the form toolbar, click '''Clear Log''' to delete the SQL request data from the database.
[anchor|#_3f9fa934-c620-4e17-8fbe-ede97555f53d]
==To Find the Code Fragment That Is Affecting System Performance==
If you have confirmed that the system performance is degraded on a customized form, you can use the Request Profiler to discover the code fragment that is causing the performance degradation. To do this, perform the following actions:[anchor|#_373290ba-38bc-4f34-b465-8142705e84ab]
#Open the [HelpRoot_FormReference\SM_20_50_70|Request Profiler] form ([~/?ScreenId=SM205070|SM205070]) in the browser.
#In the '''Profiler Options''' section, select the '''Log SQL Requests''' check box, which indicates that the SQL request data should be stored in the database.
#Select the '''Log SQL Requests Stack Trace''' check box, which indicates that the SQL request stack trace data should be stored in the database.
#On the form toolbar, click '''Start'''.
#In the browser, open the customized form that you have confirmed as experiencing performance degradation.
#On the form, sequentially perform the actions that you identified as executing too slowly.
#On the form toolbar of the [HelpRoot_FormReference\SM_20_50_70|Request Profiler] form ([~/?ScreenId=SM205070|SM205070]), click '''Refresh Results''' to refresh the log table.
#In the log table, rearrange the log records in descending order to find the URL requests with the highest values in each of the columns described below.
#:{| class="checklist" | width="100%" 
|- 
!width="20%" ! Column
!width="80%" ! Description
|- 
| '''Server Time, ms'''
| The aggregate duration of the URL request execution on the server (in milliseconds).
|- 
| '''SQL Time, ms'''
| The aggregate duration of execution of all the SQL requests in the URL request (in milliseconds).
|- 
| '''Server CPU, ms'''
| The aggregate duration of CPU usage during the URL request (in milliseconds).
|- 
| '''SQL Count'''
| The count of the SQL requests to the database in the URL request. This count is the difference between the total number of the SQL requests in the URL request and the number of requests to the cache.
|}
#Select a record that has an unusually large value in any column listed in the previous step, and then click '''SQL''' on table toolbar, as shown in the following screenshot, to open the '''SQL Profiler''' pop-up panel.[anchor|#_8e48263d-7644-4d09-8b37-a7cc97edc671][image:CustomizationPlatform/images/CG_Troubleshooting_Performance_01.png|popup|Opening the SQL Profiler pop-up panel for the selected URL request|450px]
#In the panel, use the standard table navigation buttons to explore the list of SQL requests, which are initially ordered by start time (see the following screenshot).[anchor|#_6e94cb01-a0d7-461f-986d-e029d9571450][image:CustomizationPlatform/images/CG_Troubleshooting_Performance_02.png|popup|Viewing navigation buttons on the SQL Profiler pop-up panel|450px]
#If needed, in the SQL profiler table, rearrange records by the value in the '''TimeMs''' column in descending order to find the SQL requests with the longest duration.
#To view the SQL statement and the stack trace for an SQL request, select the request in the table and then click '''Switch Between Grid and Form''' (
#:[image:CustomizationPlatform/images/Icons_Form_Grid_Views.png|Viewing navigation buttons on the SQL Profiler pop-up panel|16px]), as shown in the following screenshot.[anchor|#_b9a28605-7df7-4d6a-97fb-31fe3d07975f][image:CustomizationPlatform/images/CG_Troubleshooting_Performance_03.png|popup|Switching the panel to display the SQL statement and the stack trace of the selected SQL request|420px]
#In the stack trace, find the method that is causing the performance degradation.
#Launch Microsoft Visual Studio.
#In Visual Studio, open the file with the method; the file is currently saved in the <tt>App&#95;RuntimeCode</tt> website folder.
#Analyze the method body to find the code snippet that is causing the issue.
#On the form toolbar of the [HelpRoot_FormReference\SM_20_50_70|Request Profiler] form ([~/?ScreenId=SM205070|SM205070]), click '''Stop''' to stop the Request Profiler.
#:((({S:Hint}We recommend that you activate the ''Log SQL'' mode for only a limited period because it can degrade system performance.
)))
#On the form toolbar, click '''Clear Log''' to delete the SQL request data from the database.
]]></column>
			<column name="PlainText"><![CDATA[To Discover the Cause of Performance Degradation Suppose that after publishing a customization project, you notice that the  Acumatica ERP performance on a customized form is degraded. To check whether the content of the       customization project is the cause of the performance degradation and to find the code       fragment that affects system performance, you can use the Request Profiler. The following sections provide detailed information: To Check Whether a Customization Project Affects System Performance To Check Whether a Customization Project Affects System PerformanceTo Find the Code Fragment That Is Affecting System Performance To Find the Code Fragment That Is Affecting System PerformanceTo Check Whether a Customization Project Affects System Performance To check whether a customization project degrades the  Acumatica ERP performance, perform the following actions: Unpublish all customization projects, as described in  To Unpublish a Customization. Open the   ([~/?ScreenId=SM205070|SM205070]) Request Profiler form (SM205070) in the             browser. In the  Profiler Options  section, select the  Log SQL               Requests  check box, which indicates that the SQL request data should be             stored in the database. On the form toolbar, click  Start , as shown in the following               screenshot. Launching the SQL Profiler In the browser, open the form that you suspect has experienced performance issues             since the customization project was published. Reload the page by using the browser toolbar button. On the form, sequentially perform multiple actions available on the form toolbar, such             as  Refresh  or  Save . Be sure to execute             each action that is customized on the form. On the form toolbar of the   ([~/?ScreenId=SM205070|SM205070]) Request Profiler form             (SM205070), click  Refresh Results  to refresh the log             table. On the table toolbar, click  Export to Excel  ( ) to save the log data to a Microsoft             Excel file. Publish the customization project, as described in  To Publish a Single Project. Return to the   ([~/?ScreenId=SM205070|SM205070]) Request Profiler form, and on the form             toolbar, click  Clear Log  to clear the table. In the browser, open the form that you use for the performance test. Perform the same sequence of actions that you did in Step 6 and Step 7. Return to the   ([~/?ScreenId=SM205070|SM205070]) Request Profiler form, and on the form             toolbar, click  Refresh Results  to refresh the log table. On the table toolbar, click  Export to Excel  ( ) to save the log data to a Microsoft             Excel file. In Microsoft Excel, open the Microsoft Excel files you have saved to compare the             duration values for the same actions. Customization of the business logic for a form               can degrade the system performance, however the duration of an action can increase by               no more than 10 percent. If the duration of an action on the customized form is more               than 10 percent longer than the duration of the same action before customization, then               the customization code must be reworked. To do this, follow the instructions described               in  To Find the Code Fragment That Is Affecting System Performance To Find the Code Fragment That Is Affecting System Performance. On the form toolbar of the   ([~/?ScreenId=SM205070|SM205070]) Request Profiler form             (SM205070), click  Stop  to stop the Request Profiler. We recommend that you activate the  Log SQL              mode for only a limited period because it can degrade system performance. On the form toolbar, click  Clear Log  to delete the SQL request             data from the database. To Find the Code Fragment That Is Affecting System Performance If you have confirmed that the system performance is degraded on a customized form, you can         use the Request Profiler to discover the code fragment that is causing the performance         degradation. To do this, perform the following actions: Open the   ([~/?ScreenId=SM205070|SM205070]) Request Profiler form (SM205070) in the             browser. In the  Profiler Options  section, select the  Log SQL               Requests  check box, which indicates that the SQL request data should be             stored in the database. Select the  Log SQL Requests Stack Trace  check box, which             indicates that the SQL request stack trace data should be stored in the database. On the form toolbar, click  Start . In the browser, open the customized form that you have confirmed as experiencing             performance degradation. On the form, sequentially perform the actions that you identified as executing too             slowly. On the form toolbar of the   ([~/?ScreenId=SM205070|SM205070]) Request Profiler form             (SM205070), click  Refresh Results  to refresh the log             table. In the log table, rearrange the log records in descending order to find the URL             requests with the highest values in each of the columns described below. Column Description Server Time, ms The aggregate duration of the URL request execution on the server (in                       milliseconds). SQL Time, ms The aggregate duration of execution of all the SQL requests in the URL                       request (in milliseconds). Server CPU, ms The aggregate duration of CPU usage during the URL request (in                       milliseconds). SQL Count The count of the SQL requests to the database in the URL request. This                       count is the difference between the total number of the SQL requests in the                       URL request and the number of requests to the cache. Select a record that has an unusually large value in any column listed in the previous             step, and then click  SQL  on table toolbar, as shown in the             following screenshot, to open the  SQL Profiler  pop-up panel. Opening the SQL Profiler pop-up panel for the selected URL request In the panel, use the standard table navigation buttons to explore the list of SQL             requests, which are initially ordered by start time (see the following screenshot). Viewing navigation buttons on the SQL Profiler pop-up panel If needed, in the SQL profiler table, rearrange records by the value in the                TimeMs  column in descending order to find the SQL requests with             the longest duration. To view the SQL statement and the stack trace for an SQL request, select the request             in the table and then click  Switch Between Grid and Form  ( ), as shown in the following               screenshot. Switching the panel to display the SQL statement and the stack trace of the                 selected SQL request In the stack trace, find the method that is causing the performance degradation. Launch Microsoft Visual Studio. In Visual Studio, open the file with the method; the file is currently saved in the                App_RuntimeCode  website folder. Analyze the method body to find the code snippet that is causing the issue. On the form toolbar of the   ([~/?ScreenId=SM205070|SM205070]) Request Profiler form             (SM205070), click  Stop  to stop the Request Profiler. We recommend that you activate the  Log SQL              mode for only a limited period because it can degrade system performance. On the form toolbar, click  Clear Log  to delete the SQL request             data from the database. ]]></column>
		</row>
		<row PageID="45eb17e9-2f74-4c2f-9b6e-c44838ad4aeb" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="5f75b4be-276f-6ee8-c081-246cb0e49d6c" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can discover that the database scripts that are included in a customization project have not been executed by the Acumatica Customization           Platform when you publish the project. This issue arises when you have first published the project and then changed the scripts.{br}

When you publish the project, the platform executes all the scripts included in the project. For optimization purposes, to avoid the execution of database scripts during every publication of the project, the platform saves information about each script that has been executed at least once and has not yet been changed in the database, and omits the repeated execution of such scripts.{br}

To force the platform to clean up all such information about previously executed scripts of a customization project and execute the scripts again while publishing the project, follow the instructions described in [HelpRoot_Dev_Customization\CG_GL_Projects_Publishing_Cleanup|To Publish the Current Project with a Cleanup Operation].]]></column>
			<column name="PlainText"><![CDATA[To Force the Platform to Execute Database Scripts You can discover that the database scripts that are included in a customization project have    not been executed by the  Acumatica Customization           Platform when you publish the project. This issue arises when you have first published the project and    then changed the scripts. When you publish the project, the platform executes all the scripts included in the project.    For optimization purposes, to avoid the execution of database scripts during every publication of    the project, the platform saves information about each script that has been executed at least    once and has not yet been changed in the database, and omits the repeated execution of such    scripts. To force the platform to clean up all such information about previously executed scripts of a    customization project and execute the scripts again while publishing the project, follow the    instructions described in  To Publish the Current Project with a Cleanup Operation. ]]></column>
		</row>
		<row PageID="fc1f68ba-b4d6-4207-bf20-3a18fa99120a" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="d481232c-ef23-964a-abe0-7507faa10bb1" RecordSourceID="22377">
			<column name="Content"><![CDATA[
If you have a customization project that works properly for the current version of Acumatica ERP and you need to upgrade an application instance to a newer version, the customization project might not work properly or might even prevent the website from starting after the upgrade. This happens because the code of Acumatica ERP is continuously developed to implement new features or enhance existing functionality, so the code of an updated instance of Acumatica ERP can become inconsistent with the code in a customization project. For example, if the signature of a method that is overridden in the customization code is changed in the original code, a run-time error may occur in the graph extension. As another example, modified or deleted database columns and tables might cause the functionality of a data access class extension to fail.
==Validation Process==
To prevent these issues between the customization and the current version of Acumatica ERP, before you upgrade a customized instance of Acumatica ERP to a new version, the Acumatica Customization           Platform validates the compatibility of the code included in all currently published customization projects with the application code of the update version. This validation process executes the following checks in the code of the published customization to detect the breaking changes in the code of Acumatica ERP:[anchor|#ul_ysd_zwc_xw]
*In graph extensions:
**Checking the signature for each method that is overridden by using the <tt>PXOverride</tt> attribute.
**Checking the existence of each base graph.
*In data access class extensions, if a field attribute is overridden:
**Checking the field existence.
**Checking that the field type is not changed. (If the customization code uses the field value as decimal and the field type is changed, for example, from <tt>PXDBDecimal</tt> to <tt>PXDBString</tt> that is currently binding this field to a database column of the string type, an exception will occur on a request to the database.)
*In binary DLL files:
**Checking all the referenced methods, properties, fields, return types, and signatures.
**:((({S:Warn}In some specific cases, a binary file can be updated automatically with a new signature. For example, in a referenced graph, the process updates the BQL statement that is changed for a data view. If a changed signature is detected and cannot be fixed automatically, an error is reported, and the validation fails.
)))
{br}

This validation protects a customized website from an update that contains breaking changes and might make the website unworkable.
==Upgrade of a Customized Website==
You can upgrade an instance of Acumatica ERP in one of the following ways:[anchor|#ul_k23_hp2_xw]
*On the Application Maintenance page of the Acumatica ERP Configuration                             Wizard. (See [HelpRoot_Install\Upgrading_Locally|Updating Acumatica ERP by Using the Configuration Wizard] for details.)
*On the [HelpRoot_FormReference\SM_20_35_10|Apply Updates] form (SM203510; '''System''' > '''Management''' > '''Process'''). (See [HelpRoot_Install\Updates__con_Web_Interface|Updating Acumatica ERP by Using the Web Interface] for details.)
[anchor|#_e67c1186-a994-4a75-8c6c-d4f5ad7308f2]((({S:Hint}You must include in a customization package any custom files that you need to use with your instance of Acumatica ERP and publish this package on this instance. If you instead copy the files to the website folder of your instance of Acumatica ERP manually, the files will be removed while the instance is being updated.
)))
When you start upgrading a customized instance of Acumatica ERP to a newer version, the platform launches the validation process, to check the published customization compatibility with the new version code to detect breaking changes. If the validation fails, the platform cancels the upgrade process and shows an appropriate error message. (See [HelpRoot_Dev_Customization\CG_GL_Upgrading_Errors|Messages for Validation Errors] for details.){br}

To upgrade a customized instance of Acumatica ERP, follow the instructions presented in the following topics:[anchor|#ul_uxm_cy2_xw]
*[HelpRoot_Dev_Customization\CG_GL_Upgrading_ValidatingBefore|To Validate the Compatibility of the Published Customization with a New Version Before an Upgrade]
*[HelpRoot_Dev_Customization\CG_GL_Upgrading_Resolving|To Resolve an Issue Discovered During the Validation]
*[HelpRoot_Dev_Customization\CG_GL_Upgrading_FindingKB|To Use the Technical Release Notes to Find the Breaking Changes]
*[HelpRoot_Dev_Customization\CG_GL_Upgrading_IgnoreList|To Use an Ignore List for the Validation Errors]
]]></column>
			<column name="PlainText"><![CDATA[To Resolve Issues While Upgrading a Customized Website If you have a customization project that works properly for the current version of  Acumatica ERP and you need to upgrade an application instance to a newer version, the customization         project might not work properly or might even prevent the website from starting after the         upgrade. This happens because the code of  Acumatica ERP is continuously developed to implement new features or enhance existing functionality, so         the code of an updated instance of  Acumatica ERP can become inconsistent with the code in a customization project. For example, if the         signature of a method that is overridden in the customization code is changed in the         original code, a run-time error may occur in the graph extension. As another example,         modified or deleted database columns and tables might cause the functionality of a data         access class extension to fail. Validation Process To prevent these issues between the customization and the current version of  Acumatica ERP, before you upgrade a customized instance of  Acumatica ERP to a new version, the  Acumatica Customization           Platform validates the compatibility of the code included in all currently published customization         projects with the application code of the update version. This validation process executes         the following checks in the code of the published customization to detect the breaking         changes in the code of  Acumatica ERP: In graph extensions: Checking the signature for each method that is overridden by using the                    PXOverride  attribute. Checking the existence of each base graph. In data access class extensions, if a field attribute is overridden: Checking the field existence. Checking that the field type is not changed. (If the customization code uses the                 field value as decimal and the field type is changed, for example, from                    PXDBDecimal  to  PXDBString  that is currently                 binding this field to a database column of the string type, an exception will occur                 on a request to the database.) In binary DLL files: Checking all the referenced methods, properties, fields, return types, and                   signatures. In some specific cases, a binary file can be updated                   automatically with a new signature. For example, in a referenced graph, the                   process updates the BQL statement that is changed for a data view. If a changed                   signature is detected and cannot be fixed automatically, an error is reported, and                   the validation fails. This validation protects a customized website from an update that contains breaking changes         and might make the website unworkable. Upgrade of a Customized Website You can upgrade an instance of  Acumatica ERP in one of the following ways: On the Application Maintenance page of the  Acumatica ERP Configuration                             Wizard. (See  Updating Acumatica ERP by Using the Configuration Wizard for details.) On the   ([~/?ScreenId=SM203510|SM203510]) Apply Updates form (SM203510;  System Management Process ). (See  Updating Acumatica ERP by Using the Web Interface for details.) You must include in a customization             package any custom files that you need to use with your instance of  Acumatica ERP             and publish this package on this instance. If you instead copy the files to the website             folder of your instance of  Acumatica ERP             manually, the files will be removed while the instance is being updated. When you start upgrading a customized instance of  Acumatica ERP to a newer version, the platform launches the validation process, to check the published         customization compatibility with the new version code to detect breaking changes. If the         validation fails, the platform cancels the upgrade process and shows an appropriate error         message. (See  Messages for Validation Errors for details.) To upgrade a customized instance of  Acumatica ERP, follow the instructions presented in the following topics: To Validate the Compatibility of the Published Customization with a New Version Before an UpgradeTo Resolve an Issue Discovered During the ValidationTo Use the Technical Release Notes to Find the Breaking ChangesTo Use an Ignore List for the Validation Errors]]></column>
		</row>
		<row PageID="ef134679-1af0-40fe-b44e-286cbf7fcc9c" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="d861c172-b8b8-0708-9829-cb9e449d6734" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can validate the compatibility of the currently published customization with an updated version before you start the upgrade process.{br}

To do this, perform the following actions:[anchor|#ol_bsp_v5s_xw]
#Navigate to the [HelpRoot_FormReference\SM_20_35_10|Apply Updates] form (SM203510; '''System''' > '''Management''' > '''Process''').
#On the '''Updates''' tab of the form, in the table of available updates, click the product version to which you want to upgrade your Acumatica ERP instance, as shown in the screenshot below.
#On the table toolbar, click '''Download Package'''.
#:When the download is complete, the '''Ready to Install''' check box is automatically selected.
#In the table toolbar, click '''Validate Customization''' to start the process of validating the compatibility of the currently published customization code with the code of the selected product version.[anchor|#image_agw_ybt_xw][image:CustomizationPlatform/images/CG_GL_Upgrading_ValidatingBefore.png|popup|Validating the product version|450px]
If the validation succeeds, you know that you can upgrade your Acumatica ERP instance to the selected version without an issue occurring.{br}

If the validation fails, the '''Validation Failed''' window opens to display the list of the executed checks and discovered errors, as the following screenshot shows.[anchor|#fig_tnx_42t_xw][anchor|#image_tc3_q2t_xw][image:CustomizationPlatform/images/CG_GL_Upgrading_ValidatingBefore_01.png|popup|Viewing an error message in the Validation Failed window|440px]To resolve any discovered issues, we recommend that you use the approach described in [HelpRoot_Dev_Customization\CG_GL_Upgrading_Resolving|To Resolve an Issue Discovered During the Validation].]]></column>
			<column name="PlainText"><![CDATA[To Validate the Compatibility of the Published Customization with a New Version Before an     Upgrade You can validate the compatibility of the currently published customization with an updated       version before you start the upgrade process. To do this, perform the following actions: Navigate to the   ([~/?ScreenId=SM203510|SM203510]) Apply Updates form (SM203510;  System Management Process ). On the  Updates  tab of the form, in the table of available           updates, click the product version to which you want to upgrade your  Acumatica ERP instance, as shown in the screenshot below. On the table toolbar, click  Download Package . When the download             is complete, the  Ready to Install  check box is automatically             selected. In the table toolbar, click  Validate Customization  to start the           process of validating the compatibility of the currently published customization code with           the code of the selected product version. Validating the product version If the validation succeeds, you know that you can upgrade your  Acumatica ERP instance to the selected version without an issue occurring. If the validation fails, the  Validation Failed  window opens to display       the list of the executed checks and discovered errors, as the following screenshot shows. Viewing an error message in the Validation Failed window To resolve any discovered issues, we recommend that you use the approach described in          To Resolve an Issue Discovered During the Validation. ]]></column>
		</row>
		<row PageID="8386c2f2-cf29-44ac-b04a-0e16e1aa28f6" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="7673d56b-4e9b-aad3-f14f-13ca6cafff39" RecordSourceID="22377">
			<column name="Content"><![CDATA[
If you need to upgrade an Acumatica ERP instance in the production environment, if the validation of the compatibility of the code included in all currently published customization projects with the code of the new product version fails, do the following:[anchor|#ul_ugl_fft_xw]
*If the customization was developed by a third-party, please contact their support department directly.
*If you are a developer of this customization:
*#Learn what the error message means. (See [HelpRoot_Dev_Customization\CG_GL_Upgrading_Errors|Messages for Validation Errors] for details.)
*#Find the customization code fragment related to the error, and try to resolve the issue you have discovered yourself by using the error description.
*#Check the technical release notes for the selected product version to ensure that the reason of the error is a change in the product code, and find the recommendation to solve the issue. (See [HelpRoot_Dev_Customization\CG_GL_Upgrading_FindingKB|To Use the Technical Release Notes to Find the Breaking Changes] for details.)
*#In your development environment:
*##Install the needed version of Acumatica ERP and deploy the new application instance. (See [HelpRoot_Install\Installing_ERP_Locally|Installing Acumatica ERP Locally] for details.)
*##Import all customization projects. (See [HelpRoot_Dev_Customization\CG_GL_Projects_Deploying_Importing|To Import a Project] for details.)
*##Validate and fix the customization code in each project.
*##:((({S:Warn}If you are unable to resolve an issue yourself, please contact Acumatica support. You can create a support case for the issue on the [https://portal.acumatica.com/support/|Support] page of the [https://portal.acumatica.com/|Acumatica Partner Portal].
)))
*##:If you are sure that a discovered error is not really an error, you can force the validation process to ignore the error. See [HelpRoot_Dev_Customization\CG_GL_Upgrading_IgnoreList|To Use an Ignore List for the Validation Errors] for details.
*#In the production environment:
*##Unpublish all customization projects. (See [HelpRoot_Dev_Customization\CG_GL_Projects_Unpublishing|To Unpublish a Customization] for details.)
*##Upgrade the Acumatica ERP instance. (See [HelpRoot_Install\Updates__con_Web_Interface|Updating Acumatica ERP by Using the Web Interface] for details.)
*##Update the customization projects. (See [HelpRoot_Dev_Customization\CG_GL_Projects_ReplacingContent|To Replace the Content of a Project from a Package] for details.)
*##Publish the fixed customization projects. (See [HelpRoot_Dev_Customization\CG_GL_Projects_Publishing|Publishing Customization Projects] for details.)
((({S:Warn}The validation that detects breaking changes is by default turned on in an instance of Acumatica ERP. If you need to temporarily omit this validation, you can turn off the <tt>CheckCustomizationCompatibility</tt> key by including the following string in the <tt>&lt;appSettings&gt;</tt> section of the <tt>web.config</tt> file located in the website folder:{{{{&lt;add key="CheckCustomizationCompatibility" value="False" /&gt;
}}}}We do not recommend that you turn off the validation permanently.
)))]]></column>
			<column name="PlainText"><![CDATA[To Resolve an Issue Discovered During the Validation If you need to upgrade an  Acumatica ERP instance in the production environment, if the validation of the compatibility of the code       included in all currently published customization projects with the code of the new product       version fails, do the following: If the customization was developed by a third-party, please contact their support           department directly. If you are a developer of this customization: Learn what the error message means. (See  Messages for Validation Errors               for details.) Find the customization code fragment related to the error, and try to resolve the               issue you have discovered yourself by using the error description. Check the technical release notes for the selected product version to ensure that               the reason of the error is a change in the product code, and find the recommendation               to solve the issue. (See  To Use the Technical Release Notes to Find the Breaking Changes for               details.) In your development environment: Install the needed version of  Acumatica ERP and deploy the new application instance. (See  Installing Acumatica ERP Locally for details.) Import all customization projects. (See  To Import a Project for details.) Validate and fix the customization code in each project. If you are unable                     to resolve an issue yourself, please contact  Acumatica support. You can create a support case for the issue on the  Support Support page of the  Acumatica Partner Portal Acumatica Partner Portal. If                     you are sure that a discovered error is not really an error, you can force the                     validation process to ignore the error. See  To Use an Ignore List for the Validation Errors for details. In the production environment: Unpublish all customization projects. (See  To Unpublish a Customization for details.) Upgrade the  Acumatica ERP instance. (See  Updating Acumatica ERP by Using the Web Interface for details.) Update the customization projects. (See  To Replace the Content of a Project from a Package for details.) Publish the fixed customization projects. (See  Publishing Customization Projects for details.) The validation that detects breaking changes is by default turned on in an instance         of  Acumatica ERP. If you need to temporarily omit this validation, you can turn off the            CheckCustomizationCompatibility  key by including the following string         in the  <appSettings>  section of the  web.config          file located in the website         folder: <add key="CheckCustomizationCompatibility" value="False" /> We         do not recommend that you turn off the validation permanently. ]]></column>
		</row>
		<row PageID="4eb6d966-ce64-4131-85a2-bfcdb8266b0c" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="689dafb8-8632-6dff-4b32-397b73234fe4" RecordSourceID="22377">
			<column name="Content"><![CDATA[
This topic, which is intended to be used by developers, describes the messages that may occur during the validation of the customization code compatibility with the code of Acumatica ERP.
==Failed to resolve method reference==
This error occurs if the validation process finds in a custom DLL a reference to a method that is absent with the same signature in the code of Acumatica ERP.{br}

The following example of the error message informs you that the <tt>AM.Objects.dll</tt> file contains a reference to the {{System.Void PX.Data.PXLineNbrAttribute::.ctor(System.Type)}} method, which has not been declared or has another signature in the {{PX.Data}} assembly.{{{{
AM.Objects.dll
Failed to resolve method reference:
System.Void PX.Data.PXLineNbrAttribute::.ctor(System.Type)
declared in
PX.Data, Version=1.0.0.0, Culture=neutral, PublicKeyToken=3b136cac2f602b8e
}}}}Because the customization code is consistent with the previous version of Acumatica ERP, this error occurs because the method overridden in the customization code has been removed or its signature has been changed in the update. To ensure that this change is implemented in the code of the new version of Acumatica ERP, see the technical release notes for this version, as described in [HelpRoot_Dev_Customization\CG_GL_Upgrading_FindingKB|To Use the Technical Release Notes to Find the Breaking Changes].{br}

To fix the error, in the code of the specified extension library, you should refer to an appropriate method declared in the assembly. 
==Failed to resolve type reference==
This error occurs if the validation process finds in a custom DLL a reference to a type whose declaration is absent in the code of Acumatica ERP.{br}

The following example of the error message informs you that the <tt>FETempFix.dll</tt> file contains the reference to the {{PX.Data.PXGraphWithActionsBase`2}} type that is not declared in the {{PX.Data}} assembly.{{{{
FETempFix.dll
Failed to resolve type reference:
PX.Data.PXGraphWithActionsBase`2
declared in
PX.Data, Version=1.0.0.0, Culture=neutral, PublicKeyToken=3b136cac2f602b8e
}}}}To fix the error, in the code of the specified extension library, you have to refer to an appropriate type declared in the assembly.
==Could not resolve==
This error occurs if the validation process finds a reference to a custom DLL that cannot be found.{br}

The following example of the error message informs you that the <tt>FullRegen.dll</tt> file contains the {{ADODB}} reference, which cannot be resolved.{{{{
FullRegen.dll
Could not resolve:
ADODB, Version=7.0.3300.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
}}}}To fix the error, in the code of the specified extension library, you have to refer to a DLL file located in the <tt>Bin</tt> folder of the website.
==Declaring Type missing==
This error occurs if the validation process finds, in the customization code located in the <tt>App&#95;RuntimeCode</tt> folder of the website, a reference to a type whose declaration is absent in the code of Acumatica ERP.{br}

The following example of the error message informs you that the {{PX.Objects.EP.CRBaseActivityMaint`1<PX.Objects.CR.CRTaskMaint>}} class contains a reference to the {{BaseBAccount}} type, which is undeclared.{{{{
Declaring Type missing:
BaseBAccount
from
PX.Objects.EP.CRBaseActivityMaint`1&lt;PX.Objects.CR.CRTaskMaint&gt;
}}}}To fix the error, in the corresponding ''Code'' or ''DAC'' item of the customization project, you have to refer to the appropriate type.
==Referenced Field missing==
This error occurs if the validation process finds, in the customization code located in the <tt>App&#95;RuntimeCode</tt> folder of the website, a reference to a field that is undeclared in the data access class (DAC).{br}

The following example of the error message informs you that the {{PX.Objects.CS.CSAnswers}} data access class does not contain the {{_EntityID}} field.{{{{
Referenced Field missing:
_EntityID
from
PX.Objects.CS.CSAnswers
}}}}To fix the error, in the corresponding ''Code'' or ''DAC'' item of the customization project, you have to refer to the appropriate field.
==Base property is missing or IBqlField is not defined==
This error can occur if the validation process finds a data access class extension that contains a reference of a field with both of the following implementation features:[anchor|#ul_brr_rxz_xw]
*The field name does not contain the ''Usr'' prefix.
*The DAC extension does not contain the <tt>IBqlField</tt> declaration.
For such cases, the validation determines that the DAC extension overrides a field existing in the code of Acumatica ERP. If this field cannot be found in the code of Acumatica ERP, the validation reports about the error.{br}

The following example of the error message informs you that the {{Age}} field is referenced in the {{ CQHRIS.ContactExtension}} extension of the {{CQHRIS.Contact}} data access class; however the code of Acumatica ERP does not contain the field declaration.{{{{
Base property is missing or IBqlField is not defined:
Age
in extension
CQHRIS.ContactExtension
}}}}If the field is custom, to fix the error, you have to add the <tt>IBqlField</tt> declaration in the DAC extension. If the code refers to a field that was removed from the code of Acumatica ERP, you should alter the DAC extension to make it consistent with the base class.]]></column>
			<column name="PlainText"><![CDATA[Messages for Validation Errors This topic, which is intended to be used by developers, describes the messages that may occur         during the validation of the customization code compatibility with the code of  Acumatica ERP. Failed to resolve method reference This error occurs if the validation process finds in a custom DLL a reference to a method that         is absent with the same signature in the code of  Acumatica ERP. The following example of the error message informs you that the            AM.Objects.dll  file contains a reference to the  System.Void           PX.Data.PXLineNbrAttribute::.ctor(System.Type)  method, which has not been         declared or has another signature in the  PX.Data          assembly. 
AM.Objects.dll
Failed to resolve method reference:
System.Void PX.Data.PXLineNbrAttribute::.ctor(System.Type)
declared in
PX.Data, Version=1.0.0.0, Culture=neutral, PublicKeyToken=3b136cac2f602b8e Because         the customization code is consistent with the previous version of  Acumatica ERP, this error occurs because the method overridden in the customization code has been         removed or its signature has been changed in the update. To ensure that this change is         implemented in the code of the new version of  Acumatica ERP, see the technical release notes for this version, as described in  To Use the Technical Release Notes to Find the Breaking Changes. To fix the error, in the code of the specified extension library, you should refer to an         appropriate method declared in the assembly.  Failed to resolve type reference This error occurs if the validation process finds in a custom DLL a reference to a type whose         declaration is absent in the code of  Acumatica ERP. The following example of the error message informs you that the            FETempFix.dll  file contains the reference to the            PX.Data.PXGraphWithActionsBase`2  type that is not declared in the            PX.Data          assembly. 
FETempFix.dll
Failed to resolve type reference:
PX.Data.PXGraphWithActionsBase`2
declared in
PX.Data, Version=1.0.0.0, Culture=neutral, PublicKeyToken=3b136cac2f602b8e To         fix the error, in the code of the specified extension library, you have to refer to an         appropriate type declared in the assembly. Could not resolve This error occurs if the validation process finds a reference to a custom DLL that cannot be         found. The following example of the error message informs you that the            FullRegen.dll  file contains the  ADODB  reference,         which cannot be         resolved. 
FullRegen.dll
Could not resolve:
ADODB, Version=7.0.3300.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a To         fix the error, in the code of the specified extension library, you have to refer to a DLL         file located in the  Bin  folder of the website. Declaring Type missing This error occurs if the validation process finds, in the customization code located in the            App_RuntimeCode  folder of the website, a reference to a type whose         declaration is absent in the code of  Acumatica ERP. The following example of the error message informs you that the            PX.Objects.EP.CRBaseActivityMaint`1<PX.Objects.CR.CRTaskMaint>  class         contains a reference to the  BaseBAccount  type, which is         undeclared. 
Declaring Type missing:
BaseBAccount
from
PX.Objects.EP.CRBaseActivityMaint`1<PX.Objects.CR.CRTaskMaint> To         fix the error, in the corresponding  Code  or  DAC  item of the customization         project, you have to refer to the appropriate type. Referenced Field missing This error occurs if the validation process finds, in the customization code located in the            App_RuntimeCode  folder of the website, a reference to a field that is         undeclared in the data access class (DAC). The following example of the error message informs you that the            PX.Objects.CS.CSAnswers  data access class does not contain the            _EntityID          field. 
Referenced Field missing:
_EntityID
from
PX.Objects.CS.CSAnswers To         fix the error, in the corresponding  Code  or  DAC  item of the customization         project, you have to refer to the appropriate field. Base property is missing or IBqlField is not defined This error can occur if the validation process finds a data access class extension that         contains a reference of a field with both of the following implementation features: The field name does not contain the  Usr  prefix. The DAC extension does not contain the  IBqlField  declaration. For such cases, the validation determines that the DAC extension overrides a field         existing in the code of  Acumatica ERP. If this field cannot be found in the code of  Acumatica ERP, the validation reports about the error. The following example of the error message informs you that the  Age  field is         referenced in the   CQHRIS.ContactExtension  extension of the            CQHRIS.Contact  data access class; however the code of  Acumatica ERP does not contain the field         declaration. 
Base property is missing or IBqlField is not defined:
Age
in extension
CQHRIS.ContactExtension If         the field is custom, to fix the error, you have to add the  IBqlField          declaration in the DAC extension. If the code refers to a field that was removed from the         code of  Acumatica ERP, you should alter the DAC extension to make it consistent with the base class. ]]></column>
		</row>
		<row PageID="9bdd3f8e-779b-42f3-9c28-6e42910513d0" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="78fca036-be6c-67c8-da36-ae79f45481df" RecordSourceID="22377">
			<column name="Content"><![CDATA[
If you need to know all the changes that have been performed in some version of Acumatica ERP and may affect reports, customizations, and integration built in a prior version, see the list of changes in the Technical Release Notes document for the new version.{br}

The Technical Release Notes documents contain the following lists of breaking changes:[anchor|#ol_ybf_hwl_xw]
*Removed screens
*Removed tables
*Removed fields
*Modified field types
*Removed data access classes
*Removed graphs
*Removed constants
*Other removed classes
*Modified interfaces and abstract classes
*Other breaking changes
*Other breaking fields
{br}

To download a Technical Release Notes document for the needed version of Acumatica ERP, perform the following actions:[anchor|#ol_pd5_twl_xw]
#In the browser, open [https://portal.acumatica.com/|Acumatica Partner Portal].
#In the '''Product Links''' list of the webpage, click '''Download Acumatica'''.
#In the '''Links''' list at right side of the webpage, which opens, click '''Release Notes'''.
#On the Release Notes webpage, which opens, select the tab for the needed version of Acumatica ERP, and then click the link for the Technical Release Notes document for this version, as the following screenshot shows.[anchor|#image_pyf_4bm_xw][image:CustomizationPlatform/images/CG_GL_Upgrading_FindingKB.png|popup|Downloading the Technical Release Notes on the Partner Portal|450px]
{br}

After you have downloaded the document, you can use it to search for the object that is specified in the error message that occurred during the validation process.((({S:Warn}The Technical Release Notes document contains information about the changes in the selected version of Acumatica ERP. If you upgrade an instance of Acumatica ERP, for example, from Version 5.2 to Version 6.0, you should explore the technical release notes for Versions 5.3 and 6.0.
))){br}

If the object is found, and the document contains information about how to fix the issue, use the information. Otherwise, on the [https://portal.acumatica.com/support/|Support] page of the portal, click '''New Support Case''' to create a support case for the issue.]]></column>
			<column name="PlainText"><![CDATA[To Use the Technical Release Notes to Find the Breaking Changes If you need to know all the changes that have been performed in some version of  Acumatica ERP and may affect reports, customizations, and integration built in a prior version, see the       list of changes in the Technical Release Notes document for the new version. The Technical Release Notes documents contain the following lists of breaking changes: Removed screens Removed tables Removed fields Modified field types Removed data access classes Removed graphs Removed constants Other removed classes Modified interfaces and abstract classes Other breaking changes Other breaking fields To download a Technical Release Notes document for the needed version of  Acumatica ERP, perform the following actions: In the browser, open  Acumatica Partner Portal Acumatica Partner Portal. In the  Product Links  list of the webpage, click              Download Acumatica . In the  Links  list at right side of the webpage, which opens,                     click  Release Notes . On the Release Notes webpage, which opens, select the tab for the needed version of  Acumatica ERP, and then click the link for the Technical Release Notes document for this version, as           the following screenshot shows. Downloading the Technical Release Notes on the Partner Portal After you have downloaded the document, you can use it to search for the object that is       specified in the error message that occurred during the validation process. The Technical         Release Notes document contains information about the changes in the selected version of  Acumatica ERP. If you upgrade an instance of  Acumatica ERP, for example, from Version 5.2 to Version 6.0, you should explore the technical release         notes for Versions 5.3 and 6.0. If the object is found, and the document contains information about how to fix the issue, use       the information. Otherwise, on the  Support Support page of the portal, click  New         Support Case  to create a support case for the issue. ]]></column>
		</row>
		<row PageID="282cc58a-4700-4e9d-8cf6-4641e625c0d6" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="4d69ed2b-c0bc-f1b2-b34b-bcdd7f98cb51" RecordSourceID="22377">
			<column name="Content"><![CDATA[
If validation of the compatibility of the published customization with the new version fails, the platform cancels the upgrade process and shows an appropriate error message. However for some cases when you are sure that a discovered error is not really an error, you can force the validation process to ignore the error, so you can continue the process of upgrading of the customized instance of Acumatica ERP. Also, you may need to ignore, for example, an error in a third-party DLL file.{br}

To force the validation process to ignore an error, perform the following actions:[anchor|#ol_jnt_5yr_xw]
#In the <tt>App&#95;Data</tt> folder of the website, create a <tt>.txt</tt> file whose name has the ''CstValidationIgnore'' prefix, such as <tt>CstValidationIgnore.txt</tt> or <tt>CstValidationIgnore&#95;ProjectName.txt</tt>.
#:((({S:Warn}You can create multiple <tt>CstValidationIgnore&#42;.txt</tt> files with ignore lists for an instance of Acumatica ERP.
)))
#In the tool used for the upgrade, which may be the Acumatica ERP Configuration                             Wizard or the [HelpRoot_FormReference\SM_20_35_10|Apply Updates] form (SM203510; '''System''' > '''Management''' > '''Process'''), select the error message and copy it to the clipboard.
#In the file, paste the error message from the clipboard.
#:((({S:Warn}You can add multiple error messages to each of multiple files with ignore lists.
)))
#Save the file.
#Determine which the customization project has the code that provokes the error message.
#Add the file with the ignore list to the project (see [HelpRoot_Dev_Customization\CG_GL_Items_Files_Adding|To Add a Custom File to a Project] for details) so it will ignore the error when you publish the project in the production environment.
#:((({S:Warn}While it validates a customization project before the project publication, the Acumatica Customization           Platform ignores all the errors that are specified in the <tt>CstValidationIgnore&#42;.txt</tt> files with the ''CstValidationIgnore'' prefix in the file name if these files are located in the <tt>App&#95;Data</tt> folder of the website.
)))
As a result, if you publish the customization project or upgrade an Acumatica ERP instance where the project is published, the validation process omits the error that is specified in the file.]]></column>
			<column name="PlainText"><![CDATA[To Use an Ignore List for the Validation Errors If validation of the compatibility of the published customization with the new version fails,       the platform cancels the upgrade process and shows an appropriate error message. However for       some cases when you are sure that a discovered error is not really an error, you can force the       validation process to ignore the error, so you can continue the process of upgrading of the       customized instance of  Acumatica ERP. Also, you may need to ignore, for example, an error in a third-party DLL file. To force the validation process to ignore an error, perform the following actions: In the  App_Data  folder of the website, create a              .txt  file whose name has the  CstValidationIgnore  prefix,           such as  CstValidationIgnore.txt  or              CstValidationIgnore_ProjectName.txt . You can create multiple                CstValidationIgnore*.txt  files with ignore lists for an instance             of  Acumatica ERP. In the tool used for the upgrade, which may be the  Acumatica ERP Configuration                             Wizard or the   ([~/?ScreenId=SM203510|SM203510]) Apply Updates form (SM203510;  System Management Process ), select the error message and copy it to the clipboard. In the file, paste the error message from the clipboard. You can add multiple error             messages to each of multiple files with ignore lists. Save the file. Determine which the customization project has the code that provokes the error           message. Add the file with the ignore list to the project (see  To Add a Custom File to a Project for details) so it will ignore the error when you           publish the project in the production environment. While it validates a customization             project before the project publication, the  Acumatica Customization           Platform ignores all the errors that are specified in the                CstValidationIgnore*.txt  files with the                CstValidationIgnore  prefix in the file name if these files are located in the                App_Data  folder of the website. As a result, if you publish the customization project or upgrade an  Acumatica ERP instance where the project is published, the validation process omits the error that is       specified in the file. ]]></column>
		</row>
		<row PageID="dfee9b86-1668-4ad1-a21d-b4e85402a26d" Language="en-US" PageRevisionID="1" Content="&#xA;This part of the guide is intended to describe examples of how you can customize the user interface and business logic of Acumatica ERP forms.&#xA;==In This Part==[anchor|#_6abd2ec6-2de4-436c-9c72-c9dd58cbf6b4]&#xA;*[HelpRoot_Dev_Customization\UICustHow|Examples of User Interface Customization]&#xA;*[HelpRoot_Dev_Customization\ACECustHow|Examples of Functional Customization]&#xA;" PlainText="Examples This part of the guide is intended to describe examples of how you can customize the user             interface and business logic of  Acumatica ERP forms. In This Part Examples of User Interface CustomizationExamples of Functional Customization" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="3f7c9820-5aea-863b-c74b-546cb18c1b37" RecordSourceID="22377" />
		<row PageID="a8a5babc-281d-4ead-b70b-a1aa0a7d3bf3" Language="en-US" PageRevisionID="1" PlainText="Examples of User Interface Customization UI customization  includes changing the look and behavior of forms, tweaking form     design, and manually editing the .aspx code. UI customization is always related to the .aspx     code of the corresponding forms and represents  aspx changesets  that are added to the     existing .aspx code. For customization to the layout of existing forms, you can use the  Screen Editor that you open from the  Customization Project Editor. For the layout design of new forms, you should use the Screen Editor that you open from     Microsoft Visual Studio. The next topics describe the rules for user interface customization and give examples of     typical UI customization tasks: Dragging, Moving, and Deleting UI Controls and Grid ColumnsAdding Input ControlsAdding Advanced ControlsAdding Columns to a GridModifying Columns in a Selector" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="f3de45a7-304d-944d-2396-f01fd7eb42e5" RecordSourceID="22377">
			<column name="Content"><![CDATA[
''UI customization'' includes changing the look and behavior of forms, tweaking form design, and manually editing the .aspx code. UI customization is always related to the .aspx code of the corresponding forms and represents ''aspx changesets'' that are added to the existing .aspx code.{br}

For customization to the layout of existing forms, you can use the [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_LayoutEditor|Screen Editor] that you open from the Customization Project Editor.{br}

For the layout design of new forms, you should use the Screen Editor that you open from Microsoft Visual Studio.{br}

The next topics describe the rules for user interface customization and give examples of typical UI customization tasks:[anchor|#ul_pcd_4hy_yl]
*[HelpRoot_Dev_Customization\UIDragDrop|Dragging, Moving, and Deleting UI Controls and Grid Columns]
*[HelpRoot_Dev_Customization\UIHowAddGrid|Adding Input Controls]
*[HelpRoot_Dev_Customization\UIHowAdvContr|Adding Advanced Controls]
*[HelpRoot_Dev_Customization\UIHowAddColGrid|Adding Columns to a Grid]
*[HelpRoot_Dev_Customization\UIHowAddColSelect|Modifying Columns in a Selector]
*
]]></column>
		</row>
		<row PageID="dcf5b243-c0ce-4691-8f15-89a708671da5" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="17bba10d-09b5-c02d-90c7-6f3fce123a24" RecordSourceID="22377">
			<column name="Content"><![CDATA[
This topic describes in detail how to change the placement of UI controls by dragging them and how to use the facilities of the Screen Editor to delete or move UI controls and grid columns.[anchor|#section_ych_jsd_wl][anchor|#title_jzd_xrd_wl]
==Dragging and Dropping UI Controls==
Before you start to manually move UI controls by dragging them in the Control Tree of the Screen Editor, note the following simple rules: [anchor|#ul_bh5_vn2_wl]
*You can move a UI control anywhere within its container control.
*To move a UI control within a container, you have to drag the element to the required place.
*Any UI control moved within a form is automatically aligned according to the nearest '''PXLayoutRule''' component placed above it. (See [HelpRoot_Dev_Customization\CG_GL_UI_LayoutRules|Layout Rule (PXLayoutRule)] for details.)
{br}

On the Stock Items (IN202500) form, suppose that you want to move up the '''Is a Kit''' check box, to make it the first control in the first column of the '''General Settings''' tab area, as the screenshot below illustrates.{br}

[anchor|#image_tlx_rq2_wl][image:CustomizationPlatform/images/UpDownDrag1.png|popup|Viewing the form before dragging the UI control|420px]{br}

To move the check box:{br}

[anchor|#ol_e2r_cqv_3q]
#Click the '''Customization''' menu on the form and choose the '''Inspect Element''' command.
#Click the '''Is a Kit''' check box.
#Click the '''Customize''' button on the '''Element Properties''' dialog box.
#:The customization item is added to the current project if you have selected one by using the '''Customization''' > '''Select Project''' command, or you will be asked to select the customization project to add the item to it.
#In the Control Tree of the Screen Editor, drag the '''Is a Kit''' check box to the position above the '''Item Class''' control.
#Save the changes to the customization project, and publish the customization project.[anchor|#image_qsj_fxv_3q][image:CustomizationPlatform/images/UpDownDrag1_2.png|popup|Moving the UI control to the required position|420px]
{br}

The check box appears at the new position (see the following screenshot).[anchor|#image_ez1_mr2_wl][image:CustomizationPlatform/images/UpDownDrag2.png|popup|Noticing the new placement of the check box |420px][anchor|#section_rm1_tqd_wl]
==Moving and Deleting UI Controls and Grid Columns==
You use the Screen Editor to implement advanced customization of a form—for instance, if you need to shift a column within a grid, to delete a UI control or table column from a form area, or to change the position of a UI control on a form while having the capability to change its original container.((({S:Warn}After changing containers, you should perform functional changes concerning the code of appropriate main data access classes (DACs) or data views of business logic controllers (BLCs, also referred to as ''graphs''). For details, see [HelpRoot_Dev_Customization\CustAttr|Customizing DAC Attributes].
))){br}

Suppose that you have to customize the '''General Settings''' and '''Warehouse Details''' tabs of the Stock Items (IN202500) form as follows:[anchor|#ol_a3v_f2j_vl]
#Delete the '''Auto-Incremental Value''' input control. (See the first screenshot below.)
#Move down the '''Tax Category''' control so that it is placed under the '''Lot/Serial Class''' control, as the first screenshot also illustrates.
#:((({S:Warn}The '''Lot/Serial Class''' field is visible if the '''Lot and Serial Tracking''' feature is enabled on the Enable/Disable Features (CS100000) form.
)))
#Move to the left the '''Status''' column of the details table so that it is placed at the right of the '''Default''' column, as shown in the second screenshot below
[anchor|#image_qhm_yrf_5l][image:CustomizationPlatform/images/UpDownRemove1.png|popup|Viewing the General Settings tab before changes|420px][anchor|#image_vrc_xnj_vl][image:CustomizationPlatform/images/UpDownRemove1_2.png|popup|Viewing the details table of the Warehouse Details tab before changes|420px]{br}

To open the Screen Editor, open the Stock Items (IN202500) form, click the '''Customization''' menu, choose the '''Inspect Element''' command, select the '''Auto-Incremental Value''' control on the form, and click the '''Customize''' button on the '''Element Properties''' dialog box.{br}

The Control Tree of the editor displays content of the '''General Settings''' tab item, to which the '''Auto-Incremental Value''' control belongs. This control is currently selected and highlighted in bold.((({S:Warn}To view all controls and containers of the customized form on the tree, click the filter button of the tree toolbar.
))){br}

To delete the selected control, click the '''Delete''' button of the tree toolbar.[anchor|#image_oxk_54w_3q][image:CustomizationPlatform/images/UpDownRemove3.png|popup|Removing the selected UI control|420px]
Now you should move down the '''Tax Category''' UI control, to place it under the '''Lot/Serial Class''' control. Select the '''Tax Category''' UI control on the tree, drag it and drop to the required position, as the screenshot below illustrates.[anchor|#image_dhs_ltf_5l][image:CustomizationPlatform/images/UpDownRemove2.png|popup|Moving the control on the Control Tree|420px]{br}

Thus, to change the placement of a UI control, you select it on the Control Tree of the Screen Editor, drag it and drop to place this control appropriately in relation to other UI controls.{br}

Click '''Save''' on the toolbar of the Screen Editor to save changes to the current customization project.{br}

To begin moving the '''Status''' column, you can:[anchor|#ul_cwz_21x_3q]
*Open the Stock Items (IN202500) form and use the Element Inspector for the '''Status''' column on the form
*Open the Screen Editor for the form and find the column in the Control Tree
{br}

Drag and drop the '''Status''' control to the required position in the tree, as the screenshot below illustrates.[anchor|#image_g5x_rzx_vl][image:CustomizationPlatform/images/UpDownRemove3_2.png|popup|Moving the grid column to the left|360px]
Thus, to change the placement of a grid column, you find the column in the Control Tree of the Screen Editor and drag it to the desired position.{br}

Click '''Save''' on the toolbar of the Screen Editor to save changes to the current customization project.{br}

After you publish the project, you will see the modified '''General Settings''' tab on the Stock Items (IN202500) form, as the following screenshot illustrates.[anchor|#image_pxn_czv_bm][image:CustomizationPlatform/images/UpDownRemove4.png|popup|Viewing the modified General Settings tab of the form|420px]{br}

If you open the '''Warehouse Details''' tab of this form, you will see that the column of the details table has been moved to the left, as shown in the screenshot below.[anchor|#image_uxn_czv_bm][image:CustomizationPlatform/images/UpDownRemove4_1.png|popup|Viewing the moved column on the Warehouse Details tab |420px]
If you need to analyze the added content (changeset) of the customization project, open the project in the Project Editor, choose the '''Edit Project Items''' command on the '''File''' menu item and select the '''Object Name''' field of the customized object (see the screenshot below).[anchor|#image_ud1_21y_vl][image:CustomizationPlatform/images/UpDownRemove3_3.png|popup|Analyzing the added content of the customization project|420px]]]></column>
			<column name="PlainText"><![CDATA[Dragging, Moving, and Deleting UI Controls and Grid Columns This topic describes in detail how to change the placement of UI controls by dragging them and      how to use the facilities of the Screen Editor to delete or move UI controls and grid     columns. Dragging and Dropping UI Controls Before you start to manually move UI controls by dragging them in the Control Tree of the      Screen Editor, note the following simple rules:  You can move a UI control anywhere within its container control. To move a UI control within a container, you have to drag the element to the required             place. Any UI control moved within a form is automatically aligned according to the nearest                PXLayoutRule  component placed above it. (See  Layout Rule (PXLayoutRule) for details.) On the Stock Items (IN202500) form, suppose that you want to move up the  Is a           Kit  check box, to make it the first control in the first column of the            General Settings  tab area, as the screenshot below illustrates. Viewing the form before dragging the UI control To move the check box: Click the  Customization  menu on the form and choose the                Inspect Element  command. Click the  Is a Kit  check box. Click the  Customize  button on the  Element               Properties  dialog box. The customization item is added to the current               project if you have selected one by using the  Customization Select Project  command, or you will be asked to select the customization project to               add the item to it. In the Control Tree of the Screen Editor, drag the  Is a Kit  check             box to the position above the  Item Class  control. Save the changes to the customization project, and publish the customization project. Moving the UI control to the required position The check box appears at the new position (see the following screenshot). Noticing the new placement of the check box  Moving and Deleting UI Controls and Grid Columns You use the Screen Editor to implement advanced customization of a form—for instance, if         you need to shift a column within a grid, to delete a UI control or table column from a form         area, or to change the position of a UI control on a form while having the capability to         change its original container. After changing containers, you should perform functional           changes concerning the code of appropriate main data access classes (DACs) or data views           of business logic controllers (BLCs, also referred to as  graphs ). For details, see              Customizing DAC Attributes. Suppose that you have to customize the  General Settings  and            Warehouse Details  tabs of the Stock Items (IN202500) form as           follows: Delete the  Auto-Incremental Value  input control. (See the first             screenshot below.) Move down the  Tax Category  control so that it is placed under             the  Lot/Serial Class  control, as the first screenshot also               illustrates. The  Lot/Serial Class  field is visible if the                  Lot and Serial Tracking  feature is enabled on the               Enable/Disable Features (CS100000) form. Move to the left the  Status  column of the details table so that             it is placed at the right of the  Default  column, as shown in the             second screenshot below Viewing the General Settings tab before changes Viewing the details table of the Warehouse Details tab before changes To open the Screen Editor, open the Stock Items (IN202500) form, click the            Customization  menu, choose the  Inspect           Element  command, select the  Auto-Incremental Value          control on the form, and click the  Customize  button on the            Element Properties  dialog box. The Control Tree of the editor displays content of the  General Settings          tab item, to which the  Auto-Incremental Value  control belongs. This         control is currently selected and highlighted in bold. To view all controls and           containers of the customized form on the tree, click the filter button of the tree           toolbar. To delete the selected control, click the  Delete  button of the tree         toolbar. Removing the selected UI control Now you should move down the  Tax Category  UI control, to place it under         the  Lot/Serial Class  control. Select the  Tax           Category  UI control on the tree, drag it and drop to the required position, as         the screenshot below illustrates. Moving the control on the Control Tree Thus, to change the placement of a UI control, you select it on the Control Tree of the Screen         Editor, drag it and drop to place this control appropriately in relation to other UI         controls. Click  Save  on the toolbar of the Screen Editor to save changes to the         current customization project. To begin moving the  Status  column, you can: Open the Stock Items (IN202500) form and use the Element Inspector for the                Status  column on the form Open the Screen Editor for the form and find the column in the Control Tree Drag and drop the  Status  control to the required position in the tree,         as the screenshot below illustrates. Moving the grid column to the left Thus, to change the placement of a grid column, you find the column in the Control Tree of         the Screen Editor and drag it to the desired position. Click  Save  on the toolbar of the Screen Editor to save changes to the         current customization project. After you publish the project, you will see the modified  General           Settings  tab on the Stock Items (IN202500) form, as the following screenshot illustrates. Viewing the modified General Settings tab of the form If you open the  Warehouse Details  tab of this form, you will see that         the column of the details table has been moved to the left, as shown in the screenshot         below. Viewing the moved column on the Warehouse Details tab  If you need to analyze the added content (changeset) of the customization project, open the         project in the  Project Editor, choose the  Edit Project Items  command on the            File  menu item and select the  Object Name          field of the customized object (see the screenshot below). Analyzing the added content of the customization project ]]></column>
		</row>
		<row PageID="22e770a5-6e9d-4603-a10b-d16e89a1e0f3" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="c4a33274-16a3-fc10-9fc1-5e65366344d9" RecordSourceID="22377">
			<column name="Content"><![CDATA[
If you need to add a control onto a form, you use the Screen Editor.{br}

The screenshot below illustrates the original Journal Transactions (GL301000) form. Suppose that you want to add a text field (for instance, the '''CreatedByID''' selector of the ''GL Batch'' DAC) below the '''Auto Reversing''' check box.[anchor|#image_ky3_x1h_sl][image:CustomizationPlatform/images/AddControl_01.png|popup|Viewing the original form|430px]{br}

To open the Screen Editor, open the Journal Transactions (GL301000) form, click the '''Customization''' menu, choose the '''Inspect Element''' command, select the '''Auto Reversing''' control, and click the '''Customize''' button on the '''Element Properties''' dialog box.{br}

The editor is opened with the '''Auto Reversing''' control selected and highlighted in bold in the tree of controls.{br}

To create a control below the selected item in the tree:[anchor|#ol_xcz_ghk_jq]
#Click on the '''Add Data Field''' tab.
#Select the '''CreatedByID''' field in the list on the tab.
#Click the '''Create Controls''' button on the tab toolbar.
[anchor|#image_i3q_ts3_vl][image:CustomizationPlatform/images/AddControl_01_1.png|popup|Creating a control below the selected one in the tree of controls|420px]
Adjust the placement of a UI control so that it is after the ''&#91;Layout Rule&#93;'' node by dragging it to the needed place.{br}

Click '''Save''' on the toolbar of the Screen Editor to save changes to the current customization project.{br}

After publishing the customization project, you will see the added field on the ''Journal Transactions'' form, as the screenshot below illustrates.[anchor|#image_ey5_qdh_sl][image:CustomizationPlatform/images/AddControl_03.png|popup|Viewing the customized form|430px]{br}

To view the fragment of the .aspx code that represents the customization result, open the form in the Screen Editor and select the '''View ASPX''' tab. The customized fragment is highlighted in yellow, as the screenshot below illustrates.[anchor|#image_a2n_p53_vl][image:CustomizationPlatform/images/AddControl_02_1.png|popup|Analyzing the changeset of the .aspx code|420px]{br}

To view the changes to the layout of the form introduced by the new control, open the project in the Project Editor, choose the '''Edit Project Items''' command on the '''File''' menu item and select the '''Object Name''' field of the customized object (see the screenshot below). You can see the new <tt>Page</tt> item that contains the .aspx code changeset.[anchor|#image_n3g_3yj_vl][image:CustomizationPlatform/images/AddControl_02_2.png|popup|Analyzing the added content of the customization project|420px]((({S:Warn}As a rule, if you add a new data field, you need to perform some additional actions related to the functional customization. For an example of the creation of a new data field, see [HelpRoot_Dev_Customization\HowACE_AddField|Adding Data Fields].
)))]]></column>
			<column name="PlainText"><![CDATA[Adding Input Controls If you need to add a control onto a form, you use the Screen Editor. The screenshot below illustrates the original Journal Transactions (GL301000) form. Suppose     that you want to add a text field (for instance, the  CreatedByID  selector     of the  GL Batch  DAC) below the  Auto Reversing  check box. Viewing the original form To open the Screen Editor, open the Journal Transactions (GL301000) form, click the       Customization  menu, choose the  Inspect Element      command, select the  Auto Reversing  control, and click the       Customize  button on the  Element Properties  dialog     box. The editor is opened with the  Auto Reversing  control selected and     highlighted in bold in the tree of controls. To create a control below the selected item in the tree: Click on the  Add Data Field  tab. Select the  CreatedByID  field in the list on the tab. Click the  Create Controls  button on the tab toolbar. Creating a control below the selected one in the tree of controls Adjust the placement of a UI control so that it is after the  [Layout Rule]  node by     dragging it to the needed place. Click  Save  on the toolbar of the Screen Editor to save changes to the     current customization project. After publishing the customization project, you will see the added field on the  Journal      Transactions  form, as the screenshot below illustrates. Viewing the customized form To view the fragment of the .aspx code that represents the customization result, open the form     in the Screen Editor and select the  View ASPX  tab. The customized     fragment is highlighted in yellow, as the screenshot below illustrates. Analyzing the changeset of the .aspx code To view the changes to the layout of the form introduced by the new control, open the project     in the  Project Editor, choose the  Edit Project Items  command on the       File  menu item and select the  Object Name  field     of the customized object (see the screenshot below). You can see the new  Page      item that contains the .aspx code changeset. Analyzing the added content of the customization project As a rule, if you add a new data field, you need to perform some additional actions related     to the functional customization. For an example of the creation of a new data field, see  Adding Data Fields. ]]></column>
		</row>
		<row PageID="7d176281-bf77-4164-bb74-c307a7033f4e" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="2948208c-932c-f9fb-9e85-ce168998e44e" RecordSourceID="22377">
			<column name="Content"><![CDATA[
Suppose that you need to customize the Stock Items (IN202500) form and you have divided the customization task into the following steps:[anchor|#ul_fpt_wxb_hm]
*[[#section_xt1_l4m_kq|Adding a new tab item] onto the form.
*[[#section_d21_htm_kq|Adding a panel onto the tab item].
*[[#section_vpr_mtm_kq|Adding an UI control onto the new panel].
*:((({S:Warn}This step is needed to make the added tab and its content visible at run time; otherwise, empty container controls aren&rsquo;t displayed.
)))
{br}

The original Stock Items (IN202500) form is shown on the screenshot below.{br}

[anchor|#image_lt1_fn2_5l][image:CustomizationPlatform/images/UI_AddAdvControl1.png|popup|Viewing the Stock Items form before changes|430px][anchor|#section_xt1_l4m_kq]
==Adding a New Tab Item==
Suppose that you need to add the '''Relative Positioning Layout''' tab item to the Stock Items (IN202500) form and set its position as the leftmost one.{br}

To do this, perform the following actions:[anchor|#ol_cfn_rpy_fm]
#On the Stock Items (IN202500) form, click the '''Customization''' menu, choose '''Inspect Element''', select the tab control, and click '''Customize''' on the '''Element Properties''' dialog box.
#In the Screen Editor that appears, click the ''Tab: ItemSettings'' node in the Control Tree to view all items of the tab.
#Open the '''Add Controls''' tab of the Screen Editor.
#Drag and drop the '''Tab Item''' (''PXTabItem'') container above the ''General Settings'' node in the tree, as shown in the screenshot below.[anchor|#image_kn2_12s_fm][image:CustomizationPlatform/images/AddItem02.png|popup|Adding a tab item to the left position on the tab area of the Stock Items form|420px]
#Select the ''TabItem'' node that has been added.
#Select the '''Layout Properties''' tab of the Screen Editor.
#Select the '''Text''' property and enter <tt>Relative Positioning Layout</tt> to specify the name of the new tab.
#Click '''Save''' on the toolbar of the Screen Editor to save changes to the current customization project.

Thus, to add a new tab item to a tab, you have to expand the tab node in the Control Tree of the Screen Editor, select the '''Add Controls''' tab in the editor, drag and drop the '''Tab Item''' container to place this control appropriately in relation to other items in the tab.{br}

A container is visible on the form if the container contains a visible field control. So at the moment you cannot view the '''Relative Positioning Layout''' tab item on the Stock Items (IN202500) form even after the customization project is published or on the form preview that can be opened by clicking '''Preview Changes''' in the Screen Editor.[anchor|#section_d21_htm_kq]
==Adding a Panel onto the PXTabItem Container Control==
Now you have to add a panel (''PXPanel'' control) onto the created ''PXTabItem'' control (that is, onto the new tab item), which is empty at the moment.{br}

Complete the following steps:[anchor|#ol_iqy_qyp_jq]
#Open the '''Add Controls''' tab of the Screen Editor.
#On the opened tab item, find and drag the '''Panel''' (''PXPanel'') control.
#Drop it into the ''Relative Positioning Layout'' tab item in the tree of controls, as shown in the screenshot below.[anchor|#image_z2y_2hd_hm][image:CustomizationPlatform/images/UI_AddAdvControl2.png|popup|Adding a panel onto the created ''PXTabItem'' container control|420px]
#Select the ''Panel: CstPanel1'' node that has been added.
#Select the '''Layout Properties''' tab of the Screen Editor.
#Select the '''Caption''' property and enter <tt>Audit</tt> to specify the name of the new panel.
#Click '''Save''' on the toolbar of the Screen Editor to save changes to the current customization project.
{br}

Thus, to add a new control to a container, you have to open the Screen Editor, find the container in the Control Tree, select the '''Add Controls''' tab in the editor, find the required type of the control, and drag and drop the needed control onto the container. Then you can specify the properties of the created control.[anchor|#section_vpr_mtm_kq]
==Adding a UI Control onto the ''PXPanel'' Control==
The panel is still not visible on the tab because it doesn&rsquo;t contain any visible controls. Add a control to the panel, as described below:[anchor|#ol_e15_qkq_jq]
#Select the ''Panel: Audit'' node in the tree of controls.
#Open the '''Add Data Fields''' tab of the Screen Editor.
#Select the '''CreatedByID''' field in the list that at the moment displays the visible fields of the <tt>Inventory Item</tt> data access class.
#Click '''Create Controls''' on the tab toolbar (see the screenshot below).[anchor|#image_idy_2hd_hm][image:CustomizationPlatform/images/UIAdvControl10.png|popup|Adding a UI control to the ''PXPanel'' container control|420px]
#Click the ''Panel: Audit'' node to expand and view the created control in the tree of controls.
#Open the '''Add Controls''' tab of the Screen Editor.
#Drag the '''Empty Rule''' (''PXLayoutRule'') control and drop it above the ''Created By'' control in the tree, as shown in the screenshot below.[anchor|#image_sdy_2hd_hm][image:CustomizationPlatform/images/UIAdvControl11.png|popup|Adding the PXLayoutRule onto the panel|420px]
#In the Control Tree, select the ''Layout Rule'' node that has been added.
#Select the '''Layout Properties''' tab of the Screen Editor.
#Type <tt>SM</tt> as the '''ControlSize''' property value and <tt>S</tt> as the '''LabelWidth''' property value.
#Set the '''StartRow''' property to ''True'', as shown in the screenshot below.[anchor|#image_txj_5kc_vm][image:CustomizationPlatform/images/UIAdvControl16.png|popup|Setting property values for the added ''PXLayoutRule'' object|420px]
#Click '''Save''' on the toolbar of the Screen Editor to save changes to the customization project.
#:After you save your changes, the Layout Rule transforms into a Control Tree node inside the ''Panel:Audit'' node according to specified properties. In this case, you see the ''Created By'' node is now inside the ''Row'' node which has the Layout Rule&rsquo;s properties.

Thus, to apply a layout rule to controls, you have to place the layout rule above the controls. Then you can specify the properties of the created layout rule.{br}

To view the changes, click '''Preview Page''' on the toolbar or publish the project and review the changes on the Stock Items (IN202500) form after the customization has been applied.{br}

The control is displayed on the panel on the '''Relative Positioning Layout''' tab (see the screenshot below) that has been added in [[#section_xt1_l4m_kq|Adding a New Tab Item].[anchor|#image_udy_2hd_hm][image:CustomizationPlatform/images/UIAdvControl12.png|popup|Viewing the added UI control at run time|430px]{br}

To view the fragment of the .aspx code that represents the customization result, open the form in the Screen Editor and select the '''View ASPX''' tab. The customized fragment is highlighted in yellow, as the screenshot below illustrates.[anchor|#image_xdy_2hd_hm][image:CustomizationPlatform/images/UIAdvControl8.png|popup|Viewing the changes to the layout of the form|420px]{br}

If you need to analyze the added content (changeset) of the customization project, in the Customization Project Editor, choose the '''Edit Project Items''' command on the '''File''' menu item and select the '''Object Name''' field of the customized object (see the screenshot below). The <tt>Page</tt> item represents the changes to the .aspx code.[anchor|#image_zdy_2hd_hm][image:CustomizationPlatform/images/UIAdvControl9.png|popup|Analyzing the added content of the customization project|420px]]]></column>
			<column name="PlainText"><![CDATA[Adding Advanced Controls Suppose that you need to customize the Stock Items (IN202500) form and you have divided the         customization task into the following steps: Adding a new tab item Adding a new tab item onto the form. Adding a panel onto the tab item Adding a panel onto the tab item. Adding an UI control onto the new panel Adding an UI control onto the new panel. This step is needed to make the               added tab and its content visible at run time; otherwise, empty container controls               aren't displayed. The original Stock Items (IN202500) form is shown on the screenshot below. Viewing the Stock Items form before changes Adding a New Tab Item Suppose that you need to add the  Relative Positioning Layout  tab         item to the Stock Items (IN202500) form and set its position as the leftmost one. To do this, perform the following actions: On the Stock Items (IN202500) form, click the  Customization  menu,           choose  Inspect Element , select the tab control, and click              Customize  on the  Element Properties  dialog           box. In the Screen Editor that appears, click the  Tab: ItemSettings  node in the           Control Tree to view all items of the tab. Open the  Add Controls  tab of the Screen Editor. Drag and drop the  Tab Item  ( PXTabItem ) container above the              General Settings  node in the tree, as shown in the screenshot below. Adding a tab item to the left position on the tab area of the Stock Items               form Select the  TabItem  node that has been added. Select the  Layout Properties  tab of the Screen Editor. Select the  Text  property and enter  Relative             Positioning Layout  to specify the name of the new tab. Click  Save  on the toolbar of the Screen Editor to save changes to           the current customization project. Thus, to add a new tab item to a tab, you have to expand the tab node in the Control Tree         of the Screen Editor, select the  Add Controls  tab in the editor, drag         and drop the  Tab Item  container to place this control appropriately         in relation to other items in the tab. A container is visible on the form if the container contains a visible field control. So at         the moment you cannot view the  Relative Positioning Layout  tab item         on the Stock Items (IN202500) form even after the customization project is published or on         the form preview that can be opened by clicking  Preview Changes  in         the Screen Editor. Adding a Panel onto the PXTabItem Container Control Now you have to add a panel  ( PXPanel  control) onto the created  PXTabItem          control (that is, onto the new tab item), which is empty at the moment. Complete the following steps: Open the  Add Controls  tab of the Screen Editor. On the opened tab item, find and drag the  Panel              ( PXPanel ) control. Drop it into the  Relative Positioning Layout  tab item in the tree of controls,             as shown in the screenshot below. Adding a panel onto the created  PXTabItem  container control Select the  Panel: CstPanel1  node that has been added. Select the  Layout Properties  tab of the Screen Editor. Select the  Caption  property and enter                Audit  to specify the name of the new panel. Click  Save  on the toolbar of the Screen Editor to save changes             to the current customization project. Thus, to add a new control to a container, you have to open the Screen Editor, find the         container in the Control Tree, select the  Add Controls  tab in the         editor, find the required type of the control, and drag and drop the needed control onto the         container. Then you can specify the properties of the created control. Adding a UI Control onto the  PXPanel  Control The panel is still not visible on the tab because it doesn't contain any visible controls.         Add a control to the panel, as described below: Select the  Panel: Audit  node in the tree of controls. Open the  Add Data Fields  tab of the Screen Editor. Select the  CreatedByID  field in the list that at the moment           displays the visible fields of the  Inventory Item  data access           class. Click  Create Controls  on the tab toolbar (see the screenshot             below). Adding a UI control to the  PXPanel  container control Click the  Panel: Audit  node to expand and view the created control in the tree of           controls. Open the  Add Controls  tab of the Screen Editor. Drag the  Empty Rule  ( PXLayoutRule ) control and drop it           above the  Created By  control in the tree, as shown in the screenshot below. Adding the PXLayoutRule onto the panel In the Control Tree, select the  Layout Rule  node that has been added. Select the  Layout Properties  tab of the Screen Editor. Type  SM  as the  ControlSize  property value           and  S  as the  LabelWidth  property value. Set the  StartRow  property to  True , as shown in the           screenshot below. Setting property values for the added  PXLayoutRule  object Click  Save  on the toolbar of the Screen Editor to save changes to           the customization project. After you save your changes, the Layout Rule transforms into             a Control Tree node inside the  Panel:Audit  node according to specified             properties. In this case, you see the  Created By  node is now inside the                Row  node which has the Layout Rule's properties. Thus, to apply a layout rule to controls, you have to place the layout rule above the         controls. Then you can specify the properties of the created layout rule. To view the changes, click  Preview Page  on the toolbar or publish         the project and review the changes on the Stock Items (IN202500) form after the         customization has been applied. The control is displayed on the panel on the  Relative Positioning           Layout  tab (see the screenshot below) that has been added in  Adding a           New Tab Item Adding a New Tab Item. Viewing the added UI control at run time To view the fragment of the .aspx code that represents the customization result, open the         form in the Screen Editor and select the  View ASPX  tab. The         customized fragment is highlighted in yellow, as the screenshot below illustrates. Viewing the changes to the layout of the form If you need to analyze the added content (changeset) of the customization project, in the         Customization Project Editor, choose the  Edit Project Items  command         on the  File  menu item and select the  Object           Name  field of the customized object (see the screenshot below). The            Page  item represents the changes to the .aspx code. Analyzing the added content of the customization project ]]></column>
		</row>
		<row PageID="cd3af693-0fa1-4371-ab7c-b8bf3bc258ad" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="ce99d592-537f-7144-fa60-2420e5605692" RecordSourceID="22377">
			<column name="Content"><![CDATA[
Suppose that you need to add a column to the details table (grid) of the Journal Transactions (GL301000) form shown in the screenshot below.[anchor|#image_hly_hk2_yl][image:CustomizationPlatform/images/AddColToGrid6.png|popup|Viewing the original form|440px]{br}

For instance, suppose that you need to add the column for the ''CreateDateTime'' data field to the position after the '''Ref. Number''' column.{br}

To do this, perform the following actions:[anchor|#ol_cfn_rpy_fm]
#On the Journal Transactions (GL301000) form, click the '''Customization''' menu, choose '''Inspect Element''', select the '''Ref. Number''' column header, and click '''Customize''' on the '''Element Properties''' dialog box.
#In the Screen Editor, open the '''Add Data Fields''' tab.
#Apply the '''All''' filter to the list of the fields.
#Select the ''CreateDateTime'' field in the list, as shown in the screenshot below.
#Click '''Create Controls''' in the tab toolbar.
#:((({S:Warn}New columns are added to the grid in the position after the item selected in the Control Tree of the Screen Editor. If you need to change the placement of a UI control, select the control on the tree, drag and drop it to the needed place.
)))[anchor|#image_y5q_z22_yl][image:CustomizationPlatform/images/AddColToGrid2.png|popup|Adding the column to the grid|420px]
#Click '''Save''' on the toolbar of the Screen Editor to save changes to the current customization project.

Thus, to add new columns to a grid, you have to open the grid node on the Control Tree of the Screen, select the '''Add Data Fields''' tab in the editor, select needed fields in the list on the tab, click '''Create Controls''', and then drag and drop new columns to desired positions inside the grid. You can add a column for any field that belongs to any data access class (DAC) of any data view of the business logic controller bound to the form. To select a DAC to view its fields in the list, use the '''Data View''' drop-down list on the '''Add Data Fields''' tab.{br}

To view the changes on the form, click '''Preview Page''' on the toolbar or publish the project and review the changes on the Journal Transactions (GL301000) form after the customization has been applied.[anchor|#image_y2h_lxl_kq][image:CustomizationPlatform/images/AddColToGrid1.png|popup|Viewing the customized form|430px]{br}

To view the fragment of the .aspx code that represents the customization result, open the form in the Screen Editor and select the '''View ASPX''' tab. The customized fragment is highlighted in yellow, as the screenshot below illustrates.[anchor|#image_h5z_ql2_yl][image:CustomizationPlatform/images/AddColToGrid5.png|popup|Analyzing the changeset of the .aspx code|420px]{br}

To analyze the changes to the layout of the form introduced by the new column, in the Customization Project Editor, choose the '''Edit Project Items''' command on the '''File''' menu item and select the '''Object Name''' field of the customized object (see the screenshot below). You can see the new <tt>Page</tt> item that contains the .aspx code changeset.[anchor|#image_y2w_nl2_yl][image:CustomizationPlatform/images/AddColToGrid4.png|popup|Analyzing the added content of the customization project|420px]]]></column>
			<column name="PlainText"><![CDATA[Adding Columns to a Grid Suppose that you need to add a column to the details table (grid) of the Journal Transactions         (GL301000) form shown in the screenshot below. Viewing the original form For instance, suppose that you need to add the column for the  CreateDateTime  data         field to the position after the  Ref. Number  column. To do this, perform the following actions: On the Journal Transactions (GL301000) form, click the              Customization  menu, choose  Inspect           Element , select the  Ref. Number  column header, and           click  Customize  on the  Element Properties            dialog box. In the Screen Editor, open the  Add Data Fields  tab. Apply the  All  filter to the list of the fields. Select the  CreateDateTime  field in the list, as shown in the screenshot           below. Click  Create Controls  in the tab toolbar. New columns are             added to the grid in the position after the item selected in the Control Tree of the             Screen Editor. If you need to change the placement of a UI control, select the control             on the tree, drag and drop it to the needed place. Adding the column to the grid Click  Save  on the toolbar of the Screen Editor to save changes to           the current customization project. Thus, to add new columns to a grid, you have to open the grid node on the Control Tree of         the Screen, select the  Add Data Fields  tab in the editor, select         needed fields in the list on the tab, click  Create Controls , and then         drag and drop new columns to desired positions inside the grid. You can add a column for any         field that belongs to any data access class (DAC) of any data view of the business logic         controller bound to the form. To select a DAC to view its fields in the list, use the            Data View  drop-down list on the  Add Data           Fields  tab. To view the changes on the form, click  Preview Page  on the toolbar         or publish the project and review the changes on the Journal Transactions (GL301000) form         after the customization has been applied. Viewing the customized form To view the fragment of the .aspx code that represents the customization result, open the         form in the Screen Editor and select the  View ASPX  tab. The         customized fragment is highlighted in yellow, as the screenshot below illustrates. Analyzing the changeset of the .aspx code To analyze the changes to the layout of the form introduced by the new column, in the         Customization Project Editor, choose the  Edit Project Items  command         on the  File  menu item and select the  Object           Name  field of the customized object (see the screenshot below). You can see         the new  Page  item that contains the .aspx code changeset. Analyzing the added content of the customization project ]]></column>
		</row>
		<row PageID="520c9c0d-5bd5-4d38-a4bb-97df4b0e47c4" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="bcc5c24a-f87b-fd86-4d55-899551c160ea" RecordSourceID="22377">
			<column name="Content"><![CDATA[
If you add columns to a selector, you give the user the capability to see more information about each item in the lookup window, so the user can select the appropriate data record.{br}

The screenshot below illustrates the original view of the '''Batch Number''' lookup window (also referred to as ''selector''). The '''Batch Number''' is a control on the form of the Journal Transactions (GL301000) form. The lookup window of this control includes eight columns, as shown in the screenshot below.[anchor|#image_d4n_3nb_vl][image:CustomizationPlatform/images/ACE_13.png|popup|Viewing the current structure and content of the lookup window|430px]{br}

 Suppose the UI customization task for the '''Batch Number''' selector includes the following steps (see the screenshot above):[anchor|#ol_fs1_zct_kq]
#Deleting an existing column, such as the '''Ledger''' column.
#Adding a column for the '''Created By''' field to the place after the '''Currency''' column.
#Changing the order of the selector columns, so the '''Status''' column moves to the position between the '''Credit Total''' and '''Currency''' columns.
{br}

To do this, perform the following actions:[anchor|#ol_lcf_wln_kq]
#On the Journal Transactions (GL301000) form, click the '''Customization''' menu, choose '''Inspect Element''', select the '''Batch Number''' control, click '''Actions''' on the '''Element Properties''' dialog box and select the '''Customize Data Fields''' command.
#:The Data Class Editor appears with only the '''BatchNbr''' field in the list of the customized fields of the class. The field is already selected in the field; therefore the work area of the editor holds information about the field.
#:((({S:Warn}The selected field type is selector, so the '''Selector Columns''' button is enabled in the editor toolbar.
)))
#Сlick '''Selector Columns''' to open the '''Customize Selector Column''' dialog box, as shown in the screenshot below.
#In the table of the '''Customize Selector Column''' dialog box, select the row with the '''Ledger''' column.
#Click '''Delete Row''' to delete the selected '''Ledger''' column from the selector.[anchor|#image_m1p_4nb_vl][image:CustomizationPlatform/images/ACE_15.png|popup|Deleting the selected column from the selector|420px]
#Click '''Add Columns''' on the toolbar of the '''Customize Selector Column''' dialog box to open the '''Add Columns to Selector''' dialog box.
#In the '''Add Columns to Selector''' dialog box, select the '''All''' tab to view all fields of the customized data access class (DAC) in the table.
# In the table, select the row with the '''Created By''' column name.
#Click '''OK''' to add the selected field to the table of the '''Customize Selector Column''' dialog box.[anchor|#image_tgf_m14_kq][image:CustomizationPlatform/images/AddColToSelector_01.png|popup|Adding the column for the field to the table of the Customize Selector Column Dialog|300px]
#:((({S:Warn}New columns are added to the position after the last existing column of the selector.
)))
#:The '''Created By''' column is created in the table of the '''Customize Selector Column''' dialog box at the rightmost position. Therefore, you do not need to move this column inside the selector. But you still have to move the '''Status''' column to position between the '''Credit Total''' and '''Currency''' columns.
#Select the row with the '''Status''' column.
#Click '''Down''' twice to move the selected row to the required position, as shown in the screenshot below.
#Click '''OK''' on the '''Customize Selector Column''' dialog box to apply the changes to the selector.
#Click '''Save''' on the toolbar of the Data Class Editor to save the changes to the current customization project.
{br}

After you click '''OK''' in the '''Customize Selector Columns''' dialog box, the system applies the modifications to the selector table. As a result, the <tt>PXCustomizeSelectorColumns</tt> attribute is added to the selector field and you can view the attribute in the '''Customize Attributes''' text area of the Data Class Editor (see the screenshot below). This attribute defines the new set and order of the columns in the selector.[anchor|#image_fys_4d4_kq][image:CustomizationPlatform/images/AddColToSelector_012.png|popup|Viewing the changes in the Customize Attributes text area|420px]{br}

After publishing the project, open the Journal Transactions (GL301000) form, click the Magnifier icon of the '''Batch Number''' control, and view the lookup window. Notice the absence of the deleted column, the position of the moved '''Status''' column, and the presence of the '''Created By''' column, as shown in the screenshot below.[anchor|#image_tnq_ct5_kq][image:CustomizationPlatform/images/AddColToSelector_013.png|popup|Viewing the modified structure and content of the lookup window|320px]{br}

If you need to analyze the added content (changeset) of the customization project, open the project in the Project Editor, choose the '''Edit Project Items''' command on the '''File''' menu item, and select the '''Object Name''' field of the customized object (see the screenshot below). The ''DAC'' object represents the changes to the data access class code.[anchor|#image_xxz_k5d_yl][image:CustomizationPlatform/images/AddColToSelector_02.png|popup|Analyzing the added content of the customization project|420px]]]></column>
			<column name="PlainText"><![CDATA[Modifying Columns in a Selector If you add columns to a selector, you give the user the capability to see more information         about each item in the lookup window, so the user can select the appropriate data         record. The screenshot below illustrates the original view of the  Batch           Number  lookup window (also referred to as  selector ). The            Batch Number  is a control on the form of the Journal Transactions         (GL301000) form. The lookup window of this control includes eight columns, as shown in the         screenshot below. Viewing the current structure and content of the lookup window  Suppose the UI customization task for the  Batch Number  selector         includes the following steps (see the screenshot above): Deleting an existing column, such as the  Ledger  column. Adding a column for the  Created By  field to the place after the                Currency  column. Changing the order of the selector columns, so the  Status              column moves to the position between the  Credit Total  and                Currency  columns. To do this, perform the following actions: On the Journal Transactions (GL301000) form, click the                Customization  menu, choose  Inspect               Element , select the  Batch Number  control, click                Actions  on the  Element Properties  dialog             box and select the  Customize Data Fields  command. The Data               Class Editor appears with only the  BatchNbr  field in the list               of the customized fields of the class. The field is already selected in the field;               therefore the work area of the editor holds information about the field. The               selected field type is selector, so the  Selector Columns  button               is enabled in the editor toolbar. Сlick  Selector Columns  to open the  Customize Selector               Column  dialog box, as shown in the screenshot below. In the table of the  Customize Selector Column  dialog box, select             the row with the  Ledger  column. Click  Delete Row  to delete the selected                Ledger  column from the selector. Deleting the selected column from the selector Click  Add Columns  on the toolbar of the  Customize               Selector Column  dialog box to open the  Add Columns to               Selector  dialog box. In the  Add Columns to Selector  dialog box, select the                All  tab to view all fields of the customized data access class             (DAC) in the table.  In the table, select the row with the  Created By  column             name. Click  OK  to add the selected field to the table of the                Customize Selector Column  dialog box. Adding the column for the field to the table of the Customize Selector Column                 Dialog New columns are added to the position after the last existing column of the               selector. The  Created By  column is created in the               table of the  Customize Selector Column  dialog box at the               rightmost position. Therefore, you do not need to move this column inside the               selector. But you still have to move the  Status  column to               position between the  Credit Total  and                  Currency  columns. Select the row with the  Status  column. Click  Down  twice to move the selected row to the required             position, as shown in the screenshot below. Click  OK  on the  Customize Selector               Column  dialog box to apply the changes to the selector. Click  Save  on the toolbar of the Data Class Editor to save the             changes to the current customization project. After you click  OK  in the  Customize Selector         Columns  dialog box, the system applies the modifications to the selector table. As         a result, the  PXCustomizeSelectorColumns  attribute is added to the         selector field and you can view the attribute in the  Customize           Attributes  text area of the Data Class Editor (see the screenshot below). This         attribute defines the new set and order of the columns in the selector. Viewing the changes in the Customize Attributes text area After publishing the project, open the Journal Transactions (GL301000) form, click the         Magnifier icon of the  Batch Number  control, and view the lookup         window. Notice the absence of the deleted column, the position of the moved            Status  column, and the presence of the  Created           By  column, as shown in the screenshot below. Viewing the modified structure and content of the lookup window If you need to analyze the added content (changeset) of the customization project, open the         project in the  Project Editor, choose the  Edit Project Items  command on the            File  menu item, and select the  Object Name          field of the customized object (see the screenshot below). The  DAC  object represents         the changes to the data access class code. Analyzing the added content of the customization project ]]></column>
		</row>
		<row PageID="990a129f-be8c-49f5-b0f3-21b69c7fcde9" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="c5432f6e-10bc-f4aa-0cac-5a39f3d31e45" RecordSourceID="22377">
			<column name="Content"><![CDATA[
''Functional customization'' means modifications of the data structure and original application business logic. These modifications are related either to the code of the appropriate data access classes (DACs) or business logic controllers (BLCs, also referred to as ''graphs'').{br}

The Acumatica Customization           Platform provides the tools and the framework that is based on class extensions and provides the following key features:[anchor|#ul_ijn_gg2_pl]
*You can deploy multiple projects that extend DACs or BLCs.
*Extensions are precompiled, which provides a measure of protection for your source code and intellectual property.
*The framework provides an advanced level of control over the business logic and a multilevel extension model.
*The platform implements an auto-discovery mechanism, which makes the deployment and upgrade processes straightforward.

The topics of this section describe the rules and methods of functional customization and give examples of customization projects that resolve typical functional customization tasks:[anchor|#ul_pcd_4hy_yl]
*[HelpRoot_Dev_Customization\HowACE_AddField|Adding Data Fields]
*[HelpRoot_Dev_Customization\CustAttr|Customizing DAC Attributes]
*[HelpRoot_Dev_Customization\HowACEAction|Modifying a BLC Action]
*[HelpRoot_Dev_Customization\HowACEDataView|Modifying a BLC Data View]
*[HelpRoot_Dev_Customization\HowACEDataDelegate|Declaring or Altering a BLC Data View Delegate]
*[HelpRoot_Dev_Customization\HowACEInitializeBLC|Extending BLC Initialization]
*[HelpRoot_Dev_Customization\HowACEAlteringBLCProcessingPage|Altering the BLC of a Processing Form]
*[HelpRoot_Dev_Customization\HowACEAlteringBLCEventHadler|Adding or Altering BLC Event Handlers]
*[HelpRoot_Dev_Customization\AEF_AlterBLC_VirtualMethods|Altering BLC Virtual Methods]
]]></column>
			<column name="PlainText"><![CDATA[Examples of Functional Customization Functional customization  means modifications of the data structure and original     application business logic. These modifications are related either to the code of the     appropriate data access classes (DACs) or business logic controllers (BLCs, also referred to as       graphs ). The  Acumatica Customization           Platform provides the tools and the framework that is based on class extensions and provides the     following key features: You can deploy multiple projects that extend DACs or BLCs. Extensions are precompiled, which provides a measure of protection for your source code and      intellectual property. The framework provides an advanced level of control over the business logic and a multilevel      extension model. The platform implements an auto-discovery mechanism, which makes the deployment and upgrade      processes straightforward. The topics of this section describe the rules and methods of functional customization and give     examples of customization projects that resolve typical functional customization tasks: Adding Data FieldsCustomizing DAC AttributesModifying a BLC ActionModifying a BLC Data ViewDeclaring or Altering a BLC Data View DelegateExtending BLC InitializationAltering the BLC of a Processing FormAdding or Altering BLC Event HandlersAltering BLC Virtual Methods]]></column>
		</row>
		<row PageID="a5df3248-1ede-4e64-8c1d-5c80f59b3466" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="6e79a047-a5dd-bd2b-08eb-2bf1c538b3ad" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can add to a form a UI control based on a new data field. To do this, you can use the following ways:[anchor|#ul_jks_bs3_jq]
*Use the Data Class Editor to create the data field and use the Screen Editor to add the control onto the required area of a form.
*Define the data field in code, add the Table customization item for adding the column to the database table if the field is bound, and use the Screen Editor to add the control onto the required area of a form.

These approaches are described in greater detail below.[anchor|#ul_gb4_453_jq]
*[[#section_dkm_553_jq|Adding a Data Field From the Data Class Editor]
*[[#section_hxs_553_jq|Adding a Data Field From Code]
[anchor|#section_dkm_553_jq]
==Adding a Data Field From the Data Class Editor==
Suppose that you have to add an input UI text box for a bound data field to the [HelpRoot_FormReference\IN_20_25_00|Stock Items] ([~/?ScreenId=IN202500|IN202500]) form. To do this, you have to (see the diagram below):[anchor|#ul_jhd_2zz_yl]
*Add a data field to the code of the appropriate DAC (the functional customization step)
*Add a column to the database table (a customization change to the database structure that is a part of functional customization)
*:((({S:Warn}You have to add a database column only for bound data fields. Bound data field means the field values are saved in the database. If you define an unbound field, skip this step.
)))
*Add a control for the field onto the form area (the UI customization step)[anchor|#image_lbt_jmq_qr][image:CustomizationPlatform/images/CG_EX_AddDataField.png|popup|Adding a bound field to a webpage|450px]

Suppose you have to add the new '''Search Keywords''' text box to the Stock Items form to the location shown on the screenshot.[anchor|#image_i13_jw3_jq][image:CustomizationPlatform/images/SearchKeywordsField.png|popup|The customization task of adding the new field to the form|450px]
To add this text box, do the following:[anchor|#_5b702ab2-e206-4edb-8720-b3ca7ddcf84c]
#Add the field to the appropriate DAC as follows:
##Open the data access class that provides fields for the form area on the Stock Items form in Data Class Editor. To do this, open the Stock Items form, select '''Customization''' > '''Inspect Element''' on the form title bar, and click the form area of the Stock Items form.
##:The following information of the control and the data access class should appear in the '''Element Properties''' dialog box:
##*'''Control Type''': ''Form View''
##* '''Data Class''': ''InventoryItem''
##* '''Business Logic''': ''InventoryItemMaint''
##:{{InventoryItem}} is the data access class that provides the data fields for UI controls on the form. Therefore, you have to add the new data field to the extension of this class.
##In the '''Element Properties''' dialog box, select '''Actions''' > '''Customize Data Fields''' to open the Data Class Editor for the {{InventoryItem}} class.
##:((({S:Warn}If you haven&rsquo;t selected the current project yet, you will be asked to select the customization project to which the customization of the data access class will be added. You can select the current project to automatically add all customizations that you initiate from the Element Inspector by using the '''Customization''' > '''Select Project''' menu to the project. For more information, see [HelpRoot_Dev_Customization\CG_Platform_Tools_Menu_SelectCustProjDlg|Select Customization Project Dialog Box].
)))
##In the Data Class Editor, select '''Add Field''' > '''Create New Field''' on the toolbar.
##In the '''Create New Field''' dialog box, specify the following parameters for the new field:
##*'''Field Name''': <tt>SearchKeywords</tt>
##*'''DisplayName''': <tt>Search Keywords</tt>
##*'''Storage Type''': ''DBTableColumn''
##* '''Data Type''': ''string''
##* '''Length''': <tt>255</tt>
##:As soon as you move the focus out of the '''Field Name''' box, the system adds the ''Usr'' prefix to the field name (see the screenshot below), which provides the distinction between the base fields and new custom fields that you add to the class. Keep the prefix in the field name and click '''OK''' to add the data field to the class.
##:((({S:Warn}If you select the ''DBTableColumn'' storage type, the system automatically adds schema for the new database column to the customization project. For more information on parameters that you specify for new fields, see [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_DataClassEditor_NewFieldDlg|Create New Field Dialog Box].
)))[anchor|#image_ics_jbj_jq][image:CustomizationPlatform/images/AddingFieldDACEditor.png|popup|Adding the new data field to the class|350px]
##:To the customization project, the system adds the new field as the extension to the {{InventoryItem}} data access class, and adds the <tt>Table</tt> item for adding the corresponding column to the database table. 
##Click '''Save''' on the toolbar of the Data Class Editor to save the changes to the project. After you save the added field, you can see the added project item in the '''Database Scripts''' page of the Customization Project Editor.
#Publish the customization project. You need to do it at this point to be able to add the UI control for the new field because when the project is published the system compiles the customization code and updates the database schema with the new column. For more information, see [HelpRoot_Dev_Customization\CG_GL_Projects_Publishing|Publishing Customization Projects].
#Add the control to the form. Do it as follows:
##Add the Stock Items form to the customization project. To do this, you can use the Element Inspector or select '''Screens''' on the navigation pane of the Customization Project Editor, and add the Stock Items form to the list by selecting '''Add Screen''' > '''Customize Existing Screen''' on the toolbar.
##Open the form in the Screen Editor. In the Control Tree, expand the '''Form: Item''' container and select and expand the first column within the container to set up the position to which the new control will be added.
##Select the '''Add Data Fields''' tab of Screen Editor.
##Leave the '''Data View''' box empty. (The box specifies the data access class by which the fields are filtered in the table below.)
##Select the '''Custom''' filter on the tab and select the check box for the ''UsrSearchKeywords'' field in the table, as the following screenshot shows.[anchor|#image_eql_ztj_jq][image:CustomizationPlatform/images/AddingFieldDACEditor3.png|popup|Adding the control for the data field|450px]
##Click '''Create Controls''' on the toolbar of the tab. The control for the '''Search Keywords''' field will be added to the tree.
#:Now you have to adjust the position and size of the control on the form. Drag and drop the '''Search Keywords''' control at the end of the column after the '''Description''' control and click '''Save''' to save the changes to the project.
#Adjust the size of the control. To do that you have to place an instance of the {{PXLayoutRule}} component right above the control and configure it as follows:
##Select the '''Add Controls''' tab of Screen Editor and drag and drop an '''Empty Rule''' component to the position above the '''Search Keywords''' control in the tree, as the screenshot below shows.[anchor|#image_hck_mvj_jq][image:CustomizationPlatform/images/AddingFieldDACEditor5.png|popup|Adding an Empty Rule component to the tree to adjust the size of the control|350px]
##Select the ''&#91;Layout Rule&#93;'' node that appears in the Control Tree and switch to the '''Layout Properties''' tab of Screen Editor.
##On the '''Layout Properties''' tab, set the '''ColumnSpan''' property to <tt>2</tt>, which specifies the span of the control on two columns of the layout on the form. Click '''Save''' to save the changes to the project. After you save these changes, the ''&#91;Layout Rule&#93;'' node is renamed to ''&#91;Column Span&#93;'' according to the property the rule is changing.
##:((({S:Warn}The controls are organized in two columns on the form. For more information about positioning controls, see [HelpRoot_Dev_Customization\CG_GL_UI_LayoutRules|Layout Rule (PXLayoutRule)].
)))

The customization to the layout of the form is ready.((({S:Warn}While working with Screen Editor, you can click '''Preview Page''' to view how the changes will affect the layout of the form.
)))
Publish the project again to view the changes applied to the [HelpRoot_FormReference\IN_20_25_00|Stock Items] ([~/?ScreenId=IN202500|IN202500]) form. After you publish the project, verify that the customized Stock Items form looks as needed according to the customization task. The customization items for form layout, data access class, and database schema have been added to the project. The new '''Search Keywords''' text box will appear on the Stock Items form on every system where you publish the customization project.{br}

The DAC extension code that has been generated for the new field is given below. The system has generated a DAC extension class for {{InventoryItem}} and added the data field definition to the class. For more information about extension classes, see [HelpRoot_Dev_Customization\CG_Platform_Framework_CS_DACExt|DAC Extensions].<source lang="csharp">public class PX_Objects_IN_InventoryItem_Extension_AddColumn: 
  PXCacheExtension&lt;PX.Objects.IN.InventoryItem&gt;
{
  #region UsrSearchKeywords
  public abstract class usrSearchKeywords : IBqlField{}	
  [PXDBString(255)]
  [PXUIField(DisplayName="Search Keywords")]
  public virtual string UsrSearchKeywords
  {
      get; set;
  }
  #endregion
}</source>
You can open the customization code in MS Visual Studio and work with the code there. For more information, see [HelpRoot_Dev_Customization\CG_Platform_Studio|Integrating the Project Editor with Microsoft Visual Studio].[anchor|#section_hxs_553_jq]
==Adding a Data Field From Code==
If you work with the customization code in MS Visual Studio, you can define a new data field in DAC extension code and then create the control on the form.{br}

Suppose that you have to add an input UI text box for a bound data field to the [HelpRoot_FormReference\IN_20_25_00|Stock Items] ([~/?ScreenId=IN202500|IN202500]) form. To do this, you have to:[anchor|#ul_lzj_qjk_jq]
*Add a data field to the code of the appropriate DAC (the functional customization step)
*Add a column to the database table (a customization change to the database structure that is a part of functional customization)
*:((({S:Warn}You have to add a database column only for bound data fields. Bound data field means the field values are saved in the database. If you define an unbound field, skip this step.
)))
*Add an input UI text box onto the form area of the form (the UI customization step)

Suppose you have to add the new '''Local Tax Category''' selector to the Stock Items form, as the screenshot below shows.[anchor|#image_zbr_kgl_jq][image:CustomizationPlatform/images/AddingFieldDACEditor7.png|popup|The customization task of adding the new field to the form|450px]
If you want to work with the DAC extension code in the integrated MS Visual Studio solution without use of Data Class Editor, you can develop the code in a ''.cs'' file added to the customization project as a custom <tt>Code</tt> item or in a ''.cs'' file in a separate add-on project in the solution. We recommend that you use either Data Class Editor or develop the entire customization code in an add-on project in MS Visual Studio, but do not mix up the approaches. For more information, see [HelpRoot_Dev_Customization\CG_Platform_Studio|Integrating the Project Editor with Microsoft Visual Studio].{br}

To add the UI control for the bound data field created from code, perform the following actions:[anchor|#ol_sgj_4kr_ym]
#In MS Visual Studio, define the custom {{usrLocalTaxCategoryID}} data field in the DAC extension class, as listed below.<source lang="csharp">using PX.Data;
using PX.Objects.IN;
using PX.Objects.TX;

namespace PX.Objects.IN
{
  public class InventoryItemExtension: PXCacheExtension&lt;InventoryItem&gt;
  {
      #region UsrLocalTaxCategoryID
      public abstract class usrLocalTaxCategoryID : PX.Data.IBqlField
      {
      }
      [PXDBString(10, IsUnicode = true)]
      [PXUIField(DisplayName = "Local Tax Category")]
      [PXSelector(typeof(TaxCategory.taxCategoryID),
                  DescriptionField = typeof(TaxCategory.descr))]
      public string UsrLocalTaxCategoryID { get; set; }
      #endregion
  }
}</source>
#:((({S:Warn}In this example, the ''.cs'' file with the DAC extension code is added to the customization project as a custom <tt>Code</tt> item. When you develop extensions in custom <tt>Code</tt> items, define the extension classes in the namespace of the original class. For more information about adding custom <tt>Code</tt> items to the project, see [HelpRoot_Dev_Customization\CG_GL_Items_Code|Code].
)))
#Update the customization project with the new customization code. To do this, open the customization project that corresponds to the MS Visual Studio solution in the Customization Project Editor, select the '''Files''' list of project items and click '''Detect Modified Files'''. 
#:((({S:Warn}If you build an assembly with the DAC extension code, update the assembly file in the customization project. For more information, see [HelpRoot_Dev_Customization\CG_GL_Items_Files_Updating|To Update a File Item in a Project].
)))
#:In the '''Modified Files Detected''' dialog box, select the conflicting file of the custom <tt>Code</tt> item and click '''Update Customization Project''' to update the code in the project.
#Add the database schema for the custom field to the project as follows:
##On the '''Database Scripts''' page of the Customization Project Editor, click '''Add &gt; Custom Column to Table'''. In the '''Add Custom Column to Table''' dialog box which opens, fill in the following values and click '''OK''':
##*'''Table Name''': ''InventoryItem''
##* '''Field Name''': <tt>LocalTaxCategoryID</tt> (without the ''Usr'' prefix)
##*'''Field Type''': ''string''
##* '''Length''': <tt>10</tt>[anchor|#image_xv4_jkl_jq][image:CustomizationPlatform/images/AddingFieldDACEditor8.png|popup|Adding the database schema for a custom DAC field created from code|450px]
##:((({S:Warn}We recommend that you add the database schema for the a custom column, as shown above, and do not alter the original schema of the table by a custom SQL script.
)))
##Publish the customization project to make the system add the column to the database and compile the customization code. To do this, select '''Publish''' > '''Publish Current Project''' on the menu of Customization Project Editor.
#Add the UI control for the custom field to the Stock Items form. To do this, open the form in Screen Editor.
#:((({S:Warn}You can add an existing form to the customization project by using the Element Inspector or directly from Project Editor. See [HelpRoot_Dev_Customization\CG_GL_Items_Screens|Customized Screens] for details.
)))
##Select the '''Tax Category''' control in the Control Tree to add the new control below it.
##On the '''Add Data Fields''' tab, select the check box for the '''Local Tax Category''' selector in the table and click '''Create Controls''' to add the control to the tree (see the screenshot below).[anchor|#_5e7068b5-7ea9-49ee-bd43-79b782f12266][image:CustomizationPlatform/images/AddingFieldDACEditor9.png|popup|Adding the control for the data field|450px]
##Click '''Save''' on the toolbar to save the layout changes.
##Preview the customized form by clicking '''Preview Page''' on the toolbar or publish the customization project to view the changes applied to the [HelpRoot_FormReference\IN_20_25_00|Stock Items] form.
#Verify that the customized Stock Items form looks as needed according to the customization task (see above). The customization items for the form layout, custom code (or external assembly file), and database schema have been added to the customization project. The new '''Local Tax Category''' text box will appear on the Stock Items form on every system where you publish the customization project.
]]></column>
			<column name="PlainText"><![CDATA[Adding Data Fields You can add to a form a UI control based on a new data field. To do this, you can use the         following ways: Use the Data Class Editor to create the data field and use the Screen Editor to add the           control onto the required area of a form. Define the data field in code, add the Table customization item for adding the column to           the database table if the field is bound, and use the Screen Editor to add the control           onto the required area of a form. These approaches are described in greater detail below. Adding a Data Field From the Data Class Editor Adding a Data Field From the Data Class EditorAdding a Data Field From Code Adding a Data Field From CodeAdding a Data Field From the Data Class Editor Suppose that you have to add an input UI text box for a bound data field to the   ([~/?ScreenId=IN202500|IN202500]) Stock Items (IN202500) form. To do this, you have         to (see the diagram below): Add a data field to the code of the appropriate DAC (the functional customization           step) Add a column to the database table (a customization change to the database structure           that is a part of functional customization) You have to add a database column only             for bound data fields. Bound data field means the field values are saved in the             database. If you define an unbound field, skip this step. Add a control for the field onto the form area (the UI customization step) Adding a bound field to a webpage Suppose you have to add the new  Search Keywords  text box to the         Stock Items form to the location shown on the screenshot. The customization task of adding the new field to the form To add this text box, do the following: Add the field to the appropriate DAC as follows: Open the data access class that provides fields for the form area on the Stock Items               form in Data Class Editor. To do this, open the Stock Items form, select  Customization Inspect Element  on the form title bar, and click the form area of the Stock Items                 form. The following information of the control and the data access class should                 appear in the  Element Properties  dialog box: Control Type :  Form View Data Class :  InventoryItem Business Logic :  InventoryItemMaint InventoryItem  is the data access class that provides the data                 fields for UI controls on the form. Therefore, you have to add the new data field to                 the extension of this class. In the  Element Properties  dialog box, select  Actions Customize Data Fields  to open the Data Class Editor for the  InventoryItem                  class. If you haven't selected the current project yet, you will be asked to                 select the customization project to which the customization of the data access class                 will be added. You can select the current project to automatically add all                 customizations that you initiate from the Element Inspector by using the  Customization Select Project  menu to the project. For more information, see  Select Customization Project Dialog Box. In the Data Class Editor, select  Add Field Create New Field  on the toolbar. In the  Create New Field  dialog box, specify the following               parameters for the new field: Field Name :  SearchKeywords DisplayName :  Search Keywords Storage Type :  DBTableColumn Data Type :  string Length :  255 As soon as you move the focus out of the  Field Name                  box, the system adds the  Usr  prefix to the field name (see the screenshot                 below), which provides the distinction between the base fields and new custom fields                 that you add to the class. Keep the prefix in the field name and click                    OK  to add the data field to the class. If you                 select the  DBTableColumn  storage type, the system automatically adds schema                 for the new database column to the customization project. For more information on                 parameters that you specify for new fields, see  Create New Field Dialog Box. Adding the new data field to the class To the customization project, the system adds the new field as the extension                 to the  InventoryItem  data access class, and adds the                    Table  item for adding the corresponding column to the database                 table.  Click  Save  on the toolbar of the Data Class Editor to save               the changes to the project. After you save the added field, you can see the added               project item in the  Database Scripts  page of the Customization               Project Editor. Publish the customization project. You need to do it at this point to be able to add the           UI control for the new field because when the project is published the system compiles the           customization code and updates the database schema with the new column. For more           information, see  Publishing Customization Projects. Add the control to the form. Do it as follows: Add the Stock Items form to the customization project. To do this, you can use the               Element Inspector or select  Screens  on the navigation pane of               the Customization Project Editor, and add the Stock Items form to the list by               selecting  Add Screen Customize Existing Screen  on the toolbar. Open the form in the Screen Editor. In the Control Tree, expand the  Form:                 Item  container and select and expand the first column within the               container to set up the position to which the new control will be added. Select the  Add Data Fields  tab of Screen Editor. Leave the  Data View  box empty. (The box specifies the data               access class by which the fields are filtered in the table below.) Select the  Custom  filter on the tab and select the check box               for the  UsrSearchKeywords  field in the table, as the following screenshot                 shows. Adding the control for the data field Click  Create Controls  on the toolbar of the tab. The control               for the  Search Keywords  field will be added to the tree. Now you have to adjust the position and size of the control on the form. Drag and             drop the  Search Keywords  control at the end of the column after             the  Description  control and click  Save  to             save the changes to the project. Adjust the size of the control. To do that you have to place an instance of the              PXLayoutRule  component right above the control and configure it as             follows: Select the  Add Controls  tab of Screen Editor and drag and               drop an  Empty Rule  component to the position above the                  Search Keywords  control in the tree, as the screenshot below                 shows. Adding an Empty Rule component to the tree to adjust the size of the                   control Select the  [Layout Rule]  node that appears in the Control Tree and switch to               the  Layout Properties  tab of Screen Editor. On the  Layout Properties  tab, set the                  ColumnSpan  property to  2 , which               specifies the span of the control on two columns of the layout on the form. Click                  Save  to save the changes to the project. After you save these               changes, the  [Layout Rule]  node is renamed to  [Column Span]  according to               the property the rule is changing. The controls are organized in two columns on                 the form. For more information about positioning controls, see  Layout Rule (PXLayoutRule). The customization to the layout of the form is ready. While working with Screen Editor, you can click  Preview Page  to         view how the changes will affect the layout of the form. Publish the project again to view the changes applied to the   ([~/?ScreenId=IN202500|IN202500]) Stock Items (IN202500) form. After you publish         the project, verify that the customized Stock Items form looks as needed according to the         customization task. The customization items for form layout, data access class, and database         schema have been added to the project. The new  Search Keywords  text         box will appear on the Stock Items form on every system where you publish the customization         project. The DAC extension code that has been generated for the new field is given below. The system         has generated a DAC extension class for  InventoryItem  and added the data         field definition to the class. For more information about extension classes, see  DAC Extensions. public class PX_Objects_IN_InventoryItem_Extension_AddColumn: 
  PXCacheExtension<PX.Objects.IN.InventoryItem>
{
  #region UsrSearchKeywords
  public abstract class usrSearchKeywords : IBqlField{}	
  [PXDBString(255)]
  [PXUIField(DisplayName="Search Keywords")]
  public virtual string UsrSearchKeywords
  {
      get; set;
  }
  #endregion
} You can open the customization code in MS Visual Studio and work with the code there. For         more information, see  Integrating the Project Editor with Microsoft Visual Studio. Adding a Data Field From Code If you work with the customization code in MS Visual Studio, you can define a new data         field in DAC extension code and then create the control on the form. Suppose that you have to add an input UI text box for a bound data field to the   ([~/?ScreenId=IN202500|IN202500]) Stock Items (IN202500) form. To do this, you have         to: Add a data field to the code of the appropriate DAC (the functional customization           step) Add a column to the database table (a customization change to the database structure           that is a part of functional customization) You have to add a database column only             for bound data fields. Bound data field means the field values are saved in the             database. If you define an unbound field, skip this step. Add an input UI text box onto the form area of the form (the UI customization step) Suppose you have to add the new  Local Tax Category  selector to the         Stock Items form, as the screenshot below shows. The customization task of adding the new field to the form If you want to work with the DAC extension code in the integrated MS Visual Studio solution         without use of Data Class Editor, you can develop the code in a  .cs  file added to the         customization project as a custom  Code  item or in a  .cs  file in a         separate add-on project in the solution. We recommend that you use either Data Class Editor         or develop the entire customization code in an add-on project in MS Visual Studio, but do         not mix up the approaches. For more information, see  Integrating the Project Editor with Microsoft Visual Studio. To add the UI control for the bound data field created from code, perform the following         actions: In MS Visual Studio, define the custom  usrLocalTaxCategoryID  data field           in the DAC extension class, as listed             below. using PX.Data;
using PX.Objects.IN;
using PX.Objects.TX;

namespace PX.Objects.IN
{
  public class InventoryItemExtension: PXCacheExtension<InventoryItem>
  {
      #region UsrLocalTaxCategoryID
      public abstract class usrLocalTaxCategoryID : PX.Data.IBqlField
      {
      }
      [PXDBString(10, IsUnicode = true)]
      [PXUIField(DisplayName = "Local Tax Category")]
      [PXSelector(typeof(TaxCategory.taxCategoryID),
                  DescriptionField = typeof(TaxCategory.descr))]
      public string UsrLocalTaxCategoryID { get; set; }
      #endregion
  }
} In             this example, the  .cs  file with the DAC extension code is added to the             customization project as a custom  Code  item. When you develop             extensions in custom  Code  items, define the extension classes in the             namespace of the original class. For more information about adding custom                Code  items to the project, see  Code. Update the customization project with the new customization code. To do this, open the           customization project that corresponds to the MS Visual Studio solution in the  Customization Project Editor, select the  Files  list of project items and click              Detect Modified Files .  If you build an assembly with the             DAC extension code, update the assembly file in the customization project. For more             information, see  To Update a File Item in a Project. In the                Modified Files Detected  dialog box, select the conflicting file             of the custom  Code  item and click  Update Customization               Project  to update the code in the project. Add the database schema for the custom field to the project as follows: On the  Database Scripts  page of the Customization Project               Editor, click  Add > Custom Column to Table . In the  Add Custom Column to Table  dialog box               which opens, fill in the following values and click  OK : Table Name :  InventoryItem Field Name :  LocalTaxCategoryID                    (without the  Usr  prefix) Field Type :  string Length :  10 Adding the database schema for a custom DAC field created from code We recommend that you add the database schema for the a custom column, as                 shown above, and do not alter the original schema of the table by a custom SQL                 script. Publish the customization project to make the system add the column to the database               and compile the customization code. To do this, select  Publish Publish Current Project  on the menu of Customization Project Editor. Add the UI control for the custom field to the Stock Items form. To do this, open the           form in Screen Editor. You can add an existing form to the customization project by             using the Element Inspector or directly from Project Editor. See  Customized Screens for details. Select the  Tax Category  control in the Control Tree to add               the new control below it. On the  Add Data Fields  tab, select the check box for the                  Local Tax Category  selector in the table and click                  Create Controls  to add the control to the tree (see the               screenshot below). Adding the control for the data field Click  Save  on the toolbar to save the layout changes. Preview the customized form by clicking  Preview Page  on the               toolbar or publish the customization project to view the changes applied to the   ([~/?ScreenId=IN202500|IN202500]) Stock Items form. Verify that the customized Stock Items form looks as needed according to the           customization task (see above). The customization items for the form layout, custom code           (or external assembly file), and database schema have been added to the customization           project. The new  Local Tax Category  text box will appear on the           Stock Items form on every system where you publish the customization project. ]]></column>
		</row>
		<row PageID="6d084bb2-7346-4d9b-8a65-ce06137c1632" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="a9c66394-f717-5f99-ccba-ae3830889140" RecordSourceID="22377">
			<column name="Content"><![CDATA[
To modify or extend the behavior that is defined within a data access class (DAC), you should append or override the field attributes declared within the DAC.{br}

Suppose that you have a customization task to modify the Invoices (SO303000) form, and that this task consists of the following requirements:[anchor|#ol_wcr_vsf_zl]
#The '''Customer Order''' data field on the form area (see the screenshot below) must have the ''None'' value when the user has not specified the reference number of the customer.
#The values of the '''Discount Percent''' column must be limited to a range of -30 to 25 percent instead of the original range of -100 to 100 percent.
[anchor|#image_yp5_qyl_kq][image:CustomizationPlatform/images/CustomizingAttrs.png|popup|Viewing the original form|450px]{br}

To begin implementing the first requirement, inspect the properties of the '''Customer Order''' UI control. To do this, on the '''Customization''' menu, select '''Inspect Element''' and click the box or label of the control on the form. The system should retrieve the following information of the control that will display in the '''Element Properties''' dialog box:[anchor|#ul_q1k_wyl_kq]
*'''Control Type''': ''Text Edit''. The type of the UI control.
*'''Data Class''': ''ARInvoice''. The data access class that contains the inspected field.
*'''Data Field''': ''InvoiceNbr''. The field that is represented by the '''Customer Order''' control on the form.
*'''Business Logic''': ''SOInvoiceEntry''. The business logic controller (BLC, also referred to as ''graph'') that provides the logic executed on the ''Invoices'' form.

To modify attributes of the DAC field, select '''Actions''' > '''Customize Data Fields''' in the '''Element Properties''' dialog box. In the '''Select Customization Project''' dialog box, specify the project to which you want to add the customization item for the data field and click '''OK'''.{br}

Data Class Editor opens for customization of the {{InvoiceNbr}} field of the {{ARInvoice}} data access class.{br}

Suppose that you decided to append an attribute to the DAC field to specify the default value for the field. Do it as follows:[anchor|#_916c8710-c3e0-4a5e-aa8a-72911b103cac]
#in the '''Customize Attributes''' box select ''Append to Original''.
#In the text area, type {{[PXDefault("None")]}}.
#Save your changes in the Data Class Editor.
((({S:Warn} Acumatica Framework 2020 R1 provides advanced possibilities to control the field customization by using additional attributes in the DAC extension. See the [HelpRoot_Dev_Customization\CG_Platform_Framework_CS_DACExt_FieldAttributes|Customization of Field Attributes in DAC Extensions] for details.
)))[anchor|#image_scm_pdm_kq][image:CustomizationPlatform/images/CustomizingAttrs3.png|popup|Appending an attribute to the DAC field|450px]
The system adds the customized data access class to the '''Data Access''' list of project items. For more information, see [HelpRoot_Dev_Customization\CG_GL_Items_DACs|Customized Data Classes].{br}

To view the changes applied to the Invoices form, publish the customization project and add a new document on the Invoices form. When you add a new document, the system will insert the ''None'' default value into the '''Customer Order''' box as you have specified with the {{PXDefault}} attribute.{br}

To implement the second requirement of the task, inspect the '''Discount Percent''' column on the '''Document Details''' tab of the Invoices form. To do this, on the '''Customization''' menu, select '''Inspect Element''' and click the area of the '''Discount Percent''' column header. The system should retrieve the following information of the control that will display in the '''Element Properties''' dialog box:[anchor|#ul_ggv_d2m_kq]
*'''Control Type''': ''Grid Column''. The type of the UI control.
*'''Data Class''': ''ARTran''. The data access class that contains the inspected field.
*'''Data Field''': ''DiscPct''. The field that is represented by the '''Discount Percent''' column in the table.
*'''Business Logic''': ''SOInvoiceEntry''. The business logic controller (BLC, also referred to as ''graph'') that provides the logic executed on the ''Invoices'' form.

To modify attributes of the DAC field, select '''Actions''' > '''Customize Data Fields''' in the '''Element Properties''' dialog box. In the '''Select Customization Project''' dialog box, specify the project to which you want to add the customization item for the data field and click '''OK'''.{br}

Data Class Editor opens for customization of the {{DiscPct}} field of the {{ARTran}} data access class.{br}

The {{PXDBDecimal}} attribute specifies the range of valid values for the field. According to the customization task, you have to modify the minimum and maximum values specified in the attribute. To do this, you have to replace the original attributes with the custom ones as follows:[anchor|#_acf1ae84-203f-449d-9e98-294cdfc38090]
#In the '''Customize Attributes''' box, select ''Replace Original''. The original attributes will be copied to the text area where you enter custom attributes.
#For the {{PXDBDecimal}} attribute, change the minimum and maximum values, as listed below.{{{{[PXDBDecimal(6, MinValue = -30, MaxValue = 25)]
[PXUIField(DisplayName = "Discount Percent")]
[PXDefault(TypeCode.Decimal, "0.0")]
}}}}
#Click '''Save''' in Data Class Editor to save the changes.
((({S:Warn}If you replace attributes, you have to repeat all attributes that you want to remain on the data field.
)))[anchor|#image_omy_yfm_kq][image:CustomizationPlatform/images/CustomizingAttrs5.png|popup|Replacing attributes on the data field|450px]
The system adds the customized data access class to the '''Data Access''' list of project items. For more information, see [HelpRoot_Dev_Customization\CG_GL_Items_DACs|Customized Data Classes].{br}

To test the result of the customization, publish the customization project, open the Invoices form, insert a new document, and add a record to the details table, as shown in the screenshot below. If you try to specify a value in the '''Discount''' column greater than 25 percent or less than -30 percent, the system will automatically correct the value to the maximum 25 or minimum -30, respectively.]]></column>
			<column name="PlainText"><![CDATA[Customizing DAC Attributes To modify or extend the behavior that is defined within a data access class (DAC), you         should append or override the field attributes declared within the DAC. Suppose that you have a customization task to modify the Invoices (SO303000) form, and that         this task consists of the following requirements: The  Customer Order  data field on the form area (see the             screenshot below) must have the  None  value when the user has not specified the             reference number of the customer. The values of the  Discount Percent  column must be limited to a             range of -30 to 25 percent instead of the original range of -100 to 100 percent. Viewing the original form To begin implementing the first requirement, inspect the properties of the            Customer Order  UI control. To do this, on the            Customization  menu, select  Inspect Element          and click the box or label of the control on the form. The system should retrieve the         following information of the control that will display in the  Element           Properties  dialog box: Control Type :  Text Edit . The type of the UI control. Data Class :  ARInvoice . The data access class that contains           the inspected field. Data Field :  InvoiceNbr . The field that is represented by           the  Customer Order  control on the form. Business Logic :  SOInvoiceEntry . The business logic           controller (BLC, also referred to as  graph ) that provides the logic executed on the              Invoices  form. To modify attributes of the DAC field, select  Actions Customize Data Fields  in the  Element Properties  dialog box. In the            Select Customization Project  dialog box, specify the project to         which you want to add the customization item for the data field and click            OK . Data Class Editor opens for customization of the  InvoiceNbr  field of the            ARInvoice  data access class. Suppose that you decided to append an attribute to the DAC field to specify the default         value for the field. Do it as follows: in the  Customize Attributes  box select  Append to               Original . In the text area, type  [PXDefault("None")] . Save your changes in the Data Class Editor.  Acumatica Framework 2020 R1 provides advanced possibilities to control the field customization by using additional         attributes in the DAC extension. See the  Customization of Field Attributes in DAC Extensions for details. Appending an attribute to the DAC field The system adds the customized data access class to the  Data Access          list of project items. For more information, see  Customized Data Classes. To view the changes applied to the Invoices form, publish the customization project and add         a new document on the Invoices form. When you add a new document, the system will insert the            None  default value into the  Customer Order  box as you have         specified with the  PXDefault  attribute. To implement the second requirement of the task, inspect the  Discount           Percent  column on the  Document Details  tab of the         Invoices form. To do this, on the  Customization  menu, select            Inspect Element  and click the area of the  Discount           Percent  column header. The system should retrieve the following information of         the control that will display in the  Element Properties  dialog         box: Control Type :  Grid Column . The type of the UI           control. Data Class :  ARTran . The data access class that contains           the inspected field. Data Field :  DiscPct . The field that is represented by the              Discount Percent  column in the table. Business Logic :  SOInvoiceEntry . The business logic           controller (BLC, also referred to as  graph ) that provides the logic executed on the              Invoices  form. To modify attributes of the DAC field, select  Actions Customize Data Fields  in the  Element Properties  dialog box. In the            Select Customization Project  dialog box, specify the project to         which you want to add the customization item for the data field and click            OK . Data Class Editor opens for customization of the  DiscPct  field of the            ARTran  data access class. The  PXDBDecimal  attribute specifies the range of valid values for the         field. According to the customization task, you have to modify the minimum and maximum         values specified in the attribute. To do this, you have to replace the original attributes         with the custom ones as follows: In the  Customize Attributes  box, select  Replace             Original . The original attributes will be copied to the text area where you enter             custom attributes. For the  PXDBDecimal  attribute, change the minimum and maximum values,             as listed             below. [PXDBDecimal(6, MinValue = -30, MaxValue = 25)]
[PXUIField(DisplayName = "Discount Percent")]
[PXDefault(TypeCode.Decimal, "0.0")] Click  Save  in Data Class Editor to save the changes. If you replace attributes, you have to repeat all attributes that you want to remain on         the data field. Replacing attributes on the data field The system adds the customized data access class to the  Data Access          list of project items. For more information, see  Customized Data Classes. To test the result of the customization, publish the customization project, open the         Invoices form, insert a new document, and add a record to the details table, as shown in the         screenshot below. If you try to specify a value in the  Discount          column greater than 25 percent or less than -30 percent, the system will automatically         correct the value to the maximum 25 or minimum -30, respectively. ]]></column>
		</row>
		<row PageID="978b1ce1-49da-4194-bd11-bb72eaad9c5e" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="1887d3fb-73f2-9600-6f1d-0644d659d0f3" RecordSourceID="22377">
			<column name="Content"><![CDATA[
To modify the behavior of an action that is defined within a business logic controller (BLC, also referred to as ''graph''), you should override an action delegate.{br}

Suppose that you need to rename the '''Release''' button to '''Extended Release''' on the Receipts (IN301000) form, which is shown in the following screenshot.[anchor|#image_fr2_fpm_kq][image:CustomizationPlatform/images/CustomizeAction.png|popup|Viewing the original Receipts form|450px]
To do this, you have to find the business logic controller for the form and modify the display name of the action that corresponds to the '''Release''' button as follows:[anchor|#_ac42827e-b08e-4a6a-af34-01f595bcb7e9]
#Find the business logic controller for the form, on the '''Customization''' menu, select '''Inspect Element''' and click the button caption on the form. The system should retrieve the following information of the button, which appears in the '''Element Properties''' dialog box:
#*'''Control Type''': ''DS Callback Command''. The type of the UI control.
#*'''Business Logic''': ''INReceiptEntry''. The business logic controller that contains the code of the action that is represented by the '''Release''' button.
#:Thus, to rename the button, you have to change the {{DisplayName}} parameter of the {{PXUIField}} attribute for the {{Release}} action in the BLC extension for the ''INReceiptEntry'' class.
#Modify the attributes of the action, by doing the following:
##Select '''Actions''' > '''Customize Business Logic''' in the Element Properties dialog box
##In the '''Select Customization Project''' dialog, specify the project to which you want to add the customization item for the business logic controller of the form and click '''OK'''.
##:The Code Editor opens for customization of the business logic code of the form (see the screenshot below). The system generates the BLC extension class in which you can develop the customization code. (See [HelpRoot_Dev_Customization\CG_Platform_TO_Code_CS_GraphExtensions|Graph Extensions] for details.)[anchor|#image_bnh_h5m_kq][image:CustomizationPlatform/images/CustomizeAction2.png|popup|The BLC extension class generated for customization of the business logic code executed for the Receipts form|450px]
##Modify the {{DisplayName}} parameter of the {{PXUIField}} attribute for the {{Release}} action by redefining the action in the BLC extension class, to which the attributes are attached. Insert the code listed below into the {{INReceiptEntry_Extension}} class, as shown in the screenshot below. In the {{DisplayName}} parameter, you specify the new name for the button, ''&ldquo;Extended Release&ldquo;''.<source lang="csharp">
#region Customized Actions
  public PXAction&lt;INRegister&gt; release;
  [PXUIField(DisplayName = "Extended Release",
             MapEnableRights = PXCacheRights.Update,
             MapViewRights = PXCacheRights.Update)]
  [PXProcessButton]
  protected IEnumerable Release(PXAdapter adapter)
  {
    return Base.release.Press(adapter);
  }
#endregion
</source>
#:The redefined action delegate must have exactly the same signature—that is, the return value, the name of the method, and any method parameters—as the base action delegate has. You always have to redefine the action delegate to alter either its delegate or the attributes attached to the action. To use the action declared within the base BLC or a lower-level extension from the action delegate, you should redefine the generic {{PXAction<TNode>}} data member within the BLC extension, as shown in the code above. You do not need to redefine the data member when it is not meant to be used from the action delegate. For details, see [HelpRoot_Dev_Customization\CG_Platform_TO_Code_CS_GraphExtensions|Graph Extensions]. When you redefine an action delegate, you have to repeat the attributes attached to the action. Every action delegate must have <tt>PXButtonAttribute</tt> (or the derived attribute) and <tt>PXUIFieldAttribute</tt> attached.
#Click '''Save''' in Code Editor to save the changes.

The system adds the customization to the business logic code to the '''Code''' list of project items. See [HelpRoot_Dev_Customization\CG_GL_Items_Code|Code] for details.{br}

To view the result of the customization, publish the customization project and open the Receipts form. Verify that the button caption has changed to '''Extended Release'''. Click this button for a document with the ''Balanced'' status and verify that the release procedure works exactly as it worked before publication of the current customization project.]]></column>
			<column name="PlainText"><![CDATA[Modifying a BLC Action To modify the behavior of an action that is defined within a business logic controller         (BLC, also referred to as  graph ), you should override an action delegate. Suppose that you need to rename the  Release  button to            Extended Release  on the Receipts (IN301000) form, which is shown in         the following screenshot. Viewing the original Receipts form To do this, you have to find the business logic controller for the form and modify the         display name of the action that corresponds to the  Release  button as         follows: Find the business logic controller for the form, on the              Customization  menu, select  Inspect Element            and click the button caption on the form. The system should retrieve the following           information of the button, which appears in the  Element Properties            dialog box: Control Type :  DS Callback Command . The type of the UI               control. Business Logic :  INReceiptEntry . The business logic               controller that contains the code of the action that is represented by the                  Release  button. Thus, to rename the button, you have to change the  DisplayName              parameter of the  PXUIField  attribute for the  Release              action in the BLC extension for the  INReceiptEntry  class. Modify the attributes of the action, by doing the following: Select  Actions Customize Business Logic  in the Element Properties dialog box In the  Select Customization Project  dialog, specify the               project to which you want to add the customization item for the business logic               controller of the form and click  OK . The Code Editor opens                 for customization of the business logic code of the form (see the screenshot below).                 The system generates the BLC extension class in which you can develop the                 customization code. (See  Graph Extensions                 for details.) The BLC extension class generated for customization of the business logic                   code executed for the Receipts form Modify the  DisplayName  parameter of the  PXUIField                attribute for the  Release  action by redefining the action in the BLC               extension class, to which the attributes are attached. Insert the code listed below               into the  INReceiptEntry_Extension  class, as shown in the screenshot               below. In the  DisplayName  parameter, you specify the new name for the               button,  "Extended               Release" . 
#region Customized Actions
  public PXAction<INRegister> release;
  [PXUIField(DisplayName = "Extended Release",
             MapEnableRights = PXCacheRights.Update,
             MapViewRights = PXCacheRights.Update)]
  [PXProcessButton]
  protected IEnumerable Release(PXAdapter adapter)
  {
    return Base.release.Press(adapter);
  }
#endregion
 The redefined action delegate must have exactly the same signature—that is,             the return value, the name of the method, and any method parameters—as the base             action delegate has. You always have to redefine the action delegate to alter either its             delegate or the attributes attached to the action. To use the action declared within the             base BLC or a lower-level extension from the action delegate, you should redefine the             generic  PXAction<TNode>  data member within the BLC extension, as             shown in the code above. You do not need to redefine the data member when it is not             meant to be used from the action delegate. For details, see  Graph Extensions. When you redefine an action             delegate, you have to repeat the attributes attached to the action. Every action             delegate must have  PXButtonAttribute  (or the derived attribute) and                PXUIFieldAttribute  attached. Click  Save  in Code Editor to save the changes. The system adds the customization to the business logic code to the            Code  list of project items. See  Code for details. To view the result of the customization, publish the customization project and open the         Receipts form. Verify that the button caption has changed to  Extended           Release . Click this button for a document with the  Balanced  status and         verify that the release procedure works exactly as it worked before publication of the         current customization project. ]]></column>
		</row>
		<row PageID="7e9c3596-6a89-4580-b509-fe1b77556e5e" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="32a1d84c-f54a-e605-c328-e4133fb348ae" RecordSourceID="22377">
			<column name="Content"><![CDATA[
A ''data view'' is a <tt>PXSelect</tt> BQL expression declared in a business logic controller (BLC, also referred to as ''graph'') for accessing and manipulating data. A data view may contain a delegate that is used to extend data access. To modify the data view, you have to alter the appropriate <tt>PXSelect</tt> BQL expression.{br}

Suppose that you need to filter the rows on the '''Vendor Details''' tab of the Stock Items (IN202500) form. Open the original Stock Items form and create an item that has multiple vendor records on the '''Vendor Details''' tab, one or more of which has a '''Lot Size''' column value that equals 0.00, as the screenshot below illustrates.{br}

Your task is to modify the selection of records for the '''Vendor Details''' tab so that only the records that have a non-zero '''Lot Size''' value are retrieved to the tab. To resolve this customization task, you have to redeclare the data view that provides the data displayed on the tab.[anchor|#image_bll_1jn_kq][image:CustomizationPlatform/images/CustomizeDataView.png|popup|Viewing the original Stock Items form|450px]
The data for the '''Vendor Details''' tab is provided by the <tt>VendorItems</tt> data view that is defined in the <tt>InventoryItemMaint</tt> class—that is, the business logic controller for the Stock Items form. To resolve the customization task, you have to redefine the <tt>VendorItems</tt> data view in the BLC extension for the business logic controller of the form as follows:[anchor|#_dad1cc6b-3902-4ee3-8346-a460608ae9a4]
#Select the business logic controller for customization, on the '''Customization''' menu, select '''Inspect Element''' and click the '''Vendor Details''' tab. The system should retrieve the following information that appears in the '''Element Properties''' dialog box:
#*'''Business Logic''': ''InventoryItemMaint''. The business logic controller that provides the logic for the ''Stock Items'' form.
#Select '''Actions''' > '''Customize Business Logic''' in the '''Element Properties''' dialog box. 
#In the '''Select Customization Project''' dialog box, specify the project to which you want to add the customization item for the business logic controller of the form and click '''OK'''.
#:The Code Editor opens for customization of the business logic code of the form (see the screenshot below). The system generates the BLC extension class in which you can develop the customization code. (See [HelpRoot_Dev_Customization\CG_Platform_TO_Code_CS_GraphExtensions|Graph Extensions] for details.)[anchor|#image_pkw_fln_kq][image:CustomizationPlatform/images/CustomizeDataView2.png|popup|The BLC extension class generated for customization of the business logic code executed for the Stock Items form|450px]
#In the BLC extension class for <tt>InventoryItemMaint</tt>, redefine the {{VendorItems}} data view, as listed below.<source lang="csharp">public POVendorInventorySelect&lt;POVendorInventory, 
    LeftJoin&lt;InventoryItem, 
        On&lt;InventoryItem.inventoryID, Equal&lt;POVendorInventory.inventoryID&gt;&gt;, 
    LeftJoin&lt;Vendor, 
        On&lt;Vendor.bAccountID, Equal&lt;POVendorInventory.vendorID&gt;&gt;, 
    LeftJoin&lt;Location, 
        On&lt;Location.bAccountID, Equal&lt;POVendorInventory.vendorID&gt;, 
            And&lt;Location.locationID, Equal&lt;POVendorInventory.vendorLocationID&gt;&gt;&gt;&gt;&gt;&gt;, 
    Where&lt;POVendorInventory.inventoryID, Equal&lt;Current&lt;InventoryItem.inventoryID&gt;&gt;,
        And&lt;POVendorInventory.lotSize, Greater&lt;decimal0&gt;&gt;&gt;, InventoryItem&gt; VendorItems;</source>
#:To modify a data view, you have to redefine the data view in the BLC extension class. The data view redefined within a BLC extension completely replaces the base data view within the ''Views'' collection of a BLC instance, including all attributes attached to the data view declared within the base BLC. You can either attach the same set of attributes to the data view or completely redeclare the attributes. For details, see [HelpRoot_Dev_Customization\CG_Platform_TO_Code_CS_GraphExtensions|Graph Extensions]. The data view must have exactly the same identifier, {{VendorItems}}, which is referred in the UI control.
#Click '''Save''' in Code Editor to save the changes.

The system adds the customization to the business logic code to the '''Code''' list of project items. See [HelpRoot_Dev_Customization\CG_GL_Items_Code|Code] for details.{br}

To view the result of the customization, publish the customization project and open the Stock Items form. Verify that the records are filtered on the '''Vendor Details''' tab as required according to the customization task (only the records with non-zero '''Lot Size''' are retrieved).]]></column>
			<column name="PlainText"><![CDATA[Modifying a BLC Data View A  data view  is a  PXSelect  BQL expression declared in a business         logic controller (BLC, also referred to as  graph ) for accessing and manipulating         data. A data view may contain a delegate that is used to extend data access. To modify the         data view, you have to alter the appropriate  PXSelect  BQL expression. Suppose that you need to filter the rows on the  Vendor Details  tab         of the Stock Items (IN202500) form. Open the original Stock Items form and create an item         that has multiple vendor records on the  Vendor Details  tab, one or         more of which has a  Lot Size  column value that equals 0.00, as the         screenshot below illustrates. Your task is to modify the selection of records for the  Vendor           Details  tab so that only the records that have a non-zero  Lot           Size  value are retrieved to the tab. To resolve this customization task, you         have to redeclare the data view that provides the data displayed on the tab. Viewing the original Stock Items form The data for the  Vendor Details  tab is provided by the            VendorItems  data view that is defined in the            InventoryItemMaint  class—that is, the business logic controller for the         Stock Items form. To resolve the customization task, you have to redefine the            VendorItems  data view in the BLC extension for the business logic         controller of the form as follows: Select the business logic controller for customization, on the              Customization  menu, select  Inspect Element            and click the  Vendor Details  tab. The system should retrieve the           following information that appears in the  Element Properties  dialog             box: Business Logic :  InventoryItemMaint . The business logic               controller that provides the logic for the  Stock Items  form. Select  Actions Customize Business Logic  in the  Element Properties  dialog box.  In the  Select Customization Project  dialog box, specify the           project to which you want to add the customization item for the business logic controller           of the form and click  OK . The Code Editor opens for customization             of the business logic code of the form (see the screenshot below). The system generates             the BLC extension class in which you can develop the customization code. (See  Graph Extensions for details.) The BLC extension class generated for customization of the business logic code               executed for the Stock Items form In the BLC extension class for  InventoryItemMaint , redefine the              VendorItems  data view, as listed             below. public POVendorInventorySelect<POVendorInventory, 
    LeftJoin<InventoryItem, 
        On<InventoryItem.inventoryID, Equal<POVendorInventory.inventoryID>>, 
    LeftJoin<Vendor, 
        On<Vendor.bAccountID, Equal<POVendorInventory.vendorID>>, 
    LeftJoin<Location, 
        On<Location.bAccountID, Equal<POVendorInventory.vendorID>, 
            And<Location.locationID, Equal<POVendorInventory.vendorLocationID>>>>>>, 
    Where<POVendorInventory.inventoryID, Equal<Current<InventoryItem.inventoryID>>,
        And<POVendorInventory.lotSize, Greater<decimal0>>>, InventoryItem> VendorItems; To             modify a data view, you have to redefine the data view in the BLC extension class. The             data view redefined within a BLC extension completely replaces the base data view within             the  Views  collection of a BLC instance, including all attributes attached to the             data view declared within the base BLC. You can either attach the same set of attributes             to the data view or completely redeclare the attributes. For details, see  Graph Extensions. The data view must have exactly             the same identifier,  VendorItems , which is referred in the UI             control. Click  Save  in Code Editor to save the changes. The system adds the customization to the business logic code to the            Code  list of project items. See  Code for details. To view the result of the customization, publish the customization project and open the         Stock Items form. Verify that the records are filtered on the  Vendor           Details  tab as required according to the customization task (only the records         with non-zero  Lot Size  are retrieved). ]]></column>
		</row>
		<row PageID="06e2c0cd-cc6b-45c8-aa6f-2ca135ee9ca2" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="0c103743-667b-8f14-5c3c-b3f47097ec2e" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can modify the data view delegate—that is, the method that is invoked when the records are retrieved through the data view.((({S:Warn}For this example, you have to enable the ''Warehouses'' feature in the system to view the '''Warehouse Details''' tab on the Stock Items (IN202500) form.
)))
For the Stock Items form, suppose that you have to make the system display the default warehouse in the '''Default Receipt To''' column for those records for which this column is empty. Your customization task specifies that the default warehouse for such records is the '''Default Receipt To''' warehouse of the default record selected on the '''Warehouse Details''' tab.{br}

Open the Stock Items form and select the '''Warehouse Details''' tab to view the original tab, which is shown in the screenshot below.[anchor|#image_qqc_svn_kq][image:CustomizationPlatform/images/CustomizeDataViewMethod.png|popup|Viewing the original Stock Items form|450px]
To resolve this task, you have to modify the logic that retrieves the records to the '''Warehouse Details''' tab—that is, the modify the delegate of the data view that provides data for the tab. The data view that provides data for the tab is {{itemsiterecords}} that is defined in the business logic controller of the form. The business logic controller of the form is the <tt>InventoryItemMaint</tt> class. Do the following:[anchor|#_07ccf34e-1e72-4d9f-9206-bcdf9a51aa1d]
#Select the business logic controller for customization, on the '''Customization''' menu, select '''Inspect Element''' and click the '''Warehouse Details''' tab. The system should retrieve the following information that appears in the '''Element Properties''' dialog box:
#*'''Business Logic''': ''InventoryItemMaint''. The business logic controller that provides the logic for the ''Stock Items'' form.
#Select '''Actions''' > '''Customize Business Logic''' in the '''Element Properties''' dialog box. 
#In the '''Select Customization Project''' dialog box, specify the project to which you want to add the customization item for the business logic controller of the form and click '''OK'''.
#:The Code Editor opens for customization of the business logic code of the form (see the screenshot below). The system generates the BLC extension class in which you can develop the customization code. (See [HelpRoot_Dev_Customization\CG_Platform_TO_Code_CS_GraphExtensions|Graph Extensions] for details.)[anchor|#image_pkw_fln_kq][image:CustomizationPlatform/images/CustomizeDataView2.png|popup|The BLC extension class generated for customization of the business logic code executed for the Stock Items form|450px]
#:To resolve the customization task, you have to redefine the {{itemsiterecords}} data view and implement the needed logic in the {{itemSiteRecords()}} data view delegate.
#Add the code that is listed below to the BLC extension class for <tt>InventoryItemMaint</tt><source lang="csharp">#region Customized Data Views
  public PXSelectJoin&lt;INItemSite,
    InnerJoin&lt;INSite,
      On&lt;INSite.siteID, Equal&lt;INItemSite.siteID&gt;&gt;,
    LeftJoin&lt;INSiteStatusSummary,
      On&lt;INSiteStatusSummary.inventoryID, Equal&lt;INItemSite.inventoryID&gt;,
        And&lt;INSiteStatusSummary.siteID, Equal&lt;INItemSite.siteID&gt;&gt;&gt;&gt;&gt;&gt;
    itemsiterecords;

  protected IEnumerable itemSiteRecords()
  {
    int? dfltReceiptLocationID = null;
    foreach (var res in Base.itemsiterecords.Select())
    {
      INItemSite site = (INItemSite)res;
      if (site.DfltReceiptLocationID != null && site.IsDefault == true)
        dfltReceiptLocationID = site.DfltReceiptLocationID;
      else if (site.DfltReceiptLocationID == null && dfltReceiptLocationID != null)
        site.DfltReceiptLocationID = dfltReceiptLocationID;
      yield return res;
    }
  }
#endregion</source>
#:When you declare or alter a data view delegate within a BLC extension, the new delegate is attached to the corresponding data view. To query a data view declared within the base BLC or lower-level extension from the data view delegate, you should redeclare the data view within the BLC extension. You do not need to redeclare a generic {{PXSelect<Table>}} data member when it will not be used from the data view delegate. For details, see [HelpRoot_Dev_Customization\CG_Platform_TO_Code_CS_GraphExtensions|Graph Extensions].
#:The redeclared data view delegate must have exactly the same signature—the return value, the name of the method, and any method parameters— as the base data view delegate.
#Click '''Save''' in Code Editor to save the changes.
{br}

The system adds the customization to the business logic code to the '''Code''' list of project items. See [HelpRoot_Dev_Customization\CG_GL_Items_Code|Code] for details.{br}

To view the result of the customization, publish the customization project and open the Stock Items form. Verify that the default warehouse is displayed for all records as needed according to the customization task. The default warehouse is taken from the '''Default Receipt To''' warehouse of the record selected as ''Default'' in the table.]]></column>
			<column name="PlainText"><![CDATA[Declaring or Altering a BLC Data View Delegate You can modify the data view delegate—that is, the method that is invoked when the records         are retrieved through the data view. For this example, you have to enable the  Warehouses  feature in the system to view         the  Warehouse Details  tab on the Stock Items (IN202500) form. For the Stock Items form, suppose that you have to make the system display the default         warehouse in the  Default Receipt To  column for those records for         which this column is empty. Your customization task specifies that the default warehouse for         such records is the  Default Receipt To  warehouse of the default         record selected on the  Warehouse Details  tab. Open the Stock Items form and select the  Warehouse Details  tab to         view the original tab, which is shown in the screenshot below. Viewing the original Stock Items form To resolve this task, you have to modify the logic that retrieves the records to the            Warehouse Details  tab—that is, the modify the delegate of the data         view that provides data for the tab. The data view that provides data for the tab is            itemsiterecords  that is defined in the business logic controller of the         form. The business logic controller of the form is the  InventoryItemMaint          class. Do the following: Select the business logic controller for customization, on the                Customization  menu, select  Inspect               Element  and click the  Warehouse Details  tab. The             system should retrieve the following information that appears in the  Element               Properties  dialog box: Business Logic :  InventoryItemMaint . The business                 logic controller that provides the logic for the  Stock Items  form. Select  Actions Customize Business Logic  in the  Element Properties  dialog box.  In the  Select Customization Project  dialog box, specify the             project to which you want to add the customization item for the business logic             controller of the form and click  OK . The Code Editor opens for               customization of the business logic code of the form (see the screenshot below). The               system generates the BLC extension class in which you can develop the customization               code. (See  Graph Extensions for               details.) The BLC extension class generated for customization of the business logic code                 executed for the Stock Items form To resolve the customization task, you have to redefine the                  itemsiterecords  data view and implement the needed logic in the                  itemSiteRecords()  data view delegate. Add the code that is listed below to the BLC extension class for                InventoryItemMaint #region Customized Data Views
  public PXSelectJoin<INItemSite,
    InnerJoin<INSite,
      On<INSite.siteID, Equal<INItemSite.siteID>>,
    LeftJoin<INSiteStatusSummary,
      On<INSiteStatusSummary.inventoryID, Equal<INItemSite.inventoryID>,
        And<INSiteStatusSummary.siteID, Equal<INItemSite.siteID>>>>>>
    itemsiterecords;

  protected IEnumerable itemSiteRecords()
  {
    int? dfltReceiptLocationID = null;
    foreach (var res in Base.itemsiterecords.Select())
    {
      INItemSite site = (INItemSite)res;
      if (site.DfltReceiptLocationID != null && site.IsDefault == true)
        dfltReceiptLocationID = site.DfltReceiptLocationID;
      else if (site.DfltReceiptLocationID == null && dfltReceiptLocationID != null)
        site.DfltReceiptLocationID = dfltReceiptLocationID;
      yield return res;
    }
  }
#endregion When               you declare or alter a data view delegate within a BLC extension, the new delegate is               attached to the corresponding data view. To query a data view declared within the base               BLC or lower-level extension from the data view delegate, you should redeclare the               data view within the BLC extension. You do not need to redeclare a generic                  PXSelect<Table>  data member when it will not be used from the               data view delegate. For details, see  Graph Extensions. The redeclared data view               delegate must have exactly the same signature—the return value, the name of the               method, and any method parameters— as the base data view delegate. Click  Save  in Code Editor to save the changes. The system adds the customization to the business logic code to the            Code  list of project items. See  Code for details. To view the result of the customization, publish the customization project and open the         Stock Items form. Verify that the default warehouse is displayed for all records as needed         according to the customization task. The default warehouse is taken from the            Default Receipt To  warehouse of the record selected as            Default  in the table. ]]></column>
		</row>
		<row PageID="01fb63f2-6f2d-45ae-bf4d-d0660ea9a880" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="318ab27c-4997-d1f9-e9e9-cccaf1c150cf" RecordSourceID="22377">
			<column name="Content"><![CDATA[
During the initialization of a business logic controller (BLC, also referred to as ''graph''), you can retrieve additional preferences, change field settings, or configure the processing form. You can extend the BLC initialization by implementing the needed logic in a BLC extension. To extend the initialization process, you have to override the <tt>Initialize()</tt> method of the <tt>PXGraphExtension&lt;T&gt;</tt> class and do not use the constructor of the BLC extension class for that. During the BLC initialization, the system calls the <tt>Initialize()</tt> methods of all extension levels, from the lowest to the highest. See [HelpRoot_Dev_Customization\CG_Platform_TO_Code_CS_GraphExtensions|Graph Extensions] for details.{br}

In this example, you will create an extension of the <tt>InventoryItemMaintExtension</tt> BLC, which overrides the <tt>Initialize()</tt> method to change the display name of the <tt>InventoryItem</tt> data access class (DAC) field from ''Inventory ID'' to ''Inventory Item ID'' during the initialization of the base (original) BLC instance.{br}

If you open the Stock Items (IN202500) form, you can see its original view with the '''Inventory ID''' control (see the following screenshot) that corresponds to the <tt>InventoryItem</tt> DAC field.[anchor|#image_nxp_qht_kq][image:CustomizationPlatform/images/ExtBLCInit.png|popup|Viewing the original Stock Items form|450px]
To complete the example, do the following:[anchor|#_9d56a9a2-ce47-4ca4-9706-14563539a963]
#Select the business logic controller for customization, on the '''Customization''' menu, select '''Inspect Element''' and click the '''Inventory ID''' label. The system should retrieve the following information that appears in the '''Element Properties''' dialog box:
#*'''Business Logic''': ''InventoryItemMaint''. The business logic controller that provides the logic for the ''Stock Items'' form.
#Select '''Actions''' > '''Customize Business Logic''' in the '''Element Properties''' dialog box. 
#In the '''Select Customization Project''' dialog box, specify the project to which you want to add the customization item for the business logic controller of the form and click '''OK'''.
#:The Code Editor opens for customization of the business logic code of the form (see the screenshot below). The system generates the BLC extension class in which you can develop the customization code. (See [HelpRoot_Dev_Customization\CG_Platform_TO_Code_CS_GraphExtensions|Graph Extensions] for details.)[anchor|#image_pkw_fln_kq][image:CustomizationPlatform/images/CustomizeDataView2.png|popup|The BLC extension class generated for customization of the business logic code executed for the Stock Items form|450px]
#Override the <tt>Initialize()</tt> method; in the method, set the display name of the <tt>InventoryItem</tt> data access class (DAC) field to ''Inventory Item ID''. (For demonstrative purposes, the code also retrieves the <tt>INSetup</tt> data record and shows how you can implement the logic depending on values of the record.)
#:((({S:Warn}Do not define constructors of BLC extension classes; always use the <tt>Initialize()</tt> method to implement the needed initialization logic.
)))
#:Add the code that is listed below to the BLC extension class for <tt>InventoryItemMaint</tt>.<source lang="csharp">#region Extended initialization
public override void Initialize()
{
    PXUIFieldAttribute.SetDisplayName&lt;InventoryItem.inventoryCD&gt;(
        Base.Item.Cache,
        "Inventory Item ID"); 
    //retrieval of the setup record that stores preferences of the Inventory module       
    INSetup setup = Base.insetup.Current;
    if (setup.UpdateGL != true)
    {
        // Do some actions here
    }
}
#endregion</source>
#:In this method, you change the display name of the <tt>InventoryCD</tt> field of the <tt>InventoryItem</tt> DAC. You do this by calling the <tt>SetDisplayName()</tt> static method of <tt>PXUIFieldAttribute</tt>. Also, you obtain the <tt>INSetup</tt> DAC instance by using the <tt>Current</tt> property of the <tt>INSetup</tt> data view. In your customization tasks, you may need to perform some actions that depend on field values of this setup DAC instance.
#:You do not need to explicitly invoke the <tt>Initialize()</tt> method on the previous extension levels; these methods are called automatically. Invoking {{base.Initialize()}} makes no sense, because the <tt>base</tt> variable points to the base class, which is <tt>PXGraphExtension</tt> (not the base graph). The <tt>PXGraphExtension</tt> class defines <tt>Initialize()</tt> as an empty method.
#Click '''Save''' in Code Editor to save the changes.
{br}

The system adds the customization to the business logic code to the '''Code''' list of project items. See [HelpRoot_Dev_Customization\CG_GL_Items_Code|Code] for details.{br}

To view the result of the customization, publish the customization project and open the Stock Items form. Verify that the label has changed to '''Inventory Item ID'''.]]></column>
			<column name="PlainText"><![CDATA[Extending BLC Initialization During the initialization of a business logic controller (BLC, also referred to as            graph ), you can retrieve additional preferences, change field settings, or         configure the processing form. You can extend the BLC initialization by implementing the         needed logic in a BLC extension. To extend the initialization process, you have to override         the  Initialize()  method of the  PXGraphExtension<T>          class and do not use the constructor of the BLC extension class for that. During the BLC         initialization, the system calls the  Initialize()  methods of all         extension levels, from the lowest to the highest. See  Graph Extensions for details. In this example, you will create an extension of the            InventoryItemMaintExtension  BLC, which overrides the            Initialize()  method to change the display name of the            InventoryItem  data access class (DAC) field from  Inventory ID  to            Inventory Item ID  during the initialization of the base (original) BLC         instance. If you open the Stock Items (IN202500) form, you can see its original view with the            Inventory ID  control (see the following screenshot) that         corresponds to the  InventoryItem  DAC field. Viewing the original Stock Items form To complete the example, do the following: Select the business logic controller for customization, on the                Customization  menu, select  Inspect               Element  and click the  Inventory ID  label. The             system should retrieve the following information that appears in the  Element               Properties  dialog box: Business Logic :  InventoryItemMaint . The business                 logic controller that provides the logic for the  Stock Items  form. Select  Actions Customize Business Logic  in the  Element Properties  dialog box.  In the  Select Customization Project  dialog box, specify the             project to which you want to add the customization item for the business logic             controller of the form and click  OK . The Code Editor opens for               customization of the business logic code of the form (see the screenshot below). The               system generates the BLC extension class in which you can develop the customization               code. (See  Graph Extensions for               details.) The BLC extension class generated for customization of the business logic code                 executed for the Stock Items form Override the  Initialize()  method; in the method, set the display             name of the  InventoryItem  data access class (DAC) field to                Inventory Item ID . (For demonstrative purposes, the code also retrieves the                INSetup  data record and shows how you can implement the logic             depending on values of the record.) Do not define constructors of BLC extension               classes; always use the  Initialize()  method to implement the needed               initialization logic. Add the code that is listed below to the BLC extension               class for                InventoryItemMaint . #region Extended initialization
public override void Initialize()
{
    PXUIFieldAttribute.SetDisplayName<InventoryItem.inventoryCD>(
        Base.Item.Cache,
        "Inventory Item ID"); 
    //retrieval of the setup record that stores preferences of the Inventory module       
    INSetup setup = Base.insetup.Current;
    if (setup.UpdateGL != true)
    {
        // Do some actions here
    }
}
#endregion In               this method, you change the display name of the  InventoryCD  field               of the  InventoryItem  DAC. You do this by calling the                  SetDisplayName()  static method of                  PXUIFieldAttribute . Also, you obtain the                  INSetup  DAC instance by using the  Current                property of the  INSetup  data view. In your customization tasks, you               may need to perform some actions that depend on field values of this setup DAC               instance. You do not need to explicitly invoke the                  Initialize()  method on the previous extension levels; these               methods are called automatically. Invoking  base.Initialize()  makes no               sense, because the  base  variable points to the base class, which is                  PXGraphExtension  (not the base graph). The                  PXGraphExtension  class defines  Initialize()  as               an empty method. Click  Save  in Code Editor to save the changes. The system adds the customization to the business logic code to the            Code  list of project items. See  Code for details. To view the result of the customization, publish the customization project and open the         Stock Items form. Verify that the label has changed to  Inventory Item           ID . ]]></column>
		</row>
		<row PageID="61657507-0dec-408a-989a-b7ce3df31c82" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="a62c2efb-7af1-87f5-b46f-7caf5d4993b0" RecordSourceID="22377">
			<column name="Content"><![CDATA[
For most processing forms of Acumatica ERP, the processing method, the button captions that are displayed on the toolbar of the form are set up during the BLC initialization (''business logic controller'', also referred to as ''graph'')—that is, in the constructor of the BLC that provides the logic for the processing form, or in the {{RowSelected}} event handler of the main view data access class (DAC). To modify the logic that is executed during the BLC initialization, you have to create a BLC extension class and implement the needed logic in the <tt>Initialize()</tt> method overridden in the extension class; do not use the constructor for that.{br}

For example, to disable the '''Release All''' button and modify the functionality of the '''Release''' button of the Release IN Documents (IN501000) form, you create an extension on the <tt>INDocumentRelease</tt> BLC and override the {{Initialize()}} method as follows:[anchor|#_1edc6dd2-09c7-499b-8832-fd1e5000854d]
#Open the Release IN Documents form to see its original view (see the screenshot below). Notice that the '''Release''' and '''Release All''' buttons are both available for clicking.[anchor|#image_emy_pl5_kq][image:CustomizationPlatform/images/AlteringProcBLC.png|popup|Analyzing the original Release IN Documents form|450px]
#Select the business logic controller for customization, on the '''Customization''' menu, by clicking '''Inspect Element''' and selecting any element on the form, for example, the '''Release''' button. The system should retrieve the following information that appears in the '''Element Properties''' dialog box:
#*'''Business Logic''': ''INDocumentRelease''. The business logic controller that provides the logic for the ''Release IN Documents'' form.
#Select '''Actions''' > '''Customize Business Logic''' in the Element Inspector. In the '''Select Customization Project''' dialog box, specify the project to which you want to add the customization item for the business logic controller of the form and click '''OK'''.
#:The Code Editor opens for customization of the business logic code of the form (see the screenshot below). The system generates the BLC extension class in which you can develop the customization code. (See [HelpRoot_Dev_Customization\CG_Platform_TO_Code_CS_GraphExtensions|Graph Extensions] for details.)[anchor|#image_qp2_rm5_kq][image:CustomizationPlatform/images/AlteringProcBLC2.png|popup|The BLC extension class generated for customization of the business logic code executed for the Release IN Documents form|450px]
#Override the <tt>Initialize()</tt> method. In the method, disable the '''Release All''' button on the toolbar of the form, set the processing method, and set the method for asking the confirmation from the user before running the process.
#:((({S:Warn}Do not define constructors of BLC extension classes; always use the <tt>Initialize()</tt> method to implement the needed initialization logic.
)))
#:To the BLC extension class for {{INDocumentRelease}}, add the code that is listed below.<source lang="csharp">#region Extended initialization
public override void Initialize()
{
    // Disable the Process All button
    Base.INDocumentList.SetProcessAllEnabled(false);
    //If set by the SetParametersDelegate, the method is executed before the processing is run
    //and provides conditional processing depending on the confirmation from the user
    //If the method returns true, the system executes the processing method 
    //that is set by SetProcessDelegate
    Base.INDocumentList.SetParametersDelegate(delegate(List&lt;INRegister&gt; documents)
    {
        return Base.INDocumentList.Ask("IN Document Release",
                                       "Are you sure?",
                                       MessageButtons.YesNo) == WebDialogResult.Yes;
     });
     Base.INDocumentList.SetProcessDelegate(delegate(INRegister doc)
     {
         INDocumentRelease.ReleaseDoc(new List&lt;INRegister&gt;() { doc }, true);
     });
}
#endregion</source>
#:For another example of extending the BLC initialization, see [HelpRoot_Dev_Customization\HowACEInitializeBLC|Extending BLC Initialization].
#Click '''Save''' in Code Editor to save the changes.

The system adds the customization to the business logic code to the '''Code''' list of project items. See [HelpRoot_Dev_Customization\CG_GL_Items_Code|Code] for details.{br}

To view the result of the customization, publish the customization project and open the Release IN Documents form. Notice that the '''Release All''' button has become unavailable. Select a few check boxes for documents to be released and click '''Release'''. The dialog box appears with the question that you have added in the BLC code. Click '''Yes''' to release the documents or '''No''' to cancel the operation and exit the dialog box.]]></column>
			<column name="PlainText"><![CDATA[Altering the BLC of a Processing Form For most processing forms of  Acumatica ERP, the processing method, the button captions that are displayed on the toolbar of the form         are set up during the BLC initialization ( business logic controller , also referred to         as  graph )—that is, in the constructor of the BLC that provides the logic for the         processing form, or in the  RowSelected  event handler of the main view data         access class (DAC). To modify the logic that is executed during the BLC initialization, you         have to create a BLC extension class and implement the needed logic in the            Initialize()  method overridden in the extension class; do not use the         constructor for that. For example, to disable the  Release All  button and modify the         functionality of the  Release  button of the Release IN Documents         (IN501000) form, you create an extension on the  INDocumentRelease  BLC and         override the  Initialize()  method as follows: Open the Release IN Documents form to see its original view (see the screenshot below).           Notice that the  Release  and  Release All            buttons are both available for clicking. Analyzing the original Release IN Documents form Select the business logic controller for customization, on the              Customization  menu, by clicking  Inspect             Element  and selecting any element on the form, for example, the              Release  button. The system should retrieve the following           information that appears in the  Element Properties  dialog box: Business Logic :  INDocumentRelease . The business logic               controller that provides the logic for the  Release IN Documents  form. Select  Actions Customize Business Logic  in the Element Inspector. In the  Select Customization             Project  dialog box, specify the project to which you want to add the           customization item for the business logic controller of the form and click              OK . The Code Editor opens for customization of the business             logic code of the form (see the screenshot below). The system generates the BLC             extension class in which you can develop the customization code. (See  Graph Extensions for details.) The BLC extension class generated for customization of the business logic code               executed for the Release IN Documents form Override the  Initialize()  method. In the method, disable the              Release All  button on the toolbar of the form, set the processing           method, and set the method for asking the confirmation from the user before running the             process. Do not define constructors of BLC extension classes; always use the                Initialize()  method to implement the needed initialization             logic. To the BLC extension class for  INDocumentRelease , add             the code that is listed             below. #region Extended initialization
public override void Initialize()
{
    // Disable the Process All button
    Base.INDocumentList.SetProcessAllEnabled(false);
    //If set by the SetParametersDelegate, the method is executed before the processing is run
    //and provides conditional processing depending on the confirmation from the user
    //If the method returns true, the system executes the processing method 
    //that is set by SetProcessDelegate
    Base.INDocumentList.SetParametersDelegate(delegate(List<INRegister> documents)
    {
        return Base.INDocumentList.Ask("IN Document Release",
                                       "Are you sure?",
                                       MessageButtons.YesNo) == WebDialogResult.Yes;
     });
     Base.INDocumentList.SetProcessDelegate(delegate(INRegister doc)
     {
         INDocumentRelease.ReleaseDoc(new List<INRegister>() { doc }, true);
     });
}
#endregion For             another example of extending the BLC initialization, see  Extending BLC Initialization. Click  Save  in Code Editor to save the changes. The system adds the customization to the business logic code to the            Code  list of project items. See  Code for details. To view the result of the customization, publish the customization project and open the         Release IN Documents form. Notice that the  Release All  button has         become unavailable. Select a few check boxes for documents to be released and click            Release . The dialog box appears with the question that you have         added in the BLC code. Click  Yes  to release the documents or            No  to cancel the operation and exit the dialog box. ]]></column>
		</row>
		<row PageID="65fb547f-3c07-4495-b939-f37baa2d2d15" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="4c961e1e-8268-9025-9f17-9b76c726a70c" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The following examples of customization tasks demonstrate how you can implement custom handlers for events in extension classes to business logic controllers (BLCs, also referred to as ''graphs'').[anchor|#ul_ycy_rx5_kq]
*[[#section_fvt_gy5_kq|Implementing a Handler That is Appended to the Collection of Base Handlers]
*[[#section_xn4_3y5_kq|Implementing a Handler That Replaces the Collection of Base Handlers]
*[[#section_e1k_zt4_lq|Adding an Event Handler From the Screen Editor]
[anchor|#section_fvt_gy5_kq]
==Implementing a Handler That is Appended to the Collection of Base Handlers==
When you define an event handler in the BLC extension class with the same declaration, as it is defined in the base (original) BLC, this handler is added to the appropriate event handler collection. Depending on the event type, the event handler is appended to either the end of the collection or the start of it. When the event occurs, all event handlers in the collection are executed, from the first one to the last one. For details, see [HelpRoot_Dev_Customization\CG_Platform_TO_Code_CS_GraphExtensions_Event|Event Handlers].{br}

Suppose that you need to add validation of '''Local Tax Category''' on the '''General Settings''' tab of the Stock Items (IN202500) form. '''Local Tax Category''' that is shown in the screenshot below is a custom field that has been added to the form, as described in the example of [HelpRoot_Dev_Customization\HowACE_AddField|Adding Data Fields]. '''Local Tax Category''' is linked to the custom <tt>UsrLocalTaxCategoryID</tt> data field defined in the DAC extension for the {{InventoryItem}} data access class.{br}

Your task is to check whether the selected '''Local Tax Category''' is the same as the selected '''Tax Category''' of the item and add a warning message that appears for the '''Local Tax Category''' box if they are the same.[anchor|#image_zbr_kgl_jq][image:CustomizationPlatform/images/AddingFieldDACEditor7.png|popup|The control for the custom field on the Stock Items form|450px]
To resolve the task, you implement validation of fields on the <tt>RowUpdating</tt> event handler that you will add to the BLC extension for the Stock Items form. In this variant of implementation, the validation will occur when the user attempts to save the <tt>InventoryItem</tt> record. In the handler, you compare the <tt>TaxCategoryID</tt> and <tt>UsrLocalTaxCategoryID</tt> fields and return an error message that displays for the '''Local Tax Category''' box if the values are equal. Do the following:[anchor|#_7c3c5d22-2352-4eae-929c-0e47fd8c61b7]
#Select the business logic controller for customization by clicking '''Customization &gt; Inspect Element''' and clicking the '''Warehouse Details''' tab on the Stock Items form. The system should retrieve the following information that appears in the '''Element Properties''' dialog box:
#*'''Business Logic''': ''InventoryItemMaint''. The business logic controller that provides the logic for the Stock Items form.
#*:Select '''Actions''' > '''Customize Business Logic''' in the '''Element Properties''' dialog box. In the '''Select Customization Project''' dialog box, specify the project to which you want to add the customization item for the business logic controller of the form and click '''OK'''.
#*:The Code Editor opens for customization of the business logic code of the form (see the screenshot below). The system generates the BLC extension class in which you can develop the customization code. (See [HelpRoot_Dev_Customization\CG_Platform_TO_Code_CS_GraphExtensions|Graph Extensions] for details.)[anchor|#image_ih1_thk_lq][image:CustomizationPlatform/images/EventHandlersInitGraph.png|popup|The BLC extension class generated for customization of the business logic code executed for the Stock Items form|400px]
#Add the following code to the BLC extension class for <tt>InventoryItemMaint</tt>:<source lang="csharp">#region Event Handlers
protected void InventoryItem_RowUpdating(PXCache sender, PXRowUpdatingEventArgs e)
{
      InventoryItem row = e.NewRow as InventoryItem;
      InventoryItemExt rowExt = sender.GetExtension&lt;InventoryItemExt&gt;(row);
      if (row.TaxCategoryID != null && rowExt.UsrLocalTaxCategoryID != null &&
         row.TaxCategoryID == rowExt.UsrLocalTaxCategoryID)
      {
         sender.RaiseExceptionHandling&lt;InventoryItemExt.usrLocalTaxCategoryID&gt;(
             row,
             rowExt.UsrLocalTaxCategoryID,
             new PXSetPropertyException("Tax category and local tax category should differ",
                 PXErrorLevel.Warning));
      }
}
#endregion
</source>
#:The event handler checks whether the <tt>TaxCategoryID</tt> and <tt>UsrLocalTaxCategoryID</tt> field values are not null and do not equal each other. If these conditions are not satisfied, the handler issues the warning that will be shown on the '''Local Tax Category''' box in the UI, which corresponds to the <tt>UsrLocalTaxCategoryID</tt> field.
#:((({S:Warn}The field is accessed by its string name by using the {{GetValue()}} method on the cache. There is a number of ways how you can access customization objects from code. See [HelpRoot_Dev_Customization\CG_Platform_Framework_CS_DACExt_Access|Access to a Custom Field] for details.
)))
#Click '''Save''' in the Code Editor to save the changes.
#:The system adds the customization to the business logic code to the '''Code''' list of project items. See [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_CodeEditor|Code Editor] for details.

To view the result of the customization, publish the customization project and open the Stock Items form. To test the validation, select an item on the form, set the '''Local Tax Category''' the same as the '''Tax Category''' of the item and click '''Save'''. The warning message appears for the '''Local Tax Category''' box, as it was required by the task. To view the warning message, point the mouse to the warning icon, as shown on the screenshot below.[anchor|#image_ykp_45v_kq][image:CustomizationPlatform/images/EventHandlers2.png|popup|The warning message appears on saving attempt|450px][anchor|#section_xn4_3y5_kq]
==Implementing a Handler That Replaces the Collection of Base Handlers==
In a BLC extension, you can define an event handler so that the handler replaces the base BLC event handler collection. To do this, you declare the event handler with an additional parameter, as described below. When the event is raised, the system calls the event handler with an additional parameter of the highest-level BLC extension. The system passes the link to the event handler with an additional parameter from the extension of the previous level, if such an event handler exists, or to the first item in the event handler collection (also described in [HelpRoot_Dev_Customization\CG_Platform_TO_Code_CS_GraphExtensions_Event|Event Handlers]). In the event handler that replaces the collection of handlers of the base BLC, you can invoke the collection of base handlers as well as implement the logic to be executed before and after the base collection.{br}

Suppose that you need to resolve the same customization task, as described above—that is, you have to add validation of '''Local Tax Category''' on the '''General Settings''' tab of the Stock Items form. To resolve the task, you implement validation in the <tt>RowUpdating</tt> event handler that you define in the BLC extension for the {{InventoryItemMaint}} class.{br}

If you define the event handler, as listed below, the handler will replace the collection of handlers of the base BLC. The code of the replacing handler that is given below introduces the same behavior of the Stock Items form as the code of the event handler that is added to the collection, as described above in [[#section_fvt_gy5_kq|Adding a Handler to the Collection of Base Handlers]. In the handler below, you invoke the base handlers first and then validate the <tt>TaxCategoryID</tt> and <tt>UsrLocalTaxCategoryID</tt> fields and return an error message that displays for the '''Local Tax Category''' box if the validation fails.<source lang="csharp">#region Event Handlers
protected void InventoryItem_RowUpdating(
    PXCache cache, PXRowUpdatingEventArgs e, PXRowUpdating InvokeBaseHandler){
    //execute the collection of base handlers
    if(InvokeBaseHandler != null) InvokeBaseHandler(cache, e);
    //add the validation of Local Tax Category
    InventoryItem row = e.NewRow as InventoryItem;
    InventoryItemExt rowExt = cache.GetExtension&lt;InventoryItemExt&gt;(row);
    if (row.TaxCategoryID != null && rowExt.UsrLocalTaxCategoryID != null &&
        row.TaxCategoryID == rowExt.UsrLocalTaxCategoryID)
    {
        cache.RaiseExceptionHandling&lt;InventoryItemExt.usrLocalTaxCategoryID&gt;(
            row,
            rowExt.UsrLocalTaxCategoryID,
            new PXSetPropertyException("Tax category and local tax category should differ",
                PXErrorLevel.Warning));
    }
} 
#endregion
</source>((({S:Warn}Notice the three parameters within the event handler declaration. When the event is raised, the system calls the event handler, passing a link to the first item in the base BLC event handler collection. You execute {{InvokeBaseHandler()}} to invoke the collection of event handlers defined in the base BLC. Depending on a customization task, you can skip the execution of base handlers or implement the needed logic before the base handlers are invoked.
)))[anchor|#section_e1k_zt4_lq]
==Adding an Event Handler From the Screen Editor==
To add a custom handler for a row or field event to the customization project, you can use the Screen Editor, as described below.((({S:Warn}For this example, you have to enable the ''Lot and Serial Tracking'' feature in the system to view the '''Lot/Serial Class''' box on the '''General Settings''' tab of the ''Stock Items'' form.
)))
Suppose that on the Stock Items form you need to replace the warning message that appears on the '''Lot/Serial Class''' box for an incompatible class selected in the box (see the screenshot below) with an error message.[anchor|#image_n2p_vw4_lq][image:CustomizationPlatform/images/EventHandlerFromLayoutEditor.png|popup|The original warning message on the Stock Items form|350px]
To resolve the task, you have to modify the logic of validation of the DAC field that corresponds to the '''Lot/Serial Class''' box. You have to implement a custom handler for the {{FieldVerifying}} event on the DAC field. Do the following:[anchor|#_46f2f8c6-b72d-4b75-8b5a-a7ab6ee04279]
#Find the DAC field and add the event handler to the customization project for it, open the form in Screen Editor. To do this, on the '''Customization''' menu, select '''Inspect Element''' and click the label or the box area of the '''Lot/Serial Class''' control. The system should retrieve the following information that appears in the '''Element Properties''' dialog box:
#*'''Control Type''': ''Selector''. The type of the inspected UI control.
#*'''Data Class''': ''InventoryItem''. The data access class that contains the field corresponding to the inspected control.
#*'''Data Field''': ''LotSerClassID''. The data field that is linked to the inspected control.
#*'''Business Logic''': ''InventoryItemMaint''. The business logic controller that provides the logic for the Stock Items form.
#Click '''Customize''' in the Element Inspector. In the '''Select Customization Project''' dialog box, specify the project to which you want to add the customization item for the business logic controller of the form and click '''OK'''.
#:Screen Editor opens for the form already navigated to the inspected control, as the screenshot below shows.[anchor|#image_avd_wz4_lq][image:CustomizationPlatform/images/EventHandlerFromLayoutEditor2.png|popup|Screen Editor opened for the inspected element|450px]
#Add the {{FieldVerifying}} event handler for data field underlying the '''Lot/Serial Class''' control. To do this, first select the '''Events''' tab and find the {{FieldVerifying}} event in the grid. The selected check box in the '''Handled in Source''' column means that the {{FieldVerifying}} event is already handled for the {{LotSerClassID}} field in the original business logic controller, {{InventoryItemMaint}} class.
#:((({S:Warn}The '''Events''' tab displays the events depending on the control selected in the tree. The tab shows the field events f you select a control that is linked to a data field (that is, has the {{DataField}} property specified) and the row events of the parent container that is linked to a data view (that is, has the {{DataMember}} property specified). If you select a container that is not linked to a data view or data field, the tab shows no events.
)))
#:Add a custom handler for the {{LotSerClassID}} field to the customization project by clicking the '''FieldVerifying''' event in the table and then clicking '''Add Handler''' on the toolbar (see the screenshot below).[anchor|#image_s1n_3dp_lq][image:CustomizationPlatform/images/EventHandlerFromLayoutEditor4.png|popup|Adding an event handler to the customization project|350px]
#:The system generates the definition of the event handler, adds the definition to the BLC extension class for the form, and opens the Code Editor with the generated code as shown below. The system generates handlers with three input parameters; a handler with such definition replaces the collection of event handlers implemented in the original BLC, which is described in [[#section_xn4_3y5_kq|Implementing a Handler That Replaces the Collection of Base Handlers]. You can modify the generated code as needed.{{{{protected void InventoryItem_LotSerClassID_FieldVerifying(
  PXCache cache, 
  PXFieldVerifyingEventArgs e, 
  PXFieldVerifying InvokeBaseHandler)
{
  if(InvokeBaseHandler != null)
    InvokeBaseHandler(cache, e);
  var row = (InventoryItem)e.Row;
}
}}}}
#Modify the generated code, as listed below, and click '''Save''' in Code Editor to save the changes to the customization project. In the code, you catch the exception that could be thrown from the original handlers and create another exception with the error message instead of the original one.<source lang="csharp">protected void InventoryItem_LotSerClassID_FieldVerifying(
    PXCache cache, PXFieldVerifyingEventArgs e, PXFieldVerifying InvokeBaseHandler)
{
    try
    {
        if(InvokeBaseHandler != null) InvokeBaseHandler(cache, e);
    }
    catch (PXSetPropertyException ex)
    {
        cache.RaiseExceptionHandling&lt;InventoryItem.lotSerClassID&gt;(
            e.Row,
            e.NewValue,
            new PXSetPropertyException(
                ex.MessageNoPrefix, PXErrorLevel.Error));
    }  
}</source>
#Publish your customization project.

To view the result of the customization, publish the customization project and open the Stock Items form. To test the validation, select an incompatible class in the '''Lot/Serial Class''' box, as shown in the screenshot below. The error message appears for the box instead of a warning message.[anchor|#image_jqm_chp_lq][image:CustomizationPlatform/images/EventHandlerFromLayoutEditor6.png|popup|The error message that appears on selecting an incompatible class|350px]]]></column>
			<column name="PlainText"><![CDATA[Adding or Altering BLC Event Handlers The following examples of customization tasks demonstrate how you can implement custom     handlers for events in extension classes to business logic controllers (BLCs, also referred to     as  graphs ). Implementing a Handler That is Appended to the Collection of Base Handlers Implementing a Handler That is Appended to the Collection of Base HandlersImplementing a Handler That Replaces the Collection of Base Handlers Implementing a Handler That Replaces the Collection of Base HandlersAdding an Event Handler From the Screen Editor Adding an Event Handler From the Screen EditorImplementing a Handler That is Appended to the Collection of Base Handlers When you define an event handler in the BLC extension class with the same declaration, as         it is defined in the base (original) BLC, this handler is added to the appropriate event         handler collection. Depending on the event type, the event handler is appended to either the         end of the collection or the start of it. When the event occurs, all event handlers in the         collection are executed, from the first one to the last one. For details, see  Event Handlers. Suppose that you need to add validation of  Local Tax Category  on the            General Settings  tab of the Stock Items (IN202500) form.            Local Tax Category  that is shown in the screenshot below is a         custom field that has been added to the form, as described in the example of  Adding Data Fields.  Local Tax Category  is linked to the         custom  UsrLocalTaxCategoryID  data field defined in the DAC extension for         the  InventoryItem  data access class. Your task is to check whether the selected  Local Tax Category  is the         same as the selected  Tax Category  of the item and add a warning         message that appears for the  Local Tax Category  box if they are the         same. The control for the custom field on the Stock Items form To resolve the task, you implement validation of fields on the            RowUpdating  event handler that you will add to the BLC extension for         the Stock Items form. In this variant of implementation, the validation will occur when the         user attempts to save the  InventoryItem  record. In the handler, you         compare the  TaxCategoryID  and  UsrLocalTaxCategoryID          fields and return an error message that displays for the  Local Tax           Category  box if the values are equal. Do the following: Select the business logic controller for customization by clicking  Customization > Inspect Element  and clicking the  Warehouse Details  tab on the Stock           Items form. The system should retrieve the following information that appears in the              Element Properties  dialog box: Business Logic :  InventoryItemMaint . The business logic               controller that provides the logic for the Stock Items form. Select  Actions Customize Business Logic  in the  Element Properties  dialog box. In the                    Select Customization Project  dialog box, specify the                 project to which you want to add the customization item for the business logic                 controller of the form and click  OK . The Code Editor                 opens for customization of the business logic code of the form (see the screenshot                 below). The system generates the BLC extension class in which you can develop the                 customization code. (See  Graph Extensions                 for details.) The BLC extension class generated for customization of the business logic                   code executed for the Stock Items form Add the following code to the BLC extension class for              InventoryItemMaint : #region Event Handlers
protected void InventoryItem_RowUpdating(PXCache sender, PXRowUpdatingEventArgs e)
{
      InventoryItem row = e.NewRow as InventoryItem;
      InventoryItemExt rowExt = sender.GetExtension<InventoryItemExt>(row);
      if (row.TaxCategoryID != null && rowExt.UsrLocalTaxCategoryID != null &&
         row.TaxCategoryID == rowExt.UsrLocalTaxCategoryID)
      {
         sender.RaiseExceptionHandling<InventoryItemExt.usrLocalTaxCategoryID>(
             row,
             rowExt.UsrLocalTaxCategoryID,
             new PXSetPropertyException("Tax category and local tax category should differ",
                 PXErrorLevel.Warning));
      }
}
#endregion
 The             event handler checks whether the  TaxCategoryID  and                UsrLocalTaxCategoryID  field values are not null and do not equal             each other. If these conditions are not satisfied, the handler issues the warning that             will be shown on the  Local Tax Category  box in the UI, which             corresponds to the  UsrLocalTaxCategoryID  field. The field is             accessed by its string name by using the  GetValue()  method on the             cache. There is a number of ways how you can access customization objects from code. See                Access to a Custom Field for details. Click  Save  in the Code Editor to save the changes. The system             adds the customization to the business logic code to the  Code              list of project items. See  Code Editor for             details. To view the result of the customization, publish the customization project and open the         Stock Items form. To test the validation, select an item on the form, set the            Local Tax Category  the same as the  Tax           Category  of the item and click  Save . The warning         message appears for the  Local Tax Category  box, as it was required by         the task. To view the warning message, point the mouse to the warning icon, as shown on the         screenshot below. The warning message appears on saving attempt Implementing a Handler That Replaces the Collection of Base Handlers In a BLC extension, you can define an event handler so that the handler replaces the base         BLC event handler collection. To do this, you declare the event handler with an additional         parameter, as described below. When the event is raised, the system calls the event handler         with an additional parameter of the highest-level BLC extension. The system passes the link         to the event handler with an additional parameter from the extension of the previous level,         if such an event handler exists, or to the first item in the event handler collection (also         described in  Event Handlers). In the event         handler that replaces the collection of handlers of the base BLC, you can invoke the         collection of base handlers as well as implement the logic to be executed before and after         the base collection. Suppose that you need to resolve the same customization task, as described above—that is,         you have to add validation of  Local Tax Category  on the            General Settings  tab of the Stock Items form. To resolve the task,         you implement validation in the  RowUpdating  event handler that you define         in the BLC extension for the  InventoryItemMaint  class. If you define the event handler, as listed below, the handler will replace the collection         of handlers of the base BLC. The code of the replacing handler that is given below         introduces the same behavior of the Stock Items form as the code of the event handler that         is added to the collection, as described above in  Adding a           Handler to the Collection of Base Handlers Adding a Handler to the Collection of Base Handlers. In the handler below, you invoke the         base handlers first and then validate the  TaxCategoryID  and            UsrLocalTaxCategoryID  fields and return an error message that displays         for the  Local Tax Category  box if the validation fails. #region Event Handlers
protected void InventoryItem_RowUpdating(
    PXCache cache, PXRowUpdatingEventArgs e, PXRowUpdating InvokeBaseHandler){
    //execute the collection of base handlers
    if(InvokeBaseHandler != null) InvokeBaseHandler(cache, e);
    //add the validation of Local Tax Category
    InventoryItem row = e.NewRow as InventoryItem;
    InventoryItemExt rowExt = cache.GetExtension<InventoryItemExt>(row);
    if (row.TaxCategoryID != null && rowExt.UsrLocalTaxCategoryID != null &&
        row.TaxCategoryID == rowExt.UsrLocalTaxCategoryID)
    {
        cache.RaiseExceptionHandling<InventoryItemExt.usrLocalTaxCategoryID>(
            row,
            rowExt.UsrLocalTaxCategoryID,
            new PXSetPropertyException("Tax category and local tax category should differ",
                PXErrorLevel.Warning));
    }
} 
#endregion
 Notice the three parameters within the event handler declaration. When the event is         raised, the system calls the event handler, passing a link to the first item in the base BLC         event handler collection. You execute  InvokeBaseHandler()  to invoke the         collection of event handlers defined in the base BLC. Depending on a customization task, you         can skip the execution of base handlers or implement the needed logic before the base         handlers are invoked. Adding an Event Handler From the Screen Editor To add a custom handler for a row or field event to the customization project, you can use         the Screen Editor, as described below. For this example, you have to enable the  Lot and Serial Tracking  feature in the         system to view the  Lot/Serial Class  box on the  General           Settings  tab of the  Stock Items  form. Suppose that on the Stock Items form you need to replace the warning message that appears         on the  Lot/Serial Class  box for an incompatible class selected in the         box (see the screenshot below) with an error message. The original warning message on the Stock Items form To resolve the task, you have to modify the logic of validation of the DAC field that         corresponds to the  Lot/Serial Class  box. You have to implement a         custom handler for the  FieldVerifying  event on the DAC field. Do the         following: Find the DAC field and add the event handler to the customization project for it, open           the form in Screen Editor. To do this, on the  Customization  menu,           select  Inspect Element  and click the label or the box area of the              Lot/Serial Class  control. The system should retrieve the           following information that appears in the  Element Properties  dialog             box: Control Type :  Selector . The type of the inspected UI               control. Data Class :  InventoryItem . The data access class that               contains the field corresponding to the inspected control. Data Field :  LotSerClassID . The data field that is               linked to the inspected control. Business Logic :  InventoryItemMaint . The business logic               controller that provides the logic for the Stock Items form. Click  Customize  in the Element Inspector. In the              Select Customization Project  dialog box, specify the project to           which you want to add the customization item for the business logic controller of the form           and click  OK . Screen Editor opens for the form already navigated             to the inspected control, as the screenshot below shows. Screen Editor opened for the inspected element Add the  FieldVerifying  event handler for data field underlying the              Lot/Serial Class  control. To do this, first select the              Events  tab and find the  FieldVerifying  event in           the grid. The selected check box in the  Handled in Source  column           means that the  FieldVerifying  event is already handled for the              LotSerClassID  field in the original business logic controller,              InventoryItemMaint  class. The  Events  tab             displays the events depending on the control selected in the tree. The tab shows the             field events f you select a control that is linked to a data field (that is, has the                DataField  property specified) and the row events of the parent             container that is linked to a data view (that is, has the  DataMember              property specified). If you select a container that is not linked to a data view or data             field, the tab shows no events. Add a custom handler for the                LotSerClassID  field to the customization project by clicking the                FieldVerifying  event in the table and then clicking                Add Handler  on the toolbar (see the screenshot below). Adding an event handler to the customization project The system generates the definition of the event handler, adds the definition to             the BLC extension class for the form, and opens the Code Editor with the generated code             as shown below. The system generates handlers with three input parameters; a handler             with such definition replaces the collection of event handlers implemented in the             original BLC, which is described in  Implementing a Handler That Replaces the Collection of Base Handlers Implementing a Handler That Replaces the Collection of Base Handlers. You can             modify the generated code as           needed. protected void InventoryItem_LotSerClassID_FieldVerifying(
  PXCache cache, 
  PXFieldVerifyingEventArgs e, 
  PXFieldVerifying InvokeBaseHandler)
{
  if(InvokeBaseHandler != null)
    InvokeBaseHandler(cache, e);
  var row = (InventoryItem)e.Row;
} Modify the generated code, as listed below, and click  Save  in           Code Editor to save the changes to the customization project. In the code, you catch the           exception that could be thrown from the original handlers and create another exception           with the error message instead of the original           one. protected void InventoryItem_LotSerClassID_FieldVerifying(
    PXCache cache, PXFieldVerifyingEventArgs e, PXFieldVerifying InvokeBaseHandler)
{
    try
    {
        if(InvokeBaseHandler != null) InvokeBaseHandler(cache, e);
    }
    catch (PXSetPropertyException ex)
    {
        cache.RaiseExceptionHandling<InventoryItem.lotSerClassID>(
            e.Row,
            e.NewValue,
            new PXSetPropertyException(
                ex.MessageNoPrefix, PXErrorLevel.Error));
    }  
} Publish your customization project. To view the result of the customization, publish the customization project and open the         Stock Items form. To test the validation, select an incompatible class in the            Lot/Serial Class  box, as shown in the screenshot below. The error         message appears for the box instead of a warning message. The error message that appears on selecting an incompatible class ]]></column>
		</row>
		<row PageID="b2fc44a4-56a5-40ea-b9f3-23ec03765567" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="34aec546-8e70-6a69-012a-bc1c545d70df" RecordSourceID="22377">
			<column name="Content"><![CDATA[
In a BLC extension, you can override virtual methods defined within a business logic controller (BLC, also referred to as ''graph''). As with the event handlers, you have two options:[anchor|#ul_xkx_vpp_xk]
*You can define the override method with exactly the same signature—that is, the return value, the name of the method, and all method parameters—as the overridden base virtual method. As a result, the method is added to the queue of all override methods. When the system invokes the base method, all methods in the queue are executed sequentially, from the first to the last one. The lower the level the BLC extension has, the earlier the system invokes the override method.
*You can define the override method with an additional parameter, which represents the delegate for one of the following:
**The override method with an additional parameter from the extension of the previous level, if such a method exists.
**The base virtual method, if no override methods with additional parameters declared within lower-level extensions exist.

In both cases, you should attach the <tt>PXOverrideAttribute</tt> to the override method declared within the BLC extension. See the topics below for details.[anchor|#ul_qdl_3sp_lq]
*[[#section_gyv_rrp_lq|Override Method That is Added to the Override Method Queue]
*[[#section_d44_srp_lq|Override Method That Replaces the Original Method]
[anchor|#section_gyv_rrp_lq]
==Override Method That is Added to the Override Method Queue==
By declaring an override method with exactly the same signature as the overridden base virtual method, you extend the base method execution. The base BLC method is replaced at run time with the queue of methods that starts with the base BLC method. When the system invokes the base method, all methods in the queue are executed sequentially, from the first to the last one. The lower the level the BLC extension has, the earlier the system invokes the override method. If the system has invoked the base method, you have no option to prevent the override method queue from execution. To prevent the base method executions, see [[#section_d44_srp_lq|Override Method That Replaces the Original Method] below.{br}

Suppose that you need to modify the behavior of the Journal Transactions (GL301000) form.{br}

Open ''Journal Transactions'' and explore its original behavior. Start by adding a new journal transaction, selecting an account, and setting the '''Debit Amount''' to ''2000.00''. Then add one more journal transaction and select a different account, and notice that the '''Credit Amount''' is set by default to 2000.00 to balance the batch, as the following screenshot illustrates.[anchor|#image_o2z_b1q_lq][image:CustomizationPlatform/images/OverrideVirtualMethodBLC.png|popup|The Credit Amount by default is set to balance the batch|450px]
Suppose that you need this form to work differently, so that if the user first inserts a debit entry, by default each '''Credit Amount''' value equals 0.00, to make the user add the required values manually. If the user first inserts a credit entry, a '''Debit Amount''' value should also equal 0.00 by default, so that the user must add the needed values. You can implement this behavior in the <tt>PopulateSubDescr</tt> method that you have to override in a BLC extension for the {{JournalEntry}} class.{br}

To select the business logic controller for customization, on the '''Customization''' menu, select '''Inspect Element''' and click any element on the form, for example, the form area. The system should retrieve the following information that appears in the '''Element Properties''' dialog box:[anchor|#ul_dnl_cqm_kq]
*'''Business Logic''': ''JournalEntry''. The business logic controller that provides the logic for the ''Journal Transactions'' form.

Select '''Actions''' > '''Customize Business Logic''' in the Element Inspector. In the '''Select Customization Project''' dialog box, specify the project to which you want to add the customization item for the business logic controller of the form and click '''OK'''.{br}

The Code Editor opens for customization of the business logic code of the form (see the screenshot below). The system generates the BLC extension class in which you can develop the customization code. (See [HelpRoot_Dev_Customization\CG_Platform_TO_Code_CS_GraphExtensions|Graph Extensions] for details.)[anchor|#image_xbk_x1q_lq][image:CustomizationPlatform/images/OverrideVirtualMethodBLC2.png|popup|The BLC extension class generated for customization of the business logic code executed for the Journal Transactions form|350px]
To the BLC extension class for <tt>JournalEntry</tt>, add the code that is listed below.<source lang="csharp">[PXOverride]
public void PopulateSubDescr(PXCache sender, GLTran row, bool externalCall)
{
    decimal difference = (Base.BatchModule.Current.CuryCreditTotal ?? decimal.Zero) - 
        (Base.BatchModule.Current.CuryDebitTotal ?? decimal.Zero);
    if (difference != 0)
    {
        if (row.CuryCreditAmt == Math.Abs(difference))
        {
            row.CuryCreditAmt = 0;
        }
        else if (row.CuryDebitAmt == Math.Abs(difference))
        {
            row.CuryDebitAmt = 0;
        }
    }
}</source>
In the code, you override the {{PopulateSubDescr}} method of the original BLC by adding the new method to the queue of override methods to be executed. The system invokes the base method first, and then executes the override method. The override method resets the value of the '''Credit Amount ''' or the '''Debit Amount''' to 0.00.{br}

Click '''Save''' in Code Editor to save the changes.[anchor|#image_stc_dcq_lq][image:CustomizationPlatform/images/OverrideVirtualMethodBLC3.png|popup|The override method implemented in the BLC extension class|350px]
To view the result of the customization, publish the customization project and open the Journal Transactions (GL301000) form.{br}

Test the modified behavior of ''Journal Transactions''. Add a new journal transaction, select an account, and set the '''Debit Amount''' to ''2000.00''. Then add one more journal transaction and select a different account, and notice that the '''Credit Amount''' is set by default to 0.00. You must manually specify the amount for every journal entry to make the batch balanced. Otherwise, you will not be able to save the batch with the Balanced status, and you will see the appropriate error message on the '''Debit Total''' box.((({S:Warn}You should also test the case when the user first adds a transaction with a '''Credit Amount''': Then the '''Debit Amount''' must equal 0.00 by default.
)))[anchor|#image_rxx_kdq_lq][image:CustomizationPlatform/images/OverrideVirtualMethodBLC4.png|popup|Viewing the result of the customization|350px][anchor|#section_d44_srp_lq]
==Override Method That Replaces the Original Method==
The override method with an additional parameter replaces the base BLC virtual method. When the virtual method is invoked, the system invokes the override method with an additional parameter of the highest-level BLC extension. The system passes a link to the override method with an additional parameter from the extension of the previous level, if such a method exists, or to the base virtual method.{br}

You use a delegate as an additional parameter to encapsulate the method with exactly the same signature as the base virtual method. If the base virtual method contains a <tt>params</tt> parameter, then you should not use the <tt>params</tt> keyword when you declare the override method with an addition parameter. For example, to declare an <tt>ExecuteInsert</tt> override method with an additional parameter within a BLC extension, you can use the following code.{{{{public class BaseBLCExt : PXGraphExtension&lt;BaseBLC&gt;
{
    [PXOverride]
    public int ExecuteInsert(string viewName, IDictionary values, object[] parameters,
                             Func&lt;int, string, IDictionary, object[]&gt; del)
    {
        if (del != null)
        {
            del(viewName, values, parameters)
        }
    }
}
}}}}{br}

You can decide whether to call the method pointed to by the delegate. By invoking the base method, you also start the override method queue execution.{br}

Suppose that you need to modify the logic of generating batches on release of Accounts Receivable documents.{br}

For example, open the Invoices and Memos (AR301000) form and explore its original behavior. Create and save an invoice, clear the '''Hold''' check box, click the '''Release''' button, and notice that a new GL batch has been generated by the system while the system releases the invoice. You can see the batch number on the '''Financial Details''' tab of the ''Invoices and Memos'' form, as the following screenshot shows.[anchor|#image_ocl_vhq_lq][image:CustomizationPlatform/images/OverrideVirtualMethodBLC5.png|popup|The batch has been generated during release of the Accounts Receivable invoice|450px]
Suppose that you need to prevent generation of batches during release of Accounts Receivable documents. You can implement the new behavior in the {{Persist}} method that you have to override in a BLC extension for the <tt>JournalEntry</tt> class. In the override method, you need to handle execution of the {{Persist}} method of the original BLC. Therefore, you have to implement the override method with an additional parameter, as described below.{br}

To the BLC extension class for <tt>JournalEntry</tt>, add the code that is listed below. For example, you can add the override method to the {{JournalEntry_Extension}} BLC extension class generated by the system, as described above in [[#section_gyv_rrp_lq|Override Method That is Added to the Override Method Queue].<source lang="csharp">[PXOverride]
public void Persist(Action del)
{
    if (Base.BatchModule.Current != null &&
        Base.BatchModule.Cache.GetStatus(Base.BatchModule.Current) == PXEntryStatus.Inserted &&
        Base.BatchModule.Current.Module == "AR")
        return;
    if (del != null) 
        del();
}
</source>
The code modifies the logic so that the system will not invoke the base virtual method if the batch is being generated from the Accounts Receivable module; otherwise, the system executes the base business logic.{br}

To view the result of the customization, publish the customization project and open the Invoices and Memos form.{br}

To test the modified behavior of the Invoices and Memos form, add and save a new invoice, clear the '''Hold''' check box, and click the '''Release''' button. Notice that no new GL batch is generated by the system while it releases the invoice. Open the '''Financial Details''' tab. No batch number is displayed, as the following screenshot illustrates.[anchor|#image_wkt_jqq_lq][image:CustomizationPlatform/images/OverrideVirtualMethodBLC6.png|popup|No batch has been generated by the system for the Accounts Receivable Invoice|350px]]]></column>
			<column name="PlainText"><![CDATA[Altering BLC Virtual Methods In a BLC extension, you can override virtual methods defined within a business logic                 controller (BLC, also referred to as  graph ). As with the event handlers, you                 have two options: You can define the override method with exactly the same signature—that                     is, the return value, the name of the method, and all method parameters—as                     the overridden base virtual method. As a result, the method is added to the                     queue of all override methods. When the system invokes the base method, all                     methods in the queue are executed sequentially, from the first to the last one.                     The lower the level the BLC extension has, the earlier the system invokes the                     override method. You can define the override method with an additional parameter, which                     represents the delegate for one of the following: The override method with an additional parameter from the extension of                             the previous level, if such a method exists. The base virtual method, if no override methods with additional                             parameters declared within lower-level extensions exist. In both cases, you should attach the  PXOverrideAttribute  to the override                 method declared within the BLC extension. See the topics below for details. Override Method That is Added to the Override Method                         Queue Override Method That is Added to the Override Method QueueOverride Method That Replaces the Original Method Override Method That Replaces the Original MethodOverride Method That is Added to the Override Method Queue By declaring an override method with exactly the same signature as the overridden                 base virtual method, you extend the base method execution. The base BLC method is                 replaced at run time with the queue of methods that starts with the base BLC method.                 When the system invokes the base method, all methods in the queue are executed                 sequentially, from the first to the last one. The lower the level the BLC extension                 has, the earlier the system invokes the override method. If the system has invoked                 the base method, you have no option to prevent the override method queue from                 execution. To prevent the base method executions, see  Override Method That Replaces the Original Method Override Method That Replaces the Original Method below. Suppose that you need to modify the behavior of the Journal Transactions (GL301000)                 form. Open  Journal Transactions  and explore its original behavior. Start by adding a                 new journal transaction, selecting an account, and setting the  Debit                     Amount  to  2000.00 . Then add one more journal transaction and                 select a different account, and notice that the  Credit Amount                  is set by default to 2000.00 to balance the batch, as the following screenshot                 illustrates. The Credit Amount by default is set to balance the batch Suppose that you need this form to work differently, so that if the user first                 inserts a debit entry, by default each  Credit Amount  value                 equals 0.00, to make the user add the required values manually. If the user first                 inserts a credit entry, a  Debit Amount  value should also                 equal 0.00 by default, so that the user must add the needed values. You can                 implement this behavior in the  PopulateSubDescr  method that you                 have to override in a BLC extension for the  JournalEntry  class. To select the business logic controller for customization, on the                      Customization  menu, select  Inspect                     Element  and click any element on the form, for example, the form                 area. The system should retrieve the following information that appears in the                      Element Properties  dialog box: Business Logic :  JournalEntry . The business logic                     controller that provides the logic for the  Journal Transactions                      form. Select  Actions Customize Business Logic  in the Element Inspector. In the  Select Customization                     Project  dialog box, specify the project to which you want to add the                 customization item for the business logic controller of the form and click                      OK . The Code Editor opens for customization of the business logic code of the form (see                 the screenshot below). The system generates the BLC extension class in which you can                 develop the customization code. (See  Graph Extensions for details.) The BLC extension class generated for customization of the business logic                     code executed for the Journal Transactions form To the BLC extension class for  JournalEntry , add the code that is                 listed below. [PXOverride]
public void PopulateSubDescr(PXCache sender, GLTran row, bool externalCall)
{
    decimal difference = (Base.BatchModule.Current.CuryCreditTotal ?? decimal.Zero) - 
        (Base.BatchModule.Current.CuryDebitTotal ?? decimal.Zero);
    if (difference != 0)
    {
        if (row.CuryCreditAmt == Math.Abs(difference))
        {
            row.CuryCreditAmt = 0;
        }
        else if (row.CuryDebitAmt == Math.Abs(difference))
        {
            row.CuryDebitAmt = 0;
        }
    }
} In the code, you override the  PopulateSubDescr  method of the                 original BLC by adding the new method to the queue of override methods to be                 executed. The system invokes the base method first, and then executes the override                 method. The override method resets the value of the  Credit Amount                   or the  Debit Amount  to 0.00. Click  Save  in Code Editor to save the changes. The override method implemented in the BLC extension class To view the result of the customization, publish the customization project and open                 the Journal Transactions (GL301000) form. Test the modified behavior of  Journal Transactions . Add a new journal                 transaction, select an account, and set the  Debit Amount  to                      2000.00 . Then add one more journal transaction and select a different                 account, and notice that the  Credit Amount  is set by default                 to 0.00. You must manually specify the amount for every journal entry to make the                 batch balanced. Otherwise, you will not be able to save the batch with the Balanced                 status, and you will see the appropriate error message on the  Debit                     Total  box. You should also test the case when the user first adds a transaction with a                      Credit Amount : Then the  Debit                     Amount  must equal 0.00 by default. Viewing the result of the customization Override Method That Replaces the Original Method The override method with an additional parameter replaces the base BLC virtual                 method. When the virtual method is invoked, the system invokes the override method                 with an additional parameter of the highest-level BLC extension. The system passes a                 link to the override method with an additional parameter from the extension of the                 previous level, if such a method exists, or to the base virtual method. You use a delegate as an additional parameter to encapsulate the method with exactly                 the same signature as the base virtual method. If the base virtual method contains a                      params  parameter, then you should not use the                      params  keyword when you declare the override method with an                 addition parameter. For example, to declare an  ExecuteInsert                  override method with an additional parameter within a BLC extension, you can use the                 following                 code. public class BaseBLCExt : PXGraphExtension<BaseBLC>
{
    [PXOverride]
    public int ExecuteInsert(string viewName, IDictionary values, object[] parameters,
                             Func<int, string, IDictionary, object[]> del)
    {
        if (del != null)
        {
            del(viewName, values, parameters)
        }
    }
} You can decide whether to call the method pointed to by the delegate. By invoking the                 base method, you also start the override method queue execution. Suppose that you need to modify the logic of generating batches on release of                 Accounts Receivable documents. For example, open the Invoices and Memos (AR301000) form and explore its original                 behavior. Create and save an invoice, clear the  Hold  check                 box, click the  Release  button, and notice that a new GL batch                 has been generated by the system while the system releases the invoice. You can see                 the batch number on the  Financial Details  tab of the                      Invoices and Memos  form, as the following screenshot shows. The batch has been generated during release of the Accounts Receivable                     invoice Suppose that you need to prevent generation of batches during release of Accounts                 Receivable documents. You can implement the new behavior in the                      Persist  method that you have to override in a BLC extension for                 the  JournalEntry  class. In the override method, you need to                 handle execution of the  Persist  method of the original BLC.                 Therefore, you have to implement the override method with an additional parameter,                 as described below. To the BLC extension class for  JournalEntry , add the code that is                 listed below. For example, you can add the override method to the                      JournalEntry_Extension  BLC extension class generated by the                 system, as described above in  Override Method That is Added to the Override Method Queue Override Method That is Added to the Override Method Queue. [PXOverride]
public void Persist(Action del)
{
    if (Base.BatchModule.Current != null &&
        Base.BatchModule.Cache.GetStatus(Base.BatchModule.Current) == PXEntryStatus.Inserted &&
        Base.BatchModule.Current.Module == "AR")
        return;
    if (del != null) 
        del();
}
 The code modifies the logic so that the system will not invoke the base virtual                 method if the batch is being generated from the Accounts Receivable module;                 otherwise, the system executes the base business logic. To view the result of the customization, publish the customization project and open                 the Invoices and Memos form. To test the modified behavior of the Invoices and Memos form, add and save a new                 invoice, clear the  Hold  check box, and click the                      Release  button. Notice that no new GL batch is generated                 by the system while it releases the invoice. Open the  Financial                     Details  tab. No batch number is displayed, as the following                 screenshot illustrates. No batch has been generated by the system for the Accounts Receivable                     Invoice ]]></column>
		</row>
		<row PageID="0288781f-11a6-412a-974e-e4c942ed2472" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="562ba2dc-0d8f-7fc3-01eb-9e5a13397036" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can use customize the release process for several forms in the following ways:[anchor|#_32941a14-5407-4ddf-a1aa-56042c0a2543]
*By overriding the <tt>Insert&#42;&#42;&#42;Transaction</tt> methods. This way you will be able to manage the process of inserting a line to the General Ledger. 
*By subscribing to the <tt>RowPersisting</tt> and <tt>RowPersisted</tt> events. This way you will be able to access the following caches of the <tt>CAReleaseProcess</tt> class:{{{{public PXSelect&lt;CAAdj&gt; CAAdjastments;
public PXSelect&lt;CATransfer&gt; CAtransfers;
public PXSelect&lt;CATaxTran&gt; TaxTrans;
public PXSelect&lt;CAExpense&gt; TransferExpenses;
public PXSelect&lt;SVATConversionHist&gt; SVATConversionHist;
public PXSelect&lt;CADailySummary&gt; DailySummary;
}}}}

Such customization is available for actions which include the <tt>ReleaseDocProc&lt;TCADocument&gt;</tt> method cal. These action are the following:[anchor|#_3cbb967b-abab-4b81-b7ba-a18fbd485ff3]
*The '''Release''' action on the Release Cash Transactions (CA502000) form
*The '''Release''' action on the Transactions (CA304000) form
*The '''Release''' action on the Funds Transfers (CA301000) form
*The '''Process''' action on the Process Bank Transactions (CA306000) form
*The '''Release''' action on the Journal Vouchers (GL304000) form
*The '''Release''' action on the Bank Deposits (CA305000) form
{br}{TOC}
==Overriding the Insert&#42;&#42;&#42;Transaction methods==
The following methods are available for customization:[anchor|#_10da6983-dadd-4e62-be5c-6a7132861a67]
*{{{{public virtual GLTran InsertDocumentTransaction(
JournalEntry, GLTran, GLTranInsertionContext)
}}}}
*:The method inserts the content of the form header.
*{{{{public virtual GLTran InsertSplitTransaction(
JournalEntry, GLTran, GLTranInsertionContext)
}}}}
*:The method inserts the lines of the '''Document Details''' tab of the form.
*{{{{public virtual GLTran InsertRoundingTransaction(
JournalEntry, GLTran, GLTranInsertionContext)
}}}}
*:The method processes the rounding of the document lines sum and document total.
*{{{{public virtual GLTran InsertDepositChargeTransaction(
JournalEntry, GLTran, GLTranInsertionContext)
}}}}
*:The method is available only for the Bank Deposits form and inserts the lines of the '''Charges''' tab of the form.

The {{GLTranInsertionContext context}} parameter of the methods contains the context of the release process. That means the kind of record being released is the field of the <tt>GLTranInsertionContext</tt> class instance, which is not null. The <tt>context</tt> parameter is assigned the corresponding value by the system. The class members are presented below.{{{{public class GLTranInsertionContext
{
	public virtual CAAdj CAAdjRecord { get; set; }
	public virtual CASplit CASplitRecord { get; set; }
	public virtual CATaxTran CATaxTranRecord { get; set; }

	public virtual CATransfer CATransferRecord { get; set; }
	public virtual CAExpense CAExpenseRecord { get; set; }

	public virtual CADeposit CADepositRecord { get; set; }
	public virtual CADepositDetail CADepositDetailRecord { get; set; }
	public virtual CADepositCharge CADepositChargeRecord { get; set; }

	public virtual CATran CATranRecord { get; set; }
}
}}}}
==Customizing the Release of a Transaction (an Example)==
Suppose you have a custom field on the Transactions form, and you need to display it on the separate column in the lines of the Journal Transaction form. Then you need to complete the following steps:[anchor|#_1aebb958-4af6-4d62-8e7d-d68ca60c966c]
#Add a custom field to the Transactions form. See example in the [HelpRoot_Dev_Customization\UIHowAddGrid|Adding Input Controls] topic.
#:For example, add the ''CreatedDateTime'' field of the <tt>Transactions</tt> data view. The customized screen in the Screen Editor is shown on the screenshot below.[anchor|#_464ae36c-ecd9-41ef-af9d-87f033872c6e][image:CustomizationPlatform/images/OnRelease_TranScreen.png|popup|The customized Transactions screen|450px]
#Add a custom column to the grid on the Journal Transactions form. See example in the [HelpRoot_Dev_Customization\UIHowAddColGrid|Adding Columns to a Grid] topic.
#:For example, add the corresponding ''CreatedOn'' field to the form grid. The corresponding Data Access is shown on the screenshot below.[anchor|#_56be7347-9227-40b1-8f56-e28146752fdb][image:CustomizationPlatform/images/OnRelease_GLTranDAC.png|popup|The GLTran DAC extension|400px]
#Customize the business logic of the Transactions form by overriding the <tt>InsertDocumentTransaction</tt> method as follows:
##Before you start overriding the <tt>InsertDocumentTransaction</tt>, you should understand which field of the <tt>GLTranInsertionContext</tt> class is changed depending on which form is used. You are overriding the Release action on the Transactions form, so open Element Inspector for this form&rsquo;s header and see which Data Class and View Name it has. Their names correspond to types and fields of the <tt>GLTranInsertionContext</tt> class. 
##:So, for the Transactions form, you need the <tt>CAAdj</tt> DAC as shown on the following screenshot.[anchor|#_12d2258f-a4a0-4052-9c42-60b2602b9505][image:CustomizationPlatform/images/ElemProperties_Transactions.png|popup|The Element Properties dialog box of the Transactions form|400px]
##In the Code Editor of the Customization Project Editor, select '''Add New Record'''. 
##In the '''Create Code File''' dialog box that opens, specify the following values and click '''OK'''.
##*'''File Template''': ''Graph Extension''
##* '''Class Name''': ''CAReleaseProcess''
##*:The '''Code Editor: CAReleaseProcess''' page opens.
##On the '''Code Editor: CAReleaseProcess''' page, select '''Override Method'''.
##On the '''Select Methods to Override''' panel, select the <tt>InsertDocumentTransaction</tt> method, and click '''Save'''.
##:The code for overriding the <tt>InsertDocumentTransaction</tt> method is generated as follows.{{{{public delegate GLTran InsertDocumentTransactionDelegate(
    JournalEntry je, 
    GLTran tran, 
    CAReleaseProcess.GLTranInsertionContext context);
[PXOverride]
public GLTran InsertDocumentTransaction(
    JournalEntry je, 
    GLTran tran, 
    CAReleaseProcess.GLTranInsertionContext context, 
    InsertDocumentTransactionDelegate baseMethod)
{
    return baseMethod(je,tran,context);
}
}}}}
##In the method&rsquo;s body, insert the following code where you detect whether the current context (a record of the <tt>CAAdj</tt> type that was found in paragraph a) is not empty.{{{{if (context.CATranRecord!= null)
{
    var adj = PXSelect&lt;CAAdj, Where&lt;CAAdj.tranID, Equal&lt;Required&lt;CAAdj.tranID&gt;&gt;&gt;&gt;.Select(Base, context.CATranRecord.TranID);
    if(adj!=null)
    {
      // some code
    }
}
}}}}
##:Now you can work with the record&rsquo;s fields inside the <tt>if</tt> statement.
##As the original task requires, assign the custom field (<tt>CreatedDateTime</tt>) to the released transaction&rsquo;s custom field (<tt>UsrCreatedOn</tt>) as shown in the code below.{{{{GLTranExt tranExt = Base.Caches[typeof(GLTran)].GetExtension&lt;GLTranExt&gt;(tran);
tranExt.UsrCreatedOn = context.CATranRecord.CreatedDateTime;
}}}}
##:The complete code of the <tt>CAReleaseProcess&#95;Extension</tt> class should look as follows.{{{{public class CAReleaseProcess_Extension : PXGraphExtension&lt;CAReleaseProcess&gt;
{
    #region Event Handlers
    public delegate GLTran InsertDocumentTransactionDelegate(
    JournalEntry je, GLTran tran, CAReleaseProcess.GLTranInsertionContext context);
    [PXOverride]
    public GLTran InsertDocumentTransaction(
       JournalEntry je, 
       GLTran tran, 
       CAReleaseProcess.GLTranInsertionContext context, 
       InsertDocumentTransactionDelegate baseMethod)
    {        
	if (context.CATranRecord!= null)
	{
           var adj = PXSelect&lt;CAAdj, Where&lt;CAAdj.tranID, Equal&lt;Required&lt;CAAdj.tranID&gt;&gt;&gt;&gt;.Select(Base, context.CATranRecord.TranID);
           if(adj!=null)
	    {
	      GLTranExt tranExt = Base.Caches[typeof(GLTran)].GetExtension&lt;GLTranExt&gt;(tran);
	      tranExt.UsrCreatedOn = context.CATranRecord.CreatedDateTime;
	    }
	}
	return baseMethod(je,tran,context);
    }
    #endregion
}
}}}}
#Publish the customization project.

To test the implemented customization, do the following:[anchor|#_9d577a46-9aae-4bca-87bc-36ba26cb19b5]
#Open the Transactions form. Note the '''Created On''' field in the form&rsquo;s header. Create a transaction and release it. The released transaction is shown on the screenshot below.[anchor|#_7b99af0d-0159-43ac-af46-328e965e92d7][image:CustomizationPlatform/images/OnRelease_TranReleased.png|popup|The released transacrion on the customized Transactions form|450px]
#In the '''Financial Details''' tab, click the generated batch number.
#The Journal Transactions form opens. Note the '''Created On''' column in the form&rsquo;s grid. Only the first line corresponding to the transaction&rsquo;s header has the '''Created On''' column value filled.[anchor|#_7e01b09b-8f9a-4324-8bc1-a3963f6b46ca][image:CustomizationPlatform/images/OnRelease_JournalTran.png|popup|The customized Journal Transactions form|450px]
((({S:Warn}You can use the same approach to customize the process of releasing AP and AR documents.
)))]]></column>
			<column name="PlainText"><![CDATA[Customizing the Release Process for CA Documents You can use customize the release process for several forms in the following ways: By overriding the  Insert***Transaction  methods. This way you will be able      to manage the process of inserting a line to the General Ledger.  By subscribing to the  RowPersisting  and  RowPersisted       events. This way you will be able to access the following caches of the        CAReleaseProcess       class: public PXSelect<CAAdj> CAAdjastments;
public PXSelect<CATransfer> CAtransfers;
public PXSelect<CATaxTran> TaxTrans;
public PXSelect<CAExpense> TransferExpenses;
public PXSelect<SVATConversionHist> SVATConversionHist;
public PXSelect<CADailySummary> DailySummary; Such customization is available for actions which include the       ReleaseDocProc<TCADocument>  method cal. These action are the     following: The  Release  action on the Release Cash Transactions (CA502000)      form The  Release  action on the Transactions (CA304000) form The  Release  action on the Funds Transfers (CA301000) form The  Process  action on the Process Bank Transactions (CA306000)      form The  Release  action on the Journal Vouchers (GL304000) form The  Release  action on the Bank Deposits (CA305000) form Overriding the Insert***Transaction methods The following methods are available for customization: public virtual GLTran InsertDocumentTransaction(
JournalEntry, GLTran, GLTranInsertionContext) The method inserts the content of the form header. public virtual GLTran InsertSplitTransaction(
JournalEntry, GLTran, GLTranInsertionContext) The method inserts the lines of the  Document Details  tab of the       form. public virtual GLTran InsertRoundingTransaction(
JournalEntry, GLTran, GLTranInsertionContext) The method processes the rounding of the document lines sum and document total. public virtual GLTran InsertDepositChargeTransaction(
JournalEntry, GLTran, GLTranInsertionContext) The method is available only for the Bank Deposits form and inserts the lines of the         Charges  tab of the form. The  GLTranInsertionContext context  parameter of the methods contains the     context of the release process. That means the kind of record being released is the field of the       GLTranInsertionContext  class instance, which is not null.  The       context  parameter is assigned the corresponding value by the system. The     class members are presented below. public class GLTranInsertionContext
{
	public virtual CAAdj CAAdjRecord { get; set; }
	public virtual CASplit CASplitRecord { get; set; }
	public virtual CATaxTran CATaxTranRecord { get; set; }

	public virtual CATransfer CATransferRecord { get; set; }
	public virtual CAExpense CAExpenseRecord { get; set; }

	public virtual CADeposit CADepositRecord { get; set; }
	public virtual CADepositDetail CADepositDetailRecord { get; set; }
	public virtual CADepositCharge CADepositChargeRecord { get; set; }

	public virtual CATran CATranRecord { get; set; }
} Customizing the Release of a Transaction (an Example) Suppose you have a custom field on the Transactions form, and you need to display it on the     separate column in the lines of the Journal Transaction form. Then you need to complete the     following steps: Add a custom field to the Transactions form. See example in the  Adding Input Controls topic. For example, add the  CreatedDateTime  field of the         Transactions  data view. The customized screen in the Screen Editor is       shown on the screenshot below. The customized Transactions screen Add a custom column to the grid on the Journal Transactions form. See example in the  Adding Columns to a Grid topic. For example, add the corresponding  CreatedOn        field to the form grid. The corresponding Data Access  is shown on the screenshot       below. The GLTran DAC extension Customize the business logic of the Transactions form by overriding the        InsertDocumentTransaction  method as follows: Before you start overriding the  InsertDocumentTransaction , you should        understand which field of the  GLTranInsertionContext  class is changed        depending on which form is used. You are overriding the Release action on the Transactions        form, so open Element Inspector for this form's header and see which Data Class and View Name        it has. Their names correspond to types and fields of the          GLTranInsertionContext  class.  So, for  the Transactions form, you need         the  CAAdj  DAC as shown on the following screenshot. The Element Properties dialog box of the Transactions form In the Code Editor of the Customization Project Editor, select  Add New         Record .  In the  Create Code File  dialog box that opens, specify the        following values and click  OK . File Template :  Graph Extension Class Name :  CAReleaseProcess The  Code Editor:            CAReleaseProcess  page opens. On the  Code Editor: CAReleaseProcess  page, select          Override Method . On the  Select Methods to Override  panel, select the          InsertDocumentTransaction  method, and click          Save . The code for overriding the           InsertDocumentTransaction  method is generated as        follows. public delegate GLTran InsertDocumentTransactionDelegate(
    JournalEntry je, 
    GLTran tran, 
    CAReleaseProcess.GLTranInsertionContext context);
[PXOverride]
public GLTran InsertDocumentTransaction(
    JournalEntry je, 
    GLTran tran, 
    CAReleaseProcess.GLTranInsertionContext context, 
    InsertDocumentTransactionDelegate baseMethod)
{
    return baseMethod(je,tran,context);
} In the method's body, insert the following code where you detect whether the current        context (a record of the  CAAdj  type that was found in paragraph a) is not         empty. if (context.CATranRecord!= null)
{
    var adj = PXSelect<CAAdj, Where<CAAdj.tranID, Equal<Required<CAAdj.tranID>>>>.Select(Base, context.CATranRecord.TranID);
    if(adj!=null)
    {
      // some code
    }
} Now         you can work with the record's fields inside the  if  statement. As the original task requires, assign the custom field        ( CreatedDateTime ) to the released transaction's custom field         ( UsrCreatedOn ) as shown in the code         below. GLTranExt tranExt = Base.Caches[typeof(GLTran)].GetExtension<GLTranExt>(tran);
tranExt.UsrCreatedOn = context.CATranRecord.CreatedDateTime; The         complete code of the  CAReleaseProcess_Extension  class should look as         follows. public class CAReleaseProcess_Extension : PXGraphExtension<CAReleaseProcess>
{
    #region Event Handlers
    public delegate GLTran InsertDocumentTransactionDelegate(
    JournalEntry je, GLTran tran, CAReleaseProcess.GLTranInsertionContext context);
    [PXOverride]
    public GLTran InsertDocumentTransaction(
       JournalEntry je, 
       GLTran tran, 
       CAReleaseProcess.GLTranInsertionContext context, 
       InsertDocumentTransactionDelegate baseMethod)
    {        
	if (context.CATranRecord!= null)
	{
           var adj = PXSelect<CAAdj, Where<CAAdj.tranID, Equal<Required<CAAdj.tranID>>>>.Select(Base, context.CATranRecord.TranID);
           if(adj!=null)
	    {
	      GLTranExt tranExt = Base.Caches[typeof(GLTran)].GetExtension<GLTranExt>(tran);
	      tranExt.UsrCreatedOn = context.CATranRecord.CreatedDateTime;
	    }
	}
	return baseMethod(je,tran,context);
    }
    #endregion
} Publish the customization project. To test the implemented customization, do the following: Open the Transactions form. Note the  Created On  field in the form's       header. Create a transaction and release it. The released transaction is shown on the       screenshot below. The released transacrion on the customized Transactions form In the  Financial Details  tab, click the generated batch number. The Journal Transactions form opens. Note the  Created On  column in       the form's grid. Only the first line corresponding to the transaction's header has the         Created On  column value filled. The customized Journal Transactions form You can use the same approach to customize the process of releasing AP and AR     documents. ]]></column>
		</row>
		<row PageID="15b61e89-ccfe-498f-872b-5e48d4f202af" Language="en-US" PageRevisionID="1" Content="&#xA;You can customize а form by defining a workflow. By customizing a form in this way, you can simplify and secure the process of changing the state of an entity when a user performs actions with an entity. You do this by enabling and disabling actions and fields, automatically assigning values to fields as a result of actions that the user has performed, and prompting the user to provide values for an action to be performed, if needed. The process of defining a workflow is described in [HelpRoot_Dev_Customization\CG_GL_Items_AddWorkflow|To Add a Workflow].{br}&#xA;&#xA;This section provides examples of creating workflows.{br}{TOC}" PlainText="Defining a Workflow You can customize а form by defining a workflow. By customizing a form in this way, you can     simplify and secure the process of changing the state of an entity when a user performs actions     with an entity. You do this by enabling and disabling actions and fields, automatically     assigning values to fields as a result of actions that the user has performed, and prompting the     user to provide values for an action to be performed, if needed. The process of defining a     workflow is described in  To Add a Workflow. This section provides examples of creating workflows. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="77b8f91a-f3af-9a04-a0b1-7f187f23578a" RecordSourceID="22377" />
		<row PageID="7002fb50-3aff-4819-b995-ef2d18f13272" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="06f303bd-6b17-c2ec-dc3c-0e494791a008" RecordSourceID="22377">
			<column name="Content"><![CDATA[
Some forms of Acumatica ERP have predefined workflows. You can extend these workflows in the Customization Project Editor, which gives you the tools and interface to make these changes without coding. {br}

This example demonstrates the extending of the predefined workflow for working with an opportunity. The predefined workflow for the [HelpRoot_FormReference\CR_30_40_00|Opportunities] ([~/?ScreenId=CR304000|CR304000]) form includes the states (shown in the blue rectangles and representing statuses) and actions shown in the following diagram. [anchor|#_941c0f43-6dab-43bd-bbc9-b4e27f143da5][anchor|#_a5a3c95b-03af-4a35-b7a5-9dfebd26d38b][image:CustomizationPlatform/images/Transitions_Example_Predefined.png|popup|The predefined statuses and actions of opportunities|300px]
Suppose that you need a new status called ''Hold'' that can be used for opportunities. After you perform customization, a user should be able to change an opportunity’s status from ''Won'' to ''Hold'' by clicking the '''Hold''' action, and change the status from ''Hold'' to ''Open'' by clicking the predefined '''Open''' action.{br}

The following diagram presents the possible statuses after customization and the actions that change statuses.[anchor|#_a00d153a-9b3e-4821-827e-1739137a606f][anchor|#_b0d65ba6-3c37-4d55-91de-46030fe8055b][image:CustomizationPlatform/images/Transitions_Example_Extended.png|popup|The customized statuses and actions of opportunities|450px]
Based on these specifications, you will implement the new workflow for opportunities by performing the following general tasks, which are described in greater detail in the sections that follow:[anchor|#_e3da8880-0adb-4d3e-8219-1b3f87522b94]
#Adding the [HelpRoot_FormReference\CR_30_40_00|Opportunities] form to the list of customized screens as described in [[#_b59efc4e-b0a2-4277-9df3-52916e7867b6|Add the Opportunities Form to the List of Customized Screens].
#On the Workflows page, creating a workflow based on the existing one as described in [[#_dcc7321b-58e2-4c17-abd3-e226cadf112c|Create a Custom Workflow Based on an Existing One].
#In the Workflow Editor, adding the ''Hold'' state as described in [[#_48e4a12c-11de-4cfb-8cb5-752194ac8710|Add the Hold State to the Custom Workflow].
#For the ''Won'' state, defining a transition and the '''Hold''' action as described in [[#_9f2492ba-5c8f-43ed-8339-566ecb13d307|Create the Transition from the Won State to the Hold State].
#For the ''Hold'' state, adding a transition and the '''Open''' action as described in [[#section_yt5_cbg_vkb|Create the Transition from the Hold State to the Open State].
{br}{TOC}[anchor|#_b59efc4e-b0a2-4277-9df3-52916e7867b6]
==Add the Opportunities Form to the List of Customized Screens==
To add the [HelpRoot_FormReference\CR_30_40_00|Opportunities] ([~/?ScreenId=CR304000|CR304000]) form in the list of customized screens, do the following:[anchor|#_cb4d130e-aa32-417c-be39-4fe2378a2ca0]
#Open the Customization Project Editor.
#In the navigation pane, click '''Screens'''.
#On the page toolbar, click '''Add Screen''' > '''Customize Existing Screen'''.
#In the '''Customize Existing Screen''' dialog box, which opens, select the [HelpRoot_FormReference\CR_30_40_00|Opportunities] form.
#Click '''OK'''.
#:The [HelpRoot_FormReference\CR_30_40_00|Opportunities] form is displayed on the Customized Screens page and is listed in the navigation page under the '''Screens''' node.

For details on adding a form to the list of customized screens, see [HelpRoot_Dev_Customization\CG_GL_Items_Screens_Adding|To Add a Page Item for an Existing Form].[anchor|#_dcc7321b-58e2-4c17-abd3-e226cadf112c]
==Create a Custom Workflow Based on an Existing One==
To create a new workflow, do the following:[anchor|#_a71e1525-0f19-4e84-944c-13ffe69d8688]
#In the navigation pane of Customization Project Editor, select '''Screens''' > '''CR301000''' > '''Workflows'''.
#:The CR304000 (Opportunities) Workflows page opens.
#On the form toolbar, click '''Add Workflow'''.
#In the '''Add Workflow''' dialog box, which opens, specify the following values:
#*'''Operation''': ''Extend Predefined Workflow''
#* '''Base Workflow''': ''Default Workflow''
#* '''Workflow Type''': ''DEFAULT''
#* '''Workflow Name''': The internal name of the workflow
#Click '''OK'''.
#:The dialog box is closed, and the workflow appears in the table on the Workflows page. Notice that the workflow’s status is ''Inherited''.
#Clear the '''Active''' check box for the predefined workflow, and select the '''Active''' check box for the created workflow.
#On the page toolbar, click '''Save'''.
#In the table, click the name of the workflow.
#:The Workflows: &lt;Workflow Name&gt; page opens. Now you will add the ''Hold'' state.
[anchor|#_48e4a12c-11de-4cfb-8cb5-752194ac8710]
==Add the ''Hold'' State to the Custom Workflow==
To add the ''Hold'' state, do the following:[anchor|#_ceac0ba9-2a80-48bd-8aeb-7b9d3bdcb01a]
#On the toolbar of the '''States and Transitions''' pane, click '''+''' > '''Add State'''.
#In the '''Add State''' dialog box, which opens, specify the following values:
#*'''Identifier''': <tt>H</tt>
#*'''Description''': <tt>Hold</tt>
#Click '''OK'''.
#On the '''States and Transitions''' pane, place the ''Hold'' state after the ''Won'' state by using the buttons on the toolbar.
[anchor|#_9f2492ba-5c8f-43ed-8339-566ecb13d307]
==Create the Transition from the ''Won'' State to the ''Hold'' State==
You need to create a transition from the ''Won'' to the ''Hold'' state. To perform this transition, you also need to create the ''Put on Hold'' action. Do the following:[anchor|#_435e1cc4-1b59-4612-b234-1cce3c9a41c2]
#In the '''States and Transitions''' pane, select the ''Won'' state.
#On the toolbar of the '''States and Transitions''' pane, click '''+''' > '''Add Transition'''.
#In the '''Add Transition''' dialog box, which opens, select ''Hold'' as the '''Target State'''.
#Click '''Create Action'''.
#In the '''New Action''' dialog box, which opens, enter the following values:
#*'''Action Name''': <tt>PutOnHold</tt>
#*'''Display Name''': <tt>Hold</tt>
#To save the action you have created, click '''OK'''.
#In the '''Add Transition''' dialog box, make sure the created action is specified in the '''Action''' box, and click '''OK''' to close the dialog box.
#On the page toolbar, click '''Save'''
[anchor|#section_yt5_cbg_vkb]
==Create the Transition from the ''Hold'' State to the ''Open'' State==
You now need to create a transition from the ''Hold'' state to the ''Open'' state. To perform this transition, you can use the existing ''Open'' action. by perform the following actions:[anchor|#ol_d55_cbg_vkb]
#In the '''States and Transitions''' pane, select the ''Hold'' state.
#On the toolbar of the '''States and Transitions''' pane, click '''+''' > '''Add Transition'''.
#In the '''Add Transition''' dialog box, which opens, specify the following values:
#*'''Action Name''': ''Open (Open)''
#* '''Target State''': ''Open''
#Click '''OK''' to close the dialog box.
#On the page toolbar, click '''Save'''.

==Related Articles==
*[HelpRoot_Dev_Customization\CG_GL_Items_Screens|Customized Screens]
*[HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_WorkflowEditor|Workflow Editor]
*[HelpRoot_Dev_Customization\CG_GL_Items_WorkflowConcept|Creating Workflows]]]></column>
			<column name="PlainText"><![CDATA[Extending the Existing Workflow Without Coding from the  Customization Project EditorSome forms of  Acumatica ERP have predefined workflows. You can extend these workflows in the  Customization Project Editor, which gives you the tools and interface to make these changes without coding.  This example demonstrates the extending of the predefined workflow for working with an         opportunity. The predefined workflow for the   ([~/?ScreenId=CR304000|CR304000]) Opportunities Opportunities (CR304000) form includes the states (shown in the blue rectangles         and representing statuses) and actions shown in the following diagram.  The predefined statuses and actions of opportunities Suppose that you need a new status called  Hold  that can be used for opportunities.         After you perform customization, a user should be able to change an opportunity’s status         from  Won  to  Hold  by clicking the  Hold  action, and         change the status from  Hold  to  Open  by clicking the predefined            Open  action. The following diagram presents the possible statuses after customization and the actions         that change statuses. The customized statuses and actions of opportunities Based on these specifications, you will implement the new workflow for opportunities by         performing the following general tasks, which are described in greater detail in the         sections that follow: Adding the   ([~/?ScreenId=CR304000|CR304000]) Opportunities Opportunities form to the           list of customized screens as described in  Add the Opportunities Form to the List of Customized Screens Add the Opportunities Form to the List of Customized Screens. On the Workflows page, creating a workflow based on the existing one as described in              Create a Custom Workflow Based on an Existing One Create a Custom Workflow Based on an Existing One. In the Workflow Editor, adding the  Hold  state as described in  Add the Hold State to the Custom Workflow Add the Hold State to the Custom Workflow. For the  Won  state, defining a transition and the  Hold            action as described in  Create the Transition from the Won State to the Hold State Create the Transition from the Won State to the Hold State. For the  Hold  state, adding a transition and the  Open            action as described in  Create the Transition from the Hold State to the Open State Create the Transition from the Hold State to the Open State. Add the Opportunities Form to the List of Customized Screens To add the   ([~/?ScreenId=CR304000|CR304000]) Opportunities Opportunities(CR304000) form         in the list of customized screens, do the following: Open the  Customization Project Editor. In the navigation pane, click  Screens . On the page toolbar, click  Add Screen Customize Existing Screen . In the  Customize Existing Screen  dialog box, which opens, select           the   ([~/?ScreenId=CR304000|CR304000]) Opportunities Opportunities form. Click  OK . The   ([~/?ScreenId=CR304000|CR304000]) Opportunities Opportunities form is displayed on the Customized Screens page and is listed             in the navigation page under the  Screens  node. For details on adding a form to the list of customized screens, see  To Add a Page Item for an Existing Form. Create a Custom Workflow Based on an Existing One To create a new workflow, do the following: In the navigation pane of  Customization Project Editor, select  Screens CR301000 Workflows . The CR304000 (Opportunities) Workflows page opens. On the form toolbar, click  Add Workflow . In the  Add Workflow  dialog box, which opens, specify the           following values: Operation :  Extend Predefined Workflow Base Workflow :  Default Workflow Workflow Type :  DEFAULT Workflow Name : The internal name of the workflow Click  OK . The dialog box is closed, and the workflow appears in             the table on the Workflows page. Notice that the workflow’s status is              Inherited . Clear the  Active  check box for the predefined workflow, and           select the  Active  check box for the created workflow. On the page toolbar, click  Save . In the table, click the name of the workflow. The Workflows: <Workflow Name> page             opens. Now you will add the  Hold  state. Add the  Hold  State to the Custom Workflow To add the  Hold  state, do the following: On the toolbar of the  States and Transitions  pane, click  + Add State . In the  Add State  dialog box, which opens, specify the following             values: Identifier :  H Description :  Hold Click  OK . On the  States and Transitions  pane, place the  Hold  state           after the  Won  state by using the buttons on the toolbar. Create the Transition from the  Won  State to the  Hold  State You need to create a transition from the  Won  to the  Hold  state. To perform         this transition, you also need to create the  Put on Hold  action. Do the         following: In the  States and Transitions  pane, select the  Won            state. On the toolbar of the  States and Transitions  pane, click  + Add Transition . In the  Add Transition  dialog box, which opens, select  Hold            as the  Target State . Click  Create Action . In the  New Action  dialog box, which opens, enter the following             values: Action Name :  PutOnHold Display Name :  Hold To save the action you have created, click  OK . In the  Add Transition  dialog box, make sure the created action is           specified in the  Action  box, and click  OK  to           close the dialog box. On the page toolbar, click  Save Create the Transition from the  Hold  State to the  Open  State You now need to create a transition from the  Hold  state to the  Open  state. To         perform this transition, you can use the existing  Open  action. by perform the         following actions: In the  States and Transitions  pane, select the  Hold            state. On the toolbar of the  States and Transitions  pane, click  + Add Transition . In the  Add Transition  dialog box, which opens, specify the           following values: Action Name :  Open (Open) Target State :  Open Click  OK  to close the dialog box. On the page toolbar, click  Save . ]]></column>
		</row>
		<row PageID="bf8fc578-a6b7-447a-b913-1cfa8d56b73d" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="4f90ffa6-c0ee-9735-304b-890f855d3315" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can customize a workflow in Visual Studio or in the Code Editor with the help of Acumatica Framework.{br}

This example demonstrates the extending of the workflow for working with an opportunity by using Visual Studio. The predefined workflow for the [HelpRoot_FormReference\CR_30_40_00|Opportunities] ([~/?ScreenId=CR304000|CR304000]) form includes the states (shown in the blue rectangles and representing statuses) and actions shown in the following diagram. [anchor|#_941c0f43-6dab-43bd-bbc9-b4e27f143da5][anchor|#_a5a3c95b-03af-4a35-b7a5-9dfebd26d38b][image:CustomizationPlatform/images/Transitions_Example_Predefined.png|popup|The predefined statuses and actions of opportunities|300px]
Suppose that in your customization efforts you need to incorporate a process of assigning a new opportunity before opening it. You need a new status for opportunities called ''Assigned''. A user should be able to change a status from ''New'' to ''Assigned'' by clicking the '''Assign''' action, change the status from ''Assigned'' to'' Open'' by clicking the predefined '''Accept''' action, and change the status from ''Assigned'' to ''New'' by clicking the '''Reject''' action, which you will add. For an opportunity to be assigned, a user must be selected in the '''Owner''' box. Also, you need to add an auto-run action named {{Auto-Assign}} that is performed if a new opportunity is created and the '''Owner''' box is not empty. The {{Auto-Assign}} action changes the status of the opportunity to ''Assigned''. {br}

When a user clicks the '''Accept''' or '''Reject''' action, the user should provide the reason for changing the state. When a user clicks the '''Assign''' action, the user should specify the '''Owner''' of the opportunity. In both of these situations, you will use a dialog box to obtain this information.{br}

The following diagram presents the possible statuses after customization and the actions that change statuses.[anchor|#_a00d153a-9b3e-4821-827e-1739137a606f][anchor|#_50198b73-8ce8-43f6-a952-ea0429e8f9fb][image:CustomizationPlatform/images/Transitions_Example_Code.png|popup|The customized statuses and actions of opportunities|450px]
Based on these specifications, you will implement the new workflow for opportunities by performing the following general tasks, which are described in greater detail in the sections that follow:[anchor|#_e3da8880-0adb-4d3e-8219-1b3f87522b94]
#Adding a new state named {{Assigned}}, as described in [[#_c083eddb-9de6-440f-bc26-ca3782f1a89b|Add a New State Named Assigned].
#Adding the following actions:
#*{{Assign}}, which changes the state from ''New'' to ''Assigned''
#*{{Accept}}, which changes the state from ''Assigned'' to ''Open''
#*{{Reject}}, which changes the state from ''Assigned'' to ''New''
#*{{AutoAssign}}, which is performed if the '''Owner''' box is not empty
#:For details, see [[#_c25a19c9-8256-43aa-a894-0d7a9118229d|Add Actions].
#Adding the {{OwnerNotEmpty}} condition for the {{AutoAssign}} action, as described in [[#_8654dda6-a69b-42ba-9fa0-d0556be870b2|Add the OwnerNotEmpty Condition].
#Adding dialog boxes for the actions so that a user can provide the required field values. (For instructions, see [[#_0e5ea709-d029-4ca2-a81c-7cbad57a1e9c|Add the Dialog Boxes].)
#Removing the transition from the ''New'' to ''Open'' status.
#Updating the ''New'' state with the following changes:
#*Update the list of values for the {{Resolution}} and {{Status}} field
#*Adding the {{Assign}} and {{AutoAssign}} actions
#*Removing the {{Open}} action
#Updating the {{Open}} state to make the {{Owner}} field required.
#Defining transitions from the ''New'' to ''Assigned'' states, from ''Assigned'' to ''New'' and ''Open'' states.
#:For details on implementing Tasks 5–8, see [[#_e35aa9db-0915-42c3-a68c-32292de58eb5|Update the Workflow Configuration].
{br}{TOC}
==Before You Proceed==
To be able to customize a workflow in Visual Studio, you need to create an extension library for your customization project. For details, see [HelpRoot_Dev_Customization\cg_platform_tocreateextensionlib|To Create an Extension Library].
==Prepare the Graph Extension==
To prepare the graph extension, do the following:[anchor|#_52c4b15b-2f8b-4b09-967c-ec3869e8e220]
#Add the following using directives.{{{{using PX.Data.WorkflowAPI;
using PX.Objects.CR.Workflows;
}}}}
#:You need the <tt>PX.Data.WorkflowAPI</tt> namespace to get access to workflow API, and the <tt>PX.Objects.CR.Workflows</tt> to get access to the <tt>OpportunityWorkflow</tt> and <tt>OpportunityMaint</tt> classes.
#Declare the graph extension, as the following code shows.{{{{public class OpportunityWorkflowExt : PX.Data.PXGraphExtension&lt;OpportunityWorkflow, OpportunityMaint&gt;
{
}
}}}}
#In the graph extension, add the following service members. You will use them to declare fields, dialog boxes, and actions.{{{{private const string
	_fieldReason = "Reason",
	_fieldStage = "Stage",
	_fieldOwnerID = "OwnerID",
	_fieldDetails = "Details",
	_formAccept = "FormAccept",
	_formAssign = "FormAssign",
	_formReject = "FormReject",
	_actionAccept = "Accept",
	_actionReject = "Reject",
	_actionAssign = "Assign",
	_actionAutoAssign = "AutoAssign",
	_reasonUnassign = "UA",
	_reasonRejected = "RJ",
	_reasonTechnology = "TH",
	_reasonRelationship = "RL",
	_reasonPrice = "PR",
	_reasonOther = "OT",
	_reasonAssign = "NA",
	_reasonInProcess = "IP",
	_reasonFunctionality = "FC",
	_reasonCompanyMaturity = "CM",
	_reasonCanceled = "CL";
}}}}
#Override the <tt>Configure</tt> method, as the following code shows.{{{{public override void Configure(PXScreenConfiguration config)
{
  var context = config.GetScreenConfigurationContext&lt;OpportunityMaint, CROpportunity&gt;();
}
}}}}
[anchor|#_c083eddb-9de6-440f-bc26-ca3782f1a89b]
==Add a New State Named Assigned==
To add the new ''Assigned'' state, do the following:[anchor|#_8063381d-9ccf-4587-83b0-1025b75a6aa8]
#In the graph extension, declare the {{States}} class, as the following code shows.{{{{public static class States
{
	public const string
		New = "N",
		Open = "O",
		Won = "W",
		Lost = "L",
		Assigned = "A";
}
}}}}
#In the overridden <tt>Configure</tt> method, declare the following variable.{{{{var assignedState = context.FlowStates.Create(States.Assigned, state =&gt; state
	.WithFieldStates(fields =&gt;
	{
		fields.AddField&lt;CROpportunity.resolution&gt;(field =&gt;
			field.ComboBoxValues(_reasonAssign));
		fields.AddField&lt;CROpportunity.ownerID&gt;(field =&gt;
			field.IsRequired());
	})
	.WithActions(actions =&gt;
	{
		actions.Add(g =&gt; g.createSalesOrder);
		actions.Add(g =&gt; g.createInvoice);
		actions.Add(g =&gt; g.validateAddresses);
		actions.Add&lt;OpportunityMaint.Discount&gt;(e =&gt; e.recalculatePrices);
		actions.Add(actionReject, a =&gt; a.IsDuplicatedInToolbar());
		actions.Add(actionAccept, a =&gt; a.IsDuplicatedInToolbar());
	}));
}}}}
#:In the code above, you define Assigned state, field values to be assigned in this state, and action available in this state.
[anchor|#_0e5ea709-d029-4ca2-a81c-7cbad57a1e9c]
==Add the Dialog Boxes==
You need to add dialog boxes that will prompt users for more information when they invoke the {{Accept}}, {{Reject}}, and {{Assign}} actions. The following instructions describe how to declare a dialog box for the Accept action; you will add the other two dialog boxes by performing similar actions.{br}

To accept an opportunity, a user should provide the {{Resolution}} and {{Stage}} field values. To declare a dialog box for the {{Accept}} action, declare a variable for the dialog box in the overridden <tt>Configure</tt> method:{{{{var formAccept = context.Forms.Create(_formAccept, form =&gt; form
	.Prompt("Details")
	.WithFields(fields =&gt;
	{
		fields.Add(_fieldReason, field =&gt; field
		  .WithSchemaOf&lt;CROpportunity.resolution&gt;()
		  .IsRequired()
		  .Prompt("Reason")
		  .DefaultValue(_reasonInProcess)
		  .OnlyComboBoxValues(_reasonInProcess));
		
              fields.Add(_fieldStage, field =&gt; field
		  .WithSchemaOf&lt;CROpportunity.stageID&gt;()
		  .Prompt("Stage"));
	}));
}}}}
In the code above, you create a dialog box with the Details title and add to it the following boxes:[anchor|#_4634fabd-7d3c-4666-8367-ea2182a021f0]
*A box based on the <tt>CROpportunity.resolution</tt> field, which is required in the dialog box. The title of the corresponding box is '''Reason'''.
*A box based on the <tt>CROpportunity.stageID</tt> field. The title of the corresponding box is '''Stage'''.

For the {{Assign}} and {{Reject}} actions, you can declare similar dialog boxes named {{formAssign}} and {{formReject}}. You need to add the <tt>Owner</tt> field based on the <tt>CROpportunity.ownerID</tt> field to the {{formAssign}} dialog box, and you need to add the <tt>Resolution</tt> field and the <tt>Details</tt> field based on the <tt>CROpportunity.details</tt> field to the {{formReject}} dialog box.[anchor|#_8654dda6-a69b-42ba-9fa0-d0556be870b2]
==Add the OwnerNotEmpty Condition==To define a new condition, in the overridden <tt>Configure</tt> method, declare the following variable.{{{{var ownerNotNullCondition = context.Conditions.FromExpr(
  opp =&gt; opp.OwnerID != null).WithSharedName("OwnerNotEmpty");
}}}}[anchor|#_c25a19c9-8256-43aa-a894-0d7a9118229d]
==Add Actions==
To add the {{Assign}} action, declare the following variable in the overridden <tt>Configure</tt> method.{{{{var actionAssign = context.ActionDefinitions.CreateNew(_actionAssign, action =&gt; action
	.WithFieldAssignments(fields =&gt;
	{
		fields.Add&lt;CROpportunity.resolution&gt;(f =&gt; f.SetFromValue(_reasonAssign));
		fields.Add&lt;CROpportunity.ownerID&gt;(f =&gt; f.SetFromFormField(formAssign, _fieldOwnerID));
	})
	.DisplayName("Assign")
	.WithForm(formAssign)
	.InFolder(FolderType.ActionsFolder, "Lost")
	.MassProcessingScreen&lt;UpdateOpportunityMassProcess&gt;());
}}}}
In the code above, you are creating a new action; you are also specifying which field values should change after the action is performed and which dialog box should be shown to provide these values. Also, you are specifying the location of the action on the form toolbar ({{ActionsFolder}}), the title of the action ({{Assign}}), and the graph of the processing form where the action should also be displayed ({{UpdateOpportunityMassProcess}}).{br}

For the {{Accept}} and {{Reject}} actions, you can add similar variables named {{actionAccept }}and {{actionReject}}.{br}

To add the auto-run {{Auto-Assign}} , which is performed if the {{OwnerNotEmpty}} condition is true, declare the following variable in the overridden <tt>Configure</tt> method. ((({S:Warn}The '''Auto-Assign''' action is performed automatically so it should not be displayed on the form. To hide the action from the form, you call the <tt>IsHiddenAlways</tt> method.
))){{{{var actionAutoAssign = context.ActionDefinitions.CreateNew(_actionAutoAssign, action =&gt; action
	.WithFieldAssignments(fields =&gt;
	{
		fields.Add&lt;CROpportunity.resolution&gt;(f =&gt; f.SetFromValue(_reasonAssign));
	})
		.DisplayName("Auto-Assign")
              .IsHiddenAlways()
		);
}}}}[anchor|#_e35aa9db-0915-42c3-a68c-32292de58eb5]
==Update the Workflow Configuration==
To apply all the entities you have declared, you need to call the <tt>UpdateScreenConfigurationFor</tt> method in the overridden <tt>Configure</tt> method, as the following code shows.{{{{context.UpdateScreenConfigurationFor(screen =&gt;
{
  return screen
    .UpdateDefaultFlow(config1 =&gt; config1.WithFlowStates
    (states =&gt;
    {
      states.Update(States.New, state =&gt; state
       .WithFieldStates(fields =&gt;
       {
         fields.UpdateField&lt;CROpportunity.resolution&gt;(field =&gt;
          field.WithDefaultValue(_reasonUnassign)
            .ComboBoxValues(_reasonUnassign, _reasonCanceled, _reasonOther, _reasonRejected));
       })
      .WithActions(actions =&gt;
      {
        actions.Add(actionAssign, a =&gt; a
            .IsDuplicatedInToolbar());

        actions.Add(actionAutoAssign, a =&gt; a
        .IsAutoAction(ownerNotNullCondition));
        actions.Remove("Open");
      }));
      states.Add(assignedState);
      states.Update(States.Open, state =&gt; state
        .WithFieldStates(fields =&gt;
        {
          fields.AddField&lt;CROpportunity.ownerID&gt;(field =&gt;
            field.IsRequired());
        }));
    })
    .WithTransitions(transitions =&gt;
    {
      transitions.Remove(transition =&gt; 
        transition.From(States.New).To(States.Open).IsTriggeredOn("Open"));

      transitions.Add(transition =&gt; transition
        .From(States.New)
        .To(States.Assigned)
        .IsTriggeredOn(actionAssign));
      transitions.Add(transition =&gt; transition
        .From(States.New)
        .To(States.Assigned)
        .IsTriggeredOn(actionAutoAssign));
      transitions.Add(transition =&gt; transition
        .From(States.Assigned)
        .To(States.New)
        .IsTriggeredOn(actionReject)
        .WithFieldAssignments(fields =&gt;
        {
          fields.Add&lt;CROpportunity.ownerID&gt;(f =&gt; f.SetFromExpression(null));
        })
        );
      transitions.Add(transition =&gt; transition
        .From(States.Assigned)
        .To(States.Open)
        .IsTriggeredOn(actionAccept));
    })
    )
    .WithActions(actions =&gt;
    {
      actions.Add(actionAssign);
      actions.Add(actionAccept);
      actions.Add(actionReject);
      actions.Add(actionAutoAssign);
    })
    .WithForms(forms =&gt;
    {
      forms.Add(formAssign);
      forms.Add(formReject);
      forms.Add(formAccept);
    })
    .WithFieldStates(fields =&gt;
    {

      fields.Add&lt;CROpportunity.status&gt;(field =&gt; field
          .SetComboValues(
            (States.Assigned, "Assigned"),
            (States.New, "New"),
            (States.Open, "Open"),
            (States.Won, "Won"),
            (States.Lost, "Lost")));

      fields.Replace&lt;CROpportunity.resolution&gt;(field =&gt; field
        .SetComboValues(
                (_reasonTechnology, "Technology"),
                (_reasonRelationship, "Relationship"),
                (_reasonPrice, "Price"),
                (_reasonOther, "Other"),
                (_reasonAssign, "Assigned"),
                (_reasonInProcess, "In Process"),
                (_reasonFunctionality, "Functionality"),
                (_reasonCompanyMaturity, "Company Maturity"),
                (_reasonCanceled, "Canceled"),
                (_reasonRejected, "Rejected"),
                (_reasonUnassign, "Unassign")));
    })
    .WithSharedConditions(conditions =&gt; conditions.Add(ownerNotNullCondition));
});
}}}}
In the code above, you are updating the workflow by doing the following:[anchor|#_7f29c57b-9109-4a5f-a721-f3122f675cff]
*Updating the list of states as follows:
**Updating the ''New'' state by adding new combo box values to the <tt>CROpportunity.resolution</tt> field, adding the {{Assign}} and {{AutoAssign}} actions, and removing the <tt>Open</tt> action
**Adding the ''Assigned'' state
**Updating the ''Open'' state by making the <tt>Owner</tt> field required
*Updating the list of transitions as follows:
**Removing the transition of the ''New'' state to the ''Open'' state
**Adding the transition from the ''New'' state to the ''Assigned'' state triggered by the {{Assign}} action
**Adding the transition from the ''New'' state to the ''Assigned'' state triggered by the {{AutoAssign}} action
**Adding the transition from the ''Assigned'' state to the ''New'' state triggered by the {{Reject}} action
**Adding the transition from the ''Assigned'' state to the ''Open'' state triggered by the {{Accept}} action
*Adding the {{Assign}}, {{Accept}}, {{Reject}}, and {{AutoAssign}} actions
*Adding the {{formAssign}}, {{formReject}}, and {{formAccept}} dialog boxes
*Updating fields as follows:
**Adding new combo box values to the <tt>CROpportunity.status</tt> field
**Replacing the values of the <tt>CROpportunity.resolution</tt> field with new ones

==Test the Customized Workflow==
To test the customized workflow, do the following:[anchor|#_ac79a116-582a-471d-9b77-2bcc22e2a2cf]
#Build the extension library.
#In Acumatica ERP, open the [HelpRoot_FormReference\CR_30_40_00|Opportunities] ([~/?ScreenId=CR304000|CR304000]) form.
#Create a new opportunity with the '''Owner''' box empty.
#On the form toolbar, click '''Actions''' > '''Assign'''.
#In the '''Assign''' dialog box, which opens, select an owner of the opportunity and a reason, and click '''OK'''.
#Notice that the status of the opportunity is changed to ''Assigned''. The '''Owner''' box now contains the owner you specified in the dialog box.
#On the form toolbar, click '''Actions''' > '''Accept'''.
#In the '''Accept''' dialog box, which opens, specify a reason and a stage, and click '''OK'''.
#Notice that the status of the opportunity is changed to ''Open''.
#Create a new opportunity with the '''Owner''' box filled in.
#Notice that when the new record is saved, its status is ''Assigned'' instead of ''New''.
#On the form toolbar, click '''Actions''' > '''Reject'''.
#In the '''Reject''' dialog box, which opens, specify the reason and details, and click '''OK'''.
#Notice that the status of the opportunity is changed to ''New''.
]]></column>
			<column name="PlainText"><![CDATA[Customize a Predefined Workflow from Code You can customize a workflow in Visual Studio or in the Code Editor with the help of  Acumatica Framework. This example demonstrates the extending of the workflow for working with an opportunity by         using Visual Studio. The predefined workflow for the   ([~/?ScreenId=CR304000|CR304000]) Opportunities (CR304000) form includes the states (shown in the         blue rectangles and representing statuses) and actions shown in the following diagram.  The predefined statuses and actions of opportunities Suppose that in your customization efforts you need to incorporate a process of assigning a         new opportunity before opening it. You need a new status for opportunities called            Assigned . A user should be able to change a status from  New  to            Assigned  by clicking the  Assign  action, change the status         from  Assigned  to  Open  by clicking the predefined  Accept          action, and change the status from  Assigned  to  New  by clicking the            Reject  action, which you will add. For an opportunity to be         assigned, a user must be selected in the  Owner  box. Also, you need to         add an auto-run action named  Auto-Assign  that is performed if a new         opportunity is created and the  Owner  box is not empty. The            Auto-Assign  action changes the status of the opportunity to            Assigned .  When a user clicks the  Accept  or  Reject          action, the user should provide the reason for changing the state. When a user clicks the            Assign  action, the user should specify the            Owner  of the opportunity. In both of these situations, you will use         a dialog box to obtain this information. The following diagram presents the possible statuses after customization and the actions         that change statuses. The customized statuses and actions of opportunities Based on these specifications, you will implement the new workflow for opportunities by         performing the following general tasks, which are described in greater detail in the         sections that follow: Adding a new state named  Assigned , as described in  Add a New State Named Assigned Add a New State Named Assigned. Adding the following actions: Assign , which changes the state from  New  to                Assigned Accept , which changes the state from  Assigned  to                Open Reject , which changes the state from  Assigned  to                New AutoAssign , which is performed if the  Owner                box is not empty For details, see  Add Actions Add Actions. Adding the  OwnerNotEmpty  condition for the  AutoAssign            action, as described in  Add the OwnerNotEmpty         Condition Add the OwnerNotEmpty Condition. Adding dialog boxes for the actions so that a user can provide the required field           values. (For instructions, see  Add the Dialog Boxes Add the Dialog Boxes.) Removing the transition from the  New  to  Open  status. Updating the  New  state with the following changes: Update the list of values for the  Resolution  and                  Status  field Adding the  Assign  and  AutoAssign  actions Removing the  Open  action Updating the  Open  state to make the  Owner  field           required. Defining transitions from the  New  to  Assigned  states, from  Assigned            to  New  and  Open  states. For details on implementing Tasks 5–8, see                Update the Workflow Configuration Update the Workflow Configuration. Before You Proceed To be able to customize a workflow in Visual Studio, you need to create an extension         library for your customization project. For details, see  To Create an Extension Library. Prepare the Graph Extension To prepare the graph extension, do the following: Add the following using             directives. using PX.Data.WorkflowAPI;
using PX.Objects.CR.Workflows; You             need the  PX.Data.WorkflowAPI  namespace to get access to workflow API,             and the  PX.Objects.CR.Workflows  to get access to the                OpportunityWorkflow  and  OpportunityMaint              classes. Declare the graph extension, as the following code           shows. public class OpportunityWorkflowExt : PX.Data.PXGraphExtension<OpportunityWorkflow, OpportunityMaint>
{
} In the graph extension, add the following service members. You will use them to declare           fields, dialog boxes, and           actions. private const string
	_fieldReason = "Reason",
	_fieldStage = "Stage",
	_fieldOwnerID = "OwnerID",
	_fieldDetails = "Details",
	_formAccept = "FormAccept",
	_formAssign = "FormAssign",
	_formReject = "FormReject",
	_actionAccept = "Accept",
	_actionReject = "Reject",
	_actionAssign = "Assign",
	_actionAutoAssign = "AutoAssign",
	_reasonUnassign = "UA",
	_reasonRejected = "RJ",
	_reasonTechnology = "TH",
	_reasonRelationship = "RL",
	_reasonPrice = "PR",
	_reasonOther = "OT",
	_reasonAssign = "NA",
	_reasonInProcess = "IP",
	_reasonFunctionality = "FC",
	_reasonCompanyMaturity = "CM",
	_reasonCanceled = "CL"; Override the  Configure  method, as the following code           shows. public override void Configure(PXScreenConfiguration config)
{
  var context = config.GetScreenConfigurationContext<OpportunityMaint, CROpportunity>();
} Add a New State Named Assigned To add the new  Assigned  state, do the following: In the graph extension, declare the  States  class, as the following code           shows. public static class States
{
	public const string
		New = "N",
		Open = "O",
		Won = "W",
		Lost = "L",
		Assigned = "A";
} In the overridden  Configure  method, declare the following             variable. var assignedState = context.FlowStates.Create(States.Assigned, state => state
	.WithFieldStates(fields =>
	{
		fields.AddField<CROpportunity.resolution>(field =>
			field.ComboBoxValues(_reasonAssign));
		fields.AddField<CROpportunity.ownerID>(field =>
			field.IsRequired());
	})
	.WithActions(actions =>
	{
		actions.Add(g => g.createSalesOrder);
		actions.Add(g => g.createInvoice);
		actions.Add(g => g.validateAddresses);
		actions.Add<OpportunityMaint.Discount>(e => e.recalculatePrices);
		actions.Add(actionReject, a => a.IsDuplicatedInToolbar());
		actions.Add(actionAccept, a => a.IsDuplicatedInToolbar());
	})); In             the code above, you define Assigned state, field values to be assigned in this state,             and action available in this state. Add the Dialog Boxes You need to add dialog boxes that will prompt users for more information when they invoke         the  Accept ,  Reject , and  Assign  actions.         The following instructions describe how to declare a dialog box for the Accept action; you         will add the other two dialog boxes by performing similar actions. To accept an opportunity, a user should provide the  Resolution  and            Stage  field values. To declare a dialog box for the            Accept  action, declare a variable for the dialog box in the overridden            Configure  method: var formAccept = context.Forms.Create(_formAccept, form => form
	.Prompt("Details")
	.WithFields(fields =>
	{
		fields.Add(_fieldReason, field => field
		  .WithSchemaOf<CROpportunity.resolution>()
		  .IsRequired()
		  .Prompt("Reason")
		  .DefaultValue(_reasonInProcess)
		  .OnlyComboBoxValues(_reasonInProcess));
		
              fields.Add(_fieldStage, field => field
		  .WithSchemaOf<CROpportunity.stageID>()
		  .Prompt("Stage"));
	})); In the code above, you create a dialog box with the Details title and add to it the         following boxes: A box based on the  CROpportunity.resolution  field, which is required           in the dialog box. The title of the corresponding box is            Reason . A box based on the  CROpportunity.stageID  field. The title of the           corresponding box is  Stage . For the  Assign  and  Reject  actions, you can declare         similar dialog boxes named  formAssign  and  formReject . You         need to add the  Owner  field based on the            CROpportunity.ownerID  field to the  formAssign  dialog         box, and you need to add the  Resolution  field and the            Details  field based on the  CROpportunity.details          field to the  formReject  dialog box. Add the OwnerNotEmpty         Condition To define a new condition, in the overridden  Configure        method, declare the following       variable. var ownerNotNullCondition = context.Conditions.FromExpr(
  opp => opp.OwnerID != null).WithSharedName("OwnerNotEmpty"); Add Actions To add the  Assign  action, declare the following variable in the overridden            Configure  method. var actionAssign = context.ActionDefinitions.CreateNew(_actionAssign, action => action
	.WithFieldAssignments(fields =>
	{
		fields.Add<CROpportunity.resolution>(f => f.SetFromValue(_reasonAssign));
		fields.Add<CROpportunity.ownerID>(f => f.SetFromFormField(formAssign, _fieldOwnerID));
	})
	.DisplayName("Assign")
	.WithForm(formAssign)
	.InFolder(FolderType.ActionsFolder, "Lost")
	.MassProcessingScreen<UpdateOpportunityMassProcess>()); In the code above, you are creating a new action; you are also specifying which field         values should change after the action is performed and which dialog box should be shown to         provide these values. Also, you are specifying the location of the action on the form         toolbar ( ActionsFolder ), the title of the action ( Assign ),         and the graph of the processing form where the action should also be displayed           ( UpdateOpportunityMassProcess ). For the  Accept  and  Reject  actions, you can add similar         variables named  actionAccept  and  actionReject . To add the auto-run  Auto-Assign  , which is performed if the            OwnerNotEmpty  condition is true, declare the following variable in the         overridden  Configure  method.  The  Auto-Assign            action is performed automatically so it should not be displayed on the form. To hide the           action from the form, you call the  IsHiddenAlways          method. var actionAutoAssign = context.ActionDefinitions.CreateNew(_actionAutoAssign, action => action
	.WithFieldAssignments(fields =>
	{
		fields.Add<CROpportunity.resolution>(f => f.SetFromValue(_reasonAssign));
	})
		.DisplayName("Auto-Assign")
              .IsHiddenAlways()
		); Update the Workflow Configuration To apply all the entities you have declared, you need to call the            UpdateScreenConfigurationFor  method in the overridden            Configure  method, as the following code shows. context.UpdateScreenConfigurationFor(screen =>
{
  return screen
    .UpdateDefaultFlow(config1 => config1.WithFlowStates
    (states =>
    {
      states.Update(States.New, state => state
       .WithFieldStates(fields =>
       {
         fields.UpdateField<CROpportunity.resolution>(field =>
          field.WithDefaultValue(_reasonUnassign)
            .ComboBoxValues(_reasonUnassign, _reasonCanceled, _reasonOther, _reasonRejected));
       })
      .WithActions(actions =>
      {
        actions.Add(actionAssign, a => a
            .IsDuplicatedInToolbar());

        actions.Add(actionAutoAssign, a => a
        .IsAutoAction(ownerNotNullCondition));
        actions.Remove("Open");
      }));
      states.Add(assignedState);
      states.Update(States.Open, state => state
        .WithFieldStates(fields =>
        {
          fields.AddField<CROpportunity.ownerID>(field =>
            field.IsRequired());
        }));
    })
    .WithTransitions(transitions =>
    {
      transitions.Remove(transition => 
        transition.From(States.New).To(States.Open).IsTriggeredOn("Open"));

      transitions.Add(transition => transition
        .From(States.New)
        .To(States.Assigned)
        .IsTriggeredOn(actionAssign));
      transitions.Add(transition => transition
        .From(States.New)
        .To(States.Assigned)
        .IsTriggeredOn(actionAutoAssign));
      transitions.Add(transition => transition
        .From(States.Assigned)
        .To(States.New)
        .IsTriggeredOn(actionReject)
        .WithFieldAssignments(fields =>
        {
          fields.Add<CROpportunity.ownerID>(f => f.SetFromExpression(null));
        })
        );
      transitions.Add(transition => transition
        .From(States.Assigned)
        .To(States.Open)
        .IsTriggeredOn(actionAccept));
    })
    )
    .WithActions(actions =>
    {
      actions.Add(actionAssign);
      actions.Add(actionAccept);
      actions.Add(actionReject);
      actions.Add(actionAutoAssign);
    })
    .WithForms(forms =>
    {
      forms.Add(formAssign);
      forms.Add(formReject);
      forms.Add(formAccept);
    })
    .WithFieldStates(fields =>
    {

      fields.Add<CROpportunity.status>(field => field
          .SetComboValues(
            (States.Assigned, "Assigned"),
            (States.New, "New"),
            (States.Open, "Open"),
            (States.Won, "Won"),
            (States.Lost, "Lost")));

      fields.Replace<CROpportunity.resolution>(field => field
        .SetComboValues(
                (_reasonTechnology, "Technology"),
                (_reasonRelationship, "Relationship"),
                (_reasonPrice, "Price"),
                (_reasonOther, "Other"),
                (_reasonAssign, "Assigned"),
                (_reasonInProcess, "In Process"),
                (_reasonFunctionality, "Functionality"),
                (_reasonCompanyMaturity, "Company Maturity"),
                (_reasonCanceled, "Canceled"),
                (_reasonRejected, "Rejected"),
                (_reasonUnassign, "Unassign")));
    })
    .WithSharedConditions(conditions => conditions.Add(ownerNotNullCondition));
}); In the code above, you are updating the workflow by doing the following: Updating the list of states as follows: Updating the  New  state by adding new combo box values to the                  CROpportunity.resolution  field, adding the                  Assign  and  AutoAssign  actions, and removing the                  Open  action Adding the  Assigned  state Updating the  Open  state by making the  Owner  field               required Updating the list of transitions as follows: Removing the transition of the  New  state to the  Open  state Adding the transition from the  New  state to the  Assigned  state               triggered by the  Assign  action Adding the transition from the  New  state to the  Assigned  state               triggered by the  AutoAssign  action Adding the transition from the  Assigned  state to the  New  state               triggered by the  Reject  action Adding the transition from the  Assigned  state to the  Open  state               triggered by the  Accept  action Adding the  Assign ,  Accept ,  Reject ,           and  AutoAssign  actions Adding the  formAssign ,  formReject , and              formAccept  dialog boxes Updating fields as follows: Adding new combo box values to the  CROpportunity.status                field Replacing the values of the  CROpportunity.resolution  field with               new ones Test the Customized Workflow To test the customized workflow, do the following: Build the extension library. In  Acumatica ERP, open the   ([~/?ScreenId=CR304000|CR304000]) Opportunities (CR304000) form. Create a new opportunity with the  Owner  box empty. On the form toolbar, click  Actions Assign . In the  Assign  dialog box, which opens, select an owner of the           opportunity and a reason, and click  OK . Notice that the status of the opportunity is changed to  Assigned . The              Owner  box now contains the owner you specified in the dialog           box. On the form toolbar, click  Actions Accept . In the  Accept  dialog box, which opens, specify a reason and a           stage, and click  OK . Notice that the status of the opportunity is changed to  Open . Create a new opportunity with the  Owner  box filled in. Notice that when the new record is saved, its status is  Assigned  instead of              New . On the form toolbar, click  Actions Reject . In the  Reject  dialog box, which opens, specify the reason and           details, and click  OK . Notice that the status of the opportunity is changed to  New . ]]></column>
		</row>
		<row PageID="3eb31485-1a98-4374-a87c-8b60e826c236" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="39c9efc5-d707-e604-6763-b0ef985d2c98" RecordSourceID="22377">
			<column name="Content"><![CDATA[
''' Acumatica mobile application''': The native mobile client applications Acumatica provides from App Store and Google Play for iOS and Android devices respectively.{br}

'''''Administrator'' role''': A user account role assigned to specialists involved with system administration. This role can assign the ''Customizer'' role to the needed users by using the [HelpRoot_FormReference\SM_20_10_10|Users] ([~/?ScreenId=SM201010|SM201010]) form.{br}

'''Attributes''' of a business entity in Acumatica ERP: Data records that contain specific information defined for a particular class, which is a grouping of entities—such as leads, opportunities, customers, cases, projects, and stock and non-stock items—that have similar properties.{br}

'''BLC''': See '''''Business logic controller'''''.{br}

'''Bound data field''': A field for which the value is stored in the database.{br}

'''Business logic controller''' (BLC, also referred to as ''graph''): A class that provides business logic for a form of Acumatica ERP.{br}

'''Code Editor''': A tool of the Customization Project Editor that is designed to edit and manage the customization code added to the customization project. For more information, see [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_CodeEditor|Code Editor].{br}

'''Customization project''': A set of changes and additional files that modifies Acumatica ERP or an Acumatica Framework-based application.{br}

'''Customization task''': A set of custom requirements to be implemented in Acumatica ERP.{br}

'''Customization Project Editor (Project Editor)''': A tool of Acumatica ERP that is designed to manage a customization project. For more information, see [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor| Customization Project                         Editor].{br}

'''''Customizer'' role''': A user account role assigned to the specialists that can use the customization tools and facilities of the Acumatica Customization           Platform, and upload and publish customization projects.{br}

'''DAC''': See '''''data access class'''''.{br}

'''Data access class '''(DAC): A class that contains field declarations and provides an abstract interface used for mapping C# objects to the database schema.{br}

'''Data Class editor''': A tool of the Project Editor that is designed to customize data access classes. For more information, see [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_DataClassEditor|Data Class Editor].{br}

'''Deployment package''': A redistributable <tt>.zip</tt> file that includes the full content of a customization project. The deployment package consists of the <tt>project.xml</tt> file and the custom files that you could have added to the project, such as external assemblies.{br}

'''Development environment''': Your local environment in which you solve a customization task.{br}

'''Extension class''': A class that contains the customization code for an original (base) class of Acumatica ERP. At run time, during the first initialization of a base class, the system automatically discovers an extension for the class and applies the customization by replacing the base class with the merged result of the base class and the discovered extension.{br}

'''Extension class for a business logic controller''': A class that contains the customization code for an original business logic controller of Acumatica ERP. An extension class for a business logic controller is derived from the <tt>PXGraphExtension&lt;T&gt;</tt> generic class.{br}

'''Extension class for a data access class''': A class that contains the customization code for an original data access class of Acumatica ERP. An extension class for a data access class is derived from the <tt>PXCacheExtension&lt;T&gt;</tt> generic class.{br}

'''Extension library''': A Microsoft Visual Studio project that is individually developed and tested, and added to the customization project as a DLL.{br}

'''Generic inquiry''': An inquiry to the database to get the information you want to view.{br}

'''Import scenario''': A scenario that is a sequence of actions to perform data migration from a legacy application to an instance of Acumatica ERP.{br}

'''Integration scenario''': An import or export scenario that is a sequence of actions to be executed for a data record to perform data migration between a legacy application and Acumatica ERP.{br}

'''Screen Editor''': The visual editor for the source code of an <tt>.aspx</tt> page. You can use it to configure ASP.NET containers, such as forms and grids, as well as to set the properties of UI controls. For more information, see [HelpRoot_Dev_Customization\CG_Platform_Tools_Editor_LayoutEditor|Screen Editor].{br}

'''Main data access class''': A data access class that is the first type parameter in a data view declaration.{br}

'''New Screen wizard''': The utility of the Project Editor that is designed to immediately create a workable template for a custom form.{br}

'''Production environment''': The environment that must be customized for the end users.{br}

'''Publication of a customization project''': The process of applying the content of the project to the current instance of Acumatica ERP.{br}

'''Source Code browser''': A tool of the Project Editor that is designed to explore the original source code of Acumatica ERP.{br}

'''Staging (or testing) environment''': The production environment copy in which you will test the solution before applying it to the production environment.{br}

'''Unbound data field''': A field that is added only to the data access class and is not mapped to the database.]]></column>
			<column name="PlainText"><![CDATA[Glossary  Acumatica mobile application : The native mobile client applications  Acumatica provides from App Store and Google Play for iOS and Android devices respectively. Administrator  role : A user account role assigned to specialists involved with       system administration. This role can assign the  Customizer  role to the needed users by       using the   ([~/?ScreenId=SM201010|SM201010]) Users (SM201010) form. Attributes  of a business entity in  Acumatica ERP: Data records that contain specific information defined for a particular class, which is a       grouping of entities—such as leads, opportunities, customers, cases, projects, and stock and       non-stock items—that have similar properties. BLC : See  Business logic controller . Bound data field : A field for which the value is stored in the database. Business logic controller  (BLC, also referred to as  graph ): A class that       provides business logic for a form of  Acumatica ERP. Code Editor : A tool of the  Customization Project Editor       that is designed to edit and manage the customization code added to the customization project.       For more information, see  Code Editor. Customization project : A set of changes and additional files that modifies  Acumatica ERP or an  Acumatica Framework-based application. Customization task : A set of custom requirements to be implemented in  Acumatica ERP. Customization Project Editor (Project Editor) : A tool of  Acumatica ERP that is designed to manage a customization project. For more information, see   Customization Project                         Editor. Customizer  role : A user account role assigned to the specialists that can use       the customization tools and facilities of the  Acumatica Customization           Platform, and upload and publish customization projects. DAC : See  data access class . Data access class  (DAC): A class that contains field declarations and provides an       abstract interface used for mapping C# objects to the database schema. Data Class editor : A tool of the  Project Editor that is designed to customize data access classes. For more information, see  Data Class Editor. Deployment package : A redistributable  .zip  file that includes the       full content of a customization project. The deployment package consists of the          project.xml  file and the custom files that you could have added to the       project, such as external assemblies. Development environment : Your local environment in which you solve a customization       task. Extension class : A class that contains the customization code for an original (base)       class of  Acumatica ERP. At run time, during the first initialization of a base class, the system automatically       discovers an extension for the class and applies the customization by replacing the base class       with the merged result of the base class and the discovered extension. Extension class for a business logic controller : A class that contains the       customization code for an original business logic controller of  Acumatica ERP. An extension class for a business logic controller is derived from the          PXGraphExtension<T>  generic class. Extension class for a data access class : A class that contains the customization code       for an original data access class of  Acumatica ERP. An extension class for a data access class is derived from the          PXCacheExtension<T>  generic class. Extension library : A Microsoft Visual Studio project that is individually developed       and tested, and added to the customization project as a DLL. Generic inquiry : An inquiry to the database to get the information you want to       view. Import scenario : A scenario that is a sequence of actions to perform data migration       from a legacy application to an instance of  Acumatica ERP. Integration scenario : An import or export scenario that is a sequence of actions to be       executed for a data record to perform data migration between a legacy application and  Acumatica ERP. Screen Editor : The visual editor for the source code of an  .aspx        page. You can use it to configure ASP.NET containers, such as forms and grids, as well as to       set the properties of UI controls. For more information, see  Screen Editor. Main data access class : A data access class that is the first type parameter in a data       view declaration. New Screen wizard : The utility of the  Project Editor that is designed to immediately create a workable template for a custom form. Production environment : The environment that must be customized for the end users. Publication of a customization project : The process of applying the content of the       project to the current instance of  Acumatica ERP. Source Code browser : A tool of the  Project Editor that is designed to explore the original source code of  Acumatica ERP. Staging (or testing) environment : The production environment copy in which you will       test the solution before applying it to the production environment. Unbound data field : A field that is added only to the data access class and is not       mapped to the database. ]]></column>
		</row>
	</rows>
</data>