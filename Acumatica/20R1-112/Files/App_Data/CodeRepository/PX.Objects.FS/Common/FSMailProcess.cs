using PX.Data;
using PX.Data.EP;
using PX.Objects.AR;
using PX.Objects.CR;
using PX.Objects.CS;
using PX.Objects.EP;
using PX.SM;
using System;
using System.Collections.Generic;
using System.Linq;

namespace PX.Objects.FS
{
    public static class FSMailProcess
    {
        public static class FSMailing
        {
            public const string EMAIL_CONFIRMATION_TO_CUSTOMER        = "NOTIFY CUSTOMER";
            public const string EMAIL_CONFIRMATION_TO_STAFF           = "NOTIFY STAFF";
            public const string EMAIL_NOTIFICATION_TO_GEOZONE_STAFF   = "NOTIFY SERVICE AREA STAFF";
            public const string EMAIL_NOTIFICATION_SIGNED_APPOINTMENT = "NOTIFY SIGNED APPOINTMENT";
        }

        public class FSNotificationContactType : NotificationContactType
        {
            public const string Customer      = "U";
            public const string EmployeeStaff = "F";
            public const string VendorStaff   = "X";
            public const string GeoZoneStaff  = "G";
            public const string Salesperson   = "L";
        }

        public static int? DefaultEMailAccountId
        {
            get
            {
                return MailAccountManager.DefaultMailAccountID;
            }
        }

        public static NotificationSource GetSource(PXGraph graph, string classID, Guid setupID, int? branchID)
        {
            var notificationSourceSet = PXSelect<NotificationSource,
                                        Where<
                                            NotificationSource.setupID, Equal<Required<NotificationSource.setupID>>,
                                            And<NotificationSource.classID, Equal<Required<NotificationSource.classID>>,
                                            And<NotificationSource.active, Equal<True>>>>>
                                        .Select(graph, setupID, classID);

            NotificationSource result = null;

            foreach (NotificationSource rec in notificationSourceSet)
            {
                if (rec.NBranchID == branchID)
                {
                    return rec;
                }

                if (rec.NBranchID == null)
                {
                    result = rec;
                }
            }

            return result;
        }

        /// <summary>
        /// Add the EmailSource.
        /// </summary>
        private static void AddEmailSource(PXGraph graph, int? sourceEmailID, RecipientList recipients)
        {
            NotificationRecipient recipient = null;

            EMailAccount emailAccountRow = PXSelect<EMailAccount,
                                           Where<
                                                 EMailAccount.emailAccountID, Equal<Required<EMailAccount.emailAccountID>>>>
                                           .Select(graph, sourceEmailID);

            if (emailAccountRow != null && emailAccountRow.Address != null)
            {
                recipient = new NotificationRecipient()
                {
                    Active = true,
                    Email = emailAccountRow.Address,
                    Hidden = false,
                    Format = "H"
                };

                if (recipient != null)
                {
                    recipients.Add(recipient);
                }
            }          
        }

        /// <summary>
        /// Add the Customer info as a recipient in the Email template generated by Appointment.
        /// </summary>
        private static void AddCustomerRecipient(AppointmentEntry graphAppointmentEntry, NotificationRecipient recSetup, RecipientList recipients)
        {   
            NotificationRecipient recipient = null;

            Customer customerRow = PXSelect<Customer,
                                   Where<
                                         Customer.bAccountID, Equal<Required<Customer.bAccountID>>>>
                                   .Select(graphAppointmentEntry, graphAppointmentEntry.ServiceOrderRelated.Current.CustomerID);

            if (customerRow == null)
            { 
                return;
            }

            FSContact fsContactRow = graphAppointmentEntry.ServiceOrder_Contact.SelectSingle();

            if (fsContactRow != null && fsContactRow.Email != null)
            {
                recipient = new NotificationRecipient()
                {
                    Active = true,
                    Email = fsContactRow.Email,
                    Hidden = recSetup.Hidden,
                    Format = recSetup.Format
                };
            }
            else
            {
                Contact srvOrdContactRow = PXSelect<Contact,
                                           Where<
                                               Contact.contactID, Equal<Required<Contact.contactID>>>>
                                           .Select(graphAppointmentEntry, graphAppointmentEntry.ServiceOrderRelated.Current.ContactID);

                if (srvOrdContactRow != null && srvOrdContactRow.EMail != null)
                {
                    recipient = new NotificationRecipient()
                    {
                        Active = true,
                        Email = srvOrdContactRow.EMail,
                        Hidden = recSetup.Hidden,
                        Format = recSetup.Format
                    };
                }
            }

            if (recipient != null)
            {
                recipients.Add(recipient);
            }
        }

        /// <summary>
        /// Add the Employee(s) info as a recipient(s) in the Email template generated by Appointment.
        /// </summary>
        private static void AddEmployeeStaffRecipient(AppointmentEntry graphAppointmentEntry,
                                                      int? bAccountID,
                                                      string type,
                                                      NotificationRecipient recSetup,
                                                      RecipientList recipients)
        {
            NotificationRecipient recipient = null;
            Contact contactRow = null;

            if (type == BAccountType.EmployeeType)
            {
                contactRow = PXSelectJoin<Contact,
                             InnerJoin<BAccount,
                             On<
                                 BAccount.parentBAccountID, Equal<Contact.bAccountID>,
                                 And<BAccount.defContactID, Equal<Contact.contactID>>>>,
                             Where<
                                 BAccount.bAccountID, Equal<Required<BAccount.bAccountID>>,
                             And<
                                 BAccount.type, Equal<Required<BAccount.type>>>>>
                             .Select(graphAppointmentEntry, bAccountID, type);
            }
            else if (type == BAccountType.VendorType)
            {
                contactRow = PXSelectJoin<Contact,
                             InnerJoin<BAccount,
                             On<
                                 Contact.contactID, Equal<BAccount.defContactID>>>,
                             Where<
                                 BAccount.bAccountID, Equal<Required<BAccount.bAccountID>>,
                             And<
                                 BAccount.type, Equal<Required<BAccount.type>>>>>
                             .Select(graphAppointmentEntry, bAccountID, type);
            }

            if (contactRow != null && contactRow.EMail != null)
            {
                recipient = new NotificationRecipient()
                {
                    Active = true,
                    Email = contactRow.EMail,
                    Hidden = recSetup.Hidden,
                    Format = recSetup.Format
                };

                if (recipient != null)
                {
                    recipients.Add(recipient);
                }
            }
        }

        /// <summary>
        /// Add the Vendor(s) info as a recipient(s) in the Email template generated by Appointment.
        /// </summary>
        private static void AddVendorStaffRecipient(AppointmentEntry graphAppointmentEntry,
                                                    FSAppointmentEmployee fsAppointmentEmployee,
                                                    NotificationRecipient recSetup,
                                                    RecipientList recipients)
        {
            //TODO: AC-142850 6082 validate Vendor's AppNotification flag
            /*
                select * from Contact
                inner join BAccount on (BAccount.BAccountID = Contact.BAccountID
                            and BAccount.DefContactID = Contact.ContactID)
                where
                BAccount.BAccountID = xx
                and BAccount.Type = 'VE'
            */

            //BAccountType.VendorType
        }

        /// <summary>
        /// Add the Employee info defined in the Notification tab defined in the <c>SrvOrdType</c> as a recipient(s) in the Email template generated by Appointment.
        /// </summary>
        private static void AddEmployeeRecipient(PXGraph graph, NotificationRecipient recSetup, RecipientList recipients)
        {
            NotificationRecipient recipient = null;

            PXResult<Contact, BAccount, EPEmployee> bqlResult = 
                                        (PXResult<Contact, BAccount, EPEmployee>)
                                        PXSelectJoin<Contact,
                                        InnerJoin<BAccount,
                                        On<
                                            Contact.bAccountID, Equal<BAccount.parentBAccountID>,
                                            And<Contact.contactID, Equal<BAccount.defContactID>>>,
                                        InnerJoin<EPEmployee,
                                        On<
                                            EPEmployee.bAccountID, Equal<BAccount.bAccountID>>>>,
                                        Where<
                                            Contact.contactID, Equal<Required<Contact.contactID>>,
                                        And<
                                            BAccount.type, Equal<Required<BAccount.type>>>>>
                                        .Select(graph, recSetup.ContactID, BAccountType.EmployeeType);

            Contact contactRow = (Contact)bqlResult;
            BAccount baccountRow = (BAccount)bqlResult;
            EPEmployee epEmployeeRow = (EPEmployee)bqlResult;            
            
            if (epEmployeeRow != null)
            {
                if (contactRow != null && contactRow.EMail != null)
                {
                    recipient = new NotificationRecipient()
                    {
                        Active = true,
                        Email = contactRow.EMail,
                        Hidden = recSetup.Hidden,
                        Format = recSetup.Format
                    };

                    if (recipient != null)
                    {
                        recipients.Add(recipient);
                    }
                }
            }
        }

        /// <summary>
        /// Add the Billing Customer info as a recipient(s) in the Email template generated by Appointment.
        /// </summary>
        private static void AddBillingRecipient(AppointmentEntry graphAppointmentEntry, NotificationRecipient recSetup, RecipientList recipients)
        { 
            NotificationRecipient recipient = null;

            if (graphAppointmentEntry.ServiceOrderRelated.Current.BillCustomerID != null)
            {
                Customer customerRow = PXSelect<Customer,
                                       Where<
                                            Customer.bAccountID, Equal<Required<Customer.bAccountID>>>>
                                       .Select(graphAppointmentEntry, graphAppointmentEntry.ServiceOrderRelated.Current.BillCustomerID);

                if (customerRow == null)
                {
                    return;
                }

                Contact contactRow = PXSelectJoin<Contact,
                                     InnerJoin<Customer,
                                     On<
                                         Contact.bAccountID, Equal<Customer.bAccountID>,
                                         And<Contact.contactID, Equal<Customer.defBillContactID>>>>,
                                     Where<
                                         Customer.bAccountID, Equal<Required<Customer.bAccountID>>>>
                                     .Select(graphAppointmentEntry, graphAppointmentEntry.ServiceOrderRelated.Current.BillCustomerID);

                if (contactRow != null && contactRow.EMail != null)
                {
                    recipient = new NotificationRecipient()
                    {
                        Active = true,
                        Email = contactRow.EMail,
                        Hidden = recSetup.Hidden,
                        Format = recSetup.Format
                    };
                }
            }

            if (recipient != null)
            {
                recipients.Add(recipient);
            }
        }

        /// <summary>
        /// Adds the Employee(s) belonging to the Appointment's Service Area as recipients in the Email template generated by Appointment.
        /// </summary>
        private static void AddGeoZoneStaffRecipient(AppointmentEntry graphAppointmentEntry, NotificationRecipient recSetup, RecipientList recipients)
        {                        
            List<FSGeoZoneEmp> geoZoneEmpList = new List<FSGeoZoneEmp>();

            FSAddress fsAddressRow = graphAppointmentEntry.ServiceOrder_Address.SelectSingle();

            if (fsAddressRow != null && fsAddressRow.PostalCode != null)
            {
                FSGeoZonePostalCode fsGeoZoneRow = StaffSelectionHelper.GetMatchingGeoZonePostalCode(graphAppointmentEntry, fsAddressRow.PostalCode);

                if (fsGeoZoneRow != null)
                {
                    var fsGeoZonePostalCodeSet = PXSelectJoin<FSGeoZonePostalCode,
                                                 InnerJoin<FSGeoZoneEmp,
                                                 On<
                                                     FSGeoZoneEmp.geoZoneID, Equal<FSGeoZonePostalCode.geoZoneID>>>,
                                                 Where<
                                                     FSGeoZonePostalCode.postalCode, Equal<Required<FSGeoZonePostalCode.postalCode>>>>
                                                 .Select(graphAppointmentEntry, fsGeoZoneRow.PostalCode);

                    foreach (PXResult<FSGeoZonePostalCode, FSGeoZoneEmp> bqlResult in fsGeoZonePostalCodeSet)
                    {
                        geoZoneEmpList.Add((FSGeoZoneEmp)bqlResult);
                    }                
                }
            }

            List<FSGeoZoneEmp> fsGeoZoneEmpGroupByEmployeeID = geoZoneEmpList.GroupBy(x => x.EmployeeID).Select(grp => grp.First()).ToList();

            if (fsGeoZoneEmpGroupByEmployeeID.Count > 0)
            {
                foreach (FSGeoZoneEmp fsGeoZoneEmpRow in fsGeoZoneEmpGroupByEmployeeID)
                {
                    AddEmployeeStaffRecipient(graphAppointmentEntry, fsGeoZoneEmpRow.EmployeeID, BAccountType.EmployeeType, recSetup, recipients);
                }
            }
        }

        /// <summary>
        /// Add the Employee email that has assigned the salesperson as a recipient in the Email template generated by Appointment.
        /// </summary>
        private static void AddSalespersonRecipient(AppointmentEntry graphAppointmentEntry, NotificationRecipient recSetup, RecipientList recipients)
        {
            NotificationRecipient recipient = null;

            PXResult<SalesPerson, EPEmployee, BAccount, Contact > bqlResult =
                                            (PXResult<SalesPerson, EPEmployee, BAccount, Contact>)
                                            PXSelectJoin<SalesPerson,
                                            InnerJoin<EPEmployee,
                                            On<
                                                EPEmployee.salesPersonID, Equal<SalesPerson.salesPersonID>>,
                                            InnerJoin<BAccount,
                                            On<
                                                BAccount.bAccountID, Equal<EPEmployee.bAccountID>>,
                                            InnerJoin<Contact,
                                            On<
                                                BAccount.parentBAccountID, Equal< Contact.bAccountID>,
                                                And<BAccount.defContactID, Equal<Contact.contactID>>>>>>,
                                            Where<
                                                SalesPerson.salesPersonID, Equal<Required<FSAppointment.salesPersonID>>>>
                                            .Select(graphAppointmentEntry, graphAppointmentEntry.AppointmentRecords.Current.SalesPersonID);

            Contact contactRow = (Contact)bqlResult;
            BAccount baccountRow = (BAccount)bqlResult;
            EPEmployee epEmployeeRow = (EPEmployee)bqlResult;
            SalesPerson SalespersonRow = (SalesPerson)bqlResult;

            if (epEmployeeRow != null && SalespersonRow != null)
            {
                if (contactRow != null && contactRow.EMail != null)
                {
                    recipient = new NotificationRecipient()
                    {
                        Active = true,
                        Email = contactRow.EMail,
                        Hidden = recSetup.Hidden,
                        Format = recSetup.Format
                    };

                    if (recipient != null)
                    {
                        recipients.Add(recipient);
                    }
                }
            }
        }

        public static RecipientList GetRecipients(AppointmentEntry graphAppointmentEntry, int? sourceID, int? sourceEmailID)
        {
            RecipientList recipients = new RecipientList();
            bool allEmailsBCC = true;

            PXResultset<NotificationRecipient> notificationRecipientSet = PXSelect<NotificationRecipient,
                                                                          Where<
                                                                              NotificationRecipient.sourceID, Equal<Required<NotificationRecipient.sourceID>>,
                                                                          And<
                                                                              NotificationRecipient.active, Equal<True>>>,
                                                                          OrderBy<
                                                                              Asc<NotificationRecipient.notificationID>>>
                                                                          .Select(graphAppointmentEntry, sourceID);

            //This loop can't be included in the following one because if all fields are BCC, the origin email account has to be placed in the first position of the array
            //so Acumatica can use it as the "To:" email account
            foreach (NotificationRecipient notificationRecipientRow in notificationRecipientSet)
            {
                if (notificationRecipientRow.Hidden == false)
                {
                    allEmailsBCC = false;
                    break;
                }
            }

            if (allEmailsBCC)
            {
                AddEmailSource(graphAppointmentEntry, sourceEmailID, recipients);
            }

            var staffMemberRowsGrouped = graphAppointmentEntry.AppointmentServiceEmployees.Select().AsEnumerable().GroupBy(
                                                                    p => ((FSAppointmentEmployee)p).EmployeeID,
                                                                    (key, group) => new
                                                                    {
                                                                        Group = (FSAppointmentEmployee)group.First()
                                                                    })

                                                                    .Select(g => g.Group).ToList();

            foreach (NotificationRecipient notificationRecipientRow in notificationRecipientSet)
            {
                switch (notificationRecipientRow.ContactType)
                {
                    case FSNotificationContactType.Customer:
                        if (graphAppointmentEntry.ServiceOrderRelated.Current.CustomerID != null)
                        {
                            AddCustomerRecipient(graphAppointmentEntry, notificationRecipientRow, recipients);
                        }

                        break;
                    case FSNotificationContactType.EmployeeStaff:
                        foreach (FSAppointmentEmployee fsAppointmentEmployeeRow in staffMemberRowsGrouped)
                        {
                            AddEmployeeStaffRecipient(graphAppointmentEntry, fsAppointmentEmployeeRow.EmployeeID, fsAppointmentEmployeeRow.Type, notificationRecipientRow, recipients);
                        }

                        break;
                    case FSNotificationContactType.VendorStaff:
                        foreach (FSAppointmentEmployee fsAppointmentEmployeeRow in staffMemberRowsGrouped)
                        {
                            AddVendorStaffRecipient(graphAppointmentEntry, fsAppointmentEmployeeRow, notificationRecipientRow, recipients);
                        }

                        break;
                    case FSNotificationContactType.Employee:
                        AddEmployeeRecipient(graphAppointmentEntry, notificationRecipientRow, recipients);
                        break;
                    case FSNotificationContactType.Billing:
                        AddBillingRecipient(graphAppointmentEntry, notificationRecipientRow, recipients);
                        break;
                    case FSNotificationContactType.GeoZoneStaff:
                        AddGeoZoneStaffRecipient(graphAppointmentEntry, notificationRecipientRow, recipients);
                        break;
                    case FSNotificationContactType.Salesperson:
                        AddSalespersonRecipient(graphAppointmentEntry, notificationRecipientRow, recipients);
                        break;
                    default:
                        break;
                }
            }

            //The only element in the list is the From and the email shouldn't be sent
            if (recipients.Count() == 1 && allEmailsBCC == true)
            {
                recipients = null;
            }

            return recipients;
        }

        /// <summary>
        /// Returns the emails address for the "To" and "BCC" sections.
        /// </summary>
        private static void GetsRecipientsFields(IEnumerable<NotificationRecipient> notificationRecipientSet, ref string emailToAccounts, ref string emailBCCAccounts)
        {
            bool firstToElement = true;
            bool firstBCCElement = true;

            foreach (NotificationRecipient notificationRecipientRow in notificationRecipientSet)
            {
                if (notificationRecipientRow.Hidden == false)
                {
                    if (firstToElement == true)
                    {
                        firstToElement = false;
                        emailToAccounts = notificationRecipientRow.Email;
                    }
                    else
                    {
                        emailToAccounts = emailToAccounts + "; " + notificationRecipientRow.Email;
                    }
                }
                else
                {
                    if (firstBCCElement == true)
                    {
                        firstBCCElement = false;
                        emailBCCAccounts = notificationRecipientRow.Email;
                    }
                    else
                    {
                        emailBCCAccounts = emailBCCAccounts + "; " + notificationRecipientRow.Email;
                    }
                }
            }

            return;
        }

        public static void SendNotification(AppointmentEntry graphAppointmentEntry, PXCache sourceCache, string notificationCD, int? branchID, IDictionary<string, string> parameters, IList<Guid?> attachments = null)
        {
            if (sourceCache.Current == null)
            {
                throw new PXException(PX.Objects.CR.Messages.EmailNotificationError);
            }

            Guid? setupID = new NotificationUtility(graphAppointmentEntry).SearchSetupID(FSNotificationSource.Appointment, notificationCD);

            if (setupID == null)
            {
                sourceCache.RaiseExceptionHandling<FSAppointment.srvOrdType>(sourceCache.Current,
                                                                             ((FSAppointment)sourceCache.Current).SrvOrdType,
                                                                             new PXSetPropertyException(CR.Messages.EmailNotificationSetupNotFound,
                                                                                                        PXErrorLevel.Warning,
                                                                                                        notificationCD));
                return;
            }

            if (branchID == null)
            {
                branchID = graphAppointmentEntry.Accessinfo.BranchID;
            }

            if (parameters == null)
            {
                parameters = new Dictionary<string, string>();

                foreach (string key in sourceCache.Keys)
                {
                    object value = sourceCache.GetValueExt(sourceCache.Current, key);
                    parameters[key] = value != null ? value.ToString() : null;
                }
            }

            Send(graphAppointmentEntry, sourceCache, (Guid)setupID, branchID, parameters, attachments);
        }

        private static void Send(AppointmentEntry graphAppointmentEntry, PXCache sourceCache, Guid setupID, int? branchID, IDictionary<string, string> reportParams, IList<Guid?> attachments = null)
        {
            string emailToAccounts, emailBCCAccounts;
            emailToAccounts  = string.Empty;
            emailBCCAccounts = string.Empty;

            FSAppointment fsAppointmentRow = graphAppointmentEntry.AppointmentRecords.Current;

            Guid? refNoteId = fsAppointmentRow.NoteID;
            Guid? parentNoteId = null;

            string srvOrdType = fsAppointmentRow.SrvOrdType;

            NotificationSetup notificationSetup = PXSelect<NotificationSetup,
                Where<NotificationSetup.setupID, Equal<Required<NotificationSetup.setupID>>>>.
                Select(graphAppointmentEntry, setupID);
            string notificationCD = notificationSetup?.NotificationCD;

            NotificationSource source = GetSource(graphAppointmentEntry, srvOrdType, setupID, branchID);

            if (source == null)
            {
                //The current Notification Type (MailingID) is not configured for this Service Order Type
                return;
            }

            var accountId = source.EMailAccountID ?? DefaultEMailAccountId;

            if (accountId == null)
            {
                throw new PXException(TX.Warning.EMAIL_ACCOUNT_NOT_CONFIGURED_FOR_MAILING,
                                notificationCD,
                                srvOrdType,
                                PX.Data.ActionsMessages.PreferencesEmailMaint);
            }

            RecipientList recipients = GetRecipients(graphAppointmentEntry, source.SourceID, accountId);

            if (recipients == null || recipients.Count() == 0) 
            {
                return;
            }

            GetsRecipientsFields(recipients, ref emailToAccounts, ref emailBCCAccounts);

			var sent = false;

			if (source.ReportID != null)
			{
				var sender = new ReportNotificationGenerator(source.ReportID)                
				{
					MailAccountId = accountId,
					Format = source.Format,                    
					AdditionalRecipents = recipients,
					Parameters = reportParams,
					NotificationID = source.NotificationID
				};

				sent |= sender.Send().Any();
			}
			else if (source.NotificationID != null)
			{
				var sender = TemplateNotificationGenerator.Create(fsAppointmentRow, (int)source.NotificationID);

				if (source.EMailAccountID != null)
				{
					sender.MailAccountId = accountId;
				}

                string notificationBody = sender.Body;
                FSAppointment.ReplaceWildCards(graphAppointmentEntry, ref notificationBody, fsAppointmentRow);

                sender.Body = notificationBody;
                sender.BodyFormat = source.Format;
                sender.RefNoteID = refNoteId;
                sender.ParentNoteID = parentNoteId;
                sender.To = emailToAccounts;
                sender.Bcc = emailBCCAccounts;

                if (attachments != null)
                {
                    foreach (var attachment in attachments)
                    { 
                        if (attachment != null)
                        {
                            sender.AddAttachmentLink(attachment.Value);
                        }
                    }
                }

                sent |= sender.Send().Any();
			}

            if (!sent)
            {
                throw new PXException(CR.Messages.EmailNotificationError);
            }
        }
    }
}
