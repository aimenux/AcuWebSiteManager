<?xml version="1.0" encoding="utf-8"?>
<data>
	<table name="WikiRevision">
		<col name="CompanyID" type="Int" default="Zero" />
		<col name="PageID" type="UniqueIdentifier" />
		<col name="Language" type="VarChar(50)" />
		<col name="PageRevisionID" type="Int" />
		<col name="Content" type="NVarChar(MAX)" />
		<col name="ContentHtml" type="NVarChar(MAX)" nullable="true" />
		<col name="PlainText" type="NVarChar(MAX)" />
		<col name="ApprovalByID" type="UniqueIdentifier" nullable="true" />
		<col name="ApprovalDateTime" type="DateTime" nullable="true" />
		<col name="CreatedByID" type="UniqueIdentifier" />
		<col name="CreatedDateTime" type="DateTime" />
		<col name="CompanyMask" type="VarBinary(32)" default="CompanyMaskReadOnly" />
		<col name="UID" type="UniqueIdentifier" />
		<col name="RecordSourceID" type="SmallInt" nullable="true" />
	</table>
	<rows>
		<row PageID="b1d5f89e-21a1-4c7c-8204-edb98c71a7cc" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="70bcb8ab-72a7-a6be-4b1c-f6d02427131b" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can create a client application that is integrated with Acumatica ERP through the contract-based SOAP web services API, as described in this topic.{br}{TOC}[anchor|#_98998c25-3d30-4ada-8d56-68c8759e1952]
==1. Select a System Endpoint or Create a Custom Endpoint==
Depending on the requirements of your application, you select the contract-based API endpoint that your application will use. On the [HelpRoot_FormReference\SM_20_70_60|Web Service Endpoints] ([~/?ScreenId=SM207060|SM207060]) form, which is shown in the following screenshot, you review the list of entities, fields, and actions in the system endpoints, which are available in the system by default. If the APIs provided by the system endpoints of Acumatica ERP does not meet the requirements of your application, you create a custom endpoint by extending an existing endpoint or from scratch.[anchor|#_070e177d-8858-41bb-980c-3c7ac4295f41][image:QuickGuides/Images/QG__Creating_C-B_SOAP_API_application_Step1.png|popup|450px]{br}

For details, see [HelpRoot_Dev_Integration\IS__con_CB_Endpoints_and_Contracts|Endpoints and Contracts], [HelpRoot_Dev_Integration\IS__how_Extend_Endpoint|To Extend an Existing Endpoint], and [HelpRoot_Dev_Integration\IS__how_Create_Endpoint|To Create a Custom Endpoint].[anchor|#_a8cb25ca-4895-4f67-b00f-063b951cb6b6]
==2. Configure the Client Application==
You import the WSDL description of the contract-based API endpoint into a Visual Studio project of your application by adding the service reference to the application, as shown in the following screenshot.[anchor|#_185cd0f8-e9e5-4ba1-ab6f-6579cc0bca61][image:QuickGuides/Images/QG__Creating_C-B_SOAP_API_application_Step2.png|popup|450px]{br}

You configure the <tt>app.config</tt> file of the application so that the client application uses cookies and, if necessary, HTTPS. The following code shows a sample configuration of the <tt>app.config</tt> file.[anchor|#_0113b61a-5ecc-4aa3-ad58-dfe97e95bb69]<source lang="xml">&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;configuration&gt;
  ...
  &lt;system.serviceModel&gt;
    &lt;bindings&gt;
      &lt;basicHttpBinding&gt;
        &lt;binding name="Acumatica" allowCookies="true" 
         maxReceivedMessageSize="6553600"&gt;
          &lt;security mode="Transport" /&gt;
        &lt;/binding&gt;
        ...
      &lt;/basicHttpBinding&gt;
    &lt;/bindings&gt;
    &lt;client&gt;
      &lt;endpoint address=
       "https://localhost/WebServiceAPITest/entity/Default/17.200.001"
       binding="basicHttpBinding" bindingConfiguration="Acumatica"
       contract="Default.DefaultSoap" name="DefaultSoap" /&gt;
    &lt;/client&gt;
  &lt;/system.serviceModel&gt;
&lt;/configuration&gt;</source>{br}

For more information, see [HelpRoot_Dev_Integration\IS__how_CB_Configure_Application|To Configure the Client Application].[anchor|#_ff782e25-305d-4eb5-b0e7-6790b1dc3d12]
==3. Log In to Acumatica ERP in the Client Application==[anchor|#_227a1355-3dc5-4935-b185-bdadbad7e82b]
You use the <tt>Login()</tt> method of a <tt>DefaultSoapClient</tt> object to make the client application sign in to Acumatica ERP.[anchor|#_9e871a3c-6473-4926-aa74-7922b8714f55]{br}

The following code causes the client to sign in to Acumatica ERP by using the parameters that are specified in the application settings.[anchor|#_215c688c-d457-4665-a37c-9d6427d75eda]{{{{using (var soapClient = new DefaultSoapClient())
{
  //Log in to Acumatica ERP
  soapClient.Login
  (
    Properties.Settings.Default.UserName,
    Properties.Settings.Default.Password,
    Properties.Settings.Default.TenantName,
    Properties.Settings.Default.CompanyName,
    null
  );
}
}}}}For details, see [HelpRoot_Dev_Integration\IS__con_CB_Login|Login() Method].[anchor|#_c5b78c1d-a711-46f7-a5c0-c21351b9308f]
==4. Implement the Functionality of the Client Application==
In the code of your application, you implement the functionality that you need the application to perform. {br}

For details on the API methods that you can use in the application, see [HelpRoot_Dev_Integration\IS__IS_CB_API_Reference|Contract-Based SOAP API Reference].[anchor|#_a43a6901-3ce4-4270-ae0d-cc0f32da6246]
==5. Log Out from Acumatica ERP in the Client Application==[anchor|#_12bb2534-42db-47fb-ba4e-93dab6dcf23c]
You use the <tt>Logout()</tt> method of a <tt>DefaultSoapClient</tt> object to make the client application sign out from Acumatica ERP.[anchor|#_40159e6a-1132-42fb-a575-bcdf6311df04]{br}

For each call of the <tt>Login()</tt> method, you must call the <tt>Logout()</tt> method after you finish your work with Acumatica ERP to close the session. Therefore, we recommend that you call the <tt>Logout()</tt> method within the {{finally}} block.[anchor|#_832917d1-ecb1-42bc-8df7-c2bdae05e7da]{br}

The following code shows how to make the client application sign out from Acumatica ERP.{{{{using (var soapClient = new DefaultSoapClient())
{
  //Sign in to Acumatica ERP
  ...
  try
  {
    //Work with Acumatica ERP through the web services API
  }
  finally
  {
    //Sign out from Acumatica ERP
    soapClient.Logout();
  }
}
}}}}{br}

For more information, see [HelpRoot_Dev_Integration\IS__con_CB_Logout|Logout() Method].]]></column>
			<column name="PlainText"><![CDATA[Creating a Contract-Based SOAP API Application You can create a client application that is integrated with  Acumatica ERP through the contract-based SOAP web services API, as described in this topic. 1. Select a System Endpoint or Create a Custom Endpoint Depending on the requirements of your application, you select the contract-based API endpoint         that your application will use. On the   ([~/?ScreenId=SM207060|SM207060]) Web Service Endpoints (SM207060)         form, which is shown in the following screenshot, you review the list of entities, fields,         and actions in the system endpoints, which are available in the system by default. If the         APIs provided by the system endpoints of  Acumatica ERP does not meet the requirements of your application, you create a custom endpoint by         extending an existing endpoint or from scratch. For details, see  Endpoints and Contracts,  To Extend an Existing Endpoint,         and  To Create a Custom Endpoint. 2. Configure the Client Application You import the WSDL description of the contract-based API endpoint into a Visual Studio         project of your application by adding the service reference to the application, as shown in         the following screenshot. You configure the  app.config  file of the application so that the         client application uses cookies and, if necessary, HTTPS. The following code shows a sample         configuration of the  app.config          file. <?xml version="1.0" encoding="utf-8" ?>
<configuration>
  ...
  <system.serviceModel>
    <bindings>
      <basicHttpBinding>
        <binding name="Acumatica" allowCookies="true" 
         maxReceivedMessageSize="6553600">
          <security mode="Transport" />
        </binding>
        ...
      </basicHttpBinding>
    </bindings>
    <client>
      <endpoint address=
       "https://localhost/WebServiceAPITest/entity/Default/17.200.001"
       binding="basicHttpBinding" bindingConfiguration="Acumatica"
       contract="Default.DefaultSoap" name="DefaultSoap" />
    </client>
  </system.serviceModel>
</configuration> For more information, see  To Configure the Client Application. 3. Log In to  Acumatica ERP in the Client Application You use the  Login()  method of a                  DefaultSoapClient  object to make the client application sign in             to  Acumatica ERP. The following code causes the client to sign in to  Acumatica ERP by using       the parameters that are specified in the application       settings. using (var soapClient = new DefaultSoapClient())
{
  //Log in to  Acumatica ERP
  soapClient.Login
  (
    Properties.Settings.Default.UserName,
    Properties.Settings.Default.Password,
    Properties.Settings.Default.TenantName,
    Properties.Settings.Default.CompanyName,
    null
  );
} For details, see  Login() Method. 4. Implement the Functionality of the Client Application In the code of your application, you implement the functionality that you need the         application to perform.  For details on the API methods that you can use in the application, see  Contract-Based SOAP API Reference. 5. Log Out from  Acumatica ERP in the Client Application You use the  Logout()  method of a                  DefaultSoapClient  object to make the client application sign out             from  Acumatica ERP. For each call of the  Login()              method, you must call the  Logout()  method after you finish your work             with  Acumatica ERP             to close the session. Therefore, we recommend that you call the                  Logout()  method within the  finally  block. The following code shows how to make the client       application sign out from  Acumatica ERP. using (var soapClient = new DefaultSoapClient())
{
  //Sign in to  Acumatica ERP
  ...
  try
  {
    //Work with  Acumatica ERP through the web services API
  }
  finally
  {
    //Sign out from  Acumatica ERP
    soapClient.Logout();
  }
} For more information, see  Logout() Method. ]]></column>
		</row>
	</rows>
</data>