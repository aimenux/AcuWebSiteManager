<?xml version="1.0" encoding="utf-8"?>
<data>
	<table name="WikiRevision">
		<col name="CompanyID" type="Int" default="Zero" />
		<col name="PageID" type="UniqueIdentifier" />
		<col name="Language" type="VarChar(50)" />
		<col name="PageRevisionID" type="Int" />
		<col name="Content" type="NVarChar(MAX)" />
		<col name="ContentHtml" type="NVarChar(MAX)" nullable="true" />
		<col name="PlainText" type="NVarChar(MAX)" />
		<col name="ApprovalByID" type="UniqueIdentifier" nullable="true" />
		<col name="ApprovalDateTime" type="DateTime" nullable="true" />
		<col name="CreatedByID" type="UniqueIdentifier" />
		<col name="CreatedDateTime" type="DateTime" />
		<col name="CompanyMask" type="VarBinary(32)" default="CompanyMaskReadOnly" />
		<col name="UID" type="UniqueIdentifier" />
		<col name="RecordSourceID" type="SmallInt" nullable="true" />
	</table>
	<rows>
		<row PageID="0f484be7-8b40-4276-9d9a-5dcbc8d6e047" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="d64b4e01-0529-0a1c-65dc-6c3ed99655cd" RecordSourceID="22377">
			<column name="Content"><![CDATA[
 Acumatica ERP provides reporting tools to deliver customized business intelligence to everybody in your organization. By using Acumatica ERP reporting tools, you can develop new or modify existing reports, which can be delivered online, converted to PDF, or delivered by email. Reporting tools can be made available to users of the instance, and their access can be limited if necessary. You can distribute generic inquiries, reports, shared reusable filters, access rights to these objects and analytical reports as a part of a customization project. For more details, see [HelpRoot_Dev_Customization\CG_Platform_Project|Customization Project].{br}

 Acumatica ERP system offers a collection of reporting and analytic resources to make your job easier and more productive. Tools provided by Acumatica ERP allow to work with important data presented in a right format to make decisions about your business or react to competitive market challenges. Reporting goes beyond the balance sheet and cash flow statements. To get the full benefits of your business processes, Acumatica ERP reporting tools make it possible to spot good and bad trends quickly, so that you can take action right away.{br}

The tools of the Reporting module are generic inquiries, pivot tables, dashboard pages, Power BI pages, shared filters, analytical reports, and the Acumatica Report                         Designer.
==Generic Inquiries==
You can create generic inquiries to get the information you want to view from the Acumatica ERP database. To design the generic inquiries, you do not need to have programming skills. You can view on the fly how each inquiry looks, and you can test its functionality by selecting parameters and viewing the results. Additionally, you can use generic inquiries to expose data from Acumatica ERP to OData clients, such as Microsoft Power BI and Microsoft Excel. For more information, see [HelpRoot_ReportingTools\SM__MNG_Managing_Generic_Inquiry|Managing Generic Inquiries].
==Pivot Tables==
In Acumatica ERP, you can build pivot tables based on the data from generic inquiries. A pivot table is a program tool that you use to reorganize and summarize data in a generic inquiry to view it from different perspectives. You can set up and change the pivot table structure by dragging fields to the panes. For details, see [HelpRoot_ReportingTools\SM__mng_Managing_Pivot_Tables|Managing Pivot Tables].
==Dashboards pages==
Dashboards are an important and convenient tool for monitoring and analyzing critical business information. Dashboard pages consist of widgets, such as charts, data tables, embedded pages, Power BI tiles, scorecard key performance indicators (KPIs), trend card KPIs, and wiki pages. {br}

You can customize dashboard pages so that users can view important information and quickly access further details. On the [HelpRoot_FormReference\SM_20_86_00|Dashboards] ([~/?ScreenId=SM208600|SM208600]) form, you can add dashboard pages, specify their locations in the site map, and set up access rights to dashboard pages. For more information, see [HelpRoot_ReportingTools\CU__mng_Dashboards|Managing Dashboard Pages]. 
==Power BI Pages==
In Acumatica ERP, you can build external applications into the product. For example, you can build Microsoft Power BI reports into Acumatica ERP to be displayed as Acumatica ERP forms. For more information, see [HelpRoot_ReportingTools\RP__Integration_Power_BI|Managing Power BI Integration]
==Analytical Reports==
Analytical reports in Acumatica ERP can be created with the Analytical Report Manager (ARM) toolkit. Reports that are constructed with this toolkit are called ARM reports to distinguish them from the reports created in the Acumatica Report                         Designer. {br}

The Analytical Report Manager toolkit gives you the ability to create financial reports that retrieve the amounts posted to particular General Ledger accounts and subaccounts. You can use the ARM toolkit rather than the Acumatica Report                         Designer to create financial reports that display data that is posted to the General Ledger accounts and accumulated in the General Ledger module. The ARM toolkit can also be used to create project accounting reports that display data accumulated in the Projects module. For more information, see [HelpRoot_ReportingTools\GL__GL_ARM_Reports|Managing Analytical Reports].
== Report Designer==
 Acumatica Report                         Designer provides visual tools that you can use to design custom reports. With the Acumatica Report                         Designer, you can select data for a report, calculate required values based on the selected data, and customize a report layout. For more information, see [HelpRoot_ReportingTools\ReportDesigner_Main| Acumatica Report                         Designer Guide].
==Third-Party Reporting Solutions==
 Acumatica ERP is supported by over 100 Independent Software Vendors (ISVs) who develop products that integrate seamlessly with Acumatica ERP software. These products provide great capabilities to gain control over your reporting and business analytics. For more information, see [HelpRoot_ReportingTools\rp_3rdparty|Third-Party Reporting Solutions]
==Related Articles==
*[HelpRoot_ReportingTools\SM__MNG_Managing_Generic_Inquiry|Managing Generic Inquiries]
*[HelpRoot_ReportingTools\SM__mng_Managing_Pivot_Tables|Managing Pivot Tables]
*[HelpRoot_ReportingTools\CU__mng_Dashboards|Managing Dashboard Pages]
*[HelpRoot_ReportingTools\RP__Integration_Power_BI|Managing Power BI Integration]
*[HelpRoot_ReportingTools\GL__GL_ARM_Reports|Managing Analytical Reports]
*[HelpRoot_ReportingTools\ReportDesigner_Main| Acumatica Report                         Designer Guide]]]></column>
			<column name="PlainText"><![CDATA[Overview of Reporting   Acumatica ERP provides reporting tools to deliver customized business intelligence to everybody in your         organization. By using  Acumatica ERP reporting tools, you can develop new or modify existing reports, which can be delivered         online, converted to PDF, or delivered by email. Reporting tools can be made available to         users of the instance, and their access can be limited if necessary. You can distribute         generic inquiries, reports, shared reusable filters, access rights to these objects and         analytical reports as a part of a customization project. For more details, see  Customization Project.  Acumatica ERP system offers a collection of reporting and analytic resources to make your job easier         and more productive. Tools provided by  Acumatica ERP allow to work with important data presented in a right format to make decisions about         your business or react to competitive market challenges. Reporting goes beyond the balance         sheet and cash flow statements. To get the full benefits of your business processes,  Acumatica ERP reporting tools make it possible to spot good and bad trends quickly, so that you can         take action right away. The tools of the Reporting module are generic inquiries, pivot tables,         dashboard pages, Power BI pages, shared filters, analytical reports, and the  Acumatica Report                         Designer. Generic Inquiries You can create generic inquiries to get the information you want to view from the  Acumatica ERP database. To design the generic inquiries, you do not need to have programming skills.         You can view on the fly how each inquiry looks, and you can test its functionality by         selecting parameters and viewing the results. Additionally, you can use generic inquiries to         expose data from  Acumatica ERP to OData clients, such as Microsoft Power BI and Microsoft Excel. For more information,         see  Managing Generic Inquiries. Pivot Tables In  Acumatica ERP, you can build pivot tables based on the data from generic inquiries. A pivot table is a         program tool that you use to reorganize and summarize data in a generic inquiry to view it         from different perspectives. You can set up and change the pivot table structure by dragging         fields to the panes. For details, see  Managing Pivot Tables. Dashboards pages Dashboards are an important and convenient tool for monitoring and analyzing critical         business information. Dashboard pages consist of widgets, such as charts, data tables,         embedded pages, Power BI tiles, scorecard key performance indicators (KPIs), trend card         KPIs, and wiki pages.  You can customize dashboard pages so that users can view important information and quickly         access further details. On the   ([~/?ScreenId=SM208600|SM208600]) Dashboards (SM208600) form, you can add         dashboard pages, specify their locations in the site map, and set up access rights to         dashboard pages. For more information, see  Managing Dashboard Pages.  Power BI Pages In  Acumatica ERP, you can build external applications into the product. For example, you can build         Microsoft Power BI reports into  Acumatica ERP to be displayed as  Acumatica ERP forms. For more information, see  Managing Power BI IntegrationAnalytical Reports Analytical reports in  Acumatica ERP can be created with the Analytical Report Manager (ARM) toolkit. Reports that are         constructed with this toolkit are called ARM reports to distinguish them from the reports         created in the  Acumatica Report                         Designer.  The Analytical Report Manager toolkit gives you the ability to create financial reports         that retrieve the amounts posted to particular General Ledger accounts and subaccounts. You         can use the ARM toolkit rather than the  Acumatica Report                         Designer to create financial reports that display data that is posted to the General Ledger         accounts and accumulated in the General Ledger module. The ARM toolkit can also be used to         create project accounting reports that display data accumulated in the Projects module. For         more information, see  Managing Analytical Reports.  Report Designer  Acumatica Report                         Designer provides visual tools that you can use to design custom reports. With the  Acumatica Report                         Designer, you can select data for a report, calculate required values based on the selected data,         and customize a report layout. For more information, see   Acumatica Report                         Designer Guide. Third-Party Reporting Solutions  Acumatica ERP is supported by over 100 Independent Software Vendors (ISVs) who develop products that         integrate seamlessly with  Acumatica ERP software. These products provide great capabilities to gain control over your reporting         and business analytics. For more information, see  Third-Party Reporting Solutions]]></column>
		</row>
		<row PageID="5737bca9-aebb-446d-9e1a-bc5fcfad6797" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="950dba76-3b0b-a0d8-e787-f8c38dc11e0c" RecordSourceID="22377">
			<column name="Content"><![CDATA[
A generic inquiry is an integrated Acumatica ERP tool that has an easy-to-use web-based interface and gives you the ability to pull data from the Acumatica ERP database and display it on a customizable form. Generic inquiries can be used as dashboard widgets and list entry points, and to create pivot tables.{br}

In Acumatica ERP, you can create and manage generic inquiry forms without having any programming skills by using the [HelpRoot_FormReference\SM_20_80_00|Generic Inquiry] ([~/?ScreenId=SM208000|SM208000]) form. You can edit the view and the titles of the generic inquiry form, and arrange the form elements as you need. After you save your changes, you can immediately review them.{br}

Additionally, you can create multiple pivot tables for each generic inquiry. You can use pivot tables to reorganize and summarize data in a generic inquiry, to view it from different perspectives. For more information, see [HelpRoot_ReportingTools\SM__con_Pivot_Tables|Pivot Tables in Acumatica ERP].{br}

This part of the Reporting module documentation provides step-by-step instructions on creating and customizing inquiry forms.
==In This Part==[anchor|#ul_l3w_d5z_3m]
*[HelpRoot_ReportingTools\rp_tools_GI_Overview|Generic Inquiry Overview]
*[HelpRoot_ReportingTools\RP__CON_tools_gi_design|Creation of Generic Inquiries]
*[HelpRoot_ReportingTools\rp__con_tools_gi_accessrights|Access Rights to Generic Inquiries]
]]></column>
			<column name="PlainText"><![CDATA[Managing Generic Inquiries A generic inquiry is an integrated  Acumatica ERP tool that has an easy-to-use web-based interface and gives you the ability to pull data         from the  Acumatica ERP database and display it on a customizable form. Generic inquiries can be used as         dashboard widgets and list entry points, and to create pivot tables. In  Acumatica ERP, you can create and manage generic inquiry forms without having any programming skills by         using the   ([~/?ScreenId=SM208000|SM208000]) Generic Inquiry (SM208000) form. You can edit the view and the         titles of the generic inquiry form, and arrange the form elements as you need. After you         save your changes, you can immediately review them. Additionally, you can create multiple pivot tables for each generic inquiry. You can use         pivot tables to reorganize and summarize data in a generic inquiry, to view it from         different perspectives. For more information, see  Pivot Tables in Acumatica ERP. This part of the Reporting module documentation provides step-by-step instructions on         creating and customizing inquiry forms. In This Part Generic Inquiry OverviewCreation of Generic InquiriesAccess Rights to Generic Inquiries]]></column>
		</row>
		<row PageID="d1138556-45b3-46ce-9dcd-cb2a4c5a7003" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="54bb42fd-1692-f906-8fae-85dff8599fcc" RecordSourceID="22377">
			<column name="Content"><![CDATA[
Generic inquiries provide non-programmers with an easy-to-use web-based interface to create inquiries and add them to the system. A generic inquiry is an Acumatica ERP form based on a query that collects data from the Acumatica ERP database and displays the query results. A user can work with a generic inquiry in various ways (such as filtering data, sorting data, changing the column order, and adding or removing columns), as a user can with other Acumatica ERP inquiry forms. {br}

By using a generic inquiry, you can create data inquiry forms that are customized to fit specific business needs. Many of the reporting features in Acumatica ERP are built based on the generic inquiry functionality. First you build a generic inquiry, and then you can build other entities based on it. For example, you can use a generic inquiry as a dashboard widget, a list entry point, and a base for pivot tables.
==Dashboard Widgets==
Generic inquiries can be used as widgets for dashboards, where the widgets are displayed on a single page to provide information at a glance. For more information, see [HelpRoot_ReportingTools\CU__mng_Dashboards|Managing Dashboard Pages].
==Base for Pivot Tables==
Pivot tables can be based on generic inquiries. In this case, the data provided by generic inquiries can be reorganized and summarized to analyze it from various perspectives. This can be useful when there is a large amount of generic inquiry data and you want to build aggregate reports based on this data. For more details, see [HelpRoot_ReportingTools\SM__con_Pivot_Tables|Pivot Tables].
==Generic Inquiry as an Entry Point==
Entry or maintenance forms are convenient for entering new data, but once you have entered most data, you may need to view the list of records instead. You can create generic inquiry forms that present data in a tabular format for any Acumatica ERP entry or maintenance form (which is called the primary form in this context). {br}

Optionally, you can replace the primary form with the generic inquiry you have created, which in this case functions as a ''substitute form''. Thus, when you click the name of the primary form in the navigation pane, you will access the substitute form (the generic inquiry) containing the list of records, and when you click the name in the list, the primary form will open for that record. {br}

There are more than 130 predefined generic inquiries available in Acumatica ERP, any of which can be used as entry points. For more details on configuring a generic inquiry to be used as an entry point, see [HelpRoot_Administration\SM__con_Primary_Screen_As_List|Substitutes for Entry Forms] and [HelpRoot_Administration\SM__how_To_Set_Up_Primary_Screen_As_List|To Configure a Generic Inquiry to Replace an Entry Form].
==OData==
Generic inquiries can use the [HelpRoot_ReportingTools\CU__con_OData|OData] communication protocol. OData is a delivery mechanism similar to HTTPS. It allows the secure delivery of Acumatica ERP data to Microsoft Excel, Power BI, and other supported applications.]]></column>
			<column name="PlainText"><![CDATA[Generic Inquiry Overview Generic inquiries provide non-programmers with an easy-to-use         web-based interface to create inquiries and add them to the system. A generic inquiry is an            Acumatica ERP form based on a query that collects data from the  Acumatica ERP database and displays the query results. A user can work with a generic inquiry in         various ways (such as filtering data, sorting data, changing the column order, and adding or         removing columns), as a user can with other  Acumatica ERP inquiry forms.  By using a generic inquiry, you can create data inquiry forms that are customized to fit         specific business needs. Many of the reporting features in  Acumatica ERP are built based on the generic inquiry functionality. First you build a generic inquiry,         and then you can build other entities based on it. For example, you can use a generic         inquiry as a dashboard widget, a list entry point, and a base for pivot tables. Dashboard Widgets Generic inquiries can be used as widgets for dashboards, where the widgets are displayed on         a single page to provide information at a glance. For more information, see  Managing Dashboard           Pages Managing Dashboard Pages. Base for Pivot Tables Pivot tables can be based on generic inquiries. In this case, the data provided by generic         inquiries can be reorganized and summarized to analyze it from various perspectives. This         can be useful when there is a large amount of generic inquiry data and you want to build         aggregate reports based on this data. For more details, see  Pivot         Tables Pivot Tables. Generic Inquiry as an Entry Point Entry or maintenance forms are convenient for entering new data, but once you have entered         most data, you may need to view the list of records instead. You can create generic inquiry         forms that present data in a tabular format for any  Acumatica ERP entry or maintenance form (which is called the primary form in this context).  Optionally, you can replace the primary form with the generic inquiry you have created,         which in this case functions as a  substitute form . Thus, when you click the name of         the primary form in the navigation pane, you will access the substitute form (the generic         inquiry) containing the list of records, and when you click the name in the list, the         primary form will open for that record.  There are more than 130 predefined generic inquiries available in  Acumatica ERP, any of which can be used as entry points. For more details on configuring a generic         inquiry to be used as an entry point, see  Substitutes for Entry Forms         and  To Configure a Generic Inquiry to Replace an Entry Form. OData Generic inquiries can use the  OData OData communication         protocol. OData is a delivery mechanism similar to HTTPS. It allows the secure delivery of            Acumatica ERP data to Microsoft Excel, Power BI, and other supported applications. ]]></column>
		</row>
		<row PageID="958345a7-f4df-43fd-a397-d109be7af881" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="7a7f0662-6a4c-7050-06d7-7a18072bf436" RecordSourceID="22377">
			<column name="Content"><![CDATA[
A generic inquiry is a customizable data inquiry screen you can create. A generic inquiry collects the user-defined data strings from the Acumatica ERP database. Then the system optionally compares the collected data strings with other ones. It then sorts, filters, and displays the results according to user-defined settings, so that a user does not have to perform all these steps manually. Because generic inquiries provide so much flexibility, the inquiry design process depends on the user-specific business needs.{br}

In this topic, you will read about the necessary steps to create a generic inquiry. You will also find additional information that will help you understand the inquiry creation process.{br}{TOC}[anchor|#_54ff1fab-4be3-4206-8016-c5c8cfeee0e2][anchor|#_2faebd86-1ef8-4844-bdac-306e17e89759]
==Preparation for Creating a Generic Inquiry==
To design an Acumatica ERP inquiry, you need to have general knowledge of data access classes (DACs). In Acumatica ERP, the data is stored in a database, but users do not access the database directly. Instead, they access it through data access classes. When building inquiries, you retrieve data from the data access classes rather than working with the database tables directly. In many cases, the data access classes directly correspond to the database tables; however, this is not necessarily the case for all the tables. {br}

Before you begin creating the generic inquiry, you perform the following research:[anchor|#_40fe9083-3571-44a9-b8cc-7e0849a131a2]
#''Distinguishing the DACs to be used for the inquiry'': The data to be used in a generic inquiry is available through DACs, which represent specific data from the system database. Based on your business needs, you need to decide what general type of data you want to collect from the system database in order to list in the table part of the inquiry, so that you know on which form this data is entered.
#''Inspecting UI elements to find the DACs and data fields'': Based on the data you will use in the generic inquiry, you have to explore which classes and data fields you can use to access this data. To find the data access classes that underlie the data you want to use for the generic inquiry, you can explore user interface elements of the forms that contain this data. For more information, see [HelpRoot_ReportingTools\RP__how_tools_GI_InspectingElements|To Inspect Elements].
#:For example, to discover the class that provides access to the sales orders numbers, you need to inspect the form elements of the [HelpRoot_FormReference\SO_30_10_00|Sales Orders] ([~/?ScreenId=SO301000|SO301000]) form.

==Creation of a Generic Inquiry==
To create a generic inquiry, you perform the following general steps:[anchor|#_55c1e139-e93e-42a0-ac99-09dbd1eef103]
#''Creating a generic inquiry'': You create a generic inquiry on the [HelpRoot_FormReference\SM_20_80_00|Generic Inquiry] ([~/?ScreenId=SM208000|SM208000]) form.
#:((({S:Hint}On this form, you can optionally specify the number of columns in which the inquiry parameters will be arranged on the resulting inquiry form, the maximum number of records to be displayed, and the number of records to be displayed on every page of the inquiry.
)))
#''Specifying DACs'': On the '''Tables''' tab of this form, you select the DACs to be used in your generic inquiry. For each table, you specify a value in the '''Alias''' column. This value will be used in SQL statements to designate the table. You can type the value in the '''Alias''' column manually or leave it empty; if you do not specify a value, the value from the '''Table Name''' column will be used instead.
#''Configuring the results grid'': On the '''Results Grid''' tab of the form, you select the column values from DACs to display data. By specifying the values on this tab, you can specify how the results of the search in the database tables should be displayed. You can use formulas to calculate the values of columns in the results grid by using the formula editor in the '''Data Field''' column of the appropriate row. The formula can be entered directly in the formula editing area or composed by selecting fields and using operators and functions. For more details about the elements of the '''Results Grid''' tab, see[HelpRoot_FormReference\SM_20_80_00|Generic Inquiry].

The [HelpRoot_ReportingTools\RP__how_tools_GI_DesigningGI|To Design a Generic Inquiry] procedure explains in greater detail the steps you must perform to design a generic inquiry. Also, examples with exact values and practical usage explained can be found in the following topics: [HelpRoot_ReportingTools\RP_tools_GI_SampleGI|Example: Designing a Sample Generic Inquiry] and [HelpRoot_ReportingTools\SM__how_How_to_Design_an_Inquiry_In_Inventory|Example: Designing a Generic Inquiry Based on Inventory Data]
==Optional Settings==
The creation of a generic inquiry can involve additional specifications, based on the business needs of the user. In this case, you can use other tabs of the [HelpRoot_FormReference\SM_20_80_00|Generic Inquiry] ([~/?ScreenId=SM208000|SM208000]) form to achieve the needed results.{br}

To further refine the generic inquiry you are designing, you can use the following functionality:[anchor|#_8ba1ee86-1149-4ed0-b343-54415112bc7e]
#''Table relations'': You can specify table relations between classes on the '''Relations''' tab, so that the system can generate SQL requests to get the required data from the tables involved. In the '''Table Relations''' area of this tab, you can specify the relations between '''Parent''' and '''Child''' tables by selecting a '''Joint Type'''. In the '''Data Field Links for Active Relations''' area of this tab, for each pair of related tables, you can specify the '''Link Condition''' between the columns of the tables. 
#:For more details about the '''Joint Type''' and '''Link Condition''' elements, see[HelpRoot_FormReference\SM_20_80_00|Generic Inquiry]. Examples of the use of the '''Table Relations''' tab can be found in [HelpRoot_ReportingTools\SM__how_How_to_Design_an_Inquiry_In_Inventory|Example: Designing a Generic Inquiry Based on Inventory Data].
#''Parameters'': On the '''Parameters''' tab, you select and configure the parameters to be placed in the Selection area of the generic inquiry. The Selection area is a customizable part of an inquiry form that contains boxes and other controls above the table with the data; the user makes selections to filter the data displayed in the table. The layout of this area depends on the settings specified on the '''Parameters''' tab. For example, you can add optional or required elements to the Selection area of the inquiry, where the user can make selections in order to view specific data, such as that for a particular date range or warehouse, so that the inquiry will retrieve the relevant data from the DACs. 
#:Examples of the use of the '''Parameters''' tab can be found in [HelpRoot_ReportingTools\RP_tools_GI_SampleGI|Example: Designing a Sample Generic Inquiry] and [HelpRoot_ReportingTools\SM__how_How_to_Design_an_Inquiry_In_Inventory|Example: Designing a Generic Inquiry Based on Inventory Data].
#''Conditions'': You can use the '''Conditions''' tab to filter the data (records) to be retrieved. For example, an inquiry displaying a customer&rsquo;s balance, based on the specified conditions, can hide invoices with a balance of zero. 
#:For more details about the '''Conditions''' tab and its elements, again see [HelpRoot_FormReference\SM_20_80_00|Generic Inquiry]. Examples of the use of this tab can be found in [HelpRoot_ReportingTools\RP_tools_GI_SampleGI|Example: Designing a Sample Generic Inquiry] and [HelpRoot_ReportingTools\SM__how_How_to_Design_an_Inquiry_In_Inventory|Example: Designing a Generic Inquiry Based on Inventory Data].
#''Sorting'': You can use the '''Sort Order''' tab to specify how the inquiry data is sorted—that is, the default order in which the results should be displayed on the inquiry form. The results can be sorted in ascending or descending order of the values in a particular column (which you can select). For example, the inquiry results can be sorted by date and by customer name. 
#:Examples of the use of the '''Sorting''' tab can be found in [HelpRoot_ReportingTools\RP_tools_GI_SampleGI|Example: Designing a Sample Generic Inquiry] and [HelpRoot_ReportingTools\SM__how_How_to_Design_an_Inquiry_In_Inventory|Example: Designing a Generic Inquiry Based on Inventory Data].
#''Grouping'': You can group inquiry data by specifying grouping conditions on the '''Grouping''' tab. For example, you can group sales orders by date and status to get the count of sales orders, and their total and average amounts for each day and each status. 
#:An example of the use of the '''Grouping''' tab can be found in [HelpRoot_ReportingTools\RP_tools_GI_SampleGI|Example: Designing a Sample Generic Inquiry].
#''Navigation'': On the '''Navigation''' tab, you can optionally configure an inquiry column to contain links to Acumatica ERP forms. For example, you can configure a generic inquiry so that a user will be able to open the Business Accounts (CR3030PL) form with the data of a particular customer in a new browser tab or in the side panel by clicking the link in the '''Customer Name''' column of the inquiry.
#''Entry point'': By using the '''Entry Point''' tab, you can optionally define a generic inquiry to be an entry point instead of an existing (primary) Acumatica ERP form. If you do this, when you click the name of the primary form in the navigation pane, the system will open the generic inquiry form containing the list of records, and when you click the name of a record in the list, the primary form will open with that record selected. To define a generic inquiry as an entry point, you need to specify the site map location in the '''Entry Screen''' box on the '''Entry Point''' tab and select the '''Replace Entry Screen with this Inquiry in Menu''' check box. 
#:For more details on configuring a generic inquiry to be used as an entry point, see [HelpRoot_Administration\SM__con_Primary_Screen_As_List|Substitutes for Entry Forms] and [HelpRoot_Administration\SM__how_To_Set_Up_Primary_Screen_As_List|To Configure a Generic Inquiry to Replace an Entry Form].
#:((({S:Hint}When you select the entry form to be replaced by an inquiry, this form is automatically added to the '''Navigation''' tab.
)))
#''Navigation'': By using the '''Navigation''' tab, you can configure a generic inquiry column to contain a link to the needed form. For example, you can configure an inquiry so that a user can open (in a new browser tab) a form with the data of a particular customer by clicking the link in the '''Customer Name''' column. 

==Preview and Publication of the Generic Inquiry==
When an inquiry has been created and all the necessary settings have been specified, you can preview and then publish it, so that it can be used by other users that have proper access rights. For more details, see [HelpRoot_ReportingTools\rp__con_tools_gi_accessrights|Access Rights to Generic Inquiries]. {br}

After you have completed the basic steps—creating the generic inquiry on the [HelpRoot_FormReference\SM_20_80_00|Generic Inquiry] ([~/?ScreenId=SM208000|SM208000]) form, adding DACs on the '''Tables''' tab, and specifying the needed settings on the '''Results Grid''' tab—you can preview the inquiry at any time to see if it meets your expectations. For example, when you add several new boxes to the Selection area, you can preview each one before starting to create the next one. You can preview an inquiry directly from the [HelpRoot_FormReference\SM_20_80_00|Generic Inquiry] form by clicking '''View Inquiry''' on the form toolbar.{br}

After you have previewed the finished generic inquiry and made any needed changes, you do the following to publish the generic inquiry, which makes it available for other users:[anchor|#_73bd9914-e64e-490b-851a-c81aa0d4516b]
*Navigate to the [HelpRoot_FormReference\SM_20_80_00|Generic Inquiry] form (if you aren't already on it), and open the generic inquiry to be published. 
*Specify the '''Site Map Title'''. 
*Select the appropriate '''Site Map Location''' for your inquiry in the Summary area of the form.
*Save your changes. 
*:When you save the generic inquiry with the '''Site Map Location''' specified, the system assigns an identifier to the inquiry and shows it in the '''Screen ID''' box; this means that you have successfully published the inquiry. Users can access the published inquiry directly by typing its name or ID in the search box, and the inquiry can be added to a workspace. The process of adding items to a workspace is explained in [HelpRoot_Administration\AS__con_User_Interface_Configuration|Customization of the UI].

==Export of a Generic Inquiry==
You can transfer a generic inquiry to another company or application instance. You can also export the inquiry as a part of customization project; see [HelpRoot_Dev_Customization\CG_Platform_Project|Customization Project] for more details. {br}

A single inquiry is easier to export or import as an XML file; to do this, use the [HelpRoot_FormReference\SM_20_80_00|Generic Inquiry] ([~/?ScreenId=SM208000|SM208000]) form and click '''Export as XML''' or '''Import from XML''', respectively, on the form toolbar.{br}

You can export a generic inquiry as &#42;.rpx file to be used for creating a report in Acumatica Report                         Designer. To do this, on [HelpRoot_FormReference\SM_20_80_00|Generic Inquiry] form, click '''Export as Report''' on the form toolbar. The system will export the generic inquiry as &#42;.rpx file, having similar name as the generic inquiry. The resulting exported file will contain generic inquiry data access classes information, such as, list of tables, relations, sort order and grouping.
==Related Articles==
*[HelpRoot_FormReference\SM_20_80_00|Generic Inquiry] ([~/?ScreenId=SM208000|SM208000])
*[HelpRoot_Administration\AS__con_User_Interface_Configuration|Customization of the UI]
*[HelpRoot_ReportingTools\RP__how_tools_GI_DesigningGI|To Design a Generic Inquiry]
*[HelpRoot_ReportingTools\RP_tools_GI_SampleGI|Example: Designing a Sample Generic Inquiry]
*[HelpRoot_ReportingTools\SM__how_How_to_Design_an_Inquiry_In_Inventory|Example: Designing a Generic Inquiry Based on Inventory Data]
*[HelpRoot_Administration\SM__con_Primary_Screen_As_List|Substitutes for Entry Forms]
*[HelpRoot_Administration\SM__how_To_Set_Up_Primary_Screen_As_List|To Configure a Generic Inquiry to Replace an Entry Form]]]></column>
			<column name="PlainText"><![CDATA[Creation of Generic Inquiries A generic inquiry is a customizable data inquiry screen you can create. A generic inquiry     collects the user-defined data strings from the  Acumatica ERP     database. Then the system optionally compares the collected data strings with other ones. It     then sorts, filters, and displays the results according to user-defined settings, so that a user     does not have to perform all these steps manually. Because generic inquiries provide so much     flexibility, the inquiry design process depends on the user-specific business needs. In this topic, you will read about the necessary steps to create a generic inquiry. You will     also find additional information that will help you understand the inquiry creation process. Preparation for Creating a Generic     Inquiry To design an  Acumatica ERP     inquiry, you need to have general knowledge of data access classes (DACs). In  Acumatica ERP,     the data is stored in a database, but users do not access the database directly. Instead, they     access it through data access classes. When building inquiries, you retrieve data from the data     access classes rather than working with the database tables directly. In many cases, the data     access classes directly correspond to the database tables; however, this is not necessarily the     case for all the tables.  Before you begin creating the generic inquiry, you perform the following research: Distinguishing the DACs to be used for the inquiry : The data to be used in a generic      inquiry is available through DACs, which represent specific data from the system database.      Based on your business needs, you need to decide what general type of data you want to collect      from the system database in order to list in the table part of the inquiry, so that you know on      which form this data is entered. Inspecting UI elements to find the DACs and data fields : Based on the data you will      use in the generic inquiry, you have to explore which classes and data fields you can use to      access this data. To find the data access classes that underlie the data you want to use for      the generic inquiry, you can explore user interface elements of the forms that contain this      data. For more information, see  To Inspect Elements. For       example, to discover the class that provides access to the sales orders numbers, you need to       inspect the form elements of the   ([~/?ScreenId=SO301000|SO301000]) Sales Orders (SO301000) form. Creation of a Generic Inquiry To create a generic inquiry, you perform the following general steps: Creating a generic inquiry : You create a generic inquiry on the   ([~/?ScreenId=SM208000|SM208000]) Generic Inquiry (SM208000) form. On this form, you can optionally       specify the number of columns in which the inquiry parameters will be arranged on the       resulting inquiry form, the maximum number of records to be displayed, and the number of       records to be displayed on every page of the inquiry. Specifying DACs : On the  Tables  tab of this form, you select      the DACs to be used in your generic inquiry. For each table, you specify a value in the        Alias  column. This value will be used in SQL statements to designate      the table. You can type the value in the  Alias  column manually or leave it empty; if you do not specify a value, the value      from the  Table Name  column will be used instead. Configuring the results grid : On the  Results Grid  tab of the      form, you select the column values from DACs to display data. By specifying the values on this      tab, you can specify how the results of the search in the database tables should be displayed.      You can use formulas to calculate the values of columns in the results grid by using the      formula editor in the  Data Field  column of the appropriate row. The      formula can be entered directly in the formula editing area or composed by selecting fields and      using operators and functions. For more details about the elements of the  Results       Grid  tab, see  ([~/?ScreenId=SM208000|SM208000]) Generic Inquiry. The  To Design a Generic Inquiry procedure explains in greater detail the     steps you must perform to design a generic inquiry. Also, examples with exact values and     practical usage explained can be found in the following topics:  Example: Designing a Sample Generic Inquiry and  Example: Designing a Generic Inquiry Based on Inventory DataOptional Settings The creation of a generic inquiry can involve additional specifications, based on the business     needs of the user. In this case, you can use other tabs of the   ([~/?ScreenId=SM208000|SM208000]) Generic Inquiry (SM208000) form to achieve the needed results. To further refine the generic inquiry you are designing, you can use the following     functionality: Table relations : You can specify table relations between classes on the        Relations  tab, so that the system can generate SQL requests to get the      required data from the tables involved. In the  Table Relations  area of      this tab, you can specify the relations between  Parent  and  Child  tables by selecting a  Joint       Type . In the  Data Field Links for Active Relations  area of      this tab, for each pair of related tables, you can specify the  Link       Condition  between the columns of the tables.  For more details about the         Joint Type  and  Link Condition  elements,        see  ([~/?ScreenId=SM208000|SM208000]) Generic Inquiry. Examples of the use of the  Table        Relations  tab can be found in  Example: Designing a Generic Inquiry Based on Inventory Data. Parameters : On the  Parameters  tab, you select and configure      the parameters to be placed in the Selection area of the generic inquiry. The Selection area is      a customizable part of an inquiry form that contains boxes and other controls above the table      with the data; the user makes selections to filter the data displayed in the table. The layout      of this area depends on the settings specified on the  Parameters  tab.      For example, you can add optional or required elements to the Selection area of the inquiry,      where the user can make selections in order to view specific data, such as that for a      particular date range or warehouse, so that the inquiry will retrieve the relevant data from      the DACs.  Examples of the use of the  Parameters  tab can be found in         Example: Designing a Sample Generic Inquiry and  Example: Designing a Generic Inquiry Based on Inventory Data. Conditions : You can use the  Conditions  tab to filter the data      (records) to be retrieved. For example, an inquiry displaying a customer's balance, based on      the specified conditions, can hide invoices with a balance of zero.  For more details about       the  Conditions  tab and its elements, again see   ([~/?ScreenId=SM208000|SM208000]) Generic Inquiry. Examples of the use of this tab can be found in         Example: Designing a Sample Generic Inquiry and  Example: Designing a Generic Inquiry Based on Inventory Data. Sorting : You can use the  Sort Order  tab to specify how the      inquiry data is sorted—that is, the default order in which the results should be displayed on      the inquiry form. The results can be sorted in ascending or descending order of the values in a      particular column (which you can select). For example, the inquiry results can be sorted by      date and by customer name.  Examples of the use of the  Sorting  tab can       be found in  Example: Designing a Sample Generic Inquiry and  Example: Designing a Generic Inquiry Based on Inventory Data. Grouping : You can group inquiry data by specifying grouping conditions on the        Grouping  tab. For example, you can group sales orders by date and      status to get the count of sales orders, and their total and average amounts for each day and      each status.  An example of the use of the  Grouping  tab can be found       in  Example: Designing a Sample Generic Inquiry. Navigation : On the  Navigation  tab, you can optionally configure an inquiry column to contain links      to  Acumatica ERP      forms. For example, you can configure a generic inquiry so that a user will be able to open the      Business Accounts (CR3030PL) form with the data of a particular customer in a new browser tab      or in the side panel by clicking the link in the  Customer Name  column of      the inquiry. Entry point : By using the  Entry Point  tab, you can optionally      define a generic inquiry to be an entry point instead of an existing (primary)  Acumatica ERP      form. If you do this, when you click the name of the primary form in the navigation pane, the      system will open the generic inquiry form containing the list of records, and when you click      the name of a record in the list, the primary form will open with that record selected. To      define a generic inquiry as an entry point, you need to specify the site map location in the        Entry Screen  box on the  Entry Point  tab and      select the  Replace Entry Screen with this Inquiry in Menu  check box.        For more details on configuring a generic inquiry to be used as an entry point, see  Substitutes for Entry Forms and  To Configure a Generic Inquiry to Replace an Entry Form. When you select the entry       form to be replaced by an inquiry, this form is automatically added to the         Navigation  tab. Navigation : By using the  Navigation  tab, you can configure a      generic inquiry column to contain a link to the needed form. For example, you can configure an      inquiry so that a user can open (in a new browser tab) a form with the data of a particular      customer by clicking the link in the  Customer Name  column.  Preview and Publication of the Generic Inquiry When an inquiry has been created and all the necessary settings have been specified, you can     preview and then publish it, so that it can be used by other users that have proper access     rights. For more details, see  Access Rights to Generic Inquiries.  After you have completed the basic steps—creating the generic inquiry on the   ([~/?ScreenId=SM208000|SM208000]) Generic Inquiry (SM208000) form, adding DACs on the       Tables  tab, and specifying the needed settings on the  Results      Grid  tab—you can preview the inquiry at any time to see if it meets your     expectations. For example, when you add several new boxes to the Selection area, you can preview     each one before starting to create the next one. You can preview an inquiry directly from the        ([~/?ScreenId=SM208000|SM208000]) Generic Inquiry form by clicking  View      Inquiry  on the form toolbar. After you have previewed the finished generic inquiry and made any needed changes, you do the     following to publish the generic inquiry, which makes it available for other users: Navigate to the   ([~/?ScreenId=SM208000|SM208000]) Generic Inquiry form (if you aren't already       on it), and open the generic inquiry to be published.  Specify the  Site Map Title .  Select the appropriate  Site Map Location  for your inquiry in the       Summary area of the form. Save your changes.  When you save the generic inquiry with the  Site Map         Location  specified, the system assigns an identifier to the inquiry and shows it        in the  Screen ID  box; this means that you have successfully published        the inquiry. Users can access the published inquiry directly by typing its name or ID in the        search box, and the inquiry can be added to a workspace. The process of adding items to a        workspace is explained in  Customization of the UI. Export of a Generic Inquiry You can transfer a generic inquiry to another company or application instance. You can also     export the inquiry as a part of customization project; see  Customization Project for more details.  A single inquiry is easier to export or import as an XML file; to do this, use the   ([~/?ScreenId=SM208000|SM208000]) Generic Inquiry (SM208000) form and click  Export as      XML  or  Import from XML , respectively, on the form     toolbar. You can export a generic inquiry as *.rpx file to be used for creating a report in  Acumatica Report                         Designer. To do this, on   ([~/?ScreenId=SM208000|SM208000]) Generic Inquiry form, click  Export      as Report  on the form toolbar. The system will export the generic inquiry as *.rpx     file, having similar name as the generic inquiry. The resulting exported file will contain     generic inquiry data access classes information, such as, list of tables, relations, sort order     and grouping.  ([~/?ScreenId=SM208000|SM208000]) ]]></column>
		</row>
		<row PageID="b494c5e4-4e49-4c7f-bb60-1dd6c8771adc" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="88b59660-a37f-bd01-8cae-2033f2402d06" RecordSourceID="22377">
			<column name="Content"><![CDATA[
 Acumatica ERP includes predefined generic inquiries, which can be viewed on the [HelpRoot_FormReference\SM_20_80_00|Generic Inquiry] ([~/?ScreenId=SM208000|SM208000]) form by default. These generic inquiries are stored in the data of the System tenant.{br}

You can adjust any predefined generic inquiry to the needs of your organization by changing the tables that are used in the inquiry, adding or removing parameters, or changing the results grid. However, note that the system does not update the settings of customized generic inquiries during upgrade of Acumatica ERP. That is, after an upgrade to a newer version, customized generic inquiries will not include any changes that may have been made to the System data with this upgrade. For example, if a database table previously included in the generic inquiry was removed in the System data of a newer version of Acumatica ERP, after an upgrade to this version, the customized generic inquiry that includes this table will be broken. {br}

To make the customized generic inquiry work with the new System data, you can do the following: [anchor|#_3ad915d7-47b7-4633-91aa-9f00c26722e3]
#Reset the settings of the customized generic inquiry to the default settings by clicking '''Clipboard''' > '''Reset to Default''' on the form toolbar of the [HelpRoot_FormReference\SM_20_80_00|Generic Inquiry] form. The system restores the default settings of the generic inquiry from the System data.
#:((({S:Hint}When you perform this step, all customizations have been lost.
)))
#Modify the generic inquiry to adjust it to the needs of your organization again.
]]></column>
			<column name="PlainText"><![CDATA[Customization of Predefined Generic Inquiries  Acumatica ERP includes predefined generic inquiries, which can be viewed on the   ([~/?ScreenId=SM208000|SM208000]) Generic Inquiry (SM208000) form by default. These generic inquiries are stored       in the data of the System tenant. You can adjust any predefined generic inquiry to the needs of your organization by changing the       tables that are used in the inquiry, adding or removing parameters, or changing the results       grid. However, note that the system does not update the settings of customized generic       inquiries during upgrade of  Acumatica ERP. That is, after an upgrade to a newer version, customized generic inquiries will not       include any changes that may have been made to the System data with this upgrade. For example,       if a database table previously included in the generic inquiry was removed in the System data       of a newer version of  Acumatica ERP, after an upgrade to this version, the customized generic inquiry that includes this table       will be broken.  To make the customized generic inquiry work with the new System data, you can do the following:          Reset the settings of the customized generic inquiry to the default settings by clicking  Clipboard Reset to Default  on the form toolbar of the   ([~/?ScreenId=SM208000|SM208000]) Generic Inquiry form. The system           restores the default settings of the generic inquiry from the System data. When you perform this step, all customizations have been           lost. Modify the generic inquiry to adjust it to the needs of your organization again. ]]></column>
		</row>
		<row PageID="339f2b58-c593-456a-8bad-a8eb7b7db8d8" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="5cfe4fc6-46f7-63b4-fed7-cbd9bb0d8f48" RecordSourceID="22377">
			<column name="Content"><![CDATA[
Generic inquiries in Acumatica ERP give you the ability to expose data in Acumatica ERP by using the Open Data protocol.{br}

The Open Data Protocol, or OData, is a general-purpose data access technology that can be used with many languages and platforms. OData defines an abstract data model and a protocol that can be used to expose any client access information from any data source. Acumatica ERP supports OData Version 3.0. For OData specifications, see [http://www.odata.org/documentation/odata-version-3-0/|OData Version 3.0] on the OData portal.{br}

You can use your Acumatica ERP instance as the data source, and then use third-party applications that support the OData protocol to track and analyze the data. ((({S:Hint}We strongly recommend that you deploy your Acumatica ERP instance (or instances) by using HTTPS, to pass the user credentials safely. For more information, see [HelpRoot_Install\how__Enable_Https|Setting Up an HTTPS Service in Web Server (IIS)] in Acumatica ERP Installation Guide.
)))
{br}{TOC}[anchor|#Field_Name_Changes]
==Changing Field Names==
Per OData specifications, the system generates the names of the fields for OData entities based on the display names of the Acumatica ERP fields in an English locale as follows:[anchor|#ul_tm5_tp5_rr]
*If the display name does not contain any invalid symbols, the name is left unchanged.
*If the display name starts with an invalid symbol, an underscore (&#95;) is added before the name. For example, ''2Update'' is converted to ''&#95;2Update''.
*If the display name contains invalid symbols, these symbols are removed from the name. For example, ''Account Name'' is converted to ''AccountName''.

==Exposing a Generic Inquiry==
You can expose a generic inquiry at any time, either when creating a new inquiry or by modifying an existing one. To expose the inquiry, you select the '''Expose via OData''' check box for the inquiry on the [HelpRoot_FormReference\SM_20_80_00|Generic Inquiry] (SM208000) form. ((({S:Hint}To view the data of an exposed inquiry down to the particular fields, you must specify a key field for the inquiry on the '''Results''' tab of the [HelpRoot_FormReference\SM_20_80_00|Generic Inquiry] form.
)))
For details, see [HelpRoot_ReportingTools\CU__how_OData_Expose_GI|To Expose a Generic Inquiry Through the OData Interface].
==Using Predefined Exposed Generic Inquiries==
 Acumatica ERP includes multiple predefined generic inquiries exposed through OData; the titles of these inquiries start with ''BI''. You can locate the inquiries in the ''Hidden/BI Views'' folder on the site map. Additionally, the ''BI'' role has been added to the system; a user with the role assigned can access the data of the predefined inquiries.((({S:Hint}To give access to other generic inquiries for the users with the ''BI'' role assigned, you should configure the role accordingly.
)))
For more information about site map, see [HelpRoot_Administration\SM__con_Site_Map_Management|Managing the Site Map]. For more information about roles in Acumatica ERP, see [HelpRoot_Administration\US__mng_Roles|Managing User Access Rights].
==Accessing an Exposed Generic Inquiry Through Your Browser==
The simplest way to view the generic inquiries exposed through OData is to open the list of exposed inquiries in your browser. To view the data, you enter the URL of the OData endpoint of your Acumatica ERP instance in the address bar of your browser. For the URL of the Acumatica ERP OData endpoint, use one of the following:[anchor|#ul_mq2_pzp_1s]
*<tt>&lt;InstanceURL&gt;/OData/&lt;CompanyName&gt;/</tt>, where ''&lt;InstanceURL&gt;'' is the URL of your Acumatica ERP instance and ''&lt;CompanyName&gt;'' is the login name of the company in the Acumatica ERP instance for which you configured inquiries in a multi-company configuration. 
*:((({S:Hint}You can find the login names of companies on the [HelpRoot_FormReference\SM_20_35_30|Tenants List] ([~/?ScreenId=SM203530|SM203530]) form.
)))
*<tt>&lt;InstanceURL&gt;/OData</tt>, where ''&lt;InstanceURL&gt;'' is the URL of your Acumatica ERP instance in a configuration with a single company.

For example, if the URL of your Acumatica ERP instance is ''http://app.site.net/instance&#95;name/'' and you want to view generic inquiries exposed in the RapidByte company, type <tt>http://app.site.net/instance&#95;name/OData/RapidByte</tt> in the address bar of your browser.{br}

When the system asks you to authenticate yourself, provide your sign-in credentials—that is, your user name (without the company name) and your password. When your identity has been confirmed, the system displays the list of available inquiries.((({S:Hint}Even though you can see all exposed inquiries, you can get only the data to which you have sufficient access rights.
)))
From the browser, you can view the list of inquiries exposed through OData and the list of fields in the exposed inquiries in the service list. The field names in the list are changed according to the OData specifications, as described above. You get the URL of the service list of your Acumatica ERP instance by doing one of the following:[anchor|#ul_yrx_zwj_js]
*If your Acumatica ERP instance contains a single company, append <tt>/OData/$metadata</tt> to the URL of your instance.
*If your Acumatica ERP instance contains multiple companies, append <tt>/OData/&lt;CompanyName&gt;/$metadata</tt> to the URL of your instance.

Also, you can view the contents of any exposed inquiry. You get the data by doing one of the following:[anchor|#ul_izp_ycy_nr]
*If your Acumatica ERP instance contains a single company, append <tt>/OData/&lt;GI&#95;Name&gt;</tt> to the URL of your instance.
*If your Acumatica ERP instance contains multiple companies, append <tt>/OData/&lt;CompanyName&gt;/&lt;GI&#95;Name&gt;</tt> to the URL of your instance.

In the examples above, ''&lt;CompanyName&gt;'' is the login name of the company in the Acumatica ERP instance for which you configured inquiries. ''&lt;GI&#95;Name&gt;'' is the title of the exposed generic inquiry; it is case-sensitive.{br}

The data is displayed on the screen in JSON notation (shown in the screenshot below), which is used by default. [anchor|#fig_fxn_m2y_nr][anchor|#image_uhj_3fy_nr][image:UserGuide/Images/OData_Exposed_GI.png|Generic inquiry opened in a browser window|450px]
 Acumatica ERP supports JSON and ATOM notations. You can directly select a notation by appending <tt>$format=&lt;format&gt;</tt> to the URL of an inquiry, where ''format'' can have one of the following values:[anchor|#ul_kqr_gty_nr]
*''json'': The data is displayed in JSON notation.
*''atom'': The data is displayed in ATOM notation.
*''jsonverbose'': The data is displayed in JSON Verbose notation.

==Accessing an Exposed Generic Inquiry Through an OData Client==
By exposing data from Acumatica ERP through the OData interface, you can view your data and perform detailed financial analysis by using third-party OData clients, such as Microsoft Excel and Microsoft Power BI.((({S:Hint}Microsoft Excel 2007 does not support connecting to OData endpoints.
)))
To connect to your data, you specify the URL of the OData endpoint of your Acumatica ERP instance to the OData client and authenticate yourself by entering your Acumatica ERP credentials. The OData client then connects to your Acumatica ERP instance and gets the data for you. For an example of data being viewed with Microsoft Excel, see [HelpRoot_ReportingTools\CU__how_OData_Excel|To View Exposed Generic Inquiries in Excel].[anchor|#access_GI]
==Accessing Individual Fields of an Exposed Inquiry==
Through the OData interface, you can access particular data of an exposed generic inquiry. For example, if you search for contacts, you can view the details of a particular contact, or view the value of a particular field for contacts. ((({S:Hint}To view the data of an exposed inquiry down to particular fields, you must specify a key field for the inquiry on the '''Results''' tab of the [HelpRoot_FormReference\SM_20_80_00|Generic Inquiry] ([~/?ScreenId=SM208000|SM208000]) form.
)))
You can view the list of fields in the exposed inquiries in the service list. The field names in the list are changed according to the OData specification, as described in the [[#Field_Name_Changes|Changing Field Names] section above. You get the URL of the service list of your Acumatica ERP instance by doing one of the following:[anchor|#ul_acq_dfd_4r]
*If your Acumatica ERP instance contains a single company, append <tt>/OData/$metadata</tt> to the URL of your instance.
*If your Acumatica ERP instance contains multiple companies, append <tt>/OData/&lt;CompanyName&gt;/$metadata</tt> to the URL of your instance.

==Configuring CORS==
 Acumatica ERP supports cross-origin resource sharing (CORS), meaning that requests for resources can come from a different domain than that of the resource making the request. With CORS enabled, you can allow access to the OData endpoints of your Acumatica ERP instance for the client-side web applications, including Java-based applications. For more information about CORS, see [http://www.w3.org/TR/cors/|Cross-Origin Resource Sharing] on the World Wide Web Consortium portal.{br}

The CORS settings of the web server of your instance are defined by the {{cors}} section of the <tt>web.config</tt> file; an example of this section is shown below.{{{{&lt;cors enabled="true" origins="*" methods="*" headers="*" 
exposedHeaders="DataServiceVersion,MaxDataServiceVersion,OData-Version,
OData-MaxVersion" /&gt;
}}}}
The web server of the application supports the following headers, in addition to simple headers: ''DataServiceVersion'', ''MaxDataServiceVersion'', ''OData-Version'', and ''OData-MaxVersion''. You need to use these headers to access OData endpoints. You can add your own headers as well.{br}

By default, CORS is enabled, all origins are allowed access to the server, and all supported headers are exposed and can be used. You can enforce limitations on cross-origin requests by changing the settings anytime you need to. For details, see [HelpRoot_ReportingTools\CU__how_Odata_CORS|To Configure CORS].
==Related Articles==
*[http://www.odata.org/documentation/odata-version-3-0/]OData Version 3.0 on the OData portal
*[http://www.w3.org/TR/cors/]Cross-Origin Resource Sharing on the World Wide Web Consortium portal
*[HelpRoot_ReportingTools\CU__how_OData_Expose_GI|To Expose a Generic Inquiry Through the OData Interface]
*[HelpRoot_ReportingTools\CU__how_OData_Excel|To View Exposed Generic Inquiries in Excel]
*[HelpRoot_ReportingTools\SM__MNG_GI_PowerBIConnector|Connecting to Acumatica ERP from Power BI]]]></column>
			<column name="PlainText"><![CDATA[OData Support Generic inquiries in  Acumatica ERP give you the ability to expose data in  Acumatica ERP by using the Open Data protocol. The Open Data Protocol, or OData, is a general-purpose data access technology that can be         used with many languages and platforms. OData defines an abstract data model and a protocol         that can be used to expose any client access information from any data source.  Acumatica ERP supports OData Version 3.0. For OData specifications, see  OData Version 3.0 OData Version 3.0 on the OData portal. You can use your  Acumatica ERP instance as the data source, and then use third-party applications that support the OData         protocol to track and analyze the data.  We strongly recommend that you deploy your  Acumatica ERP instance (or instances) by using HTTPS, to pass the user credentials safely. For more         information, see  Setting Up an HTTPS Service in Web Server (IIS) in  Acumatica ERP Installation Guide. Changing Field Names Per OData specifications, the system generates the names of the fields for OData entities         based on the display names of the  Acumatica ERP fields in an English locale as follows: If the display name does not contain any invalid symbols, the name is left           unchanged. If the display name starts with an invalid symbol, an underscore (_) is added before the           name. For example,  2Update  is converted to  _2Update . If the display name contains invalid symbols, these symbols are removed from the name.           For example,  Account Name  is converted to  AccountName . Exposing a Generic Inquiry You can expose a generic inquiry at any time, either when creating a new inquiry or by         modifying an existing one. To expose the inquiry, you select the  Expose via           OData  check box for the inquiry on the   ([~/?ScreenId=SM208000|SM208000]) Generic Inquiry         (SM 20 80 00)         form.  To view the data of an exposed inquiry down to the particular fields, you must specify a         key field for the inquiry on the  Results  tab of the   ([~/?ScreenId=SM208000|SM208000]) Generic Inquiry form. For details, see  To Expose a Generic Inquiry Through the OData Interface. Using Predefined Exposed Generic Inquiries  Acumatica ERP includes multiple predefined generic inquiries exposed through OData; the titles of these         inquiries start with  BI . You can locate the inquiries in the  Hidden/BI Views          folder on the site map. Additionally, the  BI  role has been added to the system; a         user with the role assigned can access the data of the predefined inquiries. To give access to other generic inquiries for the users with the  BI  role         assigned, you should configure the role accordingly. For more information about site map, see  Managing the Site Map.         For more information about roles in  Acumatica ERP, see  Managing User Access Rights. Accessing an Exposed Generic Inquiry Through Your Browser The simplest way to view the generic inquiries exposed through OData is to open the list of         exposed inquiries in your browser. To view the data, you enter the URL of the OData endpoint         of your  Acumatica ERP instance in the address bar of your browser. For the URL of the  Acumatica ERP OData endpoint, use one of the following: <InstanceURL>/OData/<CompanyName>/ , where  <InstanceURL>  is the           URL of your  Acumatica ERP instance and  <CompanyName>  is the login name of the company in the  Acumatica ERP instance for which you configured inquiries in a multi-company configuration.  You             can find the login names of companies on the   ([~/?ScreenId=SM203530|SM203530]) Tenants List (SM203530)             form. <InstanceURL>/OData , where  <InstanceURL>  is the URL of your  Acumatica ERP instance in a configuration with a single company. For example, if the URL of your  Acumatica ERP instance is  http://app.site.net/instance_name/  and you want to view generic         inquiries exposed in the RapidByte company, type            http://app.site.net/instance_name/OData/RapidByte  in the address         bar of your browser. When the system asks you to authenticate yourself, provide your sign-in         credentials—that is, your user name (without the company name) and your password. When         your identity has been confirmed, the system displays the list of available inquiries. Even though you can see all exposed inquiries, you can get only the data to which you         have sufficient access rights. From the browser, you can view the list of inquiries exposed through OData and the list of         fields in the exposed inquiries in the service list. The field names in the list are changed         according to the OData specifications, as described above. You get the URL of the service         list of your  Acumatica ERP instance by doing one of the following: If your  Acumatica ERP instance contains a single company, append  /OData/$metadata  to the URL of your           instance. If your  Acumatica ERP instance contains multiple companies, append  /OData/<CompanyName>/$metadata            to the URL of your instance. Also, you can view the contents of any exposed inquiry. You get the data by doing one of         the following: If your  Acumatica ERP instance contains a single company, append  /OData/<GI_Name>  to the URL of           your instance. If your  Acumatica ERP instance contains multiple companies, append              /OData/<CompanyName>/<GI_Name>  to the URL of your instance. In the examples above,  <CompanyName>  is the login name of the company in the  Acumatica ERP instance for which you configured inquiries.  <GI_Name>  is the title of the         exposed generic inquiry; it is case-sensitive. The data is displayed on the screen in JSON notation (shown in the screenshot below), which         is used by default.  Generic inquiry opened in a browser window  Acumatica ERP supports JSON and ATOM notations. You can directly select a notation by appending            $format=<format>  to the URL of an inquiry, where  format  can have one of         the following values: json : The data is displayed in JSON notation. atom : The data is displayed in ATOM notation. jsonverbose : The data is displayed in JSON Verbose notation. Accessing an Exposed Generic Inquiry Through an OData Client By exposing data from  Acumatica ERP through the OData interface, you can view your data and perform detailed financial         analysis by using third-party OData clients, such as Microsoft Excel and Microsoft Power         BI. Microsoft Excel 2007 does not support connecting to OData endpoints. To connect to your data, you specify the URL of the OData endpoint of your  Acumatica ERP instance to the OData client and authenticate yourself by entering your  Acumatica ERP credentials. The OData client then connects to your  Acumatica ERP instance and gets the data for you. For an example of data being viewed with Microsoft         Excel, see  To View Exposed Generic Inquiries in Excel. Accessing Individual Fields of an Exposed Inquiry Through the OData interface, you can access particular data of an exposed generic inquiry.         For example, if you search for contacts, you can view the details of a particular contact,         or view the value of a particular field for contacts.  To view the data of an exposed inquiry down to particular fields, you must specify a key         field for the inquiry on the  Results  tab of the   ([~/?ScreenId=SM208000|SM208000]) Generic Inquiry (SM208000) form. You can view the list of fields in the exposed inquiries in the service list. The field         names in the list are changed according to the OData specification, as described in the            Changing Field Names Changing Field Names section above. You get the URL of the service list of your            Acumatica ERP instance by doing one of the following: If your  Acumatica ERP instance contains a single company, append  /OData/$metadata  to the URL of your           instance. If your  Acumatica ERP instance contains multiple companies, append  /OData/<CompanyName>/$metadata            to the URL of your instance. Configuring CORS  Acumatica ERP supports cross-origin resource sharing (CORS), meaning that requests for resources can         come from a different domain than that of the resource making the request. With CORS         enabled, you can allow access to the OData endpoints of your  Acumatica ERP instance for the client-side web applications, including Java-based applications. For         more information about CORS, see  Cross-Origin Resource Sharing Cross-Origin Resource Sharing on the World Wide Web Consortium         portal. The CORS settings of the web server of your instance are defined by the            cors  section of the  web.config  file; an example of         this section is shown below. <cors enabled="true" origins="*" methods="*" headers="*" 
exposedHeaders="DataServiceVersion,MaxDataServiceVersion,OData-Version,
OData-MaxVersion" /> The web server of the application supports the following headers, in addition to simple         headers:  DataServiceVersion ,  MaxDataServiceVersion ,  OData-Version , and            OData-MaxVersion . You need to use these headers to access OData endpoints. You can         add your own headers as well. By default, CORS is enabled, all origins are allowed access to the server, and all         supported headers are exposed and can be used. You can enforce limitations on cross-origin         requests by changing the settings anytime you need to. For details, see  To Configure CORS. OData Version 3.0 on the OData portal Cross-Origin Resource Sharing on the World Wide Web Consortium portal ]]></column>
		</row>
		<row PageID="97301876-4892-433f-8fe5-4097adb61c69" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="1e302ba8-ae8f-587e-362f-6a45c950138d" RecordSourceID="22377">
			<column name="Content"><![CDATA[
To expose a generic inquiry to third-party clients that support the OData format, you configure an inquiry by using the [HelpRoot_FormReference\SM_20_80_00|Generic Inquiry] ([~/?ScreenId=SM208000|SM208000]) form and specify access rights to the inquiry by using the [HelpRoot_FormReference\SM_20_10_20|Access Rights by Screen] ([~/?ScreenId=SM201020|SM201020]) form.{br}

For more information, see [HelpRoot_ReportingTools\CU__con_OData|OData Support] and [HelpRoot_Administration\US__mng_Roles|Managing User Access Rights].((({S:Hint}You can view the list of exposed generic inquiries from the browser by adding <tt>/OData/&lt;CompanyName&gt;/</tt> onto the end of the URL of your Acumatica ERP instance.
)))
==To Expose a Generic Inquiry Through the OData Interface==[anchor|#ol_tvl_jry_nr]
#Open the [HelpRoot_FormReference\SM_20_80_00|Generic Inquiry] ([~/?ScreenId=SM208000|SM208000]) form by searching for or navigating to it.
#In the '''Inquiry Title''' box, select the inquiry that you want to make available through OData clients.
#In the '''Site Map Title''' box, specify the name of the inquiry form on the site map.
#In the '''Site Map Location''' box, specify the location of the inquiry form on the site map.
#Select the '''Expose via OData''' check box, as the screenshot below shows.[anchor|#image_b5g_btz_ls][image:UserGuide/Images/Cust_PowerBI_Connector.png|popup|Selecting the '''Expose via OData''' check box on the form|450px]
#If you want to expose the inquiry down to particular fields, on the '''Results''' tab, select the '''Is Key''' check box for the key field.
#On the form toolbar, click '''Save'''.
#Open the [HelpRoot_FormReference\SM_20_10_20|Access Rights by Screen] ([~/?ScreenId=SM201020|SM201020]) form by searching for or navigating to it.
#In the tree pane, select the inquiry according to the site map location you specified for the inquiry.
#In the table, for each role, specify the access rights the roles have to the inquiry. Do the following:
##Click on the row of a role.
##In the '''Access Rights''' column, specify the level of access the role must have to the inquiry.
#On the form toolbar, click '''Save'''.

You can see the generic inquiries exposed via OData in the look-up window for the '''Inquiry Title''' selector, as the following screenshot shows.[anchor|#fig_szm_znm_rs][anchor|#image_tzm_znm_rs][image:UserGuide/Images/Cust_PowerBI_Connector_1.png|popup|Viewing the generic inquiries exposed via OData|450px]]]></column>
			<column name="PlainText"><![CDATA[To Expose a Generic Inquiry Through the OData Interface To expose a generic inquiry to third-party clients that support the OData format, you         configure an inquiry by using the   ([~/?ScreenId=SM208000|SM208000]) Generic Inquiry (SM208000) form and         specify access rights to the inquiry by using the   ([~/?ScreenId=SM201020|SM201020]) Access Rights by Screen (SM201020)         form. For more information, see  OData Support and  Managing User Access Rights. You can view the list of exposed generic inquiries from the browser by adding            /OData/<CompanyName>/  onto the end of the URL of your  Acumatica ERP instance. To Expose a Generic Inquiry Through the OData Interface Open the   ([~/?ScreenId=SM208000|SM208000]) Generic Inquiry (SM208000) form by searching for or navigating           to it. In the  Inquiry Title  box, select the inquiry that you want to           make available through OData clients. In the  Site Map Title  box, specify the name of the inquiry form           on the site map. In the  Site Map Location  box, specify the location of the inquiry           form on the site map. Select the  Expose via OData  check box, as the screenshot below             shows. Selecting the  Expose via OData  check box on the               form If you want to expose the inquiry down to particular fields, on the              Results  tab, select the  Is Key  check box           for the key field. On the form toolbar, click  Save . Open the   ([~/?ScreenId=SM201020|SM201020]) Access Rights by Screen (SM201020) form by searching for or navigating           to it. In the tree pane, select the inquiry according to the site map location you specified           for the inquiry. In the table, for each role, specify the access rights the roles have to the inquiry. Do           the following: Click on the row of a role. In the  Access Rights  column, specify the level of access the               role must have to the inquiry. On the form toolbar, click  Save . You can see the generic inquiries exposed via OData in the look-up window for the            Inquiry Title  selector, as the following screenshot shows. Viewing the generic inquiries exposed via OData ]]></column>
		</row>
		<row PageID="b06c091a-c0bf-4d8b-835e-970faa8e5d15" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="6dc0495b-11f8-3de7-ab83-e97747dd0524" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can seamlessly import data into your Excel workbook from the Acumatica ERP OData feed by using the generic inquiries that you made available for the OData interface. For more information, see [HelpRoot_ReportingTools\CU__con_OData|OData Support].((({S:Hint}Microsoft Excel 2007 does not support connecting to OData feed.
)))
This procedure applies to Microsoft Excel 2013. The details may differ for other versions of Microsoft Excel.
==To View a Generic Inquiry in Excel==[anchor|#ol_s3h_lxy_nr]
#Open an Excel workbook.
#In the '''Data''' ribbon tab, click '''From Other Sources''' > '''From OData Feed'''.
#In the '''OData Feed''' dialog box, specify the following settings:
#*The URL for the OData feed of your Acumatica ERP instance. Generally, it is the URL of your instance concatenated with <tt>/OData/&lt;CompanyName&gt;/</tt>, where <tt>&lt;CompanyName&gt;</tt> is the login name of the company, as specified on the [HelpRoot_FormReference\SM_20_35_20|Tenants] ([~/?ScreenId=SM203520|SM203520]) form. For example, ''http://app.site.net/instance&#95;name/OData/RapidByte'' is the URL of the OData feed of the RapidByte company.
#*Sign-in credentials, which are your Acumatica ERP user name and password.
#*:((({S:Hint}Do not add the company name after your user name.
)))
#Click '''Next'''.
#:Excel connects to the Acumatica ERP instance and obtains the list of exposed generic inquiries that are available for you.
#In the '''Select Tables''' dialog box that opens, select the generic inquiry (or multiple inquiries) from which you want to get the information.
#Click '''Next'''.
#In the '''Save Data Connection File and Finish''' dialog box that opens, enter a name and description for your data connection file, and then click '''Finish'''.
#In the '''Import Data''' dialog box that opens, you specify the way you want to see the data. For more information about the dialog box, see [https://support.office.com/en-us/article/connect-to-import-external-data-9967afd8-85ee-4df3-aa06-753bcc1a2724|Connect to (Import) external data].
#Click '''OK'''.
#:The system connects to the server, downloads the data from your Acumatica ERP instance, and presents the data in the way you selected. 
#:((({S:Hint}The sorting order in the resulting Excel file may differ from the sorting order in Acumatica ERP, because Excel applies sorting after the data is downloaded. 
)))
#To update the data, click '''Refresh All''' in the '''Data''' ribbon tab.

You can do what you want with the imported data—for example, remove the columns you don&rsquo;t want to see, or add information from other data sources in separate sheets. When you refresh the data, the structure of the file is not updated.]]></column>
			<column name="PlainText"><![CDATA[To View Exposed Generic Inquiries in Excel You can seamlessly import data into your Excel workbook from the  Acumatica ERP OData feed by using the generic inquiries that you made available for the OData                 interface. For more information, see  OData Support. Microsoft Excel 2007 does not support connecting to OData feed. This procedure applies to Microsoft Excel 2013. The details may differ for other                 versions of Microsoft Excel. To View a Generic Inquiry in Excel Open an Excel workbook. In the  Data  ribbon tab, click  From Other Sources From OData Feed . In the  OData Feed  dialog box, specify the following                         settings: The URL for the OData feed of your  Acumatica ERP instance. Generally, it is the URL of your instance concatenated with                                  /OData/<CompanyName>/ , where  <CompanyName>                              is the login name of the company, as specified on the   ([~/?ScreenId=SM203520|SM203520]) Tenants (SM203520) form. For example,                                  http://app.site.net/instance_name/OData/RapidByte  is the URL                             of the OData feed of the RapidByte company. Sign-in credentials, which are your  Acumatica ERP user name and password. Do not add the company name after your                                 user name. Click  Next . Excel connects to the  Acumatica ERP instance and obtains the list of exposed generic inquiries that are                         available                          for you. In the  Select Tables  dialog                     box                      that opens , select the generic inquiry (or multiple inquiries)                     from which you want to get the information. Click  Next . In the  Save Data Connection File and Finish  dialog box                     that opens, enter a name and description for your data connection file, and then                     click  Finish . In the  Import Data  dialog box that opens, you                      specify                     the way you want to see the                     data .                      For                     more information about the dialog box, see  Connect to (Import) external                     data Connect to (Import) external data. Click  OK . The system connects to the server, downloads                         the data from your  Acumatica ERP instance, and presents the data in the way you selected.  The                         sorting order in the resulting Excel file may differ from the sorting order                         in  Acumatica ERP, because Excel applies sorting after the data is downloaded.  To update the data, click  Refresh All  in the                          Data  ribbon tab. You can do what you want with the imported data—for example, remove the columns you                 don't want to see, or add information from other data sources in separate sheets.                 When you refresh the data, the structure of the file is not updated. ]]></column>
		</row>
		<row PageID="6b96531f-f0b7-4532-accb-f625f4e5a388" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="819c13d7-ef59-96f2-ee1b-6f14f7ce919d" RecordSourceID="22377">
			<column name="Content"><![CDATA[
In Acumatica ERP, cross-origin resource sharing (CORS) is used to allow access to OData endpoints for client-side applications. To enforce limitations on CORS requests, you change the CORS settings for the web server of your Acumatica ERP instance. For more information, see [HelpRoot_ReportingTools\CU__con_OData|OData Support].((({S:Warn}Because saving changes in <tt>web.config</tt> restarts the site of the application, make sure that all users of your website are warned about the site restart so that they can save all documents.
)))
==To Configure CORS==[anchor|#ol_uq3_v1g_5j]
#Open the <tt>web.config</tt> file, which is located in the folder that contains the application instance website.
#In the file, find the {{cors}} section, shown below, within the {{odata}} section.{{{{
&lt;odata enableCompression="true" compressionThreshold="860"&gt;
    &lt;cors enabled="true" origins="*" methods="*" headers="*" 
    exposedHeaders="DataServiceVersion,MaxDataServiceVersion,OData-Version,
    OData-MaxVersion" /&gt;
&lt;/odata&gt;
}}}}
#Specify the CORS settings in the {{cors}} section as follows:
#*To enable CORS, set {{enabled="true"}}.
#*To disable CORS, set {{enabled="false"}}.
#*To limit the origins that are allowed access to the application web server, for the {{origins}} parameter, list the allowed origins separated by commas.
#*To allow all origins, set {{origin="*"}}.
#*To limit the methods supported by the resource, for the {{methods}} parameter, list the allowed methods, separated by commas.
#*To allow all methods, set {{methods="*"}}.
#*To limit simple headers supported by the resource, for the {{headers}} parameter, list the allowed simple headers separated by commas.
#*To allow all simple headers, set {{headers="*"}}.
#*To add your own headers, for the {{exposedHeaders}} parameter after the default headers, list the allowed headers separated by commas.
#Save the <tt>web.config file</tt>, which automatically restarts the website.
]]></column>
			<column name="PlainText"><![CDATA[To Configure CORS In  Acumatica ERP, cross-origin resource sharing (CORS) is used to allow access to OData endpoints                 for client-side applications. To enforce limitations on CORS requests, you change                 the CORS settings for the web server of your  Acumatica ERP instance. For more information, see  OData Support. Because saving changes in  web.config  restarts                 the site of the application, make sure that all users of your website are warned                 about the site restart so that they can save all documents. To Configure CORS Open the  web.config  file, which is located in the folder                     that contains the application instance website. In the file, find the  cors  section, shown below, within the                          odata                      section. 
<odata enableCompression="true" compressionThreshold="860">
    <cors enabled="true" origins="*" methods="*" headers="*" 
    exposedHeaders="DataServiceVersion,MaxDataServiceVersion,OData-Version,
    OData-MaxVersion" />
</odata> Specify the CORS settings in the  cors  section as follows: To enable CORS, set  enabled="true" . To disable CORS, set  enabled="false" . To limit the origins that are allowed access to the application web                             server, for the  origins  parameter, list the allowed                             origins separated by commas. To allow all origins, set  origin="*" . To limit the methods supported by the resource, for the                                  methods  parameter, list the allowed                             methods ,                              separated by commas. To allow all methods, set  methods="*" . To limit simple headers supported by the resource, for the                                  headers  parameter, list the allowed simple headers                             separated by commas. To allow all simple headers, set  headers="*" . To add your own headers, for the  exposedHeaders                              parameter after the default headers, list the allowed headers separated                             by commas. Save the  web.config file , which automatically restarts the                     website. ]]></column>
		</row>
		<row PageID="ad2e89be-057a-4f74-8e00-1584b36fe9d8" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="601117a0-e775-5940-3673-03046075edd8" RecordSourceID="22377">
			<column name="Content"><![CDATA[
Microsoft Power BI is a collection of online services and features that you use to find and visualize data, share analysis, and collaborate intuitively. This collection includes the Power BI Acumatica content pack (see the screenshot below), which you can use to quickly connect to your business data and immediately glean insights from it. This content includes a predefined dashboard, a set of reports, and the dataset to explore and provide details about opportunities, such as your total won opportunities by date. {br}

 Acumatica continues to support the content pack, and updates to it will be announced in the Release Notes to upcoming versions. The content pack consists of a set of Acumatica ERP generic inquiries that are exposed through the OData protocol and the data model that enables Power BI requests to the data retrieved through the inquiries. You can also create custom views for Power BI. ((({S:Hint}The Power BI Acumatica content pack requires Acumatica ERP 5.2 or higher.
))){br}

To connect to your instance of Acumatica ERP from Microsoft Power BI, perform the following actions:[anchor|#ol_pdk_3j4_rs]
#Open Microsoft Power BI in a browser.
#Click '''Sign In''', or set up a new account if you don&rsquo;t have one.
#On the '''Sign in to Microsoft Power BI''' page, which opens, enter your credentials.
#Connect to Acumatica ERP with Power BI. For more details, see [https://docs.microsoft.com/en-us/power-bi/service-connect-to-acumatica|Connect to Acumatica with Power BI].

==Custom Power BI Views==
You can create custom Power BI views for your instance of Acumatica ERP.{br}

To create your own view of Acumatica ERP data in Microsoft Power BI, perform the following actions:[anchor|#ol_lw2_nnt_rs]
#Create a generic inquiry exposed via OData (see [HelpRoot_ReportingTools\CU__how_OData_Expose_GI|To Expose a Generic Inquiry Through the OData Interface] for details). We recommend that you place the generic inquiry in the <tt>Hidden &gt; BI Views</tt> folder of the site map, as the following screenshot shows.[anchor|#image_lwg_q5v_rs][image:UserGuide/Images/SM__MNG_GI_PowerBI03.png|popup|Selecting the Site Map Location Folder for Power BI Views|440px]
#In Microsoft Excel, prepare the data model for Power BI. By using the Power Pivot add-in to Microsoft Excel, create, arrange, and normalize the data model of the raw data obtained from the generic inquiry. For information on how to obtain data through the generic inquiry to Microsoft Excel, see [HelpRoot_ReportingTools\CU__how_OData_Excel|To View Exposed Generic Inquiries in Excel]. For more information on data models, see creating a data model in Excel in the Microsoft documentation.
#Upload the Excel file with the data model to Microsoft Power BI. For more information, see [https://docs.microsoft.com/en-us/power-bi/service-excel-workbook-files|Getting data from Excel to Power BI] in the Microsoft documentation.

==Requirements for a User Account Role==
The access to Power BI views from the Acumatica content pack is configured for user roles in Acumatica ERP as the access to the corresponding generic inquiries in the application&rsquo;s site map. An out-of-the-box Acumatica ERP instance includes the predefined ''BI'' access role, which has access to the generic inquires included in the Acumatica content pack for Power BI. The default ''admin'' user account is assigned the ''BI'' role. A user with the ''Administrator'' role has full access rights in the system and can assign the ''BI'' role to the needed users by using the [HelpRoot_FormReference\SM_20_10_10|Users] ([~/?ScreenId=SM201010|SM201010]) form.{br}

The generic inquiries that are exposed via OData and used for the Acumatica content pack are located in the <tt>Hidden &gt; BI Views</tt> folder in the site map. To restrict user access to certain views in Power BI, you have to create the additional user roles in Acumatica ERP. For each role, you have to configure the access to the appropriate generic inquiries in the site map by using the [HelpRoot_FormReference\SM_20_10_20|Access Rights by Screen] ([~/?ScreenId=SM201020|SM201020]) form. For more information on granting user access to Acumatica ERP forms, see [HelpRoot_Administration\US__mng_Roles|Managing User Access Rights].
==Related Articles==
*[HelpRoot_ReportingTools\CU__how_OData_Expose_GI|To Expose a Generic Inquiry Through the OData Interface]
*[HelpRoot_ReportingTools\CU__how_OData_Excel|To View Exposed Generic Inquiries in Excel]]]></column>
			<column name="PlainText"><![CDATA[Connecting to  Acumatica ERP from     Power BI Microsoft Power BI is a collection of online services and features that you use to find and       visualize data, share analysis, and collaborate intuitively. This collection includes the       Power BI  Acumatica content pack (see the screenshot below), which you can use to quickly connect to your       business data and immediately glean insights from it. This content includes a predefined       dashboard, a set of reports, and the dataset to explore and provide details about       opportunities, such as your total won opportunities by date.   Acumatica continues to support the content pack, and updates to it will be announced in the Release       Notes to upcoming versions. The content pack consists of a set of  Acumatica ERP generic inquiries that are exposed through the OData protocol and the data model that       enables Power BI requests to the data retrieved through the inquiries. You can also create       custom views for Power BI.  The Power BI  Acumatica content pack requires  Acumatica ERP 5.2 or higher. To connect to your instance of  Acumatica ERP from Microsoft Power BI, perform the following actions: Open Microsoft Power BI in a browser. Click  Sign In , or set up a new account if you don't have           one. On the  Sign in to Microsoft Power BI  page, which opens, enter           your credentials. Connect to  Acumatica ERP with Power BI. For more details, see  Connect to Acumatica with Power BI Connect to Acumatica with Power BI. Custom Power BI Views You can create custom Power BI views for your instance of  Acumatica ERP. To create your own view of  Acumatica ERP data in Microsoft Power BI, perform the following actions: Create a generic inquiry exposed via OData (see  To Expose a Generic Inquiry Through the OData Interface for details). We recommend that you place the             generic inquiry in the  Hidden > BI Views  folder of the site map, as             the following screenshot shows. Selecting the Site Map Location Folder for Power BI Views In Microsoft Excel, prepare the data model for Power BI. By using the Power Pivot             add-in to Microsoft Excel, create, arrange, and normalize the data model of the raw data             obtained from the generic inquiry. For information on how to obtain data through the             generic inquiry to Microsoft Excel, see  To View Exposed Generic Inquiries in Excel. For             more information on data models, see creating a data model in Excel in the Microsoft             documentation. Upload the Excel file with the data model to Microsoft Power BI. For more information,             see  Getting data from Excel to Power BI Getting data from Excel to Power BI in the             Microsoft documentation. Requirements for a User Account Role The access to Power BI views from the  Acumatica content pack is configured for user roles in  Acumatica ERP as the access to the corresponding generic inquiries in the application's site map. An         out-of-the-box  Acumatica ERP instance includes the predefined  BI  access role, which has access to the generic         inquires included in the  Acumatica content pack for Power BI. The default  admin  user account is assigned the            BI  role. A user with the  Administrator  role has full access rights in the         system and can assign the  BI  role to the needed users by using the   ([~/?ScreenId=SM201010|SM201010]) Users (SM201010) form. The generic inquiries that are exposed via OData and used for the  Acumatica content pack are located in the  Hidden > BI Views  folder in the site         map. To restrict user access to certain views in Power BI, you have to create the additional         user roles in  Acumatica ERP. For each role, you have to configure the access to the appropriate generic inquiries in         the site map by using the   ([~/?ScreenId=SM201020|SM201020]) Access Rights by Screen (SM201020) form. For more         information on granting user access to  Acumatica ERP forms, see  Managing User Access Rights. ]]></column>
		</row>
		<row PageID="542ab6c9-85e5-4605-8c09-ad91a0feb8fd" Language="en-US" PageRevisionID="1" PlainText="Access Rights to Generic Inquiries In  Acumatica ERP,     you can customize the access rights of users to manage generic inquiry pages. You can control     their access to forms and operations based on each user's job responsibilities. In this topic,     you will read about access rights capabilities to generic inquiries. For more information about     generic inquiries, see  Generic Inquiry Overview. Setting Access You can set up access to generic inquiries by using   ([~/?ScreenId=SM201020|SM201020]) Access Rights by Screen     (SM201020) form, by selecting the  Site Map Location  of an inquiry form     and then selecting the relevant level of access for a user role in  Access      Rights  column. For more information on access rights, see  User Access Rights. If a generic inquiry form replaces an entry or      maintenance form, access rights to the generic inquiry are inherited from this entry or      maintenance form. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="a75245ed-0a9f-7811-a32a-362ec89ef69f" RecordSourceID="22377">
			<column name="Content"><![CDATA[
In Acumatica ERP, you can customize the access rights of users to manage generic inquiry pages. You can control their access to forms and operations based on each user&rsquo;s job responsibilities. In this topic, you will read about access rights capabilities to generic inquiries. For more information about generic inquiries, see [HelpRoot_ReportingTools\rp_tools_GI_Overview|Generic Inquiry Overview].
==Setting Access==
You can set up access to generic inquiries by using [HelpRoot_FormReference\SM_20_10_20|Access Rights by Screen] ([~/?ScreenId=SM201020|SM201020]) form, by selecting the '''Site Map Location''' of an inquiry form and then selecting the relevant level of access for a user role in '''Access Rights''' column. For more information on access rights, see [HelpRoot_Administration\US__con_Access_Rights|User Access Rights].((({S:Hint}If a generic inquiry form replaces an entry or maintenance form, access rights to the generic inquiry are inherited from this entry or maintenance form.
)))]]></column>
		</row>
		<row PageID="8e9dcb94-9f1d-4cd9-8216-043227071c61" Language="en-US" PageRevisionID="1" Content="In Acumatica ERP you can inspect data entry form elements to figure out which data access classes (DACs) and data fields are related to them. To do so, you inspect the relevant user interface elements (such as boxes, buttons, and check boxes). &#xA;==To Inspect Elements==[anchor|#_29fd6780-995d-4013-bb67-a1deb6e9851d]&#xA;#Navigate to form whose UI elements you want to inspect to find the needed DAC.&#xA;#On the form title bar, click '''Customization''' &gt; '''Inspect Element'''.&#xA;#On the form, click the element that you want to inspect.&#xA;#:((({S:Hint}As an alternative to Steps 2–3, on the relevant Acumatica ERP form, you can point at an element and press the Ctrl+Alt+Click combination to quickly open the '''Element Properties''' dialog box.&#xA;)))&#xA;#:The '''Element Properties''' dialog box opens.&#xA;#Note the '''Data Class''' and '''Data Field''' elements, which correspond to the class and field you need.&#xA;" PlainText="To Inspect Elements In  Acumatica ERP you can inspect data entry form elements to figure out which data access classes             (DACs) and data fields are related to them. To do so, you inspect the relevant user             interface elements (such as boxes, buttons, and check boxes).  To Inspect Elements Navigate to form whose UI elements you want to inspect to find the needed                     DAC. On the form title bar, click  Customization Inspect Element . On the form, click the element that you want to inspect. As an alternative                         to Steps 2–3, on the relevant  Acumatica ERP form, you can point at an element and press the Ctrl+Alt+Click                         combination to quickly open the  Element Properties                          dialog box. The  Element Properties  dialog                         box opens. Note the  Data Class  and  Data Field                      elements, which correspond to the class and field you need. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="3e2b6dde-eb75-13f4-eace-da0c36f23c57" RecordSourceID="22377" />
		<row PageID="03448aec-3992-4632-a32e-1284e773dc1f" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="7981364d-4b79-dee2-9cbc-e413e2ffc640" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can create inquiry forms by using the [HelpRoot_FormReference\SM_20_80_00|Generic Inquiry] ([~/?ScreenId=SM208000|SM208000]) form. 
==Before You Begin==
To design an inquiry, you need to have a general knowledge of data access classes (DACs), through which data can be extracted from the system database tables. For more information about DACs, see [HelpRoot_Dev_Customization\CG_GL_BL_DAC|Data Access Class].{br}

Before you design an inquiry, you should perform the preparation steps described in [HelpRoot_ReportingTools\RP__CON_tools_gi_design|Preparation for Creating a Generic Inquiry].
==To Create the Generic Inquiry==((({S:Hint}These steps are the basis and the starting point of creating a generic inquiry and are required except as noted.
)))
Perform the following steps:[anchor|#_9d7bd4a1-158e-490b-9bb3-758cad753d66]
#Open the [HelpRoot_FormReference\SM_20_80_00|Generic Inquiry] ([~/?ScreenId=SM208000|SM208000]) form by searching for or navigating to it.
#In the Summary area, in the '''Inquiry Title''' box, type a name for the inquiry.
#Optional: In the '''Select Top x Records''' box, type the maximum number of records to be displayed as results.
#Optional: In the '''Arrange Parameters in x Columns''' box, type the number of columns in which the elements for parameters should be arranged in the Selection area of the inquiry form.
#On the '''Tables''' tab, do the following for each table (that is, data access class) you need for your inquiry:
##On the table toolbar, click '''Add Row'''.
##In the '''Table Name''' column, select a DAC. 
##:((({S:Hint}The list has about 600 DACs, so in the Selection dialog box, you should use the Search box (upper right) to find a DAC.
)))
##Optional: In the '''Alias''' column, specify the value to be used in SQL statements to designate the table. (If no alias is specified, the '''Table Name''' value will be used.)
#Click '''Save''' on the form toolbar.

==To Specify Table Relations==
((({S:Hint}You can specify the relations between tables so that the system can generate SQL requests to get the required data from the tables involved. Specifying table relations is optional, because some generic inquiries do not require it, such as generic inquiries that use only one DAC.
))){br}

On the '''Relations''' tab of the [HelpRoot_FormReference\SM_20_80_00|Generic Inquiry] ([~/?ScreenId=SM208000|SM208000]) form with the generic inquiry selected[anchor|#_04533aad-b3ca-4304-813f-87eaf485394e]
#On the table toolbar of the '''Table Relations''' table, click '''Add Row'''. In the row, select a parent table, join type, and child table. 
#On the table toolbar of the '''DataField Links for Active Relations''' table, click '''Add Row'''. Enter a value in the following columns: '''Parent Field''', '''Condition''', and '''Child Field'''.
#If this is the last row to be added to this table, click '''Save''' on the form toolbar.

==To Configure Inquiry Parameters==
((({S:Hint}Some generic inquiries have a Selection area in the top part of the inquiry, above the table, that consists of parameters (UI elements in which a user can make selections). You perform these steps if the generic inquiry will have parameters.
))){br}

For each inquiry parameter, on the '''Parameters''' tab of the [HelpRoot_FormReference\SM_20_80_00|Generic Inquiry] ([~/?ScreenId=SM208000|SM208000]) form with the inquiry selected, do the following: [anchor|#_7dfe7eb5-27ca-4e00-a08a-370684bdfc7f]
#Click '''Add Row''' on the table toolbar.
#If this parameter must be selected by the user on the generic inquiry, select the '''Is Required''' check box.
#In the '''Name''' column, specify the name of the inquiry parameter. 
#:((({S:Hint}This value will be used to set up parameter conditions on the '''Conditions''' tab.
)))
#In the '''Display Name''' column, type the name of the element on the generic inquiry.
#In the '''Schema Field''' column, select the database field selected as the schema for this field. If no schema is specified, a simple text box will be used on the inquiry form.
#If a '''Schema Field''' value is specified, select the '''From Schema''' check box, and select one of values in the''' Default Value''' column; this value will be the default value for the corresponding parameter on the inquiry.
#If this is the last row to be added to this table, click '''Save''' on the form toolbar.

==To Specify Conditions==((({S:Hint}Optionally, you can specify the conditions that determine the data (records) to be displayed. You must create a condition for every parameter you have added on the '''Parameters''' tab. If a parameter does not have a corresponding condition specified on this tab, user selections for the parameter will not affect the records that are returned; however, it will still be displayed in the Selection area of the generic inquiry.
)))
On the '''Conditions''' tab of the [HelpRoot_FormReference\SM_20_80_00|Generic Inquiry] ([~/?ScreenId=SM208000|SM208000]) form with the inquiry selected, do the following for each condition to be applied to the query results to be returned:{br}

[anchor|#_7d75448f-9ae1-49d0-8210-23b20818db4a]
#Click '''Add Row''' on the table toolbar.
#In the '''Active''' column, select the check box to specify the row as an active condition.
#In the '''Data Field''' column, select the field whose value the condition should be applied to.
#In the '''Condition''' column, select the condition to be applied to the value of the field specified as the '''Data Field'''. 
#If applicable, in the '''Value 1''' column, specify the value to be used in the selected condition.
#If applicable, in the '''Value 2''' column, specify the value to be used in the selected condition.
#If applicable, in the '''From Schema''' column, select the check box, so that in the '''Value 1''' or '''Value 2''' column you can select one of the values of the selected '''Data Field''' that is stored in the system, such as a particular document type or document number.
#If applicable, in the '''Operator''' column, select a logical operator, which can be ''And'' or ''Or'' to join conditions in a logical expression.
#If applicable, use opening and closing parentheses of various levels in the '''Brackets''' columns for composing a logical expression that consists of multiple conditions and operators to join them.
#If this is the last row to be added to this table, click '''Save''' on the form toolbar.

==To Configure the Results Area==((({S:Hint}You perform these steps to configure the area of the resulting generic inquiry that has query results displayed as a of a table consisting of columns with values collected from DACs. You have to define the list of columns that will be used to show the generic inquiry results (Otherwise, when you run the query, you would see the empty inquiry form.)
)))
On the '''Results Grid''' tab of the [HelpRoot_FormReference\SM_20_80_00|Generic Inquiry] ([~/?ScreenId=SM208000|SM208000]) form with the inquiry selected, perform the following steps for each column you want to add to the table shown on the generic inquiry: [anchor|#_cc6d343f-94cb-4d9c-a18f-20fd79906db8]
#Click '''Add Row''' on the table toolbar.
#In the '''Object''' column, select the DAC that contains the particular column you want to add to the generic inquiry.
#In the '''Data Field''' column, select the particular DAC column.
#If applicable, in the '''Schema Field''' column, specify a schema for the column. Generally, you select the schema used for the column in its DAC.
#Optional: Specify the width of the column (in pixels) if the values are long strings.
#Select the '''Visible''' check box if you want this column to be visible in the table by default. Clear the check box if the column will be an optional column that can be made visible by users as needed.
#Click '''Save''' on the form toolbar.

==To Sort Results==((({S:Hint}
To sort the results, you can select columns upon which the table rows with results will be sorted and specify how the values should be ordered. 
)))
On the '''Sort Order''' tab of the [HelpRoot_FormReference\SM_20_80_00|Generic Inquiry] ([~/?ScreenId=SM208000|SM208000]) form with the inquiry selected, for each sorting condition, do the following: [anchor|#_2decbd98-7254-45c8-b1d5-13a84c1ac1b5]
#Click '''Add Row''' to append a new row.
#In the '''Data Field''' column, select the value that represents the generic inquiry column whose values should be ordered.
#In the '''Sort Order''' column, select ''Descending ''or ''Ascending''.
#Click '''Save''' on the form toolbar.
((({S:Hint}You can speed up a generic inquiry if you define a custom sorting order that optimizes a database query. For example, such an order may include fewer fields than a default sorting order, which contains keys for all tables added in the generic inquiry.
)))
==To Preview the Inquiry==
((({S:Hint}You may need to preview the inquiry you have created. 
))){br}

On the [HelpRoot_FormReference\SM_20_80_00|Generic Inquiry] ([~/?ScreenId=SM208000|SM208000]) form, do the following: [anchor|#_9ec10f93-f35e-41f6-92e1-2a8b4f2eaa76]
#In the '''Inquiry Title''' box, select the generic inquiry that you want to preview. 
#Click '''View Inquiry''' on the form toolbar.
{br}

To return to the [HelpRoot_FormReference\SM_20_80_00|Generic Inquiry] form, click '''Back''' (or the equivalent button) on the toolbar of your browser. 
==To Make the New Inquiry Visible to Other Users==
((({S:Hint}You may want to publish the generic inquiry and make it visible to other users. 
))){br}

To add the new inquiry to the site map of the classic user interface, do the following while viewing the inquiry on the [HelpRoot_FormReference\SM_20_80_00|Generic Inquiry] ([~/?ScreenId=SM208000|SM208000]) form:[anchor|#_0220a3b6-0650-4cba-be32-9849c999411e]
#In the '''Site Map Title''' box, enter the name to be used for the inquiry in the site map.
#In the '''Site Map Location''' box, select site map location. 
#In the '''Workspace''' box, select a workspace from which the inquiry can be accessed.
#In the '''Category''' box, select a category under which the inquiry will be displayed in the selected workspace.
#On the form toolbar, click '''Save'''. 
#:Notice that the '''Screen ID''' box is populated with the identifier of the generic inquiry. The system assigns the inquiry form an automatically generated ID in a format similar to that of screen IDs of other forms, with ''GI'' as the two-letter module code: ''GI0000mn''.
]]></column>
			<column name="PlainText"><![CDATA[To Design a Generic Inquiry You can create inquiry forms by using the   ([~/?ScreenId=SM208000|SM208000]) Generic Inquiry (SM208000) form.  Before You Begin To design an inquiry, you need to have a general knowledge of data access classes                 (DACs), through which data can be extracted from the system database tables. For                 more information about DACs, see  Data Access Class. Before you design an inquiry, you should perform the preparation steps described in                      Preparation for Creating a Generic Inquiry Preparation for Creating a Generic Inquiry. To Create the Generic Inquiry These steps are the basis and the starting point of creating a generic inquiry and                 are required except as noted. Perform the following steps: Open the   ([~/?ScreenId=SM208000|SM208000]) Generic Inquiry                     (SM208000) form by searching for or navigating to it. In the Summary area, in the  Inquiry Title  box, type a                     name for the inquiry. Optional: In the  Select Top x Records  box, type the                     maximum number of records to be displayed as results. Optional: In the  Arrange Parameters in x Columns  box,                     type the number of columns in which the elements for parameters should be                     arranged in the Selection area of the inquiry form. On the  Tables  tab, do the following for each table (that                     is, data access class) you need for your inquiry: On the table toolbar, click  Add Row . In the  Table Name  column, select a DAC.  The                                 list has about 600 DACs, so in the Selection dialog box, you should                                 use the Search box (upper right) to find a DAC. Optional: In the  Alias  column, specify the value                             to be used in SQL statements to designate the table. (If no alias is                             specified, the  Table Name  value will be                             used.) Click  Save  on the form toolbar. To Specify Table Relations You can specify the relations between tables so that the system can generate                     SQL requests to get the required data from the tables involved. Specifying table                     relations is optional, because some generic inquiries do not require it, such as                     generic inquiries that use only one DAC. On the  Relations  tab of the   ([~/?ScreenId=SM208000|SM208000]) Generic Inquiry (SM208000) form with the generic inquiry selected On the table toolbar of the  Table Relations  table, click                          Add Row . In the row, select a parent table, join                     type, and child table.  On the table toolbar of the  DataField Links for Active                         Relations  table, click  Add Row . Enter a                     value in the following columns:  Parent Field ,                          Condition , and  Child                     Field . If this is the last row to be added to this table, click                          Save  on the form toolbar. To Configure Inquiry Parameters Some generic inquiries have a Selection area in the top part of the inquiry,                     above the table, that consists of parameters (UI elements in which a user can                     make selections). You perform these steps if the generic inquiry will have                     parameters. For each inquiry parameter, on the  Parameters  tab of the   ([~/?ScreenId=SM208000|SM208000]) Generic Inquiry (SM208000) form with the inquiry                 selected, do the following:  Click  Add Row  on the table toolbar. If this parameter must be selected by the user on the generic inquiry, select                     the  Is Required  check box. In the  Name  column, specify the name of the inquiry                     parameter.  This value will be used to set up parameter conditions on the                              Conditions  tab. In the  Display Name  column, type the name of the element                     on the generic inquiry. In the  Schema Field  column, select the database field                     selected as the schema for this field. If no schema is specified, a simple text                     box will be used on the inquiry form. If a  Schema Field  value is specified, select the                          From Schema  check box, and select one of values in                         the  Default Value  column; this value will be the                     default value for the corresponding parameter on the inquiry. If this is the last row to be added to this table, click                          Save  on the form toolbar. To Specify Conditions Optionally, you can specify the conditions that determine the data (records) to be                 displayed. You must create a condition for every parameter you have added on the                      Parameters  tab. If a parameter does not have a                 corresponding condition specified on this tab, user selections for the parameter                 will not affect the records that are returned; however, it will still be displayed                 in the Selection area of the generic inquiry. On the  Conditions  tab of the   ([~/?ScreenId=SM208000|SM208000]) Generic Inquiry (SM208000) form with the inquiry selected, do the following                 for each condition to be applied to the query results to be returned: Click  Add Row  on the table toolbar. In the  Active  column, select the check box to specify                         the row as an active condition. In the  Data Field  column, select the field whose                         value the condition should be applied to. In the  Condition  column, select the condition to be                         applied to the value of the field specified as the  Data                             Field .  If applicable, in the  Value 1  column, specify the                         value to be used in the selected condition. If applicable, in the  Value 2  column, specify the                         value to be used in the selected condition. If applicable, in the  From Schema  column, select the                         check box, so that in the  Value 1  or  Value                             2  column you can select one of the values of the selected                              Data Field  that is stored in the system, such as                         a particular document type or document number. If applicable, in the  Operator  column, select a                         logical operator, which can be  And  or  Or  to join conditions in                         a logical expression. If applicable, use opening and closing parentheses of various levels in the                              Brackets  columns for composing a logical                         expression that consists of multiple conditions and operators to join                         them. If this is the last row to be added to this table, click                              Save  on the form toolbar. To Configure the Results Area You perform these steps to configure the area of the resulting generic inquiry                 that has query results displayed as a of a table consisting of columns with values                 collected from DACs. You have to define the list of columns that will be used to                 show the generic inquiry results (Otherwise, when you run the query, you would see                 the empty inquiry form.) On the  Results Grid  tab of the   ([~/?ScreenId=SM208000|SM208000]) Generic Inquiry (SM208000) form with the inquiry selected, perform the following                 steps for each column you want to add to the table shown on the generic inquiry:  Click  Add Row  on the table toolbar. In the  Object  column, select the DAC that contains the                     particular column you want to add to the generic inquiry. In the  Data Field  column, select the particular DAC                     column. If applicable, in the  Schema Field  column, specify a                     schema for the column. Generally, you select the schema used for the column in                     its DAC. Optional: Specify the width of the column (in pixels) if the values are long                     strings. Select the  Visible  check box if you want this column to                     be visible in the table by default. Clear the check box if the column will be an                     optional column that can be made visible by users as needed. Click  Save  on the form toolbar. To Sort Results To sort the results, you can select columns upon which the table rows with                     results will be sorted and specify how the values should be ordered.  On the  Sort Order  tab of the   ([~/?ScreenId=SM208000|SM208000]) Generic Inquiry (SM208000) form with the inquiry selected, for each sorting                 condition, do the following:  Click  Add Row  to append a new row. In the  Data Field  column, select the value that                     represents the generic inquiry column whose values should be ordered. In the  Sort Order  column, select  Descending  or                          Ascending . Click  Save  on the form toolbar. You can speed up a generic inquiry if you define a custom sorting order that                 optimizes a database query. For example, such an order may include fewer fields than                 a default sorting order, which contains keys for all tables added in the generic                 inquiry. To Preview the Inquiry You may need to preview the inquiry you have created.  On the   ([~/?ScreenId=SM208000|SM208000]) Generic Inquiry (SM208000) form, do the                 following:  In the  Inquiry Title  box, select the generic inquiry                         that you want to preview.  Click  View Inquiry  on the form toolbar. To return to the   ([~/?ScreenId=SM208000|SM208000]) Generic Inquiry form, click                      Back  (or the equivalent button) on the toolbar of your                 browser.  To Make the New Inquiry Visible to Other Users You may want to publish the generic inquiry and make it visible to other                     users.  To add the new inquiry to the site map of the classic user interface, do the                 following while viewing the inquiry on the   ([~/?ScreenId=SM208000|SM208000]) Generic Inquiry (SM208000) form: In the  Site Map Title  box, enter the name to be used for                     the inquiry in the site map. In the  Site Map Location  box, select site map location.  In the  Workspace  box, select a workspace from which the                     inquiry can be accessed. In the  Category  box, select a category under which the                     inquiry will be displayed in the selected workspace. On the form toolbar, click  Save .  Notice that the                              Screen ID  box is populated with the identifier of                         the generic inquiry. The system assigns the inquiry form an automatically                         generated ID in a format similar to that of screen IDs of other forms, with                              GI  as the two-letter module code:  GI0000mn . ]]></column>
		</row>
		<row PageID="4ddf2c8d-5b67-425c-8862-34e10256dacf" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="ecf6f9b9-c6c1-83de-a1a7-c048a1514b6b" RecordSourceID="22377">
			<column name="Content"><![CDATA[
A side panel is a navigation option that can be enabled for a generic inquiry on the '''Navigation''' tab of the [HelpRoot_FormReference\SM_20_80_00|Generic Inquiry] ([~/?ScreenId=SM208000|SM208000]) form. The side panel can be used to display the details of entities related to a record that is currently selected on the inquiry. The side panel navigation path can be added to existing generic inquires or new ones. 
==To Enable the Side Panel==[anchor|#_af985784-536a-4a67-a01d-965e66489326]
#Navigate to [HelpRoot_FormReference\SM_20_80_00|Generic Inquiry] ([~/?ScreenId=SM208000|SM208000]) form.
#In the '''Inquiry Title''' box, select the generic inquiry for which you want to enable the side panel.
#In the '''Screens''' area of the '''Navigation''' tab, add the form of the related entity whose details you want to review in the resulting side panel. 
#In the '''Navigation Parameters''' table, specify the parameters to be passed to the selected form. 
#In the '''Window Mode''' box, select the ''Side Panel'' option.
#In the '''Icon''' box, select an image to be displayed in the selection area of the side panel.

==To Add Multiple Side Panel Navigation Paths=={br}

You can add multiple side panel navigation paths to a generic inquiry. The only limit is the set of tables in the generic inquiry, which you can easily expand by adding new tables and setting up table relations. With multiple side panel navigation paths, for each record in the inquiry, you can view the details of multiple related entities, by switching between paths in the selection area of the side panel.
==To Add a Dashboard to the Side Panel==
You can add a dashboard with parameters to a side panel. Adding the navigation path for a dashboard is done the same way as for the other forms. When you are going through the records of the inquiry, the system will filter widget data by the parameters passed from the inquiry. For details on adding parameters to dashboards, see [HelpRoot_GettingStarted\GS__con_Dashboard_Configuration|Dashboard Configuration].]]></column>
			<column name="PlainText"><![CDATA[To Enable the Side Panel A side panel is a navigation option that can be enabled for a generic inquiry on the                      Navigation  tab of the   ([~/?ScreenId=SM208000|SM208000]) Generic Inquiry (SM208000) form. The side panel can be                 used to display the details of entities related to a record that is currently                 selected on the inquiry. The side panel navigation path can be added to existing                 generic inquires or new ones.  To Enable the Side Panel Navigate to   ([~/?ScreenId=SM208000|SM208000]) Generic Inquiry (SM208000) form. In the  Inquiry Title  box, select the generic inquiry for                     which you want to enable the side panel. In the  Screens  area of the                          Navigation  tab, add the form of the related entity                     whose details you want to review in the resulting side panel.  In the  Navigation Parameters  table, specify the                     parameters to be passed to the selected form.  In the  Window Mode  box, select the  Side Panel                      option. In the  Icon  box, select an image to be displayed in the                     selection area of the side panel. To Add Multiple Side Panel Navigation Paths You can add multiple side panel navigation paths to a generic inquiry. The only limit                 is the set of tables in the generic inquiry, which you can easily expand by adding                 new tables and setting up table relations. With multiple side panel navigation                 paths, for each record in the inquiry, you can view the details of multiple related                 entities, by switching between paths in the selection area of the side panel. To Add a Dashboard to the Side Panel You can add a dashboard with parameters to a side panel. Adding the navigation path                 for a dashboard is done the same way as for the other forms. When you are going                 through the records of the inquiry, the system will filter widget data by the                 parameters passed from the inquiry. For details on adding parameters to dashboards,                 see  Dashboard Configuration. ]]></column>
		</row>
		<row PageID="bac9c962-2ef3-4266-b8a0-cdc0e7cf8358" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="155dfd55-316d-af61-9c14-808c9de837b2" RecordSourceID="22377">
			<column name="Content"><![CDATA[
This topic describes the steps of designing a sample generic inquiry for testing purposes, so that you can develop a better understanding of the process mechanics. {br}

You can create inquiry forms by using the [HelpRoot_FormReference\SM_20_80_00|Generic Inquiry] ([~/?ScreenId=SM208000|SM208000]) form. You can perform these steps on the applicable forms to practice creating a generic inquiry or just read about them and consult the applicable form as needed. The sample generic inquiry will collect data from the {{ARInvoice}} ({{PX.Objects.AR.ARInvoice}}) data access class (DAC) and display columns with the invoice reference number, the balance of the invoice with that number, and the document type of the invoice.((({S:Hint}If you are performing the steps of this example, we recommend that you set up your system with the ''SalesDemo'' database to populate it with demo data. For more information, see [HelpRoot_Install\Installing_ERP_Instance|To Deploy an Acumatica ERP Instance].
))){br}{TOC}
==Preparation Stage==
Because generic inquiries use data that is available through DACs, you will have to retrieve data from the relevant data access class. Before you create the inquiry, you need to perform the following research:[anchor|#_40fe9083-3571-44a9-b8cc-7e0849a131a2]
#''Understanding the DACs to be used for the inquiry'': This generic inquiry will use the {{ARInvoice}} DAC, so for this inquiry, you need to collect data from the {{ARInvoice}} system database to create it.
#''Inspecting elements'': Because the generic inquiry that you are going to make will have three columns to display the invoice reference number, the balance, and the document type, you will need to inspect the [HelpRoot_FormReference\AR_30_10_00|Invoices and Memos] ([~/?ScreenId=AR301000|AR301000]) form to explore which classes you can use to access the needed data as follows:
##Open the [HelpRoot_FormReference\AR_30_10_00|Invoices and Memos] ([~/?ScreenId=AR301000|AR301000]) form by searching for or navigating to it.
##On the form title bar, click '''Customization''' > '''Inspect Element'''.
##Click the '''Reference Nbr.''' element. The '''Element Properties''' dialog box opens. You are interested in two elements—'''Data Class''' and '''Data Field''', which correspond to the class and field you need—which are, respectively, {{ARInvoice}} and {{RefNbr}}. 
##While you are pointing at the '''Balance''' element, press Ctrl+Alt+Click to quickly open the '''Element Properties''' dialog box. You can see that that the '''Data Class''' is again {{ARInvoice}}, while the '''Data Field''' is {{CuryDocBal}}. 
##Inspect the '''Type''' element to find out that its '''Data Field''' is {{DocType}}.

==Creating the New Inquiry==
To begin the process of creating the inquiry, you do the following: [anchor|#ol_uw1_g5f_ms]
#Open the [HelpRoot_FormReference\SM_20_80_00|Generic Inquiry] ([~/?ScreenId=SM208000|SM208000]) form by searching for or navigating to it.
#In the Summary area, in the '''Inquiry Title''' box, type the name for the inquiry: <tt>SampleGenericInquiry</tt>.
#Leave the '''Select Top x Records''' box blank, so that you can display all the results.
#In the '''Arrange Parameters in x Columns''' box, leave the default value, because this specific inquiry will not have any elements (Selection criteria) to display.
#On the '''Tables''' tab, do the following:
##On the table toolbar, click '''Add Row'''.
##In the '''Table Name''' column, select {{PX.Objects.AR.ARInvoice}}. (In this example, you need to add a row for only this DAC, because both of the fields that are going to be used are in this table.) 
##:((({S:Hint}The list has about 600 DACs, so in the Selection dialog box, you should use the Search box (upper right) to find the DAC.
)))
##In the '''Alias''' column, type {{ARInvoice}}.
#Click '''Save''' on the form toolbar.

==Configuring the Results Grid (Table)==
 On the '''Results Grid''' tab of the [HelpRoot_FormReference\SM_20_80_00|Generic Inquiry] ([~/?ScreenId=SM208000|SM208000]) form with the inquiry selected, you perform the following steps to select from the involved DACs the columns you will add to the table of the generic inquiry: [anchor|#ol_ovb_g5f_ms]
#Click '''Add Row''' on the table toolbar to add a new row.
#In the '''Object''' column, select ''ARInvoice''.
#In the '''Data Field''' column, select ''RefNbr''.
#Click '''Add Row''' on the table toolbar to add a new row.
#In the '''Object''' column, select ''ARInvoice''.
#In the '''Data Field''' column, select ''CuryDocBal''.
#Click '''Add Row''' on the table toolbar to add a new row.
#In the '''Object''' column, select ''ARInvoice''.
#In the '''Data Field''' column, select ''DocType''.
#In all the rows you have added on this tab, select the '''Visible''' check box. This means that the column being added in this row will be visible in the table by default. If this check box is cleared, the column will not be visible initially but can be brought up by users as needed.
#Click '''Save''' on the form toolbar.

==Optional Settings==
This section describes optional settings you could specify for the generic inquiry on the [HelpRoot_FormReference\SM_20_80_00|Generic Inquiry] ([~/?ScreenId=SM208000|SM208000]) form to further refine the inquiry. {br}

''Parameters'': On the Parameters tab, you could add a variety of parameters that would be selection criteria in the generic inquiry. As one example, you could add a '''Document Type''' box to the Selection area, to provide additional flexibility to the existing two-column inquiry, allowing the user to select the particular document type for which invoices would be displayed. To do this, you do the following:[anchor|#_312311d4-7b81-44a8-bca9-74b3823cd878]
#On the '''Parameters''' tab, click '''Add Row''' on the table toolbar.
#In the '''Name''' column, type <tt>DocType</tt>.
#In the '''Schema Field''' column, select ''ARInvoice.DocType''.
#In the '''Display Name''' column, type <tt>Document Type</tt>.
#Leave the default values in the other columns.
#:((({S:Hint}Creating the appropriate conditions for every parameter is required. If a parameter does not have a corresponding condition specified on this tab, user selections for the parameter will not affect the records that are returned; however, the parameter will still be displayed in the Selection area of the generic inquiry.
)))
#On the '''Conditions''' tab, click '''Add Row''' on the table toolbar.
#In the '''Data Field''' column, select ''ARInvoice.DocType''.
#In the '''Condition''' column, select ''Equals''.
#In the '''Value 1''' column, select ''&#91;DocType&#93;''.
#Leave the default values in the other columns.
#Click '''Save''' on the form toolbar.
#:This generic inquiry now has an optional box in the Selection area above the table with the query results. In this box, a user can select the particular document type of the results to be displayed. For example, if ''Credit Memo'' is selected, the results area will only display entries that have the '''Document Type''' of ''Credit Memo'' on the [HelpRoot_FormReference\AR_30_10_00|Invoices and Memos] ([~/?ScreenId=AR301000|AR301000]) form; documents with other types will not be displayed.
{br}

Suppose you also wanted to add the optional '''Positive Only''' check box to the selection area of the generic inquiry. This will provide an option to display only invoices with a positive balance. You would do the following:[anchor|#_e8b6f898-b8ea-4d82-9c21-edf9098f534c]
#On the '''Parameters''' tab, click '''Add Row''' on the table toolbar.
#In the '''Name''' column, type <tt>PositiveOnly</tt>.
#In the '''Schema Field''' column, select ''&lt;Checkbox&gt;''.
#In the '''Display Name''' column, type <tt>Positive Only</tt>.
#Leave the default values in the other columns.
#:((({S:Hint}Creating the appropriate conditions for every parameter is required. If a parameter does not have a corresponding condition specified on this tab, user selections for the parameter will not affect the records that are returned; however, the parameter will still be displayed in the Selection area of the generic inquiry.
)))
#On the '''Conditions''' tab, click '''Add Row''' on the table toolbar.
#Select ''('' in the first '''Brackets''' column. In the '''Data Field''' column, select ''&#91;PositiveOnly&#93;''. In the '''Condition''' column, select ''Does Nor Equal''. In the '''Value 1''' column, type <tt>=1</tt>. In the '''Operator''' column, select ''Or''.
#Click '''Add Row''' on the table toolbar.
#In the '''Data Field''' column, select ''ARInvoice.CuryDocBal''. In the '''Condition''' column, select ''Is Greater Than''. Select the '''From Schema''' check box. In the '''Value 1''' column, type <tt>0.00</tt>. Select '')'' in the second '''Brackets''' column.
#Leave the default values in the other columns.
#:((({S:Hint}With the conditions you have specified, when {{[PositiveOnly]}}, the check box you previously specified on the '''Parameters''' tab, has a value of ''=1'' (that is, when the check box is selected), the inquiry will display only entries that have a '''Balance''' ({{ARInvoice.CuryDocBal}}) value that is greater than ''0.00''
)))
#Click '''Save''' on the form toolbar.
#:This generic inquiry now has the optional check box '''Positive Only''' in the Selection area above the table with the query results. When this check box is selected, only the invoices with a balance greater than 0 will be displayed.
{br}

''Sorting'': You can add default sorting that will be applied to the generic inquiry results area. This can be helpful if the default order of the entries displayed in the results area of generic inquiry is important. To do this, on the '''Sort Order''' tab, you perform the following steps:[anchor|#_72fb47b7-6bde-4fa0-b99c-1e98a957f42c]
#Click '''Add Row''' on the table toolbar.
#In the '''Data Field''' column, select ''ARInvoice.CuryDocBal''.
#In the '''Sort Order''' column, select ''Descending''.
#Click '''Save''' on the form toolbar.
#:This generic inquiry now has default sorting set up so that the entries with the highest balance value will be shown first on the list. Alternatively, a user can customize sorting of his or her own preference, by clicking column titles in the inquiry results area and selecting other sorting conditions in the dialog box.((({S:Hint}The user-defined sorting specified in the column title dialog box overrides the default sorting you have specified on the '''Sort Order''' tab.
)))

''Grouping'': You can group inquiry data by specifying grouping conditions. For example, you can use the functionality provided by the '''Grouping''' tab to display the average invoice amount of each customer in your inquiry. To set up this optional functionality for this sample generic inquiry, you do the following:[anchor|#_06dd3a51-c91c-4866-a3cb-759d0cc9a35c]
#On the '''Parameters''', '''Conditions''', '''Sort Order''', and '''Result Grid''' tabs, clear all check boxes in the '''Active''' column for the rows that you have previously created. This will temporary make the settings of these rows inactive. You can make them active again later if you want to restore the previous version of the inquiry.
#On the '''Grouping''' tab, add a new row with '''Data Field''' set to <tt>ARInvoice.CustomerID</tt>.
#On the '''Results Grid''' tab, add a new row with '''Object''' set to <tt>ARInvoice</tt> and '''Data Field''' set to <tt>CustomerID</tt>.
#Add a new row with '''Object''' set to <tt>ARInvoice</tt>, '''Data Field''' set to <tt>CuryDocBal</tt>, '''Caption''' set to <tt>AVG AMT</tt>, and '''Aggregate Function''' set to <tt>AVG</tt>. 
#Click '''Save''' on the form toolbar.

This generic inquiry now has two columns. The records are grouped so that the '''Customer''' column displays the customer IDs, just one row for each customer ID, while the rows in the '''AVG AMT''' column display the average amount of all invoices of a customer ID instead of displaying each invoice value in a separate row.
==Previewing the Inquiry==
To preview the inquiry you have created, you click '''View Inquiry''' on the form toolbar of the [HelpRoot_FormReference\SM_20_80_00|Generic Inquiry] ([~/?ScreenId=SM208000|SM208000]) form.{br}

To return to the [HelpRoot_FormReference\SM_20_80_00|Generic Inquiry] form from the inquiry, you click '''Back''' (or the equivalent button) on the toolbar of your browser.
==Making the New Inquiry Visible to Other Users==
To add the inquiry you have created to the site map of the classic user interface, you do the following on the [HelpRoot_FormReference\SM_20_80_00|Generic Inquiry] ([~/?ScreenId=SM208000|SM208000]) form: [anchor|#ol_k2c_g5f_ms]
#Open the {{SampleGenericInquiry}} generic inquiry to be published. 
#In the '''Site Map Title''' box, enter {{Sample Generic Inquiry}}.
#In the '''Site Map Location''' box, select the site map location. 
#In the '''Workspace''' box, select a workspace from which the inquiry can be accessed.
#In the '''Category''' box, select a category under which the inquiry will be displayed in the selected workspace.
#Click '''Save''' on the form toolbar. 
#:Notice that the '''Screen ID''' box is populated with the identifier of the generic inquiry. The system assigns the inquiry form an automatically generated ID in a format similar to that of screen IDs of other forms, with ''GI'' as the two-letter module code: ''GI0000mn''.
{br}

]]></column>
			<column name="PlainText"><![CDATA[Example: Designing a Sample Generic Inquiry This topic describes the steps of designing a sample generic inquiry         for testing purposes, so that you can develop a better understanding of the process         mechanics.  You can create inquiry forms by using the   ([~/?ScreenId=SM208000|SM208000]) Generic Inquiry (SM208000) form. You can perform these steps on         the applicable forms to practice creating a generic inquiry or just read about them and         consult the applicable form as needed. The sample generic inquiry will collect data from the            ARInvoice  ( PX.Objects.AR.ARInvoice ) data access class         (DAC) and display columns with the invoice reference number, the balance of the invoice with         that number, and the document type of the invoice. If you are performing the steps of           this example, we recommend that you set up your system with the  SalesDemo  database           to populate it with demo data. For more information, see  To Deploy an Acumatica ERP Instance. Preparation Stage Because generic inquiries use data that is available through DACs, you will have to         retrieve data from the relevant data access class. Before you create the inquiry, you need         to perform the following research: Understanding the DACs to be used for the inquiry : This generic inquiry will use           the  ARInvoice  DAC, so for this inquiry, you need to collect data from the              ARInvoice  system database to create it. Inspecting elements : Because the generic inquiry that you are going to make will           have three columns to display the invoice reference number, the balance, and the document           type, you will need to inspect the   ([~/?ScreenId=AR301000|AR301000]) Invoices and Memos (AR301000) form to           explore which classes you can use to access the needed data as follows: Open the   ([~/?ScreenId=AR301000|AR301000]) Invoices and Memos (AR301000) form by               searching for or navigating to it. On the form title bar, click  Customization Inspect Element . Click the  Reference Nbr.  element. The  Element                 Properties  dialog box opens. You are interested in two                 elements— Data Class  and  Data Field ,               which correspond to the class and field you need—which are, respectively,                  ARInvoice  and  RefNbr .  While you are pointing at the  Balance  element, press               Ctrl+Alt+Click to quickly open the  Element Properties  dialog               box. You can see that that the  Data Class  is again                  ARInvoice , while the  Data Field  is                  CuryDocBal .  Inspect the  Type  element to find out that its  Data                 Field  is  DocType . Creating the New Inquiry To begin the process of creating the inquiry, you do the following:  Open the   ([~/?ScreenId=SM208000|SM208000]) Generic Inquiry (SM208000)           form by searching for or navigating to it. In the Summary area, in the  Inquiry Title  box, type the name for           the inquiry:  SampleGenericInquiry . Leave the  Select Top x Records  box blank, so that you can display           all the results. In the  Arrange Parameters in x Columns  box, leave the default           value, because this specific inquiry will not have any elements (Selection criteria) to           display. On the  Tables  tab, do the following: On the table toolbar, click  Add Row . In the  Table Name  column, select                  PX.Objects.AR.ARInvoice . (In this example, you need to add a row               for only this DAC, because both of the fields that are going to be used are in this               table.)  The list has about 600 DACs, so in the Selection dialog box, you should                 use the Search box (upper right) to find the DAC. In the  Alias  column, type  ARInvoice . Click  Save  on the form toolbar. Configuring the Results Grid (Table)  On the  Results Grid  tab of the   ([~/?ScreenId=SM208000|SM208000]) Generic Inquiry (SM208000) form with the inquiry selected, you perform the following steps         to select from the involved DACs the columns you will add to the table of the generic         inquiry:  Click  Add Row  on the table toolbar to add a new row. In the  Object  column, select  ARInvoice . In the  Data Field  column, select  RefNbr . Click  Add Row  on the table toolbar to add a new row. In the  Object  column, select  ARInvoice . In the  Data Field  column, select  CuryDocBal . Click  Add Row  on the table toolbar to add a new row. In the  Object  column, select  ARInvoice . In the  Data Field  column, select  DocType . In all the rows you have added on this tab, select the  Visible            check box. This means that the column being added in this row will be visible in the table           by default. If this check box is cleared, the column will not be visible initially but can           be brought up by users as needed. Click  Save  on the form toolbar. Optional Settings This section describes optional settings you could specify for the generic inquiry on the             ([~/?ScreenId=SM208000|SM208000]) Generic Inquiry (SM208000) form to further refine the         inquiry.  Parameters : On the Parameters tab, you could add a variety of parameters that would         be selection criteria in the generic inquiry. As one example, you could add a            Document Type  box to the Selection area, to provide additional         flexibility to the existing two-column inquiry, allowing the user to select the particular         document type for which invoices would be displayed. To do this, you do the following: On the  Parameters  tab, click  Add Row  on             the table toolbar. In the  Name  column, type  DocType . In the  Schema Field  column, select              ARInvoice.DocType . In the  Display Name  column, type  Document               Type . Leave the default values in the other columns. Creating the appropriate               conditions for every parameter is required. If a parameter does not have a               corresponding condition specified on this tab, user selections for the parameter will               not affect the records that are returned; however, the parameter will still be               displayed in the Selection area of the generic inquiry. On the  Conditions  tab, click  Add Row  on             the table toolbar. In the  Data Field  column, select  ARInvoice.DocType . In the  Condition  column, select  Equals . In the  Value 1  column, select  [DocType] . Leave the default values in the other columns. Click  Save  on the form toolbar. This generic inquiry now has               an optional box in the Selection area above the table with the query results. In this               box, a user can select the particular document type of the results to be displayed.               For example, if  Credit Memo  is selected, the results area will only display               entries that have the  Document Type  of  Credit Memo  on               the   ([~/?ScreenId=AR301000|AR301000]) Invoices and Memos (AR301000) form; documents with other types will               not be displayed. Suppose you also wanted to add the optional  Positive Only  check box         to the selection area of the generic inquiry. This will provide an option to display only         invoices with a positive balance. You would do the following: On the  Parameters  tab, click  Add Row  on             the table toolbar. In the  Name  column, type              PositiveOnly . In the  Schema Field  column, select  <Checkbox> . In the  Display Name  column, type  Positive               Only . Leave the default values in the other columns. Creating the appropriate               conditions for every parameter is required. If a parameter does not have a               corresponding condition specified on this tab, user selections for the parameter will               not affect the records that are returned; however, the parameter will still be               displayed in the Selection area of the generic inquiry. On the  Conditions  tab, click  Add Row  on             the table toolbar. Select  (  in the first  Brackets  column. In the                Data Field  column, select  [PositiveOnly] . In the                Condition  column, select  Does Nor Equal . In the                Value 1  column, type  =1 . In the                Operator  column, select  Or . Click  Add Row  on the table toolbar. In the  Data Field  column, select  ARInvoice.CuryDocBal .             In the  Condition  column, select  Is Greater Than . Select             the  From Schema  check box. In the  Value 1              column, type  0.00 . Select  )  in the second                Brackets  column. Leave the default values in the other columns. With the conditions you have               specified, when  [PositiveOnly] , the check box you previously               specified on the  Parameters  tab, has a value of  =1  (that               is, when the check box is selected), the inquiry will display only entries that have a                  Balance  ( ARInvoice.CuryDocBal ) value that is               greater than  0.00 Click  Save  on the form toolbar. This generic inquiry now has               the optional check box  Positive Only  in the Selection area               above the table with the query results. When this check box is selected, only the               invoices with a balance greater than 0 will be displayed. Sorting : You can add default sorting that will be applied to the generic inquiry         results area. This can be helpful if the default order of the entries displayed in the         results area of generic inquiry is important. To do this, on the  Sort           Order  tab, you perform the following steps: Click  Add Row  on the table toolbar. In the  Data Field  column, select            ARInvoice.CuryDocBal . In the  Sort Order  column, select  Descending . Click  Save  on the form toolbar. This generic inquiry now has             default sorting set up so that the entries with the highest balance value will be shown             first on the list. Alternatively, a user can customize sorting of his or her own             preference, by clicking column titles in the inquiry results area and selecting other             sorting conditions in the dialog box. The user-defined sorting specified in the               column title dialog box overrides the default sorting you have specified on the                  Sort Order  tab. Grouping : You can group inquiry data by specifying grouping conditions. For example,         you can use the functionality provided by the  Grouping  tab to display         the average invoice amount of each customer in your inquiry. To set up this optional         functionality for this sample generic inquiry, you do the following: On the  Parameters ,  Conditions ,              Sort Order , and  Result Grid  tabs, clear           all check boxes in the  Active  column for the rows that you have           previously created. This will temporary make the settings of these rows inactive. You can           make them active again later if you want to restore the previous version of the           inquiry. On the  Grouping  tab, add a new row with  Data             Field  set to  ARInvoice.CustomerID . On the  Results Grid  tab, add a new row with              Object  set to  ARInvoice  and              Data Field  set to  CustomerID . Add a new row with  Object  set to            ARInvoice ,  Data Field  set to              CuryDocBal ,  Caption  set to  AVG             AMT , and  Aggregate Function  set to              AVG .  Click  Save  on the form toolbar. This generic inquiry now has two columns. The records are grouped so that the            Customer  column displays the customer IDs, just one row for each         customer ID, while the rows in the  AVG AMT  column display the average         amount of all invoices of a customer ID instead of displaying each invoice value in a         separate row. Previewing the Inquiry To preview the inquiry you have created, you click  View Inquiry  on         the form toolbar of the   ([~/?ScreenId=SM208000|SM208000]) Generic Inquiry (SM208000) form. To return to the   ([~/?ScreenId=SM208000|SM208000]) Generic Inquiry form from the inquiry, you         click  Back  (or the equivalent button) on the toolbar of your         browser. Making the New Inquiry Visible to Other Users To add the inquiry you have created to the site map of the classic user interface, you do         the following on the   ([~/?ScreenId=SM208000|SM208000]) Generic Inquiry (SM208000) form:  Open the  SampleGenericInquiry  generic inquiry to be published.  In the  Site Map Title  box, enter  Sample Generic             Inquiry . In the  Site Map Location  box, select the site map location.  In the  Workspace  box, select a workspace from which the inquiry           can be accessed. In the  Category  box, select a category under which the inquiry           will be displayed in the selected workspace. Click  Save  on the form toolbar.  Notice that the                Screen ID  box is populated with the identifier of the generic             inquiry. The system assigns the inquiry form an automatically generated ID in a format             similar to that of screen IDs of other forms, with  GI  as the two-letter module             code:  GI0000mn . ]]></column>
		</row>
		<row PageID="820f4812-8cc8-4cf2-b2de-863bc908eb12" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="19e47d19-daf4-09a2-7615-b0775fefe305" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can create generic inquiry forms by using the [HelpRoot_FormReference\SM_20_80_00|Generic Inquiry] ([~/?ScreenId=SM208000|SM208000]) form. {br}

The following sections describe the process of creating an inquiry that shows the availability of inventory items. {br}

This inquiry is an example that was designed for learning purposes, to help you understand the generic inquiry creation process. You can perform these steps on the applicable forms to practice creating a generic inquiry or just read about them and consult the applicable form as needed. ((({S:Hint}If you are performing the steps of this example, we recommend that you set up your system with the ''SalesDemo'' database to populate it with demo data. For more information, see [HelpRoot_Install\Installing_ERP_Instance|To Deploy an Acumatica ERP Instance].
))){br}{TOC}
==Understanding the Design Specifications==
The generic inquiry to be created will have a Selection area (in the upper part of the form) with the following elements: [anchor|#ul_ylz_f5f_ms]
*A '''Warehouse''' box where the user can select a particular warehouse to view its inventory items
*An '''Active Only''' check box the user can select to indicate that information about only active items (instead of all items) should be displayed

The table with inquiry results (in the lower part of the form) will display all the inventory items available at the selected warehouse (or at all warehouses, if no warehouse has been selected). This table will have the '''Inventory Items''' title on the UI; it will consist of the following columns: '''Inventory ID''', '''Description''', '''Subitem ID''', '''Warehouse''', '''Base Unit''', '''Base Price''', '''Quantity on Hand''', and '''Available Quantity'''. 
==Understanding the DACs to Be Used for the Inquiry==
To design an inquiry, you need to have a general knowledge of data access classes (DACs). For more information about DACs, see [HelpRoot_Dev_Customization\CG_GL_BL_DAC|Data Access Class]{br}

The data to be used in a generic inquiry is available through DACs, which represent specific data from system databases, so you need to figure out which DACs you will use. All the data about inventory items is available through the following basic DACs: [anchor|#ul_w5z_f5f_ms]
*{{PX.Objects.IN.ItemSite}}: Contains warehouse-specific information about items: standard cost history, price information, and replenishment parameters.
*{{PX.Objects.IN.INSiteStatus}}: Contains information about warehouses: the items stored there and their availability information.
*{{PX.Objects.IN.InventoryItem}}: Holds general information about each inventory item: general ledger accounts, subaccounts, kit status (whether the item is a kit), item class, price class, and lot/serial class. This DAC also provides information on the item&rsquo;s cost, price, and tax categories.
*{{PX.Objects.IN.INSubitem}}: Contains information about subitems defined in the system.

A simple representation of the sample data in these tables is shown below; the actual tables include more columns than are shown, and no data is shown for columns that are not used in the inquiry being designed in this topic. The table names specified in parentheses are aliases specified for the tables for the inquiry under design (see the [[#_67d93cfa-9f37-4836-ab86-6ba8a4b6404f|'''Creating the New Inquiry'''] section of this topic). {br}

The {{PX.Objects.IN.ItemSite (ItemSite)}} table contains the following data. [anchor|#table_lb1_g5f_ms]
{| class="checklist" | width="100%" 
|- 
!Site ID
!Inventory ID
!ABC Code
!Pending Price
!Last Price
!Pending Cost
!Last Cost
!Replenishment Parameters
|- 
| ''RETAIL''
|  ''Blinds 100mm X1000mm''
|  ''A''
|  ''12.5''
|  ''10''
|  ''7''
|  ''6''
| -
|- 
| ''WHOLESALE''
|  ''Blinds 100mm X1000mm ''
|  ''A''
|  ''12.5''
|  ''10''
|  ''7''
|  ''6''
| - 
|}
The {{PX.Objects.IN.INSiteStatus (SiteStatus)}} table contains the following data. [anchor|#table_dh1_g5f_ms]
{| class="checklist" | width="100%" 
|- 
!Inventory ID
!Subitem
!Description
!Site ID
!Qty. Avail.
!Qty. On Hand
!Qty. Not Avail.
|- 
| ''Z00B00250''
|  ''0'' (black)
| ''Blinds 100mmX1000mm ''
|  ''RETAIL''
|  ''500''
|  ''100''
|  ''0''
|- 
|  ''Z00B00250''
|  ''0'' (black)
| ''Blinds 100mmX1000mm''
|  ''WHOLESALE''
|  ''10''
|  ''1100''
|  ''0''
|- 
|  ''LCS000011''
|  ''0'' (black)
| ''LSC1 monitor ''
|  ''RETAIL''
|  ''36''
|  ''36''
|  ''0''
|- 
|  ''LCS000011''
|  ''1'' (white)
| ''LSC1 monitor''
|  ''RETAIL''
|  ''36''
|  ''36''
|  ''36''
|- 
|  ''LCS000011''
|  ''2'' (brown)
| ''LSC1 monitor ''
|  ''RETAIL''
|  ''0''
|  ''0''
|  ''0''
|- 
|  ''LCS000011''
|  ''0'' (black)
| ''LSC1 monitor black''
|  ''WHOLESALE''
|  ''8805''
|  ''64''
|  ''64''
|- 
|  ''LCS000011''
|  ''1'' (white)
| ''LSC1 monitor''
|  ''WHOLESALE''
|  ''–300''
|  ''–300''
|  ''0''
|}
The {{PX.Objects.IN.InventoryItem (InventoryItem)}} table contains the following data. [anchor|#table_km1_g5f_ms]
{| class="checklist" | width="100%" 
|- 
!Inventory ID
!Subitem
!Description
!Base Unit
!Base Price
!Evaluation Method
!GL Accounts
!Tax Category
|- 
| ''Z00B00250''
|  ''0'' (black)
| ''Blinds 100mmX1000mm ''
|  ''piece''
|  ''10''
|  ''0''
| -
| -
|- 
| ''LCS000011''
|  ''0'' (black)
| ''LSC1 monitor ''
|  ''piece''
|  ''200''
|  ''0''
| -
| -
|- 
| ''LCS000011''
|  ''1 ''(white)
| ''LSC1 monitor ''
|  ''piece''
|  ''250''
|  ''0''
| -
| -
|- 
| ''LCS000011''
|  ''2'' (brown)
| ''LSC1 monitor''
|  ''piece''
|  ''200''
|  ''0''
| -
| -
|}
 The {{PX.Objects.IN.INSubitem (Subitem)}} table contains the following data. [anchor|#table_qr1_g5f_ms]
{| class="checklist" | width="100%" 
|- 
!Subitem ID
!Group Mask
!Description
!Created by
|- 
| ''0''
| -
| ''Black''
|  ''administrator''
|- 
|  ''1''
| -
| ''White''
|  ''administrator''
|- 
|  ''2''
| -
| ''Brown''
|  ''administrator''
|}[anchor|#_67d93cfa-9f37-4836-ab86-6ba8a4b6404f]
==Creating the New Inquiry==
To begin the process of creating the inquiry, you do the following: [anchor|#ol_uw1_g5f_ms]
#Open the [HelpRoot_FormReference\SM_20_80_00|Generic Inquiry] ([~/?ScreenId=SM208000|SM208000]) form by searching for or navigating to it.
#In the Summary area, in the '''Inquiry Title''' box, type the name for the inquiry: <tt>Inventory Availability by Warehouse</tt>.
#Leave the '''Select Top x Records''' box blank, so you can display all the results.
#In the '''Arrange Parameters in x Columns''' box, type either <tt>1</tt> or <tt>2</tt> (based on your preference) to select one of the following ways to arrange the two boxes in the Selection area: 
#*One column: This will result in two rows, with the second element under the first one.
#*Two columns: This will result in one rows, with the second element to the right of the first one.
#On the '''Tables''' tab, do the following:
##On the table toolbar, click '''Add Row'''.
##In the '''Table Name''' column, select ''PX.Objects.IN.INSiteStatus''. 
##:((({S:Hint}The list has about 600 DACs, so in the Selection dialog box, you should use the Search box (upper right) to find the DAC.
)))
##In the '''Alias''' column, type <tt>SiteStatus</tt>.
##Repeat the three previous substeps and specify the following table names (which you will need for this inquiry) and aliases: the ''PX.Objects.IN.ItemSite ''table name with the <tt>ItemSite</tt> alias, the ''PX.Objects.IN.InventoryItem'' table name with the <tt>InventoryItem</tt> alias, and the ''PX.Objects.IN.INSubitem'' table name with the {{Subitem}} alias.
#Click '''Save''' on the form toolbar.

==Specifying Table Relations==
As the next phase in the process of creating the generic inquiry, you specify the relations between tables so that the system can generate SQL requests to get the required data from the tables involved. On the '''Relations''' tab of the [HelpRoot_FormReference\SM_20_80_00|Generic Inquiry] ([~/?ScreenId=SM208000|SM208000]) form with the inquiry selected, you perform the following steps: [anchor|#ol_hbb_g5f_ms]
#On the table toolbar of the '''Table Relations''' table, click '''Add Row'''. Select ''SiteStatus'' as the parent table, ''left'' as the join type, and ''InventoryItem'' as the child table. To get the data from both tables for each inventory ID, do the following in the '''DataField Links for Active Relations''' table: 
#*Select ''InventoryID'' in the''' Parent Field''' column.
#*Select ''Equals'' in the '''Condition''' column.
#*Select ''InventoryID'' in the''' Child Field''' column.
#*:Now the classes selected in the '''Table Relations''' area are linked by their identity keys. When you select data fields, you can look for the field you need by filtering the list of available fields.
#:You selected {{SiteStatus}} as the parent table because the required data is provided by the {{PX.Objects.IN.INSiteStatus}} class. The {{InventoryItem}} class provides additional information, so you selected it as the child table. A ''Left'' join type returns all rows from the parent table combined with the child table, even if there are no matches in the child table.
#In the '''Table Relations''' table, click '''Add Row'''. Select ''SiteStatus'' as the parent table, ''left'' as the join type, and ''SubItem'' as the child table. To get information on subitems of inventory items, do the following in the '''DataField Links for Active Relations''' table: 
#*Select ''SubItemID'' in the''' Parent Field''' column.
#*Select ''Equals'' in the '''Condition''' column.
#*Select ''SubItemID'' in the''' Child Field''' column.
#In the '''Table Relations''' table, click '''Add Row'''. Select ''SiteStatus'' as the parent table, ''left'' as the join type, and ''ItemSite'' as the child table. To get the data from both tables for each inventory item stored in each warehouse, do the following in the '''DataField Links for Active Relations''' table: 
#*Select ''InventoryID'' as the parent field, ''Equals'' as the condition, and ''InvAcctID'' as the child field.
#*In the next row, select ''SiteID'' as the parent field, ''Equals'' as the condition, and ''SiteID'' as thechild field.
#Click '''Save''' on the form toolbar.

==Configuring Inquiry Parameters==
 To configure the elements for the inquiry parameters (to be shown in the top part of the generic inquiry as selection criteria), you do the following on the '''Parameters''' tab while viewing the inquiry on the [HelpRoot_FormReference\SM_20_80_00|Generic Inquiry] ([~/?ScreenId=SM208000|SM208000]) form: [anchor|#ol_hhb_g5f_ms]
#On the table toolbar, click '''Add Row'''.
#In the '''Name''' column, type <tt>Warehouse</tt> as the name of the inquiry parameter.
#In the '''Display Name''' column, type {{Warehouse}}; this is the name of the element the user will use to select a particular warehouse.
#In the '''Schema Field''' column, select {{(INSiteStatus.SiteID)}} schema. If no schema is specified, a simple text box will be used on the inquiry form. 
#Select the '''From Schema''' check box.
#In the''' Default Value''' column, select one of the warehouses as the default value to be used for the parameter.
#If you have chosen to arrange parameters in two columns, in the '''Column Span''' box, type <tt>2</tt>, which is the number of columns the '''Warehouse''' text box will span.
#On the table toolbar, click '''Add Row'''.
#Type <tt>Active</tt> in the '''Name''' column.
#In the '''Schema Field''' column, select <tt>Checkbox</tt>.
#In the '''Display Name''' column, type <tt>Active Only</tt>.
#In the''' Default Value''' column, type <tt>=1</tt>. This will make the check box selected by default.
#Click '''Save''' on the form toolbar.

==Specifying Conditions==
On the '''Conditions''' tab of the [HelpRoot_FormReference\SM_20_80_00|Generic Inquiry] ([~/?ScreenId=SM208000|SM208000]) form, you can specify the conditions that determine the data (records) to be displayed in the table of the generic inquiry. The inquiry parameters used in conditions appear in square brackets; for example, {{[Warehouse]}} stands for the first parameter of the inquiry (the ID of the warehouse selected by the user), and {{[Active]}} designates the value of the '''Active Only''' check box, which the user can select to view only active items. {br}

For this example, we want to select inventory items matching the following conditions, based on user selections: [anchor|#ul_kmb_g5f_ms]
*If a user selects a particular warehouse: items stored at this warehouse
*If the user doesn&rsquo;t select any warehouse: items stored at all warehouses
*If the user selects the '''Active Only''' check box: items with the ''Active'' status
*If the user clears the '''Active Only''' check box: items with any status

To implement these conditions, on the '''Conditions''' tab, you perform the following steps: [anchor|#ol_zqb_g5f_ms]
#On the table toolbar, click '''Add Row'''. Enter the following: a single opening parenthesis in the first '''Brackets''' column, ''SiteSite.SiteID'' in the '''Data Field''' column, ''Equals'' in the '''Condition''' column, <tt>&#91;Warehouse&#93;</tt> in the '''Value 1''' column, and '''Or''' in the '''Operator''' column.
#On the table toolbar, click '''Add Row'''. In the row, enter {{[Warehouse]}} in the '''Data Field''' column, ''Is Null'' in the '''Condition''' column, and a single closing parenthesis in the second '''Brackets''' column. Select ''And'' in the '''Operator''' column to join another condition to this one.
#On the table toolbar, click '''Add Row'''. Enter the following in the row: double opening parentheses in the first '''Brackets''' column, <tt>&#91;Active&#93;</tt> in the '''Data Field''' column (the value of the '''Active Only''' parameter), ''Equals'' in the '''Condition''' column, <tt>=1</tt> in the '''Value 1''' column, a single closing bracket in the second '''Brackets''' column, and ''And'' in the '''Operator''' column.
#On the table toolbar, click '''Add Row'''. In the row, enter ''InventoryItem.ItemStatus'' ({{ItemStatus}} of the {{InventoryItem}} table) in the '''Data Field''' column and ''Equals'' in the '''Condition''' column. Select the '''From Schema''' check box. Enter ''Active'' in the '''Value 1''' column, a single closing parenthesis in the second '''Brackets''' column, and ''Or''in the '''Operator''' column.
#On the table toolbar, click '''Add Row'''. Select {{''[Active]''}} as the data field, select ''Equals'' in the '''Condition''' column, type <tt>=0</tt> in the '''Value 1''' column, and add a single closing parenthesis in the second '''Brackets''' column.
#Click '''Save''' on the form toolbar.

==Configuring the Results Area==
 On the '''Results Grid''' tab of the [HelpRoot_FormReference\SM_20_80_00|Generic Inquiry] ([~/?ScreenId=SM208000|SM208000]) form with the inquiry selected, you perform the following steps to select from the involved DACs the columns you will add to the table of the generic inquiry: [anchor|#ol_ovb_g5f_ms]
#Click '''Add Row''' on the table toolbar.
#In the '''Object''' column, select ''InventoryItem'' (the DAC that contains the {{InventoryCD}} column).
#In the '''Data Field''' column, select ''InventoryCD''.
#In the '''Schema Field''' column, select ''InventoryItem.InventoryCD''.
#Optional: In the '''Width''' column, specify the width of the column (in pixels) if the values are long strings.
#Select the '''Visible''' check box if you want this column to be visible in the table by default. Clear the check box if the column will initially not be visible but can be made visible by users as needed.
#Select the '''Default Navigation''' check box. With this check box selected, the columns of the inquiry results that hold the key fields will contain clickable links to the appropriate screens.
#Repeat Steps 1 through 7 for each '''Object''', '''Data Field''' and '''Schema Field''' you will need for this inquiry: the {{InventoryItem}} object and {{Descr}} data field; the {{SiteStatus}} object and {{QtyOnHand}} data field; and the {{SiteStatus}} object and {{SiteID}} data field. 
#:((({S:Hint}The '''Schema Field''' column values will consist of respective &ldquo;Object&ldquo; and &ldquo;Data Field&ldquo; separated by &ldquo;.&ldquo; For example, for the {{InventoryItem}} object and {{Descr}} data field, the schema field will be {{InventoryItem.Descr}}
)))
#Click '''Save''' on the form toolbar.
#:Now that you have set up the results grid, this generic inquiry will have the following columns: [anchor|#_8b2ad80a-0921-447b-b643-9c62aa056c9e]
#*'''Inventory ID''': This column will contain the inventory ID of the item. Because the '''Default Navigation''' check box is selected for this column on the '''Results Grid''' tab, the IDs in this column will have links that users can click to open the appropriate form with the inventory ID selected in a new browser tab.
#*'''Description''': This column holds the description of the listed item.
#*'''Quantity On Hand''': This column displays quantity on hand of the listed item.
#*'''Warehouse''': This column shows the warehouse that has been specified for the listed item. Because the '''Default Navigation''' check box is selected for this column on the '''Results Grid''' tab, the warehouse IDs in this column will have links that users can click to open the appropriate form with the warehouse selected in a new browser tab.

==Sorting the Results==
To sort the results, you select a column and specify how the values should be sorted based on the values of the respective column. To do this, on the '''Sort Order''' tab of the [HelpRoot_FormReference\SM_20_80_00|Generic Inquiry] ([~/?ScreenId=SM208000|SM208000]) form with the inquiry selected, you do the following: [anchor|#ol_b1c_g5f_ms]
#On the table toolbar, click '''Add Row'''.
#In the '''Data Field''' column, select ''InventoryItem.InventoryCD''.
#In the '''Sort Order''' column, select ''Ascending''.
#Click '''Save''' on the form toolbar.
#:Now this generic inquiry has default sorting set up as ''Ascending'' based on the '''Inventory ID''' column. 
((({S:Hint}You can speed up a generic inquiry if you define a custom sorting order that optimizes a database query. For example, an optimized order may include fewer fields than a default sorting order that contains keys for all tables added in the generic inquiry.
)))
==Previewing the Inquiry==
To preview the inquiry you have created, click '''View Inquiry''' on the form toolbar of the [HelpRoot_FormReference\SM_20_80_00|Generic Inquiry] ([~/?ScreenId=SM208000|SM208000]) form.{br}

To return to the [HelpRoot_FormReference\SM_20_80_00|Generic Inquiry] form, click '''Back''' (or the equivalent button) on the toolbar of your browser. 
==Making the New Inquiry Visible to Other Users==
To add the inquiry you have created to the site map of the classic user interface, you do the following on the [HelpRoot_FormReference\SM_20_80_00|Generic Inquiry] ([~/?ScreenId=SM208000|SM208000]) form: [anchor|#ol_k2c_g5f_ms]
#Open the {{SampleGenericInquiry}} generic inquiry to be published. 
#In the '''Site Map Title''' box, enter the inquiry title.
#In the '''Site Map Location''' box, select the site map location. 
#In the '''Workspace''' box, select a workspace from which the inquiry can be accessed.
#In the '''Category''' box, select a category under which the inquiry will be displayed in the selected workspace.
#Click '''Save''' on the form toolbar. 
#:Notice that the '''Screen ID''' box is populated with the identifier of the generic inquiry. The system assigns the inquiry form an automatically generated ID in a format similar to that of screen IDs of other forms, with ''GI'' as the two-letter module code: ''GI0000mn''.

==Related Articles==
*[HelpRoot_Administration\SM__con_Site_Map_Management|Managing the Site Map]]]></column>
			<column name="PlainText"><![CDATA[Example: Designing a Generic Inquiry Based on Inventory Data You can create generic inquiry forms by using the   ([~/?ScreenId=SM208000|SM208000]) Generic Inquiry (SM208000) form.  The following sections describe the process of creating an inquiry that shows the availability     of inventory items.  This inquiry is an example that was designed for learning purposes, to help you understand the     generic inquiry creation process. You can perform these steps on the applicable forms to     practice creating a generic inquiry or just read about them and consult the applicable form as     needed.  If you are performing the steps of this example, we recommend that you set up your      system with the  SalesDemo  database to populate it with demo data. For more information,      see  To Deploy an Acumatica ERP Instance. Understanding the Design Specifications The generic inquiry to be created will have a Selection area (in the upper part of the form)     with the following elements:  A  Warehouse  box where the user can select a particular warehouse to      view its inventory items An  Active Only  check box the user can select to indicate that      information about only active items (instead of all items) should be displayed The table with inquiry results (in the lower part of the form) will display all the inventory     items available at the selected warehouse (or at all warehouses, if no warehouse has been     selected). This table will have the  Inventory Items  title on the UI; it     will consist of the following columns:  Inventory ID ,       Description ,  Subitem ID ,       Warehouse ,  Base Unit ,  Base      Price ,  Quantity on Hand , and  Available      Quantity .  Understanding the DACs to Be Used for the Inquiry To design an inquiry, you need to have a general knowledge of data access classes (DACs). For     more information about DACs, see  Data Access ClassThe data to be used in a generic inquiry is available through DACs, which represent specific     data from system databases, so you need to figure out which DACs you will use. All the data     about inventory items is available through the following basic DACs:  PX.Objects.IN.ItemSite : Contains warehouse-specific information about      items: standard cost history, price information, and replenishment parameters. PX.Objects.IN.INSiteStatus : Contains information about warehouses: the      items stored there and their availability information. PX.Objects.IN.InventoryItem : Holds general information about each inventory      item: general ledger accounts, subaccounts, kit status (whether the item is a kit), item class,      price class, and lot/serial class. This DAC also provides information on the item's cost,      price, and tax categories. PX.Objects.IN.INSubitem : Contains information about subitems defined in the      system. A simple representation of the sample data in these tables is shown below; the actual tables     include more columns than are shown, and no data is shown for columns that are not used in the     inquiry being designed in this topic. The table names specified in parentheses are aliases     specified for the tables for the inquiry under design (see the  Creating the New Inquiry '''Creating the New Inquiry''' section of this topic).  The  PX.Objects.IN.ItemSite (ItemSite)  table contains the following data.  Site ID Inventory ID ABC Code Pending Price Last Price Pending Cost Last Cost Replenishment Parameters RETAIL Blinds 100mm X1000mm A 12.5 10 7 6 - WHOLESALE Blinds 100mm X1000mm  A 12.5 10 7 6 -  The  PX.Objects.IN.INSiteStatus (SiteStatus)  table contains the following     data.  Inventory ID Subitem Description Site ID Qty. Avail. Qty. On Hand Qty. Not Avail. Z00B00250 0  (black) Blinds 100mmX1000mm  RETAIL 500 100 0 Z00B00250 0  (black) Blinds 100mmX1000mm WHOLESALE 10 1100 0 LCS000011 0  (black) LSC1 monitor  RETAIL 36 36 0 LCS000011 1  (white) LSC1 monitor RETAIL 36 36 36 LCS000011 2  (brown) LSC1 monitor  RETAIL 0 0 0 LCS000011 0  (black) LSC1 monitor black WHOLESALE 8805 64 64 LCS000011 1  (white) LSC1 monitor WHOLESALE –300 –300 0 The  PX.Objects.IN.InventoryItem (InventoryItem)  table contains the following     data.  Inventory ID Subitem Description Base Unit Base Price Evaluation Method GL Accounts Tax Category Z00B00250 0  (black) Blinds 100mmX1000mm  piece 10 0 - - LCS000011 0  (black) LSC1 monitor  piece 200 0 - - LCS000011 1  (white) LSC1 monitor  piece 250 0 - - LCS000011 2  (brown) LSC1 monitor piece 200 0 - -  The  PX.Objects.IN.INSubitem (Subitem)  table contains the following data.  Subitem ID Group Mask Description Created by 0 - Black administrator 1 - White administrator 2 - Brown administrator Creating the New Inquiry To begin the process of creating the inquiry, you do the following:  Open the   ([~/?ScreenId=SM208000|SM208000]) Generic Inquiry (SM208000) form      by searching for or navigating to it. In the Summary area, in the  Inquiry Title  box, type the name for the      inquiry:  Inventory Availability by Warehouse . Leave the  Select Top x Records  box blank, so you can display all the      results. In the  Arrange Parameters in x Columns  box, type either        1  or  2  (based on your preference) to select one      of the following ways to arrange the two boxes in the Selection area:  One column: This will result in two rows, with the second element under the first        one. Two columns: This will result in one rows, with the second element to the right of the        first one. On the  Tables  tab, do the following: On the table toolbar, click  Add Row . In the  Table Name  column, select  PX.Objects.IN.INSiteStatus .          The list has about 600 DACs, so in the Selection dialog box, you should use the Search         box (upper right) to find the DAC. In the  Alias  column, type  SiteStatus . Repeat the three previous substeps and specify the following table names (which you will        need for this inquiry) and aliases: the  PX.Objects.IN.ItemSite  table name with the          ItemSite  alias, the  PX.Objects.IN.InventoryItem  table name        with the  InventoryItem  alias, and the  PX.Objects.IN.INSubitem         table name with the  Subitem  alias. Click  Save  on the form toolbar. Specifying Table Relations As the next phase in the process of creating the generic inquiry, you specify the relations     between tables so that the system can generate SQL requests to get the required data from the     tables involved. On the  Relations  tab of the   ([~/?ScreenId=SM208000|SM208000]) Generic Inquiry (SM208000) form with the inquiry selected, you perform     the following steps:  On the table toolbar of the  Table Relations  table, click        Add Row . Select  SiteStatus  as the parent table,  left  as      the join type, and  InventoryItem  as the child table. To get the data from both tables      for each inventory ID, do the following in the  DataField Links for Active       Relations  table:  Select  InventoryID  in the  Parent Field  column. Select  Equals  in the  Condition  column. Select  InventoryID  in the  Child Field  column. Now the         classes selected in the  Table Relations  area are linked by their         identity keys. When you select data fields, you can look for the field you need by filtering         the list of available fields. You selected  SiteStatus  as the parent table because the required data       is provided by the  PX.Objects.IN.INSiteStatus  class. The         InventoryItem  class provides additional information, so you selected it as       the child table. A  Left  join type returns all rows from the parent table combined with       the child table, even if there are no matches in the child table. In the  Table Relations  table, click  Add Row .      Select  SiteStatus  as the parent table,  left  as the join type, and  SubItem       as the child table. To get information on subitems of inventory items, do the following in the        DataField Links for Active Relations  table:  Select  SubItemID  in the  Parent Field  column. Select  Equals  in the  Condition  column. Select  SubItemID  in the  Child Field  column. In the  Table Relations  table, click  Add Row .      Select  SiteStatus  as the parent table,  left  as the join type, and  ItemSite       as the child table. To get the data from both tables for each inventory item stored in each      warehouse, do the following in the  DataField Links for Active Relations       table:  Select  InventoryID  as the parent field,  Equals  as the condition, and          InvAcctID  as the child field. In the next row, select  SiteID  as the parent field,  Equals  as the condition,        and  SiteID  as thechild field. Click  Save  on the form toolbar. Configuring Inquiry Parameters  To configure the elements for the inquiry parameters (to be shown in the top part of the     generic inquiry as selection criteria), you do the following on the       Parameters  tab while viewing the inquiry on the   ([~/?ScreenId=SM208000|SM208000]) Generic Inquiry (SM208000) form:  On the table toolbar, click  Add Row . In the  Name  column, type  Warehouse  as the name      of the inquiry parameter. In the  Display Name  column, type  Warehouse ; this is      the name of the element the user will use to select a particular warehouse. In the  Schema Field  column, select        (INSiteStatus.SiteID)  schema. If no schema is specified, a simple text box      will be used on the inquiry form.  Select the  From Schema  check box. In the  Default Value  column, select one of the warehouses as the      default value to be used for the parameter. If you have chosen to arrange parameters in two columns, in the  Column       Span  box, type  2 , which is the number of columns the        Warehouse  text box will span. On the table toolbar, click  Add Row . Type  Active  in the  Name  column. In the  Schema Field  column, select       Checkbox . In the  Display Name  column, type  Active      Only . In the  Default Value  column, type  =1 . This      will make the check box selected by default. Click  Save  on the form toolbar. Specifying Conditions On the  Conditions  tab of the   ([~/?ScreenId=SM208000|SM208000]) Generic Inquiry (SM208000) form, you can specify the conditions that determine the data     (records) to be displayed in the table of the generic inquiry. The inquiry parameters used in     conditions appear in square brackets; for example,  [Warehouse]  stands for the     first parameter of the inquiry (the ID of the warehouse selected by the user), and       [Active]  designates the value of the  Active Only  check     box, which the user can select to view only active items.  For this example, we want to select inventory items matching the following conditions, based     on user selections:  If a user selects a particular warehouse: items stored at this warehouse If the user doesn't select any warehouse: items stored at all warehouses If the user selects the  Active Only  check box: items with the        Active  status If the user clears the  Active Only  check box: items with any      status To implement these conditions, on the  Conditions  tab, you perform the     following steps:  On the table toolbar, click  Add Row . Enter the following: a single      opening parenthesis in the first  Brackets  column,  SiteSite.SiteID       in the  Data Field  column,  Equals  in the        Condition  column,  [Warehouse]  in the        Value 1  column, and  Or  in the        Operator  column. On the table toolbar, click  Add Row . In the row, enter        [Warehouse]  in the  Data Field  column,  Is Null       in the  Condition  column, and a single closing parenthesis in the second        Brackets  column. Select  And  in the        Operator  column to join another condition to this one. On the table toolbar, click  Add Row . Enter the following in the row:      double opening parentheses in the first  Brackets  column,        [Active]  in the  Data Field  column (the value of      the  Active Only  parameter),  Equals  in the        Condition  column,  =1  in the  Value       1  column, a single closing bracket in the second  Brackets       column, and  And  in the  Operator  column. On the table toolbar, click  Add Row . In the row, enter        InventoryItem.ItemStatus  ( ItemStatus  of the        InventoryItem  table) in the  Data Field  column and        Equals  in the  Condition  column. Select the  From       Schema  check box. Enter  Active  in the  Value 1       column, a single closing parenthesis in the second  Brackets  column, and        Or in the  Operator  column. On the table toolbar, click  Add Row . Select        [Active]  as the data field, select  Equals  in the        Condition  column, type  =0  in the        Value 1  column, and add a single closing parenthesis in the second        Brackets  column. Click  Save  on the form toolbar. Configuring the Results Area  On the  Results Grid  tab of the   ([~/?ScreenId=SM208000|SM208000]) Generic Inquiry (SM208000) form with the inquiry selected, you perform the following steps to     select from the involved DACs the columns you will add to the table of the generic inquiry:  Click  Add Row  on the table toolbar. In the  Object  column, select  InventoryItem  (the DAC that      contains the  InventoryCD  column). In the  Data Field  column, select  InventoryCD . In the  Schema Field  column, select       InventoryItem.InventoryCD . Optional: In the  Width  column, specify the width of the column (in      pixels) if the values are long strings. Select the  Visible  check box if you want this column to be visible in      the table by default. Clear the check box if the column will initially not be visible but can      be made visible by users as needed. Select the  Default Navigation  check box. With this check box      selected, the columns of the inquiry results that hold the key fields will contain clickable      links to the appropriate screens. Repeat Steps 1 through 7 for each  Object ,  Data       Field  and  Schema Field  you will need for this inquiry: the        InventoryItem  object and  Descr  data field; the        SiteStatus  object and  QtyOnHand  data field; and the        SiteStatus  object and  SiteID  data field.  The         Schema Field  column values will consist of respective "Object" and       "Data Field" separated by "." For example, for the  InventoryItem  object and         Descr  data field, the schema field will be         InventoryItem.Descr Click  Save  on the form toolbar. Now that you have set up the       results grid, this generic inquiry will have the following columns:  Inventory ID : This column will contain the inventory ID of the         item. Because the  Default Navigation  check box is selected for this         column on the  Results Grid  tab, the IDs in this column will have         links that users can click to open the appropriate form with the inventory ID selected in a         new browser tab. Description : This column holds the description of the listed         item. Quantity On Hand : This column displays quantity on hand of the         listed item. Warehouse : This column shows the warehouse that has been specified         for the listed item. Because the  Default Navigation  check box is         selected for this column on the  Results Grid  tab, the warehouse IDs         in this column will have links that users can click to open the appropriate form with the         warehouse selected in a new browser tab. Sorting the Results To sort the results, you select a column and specify how the values should be sorted based on     the values of the respective column. To do this, on the  Sort Order  tab of     the   ([~/?ScreenId=SM208000|SM208000]) Generic Inquiry (SM208000) form with the inquiry selected, you     do the following:  On the table toolbar, click  Add Row . In the  Data Field  column, select       InventoryItem.InventoryCD . In the  Sort Order  column, select  Ascending . Click  Save  on the form toolbar. Now this generic inquiry has       default sorting set up as  Ascending  based on the  Inventory ID        column.  You can speed up a generic inquiry if you define a custom sorting order that optimizes a     database query. For example, an optimized order may include fewer fields than a default sorting     order that contains keys for all tables added in the generic inquiry. Previewing the Inquiry To preview the inquiry you have created, click  View Inquiry  on the form     toolbar of the   ([~/?ScreenId=SM208000|SM208000]) Generic Inquiry (SM208000) form. To return to the   ([~/?ScreenId=SM208000|SM208000]) Generic Inquiry form, click       Back  (or the equivalent button) on the toolbar of your browser.  Making the New Inquiry Visible to Other Users To add the inquiry you have created to the site map of the classic user interface, you do the     following on the   ([~/?ScreenId=SM208000|SM208000]) Generic Inquiry (SM208000) form:  Open the  SampleGenericInquiry  generic inquiry to be published.  In the  Site Map Title  box, enter the inquiry title. In the  Site Map Location  box, select the site map location.  In the  Workspace  box, select a workspace from which the inquiry can      be accessed. In the  Category  box, select a category under which the inquiry will      be displayed in the selected workspace. Click  Save  on the form toolbar.  Notice that the  Screen        ID  box is populated with the identifier of the generic inquiry. The system       assigns the inquiry form an automatically generated ID in a format similar to that of screen       IDs of other forms, with  GI  as the two-letter module code:  GI0000mn . ]]></column>
		</row>
		<row PageID="39a5abfe-16d3-4438-8fa7-b5a7d645f49a" Language="en-US" PageRevisionID="1" PlainText="Managing Pivot Tables In  Acumatica ERP, you can build pivot tables based on the data from generic inquiries. (For information on       generic inquiries, see  Managing Generic Inquiries.) A pivot table is       a program tool that you can use to reorganize and summarize data in a generic inquiry, to view       it from different perspectives. A pivot table can automatically sort, count, total, or give       the average of the data stored in a generic inquiry, displaying the results in a separate       table showing the summarized data. You can configure and change the structure of pivot tables       simply by dragging fields. This part of the guide provides information on configuring and using pivot tables in  Acumatica ERP. In This Part Pivot Tables in Acumatica ERPData Presentation in Pivot TablesTo Add a Pivot TableTo Delete a Pivot TableExample: Designing a Pivot TableExample: Designing a Sales Analysis Pivot Table" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="4ccad5d9-264d-812c-82d5-e30e57fba504" RecordSourceID="22377">
			<column name="Content"><![CDATA[
In Acumatica ERP, you can build pivot tables based on the data from generic inquiries. (For information on generic inquiries, see [HelpRoot_ReportingTools\SM__MNG_Managing_Generic_Inquiry|Managing Generic Inquiries].) A pivot table is a program tool that you can use to reorganize and summarize data in a generic inquiry, to view it from different perspectives. A pivot table can automatically sort, count, total, or give the average of the data stored in a generic inquiry, displaying the results in a separate table showing the summarized data. You can configure and change the structure of pivot tables simply by dragging fields.{br}

This part of the guide provides information on configuring and using pivot tables in Acumatica ERP.
==In This Part==
[anchor|#_eb7bd4d8-4d8c-4f5d-99b0-e4e89a7a655c]
*[HelpRoot_ReportingTools\SM__con_Pivot_Tables|Pivot Tables in Acumatica ERP]
*[HelpRoot_ReportingTools\SM__con_Data_Presentation_in_Pivot_Tables|Data Presentation in Pivot Tables]
*[HelpRoot_ReportingTools\SM__how_Add_Pivot_Table|To Add a Pivot Table]
*[HelpRoot_ReportingTools\SM__how_Delete_Pivot_Table|To Delete a Pivot Table]
*[HelpRoot_ReportingTools\RP__CON_tools_Pivot_Sample|Example: Designing a Pivot Table]
*[HelpRoot_ReportingTools\RP__CON_tools_Pivot_SalesAnalysisSample|Example: Designing a Sales Analysis Pivot Table]
]]></column>
		</row>
		<row PageID="1fca0844-8780-4f24-b3a2-04ed98d54eca" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="88c22bb1-5a3b-78b4-e9f1-ec0d3347b2c8" RecordSourceID="22377">
			<column name="Content"><![CDATA[
In Acumatica ERP, you can use pivot tables to reorganize and summarize data from generic inquiries and analyze it from various perspectives. This capability is useful when you have large amounts of data in the generic inquiry and you need to build aggregate reports based on this data. For example, suppose that you have a generic inquiry that lists open sales orders and contains the following information: order date, customer name, order number, order quality, order total sum, and order status. If you want to see number of open orders by each customer and the overall total per customer, you build a pivot table that includes this data.{br}

In this topic, you can find information about configuring and managing pivot tables in Acumatica ERP.{br}{TOC}
==Prerequisites==
Before you start configuring a pivot table, you need to do the following:[anchor|#_28dee9f0-e533-4e38-87c7-6e58ab6ef11c]
*Create the generic inquiry that will be used as a data source for pivot tables, if this inquiry doesn&rsquo;t already exist. For details, see [HelpRoot_ReportingTools\RP__CON_tools_gi_design|Creation of Generic Inquiries]
*Plan which data from the generic inquiry you want to see in the rows, the columns, and the data area of the pivot table; also plan which data should be used for filtering.

==Configuration of Pivot Tables==
You perform the following steps to configure a pivot table in Acumatica ERP:[anchor|#_5d9eb3ba-8a34-4ff7-ba4d-6b0cee0ee845]
#You open the [HelpRoot_FormReference\SM_20_80_10|Pivot Tables] ([~/?ScreenId=SM208010|SM208010]) form in one of the following ways:
#*By searching for this form or navigating to it.
#*From the generic inquiry form that will be used as the data source for the pivot table. On the form title bar of the generic inquiry, you click '''Customization''' > '''Pivot Tables'''. Proceed to Step 3.
#*:((({S:Hint}You can also add a pivot table as a filtering tab on the generic inquiry form that will be used as the data source for the pivot table. In the filtering area above the table, click '''...''' > '''Save As Pivot'''. When this method is used, the pivot table, saved as generic inquiry filter tab, will only be available as the filter tab for the generic inquiry. It will not appear on the Pivot Tables form. For more information, see ''To Save a Filter as Pivot Table'' section of [HelpRoot_GettingStarted\GS__how_Add_Reusable_Filter|To Save a Filter for Future Use] topic.
)))
#In the '''Screen ID''' box, you select a generic inquiry from the list of existing generic inquiries. 
#By dragging the fields to the appropriate panes of the form, you select the generic inquiry fields that will be used in rows, in columns, and in the data area (the '''Values''' pane) of the pivot table.
#Optional: In the '''Shared Filter to Apply''' box in the Summary area of the form, you select a shared filter that the system will apply to the generic inquiry before displaying data in the pivot table. In addition to permanent filtering of data by using a shared filter, you select the fields that should be used for filtering by dragging them to the '''Filters''' pane on the form. For details on filtering data in pivot tables, see [HelpRoot_ReportingTools\SM__con_Data_Presentation_in_Pivot_Tables#_8d66c9a5-7ed2-4688-8345-f9c658416486|Data Filtering in Pivot Tables].
#Optional: You specify display properties for the generic inquiry fields that are used in the pivot table, such as a custom caption, sorting type, aggregate functions, and format of field values. For more information about formats of field values, see [HelpRoot_ReportingTools\SM__con_Data_Presentation_in_Pivot_Tables#_b7f4f8c6-a1ee-4e44-9f50-6a7f1fd03726|Format of Field Values in Pivot Tables].
#Optional: In the '''Site Map Location''' box in the Summary area of the form, you specify the position of the created pivot table in the Acumatica ERP site map if you want users of your Acumatica ERP instance to access it in the site map.
#Optional: You share the pivot table within your Acumatica ERP instance by selecting the '''Is Shared''' check box if you want other users of Acumatica ERP to use the pivot table.

For the detailed procedure you should use to add a pivot table, see [HelpRoot_ReportingTools\SM__how_Add_Pivot_Table|To Add a Pivot Table].
==Pivot Tables and Generic Inquiries==
In Acumatica ERP, you use the data from generic inquiries to build pivot tables. For a single generic inquiry, you can create multiple pivot tables that will summarize data in different dimensions. You use only one generic inquiry to build each pivot table. If you need to build pivot tables with information stored in multiple generic inquiries, you must first create a single generic inquiry that includes all the necessary data.{br}

When you modify a generic inquiry that pivot tables are based on (for example, when you add or remove fields), you may need to reflect these changes in the pivot tables. You can do this as follows:[anchor|#_74b9dc4f-eed9-4e5e-9b07-535261e37eeb]
#You open the applicable generic inquiry, if it is not already open.
#You click '''Pivot Tables''' on the form title bar and click the name of the pivot table name you want to open.
#In the pivot table that opens, you click '''Customize''' on the form title bar.
#In the [HelpRoot_FormReference\SM_20_80_10|Pivot Tables] ([~/?ScreenId=SM208010|SM208010]) form, which opens, you modify the settings of the pivot table.

The data for pivot tables is stored separately from the data for generic inquiries in the system database. This makes it possible for users to work with pivot tables even if the generic inquiry on which the pivot tables are based is unavailable for some reason. In addition, you can allow users to access only pivot tables and not the generic inquiries they are based on, if the security policies of your organization require this.{br}

Users of your organization can open configured pivot tables as follows:[anchor|#_77bd97bc-67be-47ed-b13e-6c0022e05bf8]
*Through the site map, if you added the pivot table there during configuration.
* From the generic inquiry form, by clicking '''Pivot Tables''' on the form title bar, which appears when at least one pivot table is created for this generic inquiry.
*:((({S:Hint}If multiple pivot tables are created for this inquiry, you then click the table you want to view.
)))

==Related Articles==
*[HelpRoot_ReportingTools\SM__how_Add_Pivot_Table|To Add a Pivot Table]
*[HelpRoot_ReportingTools\SM__how_Delete_Pivot_Table|To Delete a Pivot Table]
*[HelpRoot_ReportingTools\SM__how_How_to_Design_an_Inquiry_In_Inventory|Example: Designing a Generic Inquiry Based on Inventory Data]
*[HelpRoot_FormReference\SM_20_80_10|Pivot Tables] ([~/?ScreenId=SM208010|SM208010])]]></column>
			<column name="PlainText"><![CDATA[Pivot Tables in  Acumatica ERPIn  Acumatica ERP, you can use pivot tables to reorganize and summarize data from generic inquiries and         analyze it from various perspectives. This capability is useful when you have large amounts         of data in the generic inquiry and you need to build aggregate reports based on this data.         For example, suppose that you have a generic inquiry that lists open sales orders and         contains the following information: order date, customer name, order number, order quality,         order total sum, and order status. If you want to see number of open orders by each customer         and the overall total per customer, you build a pivot table that includes this data. In this topic, you can find information about configuring and managing pivot tables in  Acumatica ERP. Prerequisites Before you start configuring a pivot table, you need to do the following: Create the generic inquiry that will be used as a data source for pivot tables, if this           inquiry doesn't already exist. For details, see  Creation of Generic InquiriesPlan which data from the generic inquiry you want to see in the rows, the columns, and           the data area of the pivot table; also plan which data should be used for filtering. Configuration of Pivot Tables You perform the following steps to configure a pivot table in  Acumatica ERP: You open the   ([~/?ScreenId=SM208010|SM208010]) Pivot Tables (SM208010) form in one of the following             ways: By searching for this form or navigating to it. From the generic inquiry form that will be used as the data source for the pivot               table. On the form title bar of the generic inquiry, you click  Customization Pivot Tables . Proceed to Step 3. You can also add a pivot table as a filtering                 tab on the generic inquiry form that will be used as the data source for the pivot                 table. In the filtering area above the table, click  ... Save As Pivot . When this method is used, the pivot table, saved as generic inquiry                 filter tab, will only be available as the filter tab for the generic inquiry. It                 will not appear on the Pivot Tables form. For more information, see  To Save a                   Filter as Pivot Table  section of  To                   Save a Filter for Future Use To Save a Filter for Future Use topic. In the  Screen ID  box, you select a generic inquiry from the list           of existing generic inquiries.  By dragging the fields to the appropriate panes of the form, you select the generic           inquiry fields that will be used in rows, in columns, and in the data area (the              Values  pane) of the pivot table. Optional: In the  Shared Filter to Apply  box in the Summary area           of the form, you select a shared filter that the system will apply to the generic inquiry           before displaying data in the pivot table. In addition to permanent filtering of data by           using a shared filter, you select the fields that should be used for filtering by dragging           them to the  Filters  pane on the form. For details on filtering data           in pivot tables, see  Data Filtering in Pivot Tables. Optional: You specify display properties for the generic inquiry fields that are used in           the pivot table, such as a custom caption, sorting type, aggregate functions, and format           of field values. For more information about formats of field values, see  Format of Field Values in Pivot Tables. Optional: In the  Site Map Location  box in the Summary area of the           form, you specify the position of the created pivot table in the  Acumatica ERP site map if you want users of your  Acumatica ERP instance to access it in the site map. Optional: You share the pivot table within your  Acumatica ERP instance by selecting the  Is Shared  check box if you want other           users of  Acumatica ERP to use the pivot table. For the detailed procedure you should use to add a pivot table, see  To Add a Pivot Table. Pivot Tables and Generic Inquiries In  Acumatica ERP, you use the data from generic inquiries to build pivot tables. For a single generic         inquiry, you can create multiple pivot tables that will summarize data in different         dimensions. You use only one generic inquiry to build each pivot table. If you need to build         pivot tables with information stored in multiple generic inquiries, you must first create a         single generic inquiry that includes all the necessary data. When you modify a generic inquiry that pivot tables are based on (for example, when you add         or remove fields), you may need to reflect these changes in the pivot tables. You can do         this as follows: You open the applicable generic inquiry, if it is not already open. You click  Pivot Tables  on the form title bar and click the name           of the pivot table name you want to open. In the pivot table that opens, you click  Customize  on the form           title bar. In the   ([~/?ScreenId=SM208010|SM208010]) Pivot Tables (SM208010) form, which opens, you modify the           settings of the pivot table. The data for pivot tables is stored separately from the data for generic inquiries in the         system database. This makes it possible for users to work with pivot tables even if the         generic inquiry on which the pivot tables are based is unavailable for some reason. In         addition, you can allow users to access only pivot tables and not the generic inquiries they         are based on, if the security policies of your organization require this. Users of your organization can open configured pivot tables as follows: Through the site map, if you added the pivot table there during configuration.  From the generic inquiry form, by clicking  Pivot Tables  on the           form title bar, which appears when at least one pivot table is created for this generic             inquiry. If multiple pivot tables are created for this inquiry, you then click the             table you want to view.  ([~/?ScreenId=SM208010|SM208010]) ]]></column>
		</row>
		<row PageID="55d8a921-48ad-4b0a-801a-41c83f64bdcc" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="10161f58-72c1-85ad-dc59-fe2d75b94d6d" RecordSourceID="22377">
			<column name="Content"><![CDATA[
Pivot tables can contain a lot of data, and for users who analyze the data in these tables, it is crucial that data be presented in a convenient way. In Acumatica ERP, you can flexibly configure the format of the fields to be displayed in a pivot table and set up filters for data, as described in this topic.{br}{TOC}[anchor|#_b7f4f8c6-a1ee-4e44-9f50-6a7f1fd03726]
==Format of Field Values in Pivot Tables==
If you want to change the format of the fields to be displayed in a pivot table, you can specify the required format in the '''Format''' box of the '''Properties''' pane on the [HelpRoot_FormReference\SM_20_80_10|Pivot Tables] ([~/?ScreenId=SM208010|SM208010]) form. In this box, you can type one of the standard formats defined for the format function in .Net.{br}

For date fields, on the '''Properties''' pane, you can configure the following extended format settings:[anchor|#_8bc7a45f-843b-49ad-9bee-434e8fd8f64f]
*Rounding data with the specified accuracy: You can select the accuracy of calculating data gathered by date. For example, suppose that for each sales manager, you want to analyze sales amounts aggregated by quarters of the year. Suppose that the sales amounts are collected daily, which means that the date field in the generic inquiry with the required data contains the day, the month, and the year (such as ''04/11/2016''). To aggregate the sales amounts by quarter in the pivot table, in the '''Round To''' box, you select ''Quarters'', and the date will contain only the year and the quarter (such as ''2016 Q4'') in the pivot table.
*Aggregating data by the particular date part: You can select the part of a date field by which you want to aggregate data in a pivot table. For example, suppose that you want to analyze the seasonal demand on T-shirts for the past five years. To do this, you can build a pivot table that displays sales amounts aggregated by month. Suppose that the date field in the generic inquiry with sales amounts for T-shirts contains the month and the year (such as ''July 2017''). To make the system aggregate data by month and display only months in the pivot table, in the '''Date Part''' box, you select ''Month''.
*Displaying hierarchical column or row headers: If you want to configure dates in columns or rows for a pivot table to meet your needs, you can set up a hierarchical structure of the parts of the dates. For example, suppose that you want to analyze the number of shipped laptops by month for the past three years. Suppose that the date in the generic inquiry contains the day, the month, and the year (such as ''04/11/2016''). In the pivot table, you can display a one-level column that will contain the following date values: ''Jan 2015'','' Feb 2015'', and so on until ''Jun 2017''. Alternatively, you can configure the system so that it displays two levels of column headers: In the first level, the system displays the years, and under each year, the system displays the months. To configure the system in this way, you add two copies of the date field to the '''Columns''' pane of the [HelpRoot_FormReference\SM_20_80_10|Pivot Tables] form. For the first copy, in the '''Round To''' box, you select ''Years''; for the second copy, in the '''Date Part''' box, you select ''Month''.

For fields for which segmented keys are configured to have multiple segments, on the '''Properties''' pane, you can configure the following format settings:[anchor|#_5f18a96a-5baa-453c-97db-84d4bb30829e]
*Aggregating data by the particular segment: You can select the segment by which the system will aggregate data in a pivot table. For example, suppose that your company sells fruit and vegetables to restaurants. Suppose that the item class values consist of the following segments: the item category (''FR'' or ''VEG''), the item type (''APL'', ''ORG'', ''CBR'', or ''PTO''), and the country of origin (such as ''ES'', ''CN'', or ''MA''). If you want to analyze the amounts of item types shipped to each customer by using a pivot table, in the '''Segment''' box, for the item class field, you select the segment that corresponds to the item type. With these settings, the system will aggregate sales data by the item type (such as apples, designated by ''APL'').
*Displaying hierarchical column or row headers: If you want to analyze data by a combination of two segments of a field value, you can set up a hierarchical structure of the segments. Suppose that in the example described in the previous list item, you also want to add to the pivot table the country of origin for each item type. To address this task, to the '''Columns''' pane, you add two copies of the ''Item Class'' field. For the first copy, in the '''Segment''' box, you select the segment used for the item category; for the second copy, in the '''Segment''' box, you select the segment used for the country of origin.
[anchor|#_8d66c9a5-7ed2-4688-8345-f9c658416486]
==Data Filtering in Pivot Tables==
When a pivot table contains a lot of data, users may find it difficult to analyze the data. Acumatica ERP provides you with the following ways to filter data in a pivot table:[anchor|#_ae27bd4c-c0cc-4935-ac1a-8531b1ae023f]
*By the conditions specified in a shared reusable filter: To reduce the amount of data in the table, you can use shared reusable filters created for the generic inquiry whose data the pivot table displays. (The filter actually is applied to the generic inquiry, and then the pivot table uses the filtered data.) Users who have no access to the [HelpRoot_FormReference\SM_20_80_10|Pivot Tables] ([~/?ScreenId=SM208010|SM208010]) form cannot apply a shared filter (or clear an applied filter) when they work with the pivot table.
*By the values of the fields added to the '''Filters''' pane: When you want to filter data in a pivot table by fields that are not used in the table, you add these fields to the '''Filters''' pane during the design of the pivot table. The system displays these fields in the pivot table, and you can manually select the field values to filter data in the table to meet your needs at a particular time.
*By the values of fields added to the '''Columns''' or '''Rows''' pane: For fields that you add to the '''Columns''' or '''Rows''' pane, the system automatically adds simple filters to the pivot table. You can filter data on the fly by selecting particular field values, which causes the system to reduce the number of columns or rows in the table and show those of the greatest interest. If you have added two copies of a field to the '''Columns''' or '''Rows''' pane, you can filter data by each of these copies.
*:((({S:Hint}When a field is added to the '''Rows''' pane and the resulting pivot table column has more that 100 unique records to display, for the system performance reasons, the quick filter pop-up window does not display items for multiple selection.
)))

==Related Articles==
*[HelpRoot_ReportingTools\SM__how_Add_Pivot_Table|To Add a Pivot Table]
*[HelpRoot_ReportingTools\SM__how_Delete_Pivot_Table|To Delete a Pivot Table]
*[HelpRoot_FormReference\SM_20_80_10|Pivot Tables] ([~/?ScreenId=SM208010|SM208010])]]></column>
			<column name="PlainText"><![CDATA[Data Presentation in Pivot Tables Pivot tables can contain a lot of data, and for users who analyze the data in these tables, it     is crucial that data be presented in a convenient way. In  Acumatica ERP,     you can flexibly configure the format of the fields to be displayed in a pivot table and set up     filters for data, as described in this topic. Format of Field Values in Pivot Tables If you want to change the format of the fields to be displayed in a pivot table, you can     specify the required format in the  Format  box of the       Properties  pane on the   ([~/?ScreenId=SM208010|SM208010]) Pivot Tables (SM208010) form.     In this box, you can type one of the standard formats defined for the format function in     .Net. For date fields, on the  Properties  pane, you can configure the     following extended format settings: Rounding data with the specified accuracy: You can select the accuracy of calculating data      gathered by date. For example, suppose that for each sales manager, you want to analyze sales      amounts aggregated by quarters of the year. Suppose that the sales amounts are collected daily,      which means that the date field in the generic inquiry with the required data contains the day,      the month, and the year (such as  04/11/2016 ). To aggregate the sales amounts by quarter      in the pivot table, in the  Round To  box, you select  Quarters , and      the date will contain only the year and the quarter (such as  2016 Q4 ) in the pivot      table. Aggregating data by the particular date part: You can select the part of a date field by      which you want to aggregate data in a pivot table. For example, suppose that you want to      analyze the seasonal demand on T-shirts for the past five years. To do this, you can build a      pivot table that displays sales amounts aggregated by month. Suppose that the date field in the      generic inquiry with sales amounts for T-shirts contains the month and the year (such as        July 2017 ). To make the system aggregate data by month and display only months in the      pivot table, in the  Date Part  box, you select  Month . Displaying hierarchical column or row headers: If you want to configure dates in columns or      rows for a pivot table to meet your needs, you can set up a hierarchical structure of the parts      of the dates. For example, suppose that you want to analyze the number of shipped laptops by      month for the past three years. Suppose that the date in the generic inquiry contains the day,      the month, and the year (such as  04/11/2016 ). In the pivot table, you can display a      one-level column that will contain the following date values:  Jan 2015 ,  Feb 2015 ,      and so on until  Jun 2017 . Alternatively, you can configure the system so that it      displays two levels of column headers: In the first level, the system displays the years, and      under each year, the system displays the months. To configure the system in this way, you add      two copies of the date field to the  Columns  pane of the   ([~/?ScreenId=SM208010|SM208010]) Pivot Tables form. For the first copy, in the  Round To       box, you select  Years ; for the second copy, in the  Date Part  box,      you select  Month . For fields for which segmented keys are configured to have multiple segments, on the       Properties  pane, you can configure the following format settings: Aggregating data by the particular segment: You can select the segment by which the system      will aggregate data in a pivot table. For example, suppose that your company sells fruit and      vegetables to restaurants. Suppose that the item class values consist of the following      segments: the item category ( FR  or  VEG ), the item type ( APL ,  ORG ,        CBR , or  PTO ), and the country of origin (such as  ES ,  CN , or        MA ). If you want to analyze the amounts of item types shipped to each customer by using      a pivot table, in the  Segment  box, for the item class field, you select      the segment that corresponds to the item type. With these settings, the system will aggregate      sales data by the item type (such as apples, designated by  APL ). Displaying hierarchical column or row headers: If you want to analyze data by a combination      of two segments of a field value, you can set up a hierarchical structure of the segments.      Suppose that in the example described in the previous list item, you also want to add to the      pivot table the country of origin for each item type. To address this task, to the        Columns  pane, you add two copies of the  Item Class  field. For      the first copy, in the  Segment  box, you select the segment used for the      item category; for the second copy, in the  Segment  box, you select the      segment used for the country of origin. Data Filtering in Pivot Tables When a pivot table contains a lot of data, users may find it difficult to analyze the data.       Acumatica ERP provides you with the following ways to filter data in a pivot table: By the conditions specified in a shared reusable filter: To reduce the amount of data in the      table, you can use shared reusable filters created for the generic inquiry whose data the pivot      table displays. (The filter actually is applied to the generic inquiry, and then the pivot      table uses the filtered data.) Users who have no access to the   ([~/?ScreenId=SM208010|SM208010]) Pivot Tables      (SM208010) form cannot apply a shared filter (or clear an applied filter) when they work with      the pivot table. By the values of the fields added to the  Filters  pane: When you want      to filter data in a pivot table by fields that are not used in the table, you add these fields      to the  Filters  pane during the design of the pivot table. The system      displays these fields in the pivot table, and you can manually select the field values to      filter data in the table to meet your needs at a particular time. By the values of fields added to the  Columns  or        Rows  pane: For fields that you add to the        Columns  or  Rows  pane, the system automatically      adds simple filters to the pivot table. You can filter data on the fly by selecting particular      field values, which causes the system to reduce the number of columns or rows in the table and      show those of the greatest interest. If you have added two copies of a field to the        Columns  or  Rows  pane, you can filter data by      each of these copies. When a field is added to the  Rows  pane and       the resulting pivot table column has more that 100 unique records to display, for the system       performance reasons, the quick filter pop-up window does not display items for multiple       selection.  ([~/?ScreenId=SM208010|SM208010]) ]]></column>
		</row>
		<row PageID="817daaab-58ed-40bc-98f8-558ec2083446" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="350e61a2-a641-1386-7c2f-20c6ecdcd59f" RecordSourceID="22377">
			<column name="Content"><![CDATA[You use the [HelpRoot_FormReference\SM_20_80_10|Pivot Tables] ([~/?ScreenId=SM208010|SM208010]) form to add a pivot table. For details on pivot tables in Acumatica ERP, see [HelpRoot_ReportingTools\SM__con_Pivot_Tables|Pivot Tables in Acumatica ERP].
==Before You Begin==
Before you start configuring a pivot table, you need to do the following:[anchor|#_28dee9f0-e533-4e38-87c7-6e58ab6ef11c]
*Create the generic inquiry that will be used as a data source for pivot tables, if this inquiry doesn&rsquo;t already exist. For details, see [HelpRoot_ReportingTools\RP__CON_tools_gi_design|Creation of Generic Inquiries].
*Plan which data from the generic inquiry you want to see in the rows, the columns, and the data area of the pivot table; also plan which data should be used for filtering.

==To Add a Pivot Table==[anchor|#_1c86b6fe-249d-4d99-9a7f-f6845b838a56]
#Open the [HelpRoot_FormReference\SM_20_80_10|Pivot Tables] ([~/?ScreenId=SM208010|SM208010]) form in one of the following ways:
#*By searching for this form or navigating to it.
#*From the generic inquiry form that will be used as the data source for the pivot table. On the form title bar of the generic inquiry, click '''Customization''' > '''Pivot Tables'''. Proceed to Step 3.
#*:((({S:Hint}You can also add a pivot table as a filtering tab on the generic inquiry form that will be used as the data source for the pivot table. In the filtering area above the table, click '''...''' > '''Save As Pivot'''. When this method is used, the pivot table, saved as generic inquiry filter tab, will only be available as the filter tab for the generic inquiry. It will not appear on the Pivot Tables form. For more information, see ''To Save a Filter as Pivot Table'' section of [HelpRoot_GettingStarted\GS__how_Add_Reusable_Filter|To Save a Filter for Future Use] topic.
)))
#In the '''Screen ID''' box in the Summary area, select the generic inquiry that will be used as a data source for the pivot table. 
#In the '''Name''' box, type the name you want to use for the pivot table. This name will be used as the pivot table ID after you save your changes to the table.[anchor|#_e6bd50e8-9012-47c4-8ab6-ec91857e448b]
#Configure the layout of the pivot table as follows:
#*Drag the generic inquiry fields from the '''Fields''' pane to one of the following panes, depending on the desired layout of the pivot table: '''Rows''', '''Columns''', or '''Values'''.
#*Optional: Drag the generic inquiry fields from the '''Fields''' pane to the '''Filters''' pane if you want to filter data in the pivot table by these fields.
#Optional: Set up display properties for the generic inquiry fields that are used in the pivot tables as follows:
##Click a field that is now in the '''Filters''', '''Columns''', '''Rows''', or '''Values''' pane.
##In the '''Properties''' pane, perform any of the following steps, as needed, to change the properties of the selected field:
##*In the '''Caption''' box, change the caption of the selected field that will be displayed in the pivot table.
##*In the '''Aggregate''' list, select the aggregate function that will be applied to the field value.
##*In the '''Sort Order''' list, select the way you want the field values to be sorted.
##*Select the '''Show Percent''' check box if you want to display the field value selected in the '''Values''' pane as a percent of the total value.
##*Select the '''Show Total''' check box if you want to display a '''Total''' box for this field in the pivot table.
##*In the '''Total Label''' box, type the custom name of the '''Total''' box.
##*In the '''Show Empty Value As''' box, type the value that the system will display for empty values of the field.
##*In the '''Width''' box, type the width of the cells (in pixels) in which the field values are displayed.
##*In the '''Format''' box, specify the format of the field if it should differ from the original format.
##*For a date field, in the '''Round To''' box, select the part of the date to which you want to round the field value in the pivot table.
##*For a date field, in the '''Date Part''' box, select the part of the date field if you want to display only this part (but not the full date) in the pivot table.
##*For a field whose value is defined by a segmented key with multiple segments, in the '''Segment''' box, select the segment if you want to display only this segment (but not the entire field value) in the pivot table.
#Optional: In the '''Site Map Location''' box in the Summary area, specify the position of the pivot table in the site map of the Acumatica ERP classic UI if you want users of your Acumatica ERP instance to navigate to it from the site map of that UI.
#Optional: In the '''Workspace''' box, select a workspace from which the table can be accessed in the modern UI.
#Optional: In the '''Category''' box, select a category under which the table will be displayed in the selected workspace.
#Optional: Select the '''Is Shared''' check box if you want other users of Acumatica ERP to see the pivot table.
#Optional: Select a shared filter in the '''Shared Filter to Apply''' box if you want to filter data in the pivot table by using an existing filter.
#On the form toolbar, click '''Save''' to save the pivot table.
]]></column>
			<column name="PlainText"><![CDATA[To Add a Pivot Table You use the   ([~/?ScreenId=SM208010|SM208010]) Pivot Tables (SM208010) form to add a pivot table.             For details on pivot tables in  Acumatica ERP, see  Pivot Tables in Acumatica ERP. Before You Begin Before you start configuring a pivot table, you need to do the following: Create the generic inquiry that will be used as a data source for pivot                     tables, if this inquiry doesn't already exist. For details, see  Creation of Generic Inquiries. Plan which data from the generic inquiry you want to see in the rows, the                     columns, and the data area of the pivot table; also plan which data should be                     used for filtering. To Add a Pivot Table Open the   ([~/?ScreenId=SM208010|SM208010]) Pivot Tables (SM208010) form in one of the following                         ways: By searching for this form or navigating to it. From the generic inquiry form that will be used as the data source for                             the pivot table. On the form title bar of the generic inquiry, click  Customization Pivot Tables . Proceed to Step 3. You can also add a pivot table                                 as a filtering tab on the generic inquiry form that will be used as                                 the data source for the pivot table. In the filtering area above the                                 table, click  ... Save As Pivot . When this method is used, the pivot table, saved as                                 generic inquiry filter tab, will only be available as the filter tab                                 for the generic inquiry. It will not appear on the Pivot Tables                                 form. For more information, see  To Save a Filter as Pivot                                     Table  section of  To Save a Filter for Future Use To Save a Filter for Future Use topic. In the  Screen ID  box in the Summary area, select the                     generic inquiry that will be used as a data source for the pivot table.  In the  Name  box, type the name you want to use for the                     pivot table. This name will be used as the pivot table ID after you save your                     changes to the table. Configure the layout of the pivot                     table as follows: Drag the generic inquiry fields from the  Fields                              pane to one of the following panes, depending on the desired layout of                             the pivot table:  Rows ,                                  Columns , or                              Values . Optional: Drag the generic inquiry fields from the                                  Fields  pane to the                                  Filters  pane if you want to filter data in                             the pivot table by these fields. Optional: Set up display properties for the generic inquiry fields that are used                     in the pivot tables as follows: Click a field that is now in the  Filters ,                                  Columns ,  Rows , or                                  Values  pane. In the  Properties  pane, perform any of the                             following steps, as needed, to change the properties of the selected                                 field: In the  Caption  box, change the caption of                                     the selected field that will be displayed in the pivot                                     table. In the  Aggregate  list, select the                                     aggregate function that will be applied to the field value. In the  Sort Order  list, select the way                                     you want the field values to be sorted. Select the  Show Percent  check box if you                                     want to display the field value selected in the                                          Values  pane as a percent of the total                                     value. Select the  Show Total  check box if you                                     want to display a  Total  box for this                                     field in the pivot table. In the  Total Label  box, type the custom                                     name of the  Total  box. In the  Show Empty Value As  box, type the                                     value that the system will display for empty values of the                                     field. In the  Width  box, type the width of the                                     cells (in pixels) in which the field values are displayed. In the  Format  box, specify the format of                                     the field if it should differ from the original format. For a date field, in the  Round To  box,                                     select the part of the date to which you want to round the field                                     value in the pivot table. For a date field, in the  Date Part  box,                                     select the part of the date field if you want to display only                                     this part (but not the full date) in the pivot table. For a field whose value is defined by a segmented key with                                     multiple segments, in the  Segment  box,                                     select the segment if you want to display only this segment (but                                     not the entire field value) in the pivot table. Optional: In the  Site Map Location  box in the Summary                     area, specify the position of the pivot table in the site map of the  Acumatica ERP classic UI if you want users of your  Acumatica ERP instance to navigate to it from the site map of that UI. Optional: In the  Workspace  box, select a workspace from                     which the table can be accessed in the modern UI. Optional: In the  Category  box, select a category under                     which the table will be displayed in the selected workspace. Optional: Select the  Is Shared  check box if you want                     other users of  Acumatica ERP to see the pivot table. Optional: Select a shared filter in the  Shared Filter to                         Apply  box if you want to filter data in the pivot table by using                     an existing filter. On the form toolbar, click  Save  to save the pivot                     table. ]]></column>
		</row>
		<row PageID="10a63808-3994-4bb6-b1dc-256e5c05ce45" Language="en-US" PageRevisionID="1" Content="You use the [HelpRoot_FormReference\SM_20_80_10|Pivot Tables] ([~/?ScreenId=SM208010|SM208010]) form to delete a pivot table. For details on pivot tables in Acumatica ERP, see [HelpRoot_ReportingTools\SM__con_Pivot_Tables|Pivot Tables in Acumatica ERP].&#xA;==To Delete a Pivot Table==&#xA;[anchor|#_f739bba8-22e1-4942-bd97-9e826ed35ae0]&#xA;#Open the [HelpRoot_FormReference\SM_20_80_10|Pivot Tables] form ([~/?ScreenId=SM208010|SM208010]) in one of the following ways:&#xA;#*By searching for this form or navigating to it.&#xA;#*From the generic inquiry form used as the data source for the pivot table. On the form title bar of the generic inquiry, click '''Customization''' &gt; '''Pivot Tables'''. Proceed to Step 4.&#xA;#In the '''Screen ID''' box, select a generic inquiry that is used as a data source for the pivot table. &#xA;#In the '''Pivot Table ID''' box, select the pivot table that should be deleted.&#xA;#On the form toolbar, click '''Delete'''.&#xA;" PlainText="To Delete a Pivot Table You use the   ([~/?ScreenId=SM208010|SM208010]) Pivot Tables (SM208010) form to delete a pivot             table. For details on pivot tables in  Acumatica ERP, see  Pivot Tables in Acumatica ERP. To Delete a Pivot Table Open the   ([~/?ScreenId=SM208010|SM208010]) Pivot Tables form (SM208010) in one of the                         following ways: By searching for this form or navigating to it. From the generic inquiry form used as the data source for the pivot                                 table. On the form title bar of the generic inquiry, click  Customization Pivot Tables . Proceed to Step 4. In the  Screen ID  box, select a generic inquiry that                         is used as a data source for the pivot table.  In the  Pivot Table ID  box, select the pivot table                         that should be deleted. On the form toolbar, click  Delete . " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="ebed3d50-1a10-f714-fb9d-575618656595" RecordSourceID="22377" />
		<row PageID="875aa16e-be20-4978-96df-0e4aa39839c4" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="d78ff469-8507-d30a-0974-c477556a2909" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The following topic describes the steps of designing a sample pivot table for testing purposes, so you can better understand how the process works. The sample pivot table will help users to analyze sales performance of salespersons during each month. This pivot table will be created based on '''Sales Profitability Analysis''' generic inquiry.((({S:Hint}If you are performing the steps of this example, we recommend that you set up your system with the ''SalesDemo'' database to populate it with demo data. For more information, see [HelpRoot_Install\Installing_ERP_Instance|To Deploy an Acumatica ERP Instance].
)))
==Creating the Sample Pivot Table==
To create the pivot table, perform the following steps:[anchor|#_79fd1b64-d8db-4013-892d-3ccdbf1c6c86]
#Open the '''Sales Profitability Analysis''' generic inquiry form (AR601000) by searching for or navigating to it.
#On the form title bar, click '''Customization''' > '''Pivot Tables'''.
#:The [HelpRoot_FormReference\SM_20_80_10|Pivot Tables] ([~/?ScreenId=SM208010|SM208010]) form opens with the '''Screen ID''' box populated with the site map title specified for the generic inquiry.
#In the '''Name''' box, type <tt>Sample Pivot</tt>.
#Drag the generic inquiry fields from the '''Fields''' pane to one of these panes to create the pivot table: '''Rows''', '''Columns''', or '''Values'''. For this particular pivot table, move the fields as follows: 
#*Drag the '''Sales Pers''' field to the '''Rows''' pane.
#*Drag the '''Date''' field to the '''Columns''' pane.
#*Drag the '''Net Sale''' field to the '''Values''' pane.
#Click the '''Date''' field in the '''Columns''' pane.
#In the '''Properties''' pane, change the settings as follows:
#*'''Caption''' to <tt>Month</tt>
#*'''Round to''' to ''Months''
#Click '''Save''' on the form toolbar.

==Reviewing the Sample Pivot Table==
Now that the sample pivot table has been created and saved, you can review it and analyze data.{br}

Begin by clicking '''View Pivot''' on the form toolbar. The ''Sample Pivot'' table opens in a new browser tab. Note the following:{br}

[anchor|#_346173cc-1490-4fb2-bd55-860c20d7bb06]
*The '''Sales Pers''' field was selected under '''Rows''', and it is retrieving the list of all names available from the data source.
*With the '''Month''' field selected under '''Columns''', the system has dynamically created one column for each available month in the data.
*The '''Net Sales''' field has provided the values for each salesperson and month. This field has the default '''Aggregate''' property value set (''SUM'').
*Each aggregated value in the cells is a hyperlink that allows the user to drill down to the actual transactions that provided the data.
*:((({S:Hint}Click the '''Total''' value of an entry to display the underlying orders. From there, you can keep drilling down to the order detail.
)))
*You can sort aggregated data.
*:((({S:Hint} You can sort the rightmost '''Totals''' column in descending order to instantly identify the top performers.
)))

==Adding Filters==You can add filters for customization purposes. To test this capability, you can do the following:[anchor|#_bee7b519-0a18-47d6-afe9-cb37c358bcfb]
#Go back to the browser tab with the [HelpRoot_FormReference\SM_20_80_10|Pivot Tables] ([~/?ScreenId=SM208010|SM208010]) form to drag the '''Customer''' field to the '''Filters''' pane.
#Click '''Save''' on the form toolbar.
#Click '''View Pivot''' on the form toolbar.
#Drag the '''Customer''' field from the '''Filters''' pane to the '''Rows''' pane, to the right of the '''Sales Pers''' column.
#:The customers are now grouped by salesperson, which provides visibility of each salesperson&rsquo;s sales and the ability to drill down to the specific orders that make up a salesperson&rsquo;s sales.
]]></column>
			<column name="PlainText"><![CDATA[Example: Designing a Pivot Table The following topic describes the steps of designing a sample pivot         table for testing purposes, so you can better understand how the process works. The sample         pivot table will help users to analyze sales performance of salespersons during each month.         This pivot table will be created based on  Sales Profitability           Analysis  generic inquiry. If you are performing the steps of this           example, we recommend that you set up your system with the  SalesDemo  database to           populate it with demo data. For more information, see  To Deploy an Acumatica ERP Instance. Creating the Sample Pivot Table To create the pivot table, perform the following steps: Open the  Sales Profitability Analysis  generic inquiry form             (AR601000) by searching for or navigating to it. On the form title bar, click  Customization Pivot Tables . The   ([~/?ScreenId=SM208010|SM208010]) Pivot Tables(SM208010) form opens with the                  Screen ID  box populated with the site map title specified for               the generic inquiry. In the  Name  box, type  Sample Pivot . Drag the generic inquiry fields from the  Fields  pane to one of             these panes to create the pivot table:  Rows ,                Columns , or  Values . For this particular             pivot table, move the fields as follows:  Drag the  Sales Pers  field to the                    Rows  pane. Drag the  Date  field to the  Columns                  pane. Drag the  Net Sale  field to the                    Values  pane. Click the  Date  field in the  Columns              pane. In the  Properties  pane, change the settings as follows: Caption  to  Month Round to  to  Months Click  Save  on the form toolbar. Reviewing the Sample Pivot Table Now that the sample pivot table has been created and saved, you can review it and analyze         data. Begin by clicking  View Pivot  on the form toolbar. The  Sample           Pivot  table opens in a new browser tab. Note the following: The  Sales Pers  field was selected under                Rows , and it is retrieving the list of all names available from             the data source. With the  Month  field selected under                Columns , the system has dynamically created one column for each             available month in the data. The  Net Sales  field has provided the values for each             salesperson and month. This field has the default  Aggregate              property value set ( SUM ). Each aggregated value in the cells is a hyperlink that allows the user to drill down             to the actual transactions that provided the data. Click the                  Total  value of an entry to display the underlying orders.               From there, you can keep drilling down to the order detail. You can sort aggregated data.  You can sort the rightmost                  Totals  column in descending order to instantly identify the               top performers. Adding Filters You can add filters for customization purposes. To test       this capability, you can do the following: Go back to the browser tab with the   ([~/?ScreenId=SM208010|SM208010]) Pivot Tables(SM208010) form to           drag the  Customer  field to the  Filters            pane. Click  Save  on the form toolbar. Click  View Pivot  on the form toolbar. Drag the  Customer  field from the  Filters            pane to the  Rows  pane, to the right of the  Sales             Pers  column. The customers are now grouped by salesperson, which provides             visibility of each salesperson's sales and the ability to drill down to the specific             orders that make up a salesperson's sales. ]]></column>
		</row>
		<row PageID="4612edb7-33bc-446e-9ecf-f7c67c6cc1b1" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="cdca8f47-e50c-3588-78f0-85988a3e1e9a" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The following topic describes the steps of designing a sample pivot table for testing purposes, to help you better understand how the process works. The sample pivot table will help to analyze sales data based on '''Invoiced Items''' generic inquiry.((({S:Hint}If you are performing the steps of this example, we recommend that you set up your system with the ''SalesDemo'' database to populate it with demo data. For more information, see [HelpRoot_Install\Installing_ERP_Instance|To Deploy an Acumatica ERP Instance].
))){br}{TOC}
==Creating the Sample Pivot Table==
To create the pivot table, perform the following steps:[anchor|#_79fd1b64-d8db-4013-892d-3ccdbf1c6c86]
#Open the '''Invoiced Items''' generic inquiry form (GI000008) by searching for or navigating to it.
#On the form title bar, click '''Customization''' > '''Pivot Tables'''.
#:The [HelpRoot_FormReference\SM_20_80_10|Pivot Tables] ([~/?ScreenId=SM208010|SM208010]) form opens with the '''Screen ID''' box populated with the site map title of the generic inquiry.
#In the '''Name''' box, type <tt>Sales Analysis Pivot Table</tt>.
#Drag the generic inquiry fields from the '''Fields''' pane to one of these panes to create the pivot table: '''Rows''', '''Columns''', or '''Values'''. For this particular pivot table, move the fields as follows: 
#*Drag the '''Account Name''', '''Inventory ID''', and '''Quantity''' fields to the '''Rows''' pane.
#*Drag the '''Ext. Amount''' and '''Ext. Profit''' fields to the '''Values''' pane. 
#*Drag the '''Customer ID Class''', '''Item Class''', and '''Financial Period''' fields to the '''Filters''' pane.
#Click the '''Account Name''' field in the '''Rows''' pane.
#In the '''Properties''' pane, change the settings as follows:
#*'''Caption''' to <tt>Customer</tt>
#*'''Round to''' to ''Months''
#Click the '''Ext. Amount''' field in the '''Values''' pane.
#In the '''Properties''' pane, change the settings as follows:
#*'''Caption''' to <tt>Sales</tt>
#*'''Format''' to <tt>C</tt>
#Select the '''Ext. Profit''' field in the '''Values''' pane.
#In the '''Properties''' pane, change the settings as follows:
#*'''Caption''' to <tt>Gross Profit</tt>
#*'''Format''' to <tt>C</tt>
#Click '''Save''' on the form toolbar.

==Reviewing the Sample Pivot Table==
Now that the sample pivot table has been created and saved, you can review it and analyze data.{br}

Begin by clicking '''View Pivot''' on the form toolbar. The pivot table opens in a new browser tab.{br}

The pivot table displays the data, giving users the ability to quickly visualize what items and how many of them a customer bought. As you can see, the pivot table has '''Sales''' and '''Gross Profit''' columns listing values with hyperlinks. You can use the links to drill down to the source documents. For example, from this pivot table, you can drill down to an original invoice.
==Adding Filters==You can use filters to group data on the pivot table. To test this, you can drag the '''Financial Period''' field from the '''Filters''' pane to the '''Rows''' pane, to the right of the '''Customer''' column.((({S:Hint}Alternatively, you can drag the filters to the '''Column''' pane on top of the table.
)))
The inventory IDs are now grouped by financial periods, so that you can quickly find and drill down to an entry and then optionally drill down to a specific document.{br}

You can similarly use the other filters ('''Customer ID Class''' and '''Item Class''') that you previously added to the '''Filters''' pane at the stage when you created the pivot table.]]></column>
			<column name="PlainText"><![CDATA[Example: Designing a Sales Analysis Pivot Table The following topic describes the steps of designing a sample pivot         table for testing purposes, to help you better understand how the process works. The sample         pivot table will help to analyze sales data based on  Invoiced Items          generic inquiry. If you are performing the steps of this example, we recommend that you           set up your system with the  SalesDemo  database to populate it with demo data. For           more information, see  To Deploy an Acumatica ERP Instance. Creating the Sample Pivot Table To create the pivot table, perform the following steps: Open the  Invoiced Items  generic inquiry form (GI000008) by             searching for or navigating to it. On the form title bar, click  Customization Pivot Tables . The   ([~/?ScreenId=SM208010|SM208010]) Pivot Tables(SM208010) form opens with the                  Screen ID  box populated with the site map title of the               generic inquiry. In the  Name  box, type  Sales Analysis Pivot               Table . Drag the generic inquiry fields from the  Fields  pane to one of             these panes to create the pivot table:  Rows ,                Columns , or  Values . For this particular             pivot table, move the fields as follows:  Drag the  Account Name ,  Inventory ID ,                 and  Quantity  fields to the  Rows                  pane. Drag the  Ext. Amount  and  Ext. Profit                  fields to the  Values  pane.  Drag the  Customer ID Class ,  Item                   Class , and  Financial Period  fields to the                    Filters  pane. Click the  Account Name  field in the  Rows              pane. In the  Properties  pane, change the settings as follows: Caption  to  Customer Round to  to  Months Click the  Ext. Amount  field in the                Values  pane. In the  Properties  pane, change the settings as follows: Caption  to  Sales Format  to  C Select the  Ext. Profit  field in the                Values  pane. In the  Properties  pane, change the settings as follows: Caption  to  Gross Profit Format  to  C Click  Save  on the form toolbar. Reviewing the Sample Pivot Table Now that the sample pivot table has been created and saved, you can review it and analyze         data. Begin by clicking  View Pivot  on the form toolbar. The pivot table         opens in a new browser tab. The pivot table displays the data, giving users the ability to quickly visualize what items         and how many of them a customer bought. As you can see, the pivot table has            Sales  and  Gross Profit  columns listing         values with hyperlinks. You can use the links to drill down to the source documents. For         example, from this pivot table, you can drill down to an original invoice. Adding Filters You can use filters to group data on the pivot table. To       test this, you can drag the  Financial Period  field from the          Filters  pane to the  Rows  pane, to the right of       the  Customer  column. Alternatively, you can drag the filters to         the  Column  pane on top of the table. The inventory IDs are         now grouped by financial periods, so that you can quickly find and drill down to an entry         and then optionally drill down to a specific document. You can similarly use the other         filters ( Customer ID Class  and  Item Class )         that you previously added to the  Filters  pane at the stage when you         created the pivot table. ]]></column>
		</row>
		<row PageID="324b9ad1-6481-4633-8d45-f520f054dfe7" Language="en-US" PageRevisionID="1" PlainText="Managing Dashboard Pages In  Acumatica ERP,     a dashboard is a collection of widgets that are displayed on a single page and are designed to     give you needed information at a glance. The page that displays the collection is referred to as     a dashboard page. This part of the guide contains information on managing dashboard pages. For more information     on managing dashboard widgets, see  Dashboards     in the  Acumatica ERP     Interface Guide. In This Part Dashboard PagesAccess Rights to DashboardsTo Add a New Dashboard PageTo Register Your Acumatica ERP Instance for Power BI" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="ce29ed0e-1719-0e44-1793-9adbde2aaa89" RecordSourceID="22377">
			<column name="Content"><![CDATA[
In Acumatica ERP, a dashboard is a collection of widgets that are displayed on a single page and are designed to give you needed information at a glance. The page that displays the collection is referred to as a dashboard page.{br}

This part of the guide contains information on managing dashboard pages. For more information on managing dashboard widgets, see [HelpRoot_Interface\DB__mng_UIG_Dashboards|Dashboards] in the Acumatica ERP Interface Guide.
==In This Part==[anchor|#_c01bb84e-eee4-4e2f-9b6a-6d63d8031007]
{| class="checklist invisiblechecklist" | width="100%" 
|- 
| [anchor|#_05dd9870-1268-4660-8ef1-a2a319e71b5d]
*[HelpRoot_ReportingTools\CU__con_Dashboards|Dashboard Pages]
*[HelpRoot_ReportingTools\CU__con_Access_Rights_to_Dashboards|Access Rights to Dashboards]

| [anchor|#_7dbe2b6b-e93c-4072-aafc-3a5601882799]
*[HelpRoot_ReportingTools\CU__how_Add_Dashboard|To Add a New Dashboard Page]
*[HelpRoot_ReportingTools\DB__how_Registering_for_PowerBI|To Register Your Acumatica ERP Instance for Power BI]

|}]]></column>
		</row>
		<row PageID="cffc5149-89ce-4446-a664-5c96753cbb31" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="8d0b2a17-3222-bbb9-4688-ac4bb707b8a0" RecordSourceID="22377">
			<column name="Content"><![CDATA[
In Acumatica ERP, a dashboard is a collection of widgets that is displayed on a dashboard page. You can use dashboards to display information that is important for the business processes of your organization on a single page in Acumatica ERP. For more information on types of widgets, see [HelpRoot_Interface\DB__DB_Features|Dashboards and Widgets].{br}

You can create dashboard pages and place them in the workspaces (for the modern UI) or the locations in the site map (for the classic UI) where they are most convenient for users who could use the dashboards in their daily work.{br}

In this topic, you can find information about adding new dashboard pages, managing access rights to dashboard pages, and resetting dashboards.{br}{TOC}
==Adding a New Dashboard Page==
You can add new dashboard pages by using the [HelpRoot_FormReference\SM_20_86_00|Dashboards] ([~/?ScreenId=SM208600|SM208600]) form. A user who has access to this form can add, remove, and modify the properties of any dashboards.{br}

The process of adding a new dashboard page consists of the following steps:[anchor|#_84994fdd-0bb0-47be-8725-d2531f428bc9]
#Creating a new dashboard page.
#Adding a link to the dashboard page to the appropriate workspace or workspaces (for the modern UI) and specifying the location of this page in the site map (for the classic UI).
#:((({S:Hint}In the modern UI, the system adds links to new dashboards to the '''Data Views''' workspace. You can add dashboard links to necessary workspaces in the Menu Editing mode. For details, see [HelpRoot_Administration\AS__how_Add_Form_to_Workspace_Menu|To Add a Link to a Workspace].
)))
#Selecting the role for the dashboard owner. For details, see [HelpRoot_ReportingTools\CU__con_Access_Rights_to_Dashboards|Access Rights to Dashboards].
#:((({S:Hint}If you will configure the dashboard that you are creating, you should select an owner role that you are assigned to. Otherwise, you will be working with your personal copy of the dashboard, and other users will not see any widgets that you add on the dashboard.
)))
#Selecting the user roles that should be allowed to view the dashboard page. For details on user roles, see [HelpRoot_Administration\SM__con_Role-Based_Access|Role-Based Access].
#Optional: Providing users who may view the page (based on their user roles) with the capability to add, modify, and delete widgets on the dashboard. You set this capability at the dashboard level, and it applies to all user roles that can view the dashboard.
#Optional: Specifying whether the dashboard should be displayed in the Acumatica mobile apps connected to your Acumatica ERP site.
#If you or other employees of your organization want to add a Power BI tile widget on Acumatica ERP dashboard, you need to register your Acumatica ERP instance on Microsoft Azure for Power BI beforehand. For a detailed procedure, see [HelpRoot_ReportingTools\DB__how_Registering_for_PowerBI|To Register Your Acumatica ERP Instance for Power BI].

For details on adding a new dashboard, see [HelpRoot_ReportingTools\CU__how_Add_Dashboard|To Add a New Dashboard Page].After you have created the dashboard page, you populate it with widgets. For details on working with widgets, see [HelpRoot_GettingStarted\GS__mng_Dashboards|Configuring Dashboards].
==Assigning Access Rights Capabilities to Dashboards==
Users who will work with dashboards can be given any of the following access rights capabilities:[anchor|#_a08b6711-f226-4115-a12c-93ed2d6015ac]
*Managing dashboard pages: Users with this capability can create new dashboard pages, delete dashboard pages, set up access rights to dashboard pages, and populate the dashboard pages with widgets. With regard to access rights to dashboards, these are the most powerful users.
*Configuring an original dashboard: Users with this capability can modify widgets on an original dashboard and reset all user copies to the original settings. These users are regarded as dashboard owners.
*Viewing dashboards: Users with this capability can only view information on a dashboard. These users are the least powerful dashboard users because they cannot modify widgets on a dashboard.
*Personalizing dashboards: Users with this capability can view and modify widgets on their copy of a dashboard. 

For details on access rights to dashboards, see [HelpRoot_ReportingTools\CU__con_Access_Rights_to_Dashboards|Access Rights to Dashboards].[anchor|#_baf25693-7fec-428c-bfaf-41e83b1ac64f]
==Resetting Dashboard Pages==
When you reset a dashboard, its widgets are replaced with the widgets from the original dashboard. {br}

Settings for predefined dashboards are taken from the System company (for more information on System company, see [HelpRoot_Administration\SM__con_Support_of_Multiple_Companies|Support of Multiple Tenants]). To reset a predefined dashboard, you open the dashboard on the [HelpRoot_FormReference\SM_20_86_00|Dashboards] ([~/?ScreenId=SM208600|SM208600]) form and click '''Reset to Predefined''' on the form toolbar. {br}

Settings for user copies of dashboards that were created by you or your colleagues are taken from the original dashboard. You can reset all user copies of the dashboard at once by opening the dashboard on the [HelpRoot_FormReference\SM_20_86_00|Dashboards] ([~/?ScreenId=SM208600|SM208600]) form and clicking '''Reset All User Copies'''.Users who work with a copy of the dashboard can also reset their copy. For details, see [HelpRoot_Interface\DB__DB_Features|Dashboards and Widgets].
==Related Articles==
*[HelpRoot_GettingStarted\GS__mng_Dashboards|Configuring Dashboards]
*[HelpRoot_Interface\DB__DB_Features|Dashboards and Widgets]
*[HelpRoot_Administration\SM__con_Role-Based_Access|Role-Based Access]
*[HelpRoot_Administration\SM__con_Support_of_Multiple_Companies|Support of Multiple Tenants]
*[HelpRoot_ReportingTools\CU__how_Add_Dashboard|To Add a New Dashboard Page]
*[HelpRoot_FormReference\SM_20_86_00|Dashboards] ([~/?ScreenId=SM208600|SM208600])]]></column>
			<column name="PlainText"><![CDATA[Dashboard Pages In  Acumatica ERP, a dashboard is a collection of widgets that is displayed on a dashboard page. You can         use dashboards to display information that is important for the business processes of your         organization on a single page in  Acumatica ERP. For more information on types of widgets, see  Dashboards and Widgets. You can create dashboard pages and place them in the workspaces (for the modern UI) or the         locations in the site map (for the classic UI) where they are most convenient for users who         could use the dashboards in their daily work. In this topic, you can find information about adding new dashboard pages, managing access         rights to dashboard pages, and resetting dashboards. Adding a New Dashboard Page You can add new dashboard pages by using         the   ([~/?ScreenId=SM208600|SM208600]) Dashboards (SM208600) form. A user who has access to this form can         add, remove, and modify the properties of any dashboards. The process of adding a new         dashboard page consists of the following steps: Creating a new dashboard page. Adding a link to the dashboard page to the appropriate workspace or workspaces (for the           modern UI) and specifying the location of this page in the site map (for the classic             UI). In the modern UI, the system adds links to new             dashboards to the  Data Views  workspace. You can add dashboard             links to necessary workspaces in the Menu Editing mode. For details, see  To Add a Link to a Workspace. Selecting the role for the dashboard owner. For details, see  Access Rights to Dashboards. If you will configure the dashboard that you are creating, you should select an owner role that you are assigned to. Otherwise, you will be working with your personal copy of the dashboard, and other users will not see any widgets that you add on the dashboard. Selecting the user roles that should be allowed to view the dashboard page. For details           on user roles, see  Role-Based Access. Optional: Providing users who may view the page (based on their user roles) with the           capability to add, modify, and delete widgets on the dashboard. You set this capability at           the dashboard level, and it applies to all user roles that can view the dashboard. Optional: Specifying whether the dashboard should be displayed in the  Acumatica mobile apps connected to your  Acumatica ERP site. If you or other employees of your organization want to add a Power BI tile widget on  Acumatica ERP dashboard, you need to register your  Acumatica ERP instance on Microsoft Azure for Power BI beforehand. For a detailed procedure, see              To Register Your Acumatica ERP Instance for Power BI. For details on adding a new dashboard, see  To Add a New Dashboard Page. After you have created the dashboard page, you populate it with widgets. For details       on working with widgets, see  Configuring Dashboards. Assigning Access Rights Capabilities to Dashboards Users who will work with dashboards can be given any of the following access rights         capabilities: Managing dashboard pages: Users with this capability can create new dashboard pages,           delete dashboard pages, set up access rights to dashboard pages, and populate the           dashboard pages with widgets. With regard to access rights to dashboards, these are the           most powerful users. Configuring an original dashboard: Users with this capability can modify widgets on an           original dashboard and reset all user copies to the original settings. These users are           regarded as dashboard owners. Viewing dashboards: Users with this capability can only view information on a dashboard.           These users are the least powerful dashboard users because they cannot modify widgets on a           dashboard. Personalizing dashboards: Users with this capability can view and modify widgets on           their copy of a dashboard.  For details on access rights to dashboards, see  Access Rights to Dashboards. Resetting Dashboard         Pages When you reset a dashboard, its widgets are replaced with the widgets from         the original dashboard.  Settings for predefined dashboards are taken from the System         company (for more information on System company, see  Support of Multiple Tenants). To reset a predefined dashboard, you         open the dashboard on the   ([~/?ScreenId=SM208600|SM208600]) Dashboards (SM208600) form and click            Reset to Predefined  on the form toolbar.  Settings for user         copies of dashboards that were created by you or your colleagues are taken from the original         dashboard. You can reset all user copies of the dashboard at once by opening the dashboard         on the   ([~/?ScreenId=SM208600|SM208600]) Dashboards (SM208600) form and clicking  Reset All           User Copies . Users who work with a copy of the dashboard can also reset       their copy. For details, see  Dashboards and Widgets.  ([~/?ScreenId=SM208600|SM208600]) ]]></column>
		</row>
		<row PageID="c04a636c-efec-4207-a602-da283cf260d8" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="5da6bacf-6463-cbc1-3aad-0b8b397d7524" RecordSourceID="22377">
			<column name="Content"><![CDATA[[anchor|#_06a72544-28dc-4216-8c78-4470e3b53c58]
In Acumatica ERP, you can allow users to manage dashboard pages, to view a dashboard, and to modify widgets on a dashboard. In this topic, you will read about access rights to dashboard pages. For more information about dashboard pages, see [HelpRoot_ReportingTools\CU__con_Dashboards|Dashboard Pages].{br}{TOC}[anchor|#_b9465986-4ef1-47d0-81bd-144939ec10fa]
==Access Rights for Managing Dashboard Pages==
When you want to allow users to manage dashboard pages, you need to assign them a user role with full access rights to the [HelpRoot_FormReference\SM_20_86_00|Dashboards] ([~/?ScreenId=SM208600|SM208600]) form. (For more information on access rights, see [HelpRoot_Administration\US__con_Access_Rights|User Access Rights].) Users with a role that has full access to the [HelpRoot_FormReference\SM_20_86_00|Dashboards] form can add and remove dashboards, set up access rights to dashboards for user roles, select a user role that will own a dashboard, change the locations of dashboards in the site map, and allow other users to modify dashboards.{br}

If you want a user who can manage a dashboard page to also be able to configure an original dashboard (that is, make changes that are visible to all users who can view the dashboard), you should assign this user the dashboard owner role. For more information, see [[#_7664131b-ac05-45ef-aca8-ff30927f8e29|Access Rights for Configuring Dashboards].[anchor|#_7664131b-ac05-45ef-aca8-ff30927f8e29]
==Access Rights for Configuring Dashboards==
An original dashboard can be configured by only a user with the role designated as the owner role of the dashboard. For predefined dashboards and dashboards created in previous versions of Acumatica ERP, the default owner role is the predefined role ''DashboardDesigner''. You can specify and change a dashboard owner role on the [HelpRoot_FormReference\SM_20_86_00|Dashboards] ([~/?ScreenId=SM208600|SM208600]) form. (For details, see [HelpRoot_ReportingTools\CU__how_Add_Dashboard|To Add a New Dashboard Page].){br}

A user with a dashboard owner role can design the dashboard from scratch: add and delete widgets, arrange widgets, and modify widget properties. A dashboard owner can also open the [HelpRoot_FormReference\SM_20_86_00|Dashboards] form and edit the dashboard properties if you provide the owner role with access to this form.[anchor|#_6a77a468-101c-4f80-8a4a-a6d5bcb19119]
==Access Rights for Viewing Dashboards==
For each dashboard, you can control which roles have the ability to view the dashboard by using the [HelpRoot_FormReference\SM_20_86_00|Dashboards] ([~/?ScreenId=SM208600|SM208600]) form. (For details, see [HelpRoot_ReportingTools\CU__how_Add_Dashboard|To Add a New Dashboard Page].){br}

Dashboards that were created by you or your colleagues can be located on any level of the site map. If a user does not have the access rights to view a dashboard, he or she will not see it on the user interface. For example, suppose that you have created a dashboard and placed it in the Distribution suite on the same level as the modules. For users who can view the dashboard, its name appears on the main menu with the names of the modules. Users who are not allowed to view the dashboard do not see this additional menu item. {br}

If a dashboard is located on a module level (that is, it is opened when a user clicks the module name in the navigation pane of the classic UI) and you do not allow a user to view this dashboard, he or she sees a help topic that corresponds to this module instead of the dashboard.{br}

The set of widgets that is displayed to the users who can view the dashboard depends on their access rights to the forms from which the widgets&rsquo; source data is taken. If access to the form is denied for particular users, they instead see a placeholder. For example, suppose that you added the following widgets to the home page dashboard: ''Bills to Approve'', which takes data from the [HelpRoot_FormReference\AP_50_20_00|Approve Bills for Payment] ([~/?ScreenId=AP502000|AP502000]) form, and ''Accounts Receivable Balances'', which takes data from the [HelpRoot_FormReference\AP_40_10_00|Vendor Summary] ([~/?ScreenId=AP401000|AP401000]) form. When users who do not have access to the [HelpRoot_FormReference\AP_50_20_00|Approve Bills for Payment] form log in to the system, they see only the ''Accounts Receivable Balances'' widget and do not see the ''Bills to Approve widget'' on the dashboard. If users have access rights for personalizing dashboards (see the next section), they can delete the hidden widget or change its properties. [anchor|#_2af3dc70-7707-45b6-ad2c-5c83d67b7f7f]
==Access Rights for Personalizing Dashboards==
For users who can view a dashboard, you can also control whether these users can personalize the dashboard—that is, configure and modify the widgets of the dashboard. To provide users with this capability, you need to select the '''Allow Users to Personalize''' check box on the [HelpRoot_FormReference\SM_20_86_00|Dashboards] ([~/?ScreenId=SM208600|SM208600]) form.{br}

When users modify a dashboard to meet their needs, they work with a dashboard copy. The copy is created automatically by the system when a user begins to modify any widget on the dashboard. Users can reset their copies to the original dashboard. For details, see [HelpRoot_GettingStarted\GS__mng_Dashboards|Configuring Dashboards]. You also can reset all user copies of the dashboard at once. For more information, see [HelpRoot_ReportingTools\CU__con_Dashboards|Dashboard Pages].
==Related Articles==
*[HelpRoot_GettingStarted\GS__mng_Dashboards|Configuring Dashboards]
*[HelpRoot_ReportingTools\CU__con_Dashboards|Dashboard Pages]
*[HelpRoot_ReportingTools\CU__how_Add_Dashboard|To Add a New Dashboard Page]
*[HelpRoot_FormReference\AP_50_20_00|Approve Bills for Payment] ([~/?ScreenId=AP502000|AP502000])
*[HelpRoot_FormReference\SM_20_86_00|Dashboards] ([~/?ScreenId=SM208600|SM208600])
*[HelpRoot_FormReference\AP_40_10_00|Vendor Summary] ([~/?ScreenId=AP401000|AP401000])]]></column>
			<column name="PlainText"><![CDATA[Access Rights to Dashboards In  Acumatica ERP, you can allow users to manage dashboard pages, to view a dashboard, and to modify         widgets on a dashboard. In this topic, you will read about access rights to dashboard pages.         For more information about dashboard pages, see  Dashboard Pages. Access Rights for Managing Dashboard Pages When you want to allow users to manage dashboard pages, you need to assign them a user role         with full access rights to the   ([~/?ScreenId=SM208600|SM208600]) Dashboards (SM208600) form. (For more         information on access rights, see  User Access Rights.) Users with a         role that has full access to the   ([~/?ScreenId=SM208600|SM208600]) Dashboards form can add and remove         dashboards, set up access rights to dashboards for user roles, select a user role that will         own a dashboard, change the locations of dashboards in the site map, and allow other users         to modify dashboards. If you want a user who can manage a dashboard page to also be able to configure an original         dashboard (that is, make changes that are visible to all users who can view the dashboard),         you should assign this user the dashboard owner role. For more information, see  Access Rights for Configuring Dashboards Access Rights for Configuring Dashboards. Access Rights for Configuring Dashboards An original dashboard can be configured by only a user with the role designated as the         owner role of the dashboard. For predefined dashboards and dashboards created in previous         versions of  Acumatica ERP, the default owner role is the predefined role  DashboardDesigner . You can specify         and change a dashboard owner role on the   ([~/?ScreenId=SM208600|SM208600]) Dashboards (SM208600) form.         (For details, see  To Add a New Dashboard Page.) A user with a dashboard owner role can design the dashboard from scratch: add and delete         widgets, arrange widgets, and modify widget properties. A dashboard owner can also open the             ([~/?ScreenId=SM208600|SM208600]) Dashboards form and edit the dashboard properties if you provide the         owner role with access to this form. Access Rights for Viewing Dashboards For each dashboard, you can control which roles have the ability to view the dashboard by         using the   ([~/?ScreenId=SM208600|SM208600]) Dashboards (SM208600) form. (For details, see  To Add a New Dashboard Page.) Dashboards that were created by you or your colleagues can be located on any level of the         site map. If a user does not have the access rights to view a dashboard, he or she will not         see it on the user interface. For example, suppose that you have created a dashboard and         placed it in the Distribution suite on the same level as the modules. For users who can view         the dashboard, its name appears on the main menu with the names of the modules. Users who         are not allowed to view the dashboard do not see this additional menu item.  If a dashboard is located on a module level (that is, it is opened when a user clicks the         module name in the navigation pane of the classic UI) and you do not allow a user to view         this dashboard, he or she sees a help topic that corresponds to this module instead of the         dashboard. The set of widgets that is displayed to the users who can view the dashboard depends on         their access rights to the forms from which the widgets' source data is taken. If access to         the form is denied for particular users, they instead see a placeholder. For example,         suppose that you added the following widgets to the home page dashboard:  Bills to           Approve , which takes data from the   ([~/?ScreenId=AP502000|AP502000]) Approve Bills for Payment (AP502000) form,         and  Accounts Receivable Balances , which takes data from the   ([~/?ScreenId=AP401000|AP401000]) Vendor Summary (AR401000) form. When users who do not have access to the             ([~/?ScreenId=AP502000|AP502000]) Approve Bills for Payment form log in to the system, they see only the  Accounts           Receivable Balances  widget and do not see the  Bills to Approve widget  on the         dashboard. If users have access rights for personalizing dashboards (see the next section),         they can delete the hidden widget or change its properties.  Access Rights for Personalizing Dashboards For users who can view a dashboard, you can also control whether these users can         personalize the dashboard—that is, configure and modify the widgets of the dashboard.         To provide users with this capability, you need to select the  Allow Users to           Personalize  check box on the   ([~/?ScreenId=SM208600|SM208600]) Dashboards (SM208600)         form. When users modify a dashboard to meet their needs, they work with a dashboard copy. The         copy is created automatically by the system when a user begins to modify any widget on the         dashboard. Users can reset their copies to the original dashboard. For details, see  Configuring Dashboards. You also can reset all user copies of the dashboard at         once. For more information, see  Dashboard Pages.  ([~/?ScreenId=AP502000|AP502000])  ([~/?ScreenId=SM208600|SM208600])  ([~/?ScreenId=AP401000|AP401000]) ]]></column>
		</row>
		<row PageID="cd2ce91f-4e48-41ac-86af-c823671c72bc" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="e4880213-2e83-40b6-748c-ed3ede698390" RecordSourceID="22377">
			<column name="Content"><![CDATA[
To add a new dashboard page, you use the [HelpRoot_FormReference\SM_20_86_00|Dashboards] ([~/?ScreenId=SM208600|SM208600]) form. For more information on managing dashboard pages, see [HelpRoot_ReportingTools\CU__con_Dashboards|Dashboard Pages].((({S:Hint}The ability to add a dashboard page can be restricted based on the level of access rights assigned to a user. For more information about the levels of access rights to dashboards, see [HelpRoot_ReportingTools\CU__con_Access_Rights_to_Dashboards|Access Rights to Dashboards].
)))
==To Add a New Dashboard Page==[anchor|#_1cfcb617-66bd-4554-9133-0bfc4ae7637c]
#Open the [HelpRoot_FormReference\SM_20_86_00|Dashboards] ([~/?ScreenId=SM208600|SM208600]) form by searching for or navigating to it. .
#On the form toolbar, click '''Add New Record'''.
#In the '''Name''' box, type the name of the new dashboard. It should be unique within the system, because it will be used as the ID of the dashboard.
#Specify the location of the dashboard page in the classic UI by doing one of the following:
#*In the '''Site Map Location''' box, select the node of the site map where the dashboard should be located.
#*Click '''Add New Node''' to create a separate node in the site map for the dashboard.
#Specify the location of the dashboard page in the modern UI by doing the following:
##In the '''Workspace''' box, select a workspace from which the dashboard can be accessed.
##In the '''Category''' box, select a category under which the dashboard will be displayed in the selected workspace.
#Optional: In the '''Owner Role''' box, select user role to be an owner of the dashboard.
#If you want to permit other users who have access to the dashboard to create personal copies of the dashboard, select the '''Allow Users to Personalize''' check box.
#If you want the dashboard to be displayed in the Acumatica mobile apps connected to your Acumatica ERP site, select the '''Expose on Mobile''' check box.
#In the '''Visible to''' table, set up the access rights for the user roles to the dashboard by selecting or clearing the check box in the corresponding row.
#On the form toolbar, click '''Save'''.

The dashboard page is added to the location you have specified.]]></column>
			<column name="PlainText"><![CDATA[To Add a New Dashboard Page To add a new dashboard page, you use the   ([~/?ScreenId=SM208600|SM208600]) Dashboards (SM208600) form. For         more information on managing dashboard pages, see  Dashboard Pages. The ability to add a dashboard page can be restricted based on the level of           access rights assigned to a user. For more information about the levels of access rights           to dashboards, see  Access Rights to Dashboards. To Add a New Dashboard Page Open the   ([~/?ScreenId=SM208600|SM208600]) Dashboards (SM208600) form by searching for or navigating           to it. . On the form toolbar, click  Add New Record . In the  Name  box, type the name of the new dashboard. It should be           unique within the system, because it will be used as the ID of the dashboard. Specify the location of the dashboard page in the classic UI by doing one of the             following: In the  Site Map Location  box, select the node of the site map               where the dashboard should be located. Click  Add New Node  to create a separate node in the site map               for the dashboard. Specify the location of the dashboard page in the modern UI by doing the following: In the  Workspace  box, select a workspace from which the               dashboard can be accessed. In the  Category  box, select a category under which the               dashboard will be displayed in the selected workspace. Optional: In the  Owner Role  box, select user role to be an owner           of the dashboard. If you want to permit other users who have access to the dashboard to create personal           copies of the dashboard, select the  Allow Users to Personalize            check box. If you want the dashboard to be displayed in the  Acumatica mobile apps connected to your  Acumatica ERP site, select the  Expose on Mobile  check box. In the  Visible to  table, set up the access rights for the user           roles to the dashboard by selecting or clearing the check box in the corresponding           row. On the form toolbar, click  Save . The dashboard page is added to the location you have         specified. ]]></column>
		</row>
		<row PageID="0b174aab-ae96-4b7d-aa8d-df83bdb06292" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="76b7fd5e-30fe-c1c8-cb91-7d97c2e1bc62" RecordSourceID="22377">
			<column name="Content"><![CDATA[To embed a Power BI tile on a dashboard in Acumatica ERP, you should first register your Acumatica ERP instance on Microsoft Azure for Power BI to obtain the client ID and client secret parameters. When you have obtained the parameters for your Acumatica ERP you can add Power BI tile on a dashboard. For information on adding Power BI tile widgets, see [HelpRoot_Interface\DB__con_PowerBI|Power BI Tile Widgets].((({S:Hint}Integrating Microsoft Power BI reports into Acumatica ERP to be used as Acumatica ERP forms is a different type of interaction between Acumatica ERP and Microsoft Power BI that is described in [HelpRoot_ReportingTools\RP__Integration_Power_BI|Managing Power BI Integration] and [HelpRoot_ReportingTools\RP__how_integrations_externalApps|To Integrate an External Application] topics.
)))[anchor|#_aef07875-e96e-4a31-acb9-c1b8b7c00002]((({S:Warn}This topic describes the configuration of third-party software. Please note the following:[anchor|#_1df7d54d-9272-48c4-95f2-91fc455ef823]
*The procedure below is designed for the most common usage scenarios. If you are implementing a more complicated scenario and you encounter difficulties, contact Acumatica ERP technical support.
*The vendor of the third-party software may change the user interface and settings. Therefore, the screen elements and setting names you see may differ from the ones described in the procedure. 
*The procedure will be updated each time information is made available about new common scenarios and changes in the user interface and settings.
)))
==Before You Begin==[anchor|#_9e3c3f89-643b-47d4-8112-f1ed9af71c0a]
*Be sure your company has an Azure Active Directory (AD) instance configured. For more information, see [http://azure.microsoft.com/en-us/services/active-directory/|Azure Active Directory].
*Make sure you have at least one configured Power BI dashboard with tiles that you want to embed in Acumatica ERP. For details, see [https://powerbi.microsoft.com/|Power BI].

==To Register Your Acumatica ERP Instance for Power BI==
You can register your Acumatica ERP instance for Power BI in one of the following ways:[anchor|#_d03603bb-cf8c-4876-a202-98083799720b]
*By using the Power BI App Registration Tool. This way is very simple and does not require special knowledge of Microsoft Azure. For details, see [[#_681ea30a-0755-42c8-bf9c-67c888d64b9d|To Register Your Acumatica ERP Instance with Power BI App Registration Tool].
*By using the Microsoft Azure Management Portal. This way requires knowledge of the user interface of Microsoft Azure Management Portal and provides more advanced tools for application registration. We recommend that you use this way only if you are familiar with Microsoft Azure. For details, see [[#_b23fad17-5e59-40be-b202-fa5e7519726f|To Register Your Instance with Windows Azure Management Portal]

After you register your Acumatica ERP instance for Power BI, you can add Power BI tiles on a dashboard, as described in [HelpRoot_GettingStarted\DB__how_Adding_PowerBI|To Add a Power BI Tile Widget].[anchor|#_681ea30a-0755-42c8-bf9c-67c888d64b9d]
==To Register Your Acumatica ERP Instance with Power BI App Registration Tool==
[anchor|#_2c44b71b-6d6c-4d24-8fc4-f1d841e4a862]
#Open [https://dev.powerbi.com/apps|Power BI App Registration Tool].
#In the '''Step 1 Login to your Power BI account''' section, click '''Sign in with your existing account''' (see the following screenshot), and type your Azure AD credentials. You will see your name in the '''Welcome''' line.[anchor|#_619fc043-bdc1-4408-bf09-f9ee10661b9f][image:UserGuide/Images/DB__how_PowerBI_Widget_Register_Step1.png|popup|Logging in to your Power BI account|400px]
#In the '''Step 2 Tell us about your app''' section, enter the following parameters, as shown in the screenshot below:
##'''App Name''': Type a name for your Acumatica ERP instance.
##'''App Type''': Select ''Server-side Web''.
##'''Redirect URL''': Enter the link to your Acumatica ERP site in the following format: ''https://&lt;full URL of your Acumatica ERP site&gt;/powerBI/auth'' (for example, ''https://app.site.net/powerBI/auth'').
##:((({S:Hint}This URL (''https://app.site.net/powerBI/auth'') is case sensitive. 
)))
##'''Home Page''': Enter the full URL of your Acumatica ERP instance (for example, ''https://app.site.net/instance&#95;name/'').[anchor|#_4bed3cf7-4d68-4988-a1f9-75f2f958a257][image:UserGuide/Images/DB__how_PowerBI_Widget_Register_Step2.png|popup|Entering app parameters|400px]
#In the '''Step 3 Choose APIs to access''' section, select all check boxes, as shown in the following screenshot.[anchor|#_0ec38de7-7608-4521-ba90-6e7f62269f7a][image:UserGuide/Images/DB__how_PowerBI_Widget_Register_Step3.png|popup|Choosing APIs to access|400px]
#In the '''Step 4 Register your app''' section, click '''Register App'''. After your Acumatica ERP instance is registered, you will see the client ID and client secret parameters in the corresponding boxes (see the screenshot below).[anchor|#_0b3e1afd-4ed2-4284-b20d-7615c45141ce][image:UserGuide/Images/DB__how_PowerBI_Widget_Register_Step4.png|popup|Registering your app|400px]
#Copy the client ID and client secret values for later retrieval.
[anchor|#_b23fad17-5e59-40be-b202-fa5e7519726f]
==To Register Your Acumatica ERP Instance with Windows Azure Management Portal==[anchor|#_18c0eda3-7594-47d5-94c0-bbb1f56a13fc]
#Sign in to the [https://portal.azure.com|Windows Azure portal].
#Optional: Follow the instructions described in Steps 2–8 in [HelpRoot_Integration\US__how_AzureAD_Registering_with_Azure|To Register Your Acumatica ERP Instance on Windows Azure]. If you have integrated your Acumatica ERP instance with Microsoft Azure Active Directory previously, you can skip this step because you already have the client ID and client secret required for configuring a Power BI tile widget.
#Specify permissions for Power BI Service as follows:
##In the '''Settings''' pane, click '''Required permissions'''.
##On the '''Required permissions''' pane toolbar, click '''Add'''.
##On the '''Add API access''' pane, click ''Select an API''.
##On the '''Select an API''' pane, select ''Power BI Service'' and click '''Select'''.
##In the '''Delegated Permissions''' section of the '''Enable Access''' pane, select the following permissions for Power BI Service:
##*''View users Groups''
##* ''View all Reports (preview)''
##* ''Read and Write all Datasets''
##* ''View all Dashboards (preview)''
#Click '''Save''' to apply changes.
]]></column>
			<column name="PlainText"><![CDATA[To Register Your  Acumatica ERP Instance for Power BI To embed a Power BI tile on a dashboard in  Acumatica ERP, you should first register your  Acumatica ERP instance on Microsoft Azure for Power BI to obtain the client ID and client secret             parameters. When you have obtained the parameters for your  Acumatica ERP you can add Power BI tile on a dashboard. For information on adding Power BI tile             widgets, see  Power BI Tile Widgets. Integrating                 Microsoft Power BI reports into  Acumatica ERP to be used as  Acumatica ERP forms is a different type of interaction between  Acumatica ERP and Microsoft Power BI that is described in  Managing Power BI Integration and  To Integrate an External Application topics. This topic describes the             configuration of third-party software. Please note the following: The procedure below is designed for the most common usage scenarios. If you are                     implementing a more complicated scenario and you encounter difficulties, contact                          Acumatica ERP technical support. The vendor of the third-party software may change the user interface and                     settings. Therefore, the screen elements and setting names you see may differ                     from the ones described in the procedure.  The procedure will be updated each time information is made available about new                     common scenarios and changes in the user interface and settings. Before You Begin Be sure your company has an Azure Active Directory (AD) instance configured. For                     more information, see  Azure Active Directory Azure Active Directory. Make sure you have at least one configured Power BI dashboard with tiles that                     you want to embed in  Acumatica ERP. For details, see  Power BI Power BI. To Register Your  Acumatica ERP Instance for Power BI You can register your  Acumatica ERP instance for Power BI in one of the following ways: By using the Power BI App Registration Tool. This way is very simple and                         does not require special knowledge of Microsoft Azure. For details, see                              To Register Your Acumatica ERP Instance with Power BI App Registration                 Tool To Register Your Acumatica ERP Instance with Power BI App Registration Tool. By using the Microsoft Azure Management Portal. This way requires knowledge                         of the user interface of Microsoft Azure Management Portal and provides more                         advanced tools for application registration. We recommend that you use this                         way only if you are familiar with Microsoft Azure. For details, see  To Register Your  Instance with Windows Azure Management Portal To Register Your Instance with Windows Azure Management PortalAfter you register your  Acumatica ERP instance for Power BI, you can add Power BI tiles on a dashboard, as described in                      To Add a Power BI Tile Widget. To Register Your Acumatica ERP Instance with Power BI App Registration                 Tool Open  Power BI App Registration Tool Power BI App Registration Tool. In the  Step 1 Login to your Power BI account  section,                         click  Sign in with your existing account  (see the                         following screenshot), and type your Azure AD credentials. You will see your                         name in the  Welcome  line. Logging in to your Power BI account In the  Step 2 Tell us about your app  section, enter                         the following parameters, as shown in the screenshot below: App Name : Type a name for your  Acumatica ERP instance. App Type : Select  Server-side Web . Redirect URL : Enter the link to your  Acumatica ERP site in the following format:  https://<full URL of your  Acumatica ERP site>/powerBI/auth  (for example,                                      https://app.site.net/powerBI/auth ). This URL                                         ( https://app.site.net/powerBI/auth ) is case                                     sensitive.  Home Page : Enter the full URL of your  Acumatica ERP instance (for example,                                  https://app.site.net/instance_name/ ). Entering app parameters In the  Step 3 Choose APIs to access  section, select                         all check boxes, as shown in the following screenshot. Choosing APIs to access In the  Step 4 Register your app  section, click                              Register App . After your  Acumatica ERP instance is registered, you will see the client ID and client secret                         parameters in the corresponding boxes (see the screenshot below). Registering your app Copy the client ID and client secret values for later retrieval. To Register Your  Acumatica ERP Instance with Windows Azure Management Portal Sign in to the  Windows Azure portal Windows Azure portal. Optional: Follow the instructions described in Steps 2–8 in  To Register Your Acumatica ERP Instance on Windows Azure. If you                     have integrated your  Acumatica ERP instance with Microsoft Azure Active Directory previously, you can skip this                     step because you already have the client ID and client secret required for                     configuring a Power BI tile widget. Specify permissions for Power BI Service as follows: In the  Settings  pane, click  Required                                 permissions . On the  Required permissions  pane toolbar, click                                  Add . On the  Add API access  pane, click  Select an                                 API . On the  Select an API  pane, select  Power BI                                 Service  and click  Select . In the  Delegated Permissions  section of the                                  Enable Access  pane, select the following                             permissions for Power BI Service: View users Groups View all Reports (preview) Read and Write all Datasets View all Dashboards (preview) Click  Save  to apply changes. ]]></column>
		</row>
		<row PageID="bad301b5-ad56-4399-943e-f5b4a1e351b3" Language="en-US" PageRevisionID="1" Content="&#xA;You can build Microsoft Power BI reports into Acumatica ERP so that users can have these reports displayed as Acumatica ERP forms at hand.{br}&#xA;&#xA;In this part of the guide, you will read about configuring and managing integration with external applications.&#xA;==Related Articles==&#xA;*[HelpRoot_ReportingTools\SM__con_Integration_External_Applications|Integration with External Applications]&#xA;*[HelpRoot_ReportingTools\RP__how_integrations_externalApps|To Integrate an External Application]&#xA;*[HelpRoot_ReportingTools\RP__how_integrations_EXTtoAppResources|To Add an Integrated External Application Resource to Acumatica Site Map]" PlainText="Managing Power BI Integration You can build Microsoft Power BI reports into  Acumatica ERP     so that users can have these reports displayed as  Acumatica ERP     forms at hand. In this part of the guide, you will read about configuring and managing integration with     external applications. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="6d09be79-024e-351f-d34c-24aa33281c98" RecordSourceID="22377" />
		<row PageID="acfa8a09-c6de-456c-9ea9-29a25fd3d932" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="44a17095-053a-2ed8-cf21-2b8516415697" RecordSourceID="22377">
			<column name="Content"><![CDATA[
If you use Microsoft Power BI to visually display reports generated in Acumatica ERP, you can embed these Microsoft Power BI reports into Acumatica ERP. With this integration, users of your Acumatica ERP instance will have at hand the information that they need for their work.{br}

In this topic, you will find information about the types of integration with Microsoft Power BI, the configuration steps for integration with Microsoft Power BI, and the refreshing of access tokens.((({S:Hint}Embedding Power BI tiles in an Acumatica ERP dashboard is a different type of interaction between Acumatica ERP and Microsoft Power BI that is described in [HelpRoot_ReportingTools\DB__how_Registering_for_PowerBI|To Register Your Acumatica ERP Instance for Power BI] and [HelpRoot_Interface\DB__con_PowerBI|Power BI Tile Widgets] topics.
))){br}{TOC}
==Types of Integration with Microsoft Power BI==
In Acumatica ERP, the following types of integration with Microsoft Power BI are supported:[anchor|#_5ebf2283-7ad5-496a-ae7c-5f748e840b14]
*''Power BI'': This type of integration is intended for reports created in the Microsoft Power BI. These reports are kept in a user&rsquo;s personal workspace. Acumatica ERP works with these reports on behalf of this user and uses the OAuth 2.0 protocol for integration. The configuration steps are described in [[#_6072cef1-6809-4088-ade7-44ca6758f433|Configuration Steps for Power BI]. For this integration type, you need to refresh access tokens periodically, as described in [[#_78375a77-33e9-4a5d-bc3e-4a62a741de99|Access Token Refreshment].
*''Power BI Embedded Workspace (Obsolete)'': Power BI Workspace Collections service is being retired. We recommend that by June 30, 2018, you migrate to Power BI Embedded, so that you can keep using the embedded analytics capabilities you’re familiar with, and take advantage of additional Power BI Embedded features. For more information, see [https://azure.microsoft.com/email/?destination=%2Fen-us%2Fservices%2Fpower-bi-embedded%2F&p=bXNnSWQ9N2EwMTU5ODMtNDZmZC00MDAxLWJkMzItMjc3YmVjNzJiYTQyJmpvYklkPTU3MzA4Y2E5LTc3ZDQtNGMwZS1iOTg0LTA4ODU2YjVjM2UxZCZzdWJzY3JpcHRpb25JZD0mZW1haWxJZD1TZXJ2aWNlTm90aWZpY2F0aW9ucy9Qb3dlckJJV29ya3NwYWNlUmV0aXJlbWVudCZldnRJZD1zZXJ2aWNlLW5vdGlmaWNhdGlvbi1wb3dlcmJpLXdvcmtzcGFjZS1yZXRpcmVtZW50JmxpbmtOYW1lPXBvd2VyLWJpLWVtYmVkZGVkJnNvdXJjZT1hZW8=|Power BI Embedded] and [https://azure.microsoft.com/email/?destination=https%3A%2F%2Fdocs.microsoft.com%2Fen-us%2Fazure%2Fpower-bi-embedded%2Fmigrate-from-power-bi-workspace-collections&p=bXNnSWQ9N2EwMTU5ODMtNDZmZC00MDAxLWJkMzItMjc3YmVjNzJiYTQyJmpvYklkPTU3MzA4Y2E5LTc3ZDQtNGMwZS1iOTg0LTA4ODU2YjVjM2UxZCZzdWJzY3JpcHRpb25JZD0mZW1haWxJZD1TZXJ2aWNlTm90aWZpY2F0aW9ucy9Qb3dlckJJV29ya3NwYWNlUmV0aXJlbWVudCZldnRJZD1zZXJ2aWNlLW5vdGlmaWNhdGlvbi1wb3dlcmJpLXdvcmtzcGFjZS1yZXRpcmVtZW50JmxpbmtOYW1lPW1pZ3JhdGUtZnJvbS1wb3dlci1iaS13b3Jrc3BhY2UtY29sbGVjdGlvbnMmc291cmNlPWFlbw==|How to migrate to Power BI Embedded].
*''Power BI Embedded '': With this type of integration, the Microsoft Power BI Embedded tool is used for the integration of Microsoft Power BI reports. For the configuration steps, see [[#_e1423d93-eb7d-456c-96ca-596d3183ed79|Configuration Steps for Power BI Embedded].

You can use either of these types for adding Microsoft Power BI reports in Acumatica ERP.[anchor|#_6072cef1-6809-4088-ade7-44ca6758f433]
==Configuration Steps for Power BI==
Before you integrate your Acumatica ERP instance with Microsoft Power BI, make sure of the following:[anchor|#_44ff092e-184a-4247-b805-09f491d63d4a]
*Your organization should be signed up for Microsoft Power BI. If your organization uses Azure Active Directory (AD) you can use your Azure AD account to sign in to Microsoft Power BI.
*You have configured a Power BI report that you want to integrate in Acumatica ERP. For details, see [https://powerbi.microsoft.com/|Power BI].

To integrate your Acumatica ERP instance with Microsoft Power BI, you do the following:[anchor|#_8e1ee907-beaa-4536-95eb-8d5248566be4]
#You obtain a client ID and client secret for your Acumatica ERP instance. For this procedure, see [HelpRoot_ReportingTools\DB__how_Registering_for_PowerBI|To Register Your Acumatica ERP Instance for Power BI].
#You set up integration on the [HelpRoot_FormReference\SM_30_10_00|External Applications] ([~/?ScreenId=SM301000|SM301000]) form.
#You sign in to the Microsoft Power BI website with the credentials of a user who is an owner of a report that you want to integrate in Acumatica ERP.
#You add a report from the integrated Microsoft Power BI workspace in Acumatica ERP on the [HelpRoot_FormReference\SM_30_10_10|Application Resources] ([~/?ScreenId=SM301010|SM301010]) form.
#You give user roles access rights to the integrated report on the [HelpRoot_FormReference\SM_30_10_10|Application Resources] form.

After you perform these steps, the Microsoft Power BI report you have added appears on the selected site map location and is visible to users with the defined roles.[anchor|#_e1423d93-eb7d-456c-96ca-596d3183ed79]
==Configuration Steps for Power BI Embedded==
Before you use Microsoft Power BI Embedded for integrating Microsoft Power BI reports with your Acumatica ERP instance, you should make sure of the following:[anchor|#_5a43913c-b3e0-48ae-b534-3fac78b566ab]
*Your organization should have an Azure Active Directory (AD) instance configured. For more information, see [http://azure.microsoft.com/en-us/services/active-directory/|Azure Active Directory].
*You have imported a Power BI report to Windows Azure. For details, see [https://docs.microsoft.com/en-us/azure/power-bi-embedded/get-started|Get started with Power BI Embedded].

To integrate Microsoft Power BI reports with your Acumatica ERP instance by using Microsoft Power BI Embedded, you do the following:[anchor|#_a02108a6-b925-4058-888b-8a8965095314]
#You create a capacity for a Power BI report that you want to integrate with Acumatica ERP on the Windows Azure portal. For details, see [https://docs.microsoft.com/en-us/power-bi/developer/azure-pbie-create-capacity|Create Power BI Embedded capacity in the Azure portal].
#You set up integration on the [HelpRoot_FormReference\SM_30_10_00|External Applications] ([~/?ScreenId=SM301000|SM301000]) form. For more details, see [HelpRoot_ReportingTools\RP__how_integrations_externalApps|To Integrate an External Application]
#You add a report from the integrated Power BI capacity in Acumatica ERP on the [HelpRoot_FormReference\SM_30_10_10|Application Resources] ([~/?ScreenId=SM301010|SM301010]) form. For more details, see [HelpRoot_ReportingTools\RP__how_integrations_EXTtoAppResources|To Add an Integrated External Application Resource to Acumatica Site Map]
#You assign user roles access rights to the integrated report on the [HelpRoot_FormReference\SM_30_10_10|Application Resources] form.

After you perform these steps, the Microsoft Power BI report you added appears on the specified site map location and is visible to users with the defined roles.[anchor|#_78375a77-33e9-4a5d-bc3e-4a62a741de99]
==Access Token Refreshment==
When you integrate an external application in Acumatica ERP by using the OAuth 2.0 protocol, access tokens are generated by the application. These tokens have a short lifetime for security reasons. The tokens are refreshed automatically if Acumatica ERP connects to the application before the expiration date and time. If the application is called from Acumatica ERP rarely and the access token becomes expired, you need to refresh it to continue using the integrated resources of this application. You use the [HelpRoot_FormReference\SM_50_10_00|Refresh Application Access Tokens] ([~/?ScreenId=SM501000|SM501000]) form to refresh tokens that are expired or about to expire. You can refresh tokens manually or schedule this process. We recommend that tokens be refreshed at least once a day.((({S:Hint}You need to refresh tokens only for the ''Power BI'' integration type. Authentication tokens used by the ''Power BI Embedded'' integration type do not require manual refreshment.
)))
==Related Articles==
*[HelpRoot_ReportingTools\DB__how_Registering_for_PowerBI|To Register Your Acumatica ERP Instance for Power BI]
*[HelpRoot_FormReference\SM_30_10_10|Application Resources] ([~/?ScreenId=SM301010|SM301010])
*[HelpRoot_FormReference\SM_30_10_00|External Applications] ([~/?ScreenId=SM301000|SM301000])
*[HelpRoot_FormReference\SM_50_10_00|Refresh Application Access Tokens] ([~/?ScreenId=SM501000|SM501000])]]></column>
			<column name="PlainText"><![CDATA[Integration with External Applications If you use Microsoft Power BI to visually display reports generated in  Acumatica ERP, you can embed these Microsoft Power BI reports into  Acumatica ERP. With this integration, users of your  Acumatica ERP instance will have at hand the information that they need for their work. In this topic, you will find information about the types of integration with Microsoft         Power BI, the configuration steps for integration with Microsoft Power BI, and the         refreshing of access tokens. Embedding Power BI tiles in an  Acumatica ERP dashboard is a different type of  interaction between  Acumatica ERP and Microsoft Power BI that is described in  To Register Your Acumatica ERP Instance for Power BI and  Power BI Tile Widgets         topics. Types of Integration with Microsoft Power BI In  Acumatica ERP, the following types of integration with Microsoft Power BI are supported: Power BI : This type of integration is intended for reports created in the           Microsoft Power BI. These reports are kept in a user's personal workspace.  Acumatica ERP works with these reports on behalf of this user and uses the OAuth 2.0 protocol for           integration. The configuration steps are described in  Configuration Steps for Power BI Configuration Steps for Power BI. For this integration type, you need to refresh access tokens           periodically, as described in  Access Token Refreshment Access Token Refreshment. Power BI Embedded Workspace (Obsolete) : Power BI Workspace Collections service is           being retired. We recommend that by June 30, 2018, you migrate to Power BI Embedded, so           that you can keep using the embedded analytics capabilities you’re familiar with, and take           advantage of additional Power BI Embedded features. For more information, see  Power BI Embedded Power BI Embedded and  How to migrate to Power BI Embedded How to migrate to Power BI Embedded. Power BI Embedded  : With this type of integration, the Microsoft Power BI           Embedded tool is used for the integration of Microsoft Power BI reports. For the           configuration steps, see  Configuration Steps for Power BI Embedded Configuration Steps for Power BI Embedded. You can use either of these types for adding Microsoft Power BI reports in  Acumatica ERP. Configuration Steps for Power BI Before you integrate your  Acumatica ERP instance with Microsoft Power BI, make sure of the following: Your organization should be signed up for Microsoft Power BI. If your organization uses Azure Active Directory (AD) you can use your Azure AD account to sign in to Microsoft Power BI. You have configured a Power BI report that you want to integrate in  Acumatica ERP. For details, see  Power BI Power BI. To integrate your  Acumatica ERP instance with Microsoft Power BI, you do the following: You obtain a client ID and client secret for your  Acumatica ERP instance. For this procedure, see  To Register Your Acumatica ERP Instance for Power BI. You set up integration on the   ([~/?ScreenId=SM301000|SM301000]) External Applications (SM301000) form. You sign in to the Microsoft Power BI website with the credentials of a user who is an owner of a report that you want to integrate in  Acumatica ERP. You add a report from the integrated Microsoft Power BI workspace in  Acumatica ERP on the   ([~/?ScreenId=SM301010|SM301010]) Application Resources (SM301010) form. You give user roles access rights to the integrated report on the   ([~/?ScreenId=SM301010|SM301010]) Application Resources form. After you perform these steps, the Microsoft Power BI report you have added appears on the selected site map location and is visible to users with the defined roles. Configuration Steps for Power BI Embedded Before you use Microsoft Power BI Embedded for integrating Microsoft Power BI reports with         your  Acumatica ERP instance, you should make sure of the following: Your organization should have an Azure Active Directory (AD) instance configured. For           more information, see  Azure Active Directory Azure Active Directory. You have imported a Power BI report to Windows Azure. For details, see  Get started with Power BI Embedded Get started with Power BI Embedded. To integrate Microsoft Power BI reports with your  Acumatica ERP instance by using Microsoft Power BI Embedded, you do the following: You create a capacity for a Power BI report that you want to integrate with  Acumatica ERP on the Windows Azure portal. For details, see  Create Power BI Embedded capacity in the Azure             portal Create Power BI Embedded capacity in the Azure portal. You set up integration on the   ([~/?ScreenId=SM301000|SM301000]) External Applications (SM301000) form. For more           details, see  To Integrate an External ApplicationYou add a report from the integrated Power BI capacity in  Acumatica ERP on the   ([~/?ScreenId=SM301010|SM301010]) Application Resources (SM301010) form. For more details, see  To Add an Integrated External Application Resource to Acumatica Site MapYou assign user roles access rights to the integrated report on the   ([~/?ScreenId=SM301010|SM301010]) Application Resources form. After you perform these steps, the Microsoft Power BI report you added appears on the         specified site map location and is visible to users with the defined roles. Access Token Refreshment When you integrate an external application in  Acumatica ERP by using the OAuth 2.0 protocol, access tokens are generated by the application. These         tokens have a short lifetime for security reasons. The tokens are refreshed automatically if            Acumatica ERP connects to the application before the expiration date and time. If the application is         called from  Acumatica ERP rarely and the access token becomes expired, you need to refresh it to continue using the         integrated resources of this application. You use the   ([~/?ScreenId=SM501000|SM501000]) Refresh Application Access Tokens         (SM501000) form to refresh tokens that are expired or about to expire. You can refresh         tokens manually or schedule this process. We recommend that tokens be refreshed at least         once a day. You need to refresh tokens only for the  Power BI  integration type. Authentication         tokens used by the  Power BI Embedded  integration type do not require manual         refreshment.  ([~/?ScreenId=SM301010|SM301010])  ([~/?ScreenId=SM301000|SM301000])  ([~/?ScreenId=SM501000|SM501000]) ]]></column>
		</row>
		<row PageID="c367a962-0e04-4ba6-b823-b809f9c5432c" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="bd764edd-19d8-7956-f65a-f148bfb83fa2" RecordSourceID="22377">
			<column name="Content"><![CDATA[To integrate an external with Acumatica ERP, you use [HelpRoot_FormReference\SM_30_10_00|External Applications] ([~/?ScreenId=SM301000|SM301000]) form. For more information about integrations with external applications, see [HelpRoot_ReportingTools\SM__con_Integration_External_Applications|Integration with External Applications].
==To Integrate an External Application==[anchor|#_ce62f9cf-ad3e-48d5-a913-b5982eac2ee2]
# Navigate to [HelpRoot_FormReference\SM_30_10_00|External Applications] ([~/?ScreenId=SM301000|SM301000]) form.
#In the '''Application ID''' box, leave default value. 
#:((({S:Hint}The unique identifier of the application integration is generated automatically by the system.
)))
#In the '''Type''' box, you select the type of application to be used for the integration..
#In the '''Application Name''' box, you type a name that will be displayed in Acumatica ERP.
#In the '''Client ID''' box, you type the client ID that you obtain during registration of your Acumatica ERP instance on the external application side.
#In the '''Client Secret''' box, you type the client secret that you have obtained during the registration of your Acumatica ERP instance on the external application side.
#On the form toolbar, click '''Save'''.
#On the form toolbar, click '''Sign In'''.
#:((({S:Hint}The '''Bearer''' and '''Expires On (UTC)''' boxes are populated automatically. For more information, see [HelpRoot_FormReference\SM_30_10_00|Authentication Tokens Section].
)))
]]></column>
			<column name="PlainText"><![CDATA[To Integrate an External Application To integrate an external with  Acumatica ERP, you use   ([~/?ScreenId=SM301000|SM301000]) External Applications (SM301000) form. For more information about             integrations with external applications, see  Integration with External Applications. To Integrate an External Application  Navigate to   ([~/?ScreenId=SM301000|SM301000]) External Applications (SM301000) form. In the  Application ID  box, leave default value.  The                         unique identifier of the application integration is generated automatically                         by the system. In the  Type  box, you select the type of application to be                     used for the integration.. In the  Application Name  box, you type a name that will be                     displayed in  Acumatica ERP. In the  Client ID  box, you type the client ID that you                     obtain during registration of your  Acumatica ERP instance on the external application side. In the  Client Secret  box, you type the client secret that                     you have obtained during the registration of your  Acumatica ERP instance on the external application side. On the form toolbar, click  Save . On the form toolbar, click  Sign In . The  Bearer  and  Expires On                                 (UTC)  boxes are populated automatically. For more                             information, see   ([~/?ScreenId=SM301000|SM301000]) Authentication Tokens Section Authentication Tokens Section. ]]></column>
		</row>
		<row PageID="e51dc7e9-be5b-46b1-960f-fc1c3be00553" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="4029ae59-eff9-e8c8-980f-f4a53cb3da71" RecordSourceID="22377">
			<column name="Content"><![CDATA[To add an integrated an external application to be used as Acumatica ERP form, you use [HelpRoot_FormReference\SM_30_10_10|Application Resources] ([~/?ScreenId=SM301010|SM301010]) form. For more information about integrations with external applications, see [HelpRoot_ReportingTools\SM__con_Integration_External_Applications|Integration with External Applications].
==To Add Integrated Application to Acumatica Site Map==[anchor|#_c531fa7d-7bfd-439b-831b-8a5241a5dbec]
#Navigate to [HelpRoot_FormReference\SM_30_10_10|Application Resources] ([~/?ScreenId=SM301010|SM301010]) form.
#In the '''Application ID''' box, you select an integration with an external application that contains a resource to be added in Acumatica ERP.
#In the '''Site Map Title''' box, you type the name of the resource page to be displayed on the site map.
#In the '''Site Map Location''' box, you specify the location of the resource page on the site map.
#:((({S:Hint}Other boxes are populated automatically, based on the values you specified. The '''Screen ID''' box displays the identifier of resource page on the site map. The Workspace and Category boxes are populated with the default values for the application resources. For details see, [HelpRoot_Interface\UIG__con_New_UI_Categories_Workspaces|Categories and Workspaces for Entities of Specific Forms].
)))
#Optional: In the table below, you specify the access rights level of each user role for the selected resource. You can select one of the following access rights levels:
#*''Not Set'': Allows all roles to have access to the suite or the module until the ''Revoked'' or ''Granted'' access level to the suite or module is set for at least one role. After that, a role with this level is denied access to the suite or module.
#*''Revoked'': Denies the role access to the resource page; for users with the role, the resource page does not appear on the screen.
#*''Granted'': Allows the role access to the resource page.
#Click '''Save''' on the form toolbar.
#On the form toolbar, click '''View Resource '''to displays the Acumatica ERP page with the external application resource selected on the form. 
#:((({S:Hint}You can click this button before selecting a site map location to see how the resource looks in Acumatica ERP.
)))
]]></column>
			<column name="PlainText"><![CDATA[To Add an Integrated External Application Resource to  Acumatica Site Map To add an integrated an external application to be used as  Acumatica ERP form, you use   ([~/?ScreenId=SM301010|SM301010]) Application Resources (SM301010) form. For more information             about integrations with external applications, see  Integration with External Applications. To Add Integrated Application to  Acumatica Site Map Navigate to   ([~/?ScreenId=SM301010|SM301010]) Application Resources (SM301010) form. In the  Application ID  box, you select an integration with                     an external application that contains a resource to be added in  Acumatica ERP. In the  Site Map Title  box, you type the name of the                     resource page to be displayed on the site map. In the  Site Map Location  box, you specify the location of                     the resource page on the site map. Other boxes are populated automatically,                         based on the values you specified. The  Screen ID  box                         displays the identifier of resource page on the site map. The Workspace and                         Category boxes are populated with the default values for the application                         resources. For details see,  Categories and Workspaces for Entities of Specific Forms. Optional: In the table below, you specify the access rights level of each user                     role for the selected resource. You can select one of the following access                     rights levels: Not Set : Allows all roles to have access to the suite or the                             module until the  Revoked  or  Granted  access level to the                             suite or module is set for at least one role. After that, a role with                             this level is denied access to the suite or module. Revoked : Denies the role access to the resource page; for users                             with the role, the resource page does not appear on the screen. Granted : Allows the role access to the resource page. Click  Save  on the form toolbar. On the form toolbar, click  View Resource  to displays the                          Acumatica ERP page with the external application resource selected on the form.  You                         can click this button before selecting a site map location to see how the                         resource looks in  Acumatica ERP. ]]></column>
		</row>
		<row PageID="6998580f-25d2-42ba-bde5-668c2bf1f551" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="7b010d19-f22a-072b-6507-ea2bb2581151" RecordSourceID="22377">
			<column name="Content"><![CDATA[
Analytical reports are used to display the consolidated and summarized data from the General Ledger and Projects submodules in the way defined by the report designer. Analytical reports are used to provide the summarized and aggregated values in a variety of views: The data in the analytical report can be displayed in monthly, yearly, and quarterly views, and the data can provide information from the point of view of departments, selected account classes, and other dimensions. {br}

In Acumatica ERP, you can design analytical reports and run the reports that were designed and published on the site. This part of the guide contains information on how to design an analytical report and define the analytical report structure and layout by using the Analytical Report Manager. {br}{TOC}
==In This Part==[anchor|#ul_bbc_y1y_qr]
*[HelpRoot_ReportingTools\CS__ARM_Analytical_Report_Parameters|Analytical Report Manager]
*[HelpRoot_ReportingTools\CS__ARM_Designing_the_Report_Layout|Report Structure Design]
*[HelpRoot_ReportingTools\CS__ARM_Row_Set|Row Sets]
*[HelpRoot_ReportingTools\CS__ARM_Column_Set|Column Sets]
*[HelpRoot_ReportingTools\CS__ARM_Unit_Set|Unit Sets]
*[HelpRoot_ReportingTools\CS__ARM_Data_Source|Data Source]
*[HelpRoot_ReportingTools\CS__ARM_Formulas|Formulas]
*[HelpRoot_ReportingTools\RP__ARM_Best_Practices|Best Practices]
*[HelpRoot_ReportingTools\RP__CON_tools_ARM_How_to_Design_an_AR|Example: Designing an Analytical Report]
*[HelpRoot_ReportingTools\RP__Tools_ARM_Form_Reference|ARM Reference]
]]></column>
			<column name="PlainText"><![CDATA[Managing Analytical Reports Analytical reports are used to display the consolidated and summarized data from the General 				Ledger and Projects submodules in the way defined by the report designer. Analytical 				reports are used to provide the summarized and aggregated values in a variety of 				views: The data in the analytical report can be displayed in monthly, yearly, and 				quarterly views, and the data can provide information from the point of view of 				departments, selected account classes, and other dimensions.  In  Acumatica ERP, you can design analytical reports and run the reports that were designed and 				published on the site. This part of the guide contains information on how to design 				an analytical report and define the analytical report structure and layout by using 				the Analytical Report Manager.  In This Part Analytical Report ManagerReport Structure DesignRow SetsColumn SetsUnit SetsData SourceFormulasBest PracticesExample: Designing an Analytical ReportARM Reference]]></column>
		</row>
		<row PageID="3b87b2cb-7620-441b-bbf9-ae19ed966d5f" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="633e00c2-b9e8-9680-6d6c-16fa4baa697b" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The Analytical Report Manager (ARM) is a web-based report access and management tool for creating and modifying analytical reports by retrieving ledger and project data.{br}

You need no programming skills to use the ARM for modifying existing financial reports and developing new ones, such as Balance Sheet and Income Statement. You also need no knowledge about the structure of the Acumatica ERP database. {br}

Report designers can design and run custom analytical reports by using advanced data selection criteria, data calculation rules, and customizable report layout design features. By using the Analytical Report Manager, you can perform the following tasks: [anchor|#_74c6fde4-359e-4667-bb70-76c8788b61a0]
*Create the layout and structure of an analytical report, based on your business requirements.
*Define data selection criteria for the report with a high level of granularity. The entities specified as the data source could include, for example, a range of accounts, subaccounts, and financial periods.
*Use advanced formulas to calculate values based on the information extracted from the data source.
*Create consolidated reports based on the data from multiple data sources or analytical reports. 
*Localize the data used by a report if multilingual support of user input is configured.
{br}{TOC}
==ARM and Report Designer==
You can use the ARM toolkit rather than Acumatica Report                         Designer to create the following types of reports: [anchor|#_e8d44907-e3b3-4dfc-84c9-a894ba12e1a9]
*Financial reports that display data that is posted to the General Ledger accounts and accumulated in the General Ledger submodule
*Project accounting reports that display data accumulated in the Projects submodule

==Report Creation==
To create a report in ARM, do the following:[anchor|#_96b77b09-dbe6-4aad-ba07-59b0bc420069]
#Define your goals. You need to decide what kind of report to create and what data should be displayed in it.
#Design the report structure. For more information, see [HelpRoot_ReportingTools\CS__ARM_Designing_the_Report_Layout|Report Structure Design]
#Publish the report. For more information, see [HelpRoot_ReportingTools\CS__ARM_Publishing_the_Analytical_Report|To Publish the Analytical Report]
#Give access rights to the users that will use the report. For more information, see [[#_970e32a6-6b42-4f7d-8918-8754a6ec3432|ARM Access Rights]

==Report Structure Elements==
The structure of the analytical report determines the content to be presented and its appearance. To configure the report structure, you specify the units of the report and identify the rows and columns to be displayed. You define the report headers, and the headers for the individual columns and rows or for the specific groups of columns and rows. The formatting options can be defined for the entire report and for any particular row or column. By using formatting options, you can set up the report page layout, select font attributes, and visually emphasize rows or columns in the report. {br}

The report in the following screenshot consists of a row set, a column set, and a unit set.[anchor|#_04af700e-9814-48f4-8e6c-55fc202cda7a][anchor|#_0f19d4a8-32d4-4350-b08b-35bab19e2220][image:UserGuide/Images/RP_tools_ARM.png|popup|Profit & Loss report|450px]
To design a report structure, you need to do the following:[anchor|#_a78f8af9-4cae-4795-b08a-44510f65bb42]
*Define the row set and column set
*Optional: Specify the unit set for the report, if you want to split the report into sections
*Optional: Specify the report formatting settings

For details about the particular structure elements, see [HelpRoot_ReportingTools\CS__ARM_Row_Set|Row Sets], [HelpRoot_ReportingTools\CS__ARM_Column_Set|Column Sets], and [HelpRoot_ReportingTools\CS__ARM_Unit_Set|Unit Sets].{br}

For details about the design process, see [HelpRoot_ReportingTools\CS__ARM_Designing_the_Report_Layout|Report Structure Design]. {br}

For details about the formatting settings on every particular level, see [HelpRoot_ReportingTools\CS__ARM_Row_Set|Row Sets] and [HelpRoot_ReportingTools\CS__ARM_Column_Set|Column Sets]{br}

For details about the formatting settings, see [HelpRoot_ReportingTools\CS__ARM_Printing_Style|Printing Style]. 
==Data Source Options==
Data source options specify how the data will be selected for the report. Depending on the report structure, the data source can be defined for the whole report, and different data selection criteria can be used for the rows and columns in the data source editor. For detailed information about data source elements, see [HelpRoot_ReportingTools\CS__ARM_Data_Source|Data Source] and [HelpRoot_FormReference\CS__ref_Data_Source_Editor|Data Source Editor]
==Data Transformation and Calculation Rules==
To calculate the values in the report, you use formulas. Formulas describe data transformations and other operations performed with the data selected from the data source. The formulas can use the data selected from the data source as parameters. Depending on the report structure, formulas can be defined at the unit, row, or column level. {br}

In [HelpRoot_ReportingTools\CS__ARM_Formulas|Formulas], you can find detailed descriptions of the formulas.
==Reports Based on the Data from Multiple Data Sources or Analytical Reports==You can use a unit set to organize the report structure when the groups of rows and columns included in the report use data from different data sources. For example, a unit set can include one unit or multiple units that specify how the data is selected, calculated, and displayed in reports. In the report, you can view data for each individual unit, which could be a branch or a cost center, as well as data consolidated for all the units. To define the data that should be included in the unit set and set up the formatting for the rows and columns, you can specify the values of the units in the unit set. 
For details about the unit sets, see [HelpRoot_ReportingTools\CS__ARM_Unit_Set|Unit Sets].[anchor|#_970e32a6-6b42-4f7d-8918-8754a6ec3432]
==ARM Access Rights==
When a report is published, the users who will generate the report must be granted access rights to this report. {br}

In Acumatica ERP, you can customize the access rights of users to work with analytical reports. You can control their access to forms and operations based on each user&rsquo;s job responsibilities.{br}

You can set up access to analytical reports by using the [HelpRoot_FormReference\SM_20_10_20|Access Rights by Screen] ([~/?ScreenId=SM201020|SM201020]) form; on this form, you select the '''Site Map Location''' of the published report form and then select the relevant level of access for a user role in '''Access Rights''' column. For more information on access rights, see [HelpRoot_Administration\US__con_Access_Rights|User Access Rights].
==Related Articles==
*[HelpRoot_ReportingTools\CS__ARM_Column_Set|Column Sets]
*[HelpRoot_ReportingTools\CS__ARM_Row_Set|Row Sets]
*[HelpRoot_ReportingTools\CS__ARM_Unit_Set|Unit Sets]
*[HelpRoot_ReportingTools\CS__ARM_Data_Source|Data Source]
*[HelpRoot_ReportingTools\CS__ARM_Formulas|Formulas]
*[HelpRoot_ReportingTools\CS__ARM_Printing_Style|Printing Style]
*[HelpRoot_ReportingTools\CS__ARM_Designing_the_Report_Layout|Report Structure Design]]]></column>
			<column name="PlainText"><![CDATA[Analytical Report Manager The Analytical Report Manager (ARM) is a web-based report access and management tool 				for creating and modifying analytical reports by retrieving ledger and project 				data. You need no programming skills to use the ARM for modifying existing financial 				reports and developing new ones, such as Balance Sheet and Income Statement. You 				also need no knowledge about the structure of the  Acumatica ERP database.  Report designers can design and run custom analytical reports by using advanced data 				selection criteria, data calculation rules, and customizable report layout design 				features. By using the Analytical Report Manager, you can perform the following 				tasks:  Create the layout and structure of an analytical report, based on your business 					requirements. Define data selection criteria for the report with a high level of granularity. 					The entities specified as the data source could include, for example, a range of 					accounts, subaccounts, and financial periods. Use advanced formulas to calculate values based on the information extracted 					from the data source. Create consolidated reports based on the data from multiple data sources or 					analytical reports.  Localize the data used by a report if multilingual support of user input is 					configured. ARM and Report Designer You can use the ARM toolkit rather than  Acumatica Report                         Designer to create the following types of reports:  Financial reports that display data that is posted to the General Ledger 					accounts and accumulated in the General Ledger submodule Project accounting reports that display data accumulated in the Projects 					submodule Report Creation To create a report in ARM, do the following: Define your goals. You need to decide what kind of report to create and what 						data should be displayed in it. Design the report structure. For more information, see  Report Structure DesignPublish the report. For more information, see  To Publish the Analytical ReportGive access rights to the users that will use the report. For more 						information, see  ARM Access Rights ARM Access RightsReport Structure Elements The structure of the analytical report determines the content to be presented and its 				appearance. To configure the report structure, you specify the units of the report 				and identify the rows and columns to be displayed. You define the report headers, 				and the headers for the individual columns and rows or for the specific groups of 				columns and rows. The formatting options can be defined for the entire report and 				for any particular row or column. By using formatting options, you can set up the 				report page layout, select font attributes, and visually emphasize rows or columns 				in the report.  The report in the following screenshot consists of a row set, a column set, and a 				unit set. Profit & Loss report To design a report structure, you need to do the following: Define the row set and column set Optional: Specify the unit set for the report, if you want to split the report 					into sections Optional: Specify the report formatting settings For details about the particular structure elements, see  Row Sets,  Column Sets, and  Unit Sets. For details about the design process, see  Report Structure Design.  For details about the formatting settings on every particular level, see  Row Sets and  Column SetsFor details about the formatting settings, see  Printing Style.  Data Source Options Data source options specify how the data will be selected for the report. Depending 				on the report structure, the data source can be defined for the whole report, and 				different data selection criteria can be used for the rows and columns in the data 				source editor. For detailed information about data source elements, see  Data Source and  Data Source EditorData Transformation and Calculation Rules To calculate the values in the report, you use formulas. Formulas describe data 				transformations and other operations performed with the data selected from the data 				source. The formulas can use the data selected from the data source as parameters. 				Depending on the report structure, formulas can be defined at the unit, row, or 				column level.  In  Formulas, you can find detailed 				descriptions of the formulas. Reports Based on the Data from Multiple Data Sources or Analytical 				Reports You can use a unit set to organize the report structure when the groups of rows and 			columns included in the report use data from different data sources. For example, a unit 			set can include one unit or multiple units that specify how the data is selected, 			calculated, and displayed in reports. In the report, you can view data for each 			individual unit, which could be a branch or a cost center, as well as data consolidated 			for all the units. To define the data that should be included in the unit set and set up 			the formatting for the rows and columns, you can specify the values of the units in the 			unit set.  For details about the unit sets, see  Unit Sets. ARM Access Rights When a report is published, the users who will generate the report must be granted 				access rights to this report.  In  Acumatica ERP, you can customize the access rights of users to work with analytical reports. 				You can control their access to forms and operations based on each user's job 				responsibilities. You can set up access to analytical reports by using the   ([~/?ScreenId=SM201020|SM201020]) Access Rights by Screen (SM201020) form; on this form, you select the 					 Site Map Location  of the published report form and then 				select the relevant level of access for a user role in  Access 					Rights  column. For more information on access rights, see  User Access Rights. ]]></column>
		</row>
		<row PageID="90b3d3d4-2add-41c0-84bc-33ced2cb1a3e" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="2b433a1d-b596-eb40-3c7e-1ef4bb5dbbc2" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The report structure determines the report outlook, and identifies the rows and columns to be included in the report. To design an analytical report, you define what sections will be included in the report, how the data will be grouped in the report, and what rows and columns will be included in the report; you also specify the order in which the rows and columns will be displayed in the report. You also define the headers for the report columns and for the report itself, and specify the captions for the rows. All the parameters required to define the analytical report structure can be specified by using the Analytical Report Manager forms. {br}{TOC}
==Selecting the Rows and Columns for the Report==
Every report has its set of rows and columns, which can be specific for this report or can be used in other reports. Every row included in the row set and every column included in the column set has attributes specifying what data will be displayed in the report. {br}

The row set and column set can be used in a specific report or in a variety of reports that have common data selection criteria and a similar structure. {br}

To define the rows and columns to be included in the report, you should perform the following steps: [anchor|#_f2d2fc83-3f3d-45dc-af0a-9993232c25c8]
#You open the [HelpRoot_FormReference\CS_20_60_10|Row Sets] ([~/?ScreenId=CS206010|CS206010]) form to view the predefined row sets that you can use for your report. On this form, you can modify a row set or create a new one. 
#:For a detailed description of row sets, see [HelpRoot_ReportingTools\CS__ARM_Row_Set|Row Sets]. 
#You open the [HelpRoot_FormReference\CS_20_60_20|Column Sets] ([~/?ScreenId=CS206020|CS206020]) form to view the predefined column sets that you can use for your report. On this form, you can modify a column set or create a new one. 
#:For a detailed description of the column sets, see [HelpRoot_ReportingTools\CS__ARM_Column_Set|Column Sets]. 
#You open the [HelpRoot_FormReference\CS_20_60_00|Report Definitions] ([~/?ScreenId=CS206000|CS206000]) form, and in the '''Row Set''' and '''Column Set''' boxes, you select the set that you want to use in your report.
((({S:Hint} The row and column sets are defined for the report as a whole, and if the report includes multiple sections, each consisting of various rows and columns, the row set and column set should include all rows and columns for all the report sections.
)))
==Defining the Report Sections==
Every report can include one section or multiple sections made up of rows and columns. The grouping rules for rows and columns can be defined separately for each report section. {br}

To make a report with more than one section, you need to specify the report with a unit set. You can define the structure of the sections in the report by creating a unit hierarchy on the [HelpRoot_FormReference\CS_20_60_30|Unit Sets] ([~/?ScreenId=CS206030|CS206030]) form.{br}

To define what units will be included in the report, you should perform the following steps: [anchor|#_b5426b57-badd-46cd-9180-0909ea1ff1f1]
#You open the [HelpRoot_FormReference\CS_20_60_30|Unit Sets] form to view the predefined unit sets that you can use for your report. On this form, you can modify a unit set or create a new one.
#You open the [HelpRoot_FormReference\CS_20_60_00|Report Definitions] ([~/?ScreenId=CS206000|CS206000]) form, and in the '''Unit Set''' box, select the unit set that you want to use in your report. 
#:For a detailed description of unit sets, see [HelpRoot_ReportingTools\CS__ARM_Unit_Set|Unit Sets]. 

For each section in the report, you can specify the following: [anchor|#_f2082189-861e-4d64-8918-d2abec7db50f]
*The rows and columns to be included in this section.
*The data selection criteria used to include the data in this section of the report.

==Defining the Rows and Columns to Be Included in the Report Section==
The rows and columns to be displayed in the analytical report sections can be selected separately for each report section. {br}

To specify the rows and columns to be included in a report section, you perform the following steps: [anchor|#_5a93ff16-2600-4166-bc22-8b9f15a060bf]
#You open the [HelpRoot_FormReference\CS_20_60_30|Unit Sets] ([~/?ScreenId=CS206030|CS206030]) form, and specify the '''Printing Group''' column value for the unit that is related to this report section. 
#:
#You open the [HelpRoot_FormReference\CS_20_60_10|Row Sets] ([~/?ScreenId=CS206010|CS206010]) form, and specify the same value in the '''Unit Group''' column for all the rows to be included in this report section. 
#:
#Open the [HelpRoot_FormReference\CS_20_60_20|Column Sets] ([~/?ScreenId=CS206020|CS206020]) form and specify the same value in the '''Unit Group''' column for all the columns to be included in this report section. 

==Defining the Data Selection Criteria for the Report Sections==
Depending on the report structure and the need to use the same row sets and column sets in a variety of reports, you can define the section-specific data filtering criteria for the rows and columns included in a report section, or define them separately for each unit. {br}

To decide where to define the data filtering criteria, you should use the following guidelines: [anchor|#_18420aaf-d66f-4815-bed3-517a060854fa]
*When the row set and column set are used in only one report, or the other reports&rsquo; row set and column set have common data selection criteria, the data selection criteria for each report section can be defined at the row and column levels.
*When the row set and column set will be used in another report, the data selection criteria for each report section should be defined at the unit level.

To define the data selection criteria for the report section at the row and column level, you perform the following steps: [anchor|#_5e312bc5-35ea-4a39-84dc-7d9f09646fd1]
#You specify the data source parameters for each row included in the report section.
#You specify the data source parameters for each column included in the report section.

To define the data selection criteria for the report section at the unit level, you specify the data source parameters for the unit related to the specific report section. {br}

For more information about the data source parameters, see [HelpRoot_FormReference\CS__ref_Data_Source_Editor|Data Source Editor] and [HelpRoot_ReportingTools\CS__ARM_Data_Source|Data Source]
==Grouping the Report Sections=={br}

Depending on the data sampling rules, the sections in the report can be arranged in a flat or hierarchical structure. {br}

The flat structure can be used when the report consists of multiple sets of data assembled in different numbers of rows and columns.A hierarchical report structure is used when a report section includes the data from the other sections of the report (for example, the consolidated sales volumes followed by separation of the sales volumes by the time periods). {br}

To define how the sections will be grouped and displayed in the report, you should define the unit structure in the unit set selected for the report. For a flat report structure, the sections will be included in the report in the same order as the corresponding units in the unit set selected for the report. For a hierarchical structure, the sections corresponding to the nodes in the units&rsquo;s hierarchical structure will be displayed before the sections corresponding to the child nodes or leaves in the units&rsquo;s hierarchical structure. {br}

When the sections in the report are organized in a hierarchical structure, you usually apply additional data filtering rules for the node units to include the particular data from the other report sections in the section corresponding to the node unit, use the formulas in the node units if the data in one report section is calculated by using the data from the other report sections, or apply both formulas and data filtering rules. {br}

To group the section in the report, you perform the following steps: 
#You open the [HelpRoot_FormReference\CS_20_60_30|Unit Sets] ([~/?ScreenId=CS206030|CS206030]) form and select the unit set that you want to use in your report.
#In the left area of the form, you set up the units in a hierarchical or flat structure. 
#In the table area of the form, for the node units in the unit set, you define the '''Data Source''' column to apply the additional data filtering criteria for data selection for the node unit, and define the formulas in the '''Values''' column to calculate the values based on the data from the other units, when necessary. 
#:For a detailed description of specifying the unit attributes, see [HelpRoot_ReportingTools\CS__ARM_Defining_the_Units_to_be_Included_in_the_Unit_Set|To Define the Units to Be Included in the Unit Set]. 

==Specifying the Report Headers and Captions==
To provide the description of the data included in the report, you should define the titles for the report and its sections, add the headers for the report columns or column groups, and specify the captions for the rows or a group of rows. For more information, see [HelpRoot_ReportingTools\CS__ARM_Setting_Up_the_Report_Headline|To Add a Report Title] and [HelpRoot_ReportingTools\CS__ARM_Setting_Up_the_Headline_for_a_Report_Section|To Add a Title for a Report Section].]]></column>
			<column name="PlainText"><![CDATA[Report Structure Design The report structure determines the report outlook, and identifies the rows and 				columns to be included in the report. To design an analytical report, you define 				what sections will be included in the report, how the data will be grouped in the 				report, and what rows and columns will be included in the report; you also specify 				the order in which the rows and columns will be displayed in the report. You also 				define the headers for the report columns and for the report itself, and specify the 				captions for the rows. All the parameters required to define the analytical report 				structure can be specified by using the Analytical Report Manager forms.  Selecting the Rows and Columns for the Report Every report has its set of rows and columns, which can be specific for this report 				or can be used in other reports. Every row included in the row set and every column 				included in the column set has attributes specifying what data will be displayed in 				the report.  The row set and column set can be used in a specific report or in a variety of 				reports that have common data selection criteria and a similar structure.  To define the rows and columns to be included in the report, you should perform the 				following steps:  You open the   ([~/?ScreenId=CS206010|CS206010]) Row Sets (CS206010) form to 					view the predefined row sets that you can use for your report. On this form, you 					can modify a row set or create a new one.  For a detailed description of row 						sets, see  Row Sets.  You open the   ([~/?ScreenId=CS206020|CS206020]) Column Sets (CS206020) form to 					view the predefined column sets that you can use for your report. On this form, 					you can modify a column set or create a new one.  For a detailed description 						of the column sets, see  Column Sets.  You open the   ([~/?ScreenId=CS206000|CS206000]) Report Definitions (CS206000) form, and 					in the  Row Set  and  Column Set  					boxes, you select the set that you want to use in your report.  The row and column sets are defined for the report as a whole, and if 				the report includes multiple sections, each consisting of various rows and columns, 				the row set and column set should include all rows and columns for all the report 				sections. Defining the Report Sections Every report can include one section or multiple sections made up of rows and 				columns. The grouping rules for rows and columns can be defined separately for each 				report section.  To make a report with more than one section, you need to specify the report with a 				unit set. You can define the structure of the sections in the report by creating a 				unit hierarchy on the   ([~/?ScreenId=CS206030|CS206030]) Unit Sets (CS206030) form. To define what units will be included in the report, you should perform the following 				steps:  You open the   ([~/?ScreenId=CS206030|CS206030]) Unit Sets form to view the predefined unit 					sets that you can use for your report. On this form, you can modify a unit set 					or create a new one. You open the   ([~/?ScreenId=CS206000|CS206000]) Report Definitions (CS206000) form, and 					in the  Unit Set  box, select the unit set that you want to 					use in your report.  For a detailed description of unit sets, see  Unit Sets.  For each section in the report, you can specify the following:  The rows and columns to be included in this section. The data selection criteria used to include the data in this section of the 					report. Defining the Rows and Columns to Be Included in the Report Section The rows and columns to be displayed in the analytical report sections can be 				selected separately for each report section.  To specify the rows and columns to be included in a report section, you perform the 				following steps:  You open the   ([~/?ScreenId=CS206030|CS206030]) Unit Sets (CS206030) form, and 					specify the  Printing Group  column value for the unit that 					is related to this report section.  You open the   ([~/?ScreenId=CS206010|CS206010]) Row Sets (CS206010) form, and 					specify the same value in the  Unit Group  column for all 					the rows to be included in this report section.  Open the   ([~/?ScreenId=CS206020|CS206020]) Column Sets (CS206020) form and 					specify the same value in the  Unit Group  column for all 					the columns to be included in this report section.  Defining the Data Selection Criteria for the Report Sections Depending on the report structure and the need to use the same row sets and column 				sets in a variety of reports, you can define the section-specific data filtering 				criteria for the rows and columns included in a report section, or define them 				separately for each unit.  To decide where to define the data filtering criteria, you should use the following 				guidelines:  When the row set and column set are used in only one report, or the other 					reports' row set and column set have common data selection criteria, the data 					selection criteria for each report section can be defined at the row and column 					levels. When the row set and column set will be used in another report, the data 					selection criteria for each report section should be defined at the unit 					level. To define the data selection criteria for the report section at the row and column 				level, you perform the following steps:  You specify the data source parameters for each row included in the report 					section. You specify the data source parameters for each column included in the report 					section. To define the data selection criteria for the report section at the unit level, you 				specify the data source parameters for the unit related to the specific report 				section.  For more information about the data source parameters, see  Data Source Editor and  Data SourceGrouping the Report Sections Depending on the data sampling rules, the sections in the report can be arranged in a 				flat or hierarchical structure.  The flat structure can be used when the report consists of multiple sets of data 				assembled in different numbers of rows and columns.A hierarchical report structure 				is used when a report section includes the data from the other sections of the 				report (for example, the consolidated sales volumes followed by separation of the 				sales volumes by the time periods).   To define how the sections will be grouped and displayed in the report, you should 				define the unit structure in the unit set selected for the report. For a flat report 				structure, the sections will be included in the report in the same order as the 				corresponding units in the unit set selected for the report. For a hierarchical 				structure, the sections corresponding to the nodes in the units's hierarchical 				structure will be displayed before the sections corresponding to the child nodes or 				leaves in the units's hierarchical structure.  When the sections in the report are organized in a hierarchical structure, you 				usually apply additional data filtering rules for the node units to include the 				particular data from the other report sections in the section corresponding to the 				node unit, use the formulas in the node units if the data in one report section is 				calculated by using the data from the other report sections, or apply both formulas 				and data filtering rules.  To group the section in the report, you perform the following steps:  You open the   ([~/?ScreenId=CS206030|CS206030]) Unit Sets (CS206030) form 						and select the unit set that you want to use in your report. In the left area of the form, you set up the units in a hierarchical or flat 						structure.  In the table area of the form, for the node units in the unit set, you 						define the  Data Source  column to apply the additional 						data filtering criteria for data selection for the node unit, and define the 						formulas in the  Values  column to calculate the values 						based on the data from the other units, when necessary.  For a detailed 							description of specifying the unit attributes, see  To Define the Units to Be Included in the Unit Set.  Specifying the Report Headers and Captions To provide the description of the data included in the report, you should define the 				titles for the report and its sections, add the headers for the report columns or 				column groups, and specify the captions for the rows or a group of rows. For more 				information, see  To Add a Report Title and 					 To Add a Title for a Report Section. ]]></column>
		</row>
		<row PageID="361737b1-9659-4a36-9494-53439eb00aa5" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="092bb57b-25e4-b8ec-6118-9f226ba04ea2" RecordSourceID="22377">
			<column name="Content"><![CDATA[
A row set is a set of rows to be used in a report or in a group of reports that all use the same rows. You define row sets and their properties on the [HelpRoot_FormReference\CS_20_60_10|Row Sets] ([~/?ScreenId=CS206010|CS206010]) form. Although a row set can be used in multiple reports, each report can be associated with only one row set.{br}

You can specify what rows will be displayed in the analytical report by creating a new row set, adding rows to it, and specifying this row set for the report on the [HelpRoot_FormReference\CS_20_60_00|Report Definitions] ([~/?ScreenId=CS206000|CS206000]) form. {br}{TOC}
==Row Set Properties==
Each row in a row set has its properties displayed in the lines of the [HelpRoot_FormReference\CS_20_60_10|Row Sets] ([~/?ScreenId=CS206010|CS206010]) form. The properties of each row specify how the data of the row is selected, calculated, formatted, and displayed in the rows of the printed analytical report. The row data source, the data transformation and calculation rules are defined to display the calculated values in the row. 
==Row Code and Description==
The row code ('''Code''' column) is a unique value the system specifies when you add a new row to the row set. This code is used to identify the row within the row set, and the references to the rows in the formulas also include the row codes. The code assigned to the row can be changed later, but we do not recommend that you change the existing row codes, because they may be used in the formula references to this row. The rows in the row sets are sorted by row code in ascending order, and this is the order in which they appear in the generated report.{br}

The row description ('''Description''' column) is a descriptive definition of the row contents. The data from this column is not printed in the analytical report. To include a row description in the report, you should create a caption for this column. 
==Type==
By defining the '''Type''' attribute in a row set, you specify what data will be displayed in a particular report row, and how the data in the row will be processed. For more information, see [HelpRoot_FormReference\CS_20_60_10|Column Type].
==Value==
By filling in the '''Value''' column for a row, you can define a particular value to be displayed in the report line. The values in the rows can be predefined parameters or computed values that the system calculates by using formulas. Values are frequently used to insert sums and totals into the report lines. For more information about formulas, see [HelpRoot_ReportingTools\CS__ARM_Formulas|Formulas]. {br}

The formulas used to calculate the data in the report lines usually include references to other rows or particular cells in the report. The expressions used to insert the data in the report rows can also use parameter queries to select the necessary data from the data source. ((({S:Hint}When you fill in the '''Value''' column to display a total values in the row, you need to confirm that the appropriate row '''Type''' is selected for this row to exclude it from the data that can be selected as a source for summarized value calculation.
)))
==Format==
In the '''Format''' column, you specify the format functions for the row cells. For the rules of row cell formatting, see [HelpRoot_ReportingTools\CS__ARM_Cells_Formatting|Cell Formatting].
==Data Source==
In the '''Data Source''' column, you define the filtering criteria for the data to be displayed in a specific row of your report. To set up filtering criteria, you should specify the appropriate parameters in the [HelpRoot_FormReference\CS__ref_Data_Source_Editor|Data Source Editor] dialog box, which the system opens when you click the magnifier icon in '''Data Source''' column for any row. {br}

You can specify filtering criteria on different levels (row, column, unit, or entire report), but the filtering rules defined for the unit have the highest priority. The rules defined on the row, column, and report levels have the next highest priorities (in that order). For example, if you want to define filtering criteria for a column and these criteria differ from the criteria that has already been specified for the rows, you need to clear the parameters or specify the '''Amount Type'''as ''Not Set'' for the '''Data Source''' of the row that interacts with the corresponding column so that the data filtering criteria specified for the column will be applied. For more information about the data filtering criteria, see [HelpRoot_ReportingTools\CS__ARM_Data_Source|Data Filtering Criteria]. {br}

By specifying the data filtering parameters on the row level, you define the data structure in the report. For example, if a group of lines in the report must display the calculated values for a specific period, you should specify the start date and end date of the period for each row included in this group of report lines. If some lines in the report must display the data related to a specific account, and the columns must display the values calculated for certain periods, you should specify the account on the row level, and specify the start date and the end date of each period on the column level. 
==Style==
In the '''Style''' column, you can click the magnifier icon to bring up a dialog box in which you can define the printing style—such as the font, background color, or text alignment—for the data in the specific report row. You can use this column when some report row must be visually emphasized and have formatting that differs from that of the other rows in the report. For example, you can set special formatting properties for the rows that include the total values for some periods. {br}

For more information about the printing style, see [HelpRoot_ReportingTools\CS__ARM_Printing_Style|Printing Style]. 
==Printing Control==
In the '''Printing Control''' column, you can specify how the particular row will be printed in the report. For more information, see [HelpRoot_FormReference\CS_20_60_10|Printing Control]. 
==Page Formatting and Row Printing Control properties==
Multiple formatting and printing control properties ('''Page Break''', '''Height''', '''Indent''', , '''Line Style''', '''Suppress Empty''', '''Hide Zero''', '''Linked Row''', and '''Base Row''') are used to define the page formatting and to control printing. These properties include options that allow you to set the row printing options and block the printing of empty rows. For more information, see the description for the corresponding columns in [HelpRoot_FormReference\CS_20_60_10|Table Columns]. 
==Column Group==
In the '''Column Group''' column, you specify the group of columns where the values from the current row will be printed. Every column group selected for the current row can include one column or multiple columns. When a column group is specified for the current row, the same value should be specified as the '''Printing Group''' attribute for the columns that will be included in this analytical report where the values from the current row will be inserted. {br}

For example, if the values from the row with the ''R01'' code should be displayed in columns ''A'' and ''B'', the '''Column Group''' column of the row should have the same value as the '''Printing Group''' attribute defined for columns ''A'' and ''B''. 
==Unit Group==
You use the '''Unit Group''' column to include the current row in a unit group. Unit groups are used to generate summarized or aggregated reports and to define the groups of rows to be displayed in some specific reports. Unit groups include the column sets and row sets in hierarchically organized units that can be used to summarize the values in the report formed from the various column sets and row sets.
==Related Articles==
*[HelpRoot_ReportingTools\CS__ARM_Analytical_Report_Parameters|Analytical Report Manager]
*[HelpRoot_FormReference\CS_20_60_00|Report Definitions] ([~/?ScreenId=CS206000|CS206000])
*[HelpRoot_ReportingTools\CS__ARM_Data_Source|Data Source]
*[HelpRoot_ReportingTools\CS__ARM_Printing_Style|Printing Style]
*[HelpRoot_ReportingTools\CS__ARM_Formulas|Formulas]
*[HelpRoot_FormReference\CS_20_60_10|Row Sets] ([~/?ScreenId=CS206010|CS206010])]]></column>
			<column name="PlainText"><![CDATA[Row Sets A row set is a set of rows to be used in a report or in a group 				of reports that all use the same rows. You define row sets and their properties on 				the   ([~/?ScreenId=CS206010|CS206010]) Row Sets (CS206010) form. Although a row 				set can be used in multiple reports, each report can be associated with only one row 				set. You can specify what rows will be displayed in the analytical report by creating a 				new row set, adding rows to it, and specifying this row set for the report on the 					  ([~/?ScreenId=CS206000|CS206000]) Report Definitions (CS206000) form.  Row Set Properties Each row in a row set has its properties displayed in the lines of the   ([~/?ScreenId=CS206010|CS206010]) Row Sets (CS206010) form. The properties of each row specify 				how the data of the row is selected, calculated, formatted, and displayed in the 				rows of the printed analytical report. The row data source, the data transformation 				and calculation rules are defined to display the calculated values in the row.  Row Code and Description The row code ( Code  column) is a unique value the system specifies when 				you add a new row to the row set. This code is used to identify the row within the 				row set, and the references to the rows in the formulas also include the row codes. 				The code assigned to the row can be changed later, but we do not recommend that you 				change the existing row codes, because they may be used in the formula references to 				this row. The rows in the row sets are sorted by row code in ascending order, and 				this is the order in which they appear in the generated report. The row description ( Description  column) is a descriptive definition of 				the row contents. The data from this column is not printed in the analytical report. 				To include a row description in the report, you should create a caption for this 				column.  Type By defining the  Type  attribute in a row set, you specify what data will 				be displayed in a particular report row, and how the data in the row will be 				processed. For more information, see   ([~/?ScreenId=CS206010|CS206010]) Column Type Column Type. Value By filling in the  Value  column for a row, you can define a particular 				value to be displayed in the report line. The values in the rows can be predefined 				parameters or computed values that the system calculates by using formulas. Values 				are frequently used to insert sums and totals into the report lines. For more 				information about formulas, see  Formulas.  The formulas used to calculate the data in the report lines usually include references to 				other rows or particular cells in the report. The expressions used to insert the 				data in the report rows can also use parameter queries to select the necessary data 				from the data source.  When you fill in the  Value  column to display a total values in the 				row, you need to confirm that the appropriate row  Type  is 				selected for this row to exclude it from the data that can be selected as a source 				for summarized value calculation. Format In the  Format  column, you specify the format functions for the 				row cells. For the rules of row cell formatting, see  Cell Formatting. Data Source In the  Data Source  column, you define the filtering criteria for the 				data to be displayed in a specific row of your report. To set up filtering criteria, 				you should specify the appropriate parameters in the  Data Source Editor dialog box, which the system opens when 				you click the magnifier icon in  Data Source  column for any 				row.  You can specify filtering criteria on different levels (row, column, unit, or entire report), 				but the filtering rules defined for the unit have the highest priority. The rules 				defined on the row, column, and report levels have the next highest priorities (in 				that order). For example, if you want to define filtering criteria for a column and 				these criteria differ from the criteria that has already been specified for the 				rows, you need to clear the parameters or specify the  Amount 					Type as  Not Set  for the  Data Source  of 				the row that interacts with the corresponding column so that the data filtering 				criteria specified for the column will be applied. For more information about the 				data filtering criteria, see  Data Filtering Criteria Data Filtering Criteria.  By specifying the data filtering parameters on the row level, you define the data structure in 				the report. For example, if a group of lines in the report must display the 				calculated values for a specific period, you should specify the start date and end 				date of the period for each row included in this group of report lines. If some 				lines in the report must display the data related to a specific account, and the 				columns must display the values calculated for certain periods, you should specify 				the account on the row level, and specify the start date and the end date of each 				period on the column level.  Style In the  Style  column, you can click the magnifier icon to bring up a 				dialog box in which you can define the printing style—such as the font, 				background color, or text alignment—for the data in the specific report row. 				You can use this column when some report row must be visually emphasized and have 				formatting that differs from that of the other rows in the report. For example, you 				can set special formatting properties for the rows that include the total values for 				some periods.  For more information about the printing style, see  Printing Style.  Printing Control In the  Printing Control  column, you can specify how the particular row 				will be printed in the report. For more information, see   ([~/?ScreenId=CS206010|CS206010]) Printing Control Printing Control.  Page Formatting and Row Printing Control properties Multiple formatting and printing control properties ( Page Break , 					 Height ,  Indent , ,  Line 					Style ,  Suppress Empty ,  Hide 					Zero ,  Linked Row , and  Base 					Row ) are used to define the page formatting and to control printing. 				These properties include options that allow you to set the row printing options and 				block the printing of empty rows. For more information, see the description for the 				corresponding columns in   ([~/?ScreenId=CS206010|CS206010]) Table Columns Table Columns.  Column Group In the  Column Group  column, you specify the group of columns 				where the values from the current row will be printed. Every column group selected 				for the current row can include one column or multiple columns. When a column group 				is specified for the current row, the same value should be specified as the 					 Printing Group  attribute for the columns that will be 				included in this analytical report where the values from the current row will be 				inserted.  For example, if the values from the row with the  R01  code should be displayed in 				columns  A  and  B , the  Column Group  column of the 				row should have the same value as the  Printing Group  				attribute defined for columns  A  and  B .  Unit Group You use the  Unit Group  column to include the current row in a unit 				group. Unit groups are used to generate summarized or aggregated reports and to 				define the groups of rows to be displayed in some specific reports. Unit groups 				include the column sets and row sets in hierarchically organized units that can be 				used to summarize the values in the report formed from the various column sets and 				row sets.  ([~/?ScreenId=CS206000|CS206000])  ([~/?ScreenId=CS206010|CS206010]) ]]></column>
		</row>
		<row PageID="dd9d50f5-ccc3-47b3-8d84-8a068a7eabab" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="a61d3daf-4bec-b553-b7a0-77bb0c61d529" RecordSourceID="22377">
			<column name="Content"><![CDATA[
Column sets are used to define the set of columns to be used in a specific report or in a variety of reports having a common layout. Every report can be associated with only one column set. When different reports use the same columns, you can create a single column set for them. {br}

You can specify what columns will be displayed in an analytical report by creating a new column set on the [HelpRoot_FormReference\CS_20_60_20|Column Sets] ([~/?ScreenId=CS206020|CS206020]) form, adding the columns to it, and including this column set in the report on the [HelpRoot_FormReference\CS_20_60_00|Report Definitions] ([~/?ScreenId=CS206000|CS206000]) form of the Acumatica ERP analytical report manager. {br}{TOC}
==Column Set Properties==
Each column in a column set has its properties displayed in the lines of the [HelpRoot_FormReference\CS_20_60_20|Column Sets] ([~/?ScreenId=CS206020|CS206020]) form. The properties of each column, described in the sections of this topic, specify how the data is selected, calculated, formatted, and displayed in the particular column of the printed analytical reports. 
==Column Code and Description==
The system assigns a letter code ('''A''', '''B''', '''C''', and so on) to every column that you add to the column set. The added columns are named as they would be named in an Excel file, and the letter assigned to the column cannot be changed later.((({S:Hint}The system assigns letter code within '''A''' - '''ZZZ''' range.
))){br}

In the '''Description''' row, you can add a description of the contents of each column. The data from the '''Description''' row is not automatically printed in the analytical report. To include the description column in the report, you should create a header for this column. 
==Type==
By defining the '''Type''' attribute for a column in the column set, you specify what data will be displayed in the particular report column, and how the data in this column will be processed. For more information, see [HelpRoot_FormReference\CS_20_60_20|Column Type].
==Value==
By specifying the '''Value''' attribute, you define a certain value to be displayed in the report column. The values in the columns can be predefined parameters or computed values that the system calculates by using formulas. Values are frequently used to insert sums and totals into the report columns. {br}

The formulas used to calculate the data in the report columns usually include references to other columns or particular cells in the report. The expressions defined for the report columns can also use parameter queries to select the values from the data source and insert them in the column cells. ((({S:Hint}When you use the '''Value''' attribute to display predefined or calculated values in the column, you must confirm that the appropriate '''Type''' attribute is selected for this column; otherwise, the formula and value calculation rules will be ignored.
)))
 For more information about the formulas, see [HelpRoot_ReportingTools\CS__ARM_Formulas|Formulas]. 
==Rounding==
By specifying the '''Rounding''' attribute, you set up the level of rounding that will be used in each particular column of your report to round the values. You can select one of the following types of rounding for a column: ''No Rounding'', ''Whole Dollars'', ''Thousands'', ''Whole Thousands'', ''Millions'', ''Whole Millions'', ''Billions'', and ''Whole Billions''. For a detailed description of each type, see [HelpRoot_FormReference\CS_20_60_20|Rounding].
==Format==
You use the '''Format''' attribute to specify the format functions for the column cells and row cells. For the rules of cell formatting, see [HelpRoot_ReportingTools\CS__ARM_Cells_Formatting|Cell Formatting].
==Page Formatting and Column Printing Control Properties==
Multiple formatting and printing control properties ('''Width''', '''Auto Height''', , '''Extra Space''', '''Suppress Empty''', '''Hide Zero''', and '''Suppress Line''') are used to define page formatting and to control printing. These properties include options you can use to set the column printing options and block the printing of empty columns. For more information, see the description for the corresponding columns in [HelpRoot_FormReference\CS_20_60_20|Table Columns].
==Printing Group==
You use the '''Printing Group''' attribute to define the group of rows where the values from the current column will be printed. Every printing group can include one row or multiple rows, and can be assigned to a single column set or multiple sets. When a column group attribute is specified for the current row, the same column group should be assigned to the '''Printing Group''' attribute for the column set that will be included in this analytical report. 
==Unit Group==
You use the '''Unit Group''' attribute to include the current column in the unit group. Unit groups are used to generate summarized or aggregated reports; they define the groups of columns to be displayed in some specific reports. Unit groups include the column sets and row sets in hierarchically organized units that can be used to summarize the values in the report formed from the various column sets and row sets. 
==Printing Control==
You use the '''Printing Control''' attribute to specify how the columns will be printed in the report. For more information, see [HelpRoot_FormReference\CS_20_60_20|Printing Control]. 
==Visible Formula==
You use the '''Visible Formula''' attribute to define the conditions of hiding a column when you run the report. If you do not want to have needless columns (for example, those with no data) in the report, you can hide a column or multiple columns by specifying appropriate hiding conditions in the '''Visible Formula''' box.{br}

Hiding a column does not remove the column or its data at all. The column will be displayed when the report is generated outside the specified conditions.{br}

For example, suppose you have an annual report that has twelve columns, each of which accumulates data by month. If you run the report in March, it will contain the data for the three months (from January to March), so only three columns will contain data. In that case, there is no need to display other columns that have no data. Thus, you can specify conditions to hide the columns depending on the period of time when you run the report.{br}

For the '''Visible Formula''' attribute, you can specify such values as =''True'' (for displaying the column), ''=False'' (for hiding the column), or a formula with specific conditions for hiding the column depending on the {{@StartPeriod}} parameter.
==Style==
You can use the '''Style''' attribute to define the printing style—such as the font, background color, or text alignment—for the data in a specific report column. This attribute can be used when some report column must be visually emphasized and have formatting that differs from that of the other columns in the report. For example, you can set special formatting properties for the columns that include the total values for some periods. {br}

For more information about the printing style, see [HelpRoot_ReportingTools\CS__ARM_Printing_Style|Printing Style]. 
==Data Source==
You use the '''Data Source''' attribute to define the filtering criteria for the data to be displayed in a specific column of your report. To set up filtering criteria, you should specify appropriate parameters in the Data Source Editor ([HelpRoot_FormReference\CS__ref_Data_Source_Editor|Data Source Editor]) dialog box. You can specify criteria on different levels (row, column, unit, or entire report). The filtering rules defined for the unit have the highest priority. The rules defined on the row, column, and report levels have the next highest priorities (in that order). For example, if you want to define filtering criteria for a column and these criteria differ from the criteria that has already been specified for the rows, you need to clear the parameters or specify them as '''Not Set''' for the row that interacts with the corresponding column, so that the data filtering criteria specified for the column will be applied. For more information about the data filtering criteria, see [HelpRoot_ReportingTools\CS__ARM_Data_Source|Data Filtering Criteria]. {br}

By specifying the data filtering parameters on the row level, you define the data structure in the report. For example, if a group of lines in the report must display the calculated values for the specific period, you should specify the start date and the end date of the period for each row included in this group of report lines. If some lines in the report must display the data related to a specific account, and the columns must display the values calculated for certain periods, you should specify the account on the row level, and specify the start date and the end date of each period on the columns level. 
==Related Articles==
*[HelpRoot_ReportingTools\CS__ARM_Analytical_Report_Parameters|Analytical Report Manager]
*[HelpRoot_FormReference\CS_20_60_00|Report Definitions] ([~/?ScreenId=CS206000|CS206000])
*[HelpRoot_FormReference\CS_20_60_20|Column Sets] ([~/?ScreenId=CS206020|CS206020])
*[HelpRoot_ReportingTools\CS__ARM_Data_Source|Data Source]
*[HelpRoot_ReportingTools\CS__ARM_Printing_Style|Printing Style]
*[HelpRoot_ReportingTools\CS__ARM_Formulas|Formulas]]]></column>
			<column name="PlainText"><![CDATA[Column Sets Column sets are used to define the set of columns to be used in a specific report or 				in a variety of reports having a common layout. Every report can be associated with 				only one column set. When different reports use the same columns, you can create a 				single column set for them.  You can specify what columns will be displayed in an analytical report by creating a 				new column set on the   ([~/?ScreenId=CS206020|CS206020]) Column Sets (CS206020) form, 				adding the columns to it, and including this column set in the report on the   ([~/?ScreenId=CS206000|CS206000]) Report Definitions (CS206000) form of the  Acumatica ERP analytical report manager.  Column Set Properties Each column in a column set has its properties displayed in the lines of the   ([~/?ScreenId=CS206020|CS206020]) Column Sets (CS206020) form. The properties of each column, 				described in the sections of this topic, specify how the data is selected, 				calculated, formatted, and displayed in the particular column of the printed 				analytical reports.  Column Code and Description The system assigns a letter code ( A ,  B , 					 C , and so on) to every column that you add to the column 				set. The added columns are named as they would be named in an Excel file, and the 				letter assigned to the column cannot be changed later. The system assigns 					letter code within  A  -  ZZZ  					range. In the  Description  row, you can add a description of the contents of 				each column. The data from the  Description  row is not 				automatically printed in the analytical report. To include the description column in 				the report, you should create a header for this column.  Type By defining the  Type  attribute for a column in the column set, you 				specify what data will be displayed in the particular report column, and how the 				data in this column will be processed. For more information, see   ([~/?ScreenId=CS206020|CS206020]) Column Type Column Type. Value By specifying the  Value  attribute, you define a certain value to be 				displayed in the report column. The values in the columns can be predefined 				parameters or computed values that the system calculates by using formulas. Values 				are frequently used to insert sums and totals into the report columns.  The formulas used to calculate the data in the report columns usually include references to 				other columns or particular cells in the report. The expressions defined for the 				report columns can also use parameter queries to select the values from the data 				source and insert them in the column cells.  When you use the  Value  attribute to display predefined or calculated 				values in the column, you must confirm that the appropriate 					 Type  attribute is selected for this column; otherwise, 				the formula and value calculation rules will be ignored.  For more information about the formulas, see  Formulas.  Rounding By specifying the  Rounding  attribute, you set up the level of 				rounding that will be used in each particular column of your report to round the 				values. You can select one of the following types of rounding for a column:  No 					Rounding ,  Whole Dollars ,  Thousands ,  Whole Thousands , 					 Millions ,  Whole Millions ,  Billions , and  Whole 					Billions . For a detailed description of each type, see   ([~/?ScreenId=CS206020|CS206020]) Rounding Rounding. Format You use the  Format  attribute to specify the format functions for the 				column cells and row cells. For the rules of cell formatting, see  Cell Formatting. Page Formatting and Column Printing Control Properties Multiple formatting and printing control properties ( Width , 					 Auto Height , ,  Extra Space , 					 Suppress Empty ,  Hide Zero , and 					 Suppress Line ) are used to define page formatting and to 				control printing. These properties include options you can use to set the column 				printing options and block the printing of empty columns. For more information, see 				the description for the corresponding columns in   ([~/?ScreenId=CS206020|CS206020]) Table Columns Table Columns. Printing Group You use the  Printing Group  attribute to define the group of rows where 				the values from the current column will be printed. Every printing group can include 				one row or multiple rows, and can be assigned to a single column set or multiple 				sets. When a column group attribute is specified for the current row, the same 				column group should be assigned to the  Printing Group  				attribute for the column set that will be included in this analytical report.  Unit Group You use the  Unit Group  attribute to include the current column in the 				unit group. Unit groups are used to generate summarized or aggregated reports; they 				define the groups of columns to be displayed in some specific reports. Unit groups 				include the column sets and row sets in hierarchically organized units that can be 				used to summarize the values in the report formed from the various column sets and 				row sets.  Printing Control You use the  Printing Control  attribute to specify how the 				columns will be printed in the report. For more information, see   ([~/?ScreenId=CS206020|CS206020]) Printing Control Printing Control.  Visible Formula You use the  Visible Formula  attribute to define the conditions 				of hiding a column when you run the report. If you do not want to have needless 				columns (for example, those with no data) in the report, you can hide a column or 				multiple columns by specifying appropriate hiding conditions in the 					 Visible Formula  box. Hiding a column does not remove the column or its data at all. The column will be displayed 				when the report is generated outside the specified conditions. For example, suppose you have an annual report that has twelve columns, each of which 				accumulates data by month. If you run the report in March, it will contain the data 				for the three months (from January to March), so only three columns will contain 				data. In that case, there is no need to display other columns that have no data. 				Thus, you can specify conditions to hide the columns depending on the period of time 				when you run the report. For the  Visible Formula  attribute, you can specify such values as 					= True  (for displaying the column),  =False  (for hiding the column), 				or a formula with specific conditions for hiding the column depending on the 					 @StartPeriod  parameter. Style You can use the  Style  attribute to define the printing style—such 				as the font, background color, or text alignment—for the data in a specific 				report column. This attribute can be used when some report column must be visually 				emphasized and have formatting that differs from that of the other columns in the 				report. For example, you can set special formatting properties for the columns that 				include the total values for some periods.  For more information about the printing style, see  Printing Style.  Data Source You use the  Data Source  attribute to define the filtering criteria for 				the data to be displayed in a specific column of your report. To set up filtering 				criteria, you should specify appropriate parameters in the Data Source Editor ( Data Source Editor) dialog box. You can specify criteria 				on different levels (row, column, unit, or entire report). The filtering rules 				defined for the unit have the highest priority. The rules defined on the row, 				column, and report levels have the next highest priorities (in that order). For 				example, if you want to define filtering criteria for a column and these criteria 				differ from the criteria that has already been specified for the rows, you need to 				clear the parameters or specify them as  Not Set  for the row 				that interacts with the corresponding column, so that the data filtering criteria 				specified for the column will be applied. For more information about the data 				filtering criteria, see  Data Filtering Criteria Data Filtering Criteria.  By specifying the data filtering parameters on the row level, you define the data structure in 				the report. For example, if a group of lines in the report must display the 				calculated values for the specific period, you should specify the start date and the 				end date of the period for each row included in this group of report lines. If some 				lines in the report must display the data related to a specific account, and the 				columns must display the values calculated for certain periods, you should specify 				the account on the row level, and specify the start date and the end date of each 				period on the columns level.   ([~/?ScreenId=CS206000|CS206000])  ([~/?ScreenId=CS206020|CS206020]) ]]></column>
		</row>
		<row PageID="e99f5f68-c354-417b-a143-af621296157a" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="ed7f47b4-c2ba-4706-6d4e-b3a8eb46d166" RecordSourceID="22377">
			<column name="Content"><![CDATA[
Unit sets are used to organize the report structure in a report or a group of reports when the groups of rows and columns included in the report all use data from different data sources, or formulas must be applied to calculate the report values based on specific data from the explicitly defined groups of columns and rows. Unit sets and their properties are defined on the [HelpRoot_FormReference\CS_20_60_30|Unit Sets] ([~/?ScreenId=CS206030|CS206030]) form. {br}

A unit set can include one unit or multiple units that define the calculation formulas (for report values), the printing groups, and the data source for the data set to be used. Units allow for applying additional data filtering criteria and data calculations for the specific data set in the report. You can specify what units will be included in the unit set by adding the units in it, and organizing the unit structure in the report. Each unit set can be used in a report or a group of reports; however, each report can use only one unit set. {br}{TOC}
==Unit Set Properties==
Each unit in a unit set has its properties displayed in the lines of the [HelpRoot_FormReference\CS_20_60_30|Unit Sets] ([~/?ScreenId=CS206030|CS206030]) form. The properties of each unit, described in the sections of this topic, specify how the data is selected, calculated, and displayed in the unit of the printed analytical reports. 
==Unit Set Code and Description==
The unit set code ('''Code''' column) is an unique value specified by the system when a new unit is added to the unit set. This code is used to identify the unit within the row set, and the references in the formulas defined for the units can also include the unit codes. {br}

The units in the unit sets are sorted by the row code in ascending order, and this is the order they appear in the hierarchical structure on the [HelpRoot_FormReference\CS_20_60_30|Unit Sets] ([~/?ScreenId=CS206030|CS206030]) form. The '''Code''' column value can be modified manually. We do not recommend that you use successive values as the codes of new units added to the unit set, to make it easier if you need to add the units between the existing ones. {br}

For each unit, the '''Description''' column should contain a description of the unit. The value in this column is not printed in the analytical report. 
==Value==
By specifying the '''Value''' unit attribute, you can define a certain calculated value to be displayed in the report. The values in the units can be predefined parameters or computed values that the system calculates by using formulas. Values are frequently used to insert sums and totals into the reports. {br}

The formulas used to calculate the data in the units usually include references to other units. The expressions defined for the units can also use parameter queries to select the values from the data source and insert them in the column cells. For more information about formulas, see [HelpRoot_ReportingTools\CS__ARM_Formulas|Formulas]. {br}

The values defined for the units in the analytical reports usually specify the report structure and follow up the user defined unit&rsquo;s hierarchical structure. The units from the top hierarchical level are usually based on the calculated values from the units on the lower hierarchical levels. The higher hierarchical levels can include the summarized and aggregated values based on the units from the lower hierarchical levels. 
==Printing Group==
The '''Printing Group''' attribute identifies which groups of columns and rows from the row and column sets will be included in the current unit. The '''Printing Group''' parameter should be specified for the respective columns and rows in the column and row sets of the analytical report. 
==Data Source==
You can use the '''Data Source''' attribute to define the data filtering criteria for the data set to be displayed in the specific report column. You can specify the data filtering criteria on the row, column, unit, and report levels. The filtering rules defined for the data rows are applied first, and the rules defined on the column level are applied to the data set formed by applying the rules defined on the row level; after that, the criteria defined on the unit level are applied. The data filtering criteria specified on the unit level are applied to the unit as a number of rows and columns included in it. If the data selection criteria set on the unit level have no common data source with the data set received from the data source defined on the row and column level, the report will not produce any meaningful results. {br}

The data filtering rules used in the data source definition on the unit level help you to narrow the criteria applied on the row and column level. For example, if a group of columns in the report included in the unit must display the calculated values for the specific subaccounts, you should set the start subaccount and the end subaccount in the data filtering rules defined for the unit. {br}

For more information about data filtering criteria, see [HelpRoot_ReportingTools\CS__ARM_Data_Source|Data Source]. 
==Related Articles==
*[HelpRoot_ReportingTools\CS__ARM_Analytical_Report_Parameters|Analytical Report Manager]
*[HelpRoot_FormReference\CS_20_60_00|Report Definitions] ([~/?ScreenId=CS206000|CS206000])
*[HelpRoot_FormReference\CS_20_60_20|Column Sets] ([~/?ScreenId=CS206020|CS206020])
*[HelpRoot_ReportingTools\CS__ARM_Row_Set|Row Sets]
*[HelpRoot_ReportingTools\CS__ARM_Formulas|Formulas]
*[HelpRoot_FormReference\CS_20_60_30|Unit Sets] ([~/?ScreenId=CS206030|CS206030])
*[HelpRoot_ReportingTools\CS__ARM_Data_Source|Data Source]]]></column>
			<column name="PlainText"><![CDATA[Unit Sets Unit sets are used to organize the report structure in a report or a group of reports 				when the groups of rows and columns included in the report all use data from 				different data sources, or formulas must be applied to calculate the report values 				based on specific data from the explicitly defined groups of columns and rows. Unit 				sets and their properties are defined on the   ([~/?ScreenId=CS206030|CS206030]) Unit Sets (CS206030) form.  A unit set can include one unit or multiple units that define the calculation 				formulas (for report values), the printing groups, and the data source for the data 				set to be used. Units allow for applying additional data filtering criteria and data 				calculations for the specific data set in the report. You can specify what units 				will be included in the unit set by adding the units in it, and organizing the unit 				structure in the report. Each unit set can be used in a report or a group of 				reports; however, each report can use only one unit set.  Unit Set Properties Each unit in a unit set has its properties displayed in the lines of the   ([~/?ScreenId=CS206030|CS206030]) Unit Sets (CS206030) form. The properties of each unit, 				described in the sections of this topic, specify how the data is selected, 				calculated, and displayed in the unit of the printed analytical reports.  Unit Set Code and Description The unit set code ( Code  column) is an unique value specified by the 				system when a new unit is added to the unit set. This code is used to identify the 				unit within the row set, and the references in the formulas defined for the units 				can also include the unit codes.  The units in the unit sets are sorted by the row code in ascending order, and this is the 				order they appear in the hierarchical structure on the   ([~/?ScreenId=CS206030|CS206030]) Unit Sets (CS206030) form. The  Code  column value 				can be modified manually. We do not recommend that you use successive values as the 				codes of new units added to the unit set, to make it easier if you need to add the 				units between the existing ones.  For each unit, the  Description  column should contain a description of 				the unit. The value in this column is not printed in the analytical report.  Value By specifying the  Value  unit attribute, you can define a certain 				calculated value to be displayed in the report. The values in the units can be 				predefined parameters or computed values that the system calculates by using 				formulas. Values are frequently used to insert sums and totals into the reports.  The formulas used to calculate the data in the units usually include references to other 				units. The expressions defined for the units can also use parameter queries to 				select the values from the data source and insert them in the column cells. For more 				information about formulas, see  Formulas.  The values defined for the units in the analytical reports usually specify the report 				structure and follow up the user defined unit's hierarchical structure. The units 				from the top hierarchical level are usually based on the calculated values from the 				units on the lower hierarchical levels. The higher hierarchical levels can include 				the summarized and aggregated values based on the units from the lower hierarchical 				levels.  Printing Group The  Printing Group  attribute identifies which groups of columns and 				rows from the row and column sets will be included in the current unit. The 					 Printing Group  parameter should be specified for the 				respective columns and rows in the column and row sets of the analytical report.  Data Source You can use the  Data Source  attribute to define the data filtering 				criteria for the data set to be displayed in the specific report column. You can 				specify the data filtering criteria on the row, column, unit, and report levels. The 				filtering rules defined for the data rows are applied first, and the rules defined 				on the column level are applied to the data set formed by applying the rules defined 				on the row level; after that, the criteria defined on the unit level are applied. 				The data filtering criteria specified on the unit level are applied to the unit as a 				number of rows and columns included in it. If the data selection criteria set on the 				unit level have no common data source with the data set received from the data 				source defined on the row and column level, the report will not produce any 				meaningful results.  The data filtering rules used in the data source definition on the unit level help you to 				narrow the criteria applied on the row and column level. For example, if a group of 				columns in the report included in the unit must display the calculated values for 				the specific subaccounts, you should set the start subaccount and the end subaccount 				in the data filtering rules defined for the unit.  For more information about data filtering criteria, see  Data Source.   ([~/?ScreenId=CS206000|CS206000])  ([~/?ScreenId=CS206020|CS206020])  ([~/?ScreenId=CS206030|CS206030]) ]]></column>
		</row>
		<row PageID="c2b2e88d-1d50-4253-a6d6-ef63673f48a7" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="66a94fa3-657d-eb6f-9b3f-3d84382f51eb" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The data source defines and applies the data filtering criteria to select the data that will be used in the report. You can include the selected data in the report in the following ways: [anchor|#ul_nf1_r3y_cr]
*For each row of a row set, by specifying data filtering criteria in the [HelpRoot_FormReference\CS__ref_Data_Source_Editor|Data Source Editor] dialog box. You invoke this dialog box by clicking the magnifier icon in the '''Data Source''' column on the [HelpRoot_FormReference\CS_20_60_10|Row Sets] ([~/?ScreenId=CS206010|CS206010]) form).
*For each column of a column set, by specifying data filtering criteria for the report columns in the [HelpRoot_FormReference\CS__ref_Data_Source_Editor|Data Source Editor] dialog box. You invoke this dialog box by clicking the magnifier icon in the '''Data Source''' cell for the column, in the lower table of the [HelpRoot_FormReference\CS_20_60_20|Column Sets] ([~/?ScreenId=CS206020|CS206020]) form).
*For each unit that includes rows and columns, by specifying data filtering criteria in the [HelpRoot_FormReference\CS__ref_Data_Source_Editor|Data Source Editor] dialog box. You invoke this dialog box by clicking the magnifier icon in the '''Data Source''' column (in the table of the Units area) on the [HelpRoot_FormReference\CS_20_60_30|Unit Sets] ([~/?ScreenId=CS206030|CS206030]) form.
*For the data source defined for the entire report, by specifying additional data filtering criteria to be applied to the report rows and columns. You do this by specifying the data source parameters on the [HelpRoot_FormReference\CS_20_60_00|Report Definitions] ([~/?ScreenId=CS206000|CS206000]) form.

Thus, you can define the data filtering criteria for a separate row, column, or unit included in the report, or for the whole report at once.{br}{TOC}[anchor|#_fb2e02e9-bdb6-4c93-9508-3db4713ed5f9]
==Data Filtering Criteria==
Data filtering criteria specify how the data will be selected from the database. These criteria can be defined for the whole report, for a unit, or for any specific row or column in the report. Usually, the criteria defined for the rows and columns reflect the report structure: how the report data will be grouped in rows and columns. {br}

The data filtering criteria defined for the whole report or for the individual rows and columns, use common parameters that identify the subsets of data to be displayed in the report. These parameters can be specified in the [HelpRoot_FormReference\CS__ref_Data_Source_Editor|Data Source Editor] dialog box.{br}

Data filtering criteria specified for a report or for an individual row or column in the report includes the following (further described in the following sections of this topic): [anchor|#_03ce7893-0f93-42c0-8a2b-19eb7517b842]
*Specific group of accounts and subaccounts: The specific group of accounts and subaccounts used to limit the volume of data to be included in the report
*Specific range of periods ('''Start Period''' and '''End Period'''): The range of periods for the data to be used in the report
*Type of amount: The specific amount type to be used in the ARM report (in the whole report or in a separate row or column), such as the beginning balance amount or ending balance amount

==Specific Group of Accounts and Subaccounts==
To eliminate the data that is not related to a specific account and subaccount, or define the range of accounts and subaccounts to be used for data filtering criteria in the report, you should define the account and subaccount ranges. {br}

To specify a predefined group of accounts and subaccounts to be included in the report, you can select an '''Account Class'''. To set additional limitations and select the specific accounts, subaccounts, or both as data filtering criteria, you should enter values in the '''Start Account''' and '''End Account''' (and '''Start Sub.''' and''' End Sub.''', if subaccounts are used in your system and you want to report on only a specific range of subaccounts) boxes.{br}

If the accounts specified in the '''Account Class''', '''Start Account''', and '''End Account''' boxes have no common data, null values will be displayed in the report rows, columns, or both. {br}

((({S:Hint}You can use denominated accounts for retrieving amounts in a foreign currency.
)))
==Specific Period==
To define specific periods for the data to be included in the report, specify '''Start Period''' and '''End Period''' values. {br}

The data related to the periods not included in the selected range of periods will be filtered out and not included in the report. 
==Amount Type==
To define the type of amounts that should be used in the report lines (displayed or used in calculations), you should select the appropriate '''Amount Type''' option in the [HelpRoot_FormReference\CS__ref_Data_Source_Editor|Data Source Editor] dialog box or on the '''Default Data Source Settings''' section of the [HelpRoot_FormReference\CS_20_60_00|Report Definitions] ([~/?ScreenId=CS206000|CS206000]) form. The following types of amounts can be selected: ''Turnover'', ''Credit'', ''Debit'', ''Beg. Balance'', ''Ending Balance''. These types of amounts can be specified for use in the whole analytical report or for a separate row or column.{br}

You can also use the amounts in a foreign currency retrieved from the denominated accounts by specifying one of the following options: ''Curr. Turnover'', ''Curr. Credit'', ''Curr. Debit'', ''Curr. Beg. Balance'', or ''Curr. Ending Balance''. {br}

If no '''Amount Type''' is specified for any report item (such as row or column), the null value will be displayed in the report row or column. {br}


==Related Articles==
*[HelpRoot_ReportingTools\GL__GL_ARM_Reports|Managing Analytical Reports]
*[HelpRoot_ReportingTools\CS__ARM_Analytical_Report_Parameters|Analytical Report Manager]
*[HelpRoot_FormReference\CS__ref_Data_Source_Editor|Data Source Editor]
*[HelpRoot_FormReference\CS_20_60_00|Report Definitions] ([~/?ScreenId=CS206000|CS206000])
*[HelpRoot_FormReference\CS_20_60_10|Row Sets] ([~/?ScreenId=CS206010|CS206010])
*[HelpRoot_FormReference\CS_20_60_20|Column Sets] ([~/?ScreenId=CS206020|CS206020])
*[HelpRoot_ReportingTools\RP__how_tools_ARM_Data_Source|To Select the Data Source of a Row, Column, or Unit]]]></column>
			<column name="PlainText"><![CDATA[Data Source The data source defines and applies the data filtering criteria to select the data that will 				be used in the report. You can include the selected data in the report in the 				following ways:  For each row of a row set, by specifying data filtering criteria in the  Data Source Editor dialog box. You 					invoke this dialog box by clicking the magnifier icon in the  Data 						Source  column on the   ([~/?ScreenId=CS206010|CS206010]) Row Sets (CS206010) 					form). For each column of a column set, by specifying data filtering criteria for the report 					columns in the  Data Source Editor 					dialog box. You invoke this dialog box by clicking the magnifier icon in the 						 Data Source  cell for the column, in the lower table 					of the   ([~/?ScreenId=CS206020|CS206020]) Column Sets (CS206020) form). For each unit that includes rows and columns, by specifying data filtering criteria in the 						 Data Source Editor dialog box. You 					invoke this dialog box by clicking the magnifier icon in the  Data 						Source  column (in the table of the Units area) on the   ([~/?ScreenId=CS206030|CS206030]) Unit Sets (CS206030) form. For the data source defined for the entire report, by specifying additional data filtering 					criteria to be applied to the report rows and columns. You do this by specifying 					the data source parameters on the   ([~/?ScreenId=CS206000|CS206000]) Report Definitions (CS206000) 					form. Thus, you can define the data filtering criteria for a separate row, column, or unit 				included in the report, or for the whole report at once. Data Filtering Criteria Data filtering criteria specify how the data will be selected from the database. These 				criteria can be defined for the whole report, for a unit, or for any specific row or 				column in the report. Usually, the criteria defined for the rows and columns reflect 				the report structure: how the report data will be grouped in rows and columns.  The data filtering criteria defined for the whole report or for the individual rows and 				columns, use common parameters that identify the subsets of data to be displayed in 				the report. These parameters can be specified in the  Data Source Editor dialog box. Data filtering criteria specified for a report or for an individual row or column in the 				report includes the following (further described in the following sections of this 				topic):  Specific group of accounts and subaccounts: The specific group of accounts and subaccounts 					used to limit the volume of data to be included in the report Specific range of periods ( Start Period  and  End 						Period ): The range of periods for the data to be used in the 					report Type of amount: The specific amount type to be used in the ARM report (in the whole report 					or in a separate row or column), such as the beginning balance amount or ending 					balance amount Specific Group of Accounts and Subaccounts To eliminate the data that is not related to a specific account and subaccount, or define the 				range of accounts and subaccounts to be used for data filtering criteria in the 				report, you should define the account and subaccount ranges.  To specify a predefined group of accounts and subaccounts to be included in the report, you 				can select an  Account Class . To set additional limitations 				and select the specific accounts, subaccounts, or both as data filtering criteria, 				you should enter values in the  Start Account  and 					 End Account  (and  Start Sub.  					and  End Sub. , if subaccounts are used in your system and 				you want to report on only a specific range of subaccounts) boxes. If the accounts specified in the  Account Class ,  Start 					Account , and  End Account  boxes have no common 				data, null values will be displayed in the report rows, columns, or both.  You can use denominated accounts for retrieving amounts in a foreign currency. Specific Period To define specific periods for the data to be included in the report, specify 					 Start Period  and  End Period  				values.  The data related to the periods not included in the selected range of periods will be 				filtered out and not included in the report.  Amount Type To define the type of amounts that should be used in the report lines (displayed or used in 				calculations), you should select the appropriate  Amount Type  				option in the  Data Source Editor dialog 				box or on the  Default Data Source Settings  section of the 					  ([~/?ScreenId=CS206000|CS206000]) Report Definitions (CS206000) form. The following types of amounts 				can be selected:  Turnover ,  Credit ,  Debit ,  Beg. Balance , 					 Ending Balance . These types of amounts can be specified for use in the 				whole analytical report or for a separate row or column. You can also use the amounts in a foreign currency retrieved from the denominated accounts by 				specifying one of the following options:  Curr. Turnover ,  Curr. Credit , 					 Curr. Debit ,  Curr. Beg. Balance , or  Curr. Ending Balance .  If no  Amount Type  is specified for any report item (such as row or 				column), the null value will be displayed in the report row or column.   ([~/?ScreenId=CS206000|CS206000])  ([~/?ScreenId=CS206010|CS206010])  ([~/?ScreenId=CS206020|CS206020]) ]]></column>
		</row>
		<row PageID="f03d234f-6813-4259-8f62-0a36a8320c2e" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="1edb0868-babb-d90c-9e67-c295f471cd22" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can use formulas to calculate the values to be displayed in the rows and columns of each report. Formulas give you the ability to use advanced calculations and data transformation functions if some values in the report rows and columns are calculated or depend on the data from other sources (such as rows, columns or individual cells included in the report). {br}

The formulas used in the analytical reports are much like the formulas used in Excel. You can define parameters and construct a formula by using operators and functions. You can select the parameters used in the formula from the list of predefined parameters or enter them into the formula. 
==Editing of Formulas==
To define formulas in analytical reports, you use the Formula Editor dialog box. You invoke this dialog box by clicking the magnifier icon in the appropriate '''Value''' cell on the [HelpRoot_FormReference\CS_20_60_10|Row Sets] ([~/?ScreenId=CS206010|CS206010]), [HelpRoot_FormReference\CS_20_60_20|Column Sets] ([~/?ScreenId=CS206020|CS206020]), or [HelpRoot_FormReference\CS_20_60_30|Unit Sets] ([~/?ScreenId=CS206030|CS206030]) form. [anchor|#_d7ac6ff2-1f20-4038-b345-6bbc4955c9db]
==Formula Editor Dialog Box==[anchor|#_5cd74371-c1f7-4dbc-bc42-3f13089949ff][anchor|#_a4e2d551-d14a-46e7-92de-473aa655391c][image:Shared/Images/Formula_Editor_panes.png|popup|Formula Editor dialog box|300px]
 The Formula Editor dialog box, which is shown in the screenshot above, includes the following panes: [anchor|#_0e24aa09-8aba-42d9-9d49-1a4e8def4689]
*Component Type pane (upper left): Displays the types of operators, functions, and fields that can be used as formula components. Click any of the types to display the corresponding list of available components in the Component Selection pane.
*Component Selection pane (upper right): For the component type chosen in the Component Types pane, displays the list of available components. Click a component to add it to the formula at the bottom of the dialog box. You can search for the needed component by using the Search box at the top of the Component Selection pane.
*Formula Text pane (bottom): Contains the text of the formula, which you can edit manually. The formula may include the selected components, arguments of manually inserted components, and other elements, all arranged in accordance with the syntax of the formula. 
[anchor|#_275548a2-9cbe-49d1-9a5c-c790de5a9b2e]
===Formula Editor Dialog Box Buttons=== The dialog has the following buttons. 
{| class="checklist" | width="100%" 
|- 
!width="20%" ! Button
!width="80%" ! Description
|- 
| '''Validate'''
| Checks whether the formula typed in the Formula Text pane is valid.
|- 
| '''OK'''
| Closes the dialog box and inserts into the specified box the formula you have created. 
|- 
| '''Cancel'''
| Closes the dialog box without saving your changes. 
|}
==Related Articles==
*[HelpRoot_FormReference\CS_20_60_10|Row Sets] ([~/?ScreenId=CS206010|CS206010])
*[HelpRoot_FormReference\CS_20_60_20|Column Sets] ([~/?ScreenId=CS206020|CS206020])
*[HelpRoot_FormReference\CS_20_60_30|Unit Sets] ([~/?ScreenId=CS206030|CS206030])
*[HelpRoot_ReportingTools\CS__ARM_Formula_Parameters|Formula Parameters]
*[HelpRoot_ReportingTools\CS__ARM_Operators|Formula Operators]
*[HelpRoot_ReportingTools\CS__ARM_Functions|Formula Functions]]]></column>
			<column name="PlainText"><![CDATA[Formulas You can use formulas to calculate the values to be displayed in the rows and columns 				of each report. Formulas give you the ability to use advanced calculations and data 				transformation functions if some values in the report rows and columns are 				calculated or depend on the data from other sources (such as rows, columns or 				individual cells included in the report).  The formulas used in the analytical reports are much like the formulas used in Excel. 				You can define parameters and construct a formula by using operators and functions. 				You can select the parameters used in the formula from the list of predefined 				parameters or enter them into the formula.  Editing of Formulas To define formulas in analytical reports, you use the Formula Editor dialog box. You 				invoke this dialog box by clicking the magnifier icon in the appropriate 					 Value  cell on the   ([~/?ScreenId=CS206010|CS206010]) Row Sets 				(CS206010),   ([~/?ScreenId=CS206020|CS206020]) Column Sets (CS206020), or   ([~/?ScreenId=CS206030|CS206030]) Unit Sets (CS206030) form.  Formula Editor Dialog Box Formula Editor dialog box  The Formula Editor dialog box, which is shown in the screenshot above, includes the                 following panes:  Component Type pane (upper left): Displays the types of operators, functions,                     and fields that can be used as formula components. Click any of the types to                     display the corresponding list of available components in the Component                     Selection pane. Component Selection pane (upper right): For the component type chosen in the                     Component Types pane, displays the list of available components. Click a                     component to add it to the formula at the bottom of the dialog box. You can                     search for the needed component by using the Search box at the top of the                     Component Selection pane. Formula Text pane (bottom): Contains the text of the formula, which you can edit                     manually. The formula may include the selected components, arguments of manually                     inserted components, and other elements, all arranged in accordance with the                     syntax of the formula.  Formula Editor Dialog Box Buttons  The dialog has the following buttons.  Button Description Validate Checks whether the formula typed in the Formula Text pane is                                 valid. OK Closes the dialog box and inserts into the specified box the                                 formula you have created.  Cancel Closes the dialog box without saving your changes.   ([~/?ScreenId=CS206010|CS206010])  ([~/?ScreenId=CS206020|CS206020])  ([~/?ScreenId=CS206030|CS206030]) ]]></column>
		</row>
		<row PageID="fdb54c27-e494-4cf8-8fd8-7ce09ab7c79b" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="736ea8ad-d724-9df8-6e49-2c2b3e2e6f95" RecordSourceID="22377">
			<column name="Content"><![CDATA[
We recommend that you heed the following suggestions when you are developing an Analytical Report Manager (ARM) report.
==Proper Naming Conventions and Descriptions==
You should develop naming conventions so that you can easily identify the report definitions, row sets, and column sets that are used together in the same reports. If you have multiple column sets that are used with the same row set in different report definitions, you can name the column sets with a prefix that helps you identify the row set with which each column set is used. For example, the names (codes) of the report definition, the row set, and the column set of each report can be similar. The codes of all the predefined reports—report definitions, column sets, row sets, and unit sets—start with ''D''. For your reports, we recommend that you start the codes with any character except ''D''. {br}

Also, you should specify a report description that matches the report title. On the [HelpRoot_FormReference\CS_20_60_00|Report Definitions] ([~/?ScreenId=CS206000|CS206000]) form, specify a description that matches the title of the report in the '''Site Map '''section of this form. This will help you find the report when you select its report definition code.
==Creation of a Copy for Modification==
If you want to modify a default report, you should create a copy of it, including the row set and the column set, and modify the copy. This way, the changes you make will not affect the existing reports.
==Frequent Saving and Reviewing==
While you are modifying a report, we recommend that you regularly save each portion of your changes to the row set or the column set. For example, save the row set after you have added each new row.{br}

You should review your report regularly to see the changes you have made. These reviews will ease troubleshooting, because you can detect issues sooner and trace them more easily to their causes.
==Codes Reserved for Future Use==
When you are creating a report, you should reserve row codes—that is, omit a particular number or a range of numbers after each row code. For example, if the code of the first row of your row set is ''0010'', omit the numbers ''0011'' through ''0019'', and add the next row with the ''0020'' code. Similarly, you should then omit the numbers ''0021'' through ''0029'' and use the ''0030'' code for the next row, and continue using multiples of 10 as the codes. {br}

The order of rows in a row set depends on their codes. If you don&rsquo;t specify any sorting conditions for the row set, the rows are printed in the report in the order in which they are listed in the row set. Reserving row codes gives you the ability to add new rows between existing ones. For example, if you decide to expand a row of an existing report, you will be able to add a subtotal after this row.
==Sorting Conditions==
You should keep all rows with sorting conditions together in a particular row set. The location of rows with sorting conditions in the row set doesn&rsquo;t affect sorting conditions. We recommend that you add the rows with sorting conditions to the end of the row set and keep all conditions listed together for easier maintenance of the row set.
==Use of Templates for Quicker Review==
We recommend that you save the parameters of a particular report, which are specified on the report form, as a template so that you can run the report quickly. For example, for test scenarios, you can save the report parameters to be used for testing as a default report template. Because you have created the default template, you can just open the report and then run it immediately without needing to remember and specify all the report parameters. You can use templates for other routine tasks as well. {br}

You can also specify default values of the report parameters in the report definition. If you do, and the values were specified for testing purposes, remember to clear these default values when you finish developing the report.
==Account Classes==
You may want to use account classes to aggregate the data of some accounts instead of using complicated masks. Selecting accounts by account classes is a flexible approach that is also easy to use and maintain. Moreover, the selection of data by account classes works faster than selection by account-subaccount ranges specified in the data source does. {br}

When you define the chart of accounts or any time after, you can define the account classes for further use in analytical reports. To select a set of particular accounts in the data source of a report row or a report column, you can create an account class and assign this class to the needed accounts. You can define any number of custom account classes.
==Formulas and the Sign of the Trial Balance==
You need to use appropriate formulas for the analytical reports if the sign of the trial balance is reversed. The '''Sign of the Trial Balance''' option, which is specified on the [HelpRoot_FormReference\GL_10_20_00|General Ledger Preferences] ([~/?ScreenId=GL102000|GL102000]) form, defines how the trial balance is displayed on reports and inquiries:[anchor|#_942efe0e-3ff0-430f-8580-f85e7dd96dbc]
*If the sign of the trial balance is normal, the credit balances for liability and income accounts are displayed with the plus sign so that the following equation is adhered to: Assets + Expenses = Liabilities + Income.
*:((({S:Hint}YTD Net Income is excluded from these equations.
)))
*If the sign of the trial balance is reversed, the credit balances for liability and income accounts are displayed with the minus sign so that the following equation is correct: Assets + Expenses + Liabilities + Income = 0. However, the reversed sign of the trial balance doesn&rsquo;t affect analytical reports, because analytical reports don&rsquo;t consider the type of accounts. That is, the second equation isn&rsquo;t correct for analytical reports, which always show the credit balance of liabilities and income with the positive sign.
{br}

You should use uppercase references to the codes of rows and units in formulas. The codes of rows in row sets and units in unit sets can be up to 10 alphanumeric characters. The letters of codes are always uppercase. Thus, it is very important to use the appropriate letter case of codes in formulas. For example, the expression {{=@RowCode1+@RowCode2}} in a formulat would return an exception because lowercase letters are specified in the codes. In formulas, you have also to precede a row code and a unit code with the ''@'' character, such as {{=@UNITCODE1+@UNITCODE2}}. {br}

However, you shouldn&rsquo;t use the ''@'' character with a row code or a unit code in functions. Thus, for example, you would use {{=Sum('ROWCODE01', 'ROWCODE10')}} in this function rather than ''=Sum(@ROWCODE01, @ROWCODE10)''.
==Merged ARM Reports==
 Acumatica ERP supports merging multiple ARM reports to be sent as a single HTML or PDF file. For more information, see [HelpRoot_ReportingTools\CS__ARM_Merging_Analytical_Reports|To Merge Analytical Reports].]]></column>
			<column name="PlainText"><![CDATA[Best Practices We recommend that you heed the following suggestions when you are developing an Analytical         Report Manager (ARM) report. Proper Naming Conventions and Descriptions You should develop naming conventions so that you can easily identify the report         definitions, row sets, and column sets that are used together in the same reports. If you         have multiple column sets that are used with the same row set in different report         definitions, you can name the column sets with a prefix that helps you identify the row set         with which each column set is used. For example, the names (codes) of the report definition,         the row set, and the column set of each report can be similar. The codes of all the         predefined reports—report definitions, column sets, row sets, and unit sets—start with            D . For your reports, we recommend that you start the codes with any character         except  D .  Also, you should specify a report description that matches the report title. On the   ([~/?ScreenId=CS206000|CS206000]) Report Definitions (CS206000) form, specify a description that         matches the title of the report in the  Site Map  section of this form.         This will help you find the report when you select its report definition code. Creation of a Copy for Modification If you want to modify a default report, you should create a copy of it, including the row         set and the column set, and modify the copy. This way, the changes you make will not affect         the existing reports. Frequent Saving and Reviewing While you are modifying a report, we recommend that you regularly save each portion of your         changes to the row set or the column set. For example, save the row set after you have added         each new row. You should review your report regularly to see the changes you have made. These reviews         will ease troubleshooting, because you can detect issues sooner and trace them more easily         to their causes. Codes Reserved for Future Use When you are creating a report, you should reserve row codes—that is, omit a particular         number or a range of numbers after each row code. For example, if the code of the first row         of your row set is  0010 , omit the numbers  0011  through  0019 , and add         the next row with the  0020  code. Similarly, you should then omit the numbers            0021  through  0029  and use the  0030  code for the next row, and         continue using multiples of 10 as the codes.  The order of rows in a row set depends on their codes. If you don't specify any sorting         conditions for the row set, the rows are printed in the report in the order in which they         are listed in the row set. Reserving row codes gives you the ability to add new rows between         existing ones. For example, if you decide to expand a row of an existing report, you will be         able to add a subtotal after this row. Sorting Conditions You should keep all rows with sorting conditions together in a particular row set. The         location of rows with sorting conditions in the row set doesn't affect sorting conditions.         We recommend that you add the rows with sorting conditions to the end of the row set and         keep all conditions listed together for easier maintenance of the row set. Use of Templates for Quicker Review We recommend that you save the parameters of a particular report, which are specified on         the report form, as a template so that you can run the report quickly. For example, for test         scenarios, you can save the report parameters to be used for testing as a default report         template. Because you have created the default template, you can just open the report and         then run it immediately without needing to remember and specify all the report parameters.         You can use templates for other routine tasks as well.  You can also specify default values of the report parameters in the report definition. If         you do, and the values were specified for testing purposes, remember to clear these default         values when you finish developing the report. Account Classes You may want to use account classes to aggregate the data of some accounts instead of using         complicated masks. Selecting accounts by account classes is a flexible approach that is also         easy to use and maintain. Moreover, the selection of data by account classes works faster         than selection by account-subaccount ranges specified in the data source does.  When you define the chart of accounts or any time after, you can define the account classes         for further use in analytical reports. To select a set of particular accounts in the data         source of a report row or a report column, you can create an account class and assign this         class to the needed accounts. You can define any number of custom account classes. Formulas and the Sign of the Trial Balance You need to use appropriate formulas for the analytical reports if the sign of the trial         balance is reversed. The  Sign of the Trial Balance  option, which is         specified on the   ([~/?ScreenId=GL102000|GL102000]) General Ledger Preferences (GL102000) form, defines how the trial         balance is displayed on reports and inquiries: If the sign of the trial balance is normal, the credit balances for liability and             income accounts are displayed with the plus sign so that the following equation is             adhered to: Assets + Expenses = Liabilities + Income. YTD Net Income is excluded               from these equations. If the sign of the trial balance is reversed, the credit balances for liability and             income accounts are displayed with the minus sign so that the following equation is             correct: Assets + Expenses + Liabilities + Income = 0. However, the reversed sign of the             trial balance doesn't affect analytical reports, because analytical reports don't             consider the type of accounts. That is, the second equation isn't correct for analytical             reports, which always show the credit balance of liabilities and income with the             positive sign. You should use uppercase references to the codes of rows and units in formulas. The codes         of rows in row sets and units in unit sets can be up to 10 alphanumeric characters. The         letters of codes are always uppercase. Thus, it is very important to use the appropriate         letter case of codes in formulas. For example, the expression            =@RowCode1+@RowCode2  in a formulat would return an exception because         lowercase letters are specified in the codes. In formulas, you have also to precede a row         code and a unit code with the  @  character, such as            =@UNITCODE1+@UNITCODE2 .  However, you shouldn't use the  @  character with a row code or a unit code in         functions. Thus, for example, you would use  =Sum('ROWCODE01', 'ROWCODE10')          in this function rather than  =Sum(@ROWCODE01, @ROWCODE10) . Merged ARM Reports  Acumatica ERP supports merging multiple ARM reports to be sent as a single HTML or PDF file. For more         information, see  To           Merge Analytical Reports To Merge Analytical Reports. ]]></column>
		</row>
		<row PageID="ba36e1e9-81ab-4ff6-99e2-900a9da419f4" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="1af52df5-82ca-7cfd-432d-722abd9cd456" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The report title generally contains the name of the report and other information that will appear only at the beginning of the report. You create a report title in one of the following ways: 
*Create a header for the column set selected for the report, and use it as the report title. This is the preferred method to define the title for a report that has a hierarchical structure. With this method, you can include variable data in the report title. 
*Define a caption in the first row of the row set selected for the report. This method can be used when the report has a flat structure and variable data should not be used in the report title. 

==To Use a Column Set Header to Specify the Report Title==
#Open the [HelpRoot_FormReference\CS_20_60_20|Column Sets] ([~/?ScreenId=CS206020|CS206020]) form by searching for or navigating to it.
#:((({S:Hint}To open any form, you can navigate to it or search for it (by its name or by its form ID without periods). For more information about search capabilities, see [HelpRoot_Interface\UIG__con_New_UI_Search|Search in the Modern UI].
)))
#In the '''Code''' box of the Summary area, select the code of the column set used in the report. 
#On the table toolbar of the upper table (which is used to define and modify column headers for the column set), click '''New'''. The system creates a new row in the upper table.
#Click the column in which you want to define the header i. 
#: The report title definition can span one column or be contained in multiple columns. For example, brief text can be displayed in one column and variable data in the other. 
#In the selected column, enter the header text, which might include a formula if you want to display variable data in the report title.
#Specify the range of columns where the report title will be displayed as follows:
##In the column containing the header, click the magnifier icon. The lookup dialog box containing the column range and header style elements appears.
##Enter the relevant values in the '''Column Range''' boxes. Note that the start value in the column range should contain the reference to the column where the report title is defined.
#While remaining in the dialog box, specify the formatting parameters for the header text and background. 
#Click '''OK''' to exit the dialog box and save the settings you have specified.
#On the table toolbar of the upper table, use the '''Shift Up''' and '''Shift Down''' buttons to move the report title to the top position in the list of headers.
#Click '''Save''' on the form toolbar.

==To Use the Row Set Captions to Specify the Report Title==
#Open the [HelpRoot_FormReference\CS_20_60_10|Row Sets] ([~/?ScreenId=CS206010|CS206010]) form by searching for or navigating to it.
#In the '''Code''' box of the Summary area, select the code of the row set used in the report. 
#On the tabletoolbar, click '''Add Row''' to add a new row to the row set.
#In the '''Code''' column, specify the value for the new row so that the row becomes the first one in the row set. 
#In the '''Description''' column of the row, enter the text to be displayed in the report section title. 
#In the '''Type''' column of the row, select the ''Caption'' value.
#In the '''Style''' column, click the magnifier icon, and in the dialog box that opens, select the parameter values to define the report section title formatting. Click '''OK''' to exit the dialog box.
#Click '''Save''' on the form toolbar.
]]></column>
			<column name="PlainText"><![CDATA[To Add a Report Title The report title generally contains the name of the report and other information that will 				appear only at the beginning of the report. You create a report title in one of the 				following ways:  Create a header for the column set selected for the report, and use it as the report title. 					This is the preferred method to define the title for a report that has a 					hierarchical structure. With this method, you can include variable data in the 					report title.  Define a caption in the first row of the row set selected for the report. This method can be 					used when the report has a flat structure and variable data should not be used 					in the report title.  To Use a Column Set Header to Specify the Report Title Open the   ([~/?ScreenId=CS206020|CS206020]) Column Sets (CS206020) form by 					searching for or navigating to it. To open any form, you can navigate to it or search             for it (by its name or by its form ID without periods). For more information about             search capabilities, see  Search in the Modern UI. In the  Code  box of the Summary area, select the code of 					the column set used in the report.  On the table toolbar of the upper table (which is used to define and modify 					column headers for the column set), click  New . The system 					creates a new row in the upper table. Click the column in which you want to define the header i.   The report title 						definition can span one column or be contained in multiple columns. For 						example, brief text can be displayed in one column and variable data in the 						other.  In the selected column, enter the header text, which might include a formula if 					you want to display variable data in the report title. Specify the range of columns where the report title will be displayed as 						follows: In the column containing the header, click the magnifier icon. The 							lookup dialog box containing the column range and header style elements 							appears. Enter the relevant values in the  Column Range  							boxes. Note that the start value in the column range should contain the 							reference to the column where the report title is defined. While remaining in the dialog box, specify the formatting parameters for the 					header text and background.  Click  OK  to exit the dialog box and save the settings you 					have specified. On the table toolbar of the upper table, use the  Shift Up  					and  Shift Down  buttons to move the report title to the 					top position in the list of headers. Click  Save  on the form toolbar. To Use the Row Set Captions to Specify the Report Title Open the   ([~/?ScreenId=CS206010|CS206010]) Row Sets (CS206010) form  by 					searching for or navigating to it. In the  Code  box of the Summary area, select the code of 					the row set used in the report.  On the tabletoolbar, click  Add Row  to add a new row to 					the row set. In the  Code  column, specify the value for the new row so 					that the row becomes the first one in the row set.  In the  Description  column of the row, enter the text to 					be displayed in the report section title.   In the  Type  column of the row, select the  Caption  					value. In the  Style  column, click the magnifier icon, and in the 					dialog box that opens, select the parameter values to define the report section 					title formatting. Click  OK  to exit the dialog box. Click  Save  on the form toolbar. ]]></column>
		</row>
		<row PageID="8f292dd7-6693-412a-8e68-f4fe06143dac" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="3dd07aaf-e9b0-5692-176b-2d820705408f" RecordSourceID="22377">
			<column name="Content"><![CDATA[
A report can include multiple sections, with each having a header. Depending on the report structure, you can use either row captions or column headers to set up the headers for the report sections. {br}

For a flat report structure, the report sections usually include rows from the whole row set, and to set up a report section header, you can use either a caption defined for a number of rows, or a header defined in the column set and printed in the specific row of the report. (The first two subprocedures cover these methods.){br}

For a hierarchical report structure, you should use column set headers for each section in the report, as described in the third subprocedure. 
==To Specify a Report Section Title for a Flat Report Structure: Using a Column Set Header==
#Open the [HelpRoot_FormReference\CS_20_60_20|Column Sets] ([~/?ScreenId=CS206020|CS206020]) form by searching for or navigating to it.
#:((({S:Hint}To open any form, you can navigate to it or search for it (by its name or by its form ID without periods). For more information about search capabilities, see [HelpRoot_Interface\UIG__con_New_UI_Search|Search in the Modern UI].
)))
#In the '''Code''' box of the Summary area, select the code of the column set used in the report. 
#On the table toolbar of the upper table, click '''New'''.
#Click the column in which you want to define the header. 
#: The report section title can be defined in a single column or be contained in multiple columns. For example, the brief text can be displayed in one column and variable data in the other. 
#In the selected column, enter the header text, which might include a formula to display variable data in the report section title. 
#Specify the range of columns where the report section title will be displayed as follows:
##In the column containing the header, click the magnifier icon. The lookup dialog box containing the column range and header style elements opens.
##Enter the relevant values in the '''Column Range''' boxes. Note that the start value in the column range should contain the reference to the column where the report section title is defined.
#While remaining in the dialog box, specify the formatting parameters for the header text and background.
#Click '''OK''' to exit the dialog box and save the settings you have specified.
#On the table toolbar of the upper table, use the '''Shift Up''' and '''Shift Down''' buttons to move the report section title to the relevant position in the list of headers.
#To define the row of the report where the report section title will appear, do the following: 
##Specify the '''Printing Group''' value for the header.
##Open the [HelpRoot_FormReference\CS_20_60_10|Row Sets] ([~/?ScreenId=CS206010|CS206010]) form by searching for or navigating to it.
##Specify the values for the row where the report section title will be inserted as follows: 
##*In the '''Type''' column, select ''Header''.
##*In the '''Column Group''' column, specify the same value that you defined for the '''Printing Group''' value for the header.
##On the form toolbar, click '''Save'''.
#Return to the [HelpRoot_FormReference\CS_20_60_20|Column Sets] ([~/?ScreenId=CS206020|CS206020]) form, and on the form toolbar, click '''Save'''.

#
#

==To Specify a Report Section Title for a Flat Report Structure: Using a Row Set Caption==[anchor|#ol_d34_lgp_l2b]
#Open the [HelpRoot_FormReference\CS_20_60_10|Row Sets] ([~/?ScreenId=CS206010|CS206010]) form by searching for or navigating to it.
#In the '''Code''' box of the Summary area, select the code of the row set used in the report.
#In the table, click (or add and click) the row where the report section title will be inserted.
#In the '''Description''' column of the row, enter the text to be displayed in the report section title. 
#In the '''Type''' column of the row, select the ''Caption'' value.
#In the '''Style''' column, click the magnifier icon, and in the dialog box that opens, select the parameter values to define the report section title formatting. Click '''OK''' to exit the dialog box. 
#Click '''Save''' on the form toolbar.

==To Specify a Report Section Titles for a Hierarchical Report Structure==
#Open the [HelpRoot_FormReference\CS_20_60_20|Column Sets] ([~/?ScreenId=CS206020|CS206020]) form by searching for or navigating to it.
#In the '''Code''' box of the Summary area, select the code of the column set used in the report. 
#On the table toolbar of the upper table, click '''New'''.
#In the upper table, click the column in which you want to define the header. 
#: The report section title can be defined in a single column or be contained in multiple columns. For example, the brief text can be displayed in one column and the variable data in the other. 
#In the selected column in '''Headers''' section of the Column Sets form, enter the header text, which might include a formula to display variable data in the report section title. 
#Specify the range of columns where the report section title will be displayed as follows:
##In the column containing the header, click the magnifier icon. The lookup dialog box containing the column range and header style elements opens.
##Enter the relevant values in the '''Column Range''' boxes. Note that the start value in the column range should contain the reference to the column where the report section title is defined.
#While remaining in the dialog box, specify the formatting parameters for the header text and background.
#Click '''OK''' to exit the dialog box and save the settings you have specified.
#On the table toolbar of the upper table, use the '''Shift Up''' and '''Shift Down''' buttons to move the report section title to the relevant position in the list of headers.
#To define the row of the report where the report section title will appear, do the following: 
##Specify the '''Printing Group''' value for the header.
##Open the [HelpRoot_FormReference\CS_20_60_10|Row Sets] ([~/?ScreenId=CS206010|CS206010]) form by searching for or navigating to it.
##Specify the values for the row where the report section title will be inserted as follows: 
##*In the '''Type''' column, select ''Header''.
##*In the '''Column Group''' column, specify the same value that you defined for the '''Printing Group''' value for the header.
##On the form toolbar, click '''Save'''.
#Return to the [HelpRoot_FormReference\CS_20_60_20|Column Sets] ([~/?ScreenId=CS206020|CS206020]) form, and on the form toolbar, click '''Save'''.
]]></column>
			<column name="PlainText"><![CDATA[To Add a Title for a Report Section A report can include multiple sections, with each having a header. Depending on the 				report structure, you can use either row captions or column headers to set up the 				headers for the report sections.  For a flat report structure, the report sections usually include rows from the whole 				row set, and to set up a report section header, you can use either a caption defined 				for a number of rows, or a header defined in the column set and printed in the 				specific row of the report. (The first two subprocedures cover these methods.) For a hierarchical report structure, you should use column set headers for each 				section in the report, as described in the third subprocedure.  To Specify a Report Section Title for a Flat Report Structure: Using a Column Set 				Header Open the   ([~/?ScreenId=CS206020|CS206020]) Column Sets (CS206020) form by 					searching for or navigating to it. To open any form, you can navigate to it or search             for it (by its name or by its form ID without periods). For more information about             search capabilities, see  Search in the Modern UI. In the  Code  box of the Summary area, select the code of 					the column set used in the report.  On the table toolbar of the upper table, click  New . Click the column in which you want to define the header.   The report section 						title can be defined in a single column or be contained in multiple columns. 						For example, the brief text can be displayed in one column and variable data 						in the other.  In the selected column, enter the header text, which might include a formula to 					display variable data in the report section title.  Specify the range of columns where the report section title will be displayed as 						follows: In the column containing the header, click the magnifier icon. The 							lookup dialog box containing the column range and header style elements 							opens. Enter the relevant values in the  Column Range  							boxes. Note that the start value in the column range should contain the 							reference to the column where the report section title is defined. While remaining in the dialog box, specify the formatting parameters for the 					header text and background. Click  OK  to exit the dialog box and save the settings you 					have specified. On the table toolbar of the upper table, use the  Shift Up  					and  Shift Down  buttons to move the report section title 					to the relevant position in the list of headers. To define the row of the report where the report section title will appear, do 					the following:  Specify the  Printing Group  value for the 							header. Open the   ([~/?ScreenId=CS206010|CS206010]) Row Sets (CS206010) form 							by searching for or navigating to it. Specify the values for the row where the report section title will be 							inserted as follows:  In the  Type  column, select 									 Header . In the  Column Group  column, specify the 									same value that you defined for the  Printing 										Group  value for the header. On the form toolbar, click  Save . Return to the   ([~/?ScreenId=CS206020|CS206020]) Column Sets (CS206020) form, and 					on the form toolbar, click  Save . To Specify a Report Section Title for a Flat Report Structure: Using a Row Set 				Caption Open the   ([~/?ScreenId=CS206010|CS206010]) Row Sets (CS206010) form by 					searching for or navigating to it. In the  Code  box of the Summary area, select the code of 					the row set used in the report. In the table, click (or add and click) the row where the report section title 					will be inserted. In the  Description  column of the row, enter the text to 					be displayed in the report section title.  In the  Type  column of the row, select the  Caption  					value. In the  Style  column, click the magnifier icon, and in the 					dialog box that opens, select the parameter values to define the report section 					title formatting. Click  OK  to exit the dialog box.  Click  Save  on the form toolbar. To Specify a Report Section Titles for a Hierarchical Report Structure Open the   ([~/?ScreenId=CS206020|CS206020]) Column Sets (CS206020) form by 					searching for or navigating to it. In the  Code  box of the Summary area, select the code of 					the column set used in the report.  On the table toolbar of the upper table, click  New . In the upper table, click the column in which you want to define the header.   						The report section title can be defined in a single column or be contained 						in multiple columns. For example, the brief text can be displayed in one 						column and the variable data in the other.  In the selected column in  Headers  section of the Column 					Sets form, enter the header text, which might include a formula to display 					variable data in the report section title.  Specify the range of columns where the report section title will be displayed as 						follows: In the column containing the header, click the magnifier icon. The 							lookup dialog box containing the column range and header style elements 							opens. Enter the relevant values in the  Column Range  							boxes. Note that the start value in the column range should contain the 							reference to the column where the report section title is defined. While remaining in the dialog box, specify the formatting parameters for the 					header text and background. Click  OK  to exit the dialog box and save the settings you 					have specified. On the table toolbar of the upper table, use the  Shift Up  					and  Shift Down  buttons to move the report section title 					to the relevant position in the list of headers. To define the row of the report where the report section title will appear, do 					the following:  Specify the  Printing Group  value for the 							header. Open the   ([~/?ScreenId=CS206010|CS206010]) Row Sets (CS206010) form 							by searching for or navigating to it. Specify the values for the row where the report section title will be 							inserted as follows:  In the  Type  column, select 									 Header . In the  Column Group  column, specify the 									same value that you defined for the  Printing 										Group  value for the header. On the form toolbar, click  Save . Return to the   ([~/?ScreenId=CS206020|CS206020]) Column Sets (CS206020) form, and 					on the form toolbar, click  Save . ]]></column>
		</row>
		<row PageID="24a4be74-6c8a-41b4-a708-d12563cbc758" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="93c2c255-7652-2695-447c-cebe5e57c495" RecordSourceID="22377">
			<column name="Content"><![CDATA[
Row sets, which you work with on the [HelpRoot_FormReference\CS_20_60_10|Row Sets] ([~/?ScreenId=CS206010|CS206010]) form, are used to define the rows to be included in the report and the data to be displayed in each row. A row set can be used in multiple reports that use similar data selection rules and a similar report layout structure. Once a row set has been defined, you can include it in an analytical report it was designed for by using the [HelpRoot_FormReference\CS_20_60_00|Report Definitions] ([~/?ScreenId=CS206000|CS206000]) form.{br}

To specify the set of rows for a group of analytical reports or a single report, you can create new row sets or modify the existing ones. To remove the row sets that are no longer used, you can delete the row sets associated with them. This topic describes the steps involved in these operations.
==To Create a Row Set==
#Open the [HelpRoot_FormReference\CS_20_60_10|Row Sets] ([~/?ScreenId=CS206010|CS206010]) form by searching for or navigating to it.
#:((({S:Hint}To open any form, you can navigate to it or search for it (by its name or by its form ID without periods). For more information about search capabilities, see [HelpRoot_Interface\UIG__con_New_UI_Search|Search in the Modern UI].
)))
#On the form toolbar, click '''Add New Record'''.
#In the '''Code''' box of the Summary area, enter the code to be used for the row set.
#:((({S:Hint}The row set code must be unique within the whole system. The length of the code can be up to 10 alphanumeric characters.
)))
#In the '''Description''' box, enter the description of the row set. (The row description is not displayed in the printed report and is used only to add a descriptive comment on this form about the row set.)
#On the form toolbar, click '''Save'''. The rows can be added to the created row set at this time or later; see [HelpRoot_ReportingTools\CS__ARM_Defining_the_Rows_to_be_Included_in_the_Row_Set|To Define the Rows of the Row Set].

==To Modify an Existing Row Set==
#Open the [HelpRoot_FormReference\CS_20_60_10|Row Sets] ([~/?ScreenId=CS206010|CS206010]) form by searching for or navigating to it.
#In the '''Code''' box of the Summary area, select the code of the row set you want to work with.
#Change the attributes of the row set as required.
#On the form toolbar, click '''Save''' in the form toolbar.

==To Delete a Row Set==
#Open the [HelpRoot_FormReference\CS_20_60_10|Row Sets] ([~/?ScreenId=CS206010|CS206010]) form by searching for or navigating to it.
#In the '''Code''' box of the Summary area, select the code of the row set you want to delete. 
#On the form toolbar, click '''Delete'''.

==Related Articles==
*[HelpRoot_ReportingTools\CS__ARM_Analytical_Report_Parameters|Analytical Report Manager]
*[HelpRoot_ReportingTools\CS__ARM_Row_Set|Row Sets]
*[HelpRoot_FormReference\CS_20_60_00|Report Definitions] ([~/?ScreenId=CS206000|CS206000])]]></column>
			<column name="PlainText"><![CDATA[To Create, Modify, or Delete a Row Set Row sets, which you work with on the   ([~/?ScreenId=CS206010|CS206010]) Row Sets 				(CS206010) form, are used to define  the rows to be included in the report and the 				data to be displayed in each row. A row set can be used in multiple reports that use 				similar data selection rules and a similar report layout structure. Once a row set 				has been defined, you can include it in an analytical report it was designed for by 				using the   ([~/?ScreenId=CS206000|CS206000]) Report Definitions(CS206000)  form. To specify the set of rows for a group of analytical reports or a single report, you 				can create new row sets or modify the existing ones. To remove the row sets that are 				no longer used, you can delete the row sets associated with them. This topic 				describes the steps involved in these operations. To Create a Row Set Open the   ([~/?ScreenId=CS206010|CS206010]) Row Sets (CS206010) form by 					searching for or navigating to it. To open any form, you can navigate to it or search             for it (by its name or by its form ID without periods). For more information about             search capabilities, see  Search in the Modern UI. On the form toolbar, click  Add New Record . In the  Code  box of the Summary area, enter the code to be 					used for the row set. The row set code must be unique within the whole 						system. The length of the code can be up to 10 alphanumeric 						characters. In the  Description  box, enter the description of the row 					set. (The row description is not displayed in the printed report and is used 					only to add a descriptive comment on this form about the row set.) On the form toolbar, click  Save . The rows can be added to 					the created row set at this time or later; see  To Define the Rows of the Row Set. To Modify an Existing Row Set Open the   ([~/?ScreenId=CS206010|CS206010]) Row Sets (CS206010) form by 					searching for or navigating to it. In the  Code  box of the Summary area, select the code of 					the row set you want to work with. Change the attributes of the row set as required. On the form toolbar, click  Save  in the form toolbar. To Delete a Row Set Open the   ([~/?ScreenId=CS206010|CS206010]) Row Sets (CS206010) form by 					searching for or navigating to it. In the  Code  box of the Summary area, select the code of 					the row set you want to delete.  On the form toolbar, click  Delete .  ([~/?ScreenId=CS206000|CS206000]) ]]></column>
		</row>
		<row PageID="3913e24a-08ff-4638-9566-2172e364c394" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="974b0c20-ebc1-d8b5-56ec-08799e713373" RecordSourceID="22377">
			<column name="Content"><![CDATA[[anchor|#_36987622-f948-4495-8dd2-cbaaace811e5]
On the [HelpRoot_FormReference\CS_20_60_10|Row Sets] ([~/?ScreenId=CS206010|CS206010]) form, you can perform the following operations with the rows, each of which is described in this topic: 
*Add new rows to the row set.
*Specify the attributes for each row in the row set. By changing the row attributes, you can define the data selection, processing, and formatting rules for the data to be included in this row. 
*Delete any rows from the row set.

The table on this form displays the rows of the row set and their attributes. 
==To Create a Row==
#Open the [HelpRoot_FormReference\CS_20_60_10|Row Sets] ([~/?ScreenId=CS206010|CS206010]) form by searching for or navigating to it.
#:((({S:Hint}To open any form, you can navigate to it or search for it (by its name or by its form ID without periods). For more information about search capabilities, see [HelpRoot_Interface\UIG__con_New_UI_Search|Search in the Modern UI].
)))
#In the '''Code''' box of the Summary area, select the code of the row set to which you want to add a row.
#:((({S:Hint}The row set code must be unique within the row set that includes this row. The length of the code can be up to 10 alphanumeric characters.
)))
#On the table toolbar, click '''Add Row'''.
#In the relevant columns of the added row, specify the attributes. 
#:Only the '''Code''' attribute is mandatory for the row. 
#On the form toolbar, click '''Save'''.

==To View and Edit the Row Attributes==
You can edit any row attributes by changing the relevant values. To edit rows, do the following:[anchor|#_9c75e06d-c9e8-4482-858e-4d2e44aa0e61]
#Navigate to the [HelpRoot_FormReference\CS_20_60_10|Row Sets] ([~/?ScreenId=CS206010|CS206010]) form.
#In the '''Code''' box of the Summary area, select the code of the row set in which you want to edit a row.
#For the rows whose attributes you want to change, fill in or edit the values.
#Repeat Step 3 for each row you want to edit. 
#On the form toolbar, click '''Save'''. 

==To Delete a Row==
#Open the [HelpRoot_FormReference\CS_20_60_10|Row Sets] ([~/?ScreenId=CS206010|CS206010]) form by searching for or navigating to it.
#Select the existing row set code in the '''Code''' box in the Row Set area, or use navigation buttons on the form toolbar to find the required row set.
#In the table, select the row to be deleted.
#On the table toolbar, click '''Delete'''.
#On the form toolbar, click '''Save'''.

==Related Articles==
*[HelpRoot_FormReference\CS_20_60_10|Row Sets] ([~/?ScreenId=CS206010|CS206010])
*[HelpRoot_ReportingTools\CS__ARM_Analytical_Report_Parameters|Analytical Report Manager]]]></column>
			<column name="PlainText"><![CDATA[To Define the Rows of the Row Set On the   ([~/?ScreenId=CS206010|CS206010]) Row Sets (CS206010) form, you can perform the 				following operations with the rows, each of which is described in this topic:  Add new rows to the row set. Specify the attributes for each row in the row set. By changing the row attributes, you can 					define the data selection, processing, and formatting rules for the data to be 					included in this row.  Delete any rows from the row set. The table on this form displays the rows of the row set and their attributes.  To Create a Row Open the   ([~/?ScreenId=CS206010|CS206010]) Row Sets (CS206010) form by 					searching for or navigating to it. To open any form, you can navigate to it or search             for it (by its name or by its form ID without periods). For more information about             search capabilities, see  Search in the Modern UI. In the  Code  box of the Summary area, select the code of 					the row set to which you want to add a row. The row set code must be unique 						within the row set that includes this row. The length of the code can be up 						to 10 alphanumeric characters. On the table toolbar, click  Add Row . In the relevant columns of the added row, specify the attributes.  Only the 							 Code  attribute is mandatory for the row. 					 On the form toolbar, click  Save . To View and Edit the Row Attributes You can edit any row attributes by changing the relevant values. To edit rows, do the 				following: Navigate to the   ([~/?ScreenId=CS206010|CS206010]) Row Sets (CS206010) 					form. In the  Code  box of the Summary area, select the code of 					the row set in which you want to edit a row. For the rows whose attributes you want to change, fill in or edit the 					values. Repeat Step 3 for each row you want to edit.  On the form toolbar, click  Save .  To Delete a Row Open the   ([~/?ScreenId=CS206010|CS206010]) Row Sets (CS206010) form by 					searching for or navigating to it. Select the existing row set code in the  Code  box in the 					Row Set area, or use navigation buttons on the form toolbar to find the required 					row set. In the table, select the row to be deleted. On the table toolbar, click  Delete . On the form toolbar, click  Save .  ([~/?ScreenId=CS206010|CS206010]) ]]></column>
		</row>
		<row PageID="1173f974-1912-45fe-b418-234f00085254" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="9bc6d215-3c4a-869a-cd62-b002c877e650" RecordSourceID="22377">
			<column name="Content"><![CDATA[
Column sets, which you work with on the [HelpRoot_FormReference\CS_20_60_20|Column Sets] ([~/?ScreenId=CS206020|CS206020]) form, are used to define the columns to be included in the report and the data to be displayed in each column, as well as column headers. A column set can be used in multiple reports that use similar data selection rules and a similar report layout structure. Once a column set has been defined, you can include it in an analytical report it was designed for by using the [HelpRoot_FormReference\CS_20_60_00|Report Definitions] ([~/?ScreenId=CS206000|CS206000]) form.{br}

To specify the set of columns for a group of analytical reports or a single report, you can create new column sets or modify existing ones. To remove column sets that are no longer used, you can delete them. This topic describes the steps involved in these operations.
==To Create a Column Set==
#Open the [HelpRoot_FormReference\CS_20_60_20|Column Sets] ([~/?ScreenId=CS206020|CS206020]) form by searching for or navigating to it. 
#:((({S:Hint}To open any form, you can navigate to it or search for it (by its name or by its form ID without periods). For more information about search capabilities, see [HelpRoot_Interface\UIG__con_New_UI_Search|Search in the Modern UI].
)))
#On the form toolbar, click '''Add New Record'''.
#In the '''Code''' box of the Summary area, enter the code to be used for the column set.
#:((({S:Hint}The column set code must be unique within the whole system. The length of the code can be up to 10 alphanumeric characters.
)))
#In the '''Description''' box, enter the description of the column set. (The column description is not displayed in the printed report and is used only to add a descriptive comment on this form about the column set.)
#On the form toolbar, click '''Save'''. The columns and data filters can be added to the created column set at this time or later; see [HelpRoot_ReportingTools\CS__ARM_Defining_the_Columns_to_be_Included_in_the_Column_Set|To Define the Columns of the Column Set].

==To Modify an Existing Column Set==
#Open the [HelpRoot_FormReference\CS_20_60_20|Column Sets] ([~/?ScreenId=CS206020|CS206020]) form by searching for or navigating to it. 
#In the '''Code''' box of the Summary area, select the code of the column set you want to modify. 
#Change the attributes of the column set as required.
#On the form toolbar, click '''Save'''.

==To Delete a Column Set==
#Open the [HelpRoot_FormReference\CS_20_60_20|Column Sets] ([~/?ScreenId=CS206020|CS206020]) form by searching for or navigating to it. 
#In the '''Code''' box of the Summary area, select the code of the column set you want to delete. 
#On the form toolbar, click '''Delete'''.

==Related Articles==
*[HelpRoot_ReportingTools\CS__ARM_Analytical_Report_Parameters|Analytical Report Manager]
*[HelpRoot_ReportingTools\CS__ARM_Column_Set|Column Sets]
*[HelpRoot_FormReference\CS_20_60_20|Column Sets] ([~/?ScreenId=CS206020|CS206020])
*[HelpRoot_FormReference\CS_20_60_00|Report Definitions] ([~/?ScreenId=CS206000|CS206000])]]></column>
			<column name="PlainText"><![CDATA[To Create, Modify, or Delete a Column Set Column sets, which you work with on the   ([~/?ScreenId=CS206020|CS206020]) Column Sets(CS206020)  form, are used to define the columns to be included in the                 report and the data to be displayed in each column, as well as column headers. A                 column set can be used in multiple reports that use similar data selection rules and                 a similar report layout structure. Once a column set has been defined, you can                 include it in an analytical report it was designed for by using the   ([~/?ScreenId=CS206000|CS206000]) Report Definitions (CS206000) form. To specify the set of columns for a group of analytical reports or a single report,                 you can create new column sets or modify existing ones. To remove column sets that                 are no longer used, you can delete them. This topic describes the steps involved in                 these operations. To Create a Column Set Open the   ([~/?ScreenId=CS206020|CS206020]) Column Sets (CS206020) form by                     searching for or navigating to it.  To open any form, you can navigate to it or search             for it (by its name or by its form ID without periods). For more information about             search capabilities, see  Search in the Modern UI. On the form toolbar, click  Add New Record . In the  Code  box of the Summary area, enter the code to be                     used for the column set. The column set code must be unique within the                         whole system. The length of the code can be up to 10 alphanumeric                         characters. In the  Description  box, enter the description of the                     column set. (The column description is not displayed in the printed report and                     is used only to add a descriptive comment on this form about the column                     set.) On the form toolbar, click  Save . The columns and data                     filters can be added to the created column set at this time or later; see  To Define the Columns of the Column Set. To Modify an Existing Column Set Open the   ([~/?ScreenId=CS206020|CS206020]) Column Sets (CS206020) form by                     searching for or navigating to it.  In the  Code  box of the Summary area, select the code of                     the column set you want to modify.  Change the attributes of the column set as required. On the form toolbar, click  Save . To Delete a Column Set Open the   ([~/?ScreenId=CS206020|CS206020]) Column Sets (CS206020) form by                     searching for or navigating to it.  In the  Code  box of the Summary area, select the code of                     the column set you want to delete.  On the form toolbar, click  Delete .  ([~/?ScreenId=CS206020|CS206020])  ([~/?ScreenId=CS206000|CS206000]) ]]></column>
		</row>
		<row PageID="e7c8b8c0-0286-4b5a-ab24-54207f28c6d0" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="7e8f8fab-8c35-5c74-5ead-aed25728d3ef" RecordSourceID="22377">
			<column name="Content"><![CDATA[
On the [HelpRoot_FormReference\CS_20_60_20|Column Sets] ([~/?ScreenId=CS206020|CS206020]) form, you can perform the following operations, each of which is described in this topic: 
*Add new columns to the column set.
*Add a column header for any column or group of columns in the column set, and specify the printing style of the header. The header for a column or a column range should be defined after the columns are added to the column set. 
*Specify the attributes for each column in the column set. By changing the column attributes, you can define the data selection, processing, and formatting rules for the data to be included in this column. 
*Delete any column from the column set

The [HelpRoot_FormReference\CS_20_60_20|Column Sets] form has two tables below the Summary area: the upper table with the column headers of the column set; and the lower table, which has the columns of the column set and their attributes. {br}{TOC}
==To Create a Column==
#Open the [HelpRoot_FormReference\CS_20_60_20|Column Sets] ([~/?ScreenId=CS206020|CS206020]) form by searching for or navigating to it. 
#:((({S:Hint}To open any form, you can navigate to it or search for it (by its name or by its form ID without periods). For more information about search capabilities, see [HelpRoot_Interface\UIG__con_New_UI_Search|Search in the Modern UI].
)))
#In the '''Code''' box of the Summary area, select the code of the column set in which you want to add a column. 
#On the table toolbar of the lower table, click '''New'''. The new column is added to the right of the existing columns.
#Specify the attributes of the new column in the relevant rows of the added column.
#On the form toolbar, click '''Save'''.

==To Add a Header for a Column or Column Range==
To add a text description for a single column or a column range in the printed report, you define a header for a column or a group of columns. In the upper table of the [HelpRoot_FormReference\CS_20_60_20|Column Sets] ([~/?ScreenId=CS206020|CS206020]) form, you can to add the headers to the column set and define in which rows the headers should be printed. {br}

In the upper table, you can define the headers for a single column or a column range, and insert the headers in the rows specified by the '''Printing Group''' attribute. You can add, delete, or change the order of the headers, and copy the printing style defined for a certain header to apply it to another header in the analytical report. {br}

To add a header for a single column or a range of columns, do the following: 
#Open the [HelpRoot_FormReference\CS_20_60_20|Column Sets] ([~/?ScreenId=CS206020|CS206020]) form by searching for or navigating to it. 
#In the '''Code''' box of the Summary area, select the code of the column set to which you want to add a header. 
#On the table toolbar of the upper table, click '''New'''.
#If the header should be printed in a specific row, in the '''Printing Group''' column, enter the printing group code. (The same code should be entered in the '''Column Group''' column for the relevant row.)
#In the column where the header should appear, enter the header text.
#Use the lookup control in the column to set the column range for the header printing and define the printing style.
#:((({S:Hint}By default, the column range is limited to the single column where the header text is entered. To make the header span a range of columns, enter the codes of the start column and the end column in the range. 
)))
#On the form toolbar, click '''Save'''.

==To View and Edit the Column Attributes==
You can edit any column attributes by changing the values in the relevant rows. To edit columns, do the following:[anchor|#_9c75e06d-c9e8-4482-858e-4d2e44aa0e61]
#Navigate to the [HelpRoot_FormReference\CS_20_60_20|Column Sets] ([~/?ScreenId=CS206020|CS206020]) form.
#In the '''Code''' box of the Summary area, select the code of the column set in which you want to edit a column.
#In the lower table, click the column whose attributes you want to change, fill in or edit the values.
#Repeat Step 3 for each column you want to edit. 
#On the form toolbar, click '''Save'''. 

==To Delete a Column==
#Open the [HelpRoot_FormReference\CS_20_60_20|Column Sets] ([~/?ScreenId=CS206020|CS206020]) form by searching for or navigating to it. 
#In the '''Code''' box of the Summary area, select the code of the column set in which you want to delete a column. 
#In the lower table, click the column to be deleted.
#On the table toolbar, click '''Delete'''.
#On the form toolbar, click '''Save'''.

==To Use the Column Set in the Analytical Reports==
Once you define a column set, you can use this column set in any analytical report you configure using the [HelpRoot_FormReference\CS_20_60_00|Report Definitions] ([~/?ScreenId=CS206000|CS206000]) form. 
==Related Articles==
*[HelpRoot_ReportingTools\CS__ARM_Analytical_Report_Parameters|Analytical Report Manager]
*[HelpRoot_ReportingTools\CS__ARM_Printing_Style|Printing Style]
*[HelpRoot_FormReference\CS_20_60_20|Column Sets] ([~/?ScreenId=CS206020|CS206020])]]></column>
			<column name="PlainText"><![CDATA[To Define the Columns of the Column Set On the   ([~/?ScreenId=CS206020|CS206020]) Column Sets (CS206020) form, you can perform 				the following operations, each of which is described in this topic:  Add new columns to the column set. Add a column header for any column or group of columns in the column set, and 					specify the printing style of the header. The header for a column or a column 					range should be defined after the columns are added to the column set.  Specify the attributes for each column in the column set. By changing the column 					attributes, you can define the data selection, processing, and formatting rules 					for the data to be included in this column.  Delete any column from the column set The   ([~/?ScreenId=CS206020|CS206020]) Column Sets  form has two tables below the 				Summary area: the upper table with the column headers of the column set; and the 				lower table, which has the columns of the column set and their attributes.  To Create a Column Open the   ([~/?ScreenId=CS206020|CS206020]) Column Sets (CS206020) form by 					searching for or navigating to it.  To open any form, you can navigate to it or search             for it (by its name or by its form ID without periods). For more information about             search capabilities, see  Search in the Modern UI. In the  Code  box of the Summary area, select the code of 					the column set in which you want to add a column.  On the table toolbar of the lower table, click  New . The 					new column is added to the right of the existing columns. Specify the attributes of the new column in the relevant rows of the added 					column. On the form toolbar, click  Save . To Add a Header for a Column or Column Range To add a text description for a single column or a column range in the printed 				report, you define a header for a column or a group of columns. In the upper table 				of the   ([~/?ScreenId=CS206020|CS206020]) Column Sets (CS206020) form, you can to add 				the headers to the column set and define in which rows the headers should be 				printed.  In the upper table, you can define the headers for a single column or a column range, 				and insert the headers in the rows specified by the  Printing 					Group  attribute. You can add, delete, or change the order of the 				headers, and copy the printing style defined for a certain header to apply it to 				another header in the analytical report.  To add a header for a single column or a range of columns, do the following:  Open the   ([~/?ScreenId=CS206020|CS206020]) Column Sets (CS206020) form by 					searching for or navigating to it.  In the  Code  box of the Summary area, select the code of 					the column set to which you want to add a header.  On the table toolbar of the upper table, click  New . If the header should be printed in a specific row, in the  Printing 						Group  column, enter the printing group code. (The same code 					should be entered in the  Column Group  column for the 					relevant row.) In the column where the header should appear, enter the header text. Use the lookup control in the column to set the column range for the header 					printing and define the printing style. By default, the column range is 						limited to the single column where the header text is entered. To make the 						header span a range of columns, enter the codes of the start column and the 						end column in the range.  On the form toolbar, click  Save . To View and Edit the Column Attributes You can edit any column attributes by changing the values in the relevant rows. To 				edit columns, do the following: Navigate to the   ([~/?ScreenId=CS206020|CS206020]) Column Sets (CS206020) 					form. In the  Code  box of the Summary area, select the code of 					the column set in which you want to edit a column. In the lower table, click the column whose attributes you want to change, fill in or edit 					the values. Repeat Step 3 for each column you want to edit.  On the form toolbar, click  Save .  To Delete a Column Open the   ([~/?ScreenId=CS206020|CS206020]) Column Sets (CS206020) form by 					searching for or navigating to it.  In the  Code  box of the Summary area, select the code of 					the column set in which you want to delete a column.  In the lower table, click the column to be deleted. On the table toolbar, click  Delete . On the form toolbar, click  Save . To Use the Column Set in the Analytical Reports Once you define a column set, you can use this column set in any analytical report 				you configure using the   ([~/?ScreenId=CS206000|CS206000]) Report Definitions(CS206000)  form.   ([~/?ScreenId=CS206020|CS206020]) ]]></column>
		</row>
		<row PageID="01f413cb-6375-4e29-8039-fdf6422de202" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="840b811a-0bfb-7071-0813-da959834817e" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can use unit sets, which you define on the [HelpRoot_FormReference\CS_20_60_30|Unit Sets] ([~/?ScreenId=CS206030|CS206030]) form, to define which sections will be included in the analytical reports, and to set the data filtering criteria and data calculation rules for each report section. Once a unit set has been defined, you can include it in an analytical report it was designed for by using the [HelpRoot_FormReference\CS_20_60_00|Report Definitions] ([~/?ScreenId=CS206000|CS206000]) form. {br}

To specify the unit set for a group of analytical reports or a single report, you can create new unit sets or modify existing ones. To remove unit sets associated with reports that are no longer used, you delete the unit sets. This topic describes the steps involved in these operations.
==To Create a Unit Set==
#Open the [HelpRoot_FormReference\CS_20_60_30|Unit Sets] ([~/?ScreenId=CS206030|CS206030]) form by searching for or navigating to it. 
#:((({S:Hint}To open any form, you can navigate to it or search for it (by its name or by its form ID without periods). For more information about search capabilities, see [HelpRoot_Interface\UIG__con_New_UI_Search|Search in the Modern UI].
)))
#On the form toolbar, click '''Add New Record'''.
#In the '''Code''' box of the Summary area, enter the code to be used for the unit set.
#:((({S:Hint}The unit set code must be unique within the whole system. The length of the code can be up to 10 alphanumeric characters.
)))
#In the '''Description''' box, enter the unit set description. (The unit description is not displayed in the printed report and is used only to add a descriptive comment on this form about the unit set.)
#On the form toolbar, click '''Save''' to save the created unit set. The units and data filters can be added to the created unit set at this time or later; see [HelpRoot_ReportingTools\CS__ARM_Defining_the_Units_to_be_Included_in_the_Unit_Set|To Define the Units to Be Included in the Unit Set].

==To Modify an Existing Unit Set==
#Open the [HelpRoot_FormReference\CS_20_60_30|Unit Sets] ([~/?ScreenId=CS206030|CS206030]) form by searching for or navigating to it. 
#In the '''Code''' box of the Summary area, select the code of the unit set to be modified.
#Change the attributes of the unit set as required.
#On the form toolbar, click '''Save'''.

==To Delete a Unit Set==
#Open the [HelpRoot_FormReference\CS_20_60_30|Unit Sets] ([~/?ScreenId=CS206030|CS206030]) form by searching for or navigating to it. 
#In the '''Code''' box of the Summary area, select the code of the unit set to be deleted.
#On the form toolbar, click '''Delete'''.

==Related Articles==
*[HelpRoot_ReportingTools\CS__ARM_Analytical_Report_Parameters|Analytical Report Manager]
*[HelpRoot_ReportingTools\CS__ARM_Unit_Set|Unit Sets]
*[HelpRoot_FormReference\CS_20_60_30|Unit Sets] ([~/?ScreenId=CS206030|CS206030])
*[HelpRoot_FormReference\CS_20_60_00|Report Definitions] ([~/?ScreenId=CS206000|CS206000])]]></column>
			<column name="PlainText"><![CDATA[To Create, Modify, or Delete a Unit Set You can use unit sets, which you define on the   ([~/?ScreenId=CS206030|CS206030]) Unit Sets (CS206030) form, to define which sections will be included in 				the analytical reports, and to set the data filtering criteria and data calculation 				rules for each report section. Once a unit set has been defined, you can include it 				in an analytical report it was designed for by using the   ([~/?ScreenId=CS206000|CS206000]) Report Definitions (CS206000) form.  To specify the unit set for a group of analytical reports or a single report, you can 				create new unit sets or modify existing ones. To remove unit sets associated with 				reports that are no longer used, you delete the unit sets. This topic describes the 				steps involved in these operations. To Create a Unit Set Open the   ([~/?ScreenId=CS206030|CS206030]) Unit Sets (CS206030) form by 					searching for or navigating to it.  To open any form, you can navigate to it or search             for it (by its name or by its form ID without periods). For more information about             search capabilities, see  Search in the Modern UI. On the form toolbar, click  Add New Record . In the  Code  box of the Summary area, enter the code to be 					used for the unit set. The unit set code must be unique within the whole 						system. The length of the code can be up to 10 alphanumeric 						characters. In the  Description  box, enter the unit set description. 					(The unit description is not displayed in the printed report and is used only to 					add a descriptive comment on this form about the unit set.) On the form toolbar, click  Save  to save the created unit 					set. The units and data filters can be added to the created unit set at this 					time or later; see  To Define the Units to Be Included in the Unit Set. To Modify an Existing Unit Set Open the   ([~/?ScreenId=CS206030|CS206030]) Unit Sets (CS206030) form by 					searching for or navigating to it.  In the  Code  box of the Summary area, select the code of 					the unit set to be modified. Change the attributes of the unit set as required. On the form toolbar, click  Save . To Delete a Unit Set Open the   ([~/?ScreenId=CS206030|CS206030]) Unit Sets (CS206030) form by 					searching for or navigating to it.  In the  Code  box of the Summary area, select the code of 					the unit set to be deleted. On the form toolbar, click  Delete .  ([~/?ScreenId=CS206030|CS206030])  ([~/?ScreenId=CS206000|CS206000]) ]]></column>
		</row>
		<row PageID="e7cf468a-df0c-400f-aeb3-e5303519534a" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="4ddf5f45-1e4e-9ace-25f4-6e7d62366405" RecordSourceID="22377">
			<column name="Content"><![CDATA[
On the [HelpRoot_FormReference\CS_20_60_30|Unit Sets] ([~/?ScreenId=CS206030|CS206030]) form, you can perform the following operations on the selected unit set, as detailed in the sections of this topic: 
*Add new units to the unit set.
*Specify the attributes for each unit in the unit set. By changing the unit attributes, you can define the data selection and processing rules for the data to be included in this unit.
*Organize the units in the unit set into a hierarchical structure, which defines the order in which the units will be included in the report. 
*Delete units from the unit set.

The Units table on the form displays available units and their properties. {br}{TOC}
==To Create a Unit==
#Open then [HelpRoot_FormReference\CS_20_60_30|Unit Sets] ([~/?ScreenId=CS206030|CS206030]) form by searching for or navigating to it. 
#:((({S:Hint}To open any form, you can navigate to it or search for it (by its name or by its form ID without periods). For more information about search capabilities, see [HelpRoot_Interface\UIG__con_New_UI_Search|Search in the Modern UI].
)))
#In the '''Code''' box of the Summary area, select the code of the unit set in which you want to create a unit.
#On the table toolbar of the Units table, click '''Add Row'''.
#Specify the settings of the new unit in the relevant columns of the added row.
#On the form toolbar, click '''Save'''.

==To View and Edit the Unit Attributes==
Each unit is represented by a row in the Units table. You can edit the attributes for any unit by changing the values in the row that represents the unit. [anchor|#_9c75e06d-c9e8-4482-858e-4d2e44aa0e61]
#Navigate to the [HelpRoot_FormReference\CS_20_60_30|Unit Sets] ([~/?ScreenId=CS206030|CS206030]) form.
#In the '''Code''' box of the Summary area, select the code of the unit set in which you want to make edits.
#In the row of the Units table that represents the unit whose attributes you want to change, fill in or edit the values
#Repeat Step 3 for each row you want to edit. 
#On the form toolbar, click '''Save'''. 

==To Define the Units&rsquo; Hierarchical Structure==
#Open the [HelpRoot_FormReference\CS_20_60_30|Unit Sets] ([~/?ScreenId=CS206030|CS206030]) form by searching for or navigating to it. 
#In the '''Code''' box of the Summary area, select the code of the unit set you want to work with.
#In the lower left pane, click the unit in the hierarchical structure.
#Use the buttons on the toolbar to move the selected unit to the appropriate position: 
#* The '''Move to external node''' button moves the unit one position left and places it in the next external node in the hierarchical structure.
#* The '''Move to internal node''' button moves the unit one position right and places it in the next internal node in the hierarchical structure.

==To Delete a Unit from the Unit Set==
#Open the [HelpRoot_FormReference\CS_20_60_30|Unit Sets] ([~/?ScreenId=CS206030|CS206030]) form by searching for or navigating to it. 
#In the '''Code''' box of the Summary area, select the code of the unit set you want to work with.
#In the Units area, click the unit to be deleted.
#On the table toolbar, click '''Delete'''.
#On the form toolbar, click '''Save'''.

==Related Articles==
*[HelpRoot_FormReference\CS_20_60_30|Unit Sets] ([~/?ScreenId=CS206030|CS206030])
*[HelpRoot_ReportingTools\CS__ARM_Analytical_Report_Parameters|Analytical Report Manager]]]></column>
			<column name="PlainText"><![CDATA[To Define the Units to Be Included in the Unit Set On the   ([~/?ScreenId=CS206030|CS206030]) Unit Sets (CS206030) form, you can perform 				the following operations on the selected unit set, as detailed in the sections of 				this topic:  Add new units to the unit set. Specify the attributes for each unit in the unit set. By changing the unit 					attributes, you can define the data selection and processing rules for the data 					to be included in this unit. Organize the units in the unit set into a hierarchical structure, which defines 					the order in which the units will be included in the report.  Delete units from the unit set. The Units table on the form displays available units and their properties.  To Create a Unit Open then   ([~/?ScreenId=CS206030|CS206030]) Unit Sets (CS206030) form by 					searching for or navigating to it.  To open any form, you can navigate to it or search             for it (by its name or by its form ID without periods). For more information about             search capabilities, see  Search in the Modern UI. In the  Code  box of the Summary area, select the code of 					the unit set in which you want to create a unit. On the table toolbar of the Units table, click  Add 					Row . Specify the settings of the new unit in the relevant columns of the added 					row. On the form toolbar, click  Save . To View and Edit the Unit Attributes Each unit is represented by a row in the Units table. You can edit the attributes for 				any unit by changing the values in the row that represents the unit.  Navigate to the   ([~/?ScreenId=CS206030|CS206030]) Unit Sets (CS206030) 					form. In the  Code  box of the Summary area, select the code of 					the unit set in which you want to make edits. In the row of the Units table that represents the unit whose attributes you want 					to change, fill in or edit the values Repeat Step 3 for each row you want to edit.  On the form toolbar, click  Save .  To Define the Units' Hierarchical Structure Open the   ([~/?ScreenId=CS206030|CS206030]) Unit Sets (CS206030) form by 					searching for or navigating to it.  In the  Code  box of the Summary area, select the code of 					the unit set you want to work with. In the lower left pane, click the unit in the hierarchical structure. Use the buttons on the toolbar to move the selected unit to the appropriate 					position:   The  Move to external node  button moves the unit 							one position left and places it in the next external node in the 							hierarchical structure.  The  Move to internal node  button moves the unit 							one position right and places it in the next internal node in the 							hierarchical structure. To Delete a Unit from the Unit Set Open the   ([~/?ScreenId=CS206030|CS206030]) Unit Sets (CS206030) form by 					searching for or navigating to it.  In the  Code  box of the Summary area, select the code of 					the unit set you want to work with. In the Units area, click the unit to be deleted. On the table toolbar, click  Delete . On the form toolbar, click  Save .  ([~/?ScreenId=CS206030|CS206030]) ]]></column>
		</row>
		<row PageID="2b745f84-dd62-4517-8f67-6939c91d4b35" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="af6aeaaa-c0f6-01fd-5813-9a4f22638fc3" RecordSourceID="22377">
			<column name="Content"><![CDATA[For a report (and for any row, column, and unit that makes up the report), you select the data source, including the data filtering criteria that the system applies to select the data. 
For a row, column, or unit, you can use the Data Source Editor dialog box to limit the data displayed in the report. For example, by selecting a value in the '''Ledger''' box of this dialog box, you specify the ledger for which the data will be displayed in the report.
==To Select the Data Source==[anchor|#_0df6349e-3006-414a-acab-d01718daf7db]
#Open the [HelpRoot_FormReference\CS_20_60_10|Row Sets] ([~/?ScreenId=CS206010|CS206010]), [HelpRoot_FormReference\CS_20_60_20|Column Sets] ([~/?ScreenId=CS206020|CS206020]), or [HelpRoot_FormReference\CS_20_60_30|Unit Sets] ([~/?ScreenId=CS206030|CS206030]) form by searching for or navigating to it. 
#:((({S:Hint}To open any form, you can navigate to it or search for it (by its name or by its form ID without periods). For more information about search capabilities, see [HelpRoot_Interface\UIG__con_New_UI_Search|Search in the Modern UI].
)))
#Open the Data Source Editor dialog box by clicking the magnifier icon in the '''Data Source''' cell of the required row, column or unit.
#Use the Data Source Editor dialog box to select the needed criteria. For more information, see [HelpRoot_FormReference\CS__ref_Data_Source_Editor|Data Source Editor].
#Click '''OK''' to save your selections, close the dialog box, and return to the form you were using.
#On the form toolbar, click '''Save''' to preserve the data source criteria you selected.
]]></column>
			<column name="PlainText"><![CDATA[To Select the Data Source of a Row, Column, or Unit For a report (and for any row, column, and unit that makes up the report), you             select the data source, including the data filtering criteria that the system applies to             select the data.  For a row, column, or unit, you can use the Data Source Editor                 dialog box to limit the data displayed in the report. For example, by selecting a                 value in the  Ledger  box of this dialog box, you specify the                 ledger for which the data will be displayed in the report. To Select the Data Source Open the   ([~/?ScreenId=CS206010|CS206010]) Row Sets (CS206010),   ([~/?ScreenId=CS206020|CS206020]) Column Sets (CS206020), or   ([~/?ScreenId=CS206030|CS206030]) Unit Sets (CS206030) form by searching for or                     navigating to it.  To open any form, you can navigate to it or search             for it (by its name or by its form ID without periods). For more information about             search capabilities, see  Search in the Modern UI. Open the Data Source Editor dialog box by clicking the magnifier icon in the                          Data Source  cell of the required row, column or                     unit. Use the Data Source Editor dialog box to select the needed criteria. For more                     information, see  Data Source Editor. Click  OK  to save your selections, close the dialog box,                     and return to the form you were using. On the form toolbar, click  Save  to preserve the data                     source criteria you selected. ]]></column>
		</row>
		<row PageID="7c526367-736f-4a8d-b191-e8c980124435" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="f26751f5-cc1c-4a47-ce4e-02eeb555c060" RecordSourceID="22377">
			<column name="Content"><![CDATA[
An analytical report can be published on the Acumatica ERP site to become available to the Acumatica ERP application users. To publish the report, use the [HelpRoot_FormReference\SM_20_05_20|Site Map] ([~/?ScreenId=SM200520|SM200520]) form. 
==To publish an Analytical Report==[anchor|#_bdcd5f9a-43bf-4a7f-98c5-c043de68b474]
#Open the [HelpRoot_FormReference\SM_20_05_20|Site Map] ([~/?ScreenId=SM200520|SM200520]) form by searching for or navigating to it.
#:((({S:Hint}To open any form, you can navigate to it or search for it (by its name or by its form ID without periods). For more information about search capabilities, see [HelpRoot_Interface\UIG__con_New_UI_Search|Search in the Modern UI].
)))
#In the left pane, click a node icon to the left of any system suite to expand the node and view the modules in the suite. The items at the lower levels represent the elements of the navigation pane. 
#Select the relevant folder in the hierarchical structure of the modules.
#:((({S:Hint}Generally, you will want to add the report to the ''Reports'' folder, which lists the reports available for this module.
)))
#Add the analytical report to the list of the pages to be included in this folder.
#:((({S:Hint}For more information about adding an item to site map, see [HelpRoot_Administration\CU__how_Add_Item_to_Site_Map|To Add an Item to the Site Map]
)))

==To publish an Analytical Report using Report Definitions Form==[anchor|#_40b432c9-a725-4b17-bc2c-0318f39eb8e3]
#Open the [HelpRoot_FormReference\CS_20_60_00|Report Definitions] ([~/?ScreenId=CS206000|CS206000]) form by searching for or navigating to it.
#:((({S:Hint}To open any form, you can navigate to it or search for it (by its name or by its form ID without periods). For more information about search capabilities, see [HelpRoot_Interface\UIG__con_New_UI_Search|Search in the Modern UI].
)))
#In the '''Code''' box, select the report to publish.
#In the '''Location''' box, select the relevant folder in the hierarchical structure.
#In the '''Workspace''' box, select a workspace from which the report can be accessed.
#In the '''Category''' box, select a category under which the report will be displayed in the selected workspace.
#Click '''Save''' on the form toolbar.
{br}

After the report is published, the users who will generate the report must be granted access rights to this report. For more information about access rights, see [HelpRoot_FormReference\SM_20_10_20|Access Rights by Screen].]]></column>
			<column name="PlainText"><![CDATA[To Publish the Analytical Report An analytical report can be published on the  Acumatica ERP site to become available to the  Acumatica ERP application users. To publish the report, use the   ([~/?ScreenId=SM200520|SM200520]) Site Map(SM200520)  form.  To publish an Analytical Report Open the   ([~/?ScreenId=SM200520|SM200520]) Site Map (SM200520) form by 					searching for or navigating to it. To open any form, you can navigate to it or search             for it (by its name or by its form ID without periods). For more information about             search capabilities, see  Search in the Modern UI. In the left pane, click a node icon to the left of any system suite to expand 					the node and view the modules in the suite. The items at the lower levels 					represent the elements of the navigation pane.  Select the relevant folder in the hierarchical structure of the 						modules. Generally, you will want to add the report to the 							 Reports  folder, which lists the reports available for this 						module. Add the analytical report to the list of the pages to be included in this 						folder. For more information about adding an item to site map, see 							 To Add an Item to the Site Map To Add an Item to the Site MapTo publish an Analytical Report using Report Definitions Form Open the   ([~/?ScreenId=CS206000|CS206000]) Report Definitions (CS206000) form by 					searching for or navigating to it. To open any form, you can navigate to it or search             for it (by its name or by its form ID without periods). For more information about             search capabilities, see  Search in the Modern UI. In the  Code  box, select the report to publish. In the  Location  box, select the relevant folder in the 					hierarchical structure. In the  Workspace  box, select a workspace from which the 					report can be accessed. In the  Category  box, select a category under which the 					report will be displayed in the selected workspace. Click  Save  on the form toolbar. After the report is published, the users who will generate the report must be granted 				access rights to this report. For more information about access rights, see   ([~/?ScreenId=SM201020|SM201020]) Access Rights by Screen. ]]></column>
		</row>
		<row PageID="26868d9f-dc4d-4373-9318-60f3a326ec70" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="49c0cf8d-ac6f-a738-eaeb-2a1ed53935c6" RecordSourceID="22377">
			<column name="Content"><![CDATA[
 Acumatica ERP supports sending of multiple reports created in Analytical Report Manager (ARM). The reports can be merged into a report package to be sent as a single HTML or PDF file on the [HelpRoot_FormReference\SM_20_50_60|Send Reports] ([~/?ScreenId=SM205060|SM205060]) form.{br}

To merge the ARM reports:[anchor|#_a586968a-761c-44c8-96a1-581059a17ca4]
#On an ARM report form, set up and schedule a template for every report that you want to merge. For details, see [HelpRoot_GettingStarted\GS__how_Create_Report_Templates|To Create, Remove, and Schedule a Report Template].
#On the report form toolbar, click '''Schedule Template''', the '''Select Schedule Name''' dialog box opens.
#In the '''Select Schedule Name''' dialog box Select the '''Merge Reports''' check box and select a value in the '''Merging Order''' box for every report to be merged. The '''Merging Order''' box value indicates the position of the report in the resulting merged document.
#Navigate to the [HelpRoot_FormReference\SM_20_50_60|Send Reports] ([~/?ScreenId=SM205060|SM205060]) form, and process the merged reports.
]]></column>
			<column name="PlainText"><![CDATA[To Merge Analytical Reports  Acumatica ERP supports sending of multiple reports created in Analytical Report Manager (ARM).                 The reports can be merged into a report package to be sent as a single HTML or PDF                 file on the   ([~/?ScreenId=SM205060|SM205060]) Send                     Reports Send Reports (SM205060) form. To merge the ARM reports: On an ARM report form, set up and schedule a template for every report that you                     want to merge. For details, see  To Create, Remove, and Schedule a Report Template To Create, Remove, and Schedule a Report Template. On the report form toolbar, click  Schedule Template , the                          Select Schedule Name  dialog box opens. In the  Select Schedule Name  dialog box Select the                          Merge Reports  check box and select a value in the                          Merging Order  box for every report to be merged. The                          Merging Order  box value indicates the position of the                     report in the resulting merged document. Navigate to the   ([~/?ScreenId=SM205060|SM205060]) Send Reports Send Reports (SM205060) form, and process the merged reports. ]]></column>
		</row>
		<row PageID="8b2cceda-11d9-45b8-92ce-1dcf7dced9c7" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="8770ba65-3637-ad43-f2d0-7f1b3effc164" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The Analytical Report Manager (ARM) provides the functionality to produce accurate financial reports that can be customized according to your company&rsquo;s business needs.{br}

 Acumatica ERP comes with a number of predefined Analytical reports, such as Balance sheet, Balance Sheet Comparative, Profit and Loss, Profit and Loss by Product, and Statement of Cash Flows.{br}

Each analytical report consists of the following: [anchor|#_f39264e4-bd2d-47fc-b360-221f793907cd]
*a row set, which defines the rows to be used in the report. 
*a column set, which defines the report title, column headers, and columns of the report.
*a report definition, which defines the report and links together the row set and a column set of a report and defines report parameters. The report definition is also used to easily add a report to the site map.
*a unit set, which defines units to be used for the report. With unit sets, the user can quickly filter or consolidate the report data. The use of unit sets is optional.
{br}

((({S:Hint}If you are performing the steps of this example, we recommend that you set up your system with the ''SalesDemo'' database to populate it with demo data. For more information, see [HelpRoot_Install\Installing_ERP_Instance|To Deploy an Acumatica ERP Instance].
)))The report shown in the following screenshot will be examined as an example in this topic. You can perform the steps of this example or just read about them and become familiar with the report creation process. The purpose of this example is to provide the basic information to help you understand how the ARM works. This report consists of a row set, a column set, and a unit set, as you can see on the screenshot.[anchor|#_53141b3c-859d-4d15-8670-608fa894e93b][anchor|#_5a49b195-5869-4fb3-8240-bc4273445ca8][image:UserGuide/Images/RP_tools_ARM.png|popup|Profit & Loss report|450px]{br}{TOC}
==Creating a Sample Analytical Report==To create the report, do the following:[anchor|#_64d83ddc-3ee1-4129-a924-78e705352cfa]
#Open the [HelpRoot_FormReference\CS_20_60_00|Report Definitions] ([~/?ScreenId=CS206000|CS206000]) form by searching for or navigating to it. This form is used to create reports, set up various report parameters, and select a row set, a column set, and a unit set to be used for the report.
#In the '''Code''' box of the '''Report Definition''' section, select ''DPL''.
#On the form toolbar, click '''Copy Report'''. In the '''New Report Code''' dialog box, which appears, type <tt>SAMPLE DPL</tt> as the code, and click '''Copy'''. This closes the dialog box; you are now working with the copied version of the report with the ''SAMPLE DPL'' code, which is used to identify the report.
#In the '''Title''' box, change the value to <tt>Sample Profit & Loss</tt>, and click '''Save''' on the form toolbar. Now the ''SAMPLE DPL'' report will be available to access on the site map of the classic UI and through standard search functionality of the modern UI and classic UI. To find the report, you can simply type {{Sample Profit & Loss}} in the Search box.
#:The report you have just created uses a predefined row set, column set, and unit set; however, more experienced users may want to create their own sets from scratch or modify existing ones. Keep in mind that the row sets and column sets that you are working with can be used in other reports, so any modifications to existing sets may affect other reports. You can create new sets while using existing predefined sets as templates, so that making any changes to them affects only your report.
[anchor|#_1eae2cab-8d35-4fe1-adf4-40f38a395e8e]
==Previewing the Analytical Report==When the report has the required settings selected, you can preview it by doing the following:[anchor|#_8bf4cf4e-af33-4db1-9681-5680d5ead203]
#On the [HelpRoot_FormReference\CS_20_60_00|Report Definitions] ([~/?ScreenId=CS206000|CS206000]) form, select the needed report code in the '''Code''' box.
#Click '''Preview''' on the form toolbar.
#In the tab that opens, review the generated report and see if the changes you have made suit your needs.

==Creating a New Row Set==
You use row sets to define the rows and row headers of the report.{br}

The sample report is now configured with the same row set that is used by the predefined ''DPL - Profit and Loss'' analytical report. You can use the [HelpRoot_FormReference\CS_20_60_00|Report Definitions] ([~/?ScreenId=CS206000|CS206000]) form not only to select the row set to be used in the report, but also to review and quickly modify the specified row set or even create a new one. To modify row set, do the following:[anchor|#_77813ce9-2e60-4177-b8bd-b4065aca71da]
#On the [HelpRoot_FormReference\CS_20_60_00|Report Definitions] ([~/?ScreenId=CS206000|CS206000]) form for the report you have created (with the ''SAMPLE DPL'' code), click the '''Edit''' button, which is right of the '''Row Set''' box. 
#:This opens the [HelpRoot_FormReference\CS_20_60_10|Row Sets] ([~/?ScreenId=CS206010|CS206010]) form in a new browser tab with the row set selected. You can use this form to modify the row set or to copy one and create a new row set.
#On the form toolbar, click '''Copy Row Set'''. In the '''New Row Set Code''' dialog box, which appears, type <tt>SAMPLE DPL</tt> as the code, and click '''Copy'''. This closes the dialog box; the system returns you to the [HelpRoot_FormReference\CS_20_60_10|Row Sets] form with the copied version of the row set, which has the ''SAMPLE DPL'' code.
#:In this example, you will enhance the report with a '''Warehouse Assets''' section. To do this, you need to add two more rows to the ''SAMPLE DPL'' row set.
#On the table toolbar click '''Add Row'''. The row is added to the end of the list.
#In the respective columns of the newly added row, specify the following settings:
#*'''Code''': Type <tt>0048</tt>. This value will be used by the ARM to specify the position of the row in the list.
#*'''Description''': Type <tt>Warehouse Assets</tt>. This text will be displayed as the row header.
#*'''Type''': Select ''Caption''. This value indicates the type of the row.
#*'''Style''': Select <tt>Bold, Font Size 14</tt>.
#On the table toolbar, click '''Add Row'''. 
#In the respective columns of the newly added row, specify the following settings:
#*'''Code''': Type <tt>0049</tt>. This value indicates the position of the row in the list. With this code specified, the row will be displayed after the row that has the <tt>0048</tt> code.
#*'''Type''': Select ''GL''. The ''GL'' type gives you the ability to use actual ledger data.
#*In the '''Data Source''' box, click the magnifier icon, and in the dialog box that opens, select the following values: '''Expand''': Select ''Account''; '''Row Description''': Select ''Description-Code''; '''Account Class''': Select ''WAREHOUSE''. 
#*:With these settings, the expanded row will be displayed in the report, showing warehouse assets with each account in a separate line with a short description and a code.
#Click '''Save''' on the form toolbar.
#Go back to the browser tab with the [HelpRoot_FormReference\CS_20_60_00|Report Definitions] form with the ''SAMPLE DPL'' code selected, and enter '' SAMPLE DPL'' in the '''Row Sets''' box.
#Click '''Save''' on the form toolbar.
#Preview the report to verify that the new rows with warehouse assets are displayed properly. 
For more information about row sets in the Analytical Report Manager, see [HelpRoot_ReportingTools\CS__ARM_Row_Set|Row Sets]..
==Creating a New Column Set==
Column sets give you the convenience to work with various types of information, such as date ranges or financial periods. Column sets can have columns with calculated values.{br}

The sample report is now set up with the same column set as that used by the predefined ''Profit & Loss'' analytical report. You can use the [HelpRoot_FormReference\CS_20_60_00|Report Definitions] ([~/?ScreenId=CS206000|CS206000]) form not only to select the column set to be used in the report, but also to review and quickly modify the column set or even create a new one. To modify the column set, do the following:
#On the [HelpRoot_FormReference\CS_20_60_00|Report Definitions] form for the report you have created (with the ''SAMPLE DPL'' code), click the '''Edit''' button to the right of the '''Column Set''' box. 
#:The system opens the [HelpRoot_FormReference\CS_20_60_20|Column Sets] ([~/?ScreenId=CS206020|CS206020]) form in a new browser tab with the column set selected. You can use this form to modify a column set or to copy one and create a new column set.
#On the form toolbar, click '''Copy Column Set'''. In the '''New Column Set Code''' dialog box, which appears, type <tt>SAMPLE DPL</tt> as the code, and click '''Copy'''. This closes the dialog box; the system returns you to the the [HelpRoot_FormReference\CS_20_60_20|Column Sets] form with the copied version of the column set, which has the ''SAMPLE DPL'' code.
#:In this example, you will enhance the report with a column displaying the beginning balance of the selected ledger. To do this, you need to add a column in the lower table of the ''SAMPLE DPL'' column set.
#On the table toolbar of the lower table, click '''New'''. This will add column '''D''' to the upper and lower tables.
#Use the upper table to set up the header for the new column. To do this, in the upper table, in the fourth row of the new column '''D''', type <tt>=&rsquo;Beginning Balance&rsquo;</tt>
#Copy the style of the '''C''' column by clicking the fourth row of the '''C''' column and clicking '''Copy Style''' on the table toolbar. Then select the fourth row of the '''D''' column and click '''Paste Style''' on the table toolbar.
#Similarly, as described in the previous step, copy and paste the style of the fifth row of the '''C''' column to the fifth row of the '''D''' column.
#In the lower table, select the following settings for the '''D''' column:
#*'''Type''': Select ''GL''.
#*'''Format''': Type <tt>#,##0.00</tt>.
#*'''Data Source''': Click the magnifier icon, and in the dialog box that opens, select ''Beg. Balance'' in the '''Amount Type''' box.
#Click '''Save''' on the form toolbar.
#Go back to the browser tab with the [HelpRoot_FormReference\CS_20_60_00|Report Definitions] form with the ''SAMPLE DPL'' code selected, and select ''SAMPLE DPL'' in the '''Column Sets''' box.
#Click '''Save''' on the form toolbar.
#Preview the report to verify that the new column with the beginning balance is displayed properly. 
#:For more information about column sets in the Analytical Report Manager, see [HelpRoot_ReportingTools\CS__ARM_Column_Set|Column Sets]..

==Reviewing Unit Sets==
You can use unit sets to aggregate report data, so that multiple reports can be broken down and consolidated.{br}

The sample report is now set up with the same '''Unit Set''' as that of the predefined ''Profit & Loss'' analytical report. You can use the [HelpRoot_FormReference\CS_20_60_00|Report Definitions] ([~/?ScreenId=CS206000|CS206000]) form not only to select the '''Unit Set''' to be used in the report, but also to review and quickly modify the '''Unit Set''' or even create a new one. To modify column set, do the following:[anchor|#_208ec49f-291c-4c3e-b9f5-516f8ce87188]
#On the [HelpRoot_FormReference\CS_20_60_00|Report Definitions] ([~/?ScreenId=CS206000|CS206000]) form for the report you have created (with the ''SAMPLE DPL'' code), select ''PRODUCT'' in the '''Unit Set''' box.
#Click '''Save''' on the form toolbar. 
#:The selected unit set will be used for the report, which means that you can quickly filter or consolidate the report data by the product groups set up on the [HelpRoot_FormReference\CS_20_60_30|Unit Sets] ([~/?ScreenId=CS206030|CS206030]) form.
#Preview the report to verify that the selected unit set grouping entries by product groups are displayed properly.
For more information about unit sets in the Analytical Report Manager, see [HelpRoot_ReportingTools\CS__ARM_Unit_Set|Unit Sets]..]]></column>
			<column name="PlainText"><![CDATA[Example: Designing an Analytical Report The Analytical Report Manager (ARM) provides the functionality to produce accurate         financial reports that can be customized according to your company's business needs.  Acumatica ERP comes with a number of predefined Analytical reports, such as Balance sheet, Balance         Sheet Comparative, Profit and Loss, Profit and Loss by Product, and Statement of Cash         Flows. Each analytical report consists of the following:  a row set, which defines the rows to be used in the report.  a column set, which defines the report title, column headers, and columns of the             report. a report definition, which defines the report and links together the row set and a             column set of a report and defines report parameters. The report definition is also used             to easily add a report to the site map. a unit set, which defines units to be used for the report. With unit sets, the user             can quickly filter or consolidate the report data. The use of unit sets is             optional. If you are performing the steps of this example, we recommend that you set up your           system with the  SalesDemo  database to populate it with demo data. For more           information, see  To Deploy an Acumatica ERP Instance. The report shown in the following screenshot will be examined as an example in         this topic. You can perform the steps of this example or just read about them and become         familiar with the report creation process. The purpose of this example is to provide the         basic information to help you understand how the ARM works. This report consists of a row         set, a column set, and a unit set, as you can see on the screenshot. Profit & Loss report Creating a Sample Analytical Report To create the report, do the         following: Open the   ([~/?ScreenId=CS206000|CS206000]) Report Definitions (CS206000) form by searching for           or navigating to it. This form is used to create reports, set up various report           parameters, and select a row set, a column set, and a unit set to be used for the           report. In the  Code  box of the  Report Definition            section, select  DPL . On the form toolbar, click  Copy Report . In the  New             Report Code  dialog box, which appears, type  SAMPLE             DPL  as the code, and click  Copy . This closes the           dialog box; you are now working with the copied version of the report with the  SAMPLE             DPL  code, which is used to identify the report. In the  Title  box, change the value to  Sample Profit             & Loss , and click  Save  on the form toolbar. Now           the  SAMPLE DPL  report will be available to access on the site map of the classic UI           and through standard search functionality of the modern UI and classic UI. To find the           report, you can simply type  Sample Profit & Loss  in the Search             box. The report you have just created uses a predefined row set, column set, and unit             set; however, more experienced users may want to create their own sets from scratch or             modify existing ones. Keep in mind that the row sets and column sets that you are             working with can be used in other reports, so any modifications to existing sets may             affect other reports. You can create new sets while using existing predefined sets as             templates, so that making any changes to them affects only your report. Previewing the Analytical         Report When the report has the required settings selected, you can preview it by       doing the following: On the   ([~/?ScreenId=CS206000|CS206000]) Report Definitions (CS206000) form, select the needed           report code in the  Code  box. Click  Preview  on the form toolbar. In the tab that opens, review the generated report and see if the changes you have made           suit your needs. Creating a New Row Set You use row sets to define the rows and row         headers of the report. The sample report is now configured with the same row set that         is used by the predefined  DPL - Profit and Loss  analytical report. You can use the             ([~/?ScreenId=CS206000|CS206000]) Report Definitions (CS206000) form not only to select the row         set to be used in the report, but also to review and quickly modify the specified row set or         even create a new one. To modify row set, do the following: On the   ([~/?ScreenId=CS206000|CS206000]) Report Definitions (CS206000) form for the report             you have created (with the  SAMPLE DPL  code), click the                Edit  button, which is right of the  Row               Set  box.  This opens the   ([~/?ScreenId=CS206010|CS206010]) Row Sets               (CS206010) form in a new browser tab with the row set selected. You can use this form               to modify the row set or to copy one and create a new row set. On the form toolbar, click  Copy Row Set . In the  New               Row Set Code  dialog box, which appears, type  SAMPLE               DPL  as the code, and click  Copy . This closes the             dialog box; the system returns you to the   ([~/?ScreenId=CS206010|CS206010]) Row Sets             form with the copied version of the row set, which has the  SAMPLE DPL  code. In               this example, you will enhance the report with a  Warehouse                 Assets  section. To do this, you need to add two more rows to the                  SAMPLE DPL  row set. On the table toolbar click  Add Row . The row is added to the end             of the list. In the respective columns of the newly added row, specify the following settings: Code : Type  0048 . This value will be                 used by the ARM to specify the position of the row in the list. Description : Type  Warehouse Assets .                 This text will be displayed as the row header. Type : Select  Caption . This value indicates the type                 of the row. Style : Select  Bold, Font Size                 14 . On the table toolbar, click  Add Row .  In the respective columns of the newly added row, specify the following settings: Code : Type  0049 . This value                 indicates the position of the row in the list. With this code specified, the row                 will be displayed after the row that has the  0048  code. Type : Select  GL . The  GL  type gives you the                 ability to use actual ledger data. In the  Data Source  box, click the magnifier icon, and in                 the dialog box that opens, select the following values:                    Expand : Select  Account ;  Row                   Description : Select  Description-Code ;  Account                   Class : Select  WAREHOUSE .  With these settings, the expanded                   row will be displayed in the report, showing warehouse assets with each account in                   a separate line with a short description and a code. Click  Save  on the form toolbar. Go back to the browser tab with the   ([~/?ScreenId=CS206000|CS206000]) Report Definitions form             with the  SAMPLE DPL  code selected, and enter   SAMPLE DPL  in the                Row Sets  box. Click  Save  on the form toolbar. Preview the report to verify that the new rows with warehouse assets are displayed             properly.  For more information about row sets in the Analytical Report Manager, see  Row Sets.. Creating a New Column Set Column sets give you the convenience to work with various types of information, such as         date ranges or financial periods. Column sets can have columns with calculated values. The sample report is now set up with the same column set as that used by the predefined            Profit & Loss  analytical report. You can use the   ([~/?ScreenId=CS206000|CS206000]) Report Definitions (CS206000) form not only to select the column set to be used in the         report, but also to review and quickly modify the column set or even create a new one. To         modify the column set, do the following: On the   ([~/?ScreenId=CS206000|CS206000]) Report Definitions form for the report you have             created (with the  SAMPLE DPL  code), click the  Edit  button             to the right of the  Column Set  box.  The system opens the   ([~/?ScreenId=CS206020|CS206020]) Column Sets (CS206020) form in a new browser tab with               the column set selected. You can use this form to modify a column set or to copy one               and create a new column set. On the form toolbar, click  Copy Column Set . In the                New Column Set Code  dialog box, which appears, type                SAMPLE DPL  as the code, and click  Copy .             This closes the dialog box; the system returns you to the the   ([~/?ScreenId=CS206020|CS206020]) Column Sets form with the copied version of the column             set, which has the  SAMPLE DPL  code. In this example, you will enhance the               report with a column displaying the beginning balance of the selected ledger. To do               this, you need to add a column in the lower table of the  SAMPLE DPL  column               set. On the table toolbar of the lower table, click  New . This will             add column  D  to the upper and lower tables. Use the upper table to set up the header for the new column. To do this, in the upper             table, in the fourth row of the new column  D , type                ='Beginning Balance' Copy the style of the  C  column by clicking the fourth row of             the  C  column and clicking  Copy Style  on             the table toolbar. Then select the fourth row of the  D  column and             click  Paste Style  on the table toolbar. Similarly, as described in the previous step, copy and paste the style of the fifth             row of the  C  column to the fifth row of the                D  column. In the lower table, select the following settings for the  D                column: Type : Select  GL . Format : Type  #,##0.00 . Data Source : Click the magnifier icon, and in the dialog                 box that opens, select  Beg. Balance  in the  Amount Type                  box. Click  Save  on the form toolbar. Go back to the browser tab with the   ([~/?ScreenId=CS206000|CS206000]) Report Definitions form             with the  SAMPLE DPL  code selected, and select  SAMPLE DPL  in the                Column Sets  box. Click  Save  on the form toolbar. Preview the report to verify that the new column with the beginning balance is             displayed properly.  For more information about column sets in the Analytical Report               Manager, see  Column Sets.. Reviewing Unit Sets You can use unit sets to aggregate report data, so         that multiple reports can be broken down and consolidated. The sample report is now         set up with the same  Unit Set  as that of the predefined  Profit           & Loss  analytical report. You can use the   ([~/?ScreenId=CS206000|CS206000]) Report Definitions (CS206000) form not only to select the  Unit Set  to         be used in the report, but also to review and quickly modify the  Unit           Set  or even create a new one. To modify column set, do the following: On the   ([~/?ScreenId=CS206000|CS206000]) Report Definitions (CS206000) form for the report you           have created (with the  SAMPLE DPL  code), select  PRODUCT  in the              Unit Set  box. Click  Save  on the form toolbar.  The selected unit set will be             used for the report, which means that you can quickly filter or consolidate the report             data by the product groups set up on the   ([~/?ScreenId=CS206030|CS206030]) Unit Sets             (CS206030) form. Preview the report to verify that the selected unit set grouping entries by product           groups are displayed properly. For more information about unit sets in the Analytical Report Manager, see  Unit Sets.. ]]></column>
		</row>
		<row PageID="ec388462-018b-411a-9863-be63b870f409" Language="en-US" PageRevisionID="1" Content="&#xA;The following Analytical Report Manager (ARM) reference documents will help you to use advanced cell formatting features and set up the desired printing style in your report.&#xA;==In This Part==[anchor|#_3227b0ac-39f5-4c56-bc9c-2c993b5dac39]&#xA;*[HelpRoot_ReportingTools\CS__ARM_Cells_Formatting|Cell Formatting]&#xA;*[HelpRoot_ReportingTools\CS__ARM_Functions|Formula Functions]&#xA;*[HelpRoot_ReportingTools\CS__ARM_Operators|Formula Operators]&#xA;*[HelpRoot_ReportingTools\CS__ARM_Formula_Parameters|Formula Parameters]&#xA;*[HelpRoot_ReportingTools\CS__ARM_Printing_Style|Printing Style]&#xA;" PlainText="ARM Reference The following Analytical Report Manager (ARM) reference documents will help you to use         advanced cell formatting features and set up the desired printing style in your report. In This Part Cell FormattingFormula FunctionsFormula OperatorsFormula ParametersPrinting Style" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="41a41a42-da08-269e-5c9d-f362cc511bb8" RecordSourceID="22377" />
		<row PageID="13a86d40-60db-4339-92aa-d7959c23ac2d" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="7bec7f1b-2869-29ae-62a1-cad624e12c58" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You use the format functions specified for the '''Format''' attribute on the [HelpRoot_FormReference\CS_20_60_20|Column Sets] ([~/?ScreenId=CS206020|CS206020]) form (for a column cell) and on the [HelpRoot_FormReference\CS_20_60_10|Row Sets] ([~/?ScreenId=CS206010|CS206010]) form (for a row cell). To specify the format for the column or row cells, you can use the standard formats defined for the format function in .Net. Standard (numeric and datetime) and user-defined data formats are supported. {br}

The standard numeric data formats use the form ''Axx'', where ''A'' is a single alphabetic character called the format specifier, and ''xx'' is an optional integer called the precision specifier. The precision specifier ranges from 0 to 99 and controls the number of significant digits or zeros to the right of the decimal point. The format string cannot contain spaces. {br}

The standard ''DateTime'' format string consists of a single format specifier character. If the format specifier is not found in the list of standard string format specifiers, a runtime exception occurs. If the format string is longer than a single character (even if the extra characters are blanks), the format string is interpreted as a custom format string. {br}

If the standard numeric format specifiers do not provide the type of formatting required by the report, you can use custom format strings. The custom format strings use the format characters to specify what symbol should be placed in the specific position of the format string. Any numeric format string that does not fit the definition of a standard numeric format string is interpreted as a custom numeric format string. Thus, the format string ''c!'' is interpreted as a custom format string because it contains two alphabetic characters, even though the character ''c'' is a standard numeric format specifier. The custom ''DateTime'' format specifiers can be used to create a custom ''DateTime'' format string. [anchor|#_ezs_qwh_1h]
===Standard Numeric Format Strings===The following table includes the standard numeric format strings and their descriptions. Note that the result string produced by these format specifiers is influenced by the settings specified in the '''Regional Options''' control panel of your machine. Computers using different settings will generate different result strings. 
{| class="checklist" | width="100%" 
|- 
!width="19%" ! Format specifier
!width="22%" ! Name
!width="58%" ! Description
|- 
| ''C'' or ''c''
|  Currency
| 
 The numbers in the report row or column will be converted to strings that represent the currency amounts. The precision specifier indicates the number of decimal places to be shown.{br}

'''Examples''': ''c'', ''c2''{br}

 You can use a currency symbol in the report rows, such as the U.S. dollar symbol (''$'') or the Euro symbol (''€''). To set up the required symbol, use the format string as shown in the following example.{br}

'''Example (for Euro)''': ''\€ #,##0.00''{br}

 Any symbol that you type after the backslash (''\'') will be printed as it is.
|- 
| ''D'' or ''d''
|  Decimal
| 
This format is supported for integral types only. The number is converted to a string of decimal digits (0 to 9), preceded by a minus sign if the number is negative. The precision specifier indicates the minimum number of digits in the resulting string. If required, the number is padded with zeros to its left to produce the number of digits given by the precision specifier. The exponent always consists of a plus or minus sign and a minimum of three digits. The exponent is padded with zeros to meet this minimum, if required.{br}

'''Examples''': ''d'', ''d4''
|- 
| __ ''E''__ or __''e''__
|  Scientific (exponential; this format is very seldom used in analytical reports)
| 
 The number is converted to a string of the form ''-d.ddd... E+ddd'' or ''-d.ddd... e+ddd'', where each ''d'' indicates a digit (0 to 9). The string starts with a minus sign if the number is negative. One digit always precedes the decimal point. The precision specifier indicates the appropriate number of digits after the decimal point. If the precision specifier is omitted, a default of six digits after the decimal point is used. The case of the format specifier indicates whether to prefix the exponent with an ''E'' or an ''e''. The exponent always consists of a plus or minus sign and a minimum of three digits. The exponent is padded with zeros to meet this minimum, if required.{br}

'''Examples''': ''e'', ''e2''
|- 
|  ''F'' or ''f''
|  Fixed point
| 
 The number is converted to a string of the form ''-ddd.ddd...'' where each ''d'' indicates a digit (0 to 9). The string starts with a minus sign if the number is negative. The precision specifier indicates the number of decimal places to be shown.{br}

'''Examples''': ''f'', ''f4''
|- 
|  ''G'' or ''g''
|  General
|  The number is converted to the most compact of the fixed-point or scientific notation, depending on the type of the number and whether a precision specifier is present. If the precision specifier is omitted or zero, the type of the number determines the default precision, as indicated by the following list. [anchor|#_b1t_qwh_1h]
*Byte or SByte: 3
*Int16 or UInt16: 5
*Int32 or UInt32: 10
*Int64 or UInt64: 19
*Single: 7
*Double: 15
*Decimal: 29

Fixed-point notation is used if the exponent that would result from expressing the number in scientific notation is greater than –5 and less than the precision specifier; otherwise, scientific notation is used. The result contains a decimal point, if required, and trailing zeros are omitted. If the precision specifier is present and the number of significant digits in the result exceeds the specified precision, then the excess trailing digits are removed by rounding. If scientific notation is used, the exponent in the result is preceded by ''E'' if the format specifier is ''G'', or ''e'' if the format specifier is ''g''. The exception to the preceding rule is if the number is a decimal and the precision specifier is omitted. In that case, fixed-point notation is always used and trailing zeros are preserved.{br}

'''Examples''': ''g'', ''g4''
|- 
|  ''N'' or ''n''
|  Number
| 
 The number is converted to a string of the form ''-d,ddd,ddd.ddd...'' where each ''d'' indicates a digit (0 to 9). The string starts with a minus sign if the number is negative. Thousand separators are inserted between each group of three digits to the left of the decimal point. The precision specifier indicates the number of decimal places to be shown. {br}

'''Examples''': ''n'', ''n4''
|- 
|  ''P'' or ''p''
|  Percent
| 
 The number is converted to a string that represents a percent. The converted number is multiplied by 100 in order to be presented as a percentage. The precision specifier indicates the number of decimal places to be shown.{br}

'''Examples''': ''p'', ''p4''
|- 
|  ''R'' or ''r''
|  Round-trip (this format is very seldom used in analytical reports)
| 
 The round-trip specifier guarantees that a numeric value converted to a string will be parsed back into the same numeric value. When a numeric value is formatted using this specifier, it is first tested using the general format, with 15 spaces of precision for a ''Double'' and 7 spaces of precision for a ''Single''. If the value is successfully parsed back to the same numeric value, it is formatted by using the general format specifier. However, if the value is not successfully parsed back to the same numeric value, then the value is formatted by using 17 digits of precision for a ''Double'' and 9 digits of precision for a ''Single''. Although a precision specifier can be appended to the round-trip format specifier, it is ignored. Round trips are given precedence over precision when you use this specifier. This format is supported by floating-point types only.{br}

'''Example''': ''r''
|- 
|  ''X'' or ''x''
|  Hexadecimal (this format is very seldom used in analytical reports)
| 
 The number is converted to a string of hexadecimal digits. The case of the format specifier indicates whether to use uppercase or lowercase characters for the hexadecimal digits greater than 9. For example, use ''X'' to produce ''ABCDEF'', and ''x'' to produce ''abcdef''. The precision specifier indicates the minimum number of digits in the resulting string. If required, the number is padded with zeros to its left to produce the number of digits given by the precision specifier. This format is supported for integral types only.{br}

'''Examples''': ''x'' ''X''
|}[anchor|#_vlr_tvh_1h]
===Custom Numeric Format Strings===The following table shows the characters you can use to create custom numeric format strings and their definitions. Note that the result strings produced by some of these characters are influenced by the settings in the '''Regional Options''' control panel. Computers that use different cultures will generate different result strings. 
{| class="checklist" | width="100%" 
|- 
!width="22%" ! Format character
!width="19%" ! Name
!width="57%" ! Description
|- 
| ''0''
|  Zero placeholder
|  If the value being formatted has a digit in the position where the ''0'' appears in the format string, then that digit is copied to the result string. The position of the leftmost ''0'' before the decimal point and the rightmost ''0'' after the decimal point determines the range of digits that are always present in the result string. The ''00'' specifier causes the value to be rounded to the nearest digit preceding the decimal, where rounding away from zero is always used. For example, formatting 34.5 with ''00'' would result in the value 35.
|- 
| ''#''
|  Digit placeholder
| 
 If the value being formatted has a digit in the position where the ''#'' appears in the format string, then that digit is copied to the result string. Otherwise, nothing is stored in that position in the result string. Note that this specifier never displays the ''0'' character if it is not a significant digit, even if ''0'' is the only digit in the string. This specifier displays the ''0'' character if it is a significant digit in the number being displayed. The ''##'' format string causes the value to be rounded to the nearest digit preceding the decimal, where rounding away from zero is always used. For example, formatting 34.5 with ''##'' would result in the value 35.{br}

 Examples: {br}

{{,##0.00}} }}{br}

{{"(###) ### - ####"}}
|- 
| ''.''
|  Decimal point
|  The first ''.'' character in the format string determines the location of the decimal separator in the formatted value; any additional ''.'' characters are ignored. The actual character used as the decimal separator is determined by the settings in the '''Regional Options''' control panel.
|- 
| '',''
|  Thousand separator and number scaling
|  This character serves two purposes. First, if the format string contains a '','' character between two digit placeholders (0 or #) and to the left of the decimal point if one is present, then the output will have thousand separators inserted between each group of three digits (counting from the right) to the left of the decimal separator. The actual character used as the decimal separator in the result string is determined by the settings in the ''Regional Options'' control panel. Second, if the format string contains at least one '','' character immediately to the left of the decimal point, then the number will be divided by the number of '','' characters multiplied by 1000 before it is formatted. For example, the format string ''0,,'' will represent 100 million as simply 100. The '','' character indicates that scaling does not include thousand separators in the formatted number. Thus, to scale a number by 1 million and insert thousand separators, you would use the format string ''#,##0,,''.
|- 
| ''%''
|  Percentage placeholder
|  The presence of the ''%'' character in a format string causes a number to be multiplied by 100 before it is formatted. The appropriate symbol is inserted in the number itself at the location where the ''%'' appears in the format string. The percent character used is dependent on the settings in the '''Regional Options''' control panel.
|- 
| ''E0'' ''E+0'' ''E-0'' ''e0''e+0
''e-0''
|  Scientific notation
|  If any of the strings ''E'', ''E+'', ''E-'', ''e'', ''e+'', or ''e-'' is present in the format string and followed immediately by at least one ''0'' character, then the number is formatted using scientific notation with an ''E'' or ''e'' inserted between the number and the exponent. The number of ''0'' characters following the scientific notation indicator determines the minimum number of digits to output for the exponent. The ''E+'' and ''e+'' formats indicate that a sign character (plus or minus) should always precede the exponent. The ''E'', ''E-'', ''e'', and ''e-'' formats indicate that a sign character should only precede negative exponents.
|- 
| ''\''
|  Escape character
|  In C# and C++, the backslash character causes the next character in the format string to be interpreted as an escape sequence. This character is used with traditional formatting sequences like ''\n'' (new line).
|- 
| ''&rsquo;ABC&rsquo;'' ''&ldquo;ABC&ldquo;''
|  Literal string
|  Characters enclosed in single or double quotes are copied to the result string literally, and do not affect formatting.
|- 
| '';''
|  Section separator
|  This character is used to separate sections for positive, negative, and zero numbers in the format string.
|- 
| ''Other''
|  All other characters
|  All other characters are copied to the result string as literals in the position in which they appear.
|}[anchor|#_kqn_1wh_1h]
===Standard DateTime Format Strings===
The following table describes the standard date/time format specifiers. The output of these format specifiers is influenced by the current culture and the settings in the '''Regional Options''' control panel. 
{| class="checklist" | width="100%" 
|- 
!width="18%" ! Format character
!width="24%" ! Name
!width="57%" ! Description
|- 
| ''d''
|  Short date pattern
| 
Displays a value in the short date format. {br}

Depending on the settings in the '''Regional Options''' control panel, the value can be in one of the following formats: [anchor|#ul_jj5_d3x_2r]
*''M/d/yyyy'' (for ''en-US'' local settings)
*''yyyy/MM/dd'' (for ''ja-JP'' local settings)
*''dd/MM/yyyy'' (for ''fr-FR'' local settings)
{br}

'''Example''': ''d''
|- 
|  ''D''
|  Long date pattern
| 
 Displays a value in the long date format. {br}

Depending on the settings in the '''Regional Options''' control panel, the value can be in one of the following formats: [anchor|#ul_gw2_43x_2r]
*''dddd, MMMM dd, yyyy'' (for ''en-US'' local settings) 
*''yyyy&rsquo;?&rsquo;M&rsquo;?&rsquo;d&rsquo;?&rsquo;'' (for ''ja-JP'' local settings)
*''dddd d MMMM yyyy'' (for ''fr-FR'' local settings)
{br}

'''Example''': ''D''
|- 
|  ''t''
|  Short time pattern
| 
 Displays a value in the short time format. {br}

Depending on the settings in the '''Regional Options''' control panel, the value can be in one of the following formats:[anchor|#ul_ff3_s3x_2r]
*''h:mm tt'' (for ''en-US'' local settings) 
*''H:mm'' (for ja-JP local settings)
*''HH:mm'' (for fr-FR local settings)
{br}

'''Example''': ''t''
|- 
|  ''T''
|  Long time pattern
| 
 Displays a value in the long time format. {br}

Depending on the settings in the '''Regional Options''' control panel, the value can be in one of the following formats: [anchor|#ul_ydk_v3x_2r]
*''h:mm:ss tt'' (for ''en-US'' local settings)
*''H:mm:ss'' (for ''ja-JP'' local settings)
*''HH:mm:ss'' (for ''fr-FR'' local settings)
{br}

'''Example''': ''T''
|- 
|  ''f''
|  Full date/time pattern (short time)
| 
 Displays a value in a combination of the long date and short time format patterns, separated by a space.{br}

'''Example''': ''f''
|- 
|  ''F''
|  Full date/time pattern (long time)
| 
 Displays a value in a full date/time format. {br}

Depending on the settings in the '''Regional Options''' control panel, the value can be in one of the following formats:[anchor|#ul_ihz_z3x_2r]
*''yyyy h:mm:ss tt'' (for ''en-US'' local settings)
*''yyyy&rsquo;?&rsquo;M&rsquo;?&rsquo;d&rsquo;?&rsquo; H:mm:ss'' (for ''ja-JP'' local settings)
*''dddd d MMMM yyyy HH:mm:ss'' (for ''fr-FR'' local settings)
{br}

'''Example''': ''F''
|- 
|  ''g''
|  General date/time pattern (short time)
| 
Displays a combination of the short date and short time patterns, separated by a space.{br}

'''Example''': ''g''
|- 
|  ''G''
|  General date/time pattern (long time)
| 
 Displays a combination of the short date and long time patterns, separated by a space.{br}

'''Example''': ''G''
|- 
|  ''M'' or ''m''
|  Month day pattern
| 
 Displays the day of month defined by the value. {br}

Depending on the settings in the '''Regional Options''' control panel, the value can be in one of the following formats:[anchor|#ul_kjt_djx_2r]
*''MMMM dd'' (for ''en-US'' local settings)
*''M&rsquo;?&rsquo;d&rsquo;?&rsquo;'' (for ''ja-JP'' local settings)
*''d MMMM'' (for ''fr-FR'' local settings
{br}

'''Example''': ''M''{{m}}
|- 
| ''R'' or ''r''
|  RFC1123 pattern
| 
 Displays a time value based on the Internet Engineering Task Force (IETF) Request for Comments (RFC) 1123 specification. This specification sets the following common time format (regardless of the settings in the '''Regional Options''' control panel): ''ddd, dd MMM yyyy HH&rsquo;:&rsquo;mm&rsquo;:&rsquo;ss &rsquo;GMT&rsquo;''.{br}

 Formatting does not modify the ''DateTime'' value; therefore, you must adjust the value to GMT before formatting. {br}

'''Examples''': ''R'', {{r}}
|- 
| ''s''
|  Sortable date/time pattern; conforms to ISO 8601
| 
 Displays a date and time in ISO 8601-compatible format. The format uses the following custom format: ''yyyy-MM-ddTHH:mm:ss''.{br}

'''Example''': ''s''
|- 
|  ''u''
|  Universal sortable date/time pattern
| 
 Displays a time value in a standard defined form. This specification sets the following common time format (regardless of the settings in the '''Regional Options''' control panel): ''yyyy-MM-dd HH:mm:ssZ''.{br}

 No time zone conversion is done when the date and time is formatted; therefore, convert a local date and time to universal time before using this format specifier. {br}

'''Example''': ''u''
|- 
|  ''Y'' or ''y''
|  Year month pattern
| 
 Displays a year value. {br}

Depending on the settings in the '''Regional Options''' control panel, the value can be in one of the following formats:[anchor|#ul_icl_vjx_2r]
*''MMMM, yyyy'' (for ''en-US'' local settings)
*''yyyy&rsquo;?&rsquo;M&rsquo;?&rsquo;'' (for ''ja-JP'' local settings)
*''MMMM yyyy'' (for ''fr-FR'' local settings)
{br}

'''Examples''': ''Y''{{y}}
|}[anchor|#_dnh_fwh_1h]
===Custom DateTime Format Strings===
The following table describes the custom date/time format specifiers. The output of these format specifiers is influenced by the current culture and the settings in the '''Regional Options''' control panel.
{| class="checklist" | width="100%" 
|- 
!width="36%" ! Format specifier
!width="63%" ! Description
|- 
| ''d''
|  Displays the current day of the month, expressed as a number between 1 and 31. If the day is a single digit only (1 to 9), then it is displayed as a single digit. Note that if the ''d'' format specifier is used without other custom format strings, it is interpreted as the standard format specifier for the short date pattern. If the ''d'' format specifier is passed with other custom format specifiers or the ''%'' character, it is interpreted as a custom format specifier.
|- 
| ''ddd''
|  Displays the abbreviated name of the day for the specified DateTime.
|- 
| ''dddd'' (plus any number of additional ''d'' characters)
|  Displays the full name of the day for the specified DateTime.
|- 
| ''f''
|  Displays the most significant digit of the seconds fraction. Note that if the ''f'' format specifier is used alone, without other custom format strings, it is interpreted as the full (long date + short time) format specifier. If the ''f'' format specifier is passed with other custom format specifiers or the ''%'' character, it is interpreted as a custom format specifier.
|- 
| ''ff''
|  Displays the two most significant digits of the seconds fraction.
|- 
| ''fff''
|  Displays the three most significant digits of the seconds fraction.
|- 
| ''ffff''
|  Displays the four most significant digits of the seconds fraction.
|- 
| ''fffff''
|  Displays the five most significant digits of the seconds fraction.
|- 
| ''ffffff''
|  Displays the six most significant digits of the seconds fraction.
|- 
| ''fffffff''
|  Displays the seven most significant digits of the seconds fraction.
|- 
| ''F''
|  Displays the most significant digit of the seconds fraction. Nothing is displayed if the digit is zero.
|- 
| ''FF''
|  Displays the two most significant digits of the seconds fraction. However, trailing zeros or two zero digits are not displayed.
|- 
| ''FFF''
|  Displays the three most significant digits of the seconds fraction. However, trailing zeros or three zero digits are not displayed.
|- 
| ''FFFF''
|  Displays the four most significant digits of the seconds fraction. However, trailing zeros or four zero digitsare not displayed.
|- 
| ''FFFFF''
|  Displays the five most significant digits of the seconds fraction. However, trailing zeros or five zero digits are not displayed.
|- 
| ''FFFFFF''
|  Displays the six most significant digits of the seconds fraction. However, trailing zeros or six zero digits are not displayed.
|- 
| ''FFFFFFF''
|  Displays the seven most significant digits of the seconds fraction. However, trailing zeros or seven zero digits are not displayed.
|- 
| ''g'' or ''gg'' (plus any number of additional ''g'' characters)
|  Displays the era (A.D. for example) for the specified ''DateTime'' value. Note that if the ''g'' format specifier is used alone, without other custom format strings, it is interpreted as the standard general format specifier. If the ''g'' format specifier is passed with other custom format specifiers or the ''%'' character, it is interpreted as a custom format specifier.
|- 
| ''h''
|  Displays the hour for the specified ''DateTime'' value in the range 1 to 12. The hour represents whole hours passed since either midnight (displayed as 12) or noon (also displayed as 12). If this format is used alone, then the same hour before or after noon is indistinguishable. If the hour is a single digit (1 to 9), it is displayed as a single digit. No rounding occurs when the hour is displayed. For example, a ''DateTime'' of 5:43 returns 5.
|- 
| ''hh'', ''hh'' (plus any number of additional ''h'' characters)
|  Displays the hour for the specified DateTime value in the range 1 to 12. The hour represents whole hours passed since either midnight (displayed as 12) or noon (also displayed as 12). If this format is used alone, then the same hour before or after noon is indistinguishable. If the hour is a single digit (1 to 9), it is formatted with a preceding 0 (01-09).
|- 
| ''H''
|  Displays the hour for the specified ''DateTime'' value in the range 0 to 23. The hour represents whole hours passed since midnight (displayed as 0). If the hour is a single digit (0 to 9), it is displayed as a single digit.
|- 
| ''HH, HH'' (plus any number of additional ''H'' characters)
|  Displays the hour for the specified ''DateTime'' value in the range 0 to 23. The hour represents whole hours passed since midnight (displayed as 0). If the hour is a single digit (0 to 9), it is formatted with a preceding 0 (01 to 09).
|- 
| ''m''
|  Displays the minute for the specified ''DateTime'' value in the range 0 to 59. The minute represents whole minutes passed since the last hour. If the minute is a single digit (0 to 9), it is displayed as a single digit. Note that if the ''m'' format specifier is used alone, without other custom format strings, it is interpreted as the standard format specifier for the month-day pattern. If the ''m'' format specifier is passed with other custom format specifiers or the ''%'' character, it is interpreted as a custom format specifier.
|- 
| ''mm'', ''mm'' (plus any number of additional ''m'' characters)
|  Displays the minute for the specified DateTime in the range 0 to 59. The minute represents whole minutes passed since the last hour. If the minute is a single digit (0 to 9), it is formatted with a preceding 0 (01 to 09).
|- 
| ''M''
|  Displays the month, expressed as a number between 1 and 12. If the month is a single digit (1 to 9), it is displayed as a single digit. Note that if the ''M'' format specifier is used alone, without other custom format strings, it is interpreted as the standard format specifier for the month-day pattern. If the ''M'' format specifier is passed with other custom format specifiers or the ''%'' character, it is interpreted as a custom format specifier.
|- 
| ''MM''
|  Displays the month, measured as a number between 1 and 12. If the month is a single digit (1 to 9), it is formatted with a preceding 0 (01 to 09).
|- 
| ''MMM''
|  Displays the abbreviated name of the month for the specified ''DateTime'' value.
|- 
| ''MMMM''
|  Displays the full name of the month for the specified ''DateTime'' value.
|- 
| ''s''
|  Displays the seconds for the specified ''DateTime'' value in the range 0 to 59. The second represents whole seconds passed since the last minute. If the second is a single digit (0 to 9), it is displayed as a single digit only. Note that if the ''s'' format specifier is used alone, without other custom format strings, it is interpreted as the standard sortable format specifier for the date-time pattern. If the ''s'' format specifier is passed with other custom format specifiers or the ''%'' character, it is interpreted as a custom format specifier.
|- 
| ''ss'', ''ss'' (plus any number of additional ''s'' characters)
|  Displays the seconds for the specified ''DateTime'' value in the range 0 to 59. The second represents whole seconds passed since the last minute. If the second is a single digit (0 to 9), it is displayed as a single digit only. Note that if the ''s'' format specifier is used alone, without other custom format strings, it is interpreted as the standard sortable format specifier for the date-time pattern. If the ''s'' format specifier is passed with other custom format specifiers or the ''%'' character, it is interpreted as a custom format specifier.
|- 
| ''ss'', ''ss'' (plus any number of additional ''s'' characters)
|  Displays the seconds for the specified DateTime in the range 0 to 59. The second represents whole seconds passed since the last minute. If the second is a single digit (0 to 9), it is formatted with a preceding 0 (01 to 09).
|- 
| ''t''
|  Displays the first character of the a.m./p.m. designator for the specified ''DateTime'' value. Note that if the ''t'' format specifier is used alone, without other custom format strings, it is interpreted as the standard format specifier for the long time pattern. If the ''t'' format specifier is passed with other custom format specifiers or the ''%'' character, it is interpreted as a custom format specifier.
|- 
| ''tt'', ''tt'' (plus any number of additional ''t'' characters)
|  Displays the a.m./p.m. designator for the specified ''DateTime'' value.
|- 
| ''y''
|  Displays the year for the specified ''DateTime'' value as a maximum two-digit number. The first two digits of the year are omitted. If the year is a single digit (1 to 9), it is displayed as a single digit. Note that if the ''y'' format specifier is used alone, without other custom format strings, it is interpreted as the standard format specifier for the short date pattern. If the ''y'' format specifier is passed with other custom format specifiers or the ''%'' character, it is interpreted as a custom format specifier.
|- 
| ''yy''
|  Displays the year for the specified ''DateTime'' value as a maximum two-digit number. The first two digits of the year are omitted. If the year is a single digit (1 to 9), it is formatted with a preceding 0 (01 to 09).
|- 
| ''yyyy''
|  Displays the year for the specified ''DateTime'' value, including the century. If the year is fewer than four digits in length, then preceding zeros are appended as necessary to make the displayed year four digits long.
|- 
| ''z''
|  Displays the time zone offset for the system&rsquo;s current time zone in whole hours only. The offset is always displayed with a leading sign (zero is displayed as ''+0''), indicating hours ahead of Greenwich mean time (+) or hours behind Greenwich mean time (–). The range of values is –12 to +13. If the offset is a single digit (0 to 9), it is displayed as a single digit with the appropriate leading sign. The setting for the time zone is specified as ''+X'' or ''–X'', where ''X'' is the offset in hours from GMT. The displayed offset is affected by daylight saving time.
|- 
| ''zz''
|  Displays the time zone offset for the system&rsquo;s current time zone in whole hours only. The offset is always displayed with a leading or trailing sign (zero is displayed as ''+00''), indicating hours ahead of Greenwich mean time (+) or hours behind Greenwich mean time (–). The range of values is –12 to +13. If the offset is a single digit (0 to 9), it is formatted with a preceding 0 (01 to 09) with the appropriate leading sign. The setting for the time zone is specified as ''+X'' or ''–X'', where ''X'' is the offset in hours from GMT. The displayed offset is affected by daylight saving time.
|- 
| ''zzz'', ''zzz'' (plus any number of additional ''z'' characters)
|  Displays the time zone offset for the system&rsquo;s current time zone in whole hours only. The offset is always displayed with a leading or trailing sign (zero is displayed as ''+00''), indicating hours ahead of Greenwich mean time (+) or hours behind Greenwich mean time (–). The range of values is –12 to +13. If the offset is a single digit (0 to 9), it is formatted with a preceding 0 (01 to 09) with the appropriate leading sign. The setting for the time zone is specified as ''+X'' or ''–X'', where ''X'' is the offset in hours from GMT. The displayed offset is affected by daylight saving time.
|- 
| '':''
|  Serves as a time separator.
|- 
| ''/''
|  Functions as a date separator.
|- 
| ''&ldquo;''
|  Indicates a quoted string. Displays the literal value of any string between two quotation marks preceded by the escape character (/).
|- 
| ''&rsquo;''
|  Indicates a quoted string. Displays the literal value of any string between two single quotation marks.
|- 
| ''%c''
|  Where ''c'' is both a standard format specifier and a custom format specifier, displays the custom format pattern associated with the format specifier. Note that if a format specifier is used alone as a single character, it is interpreted as a standard format specifier. Only format specifiers consisting of two or more characters are interpreted as custom format specifiers. In order to display the custom format for a specifier defined as both a standard and a custom format specifier, precede the specifier with a ''%'' symbol.
|- 
| ''\c''
|  Where ''c'' is any character, displays the next character as a literal. The escape character cannot be used to create an escape sequence (like ''\n'' for new line) in this context.
|}
==Related Articles==
*[HelpRoot_ReportingTools\CS__ARM_Analytical_Report_Parameters|Analytical Report Manager]
*[HelpRoot_ReportingTools\CS__ARM_Column_Set|Column Sets]
*[HelpRoot_ReportingTools\CS__ARM_Row_Set|Row Sets]
*[HelpRoot_ReportingTools\CS__ARM_Data_Source|Data Source]
*[HelpRoot_ReportingTools\CS__ARM_Printing_Style|Printing Style]
*[HelpRoot_ReportingTools\CS__ARM_Formulas|Formulas]]]></column>
			<column name="PlainText"><![CDATA[Cell Formatting You use the format functions specified for the  Format  attribute on the        ([~/?ScreenId=CS206020|CS206020]) Column Sets (CS206020) form (for a column cell) and on the   ([~/?ScreenId=CS206010|CS206010]) Row Sets (CS206010) form (for a row cell). To specify the format for the     column or row cells, you can use the standard formats defined for the format function in .Net.     Standard (numeric and datetime) and user-defined data formats are supported.  The standard numeric data formats use the form  Axx , where  A  is a single     alphabetic character called the format specifier, and  xx  is an optional integer called     the precision specifier. The precision specifier ranges from 0 to 99 and controls the number of     significant digits or zeros to the right of the decimal point. The format string cannot contain     spaces.  The standard  DateTime  format string consists of a single format specifier character. If     the format specifier is not found in the list of standard string format specifiers, a runtime     exception occurs. If the format string is longer than a single character (even if the extra     characters are blanks), the format string is interpreted as a custom format string.  If the standard numeric format specifiers do not provide the type of formatting required by     the report, you can use custom format strings. The custom format strings use the format     characters to specify what symbol should be placed in the specific position of the format     string. Any numeric format string that does not fit the definition of a standard numeric format     string is interpreted as a custom numeric format string. Thus, the format string  c!  is     interpreted as a custom format string because it contains two alphabetic characters, even though     the character  c  is a standard numeric format specifier. The custom  DateTime  format     specifiers can be used to create a custom  DateTime  format string.  Standard Numeric Format Strings The following table includes the standard numeric format strings and their descriptions.      Note that the result string produced by these format specifiers is influenced by the settings      specified in the  Regional Options  control panel of your machine.      Computers using different settings will generate different result strings.  Format specifier Name Description C  or  c  Currency  The numbers in the report row or column will be converted to strings that represent the          currency amounts. The precision specifier indicates the number of decimal places to be          shown. Examples :  c ,  c2  You can use a currency symbol in the report rows, such as the U.S. dollar symbol           ( $ ) or the Euro symbol ( € ). To set up the required symbol, use the format          string as shown in the following example. Example (for Euro) :  \€ #,##0.00  Any symbol that you type after the backslash ( \ ) will be printed as it is. D  or  d  Decimal This format is supported for integral types only. The number is converted to a string of          decimal digits (0 to 9), preceded by a minus sign if the number is negative. The precision          specifier indicates the minimum number of digits in the resulting string. If required, the          number is padded with zeros to its left to produce the number of digits given by the          precision specifier. The exponent always consists of a plus or minus sign and a minimum of          three digits. The exponent is padded with zeros to meet this minimum, if required. Examples :  d ,  d4 E  or  e  Scientific (exponential; this format is very seldom used in analytical         reports)  The number is converted to a string of the form  -d.ddd... E+ddd  or  -d.ddd...           e+ddd , where each  d  indicates a digit (0 to 9). The string starts with a minus          sign if the number is negative. One digit always precedes the decimal point. The precision          specifier indicates the appropriate number of digits after the decimal point. If the          precision specifier is omitted, a default of six digits after the decimal point is used.          The case of the format specifier indicates whether to prefix the exponent with an  E           or an  e . The exponent always consists of a plus or minus sign and a minimum of three          digits. The exponent is padded with zeros to meet this minimum, if required. Examples :  e ,  e2 F  or  f  Fixed point  The number is converted to a string of the form  -ddd.ddd...  where each  d           indicates a digit (0 to 9). The string starts with a minus sign if the number is negative.          The precision specifier indicates the number of decimal places to be shown. Examples :  f ,  f4 G  or  g  General  The number is converted to the most compact of the fixed-point or scientific         notation, depending on the type of the number and whether a precision specifier is present.         If the precision specifier is omitted or zero, the type of the number determines the default         precision, as indicated by the following list.  Byte or SByte: 3 Int16 or UInt16: 5 Int32 or UInt32: 10 Int64 or UInt64: 19 Single: 7 Double: 15 Decimal: 29 Fixed-point notation is used if the exponent that would result from expressing the          number in scientific notation is greater than –5 and less than the precision specifier;          otherwise, scientific notation is used. The result contains a decimal point, if required,          and trailing zeros are omitted. If the precision specifier is present and the number of          significant digits in the result exceeds the specified precision, then the excess trailing          digits are removed by rounding. If scientific notation is used, the exponent in the result          is preceded by  E  if the format specifier is  G , or  e  if the format          specifier is  g . The exception to the preceding rule is if the number is a decimal          and the precision specifier is omitted. In that case, fixed-point notation is always used          and trailing zeros are preserved. Examples :  g ,  g4 N  or  n  Number  The number is converted to a string of the form  -d,ddd,ddd.ddd...  where each            d  indicates a digit (0 to 9). The string starts with a minus sign if the number is          negative. Thousand separators are inserted between each group of three digits to the left          of the decimal point. The precision specifier indicates the number of decimal places to be          shown.  Examples :  n ,  n4 P  or  p  Percent  The number is converted to a string that represents a percent. The converted number is          multiplied by 100 in order to be presented as a percentage. The precision specifier          indicates the number of decimal places to be shown. Examples :  p ,  p4 R  or  r  Round-trip (this format is very seldom used in analytical reports)  The round-trip specifier guarantees that a numeric value converted to a string will be          parsed back into the same numeric value. When a numeric value is formatted using this          specifier, it is first tested using the general format, with 15 spaces of precision for a            Double  and 7 spaces of precision for a  Single . If the value is successfully          parsed back to the same numeric value, it is formatted by using the general format          specifier. However, if the value is not successfully parsed back to the same numeric value,          then the value is formatted by using 17 digits of precision for a  Double  and 9          digits of precision for a  Single . Although a precision specifier can be appended to          the round-trip format specifier, it is ignored. Round trips are given precedence over          precision when you use this specifier. This format is supported by floating-point types          only. Example :  r X  or  x  Hexadecimal (this format is very seldom used in analytical reports)  The number is converted to a string of hexadecimal digits. The case of the format          specifier indicates whether to use uppercase or lowercase characters for the hexadecimal          digits greater than 9. For example, use  X  to produce  ABCDEF , and  x  to          produce  abcdef . The precision specifier indicates the minimum number of digits in          the resulting string. If required, the number is padded with zeros to its left to produce          the number of digits given by the precision specifier. This format is supported for          integral types only. Examples :  x X Custom Numeric Format Strings The following table shows the characters you can use to create custom numeric format      strings and their definitions. Note that the result strings produced by some of these      characters are influenced by the settings in the  Regional Options       control panel. Computers that use different cultures will generate different result strings.  Format character Name Description 0  Zero placeholder  If the value being formatted has a digit in the position where the  0  appears         in the format string, then that digit is copied to the result string. The position of the         leftmost  0  before the decimal point and the rightmost  0  after the decimal         point determines the range of digits that are always present in the result string. The           00  specifier causes the value to be rounded to the nearest digit preceding the         decimal, where rounding away from zero is always used. For example, formatting 34.5 with           00  would result in the value 35. #  Digit placeholder  If the value being formatted has a digit in the position where the  #  appears in          the format string, then that digit is copied to the result string. Otherwise, nothing is          stored in that position in the result string. Note that this specifier never displays the            0  character if it is not a significant digit, even if  0  is the only digit in          the string. This specifier displays the  0  character if it is a significant digit in          the number being displayed. The  ##  format string causes the value to be rounded to          the nearest digit preceding the decimal, where rounding away from zero is always used. For          example, formatting 34.5 with  ##  would result in the value 35.  Examples:  ,##0.00}}  "(###) ### - ####" .  Decimal point  The first  .  character in the format string determines the location of the         decimal separator in the formatted value; any additional  .  characters are ignored.         The actual character used as the decimal separator is determined by the settings in the           Regional Options  control panel. ,  Thousand separator and number scaling  This character serves two purposes. First, if the format string contains a  ,          character between two digit placeholders (0 or #) and to the left of the decimal point if         one is present, then the output will have thousand separators inserted between each group of         three digits (counting from the right) to the left of the decimal separator. The actual         character used as the decimal separator in the result string is determined by the settings         in the  Regional Options  control panel. Second, if the format string contains at least         one  ,  character immediately to the left of the decimal point, then the number will be         divided by the number of  ,  characters multiplied by 1000 before it is formatted. For         example, the format string  0,,  will represent 100 million as simply 100. The  ,          character indicates that scaling does not include thousand separators in the formatted         number. Thus, to scale a number by 1 million and insert thousand separators, you would use         the format string  #,##0,, . %  Percentage placeholder  The presence of the  %  character in a format string causes a number to be         multiplied by 100 before it is formatted. The appropriate symbol is inserted in the number         itself at the location where the  %  appears in the format string. The percent         character used is dependent on the settings in the  Regional Options          control panel. E0 E+0 E-0 e0 e+0 e-0  Scientific notation  If any of the strings  E ,  E+ ,  E- ,  e ,  e+ , or           e-  is present in the format string and followed immediately by at least one  0          character, then the number is formatted using scientific notation with an  E  or           e  inserted between the number and the exponent. The number of  0  characters         following the scientific notation indicator determines the minimum number of digits to         output for the exponent. The  E+  and  e+  formats indicate that a sign character         (plus or minus) should always precede the exponent. The  E ,  E- ,  e , and           e-  formats indicate that a sign character should only precede negative         exponents. \  Escape character  In C# and C++, the backslash character causes the next character in the format string         to be interpreted as an escape sequence. This character is used with traditional formatting         sequences like  \n  (new line). 'ABC' "ABC"  Literal string  Characters enclosed in single or double quotes are copied to the result string         literally, and do not affect formatting. ;  Section separator  This character is used to separate sections for positive, negative, and zero numbers         in the format string. Other  All other characters  All other characters are copied to the result string as literals in the position in         which they appear. Standard DateTime Format Strings The following table describes the standard date/time format specifiers. The output of these       format specifiers is influenced by the current culture and the settings in the         Regional Options  control panel.  Format character Name Description d  Short date pattern Displays a value in the short date format.  Depending on the settings in the  Regional Options  control panel,          the value can be in one of the following formats:  M/d/yyyy  (for  en-US  local settings) yyyy/MM/dd  (for  ja-JP  local settings) dd/MM/yyyy  (for  fr-FR  local settings) Example :  d D  Long date pattern  Displays a value in the long date format.  Depending on the settings in the  Regional Options  control panel,          the value can be in one of the following formats:  dddd, MMMM dd, yyyy  (for  en-US  local settings)  yyyy'?'M'?'d'?'  (for  ja-JP  local settings) dddd d MMMM yyyy  (for  fr-FR  local settings) Example :  D t  Short time pattern  Displays a value in the short time format.  Depending on the settings in the  Regional Options  control panel,          the value can be in one of the following formats: h:mm tt  (for  en-US  local settings)  H:mm  (for ja-JP local settings) HH:mm  (for fr-FR local settings) Example :  t T  Long time pattern  Displays a value in the long time format.  Depending on the settings in the  Regional Options  control panel,          the value can be in one of the following formats:  h:mm:ss tt  (for  en-US  local settings) H:mm:ss  (for  ja-JP  local settings) HH:mm:ss  (for  fr-FR  local settings) Example :  T f  Full date/time pattern (short time)  Displays a value in a combination of the long date and short time format patterns,          separated by a space. Example :  f F  Full date/time pattern (long time)  Displays a value in a full date/time format.  Depending on the settings in the  Regional Options  control panel,          the value can be in one of the following formats: yyyy h:mm:ss tt  (for  en-US  local settings) yyyy'?'M'?'d'?' H:mm:ss  (for  ja-JP  local settings) dddd d MMMM yyyy HH:mm:ss  (for  fr-FR  local settings) Example :  F g  General date/time pattern (short time) Displays a combination of the short date and short time patterns, separated by a          space. Example :  g G  General date/time pattern (long time)  Displays a combination of the short date and long time patterns, separated by a          space. Example :  G M  or  m  Month day pattern  Displays the day of month defined by the value.  Depending on the settings in the  Regional Options  control panel,          the value can be in one of the following formats: MMMM dd  (for  en-US  local settings) M'?'d'?'  (for  ja-JP  local settings) d MMMM  (for  fr-FR  local settings Example :  M m R  or  r  RFC1123 pattern  Displays a time value based on the Internet Engineering Task Force (IETF) Request for          Comments (RFC) 1123 specification. This specification sets the following common time format          (regardless of the settings in the  Regional Options  control panel):            ddd, dd MMM yyyy HH':'mm':'ss 'GMT' .  Formatting does not modify the  DateTime  value; therefore, you must adjust the          value to GMT before formatting.  Examples :  R ,  r s  Sortable date/time pattern; conforms to ISO 8601  Displays a date and time in ISO 8601-compatible format. The format uses the following          custom format:  yyyy-MM-ddTHH:mm:ss . Example :  s u  Universal sortable date/time pattern  Displays a time value in a standard defined form. This specification sets the following          common time format (regardless of the settings in the  Regional           Options  control panel):  yyyy-MM-dd HH:mm:ssZ .  No time zone conversion is done when the date and time is formatted; therefore, convert          a local date and time to universal time before using this format specifier.  Example :  u Y  or  y  Year month pattern  Displays a year value.  Depending on the settings in the  Regional Options  control panel,          the value can be in one of the following formats: MMMM, yyyy  (for  en-US  local settings) yyyy'?'M'?'  (for  ja-JP  local settings) MMMM yyyy  (for  fr-FR  local settings) Examples :  Y y Custom DateTime Format Strings The following table describes the custom date/time format specifiers. The output of these       format specifiers is influenced by the current culture and the settings in the         Regional Options  control panel. Format specifier Description d  Displays the current day of the month, expressed as a number between 1 and 31. If the         day is a single digit only (1 to 9), then it is displayed as a single digit. Note that if         the  d  format specifier is used without other custom format strings, it is interpreted         as the standard format specifier for the short date pattern. If the  d  format         specifier is passed with other custom format specifiers or the  %  character, it is         interpreted as a custom format specifier. ddd  Displays the abbreviated name of the day for the specified DateTime. dddd  (plus any number of additional  d  characters)  Displays the full name of the day for the specified DateTime. f  Displays the most significant digit of the seconds fraction. Note that if the           f  format specifier is used alone, without other custom format strings, it is         interpreted as the full (long date + short time) format specifier. If the  f  format         specifier is passed with other custom format specifiers or the  %  character, it is         interpreted as a custom format specifier. ff  Displays the two most significant digits of the seconds fraction. fff  Displays the three most significant digits of the seconds fraction. ffff  Displays the four most significant digits of the seconds fraction. fffff  Displays the five most significant digits of the seconds fraction. ffffff  Displays the six most significant digits of the seconds fraction. fffffff  Displays the seven most significant digits of the seconds fraction. F  Displays the most significant digit of the seconds fraction. Nothing is displayed if         the digit is zero. FF  Displays the two most significant digits of the seconds fraction. However, trailing         zeros or two zero digits are not displayed. FFF  Displays the three most significant digits of the seconds fraction. However, trailing         zeros or three zero digits are not displayed. FFFF  Displays the four most significant digits of the seconds fraction. However, trailing         zeros or four zero digitsare not displayed. FFFFF  Displays the five most significant digits of the seconds fraction. However, trailing         zeros or five zero digits are not displayed. FFFFFF  Displays the six most significant digits of the seconds fraction. However, trailing         zeros or six zero digits are not displayed. FFFFFFF  Displays the seven most significant digits of the seconds fraction. However, trailing         zeros or seven zero digits are not displayed. g  or  gg  (plus any number of additional  g  characters)  Displays the era (A.D. for example) for the specified  DateTime  value. Note         that if the  g  format specifier is used alone, without other custom format strings, it         is interpreted as the standard general format specifier. If the  g  format specifier is         passed with other custom format specifiers or the  %  character, it is interpreted as a         custom format specifier. h  Displays the hour for the specified  DateTime  value in the range 1 to 12. The         hour represents whole hours passed since either midnight (displayed as 12) or noon (also         displayed as 12). If this format is used alone, then the same hour before or after noon is         indistinguishable. If the hour is a single digit (1 to 9), it is displayed as a single         digit. No rounding occurs when the hour is displayed. For example, a  DateTime  of 5:43         returns 5. hh ,  hh  (plus any number of additional  h  characters)  Displays the hour for the specified DateTime value in the range 1 to 12. The hour         represents whole hours passed since either midnight (displayed as 12) or noon (also         displayed as 12). If this format is used alone, then the same hour before or after noon is         indistinguishable. If the hour is a single digit (1 to 9), it is formatted with a preceding         0 (01-09). H  Displays the hour for the specified  DateTime  value in the range 0 to 23. The         hour represents whole hours passed since midnight (displayed as 0). If the hour is a single         digit (0 to 9), it is displayed as a single digit. HH, HH  (plus any number of additional  H  characters)  Displays the hour for the specified  DateTime  value in the range 0 to 23. The         hour represents whole hours passed since midnight (displayed as 0). If the hour is a single         digit (0 to 9), it is formatted with a preceding 0 (01 to 09). m  Displays the minute for the specified  DateTime  value in the range 0 to 59. The         minute represents whole minutes passed since the last hour. If the minute is a single digit         (0 to 9), it is displayed as a single digit. Note that if the  m  format specifier is         used alone, without other custom format strings, it is interpreted as the standard format         specifier for the month-day pattern. If the  m  format specifier is passed with other         custom format specifiers or the  %  character, it is interpreted as a custom format         specifier. mm ,  mm  (plus any number of additional  m  characters)  Displays the minute for the specified DateTime in the range 0 to 59. The minute         represents whole minutes passed since the last hour. If the minute is a single digit (0 to         9), it is formatted with a preceding 0 (01 to 09). M  Displays the month, expressed as a number between 1 and 12. If the month is a single         digit (1 to 9), it is displayed as a single digit. Note that if the  M  format         specifier is used alone, without other custom format strings, it is interpreted as the         standard format specifier for the month-day pattern. If the  M  format specifier is         passed with other custom format specifiers or the  %  character, it is interpreted as a         custom format specifier. MM  Displays the month, measured as a number between 1 and 12. If the month is a single         digit (1 to 9), it is formatted with a preceding 0 (01 to 09). MMM  Displays the abbreviated name of the month for the specified  DateTime          value. MMMM  Displays the full name of the month for the specified  DateTime  value. s  Displays the seconds for the specified  DateTime  value in the range 0 to 59.         The second represents whole seconds passed since the last minute. If the second is a single         digit (0 to 9), it is displayed as a single digit only. Note that if the  s  format         specifier is used alone, without other custom format strings, it is interpreted as the         standard sortable format specifier for the date-time pattern. If the  s  format         specifier is passed with other custom format specifiers or the  %  character, it is         interpreted as a custom format specifier. ss ,  ss  (plus any number of additional  s  characters)  Displays the seconds for the specified  DateTime  value in the range 0 to 59.         The second represents whole seconds passed since the last minute. If the second is a single         digit (0 to 9), it is displayed as a single digit only. Note that if the  s  format         specifier is used alone, without other custom format strings, it is interpreted as the         standard sortable format specifier for the date-time pattern. If the  s  format         specifier is passed with other custom format specifiers or the  %  character, it is         interpreted as a custom format specifier. ss ,  ss  (plus any number of additional  s  characters)  Displays the seconds for the specified DateTime in the range 0 to 59. The second         represents whole seconds passed since the last minute. If the second is a single digit (0 to         9), it is formatted with a preceding 0 (01 to 09). t  Displays the first character of the a.m./p.m. designator for the specified           DateTime  value. Note that if the  t  format specifier is used alone, without         other custom format strings, it is interpreted as the standard format specifier for the long         time pattern. If the  t  format specifier is passed with other custom format specifiers         or the  %  character, it is interpreted as a custom format specifier. tt ,  tt  (plus any number of additional  t  characters)  Displays the a.m./p.m. designator for the specified  DateTime  value. y  Displays the year for the specified  DateTime  value as a maximum two-digit         number. The first two digits of the year are omitted. If the year is a single digit (1 to         9), it is displayed as a single digit. Note that if the  y  format specifier is used         alone, without other custom format strings, it is interpreted as the standard format         specifier for the short date pattern. If the  y  format specifier is passed with other         custom format specifiers or the  %  character, it is interpreted as a custom format         specifier. yy  Displays the year for the specified  DateTime  value as a maximum two-digit         number. The first two digits of the year are omitted. If the year is a single digit (1 to         9), it is formatted with a preceding 0 (01 to 09). yyyy  Displays the year for the specified  DateTime  value, including the century. If         the year is fewer than four digits in length, then preceding zeros are appended as necessary         to make the displayed year four digits long. z  Displays the time zone offset for the system's current time zone in whole hours only.         The offset is always displayed with a leading sign (zero is displayed as  +0 ),         indicating hours ahead of Greenwich mean time (+) or hours behind Greenwich mean time (–).         The range of values is –12 to +13. If the offset is a single digit (0 to 9), it is displayed         as a single digit with the appropriate leading sign. The setting for the time zone is         specified as  +X  or  –X , where  X  is the offset in hours from GMT. The         displayed offset is affected by daylight saving time. zz  Displays the time zone offset for the system's current time zone in whole hours only.         The offset is always displayed with a leading or trailing sign (zero is displayed as           +00 ), indicating hours ahead of Greenwich mean time (+) or hours behind Greenwich         mean time (–). The range of values is –12 to +13. If the offset is a single digit (0 to 9),         it is formatted with a preceding 0 (01 to 09) with the appropriate leading sign. The setting         for the time zone is specified as  +X  or  –X , where  X  is the offset in         hours from GMT. The displayed offset is affected by daylight saving time. zzz ,  zzz  (plus any number of additional  z  characters)  Displays the time zone offset for the system's current time zone in whole hours only.         The offset is always displayed with a leading or trailing sign (zero is displayed as           +00 ), indicating hours ahead of Greenwich mean time (+) or hours behind Greenwich         mean time (–). The range of values is –12 to +13. If the offset is a single digit (0 to 9),         it is formatted with a preceding 0 (01 to 09) with the appropriate leading sign. The setting         for the time zone is specified as  +X  or  –X , where  X  is the offset in         hours from GMT. The displayed offset is affected by daylight saving time. :  Serves as a time separator. /  Functions as a date separator. "  Indicates a quoted string. Displays the literal value of any string between two         quotation marks preceded by the escape character (/). '  Indicates a quoted string. Displays the literal value of any string between two         single quotation marks. %c  Where  c  is both a standard format specifier and a custom format specifier,         displays the custom format pattern associated with the format specifier. Note that if a         format specifier is used alone as a single character, it is interpreted as a standard format         specifier. Only format specifiers consisting of two or more characters are interpreted as         custom format specifiers. In order to display the custom format for a specifier defined as         both a standard and a custom format specifier, precede the specifier with a  %          symbol. \c  Where  c  is any character, displays the next character as a literal. The escape         character cannot be used to create an escape sequence (like  \n  for new line) in this         context. ]]></column>
		</row>
		<row PageID="00a69dbb-c06b-4ce4-8b29-e86ee0e8ed47" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="ec841e6e-1df1-81b7-9195-cae4862e7f4e" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You use functions to perform specific tasks that facilitate data processing for the reports. Many functions available in the Analytical Report Manager process the data selected from the data source and return the values to be used in the report. {br}

To use functions in the formula, you can enter them directly in the formula editing area or select them from the list of functions provided in the Formula Editor dialog box ([HelpRoot_ReportingTools\CS__ARM_Formulas|Formulas]). {br}

The groups of functions in the formulas are described below.{br}{TOC}
==Conversion Functions==
You use conversion functions, summarized in the following table, to convert data from one data type to another. 
{| class="checklist" | width="100%" 
|- 
!width="20%" ! Function
!width="80%" ! Description and Examples
|- 
| ''CBool(x)''
| 
 Converts an expression defined in a function argument into the Boolean expression. If the expression is zero, ''False'' is returned; otherwise, ''True'' is returned.{br}

'''Example:'''{{=CBool(A11+B11-C11*0.05)}} (where ''A11'', ''B11'' and ''C11'' are the links used in a function argument)
|- 
| ''CDate(x)''
| 
 Converts an expression defined in a function argument to a value of the ''Date'' type. The ''CDate'' function argument should be a valid date expression. ''CDate'' recognizes date formats according to the locale setting of the system.{br}

'''Example:'''{{=CDate(A2-B2)}} (where ''A2'' and ''B2'' are the links used in a function argument)
|- 
| ''CStr(x)''
| 
 Converts an expression defined in a function argument to a string. If the ''CStr'' function argument equals null, <tt>CStr</tt> returns a run-time error; otherwise, it returns a string of characters.{br}

'''Example:'''{{=CStr(A12)}} (where ''A12'' is the link used in a function argument)
|- 
| ''CDbl(x)''
| 
 Converts an expression defined in a function argument to a value of the ''Double'' type.{br}

'''Example:'''{{=CDbl(A12/B2)}} (where ''A12'' and ''B2'' are the links used in a function argument)
|- 
| ''CSng(x)''
| 
 Converts an expression defined in a function argument to a value of the ''Single'' type. If the expression defined in the function argument lies outside the acceptable range for the ''Single'' type, an error occurs.{br}

'''Example:'''{{=CSng(A12)}} (where ''A12'' is the link used in a function argument)
|- 
| ''CDec(x)''
| 
 Converts an expression defined in a function argument to a value of the ''Decimal'' type.{br}

'''Example:'''{{=CDec(A12*0.15)}} (where ''A12'' is the link used in a function argument)
|- 
| ''CInt(x)''
| 
 Converts an expression defined in a function argument to a value of the ''Integer'' type.{br}

'''Example:'''{{=CInt(A10)}} (where ''A10'' is the link used in a function argument)
|- 
| ''CShort(x)''
| 
 Converts a numeric value to a value of the ''Short'' type.{br}

'''Example:'''{{=CShort(B2)}} (where ''B2'' is the link used in a function argument)
|- 
| ''CLong(x)''
| 
 Converts a numeric value to a value of the ''Long'' type.{br}

'''Example:'''{{=CLong(B12)}} (where ''B12'' is the link used in a function argument)
|}
==Text Functions==
Text functions, described in the following table, are used to perform operations with text strings. 
{| class="checklist" | width="100%" 
|- 
!width="20%" ! Function
!width="80%" ! Description and Examples
|- 
| '''LTrim(''string'')'''
| 
Removes all leading spaces or parsing characters from the specified character expression, or all leading zero bytes from the specified binary expression.{br}

'''Example:'''{{=LTrim(CStr(A12))}} (where ''A12'' is the link used in a function argument)
|- 
| '''RTrim(''string'')'''
| 
Removes all trailing spaces or parsing characters from the specified character expression, or all trailing zero bytes from the specified binary expression.{br}

'''Example:'''{{=RTrim(CStr(A12))}} (where ''A12'' is the link used in a function argument)
|- 
| '''Trim(''string'')'''
| 
Removes all trailing spaces or parsing characters from the specified character expression, or all trailing zero bytes from the specified binary expression.{br}

'''Example:'''{{=Trim(CStr(A12))}} (where ''A12'' is the link used in a function argument)
|- 
| '''Format(''format'', ''argument(s)'')'''
| 
Replaces the format item in a specified formatting string (''format'') with the text equivalent of the arguments (''arguments'').{br}

'''Example:'''{{=Format('Currency: . . . . . . . . {0:C}; Account: . . . . . . . . {1:N}', A1, B1)}} (where ''A1'' and ''B1'' are the links used as a function arguments; 0, 1 are the specifiers indicating where the arguments will be inserted; ''C'' is the ''currency'' format specifier; and ''N'' is the ''number'' format specifier)
|- 
| '''UCase(''string'')'''
| 
Returns a string that has been converted to uppercase. The ''string'' argument is any valid string expression. If ''string'' contains a null value, the null value is returned.{br}

'''Example:'''{{=UCase(CStr(A12))}} (where ''A12'' is the link used in a function argument)
|- 
| '''LCase(''string'')'''
| 
Returns a string that has been converted to lowercase. The ''string'' argument is any valid string expression. If ''string'' contains a null value, the null value is returned.{br}

'''Example:'''{{=LCase(CStr(A12))}} (where ''A12'' is the link used in a function argument)
|- 
| '''InStr(''string'', ''findString'')'''
| 
Returns the position of the first occurrence of one string (''findString'') within another (''string'').{br}

'''Example:'''{{=InStr(CStr(A12), 'rur')}} (where ''A12'' is the link used in a function argument)
|- 
| '''InStrRev(''string'', ''findString'')'''
| 
Returns the position of the last occurrence of one string (''findString'') within another (''string''), starting from the right side of the string.{br}

'''Example:'''{{=InStrRev(CStr(A12), 'rur')}} (where ''A12'' is the link used in a function argument)
|- 
| '''Len(''string'')'''
| 
Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.{br}

'''Example:'''{{=Len(CStr(A12))}} (where ''A12'' is the link used in a function argument)
|- 
| '''Left(''string'', ''length'')'''
| 
Returns a string containing a specified number of characters from the left side of a string. If ''string'' contains the null value, the null value is returned.{br}

'''Example:'''{{=Left(CStr(A12), 3)}} (where ''A12'' is the link used in a function argument)
|- 
| '''Right(''string'', ''length'')'''
| 
Returns a string containing a specified number of characters from the right side of a string. If ''string'' contains a null value, the null value is returned.{br}

'''Example:'''{{=Right(CStr(A12), 3)}} (where ''A12'' is the link used in a function argument)
|- 
| '''Replace(''string'', ''oldValue'', ''newValue'')'''
| 
Returns a string in which a specified substring (''oldValue'') has been replaced with another substring (''newValue'').{br}

'''Example:'''{{=Replace(CStr(A12), 'rur', 'eur')}} (where ''A12'' is the link used in a function argument)
|- 
| '''PadLeft(''string'', ''width'', ''paddingChar'')'''
| 
Right-aligns the characters in a specified string (''string''), padding with the specified characters (''paddingChar'') on the left for a specified total width (''width'').{br}

'''Example:'''{{=PadLeft(CStr(A12), 3, '%')}} (where ''A12'' is the link used in a function argument)
|- 
| '''PadRight(''string'', ''width'', ''paddingChar'')'''
| 
Left-aligns the characters in a specified string (''string''), padding with the specified characters (''paddingChar'') on the right for a specified total width (''width'').{br}

'''Example:'''{{=PadRight(CStr(A12), 3, '%')}} (where ''A12'' is the link used in a function argument)
|}
==Math Functions==
Mathematical functions, described in the following table, perform calculations, usually based on input values provided as arguments, and return numeric values. 
{| class="checklist" | width="100%" 
|- 
!width="20%" ! Function
!width="80%" ! Description and Examples
|- 
| ''Abs(x)''
| 
 Returns the absolute value of a number.{br}

'''Example:'''{{=Abs(A10-B10)}}{br}

Here ''A10'' and ''B10'' are the links used in a function argument.
|- 
| ''Floor(x)''
| 
 Returns the largest integer that is not greater than the argument.{br}

'''Example:'''{{=Floor(A10-A12)}}{br}

Here ''A10'' and ''A12'' are the links used in a function argument.
|- 
| ''Ceiling(x)''
| 
 Returns the smallest integer that is not less than the argument.{br}

'''Example:'''{{=Ceiling(A10-C11)}}{br}

Here ''A10'' and ''C11'' are the links used in a function argument.
|- 
| '''Round(x, ''decimals'')'''
| 
 Returns a numeric expression, rounded to the specified precision (''decimals'').{br}

'''Example:'''{{=Round((A10-B12), 5)}}{br}

Here ''A10'' and ''B12'' are the links used in a function argument, and 5 is the number of digits after the decimal separator.
|- 
| ''Min(x, y)''
| 
 Returns the smaller of the two values.{br}

'''Example:'''{{=Min(A10, A12)}}{{=Min(A10, 12)}}{br}

Here ''A10'' and ''A12'' are the links used as function arguments)
|- 
| ''Max(x, y)''
| 
 Returns the greater of the two values.{br}

'''Example:'''{{=Max(A12, A14)}}{{=Max(A12, 240)}}{br}

Here ''A12'' and ''A14'' are the links used as function arguments.
|- 
| '''Pow(x, ''power'')'''
| 
 Computes the value of ''x'' raised to the specified power (''power'').{br}

'''Example:'''{{=Pow((A12, 2))}}{br}

Here ''A12'' is the link used as a function argument, and ''2'' is the power index.
|}
==DateTime Functions==
The DateTime functions (described below) perform operations on input values and return string, numeric, or ''DateTime'' value results. 
{| class="checklist" | width="100%" 
|- 
!width="20%" ! Function
!width="80%" ! Description and Examples
|- 
| '''Now()'''
| 
Returns the current date and time according to the system date and time on the local computer.{br}

'''Example:'''{{=Now()}}
|- 
| '''Today()'''
| 
Returns the current date according to the system date and time on the local computer.{br}

'''Example:'''{{=Today()}}
|- 
| '''NowUTC()'''
| 
Returns the current date and time according to the user&rsquo;s time zone.{br}

The system gets the user&rsquo;s time zone from the following sources, which are ordered by priority from the highest to the lowest:[anchor|#ol_ntn_j3p_rw]
#The user&rsquo;s preferences specified on the [HelpRoot_GettingStarted\SM_20_30_10|User Profile] ([~/?ScreenId=SM203010|SM203010]) form
#The employee calendar specified on the [HelpRoot_FormReference\CS_20_90_00|Work Calendar] ([~/?ScreenId=CS209000|CS209000]) form and selected for the employee corresponding to the user on the [HelpRoot_FormReference\EP_20_30_00|Employees] ([~/?ScreenId=EP203000|EP203000]) form
#The site preferences specified on the [HelpRoot_FormReference\SM_20_05_05|Site Preferences] ([~/?ScreenId=SM200505|SM200505]) form

'''Example:'''{{=NowUTC()}}
|- 
| '''TodayUTC()'''
| 
Returns the current date according to the user&rsquo;s time zone.{br}

The system gets the user&rsquo;s time zone from the following sources, which are ordered by priority from the highest to the lowest:[anchor|#ol_pd4_hlp_rw]
#The user&rsquo;s preferences specified on the [HelpRoot_GettingStarted\SM_20_30_10|User Profile] ([~/?ScreenId=SM203010|SM203010]) form
#The employee calendar specified on the [HelpRoot_FormReference\CS_20_90_00|Work Calendar] ([~/?ScreenId=CS209000|CS209000]) form and selected for the employee corresponding to the user on the [HelpRoot_FormReference\EP_20_30_00|Employees] ([~/?ScreenId=EP203000|EP203000]) form
#The site preferences specified on the [HelpRoot_FormReference\SM_20_05_05|Site Preferences] ([~/?ScreenId=SM200505|SM200505]) form

'''Example:'''{{=TodayUTC()}}
|- 
| '''DateAdd(''date'', ''interval'', ''number'')'''
| 
Returns the new date calculated as a ''date'' parameter to which the specified time interval has been added. The ''interval'' argument is a ''string'' expression that is the interval to be added. This argument can have the following values:
*''yyyy'': Year (a ''number'' of years will be added to the ''date'') 
*''m'': Month (a ''number'' of months will be added to the ''date'') 
*''y'': Day of year (same as ''day'') 
*''d'': Day (a ''number'' of days will be added to the ''date'') 
*''h'': Hour (a ''number'' of hours will be added to the ''date'') 
*''n'': Minute (a ''number'' of minutes will be added to the ''date'') 
*''s'': Second (a ''number'' of seconds will be added to the ''date'') 

The ''number'' is the numeric expression that is the number of intervals to be added. The numeric expression can either be positive, for dates in the future, or negative, for dates in the past. The ''date'' argument is the date to which ''interval'' is added.{br}

'''Example:'''{{=DateAdd(CDate('31/01/1995'), 'm', -2)}}{{=DateAdd(Today(), 'y', 3)}}{{=DateAdd(Now(), 'd', 1)}}
|- 
| '''Year(''date'')'''
| 
Returns the year component of the ''date''.{br}

'''Example:'''{{=Year(Now())}}
|- 
| '''Month(''date'')'''
| 
Returns the month component of the ''date''.{br}

'''Example:'''{{=Month(Now())}}
|- 
| '''Day(''date'')'''
| 
Returns the day component of the ''date''.{br}

'''Example:'''{{=Day(Now())}}
|- 
| '''DayOfWeek(''date'')'''
| 
Returns the day of week for the ''date''.{br}

'''Example:'''{{=DayOfWeek(Today())}}
|- 
| '''DayOfYear(''date'')'''
| 
Returns the day of the year for the ''date''.{br}

'''Example:'''{{=DayOfYear(Now())}}
|- 
| '''Hour(''date'')'''
| 
Returns the hours of the ''date''.{br}

'''Example:'''{{=Hour(Now())}}
|- 
| '''Minute(''date'')'''
| 
Returns the minutes of the ''date''.{br}

'''Example:'''{{=Minute(Now())}}
|- 
| '''Second(''date'')'''
| 
Returns the seconds of the ''date''.{br}

'''Example:'''{{=Second(Now())}}
|}
==Other Functions==
The ''Other'' functions group includes the following functions.
{| class="checklist" | width="100%" 
|- 
!width="25%" ! Function
!width="75%" ! Description and Examples
|- 
| '''IIf(''expression'', ''truePart'', ''falsePart'')'''
| 
Returns one of two values, depending on the evaluation of an expression. If the expression evaluates to ''True'', the function returns the ''truePart'' value; otherwise, it returns the ''falsePart'' value.{br}

'''Example:'''{{=IIf((A10-B10)<>0), CStr(A12), 'No data available')}} (where ''A10'', ''A12'', and ''B10'' are the links used as a function arguments)
|- 
| '''Switch(''expression&#95;1'', ''value&#95;1'', ''expression&#95;2'', ''value&#95;2'', ...)'''
| 
Returns one of the values, depending on the evaluation of the expressions in the parameter. The function returns the ''value&#95;n'', which corresponds to the first expression in the enumeration that evaluates to ''True''.{br}

'''Example:'''{{=Switch(((A10-B10)<>0), A12, ((A10-B10)>0), B35)}}
|- 
| '''IsNull(''value'', ''nullValue'')'''
| 
Returns ''nullValue'' if ''value'' is NULL; otherwise, returns ''value''.{br}

'''Example:'''{{=IsNull(A10, '0')}} (if {{A10}} is NULL, returns ''0''; otherwise, returns the {{A10}} value)
|- 
| '''Sum(from, to)'''
| 
Returns the sum of the values in the specified interval.{br}

'''Example:'''{{=Sum('A11','A100')}} (where ''A11'' and ''A100'' are the links used in a function argument)
|- 
| '''Sort(''from'', ''to'', ''column'')'''
| 
Returns the values in the specified range of rows in the specified column sorted in ascending order.{br}

'''Example:'''{{Sort('0100','0145','B')}} (the values in rows from 0100 to 0145 in the ''B'' column will be sorted in ascending order) 
|- 
| '''SortD(''from'', ''to'', ''column'')'''
| 
Returns the values in the specified range of rows in the specified column sorted in descending order.{br}

'''Example:'''{{SortD('0100','0145','B')}} (the values in rows from 0100 to 0145 in the ''B'' column will be sorted in descending order) 
|}
==Application-Specific Functions==
This functions are specific for Acumatica ERP. 
{| class="checklist" | width="100%" 
|- 
!width="27%" ! Function
!width="72%" ! Description and Examples
|- 
| '''ExtToInt(''object field'', ''object value'')'''
| Converts the external format of the ''object field'' parameter into the internal object presentation (for example, converts ''AccountCD'' to ''AccountID''). Both arguments of the ''ExtToInt'' function must have the same data type. '''Example:''': {{=Report.ExtToInt( 'ARAdjusted.AdjdCustomerID', [ARAdjusted.AdjdCustomerID])}}
|- 
| '''ExtToUI(''object field'', ''object value'')'''
| Converts the external format of the ''object field'' parameter into the UI format. Both arguments of the ''ExtToUI'' function must have the same data type. '''Example:'''{{=Report.ExtToUI('RowBatch.TranPeriodID', @PeriodID)}}
|- 
| '''GetDefExt(''object field'')'''
| Gets the default value of the ''object field'' parameter in the external format. '''Example:'''{{=Report.GetDefExt('OrganizationBranchReportParameters.OrganizationID')}}
|- 
| '''GetDefInt(''object field'')'''
| Gets the default value of the ''object field'' parameter in the internal format.
|- 
| '''GetDefUI(''object field'')'''
| Gets the default value of the ''object field'' parameter in the UI format. '''Example:'''{{=Report.GetDefUI('RowAccessInfo.DisplayName')}}
|- 
| '''GetDescription(''object field'', ''object value'')'''
| Returns the description of the ''object field'' parameter as it is defined in the <tt>PXSelectorAttribute</tt>. Both arguments of the <tt>GetDescription</tt> function must have the same data type. '''Example:''': {{=Report.GetDescription('GLTran.AccountID', @AccountCD)}}((({S:Hint}If you use this function for subaccounts, the subaccount description is not available if the ''By Segment: All Avail. Segment Values'' lookup mode is specified for the ''SUBACCOUNT'' segmented key on the [HelpRoot_FormReference\CS_20_20_00|Segmented Keys] ([~/?ScreenId=CS202000|CS202000]) form.
)))
|- 
| '''GetDisplayName(''object field'')'''
| Returns the localized name of the ''object field'' parameter. Example: 
|- 
| '''GetFormat(''object field'')'''
| Returns the data type of the ''object field'' parameter. '''Example:'''{{=Report.GetFormat( [APRegister.CuryInfoID] )}}
|- 
| '''GetMask(''object field'')'''
| Returns the mask of the ''object field'' parameter. '''Example:'''{{ =Report.GetMask('RowTaxPeriodEffective.TaxPeriodID')}}
|- 
| '''IntToExt(''object field'', ''object value'')'''
| Converts the external format of the ''object field'' parameter into the internal object presentation (for example, converts ''AccountID'' to ''AccountCD''). Both arguments of the ''IntToExt'' function must have the same data type.
|- 
| '''IntToUI(''object field'', ''object value'')'''
| Converts the internal format of the ''object field'' parameter into the UI format. Both arguments of the ''IntToUI'' function must have the same data type. '''Example:'''{{=Report.IntToUI('APRegister.FinPeriodID',$ClosedPer)}}
|- 
| '''UIToExt(''object field'', ''object value'')'''
| Converts the UI format of the ''object field'' parameter into the external object format. Both arguments of the ''UIToExt'' function must have the same data type.
|- 
| '''UIToInt(''object field'', ''object value'')'''
| Converts the UI format of the ''object field'' parameter into the internal object format. Both arguments of the ''UIToInt'' function must have the same data type.
|- 
| '''FormatPeriod(''object period'')'''
| Performs ''ExtToUI'' data conversion for the ''object period'' parameter. This function is used to get the period defined by the report&rsquo;s <tt>@StartPeriod</tt> and <tt>@EndPeriod</tt> dates.
|- 
| '''FormatPeriod(''object period'', ''object period shift'')'''
| Performs ''ExtToUI'' data conversion for the ''object period'' parameter with a time shift defined by ''object period shift'' argument. This function is used to get the period defined by the report&rsquo;s <tt>@StartPeriod</tt> and <tt>@EndPeriod </tt>dates.
|- 
| '''FormatYear(''object period'')'''
| Performs ''ExtToUI'' data conversion for the ''object period'' parameter year part. This function is used to get the period defined by the report&rsquo;s <tt>@StartPeriod</tt> and<tt> @EndPeriod</tt> dates.
|- 
| '''FormatYear(''object period'', ''object period shift'')'''
| Performs ''ExtToUI'' data conversion for the ''object period'' parameter year part with a time shift defined by ''object period shift'' argument. This function is used to get the period defined by the report&rsquo;s <tt>@StartPeriod </tt>and <tt>@EndPeriod</tt> dates. '''Example:'''{{=FormatYear(@StartPeriod, -1)}} (The function obtains the year of the specified period and shifts the obtained year to the value of the shift. For example, if the @StartPeriod is the year 2014, the expression returns 2013)
|}
==Related Articles==
*[HelpRoot_ReportingTools\CS__ARM_Formulas|Formulas]
*[HelpRoot_ReportingTools\CS__ARM_Formula_Parameters|Formula Parameters]
*[HelpRoot_ReportingTools\CS__ARM_Operators|Formula Operators]]]></column>
			<column name="PlainText"><![CDATA[Formula Functions You use functions to perform specific tasks that facilitate data processing for the 				reports. Many functions available in the Analytical Report Manager process the data 				selected from the data source and return the values to be used in the report.  To use functions in the formula, you can enter them directly in the formula editing area or 				select them from the list of functions provided in the Formula Editor dialog box 					( Formulas).  The groups of functions in the formulas are described below. Conversion Functions You use conversion functions, summarized in the following table, to convert data from one data 				type to another.  Function Description and Examples CBool(x)  Converts an expression defined in a function argument into the 									Boolean expression. If the expression is zero,  False  is 									returned; otherwise,  True  is returned. Example: =CBool(A11+B11-C11*0.05)  (where  A11 , 										 B11  and  C11  are the links used in a function 									argument) CDate(x)  Converts an expression defined in a function argument to a value 									of the  Date  type. The  CDate  function argument 									should be a valid date expression.  CDate  recognizes date 									formats according to the locale setting of the system. Example: =CDate(A2-B2)  (where  A2  and  B2  									are the links used in a function argument) CStr(x)  Converts an expression defined in a function argument to a 									string. If the  CStr  function argument equals null, 										 CStr  returns a run-time error; otherwise, 									it returns a string of characters. Example: =CStr(A12)  (where  A12  is the link used 									in a function argument) CDbl(x)  Converts an expression defined in a function argument to a value 									of the  Double  type. Example: =CDbl(A12/B2)  (where  A12  and  B2  									are the links used in a function argument) CSng(x)  Converts an expression defined in a function argument to a value 									of the  Single  type. If the expression defined in the 									function argument lies outside the acceptable range for the 										 Single  type, an error occurs. Example: =CSng(A12)  (where  A12  is the link used 									in a function argument) CDec(x)  Converts an expression defined in a function argument to a value 									of the  Decimal  type. Example: =CDec(A12*0.15)  (where  A12  is the link 									used in a function argument) CInt(x)  Converts an expression defined in a function argument to a value 									of the  Integer  type. Example: =CInt(A10)  (where  A10  is the link used 									in a function argument) CShort(x)  Converts a numeric value to a value of the  Short  									type. Example: =CShort(B2)  (where  B2  is the link used 									in a function argument) CLong(x)  Converts a numeric value to a value of the  Long  type. Example: =CLong(B12)  (where  B12  is the link used 									in a function argument) Text Functions Text functions, described in the following table, are used to perform operations with text 				strings.  Function Description and Examples LTrim( string ) Removes all leading spaces or parsing characters from the specified character expression, 									or all leading zero bytes from the specified binary 									expression. Example: =LTrim(CStr(A12))  (where  A12  is the link 									used in a function argument) RTrim( string ) Removes all trailing spaces or parsing characters from the specified character 									expression, or all trailing zero bytes from the specified binary 									expression. Example: =RTrim(CStr(A12))  (where  A12  is the link 									used in a function argument) Trim( string ) Removes all trailing spaces or parsing characters from the specified character 									expression, or all trailing zero bytes from the specified binary 									expression. Example: =Trim(CStr(A12))  (where  A12  is the link 									used in a function argument) Format( format ,  argument(s) ) Replaces the format item in a specified formatting string ( format ) with the text 									equivalent of the arguments ( arguments ). Example: =Format('Currency: . . . . . . . . {0:C}; Account: . 										. . . . . . . {1:N}', A1, B1)  (where  A1  									and  B1  are the links used as a function arguments; 0, 1 									are the specifiers indicating where the arguments will be 									inserted;  C  is the  currency  format specifier; and 										 N  is the  number  format specifier) UCase( string ) Returns a string that has been converted to uppercase. The  string  argument is any 									valid string expression. If  string  contains a null value, 									the null value is returned. Example: =UCase(CStr(A12))  (where  A12  is the link 									used in a function argument) LCase( string ) Returns a string that has been converted to lowercase. The  string  argument is any 									valid string expression. If  string  contains a null value, 									the null value is returned. Example: =LCase(CStr(A12))  (where  A12  is the link 									used in a function argument) InStr( string ,  findString ) Returns the position of the first occurrence of one string ( findString ) within 									another ( string ). Example: =InStr(CStr(A12), 'rur')  (where 										 A12  is the link used in a function argument) InStrRev( string ,  findString ) Returns the position of the last occurrence of one string ( findString ) within 									another ( string ), starting from the right side of the 									string. Example: =InStrRev(CStr(A12), 'rur')  (where 										 A12  is the link used in a function argument) Len( string ) Returns an integer containing either the number of characters in a string or the nominal 									number of bytes required to store a variable. Example: =Len(CStr(A12))  (where  A12  is the link 									used in a function argument) Left( string ,  length ) Returns a string containing a specified number of characters from the left side of a 									string. If  string  contains the null value, the null value 									is returned. Example: =Left(CStr(A12), 3)  (where  A12  is the 									link used in a function argument) Right( string ,  length ) Returns a string containing a specified number of characters from the right side of a 									string. If  string  contains a null value, the null value 									is returned. Example: =Right(CStr(A12), 3)  (where  A12  is the 									link used in a function argument) Replace( string ,  oldValue ,  newValue ) Returns a string in which a specified substring ( oldValue ) has been replaced with 									another substring ( newValue ). Example: =Replace(CStr(A12), 'rur', 										'eur')  (where  A12  is the link used 									in a function argument) PadLeft( string ,  width ,  paddingChar ) Right-aligns the characters in a specified string ( string ), padding with the 									specified characters ( paddingChar ) on the left for a 									specified total width ( width ). Example: =PadLeft(CStr(A12), 3, '%')  (where 										 A12  is the link used in a function argument) PadRight( string ,  width ,  paddingChar ) Left-aligns the characters in a specified string ( string ), padding with the 									specified characters ( paddingChar ) on the right for a 									specified total width ( width ). Example: =PadRight(CStr(A12), 3, '%')  (where 										 A12  is the link used in a function argument) Math Functions Mathematical functions, described in the following table, perform calculations, 				usually based on input values provided as arguments, and return numeric values.  Function Description and Examples Abs(x)  Returns the absolute value of a number. Example: =Abs(A10-B10) Here  A10  and  B10  are the links used in a function 									argument. Floor(x)  Returns the largest integer that is not greater than the 									argument. Example: =Floor(A10-A12) Here  A10  and  A12  are the links used in a function 									argument. Ceiling(x)  Returns the smallest integer that is not less than the 									argument. Example: =Ceiling(A10-C11) Here  A10  and  C11  are the links used in a function 									argument. Round(x,  decimals )  Returns a numeric expression, rounded to the specified precision 										( decimals ). Example: =Round((A10-B12), 5) Here  A10  and  B12  are the links used in a function 									argument, and 5 is the number of digits after the decimal 									separator. Min(x, y)  Returns the smaller of the two values. Example: =Min(A10, A12) =Min(A10, 12) Here  A10  and  A12  are the links used as function 									arguments) Max(x, y)  Returns the greater of the two values. Example: =Max(A12, A14) =Max(A12, 240) Here  A12  and  A14  are the links used as function 									arguments. Pow(x,  power )  Computes the value of  x  raised to the specified power 										( power ). Example: =Pow((A12, 2)) Here  A12  is the link used as a function argument, and 										 2  is the power index. DateTime Functions The DateTime functions (described below) perform operations on input values and 				return string, numeric, or  DateTime  value results.  Function Description and Examples Now() Returns the current date and time according to the system date 									and time on the local computer. Example: =Now() Today() Returns the current date according to the system date and time on 									the local computer. Example: =Today() NowUTC() Returns the current date and time according to the user's time 									zone. The system gets the user's time zone from the following sources, which are ordered by 									priority from the highest to the lowest: The user's preferences specified on the   ([~/?ScreenId=SM203010|SM203010]) User Profile 										(SP203010) form The employee calendar specified on the   ([~/?ScreenId=CS209000|CS209000]) Work Calendar 										(CS209000) form and selected for the employee corresponding 										to the user on the   ([~/?ScreenId=EP203000|EP203000]) Employees (EP203000) form The site preferences specified on the   ([~/?ScreenId=SM200505|SM200505]) Site Preferences (SM200505) 										form Example: =NowUTC() TodayUTC() Returns the current date according to the user's time zone. The system gets the user's time zone from the following sources, which are ordered by 									priority from the highest to the lowest: The user's preferences specified on the   ([~/?ScreenId=SM203010|SM203010]) User Profile 										(SP203010) form The employee calendar specified on the   ([~/?ScreenId=CS209000|CS209000]) Work Calendar 										(CS209000) form and selected for the employee corresponding 										to the user on the   ([~/?ScreenId=EP203000|EP203000]) Employees (EP203000) form The site preferences specified on the   ([~/?ScreenId=SM200505|SM200505]) Site Preferences (SM200505) 										form Example: =TodayUTC() DateAdd( date ,  interval , 								 number ) Returns the new date calculated as a  date  parameter to 									which the specified time interval has been added. The 										 interval  argument is a  string  expression that 									is the interval to be added. This argument can have the 									following values: yyyy : Year (a  number  of years will be added to 										the  date )  m : Month (a  number  of months will be added to 										the  date )  y : Day of year (same as  day )  d : Day (a  number  of days will be added to the 											 date )  h : Hour (a  number  of hours will be added to 										the  date )  n : Minute (a  number  of minutes will be added 										to the  date )  s : Second (a  number  of seconds will be added 										to the  date )  The  number  is the numeric expression that is the number of 									intervals to be added. The numeric expression can either be 									positive, for dates in the future, or negative, for dates in the 									past. The  date  argument is the date to which 										 interval  is added. Example: =DateAdd(CDate('31/01/1995'), 'm', 										-2) =DateAdd(Today(), 'y', 3) =DateAdd(Now(), 'd', 1) Year( date ) Returns the year component of the  date . Example: =Year(Now()) Month( date ) Returns the month component of the  date . Example: =Month(Now()) Day( date ) Returns the day component of the  date . Example: =Day(Now()) DayOfWeek( date ) Returns the day of week for the  date . Example: =DayOfWeek(Today()) DayOfYear( date ) Returns the day of the year for the  date . Example: =DayOfYear(Now()) Hour( date ) Returns the hours of the  date . Example: =Hour(Now()) Minute( date ) Returns the minutes of the  date . Example: =Minute(Now()) Second( date ) Returns the seconds of the  date . Example: =Second(Now()) Other Functions The  Other  functions group includes the following functions. Function Description and Examples IIf( expression ,  truePart ,  falsePart ) Returns one of two values, depending on the evaluation of an expression. If the 									expression evaluates to  True , the function returns the 										 truePart  value; otherwise, it returns the 										 falsePart  value. Example: =IIf((A10-B10)<>0), CStr(A12), 'No data 										available')  (where  A10 ,  A12 , and 										 B10  are the links used as a function arguments) Switch( expression_1 ,  value_1 ,  expression_2 ,  value_2 , 									...) Returns one of the values, depending on the evaluation of the 									expressions in the parameter. The function returns the 										 value_n , which corresponds to the first expression in 									the enumeration that evaluates to  True . Example: =Switch(((A10-B10)<>0), A12, ((A10-B10)>0), 										B35) IsNull( value ,  nullValue ) Returns  nullValue  if  value  is NULL; otherwise, returns  value . Example: =IsNull(A10, '0')  (if 										 A10  is NULL, returns  0 ; otherwise, 									returns the  A10  value) Sum(from, to) Returns the sum of the values in the specified interval. Example: =Sum('A11','A100')  (where 										 A11  and  A100  are the links used in a function 									argument) Sort( from ,  to ,  column ) Returns the values in the specified range of rows in the 									specified column sorted in ascending order. Example: Sort('0100','0145','B')  (the values in rows 									from 0100 to 0145 in the  B  column will be sorted in 									ascending order)  SortD( from ,  to ,  column ) Returns the values in the specified range of rows in the 									specified column sorted in descending order. Example: SortD('0100','0145','B')  (the values in rows 									from 0100 to 0145 in the  B  column will be sorted in 									descending order)  Application-Specific Functions This functions are specific for  Acumatica ERP.  Function Description and Examples ExtToInt( object field ,  object value ) Converts the external format of the  object field  parameter into the internal 								object presentation (for example, converts  AccountCD  to 									 AccountID ). Both arguments of the  ExtToInt  								function must have the same data type.  Example: : 									 =Report.ExtToInt( 'ARAdjusted.AdjdCustomerID', 									[ARAdjusted.AdjdCustomerID]) ExtToUI( object field ,  object value ) Converts the external format of the  object field  parameter into the UI format. 								Both arguments of the  ExtToUI  function must have the same 								data type.  Example: =Report.ExtToUI('RowBatch.TranPeriodID', @PeriodID) GetDefExt( object field ) Gets the default value of the  object field  parameter in the external format. 									 Example: =Report.GetDefExt('OrganizationBranchReportParameters.OrganizationID') GetDefInt( object field ) Gets the default value of the  object field  parameter in the internal 								format. GetDefUI( object field ) Gets the default value of the  object field  parameter in the UI format. 									 Example: =Report.GetDefUI('RowAccessInfo.DisplayName') GetDescription( object field ,  object value ) Returns the description of the  object field  parameter as it is defined in the 									 PXSelectorAttribute . Both arguments of the 									 GetDescription  function must have the same 								data type.  Example: : 									 =Report.GetDescription('GLTran.AccountID', 									@AccountCD) If you use this function for 									subaccounts, the subaccount description is not available if the 										 By Segment: All Avail. Segment Values  lookup mode is 									specified for the  SUBACCOUNT  segmented key on the   ([~/?ScreenId=CS202000|CS202000]) Segmented Keys (CS202000) form. GetDisplayName( object field ) Returns the localized name of the  object field  parameter. Example:  GetFormat( object field ) Returns the data type of the  object field  parameter.  Example: =Report.GetFormat( [APRegister.CuryInfoID] 								) GetMask( object field ) Returns the mask of the  object field  parameter.  Example:  									=Report.GetMask('RowTaxPeriodEffective.TaxPeriodID') IntToExt( object field ,  object value ) Converts the external format of the  object field  parameter into the internal 								object presentation (for example, converts  AccountID  to 									 AccountCD ). Both arguments of the  IntToExt  								function must have the same data type. IntToUI( object field ,  object value ) Converts the internal format of the  object field  parameter into the UI format. 								Both arguments of the  IntToUI  function must have the same 								data type.  Example: =Report.IntToUI('APRegister.FinPeriodID',$ClosedPer) UIToExt( object field ,  object value ) Converts the UI format of the  object field  parameter into the external object 								format. Both arguments of the  UIToExt  function must have the 								same data type. UIToInt( object field ,  object value ) Converts the UI format of the  object field  parameter into the internal object 								format. Both arguments of the  UIToInt  function must have the 								same data type. FormatPeriod( object period ) Performs  ExtToUI  data conversion for the  object period  parameter. This 								function is used to get the period defined by the report's 									 @StartPeriod  and 									 @EndPeriod  dates. FormatPeriod( object period ,  object period shift ) Performs  ExtToUI  data conversion for the  object period  parameter with a 								time shift defined by  object period shift  argument. This 								function is used to get the period defined by the report's 									 @StartPeriod  and  @EndPeriod 								 dates. FormatYear( object period ) Performs  ExtToUI  data conversion for the  object period  parameter year 								part. This function is used to get the period defined by the 								report's  @StartPeriod  and  									@EndPeriod  dates. FormatYear( object period ,  object period shift ) Performs  ExtToUI  data conversion for the  object period  parameter year 								part with a time shift defined by  object period shift  								argument. This function is used to get the period defined by the 								report's  @StartPeriod  and 									 @EndPeriod  dates.  Example: =FormatYear(@StartPeriod, -1)  (The function obtains 								the year of the specified period and shifts the obtained year to the 								value of the shift. For example, if the @StartPeriod is the year 								2014, the expression returns 2013) ]]></column>
		</row>
		<row PageID="cb4ef681-d8ff-4c4b-ad85-e9501ad86f82" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="798da8a0-8ec6-4829-a226-a8aead3d028e" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You use operators to perform certain operations with the formula parameters or modify the data specified by the '''Data Source''' report parameter before the data is inserted in the report. You can add operator manually by typing them in in the formula area or select them from the list of operators available in the formula editor.{br}

There are several groups of operators in the formulas, as described in the following sections.{br}{TOC}
==Arithmetic Operators==
Arithmetic operators perform common arithmetic operations with numeric values. The parameters of the arithmetic expressions are handled as the decimal values. The parameters of any other data type will be converted to the decimal type. 
{| class="checklist" | width="100%" 
|- 
!width="18%" ! Operator
!width="81%" ! Description and Examples
|- 
| ''+'' (addition) 
| 
Adds the value of one numeric expression to another or concatenates two strings.{br}

'''Example:'''{{=A10+B10}}{br}

Here, ''A10'' and ''B10'' are cell references. If the values in the cells are 12.85 and 2.25, the result of the expression would be 12.85 + 2.25 = 15.1.
|- 
| ''-'' (subtraction)
| 
Subtracts the value of one numeric expression from another.{br}

'''Example:'''{{=A20-B30}}{br}

Here, ''A20'' and ''B30'' are cell references. If the values in the cells are 12.85 and 2.25, the result of the expression would be 12.85 - 2.25 = 10.6.
|- 
| ''&#42;'' (multiplication)
| 
Multiplies the value of two expressions.{br}

'''Example:'''{{=C10*D10}}{br}

Here, ''C10'' and ''D10'' are cell references. '''' ''''If the values in the cells are 2.25 and 2, the example would evaluate to 2.25 &#42; 2 = 4.5.
|- 
| ''/'' (division) 
| 
Divides the values of two expressions.{br}

'''Example:'''{{=A10/C10}}. {br}

Here, ''A10'' and ''C10'' are cell references. If the values in the cells are 4.0 and 2.0, the result of the expression would be 4.0 / 2.0 = 2.0.
|- 
| ''%'' (Mod) 
| 
Divides two numbers and returns only the remainder.{br}

'''Example:'''{{=B15 % C15}}{br}

Here, ''B15'' and ''C15'' are cell references. If the values in the cells are 15.0 and 6.0, the result of the expression would be 3.0.
|}
==Logical Operators==
The logical operators, described below, compare Boolean expressions and return a Boolean result. 
{| class="checklist" | width="100%" 
|- 
!width="11%" ! Operator
!width="88%" ! Description and Examples
|- 
| ''And''
| 
Performs logical conjunction on two Boolean expressions. If both expressions evaluate to ''True'', then the operator returns ''True''; if at least one expression evaluates to ''False'', ''And'' returns ''False''.{br}

'''Example:'''{{=(A10>0) And (C10>0)}}{br}

In this example, ''A10'' and ''C10'' are cell references. If ''A10'' = 10 and ''C10'' = 20, then the expression would evaluate to ''True''. Alternatively, if ''A10'' = -10 and ''C10'' = 20, the expression would evaluate to ''False''. 
|- 
| ''Or''
| 
Performs logical disjunction on two Boolean expressions. If either expression evaluates to ''True'', the operation returns ''True''; if neither expression evaluates to ''True'', ''Or'' returns ''False''.{br}

'''Example:'''{{=(A10>0) Or (C10>0)}}{br}

In this example, ''A10'' and ''C10'' are cell references. If ''A10'' = 10 and ''C10'' = 20, then the expression would evaluate to ''True''. Alternatively, if ''A10'' = -10 and ''C10'' = -20, the expression would evaluate to ''False''. 
|- 
| ''Not''
| 
Performs logical negation on a Boolean expression, yielding the opposite of the expression it evaluates. If the expression evaluates to ''True'', the operator yields ''False''; alternatively, if the expression evaluates to ''False'', ''Not'' yields ''True''.{br}

'''Example:'''{{=Not (A10>C10)}}{br}

In this example, ''A10'' and ''C10'' are cell references. If ''A10'' is larger than ''C10'', then the expression would evaluate to ''False''. Alternatively, if ''A10'' is smaller than ''C10'', the expression would evaluate to ''True''.
|}
==Comparison Operators==
These operators, described below, compare two expressions and return a Boolean value that represents the result of the comparison. 
{| class="checklist" | width="100%" 
|- 
!width="20%" ! Operator
!width="80%" ! Description and Examples
|- 
| ''=''
| 
Equality operator.{br}

'''Example:'''{{=(A10=B10)}}{br}

In this example, ''A10'' and ''B10'' are cell references. If the value in the ''A10'' cell is equal to the value in ''B10'', then the expression evaluates to ''True''; otherwise, the expression evaluates to ''False''.
|- 
| ''&lt;&gt;''
| 
Inequality operator. {br}

'''Example:'''{{=(C10<>A10)}}{br}

(where ''A10'' and ''C10'' are the links used as a formula parameters){br}

In this example, ''A10'' and ''C10'' are cell references. If the value in the ''C10'' cell is not equal to the value in ''A10'', then the expression evaluates to ''True''; otherwise, the expression evaluates to ''False''.
|- 
| ''&lt;''
| 
The ''less than'' operator.{br}

'''Example:'''{{=(@10<@12)}} (where <tt>@10</tt> and <tt>@12</tt> are the links to cells in the current column){br}

In this example, <tt>@10</tt> and <tt>@12</tt> are the links to cells in the current column. If the value in the @10 cell is less than the value in @12, then the expression evaluates to ''True''; otherwise, the expression evaluates to ''False''.
|- 
| ''&gt;''
| 
 ''Greater than'' operator.{br}

'''Example:'''{{=(C10>A10)}} (where ''A10'' and ''C10'' are the links used as a formula parameters){br}

In this example, ''A10'' and ''C10'' are cell references. If the value in the ''C10'' cell is greater than to the value in ''A10'', then the expression evaluates to ''True''; otherwise, the expression evaluates to ''False''.
|- 
| ''&lt;=''
| 
The ''less than or equal to'' operator.{br}

'''Example:'''{{=(C10<=A10)}} (where ''A10'' and ''C10'' are the links used as a formula parameters){br}

In this example, ''A10'' and ''C10'' are cell references. If the value in the ''C10'' cell is less than or equal to the value in ''A10'', then the expression evaluates to ''True''; otherwise, the expression evaluates to ''False''.
|- 
| ''&gt;= ''
| 
The ''greater than or equal to'' operator.{br}

'''Example:'''{{=(A10>=C10)}} (where ''A10'' and ''C10'' are the links used as a formula parameters){br}

In this example, ''A10'' and ''C10'' are cell references. If the value in the ''A10'' cell is greater than or equal to the value in ''C10'', then the expression evaluates to ''True''; otherwise, the expression evaluates to ''False''.
|}
==Other Operators==
This group includes the following operators. 
{| class="checklist" | width="100%" 
|- 
!width="20%" ! Operator
!width="80%" ! Description and Examples
|- 
| ''In ''(a binary operator) 
| 
 This operator is used in an elementary logical expression that evaluates the search results and returns ''True'' when the parameter matches one of the elements from the set of values.{br}

'''Example''': {{=(A20 In (10, 50, 57))}} (where ''A20'' is the link used as a formula parameter)
|- 
| ''True'' (a binary constant) 
| 
 This operator is used as a parameter in logical expressions.{br}

'''Example''': {{=((D30<A30)=True)}} (where ''D30'' is the link used as a formula parameter)
|- 
| ''False ''(a binary constant)
| 
This operator is used as a parameter in logical expressions.{br}

'''Example:'''{{=((C10=E10)=False)}} (where ''C10'' and ''E10'' are the links to the data)
|- 
| ''Null'' (a value)
| 
 This operator is used as a parameter in logical expressions.{br}

'''Example:'''{{=(@20=Null)}} (where <tt>@20</tt> is the cell in the current column and 10th row)
|}
==Related Articles==
*[HelpRoot_ReportingTools\CS__ARM_Formulas|Formulas]
*[HelpRoot_ReportingTools\CS__ARM_Formula_Parameters|Formula Parameters]]]></column>
			<column name="PlainText"><![CDATA[Formula Operators You use operators to perform certain operations with the formula parameters or modify the data 				specified by the  Data Source  report parameter before the data 				is inserted in the report. You can add operator manually by typing them in in the 				formula area or select them from the list of operators available in the formula 				editor. There are several groups of operators in the formulas, as described in the following 				sections. Arithmetic Operators Arithmetic operators perform common arithmetic operations with numeric values. The 				parameters of the arithmetic expressions are handled as the decimal values. The 				parameters of any other data type will be converted to the decimal type.  Operator Description and Examples +  (addition)  Adds the value of one numeric expression to another or 									concatenates two strings. Example: =A10+B10 Here,  A10  and  B10  are cell references. If the values in the cells are 12.85 									and 2.25, the result of the expression would be 12.85 + 2.25 = 									15.1. -  (subtraction) Subtracts the value of one numeric expression from another. Example: =A20-B30 Here,  A20  and  B30  are cell references. If the values in the cells are 12.85 									and 2.25, the result of the expression would be 12.85 - 2.25 = 									10.6. *  (multiplication) Multiplies the value of two expressions. Example: =C10*D10 Here,  C10  and  D10  are cell references.  If the values in the cells 									are 2.25 and 2, the example would evaluate to 2.25 * 2 = 									4.5. /  (division)  Divides the values of two expressions. Example: =A10/C10 .  Here,  A10  and  C10  are cell references. If the values in the cells are 4.0 									and 2.0, the result of the expression would be 4.0 / 2.0 = 									2.0. %  (Mod)  Divides two numbers and returns only the remainder. Example: =B15 % C15 Here,  B15  and  C15  are cell references. If the values in the cells are 15.0 									and 6.0, the result of the expression would be 3.0. Logical Operators The logical operators, described below, compare Boolean expressions and return a 				Boolean result.  Operator Description and Examples And Performs logical conjunction on two Boolean expressions. If both expressions evaluate to 										 True , then the operator returns  True ; if at 									least one expression evaluates to  False ,  And  									returns  False . Example: =(A10>0) And (C10>0) In this example,  A10  and  C10  are cell references. If  A10  = 10 and 										 C10  = 20, then the expression would evaluate to 										 True . Alternatively, if  A10  = -10 and 										 C10  = 20, the expression would evaluate to 										 False .  Or Performs logical disjunction on two Boolean expressions. If 									either expression evaluates to  True , the operation 									returns  True ; if neither expression evaluates to 										 True ,  Or  returns  False . Example: =(A10>0) Or (C10>0) In this example,  A10  and  C10  are cell references. If  A10  = 10 and 										 C10  = 20, then the expression would evaluate to 										 True . Alternatively, if  A10  = -10 and 										 C10  = -20, the expression would evaluate to 										 False .  Not Performs logical negation on a Boolean expression, yielding the 									opposite of the expression it evaluates. If the expression 									evaluates to  True , the operator yields  False ; 									alternatively, if the expression evaluates to  False , 										 Not  yields  True . Example: =Not (A10>C10) In this example,  A10  and  C10  are cell references. If  A10  is larger 									than  C10 , then the expression would evaluate to 										 False . Alternatively, if  A10  is smaller than 										 C10 , the expression would evaluate to 									 True . Comparison Operators These operators, described below, compare two expressions and return a Boolean value 				that represents the result of the comparison.  Operator Description and Examples = Equality operator. Example: =(A10=B10) In this example,  A10  and  B10  are cell references. If the value in the 										 A10  cell is equal to the value in  B10 , then 									the expression evaluates to  True ; otherwise, the 									expression evaluates to  False . <> Inequality operator.  Example: =(C10<>A10) (where  A10  and  C10  are the links used as a formula parameters) In this example,  A10  and  C10  are cell references. If the value in the 										 C10  cell is not equal to the value in  A10 , 									then the expression evaluates to  True ; otherwise, the 									expression evaluates to  False . < The  less than  operator. Example: =(@10<@12)  (where  @10  and 										 @12  are the links to cells in the current 									column) In this example,  @10  and  @12  are the links to cells 									in the current column. If the value in the @10 cell is less than 									the value in @12, then the expression evaluates to  True ; 									otherwise, the expression evaluates to  False . > Greater than  operator. Example: =(C10>A10)  (where  A10  and  C10  									are the links used as a formula parameters) In this example,  A10  and  C10  are cell references. 									If the value in the  C10  cell is greater than to the value 									in  A10 , then the expression evaluates to  True ; 									otherwise, the expression evaluates to  False . <= The  less than or equal to  operator. Example: =(C10<=A10)  (where  A10  and  C10  									are the links used as a formula parameters) In this example,  A10  and  C10  are cell references. If the value in the 										 C10  cell is less than or equal to the value in 										 A10 , then the expression evaluates to  True ; 									otherwise, the expression evaluates to  False . >=  The  greater than or equal to  operator. Example: =(A10>=C10)  (where  A10  and  C10  									are the links used as a formula parameters) In this example,  A10  and  C10  are cell references. If the value in the 										 A10  cell is greater than or equal to the value in 										 C10 , then the expression evaluates to  True ; 									otherwise, the expression evaluates to  False . Other Operators This group includes the following operators.  Operator Description and Examples In  (a binary operator)   This operator is used in an elementary logical expression that 									evaluates the search results and returns  True  when the 									parameter matches one of the elements from the set of 									values. Example :  =(A20 In (10, 50, 57))  (where 										 A20  is the link used as a formula parameter) True  (a binary constant)   This operator is used as a parameter in logical expressions. Example :  =((D30<A30)=True)  (where 										 D30  is the link used as a formula parameter) False  (a binary constant) This operator is used as a parameter in logical expressions. Example: =((C10=E10)=False)  (where  C10  and 										 E10  are the links to the data) Null  (a value)  This operator is used as a parameter in logical expressions. Example: =(@20=Null)  (where  @20  is 									the cell in the current column and 10th row) ]]></column>
		</row>
		<row PageID="f3d27b0f-5180-454b-b4ab-ffc8f70043d6" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="e6c80338-4025-ba08-27b3-8156f4c0fb7d" RecordSourceID="22377">
			<column name="Content"><![CDATA[
A formula may include parameters that reference the data you want use in calculating the values in the report. There are two types of parameters: predefined parameters; and links to specific rows, columns, or individual report cells. {br}{TOC}
==Predefined Parameters==
The predefined parameters are application-specific and refer to the report parameters that you specify on other ARM forms, such as the [HelpRoot_FormReference\CS_20_60_00|Report Definitions] ([~/?ScreenId=CS206000|CS206000]) form or the [HelpRoot_FormReference\CS_20_60_10|Row Sets] ([~/?ScreenId=CS206010|CS206010]) form. For example, the <tt>@StartPeriod</tt> parameter refers to the value specified in the '''Start Period''' box on the [HelpRoot_FormReference\CS_20_60_00|Report Definitions] form, and the <tt>@BaseRowCode</tt> parameter refers to the value specified in the '''Base Row''' box on the [HelpRoot_FormReference\CS_20_60_10|Row Sets] form. All the available predefined parameters are listed in the [HelpRoot_FormReference\CS__ref_Data_Source_Editor|Data Source Editor] dialog box.{br}

The table below provides the list of the predefined parameters with their descriptions.
{| class="checklist" | width="100%" 
|- 
!width="31%" ! Parameter
!width="68%" ! Description 
|- 
| <tt>@AccountCode</tt>
| 
The code of the current account if the ''Account'' option is selected in the '''Expand''' box in the Data Source Editor dialog box.{br}

This is the code of the current subaccount if the ''Sub'' option is selected in the '''Expand''' box.
|- 
| <tt>@AccountDescr</tt>
| 
The description of the current account if the ''Account'' option is selected in the '''Expand''' box in the Data Source Editor dialog box.{br}

This is the description of the current subaccount if the ''Sub'' option is selected in the '''Expand''' box.
|- 
| <tt>@BaseRowCode</tt>
| The row code specified for the selected row in the '''Base Row''' column on the [HelpRoot_FormReference\CS_20_60_10|Row Sets] form. This row code is referred to by this parameter, which you use in the formula in the '''Value''' box on the [HelpRoot_FormReference\CS_20_60_20|Column Sets] ([~/?ScreenId=CS206020|CS206020]) form to retrieve the value specified in this row for computing another value in the report.
|- 
| <tt>@BookCode</tt>
| The code of the ledger whose data is used in the report. This parameter refers to the value in the '''Ledger''' box in the '''Default Data Source Settings''' section.
|- 
| <tt>@BranchName</tt>
| The identifier of the branch that is used in the report.
|- 
| <tt>@ColumnCode</tt>
| The code of the current column in the report.
|- 
| <tt>@ColumnIndex</tt>
| The index of the current column in the report.
|- 
| <tt>@ColumnSetCode</tt>
| The code of the current column set in the report.
|- 
| <tt>@ColumnText</tt>
| The description of the current column in the report.
|- 
| <tt>@EndAccount</tt>
| The last account in the range of accounts used in the report. This parameter refers to the value in the '''End Account''' box in the '''Default Data Source Settings''' section of the [HelpRoot_FormReference\CS_20_60_00|Report Definitions] form.
|- 
| <tt>@EndAccountGroup</tt>
| The last account group in the range of account groups used in the report. This parameter refers to the value in the '''End Acc. Group''' box in the '''Default Data Source Settings''' section of the [HelpRoot_FormReference\CS_20_60_00|Report Definitions] form.((({S:Hint}This parameter is valid only in reports of the ''PM'' type.
)))
|- 
| <tt>@EndBranch</tt>
| The last branch in the range of branches used in the report. This parameter refers to the value in the '''End Branch''' box in the '''Default Data Source Settings''' section of the [HelpRoot_FormReference\CS_20_60_00|Report Definitions] form.
|- 
| <tt>@EndPeriod</tt>
| The end period of the report. This parameter refers to the value in the '''End Period''' box in the '''Default Data Source Settings''' section of the [HelpRoot_FormReference\CS_20_60_00|Report Definitions] form.
|- 
| <tt>@EndProject</tt>
| The last project in the range of projects used in the report. This parameter refers to the value in the '''End Project''' box in the '''Default Data Source Settings''' section of the [HelpRoot_FormReference\CS_20_60_00|Report Definitions] form.((({S:Hint}This parameter is valid only in reports of the ''PM'' type.
)))
|- 
| <tt>@EndProjectTask</tt>
| The last project task in the range of the project tasks used in the report. This parameter refers to the value in the '''End Task''' box in the '''Default Data Source Settings''' section of the [HelpRoot_FormReference\CS_20_60_00|Report Definitions] form.((({S:Hint}This parameter is valid only in reports of the ''PM'' type.
)))
|- 
| <tt>@EndSub</tt>
| The last subaccount in the range of subaccounts used in the report. This parameter refers to the value in the '''End Sub''' box in the '''Default Data Source Settings''' section of the [HelpRoot_FormReference\CS_20_60_00|Report Definitions] form.
|- 
| <tt>@StartAccount</tt>
| The first account in the range of accounts used in the report. This parameter refers to the value in the '''Start Account''' box in the '''Default Data Source Settings''' section of the [HelpRoot_FormReference\CS_20_60_00|Report Definitions] form.
|- 
| <tt>@StartAccountGroup</tt>
| The first account group in the range of account groups used in the report. Refers to the value in the '''Start Acc. Group''' box in the '''Default Data Source Settings''' section of the [HelpRoot_FormReference\CS_20_60_00|Report Definitions] form.((({S:Hint}This parameter is valid only in reports of the ''PM'' type.
)))
|- 
| <tt>@StartBranch</tt>
|  The first branch in the range of branches used in the report. This parameter refers to the value in the '''Start Branch''' box in the '''Default Data Source Settings''' section of the [HelpRoot_FormReference\CS_20_60_00|Report Definitions] form.
|- 
| <tt>@StartPeriod</tt>
| The start period of the report. This parameter refers to the value in the '''Start Period''' box in the '''Default Data Source Settings''' section of the [HelpRoot_FormReference\CS_20_60_00|Report Definitions] form.
|- 
| <tt>@StartProject</tt>
| The first project in the range of projects used in the report. This parameter refers to the value in the '''Start Project''' box in the '''Default Data Source Settings''' section of the [HelpRoot_FormReference\CS_20_60_00|Report Definitions] form.((({S:Hint}This parameter is valid only in reports of the ''PM'' type.
)))
|- 
| <tt>@StartProjectTask</tt>
| The first project task in the range of project tasks used in the report. This parameter refers to the value in the '''Start Task''' box in the '''Default Data Source Settings''' section of the [HelpRoot_FormReference\CS_20_60_00|Report Definitions] form.((({S:Hint}This parameter is valid only in reports of the ''PM'' type.
)))
|- 
| <tt>@StartSub</tt>
| The first subaccount in the range of subaccounts used in the report. This parameter refers to the value in the '''Start Sub''' box in the '''Default Data Source Settings''' section of the [HelpRoot_FormReference\CS_20_60_00|Report Definitions] form.
|- 
| <tt>@ReportDescr</tt>
|  The report description that the system prints in the column set header. 
|- 
| <tt>@RowCode</tt>
|  The code of the current row in the report.
|- 
| <tt>@RowIndex</tt>
|  The index of the current row in the report.
|- 
| <tt>@RowSetCode</tt>
|  The code of the current row set in the report.
|- 
| <tt>@RowText</tt>
|  The description of the current row in the report.
|- 
| <tt>@UnitCode</tt>
|  The code of the current unit in the report.
|- 
| <tt>@UnitSetCode</tt>
|  The code of the current unit set in the report.
|- 
| '''@UnitText'''
|  The description of the current unit in the report.
|}
==Links to Rows==
You can use the links to the rows in the formulas to define the parameters. The links to the rows are used when a formula is defined for the row to calculate its values, and the referenced rows are the parameters used in these calculations. For example, when a row is a summarized value of the other two rows, the formula includes the references to the rows to be summarized. {br}

You can use the links to the rows in the formulas designed for the calculation of row and column values. However, we do not recommend that you reference the rows in the formulas defined for columns because of the self-references in these formulas. Self-references can be the source of circular reference errors in the formulas. {br}

The links to the rows have the following format: ''row&#95;code'', where ''row&#95;code'' is the code of the referenced row (for example, ''00112''). {br}

The following are examples of formulas using links to the rows.{{{{=@30+C30+E30
=C110-@110+H110
}}}}
In the examples above, ''@30'', ''C30'', ''E30'', ''C110'', ''H110'', and ''@110'' are the cells in rows 30 and 110. The row codes are entered manually by the report designer. 
==Links to Columns==
You can use the links to the columns in the formulas to define the parameters. You use the links to the columns when a formula is defined for the column to calculate its values, and the referenced columns are the parameters used in these calculations. For example, when a column is a summarized value of the other two columns, the formula includes the references to the columns to be summarized. You can use the links to the columns in the formulas designed for calculation of column and row values. Again, avoid referencing the columns in the formulas defined for rows because self-references in these formulas can cause circular reference errors. {br}

To reference a column, replace its code in the formula as a parameter. {br}

See the following examples of formulas with links to the columns.{{{{=A+B+D
=C-D
}}}}
''A'', ''B'', ''C'', and ''D'' are the column codes. The codes of the columns are assigned by the system and cannot be changed. 
==Links to Cells==
You can use the links to the report cells in the formulas to define the parameters. You use these links when a formula is defined for the column or row to calculate its values, and the referenced cells are the parameters used in these calculations. {br}

To reference a cell, substitute its code into the formula as a parameter. {br}

See the following examples of formulas using links to the cells.{{{{=A60+B30+D20
=C30-D20
}}}}
In the examples, ''A'', ''B'', ''C'', and ''D'' are the column codes, while ''20'', ''30'', and ''60'' are the row codes. The cells located in the specified rows of the columns indicated by the first letters are used as the parameters in these formulas. 
==Self-Links in Formula Parameters==
The self-links in the formulas can be used in very few cases; they typically are not used to avoid the situations when a self-link results in circular reference error. An example of a useful self-link is the case when some operations must be performed with the values selected directly from the data source, such as calculations of charges for a certain period. To use a self-link in a formula, insert a link to the row or column in the formula defined for this row or column. {br}

The following example of self-reference in a row and column can be used to calculate charges of 5%. {{{{=@20*0.05
}}}}
In the example, ''20'' is the code of the row where the formula is defined. In this example, all values in the 20th row will be multiplied by 0.05. {{{{=A*0.05
}}}}((({S:Hint}To avoid self-reference, you can use two different rows in the row set: The first row includes the data selected from the data source, while the second one calculates the charges. Then you can exclude the first row from the printed report by selecting the ''Hidden'' option in the '''Printing Control''' row attribute on the [HelpRoot_FormReference\CS_20_60_10|Row Sets] or [HelpRoot_FormReference\CS_20_60_20|Column Sets] form.
)))
==Related Articles==
*[HelpRoot_ReportingTools\CS__ARM_Formulas|Formulas]
*[HelpRoot_ReportingTools\CS__ARM_Operators|Formula Operators]
*[HelpRoot_ReportingTools\CS__ARM_Functions|Formula Functions]
*[HelpRoot_ReportingTools\CS__ARM_Data_Source|Data Source]]]></column>
			<column name="PlainText"><![CDATA[Formula Parameters A formula may include parameters that reference the data you want use in calculating the 				values in the report. There are two types of parameters: predefined parameters; and 				links to specific rows, columns, or individual report cells.  Predefined Parameters The predefined parameters are application-specific and refer to the report parameters that you 				specify on other ARM forms, such as the   ([~/?ScreenId=CS206000|CS206000]) Report Definitions (CS206000) 				form or the   ([~/?ScreenId=CS206010|CS206010]) Row Sets (CS206010) form. For example, the 					 @StartPeriod  parameter refers to the value specified in the 					 Start Period  box on the   ([~/?ScreenId=CS206000|CS206000]) Report Definitions 				form, and the  @BaseRowCode  parameter refers to the value 				specified in the  Base Row  box on the   ([~/?ScreenId=CS206010|CS206010]) Row Sets form. All the available predefined parameters are 				listed in the  Data Source Editor dialog 				box. The table below provides the list of the predefined parameters with their 				descriptions. Parameter Description  @AccountCode The code of the current account if the  Account  option is selected in the 										 Expand  box in the Data Source Editor 									dialog box. This is the code of the current subaccount if the  Sub  option is selected in the 										 Expand  box. @AccountDescr The description of the current account if the  Account  option is selected in the 										 Expand  box in the Data Source Editor 									dialog box. This is the description of the current subaccount if the  Sub  option is selected in 									the  Expand  box. @BaseRowCode The row code specified for the selected row in the  Base Row  								column on the   ([~/?ScreenId=CS206010|CS206010]) Row Sets form. This row code is 								referred to by this parameter, which you use in the formula in the 									 Value  box on the   ([~/?ScreenId=CS206020|CS206020]) Column Sets (CS206020) form to retrieve the value 								specified in this row for computing another value in the 								report. @BookCode The code of the ledger whose data is used in the report. This parameter refers to the 								value in the  Ledger  box in the 									 Default Data Source Settings  								section. @BranchName The identifier of the branch that is used in the report. @ColumnCode The code of the current column in the report. @ColumnIndex The index of the current column in the report. @ColumnSetCode The code of the current column set in the report. @ColumnText The description of the current column in the report. @EndAccount The last account in the range of accounts used in the report. This parameter refers to 								the value in the  End Account  box in the 									 Default Data Source Settings  section of 								the   ([~/?ScreenId=CS206000|CS206000]) Report Definitions form. @EndAccountGroup The last account group in the range of account groups used in the report. This 								parameter refers to the value in the  End Acc. 									Group  box in the  Default Data Source 									Settings  section of the   ([~/?ScreenId=CS206000|CS206000]) Report Definitions form. This parameter is valid 									only in reports of the  PM  type. @EndBranch The last branch in the range of branches used in the report. This parameter refers to 								the value in the  End Branch  box in the 									 Default Data Source Settings  section of 								the   ([~/?ScreenId=CS206000|CS206000]) Report Definitions form. @EndPeriod The end period of the report. This parameter refers to the value in the  End 									Period  box in the  Default Data Source 									Settings  section of the   ([~/?ScreenId=CS206000|CS206000]) Report Definitions form. @EndProject The last project in the range of projects used in the report. This parameter refers to 								the value in the  End Project  box in the 									 Default Data Source Settings  section of 								the   ([~/?ScreenId=CS206000|CS206000]) Report Definitions form. This parameter is 									valid only in reports of the  PM  type. @EndProjectTask The last project task in the range of the project tasks used in the report. This 								parameter refers to the value in the  End Task  								box in the  Default Data Source Settings  								section of the   ([~/?ScreenId=CS206000|CS206000]) Report Definitions form. This 									parameter is valid only in reports of the  PM  								type. @EndSub The last subaccount in the range of subaccounts used in the report. This parameter 								refers to the value in the  End Sub  box in the 									 Default Data Source Settings  section of 								the   ([~/?ScreenId=CS206000|CS206000]) Report Definitions form. @StartAccount The first account in the range of accounts used in the report. This parameter refers 								to the value in the  Start Account  box in the 									 Default Data Source Settings  section of 								the   ([~/?ScreenId=CS206000|CS206000]) Report Definitions form. @StartAccountGroup The first account group in the range of account groups used in the report. Refers to 								the value in the  Start Acc. Group  box in the 									 Default Data Source Settings  section of 								the   ([~/?ScreenId=CS206000|CS206000]) Report Definitions form. This parameter is 									valid only in reports of the  PM  type. @StartBranch  The first branch in the range of branches used in the report. This parameter refers 								to the value in the  Start Branch  box in the 									 Default Data Source Settings  section of 								the   ([~/?ScreenId=CS206000|CS206000]) Report Definitions form. @StartPeriod The start period of the report. This parameter refers to the value in the 									 Start Period  box in the 									 Default Data Source Settings  section of 								the   ([~/?ScreenId=CS206000|CS206000]) Report Definitions form. @StartProject The first project in the range of projects used in the report. This parameter refers 								to the value in the  Start Project  box in the 									 Default Data Source Settings  section of 								the   ([~/?ScreenId=CS206000|CS206000]) Report Definitions form. This parameter is 									valid only in reports of the  PM  type. @StartProjectTask The first project task in the range of project tasks used in the report. This 								parameter refers to the value in the  Start 									Task  box in the  Default Data Source 									Settings  section of the   ([~/?ScreenId=CS206000|CS206000]) Report Definitions form. This parameter is valid 									only in reports of the  PM  type. @StartSub The first subaccount in the range of subaccounts used in the report. This parameter 								refers to the value in the  Start Sub  box in 								the  Default Data Source Settings  section of 								the   ([~/?ScreenId=CS206000|CS206000]) Report Definitions form. @ReportDescr  The report description that the system prints in the column set header.  @RowCode  The code of the current row in the report. @RowIndex  The index of the current row in the report. @RowSetCode  The code of the current row set in the report. @RowText  The description of the current row in the report. @UnitCode  The code of the current unit in the report. @UnitSetCode  The code of the current unit set in the report. @UnitText  The description of the current unit in the report. Links to Rows You can use the links to the rows in the formulas to define the parameters. The links 				to the rows are used when a formula is defined for the row to calculate its values, 				and the referenced rows are the parameters used in these calculations. For example, 				when a row is a summarized value of the other two rows, the formula includes the 				references to the rows to be summarized.  You can use the links to the rows in the formulas designed for the calculation of row and 				column values. However, we do not recommend that you reference the rows in the 				formulas defined for columns because of the self-references in these formulas. 				Self-references can be the source of circular reference errors in the formulas.  The links to the rows have the following format:  row_code , where 					 row_code  is the code of the referenced row (for example,  00112 ).  The following are examples of formulas using links to the rows. =@30+C30+E30
=C110-@110+H110 In the examples above,  @30 ,  C30 ,  E30 ,  C110 ,  H110 , and 					 @110  are the cells in rows 30 and 110. The row codes are entered manually 				by the report designer.  Links to Columns You can use the links to the columns in the formulas to define the parameters. You use the 				links to the columns when a formula is defined for the column to calculate its 				values, and the referenced columns are the parameters used in these calculations. 				For example, when a column is a summarized value of the other two columns, the 				formula includes the references to the columns to be summarized. You can use the 				links to the columns in the formulas designed for calculation of column and row 				values. Again, avoid referencing the columns in the formulas defined for rows 				because self-references in these formulas can cause circular reference errors.  To reference a column, replace its code in the formula as a parameter.  See the following examples of formulas with links to the columns. =A+B+D
=C-D A ,  B ,  C , and  D  are the column codes. The codes of the columns are 				assigned by the system and cannot be changed.  Links to Cells You can use the links to the report cells in the formulas to define the parameters. 				You use these links when a formula is defined for the column or row to calculate its 				values, and the referenced cells are the parameters used in these calculations.  To reference a cell, substitute its code into the formula as a parameter.  See the following examples of formulas using links to the cells. =A60+B30+D20
=C30-D20 In the examples,  A ,  B ,  C , and  D  are the column codes, while 					 20 ,  30 , and  60  are the row codes. The cells located in the 				specified rows of the columns indicated by the first letters are used as the 				parameters in these formulas.  Self-Links in Formula Parameters The self-links in the formulas can be used in very few cases; they typically are not used to 				avoid the situations when a self-link results in circular reference error. An 				example of a useful self-link is the case when some operations must be performed 				with the values selected directly from the data source, such as calculations of 				charges for a certain period. To use a self-link in a formula, insert a link to the 				row or column in the formula defined for this row or column.  The following example of self-reference in a row and column can be used to calculate charges 				of 5%.  =@20*0.05 In the example,  20  is the code of the row where the formula is defined. In this 				example, all values in the 20th row will be multiplied by 0.05.  =A*0.05 To avoid self-reference, you can use two different rows in the row set: The 				first row includes the data selected from the data source, while the second one 				calculates the charges. Then you can exclude the first row from the printed report 				by selecting the  Hidden   option in the  Printing 					Control  row attribute on the   ([~/?ScreenId=CS206010|CS206010]) Row Sets or 					  ([~/?ScreenId=CS206020|CS206020]) Column Sets form. ]]></column>
		</row>
		<row PageID="cfe77fe2-5f9d-43ac-9037-c970bf122a61" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="4ea55e9a-3a57-a3a5-e951-d09965c80ae9" RecordSourceID="22377">
			<column name="Content"><![CDATA[
Printing style settings determine how the text in the report will be formatted and printed. The printing style parameters include the text formatting options you can specify for the report pages and for the individual rows and columns. {br}{TOC}
==Report Formatting Settings==
You can set up the page structure (including the report page and margin sizes), select the font attributes (the font name, size, style, and color), and set up the text alignment and background color attributes for the text lines in the report. The formatting settings defined for the whole report include the report attributes for the page formatting, and the printing style for the report text. You specify the report formatting parameters, described in the following table, on the [HelpRoot_FormReference\CS_20_60_00|Report Definitions] ([~/?ScreenId=CS206000|CS206000]) form of the Analytical Report Manager. 
{| class="checklist" | width="100%" 
|- 
!width="20%" ! Report Layout Parameter
!width="80%" ! Description
|- 
| '''Margins'''
| 
 Includes elements you can use to specify the margin size settings for the report page, which can be set in pixels, points, picas, centimeters, millimeters, or inches. You can specify the following margins:
*'''Left''': The size of the left margin of the report page.
*'''Top''': The size of the top margin of the report page.
*'''Bottom''': The size of the bottom margin of the report page.
*'''Right''': The size of the right margin of the report page.

|- 
| '''Print Area'''
| 
Includes elements you can use to specify the size of the report page, which can be set in pixels, points, picas, centimeters, millimeters, or inches. You can specify the following sizes:
*''Width'': The report page width.
*''Height'': The report page height.

|- 
| '''Default Font Style'''
|  Includes elements you can use to specify the style parameters, including font formatting, background color, and text align options, for the report. These parameters are the same as the settings specified for the row and column '''Style''' parameters used to define the printing style for the rows and columns.
|}
==Row Formatting Parameters==
On the [HelpRoot_FormReference\CS_20_60_10|Row Sets] ([~/?ScreenId=CS206010|CS206010]) form, you can set up any particular row in the report to visually emphasize it by using text alignment, font name, size, style, color, and background color. The formatting parameters defined on the row level include setting up the row attributes for the row formatting, and defining the printing style for the text in the row. To define the row formatting, set the following row parameters. 
{| class="checklist" | width="100%" 
|- 
!width="20%" ! Row Formatting Parameter
!width="80%" ! Description
|- 
| '''Height'''
|  The row height (in pixels).
|- 
| '''Indent'''
|  The row indentation (in pixels).
|- 
| '''Style'''
| The style parameters for the row, including font formatting, background color, and text align options.
|}
==Column Formatting Parameters==
On the [HelpRoot_FormReference\CS_20_60_20|Column Sets] ([~/?ScreenId=CS206020|CS206020]) form, you can set up any particular column in the report to visually emphasize it by using text alignment, font name, size, style, color, and background color attributes. The formatting parameters defined on the column level include setting up the column formatting, and defining the printing style for the text in the column. Column formatting is frequently used to highlight some columns in the report (for example, when the highlighted columns display totals calculated for some reporting periods, and they must have a notable formatting). To define the column formatting, set the following column attributes. 
{| class="checklist" | width="100%" 
|- 
!width="20%" ! Column Formatting Parameter
!width="80%" ! Description
|- 
| '''Width'''
|  The column width (in pixels).
|- 
| '''Extra Space'''
|  The indent defined for the column (in pixels).
|- 
| '''Style'''
| The style parameters for the column, including font formatting, background color, and text align options.
|}
==Style Parameters==
Style parameters are the text formatting parameters specified for the entire report or for individual row or column. {br}

You specify the text formatting parameters for a report, row, or column in the style section of the [HelpRoot_FormReference\CS_20_60_00|Report Definitions] ([~/?ScreenId=CS206000|CS206000]) form or in the style dialog box (shown below), which you invoke from the [HelpRoot_FormReference\CS_20_60_10|Row Sets] ([~/?ScreenId=CS206010|CS206010]) or [HelpRoot_FormReference\CS_20_60_20|Column Sets] ([~/?ScreenId=CS206020|CS206020]) form. [image:UserGuide/Images/Printing_Style_Printing_StylePrinting_Style.PNG|popup|300px]
In the style dialog box, you can specify the following formatting parameters.
{| class="checklist" | width="100%" 
|- 
!width="20%" ! Formatting parameter
!width="80%" ! Description
|- 
| '''Text Align'''
|  The alignment for the text in the report lines.
|- 
| '''Color'''
|  The text color.
|- 
| '''Back Color'''
|  The background color.
|- 
| '''Font'''
|  The font name.
|- 
| '''Font Size'''
|  The font size.
|- 
| '''Font Style'''
|  The font style, which can be one of the following options: ''Regular'', ''Bold'', ''Italic'', ''Underline'', or ''Strikeout'').
|}
==Related Articles==
*[HelpRoot_ReportingTools\CS__ARM_Analytical_Report_Parameters|Analytical Report Manager]
*[HelpRoot_FormReference\CS_20_60_00|Report Definitions] ([~/?ScreenId=CS206000|CS206000])
*[HelpRoot_FormReference\CS_20_60_10|Row Sets] ([~/?ScreenId=CS206010|CS206010])
*[HelpRoot_FormReference\CS_20_60_20|Column Sets] ([~/?ScreenId=CS206020|CS206020])]]></column>
			<column name="PlainText"><![CDATA[Printing Style Printing style settings determine how the text in the report will be formatted and printed. 				The printing style parameters include the text formatting options you can specify 				for the report pages and for the individual rows and columns.  Report Formatting Settings You can set up the page structure (including the report page and margin sizes), select the 				font attributes (the font name, size, style, and color), and set up the text 				alignment and background color attributes for the text lines in the report. The 				formatting settings defined for the whole report include the report attributes for 				the page formatting, and the printing style for the report text. You specify the 				report formatting parameters, described in the following table, on the   ([~/?ScreenId=CS206000|CS206000]) Report Definitions (CS206000) form of the Analytical Report 				Manager.  Report Layout Parameter Description Margins  Includes elements you can use to specify the margin size settings for the report page, 									which can be set in pixels, points, picas, centimeters, 									millimeters, or inches. You can specify the following 									margins: Left : The size of the left margin of the report page. Top : The size of the top margin of the report page. Bottom : The size of the bottom margin of the report page. Right : The size of the right margin of the report page. Print Area Includes elements you can use to specify the size of the report page, which can be set in 									pixels, points, picas, centimeters, millimeters, or inches. You 									can specify the following sizes: Width : The report page width. Height : The report page height. Default Font Style  Includes elements you can use to specify the style parameters, including font 								formatting, background color, and text align options, for the 								report. These parameters are the same as the settings specified for 								the row and column  Style  parameters used to define the 								printing style for the rows and columns. Row Formatting Parameters On the   ([~/?ScreenId=CS206010|CS206010]) Row Sets (CS206010) form, you can set up any 				particular row in the report to visually emphasize it by using text alignment, font 				name, size, style, color, and background color. The formatting parameters defined on 				the row level include setting up the row attributes for the row formatting, and 				defining the printing style for the text in the row. To define the row formatting, 				set the following row parameters.  Row Formatting Parameter Description Height  The row height (in pixels). Indent  The row indentation (in pixels). Style The style parameters for the row, including font formatting, background color, and 								text align options. Column Formatting Parameters On the   ([~/?ScreenId=CS206020|CS206020]) Column Sets (CS206020) form, you can set up 				any particular column in the report to visually emphasize it by using text 				alignment, font name, size, style, color, and background color attributes. The 				formatting parameters defined on the column level include setting up the column 				formatting, and defining the printing style for the text in the column. Column 				formatting is frequently used to highlight some columns in the report (for example, 				when the highlighted columns display totals calculated for some reporting periods, 				and they must have a notable formatting). To define the column formatting, set the 				following column attributes.  Column Formatting Parameter Description Width  The column width (in pixels). Extra Space  The indent defined for the column (in pixels). Style The style parameters for the column, including font formatting, 								background color, and text align options. Style Parameters Style parameters are the text formatting parameters specified for the entire report 				or for individual row or column.  You specify the text formatting parameters for a report, row, or column in the style section 				of the   ([~/?ScreenId=CS206000|CS206000]) Report Definitions (CS206000) form or in the style 				dialog box (shown below), which you invoke from the   ([~/?ScreenId=CS206010|CS206010]) Row Sets (CS206010) or   ([~/?ScreenId=CS206020|CS206020]) Column Sets 				(CS206020) form.  In the style dialog box, you can specify the following formatting parameters. Formatting parameter Description Text Align  The alignment for the text in the report lines. Color  The text color. Back Color  The background color. Font  The font name. Font Size  The font size. Font Style  The font style, which can be one of the following options:  Regular , 									 Bold ,  Italic ,  Underline , or 									 Strikeout ).  ([~/?ScreenId=CS206000|CS206000])  ([~/?ScreenId=CS206010|CS206010])  ([~/?ScreenId=CS206020|CS206020]) ]]></column>
		</row>
		<row PageID="24b77bbe-0eb3-4d37-9350-071ae5743571" Language="en-US" PageRevisionID="1" PlainText=" Acumatica Report                         Designer Guide This part of the guide provides information on how to create report forms and printed pages by     using the  Acumatica Report                         Designer tool. In This Part  Acumatica Report                         Designer User InterfaceCreating and Modifying the ReportsSelecting Data for the ReportComposing the Report LayoutData Grouping and SortingUsing ExpressionsCreating the Report ContentUsing VariablesUsing the External Parameter Collection EditorSaving and Publishing the ReportsTranslating ReportsUpdating the Database Schema for ReportsRecommendations" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="dab5ec51-aa5b-a855-4c41-3941d0058aa1" RecordSourceID="22377">
			<column name="Content"><![CDATA[
This part of the guide provides information on how to create report forms and printed pages by using the Acumatica Report                         Designer tool.
==In This Part==[anchor|#ul_b12_pxy_kn]
*[HelpRoot_ReportingTools\Acumatica_Report_Designer_User_Interface| Acumatica Report                         Designer User Interface]
*[HelpRoot_ReportingTools\Creating_and_Modifying_the_Reports|Creating and Modifying the Reports]
*[HelpRoot_ReportingTools\Selecting_Data_for_the_Report|Selecting Data for the Report]
*[HelpRoot_ReportingTools\Composing_the_Report_Layout|Composing the Report Layout]
*[HelpRoot_ReportingTools\Data_Grouping_and_Sorting|Data Grouping and Sorting]
*[HelpRoot_ReportingTools\Using_Expressions|Using Expressions]
*[HelpRoot_ReportingTools\Creating_the_Report_Content|Creating the Report Content]
*[HelpRoot_ReportingTools\Using_Variables|Using Variables]
*[HelpRoot_ReportingTools\Using_the_External_Parameter_Collection_Editor|Using the External Parameter Collection Editor]
*[HelpRoot_ReportingTools\Saving_and_Publishing_the_Reports|Saving and Publishing the Reports]
*[HelpRoot_ReportingTools\Translating_Reports|Translating Reports]
*[HelpRoot_ReportingTools\RD__how_Update_Reports|Updating the Database Schema for Reports]
*[HelpRoot_ReportingTools\ReportGuidelines|Recommendations]
]]></column>
		</row>
		<row PageID="b17045e9-3acd-4c1f-b493-9eeb7b89a48a" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="a589b8fe-5376-f827-a0a7-f91abf96fc14" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The Acumatica Report                         Designer provides visual tools that you can use to design custom reports. From the Acumatica Report                         Designer screen, you can select the report data from the Acumatica ERP system database, create the report content, and save the report in a detached file with the <tt>.rpx</tt> format. This file stores the report description as XML data.
==Accessing the Report Designer==
To view the Acumatica Report                         Designer main window, navigate as follows: '''Start''' &gt; '''Programs''' &gt; '''Acumatica''' &gt; '''Report Designer'''.[image:UserGuide/Images/Acumatica_Report_Designer_User_Interface_Acumatica_Report_Designer_User_InterfaceReportDesigner_Signed.PNG|popup|Report Designer Main Window|400px]
 The main window of the Acumatica Report                         Designer includes three areas: 
*The Design area displays the report layout, which users can change.
*The Tools area provides access to the tools that can be used to design the report layout and add the report content.
*The Tabs area includes the following tabs: 
**'''Properties''': Displays the properties of the report element selected in the Design area.
**'''Fields''': Lists the names of all data access class (DAC) fields selected as the source of data for the report.
*The Modes area allows to toggle between the following display modes:
**'''Design''': This default mode is used for editing the report layout.
**'''Preview''': This mode is used for previewing the resulting report layout.
**:((({S:Hint}Preview mode is supported only for server version 2018R2 Preview 2 (18.192.xxxx) or higher. Please make sure that you have you Acumatica ERP instance updated.
)))

==Main Window Menu==
The Main Window menu of the Acumatica Report                         Designer includes the commands described below. [anchor|#_e237c41a-2953-4096-ab91-18cebc7b27c0]
{| class="checklist" | width="100%" 
|- 
!width="18%" ! Command
!width="81%" ! Description
|- 
| rowspan="9" | '''File'''
| The commands under the '''File''' menu, listed below, provide access to the main operations with the report file and allow you to access the database schema:
|- 
| ''New'': Creates a new report file.
|- 
| ''Open'': Opens and existing report file.
|- 
| ''Open From Server'': Opens an existing report file located on the Acumatica ERP application server.((({S:Hint}The history of successful connections is automatically saved in the drop down list of the URL box. You can delete records from the connection history list by using the right mouse click and selecting '''Delete URL from history'''.
)))
|- 
| ''Save'': Saves the current report file.
|- 
| ''Save As'': Saves the current report in a new file. This command can be used to rename a report file or to save it to a new location.
|- 
| ''Save On Server'': Saves the report on the Acumatica ERP application server.
|- 
| ''Build Schema'': Runs the Schema Builder wizard.
|- 
| ''Exit'':Closes the Report Designer main window.
|- 
| rowspan="7" | '''Edit'''
| You can use the commands under the '''Edit''' menu, listed below, to perform basic editing operations with the objects placed in the Design area.
|- 
| ''Undo'': Reverts the latest change done to the report. The Acumatica Report                         Designer stores all the report changes, which you can undo, until the report is closed.
|- 
| ''Redo'': Reverts the effect of the last undone action. Making a new edit clears the redo list.
|- 
| ''Cut'': Removes the selected items from the Design area and places a copy of them on the clipboard.
|- 
| ''Copy'': Places a copy of the selected items on the clipboard.
|- 
| ''Paste'': Places the items from the clipboard in the Design area.
|- 
| ''Delete'': Completely removes the selected items from the Design area.
|- 
| rowspan="7" | '''Format'''
|  The commands under the '''Format''' menu, listed below, let you perform basic formatting operations on the objects placed in the Design area.
|- 
| ''Bring To Front'': Changes the layering of the objects placed in the Design area, placing the selected items in front of all the other items in the area.
|- 
| ''Send To Back'': Changes the layering of the objects placed in the Design area, placing the selected items behind all the other items in the area.
|- 
| ''Align'': Aligns the selected objects as follows: [anchor|#_72a0abc3-fa5d-410c-84c9-513a61e46231]
*''Left'', ''Center'', and ''Right'' dictate how the selected items in the Design area will be horizontally aligned.
*''Top'', ''Middle'', and ''Bottom'' determine how the selected items in the Design area will be vertically aligned.
*''To Grid'' snaps the selected items in the Design area to the grid.

|- 
| ''Make Same Size'': Adjusts the size of the selected items in the Design area as follows: [anchor|#_19473f1a-876c-4225-95a6-4abac3a8822a]
*''Width'': Makes the selected objects the same width.
*''Height'': Makes the selected objects the same height.
*''Both'': Makes the selected objects the same width and height.

|- 
| ''Horizontal Spacing'': Changes the horizontal spacing between the selected items in the Design area as follows: [anchor|#_b10e368b-3d5b-4dad-8e02-275b5288c6d5]
*''Make Equal'': Sets equal horizontal spacing between the selected objects.
*''Increase'': Increases the horizontal spacing between the selected objects.
*''Decrease'': Decreases the horizontal spacing between the selected objects.
*''Remove'': Sets a zero horizontal spacing between the selected objects.

|- 
| ''Vertical Spacing'': Changes the vertical spacing between the selected items in the Design area as follows: [anchor|#_1fa4e288-5e97-4ddd-b82d-c50c93679198]
*''Make Equal'': Sets equal vertical spacing between the selected objects.
*''Increase'': Increases the vertical spacing between the selected objects.
*''Decrease'': Decreases the vertical spacing between the selected objects.
*''Remove'': Sets a zero vertical spacing between the selected objects.

|- 
| rowspan="2" | '''View'''
|  ''Regular Grid'': Toggles view modes: [anchor|#_e23bcecc-bdcc-46f3-a2d5-ad1b7ac40bd9]
*Regular Grid is visible.
*Regular Grid is hidden.

|- 
| ''Excel Grid'': Toggles view mode: 
Excel Grid Rows:[anchor|#_c8bc2a3e-9714-423f-bf93-ba1601edf176]
*Excel Grid Rows are visible.
*Excel Grid Rows are hidden.

Excel Grid Columns:[anchor|#_f629407d-f601-44b1-bfc3-775f222eb8f5]
*Excel Grid Columns are visible.
*Excel Grid Columns are hidden.

|}
==Main Window Toolbar==
The Main Window toolbar of the Acumatica Report                         Designer provides single-click access to the menu buttons, as shown and described below. {br}

[anchor|#image_ufg_rhp_tz][image:UserGuide/Images/Acumatica_Report_Designer_User_Interface_Acumatica_Report_Designer_User_InterfaceReportDesigner_Toolbar.PNG|popup|Report Designer Main Window|400px]
===Main Window Toolbar Buttons===
{| class="checklist" | width="100%" 
|- 
!width="16%" ! Number
!width="23%" ! Button Name
!width="60%" ! Description
|- 
| 1
| '''New Report'''
| Invokes the ''New'' command from the '''File''' menu 
|- 
|  2
| '''Open Report'''
| Invokes the ''Open'' command from the '''File''' menu
|- 
|  3
| '''Save Report'''
| Invokes the ''Save'' command from the '''File''' menu
|- 
|  4
| '''Save Report As'''
| Invokes the ''Save As'' command from the '''File''' menu
|- 
| 5
| '''Undo'''
| Invokes the ''Undo'' command from the '''Edit''' menu
|- 
| 6
| '''Redo'''
| Invokes the ''Redo'' command from the '''Edit''' menu
|- 
|  7
| '''Copy'''
| Invokes the ''Copy'' command from the '''Edit''' menu
|- 
|  8
| '''Delete'''
| Invokes the ''Delete'' command from the '''Edit''' menu
|- 
|  9
| '''Bring To Front'''
| Invokes the ''Bring To Front'' command from the '''Format''' menu
|- 
|  10
| '''Send To Back'''
| Invokes the ''Send To Back'' command from the '''Format''' menu
|- 
| 11
| '''Bring To Top'''
| Modifies ''Line'' visual elements to be placed in multiple report sections that are visible not only in the section where the visual elements have been originally placed but also in the rest sections.
|- 
|  12
| '''Align Left'''
| Invokes the ''Align'' &gt; ''Left'' command from the '''Format''' menu
|- 
|  13
| '''Align Center'''
| Invokes the ''Align'' &gt; ''Center'' command from the '''Format''' menu
|- 
|  14
| '''Align Right'''
| Invokes the ''Align'' &gt; ''Rights'' menu command from the '''Format''' menu
|- 
|  15
| '''Align Top'''
| Invokes the ''Align'' &gt; ''Top'' command from the '''Format''' menu
|- 
|  16
| '''Align Middle'''
| Invokes the ''Align'' &gt; ''Middle'' command from the '''Format''' menu
|- 
|  17
| '''Align Bottom'''
| Invokes the ''Align'' &gt; ''Bottom'' command from the '''Format''' menu
|- 
|  18
| '''Align To Grid'''
| Invokes the ''Align'' &gt; ''To Grid'' command from the '''Format''' menu
|- 
|  19
| '''Make Same Width'''
| Invokes the ''Make Same Size'' &gt; ''Width'' command from the '''Format''' menu
|- 
|  20
| '''Make Same Height'''
| Invokes the ''Make Same Size'' &gt; ''Height'' command from the '''Format''' menu
|- 
|  21
| '''Make Same Size'''
| Invokes the ''Make Same Size'' &gt; ''Both'' command from the '''Format''' menu
|- 
|  22
| '''Make Horizontal Spacing Equal'''
| Invokes the ''Horizontal Spacing'' &gt; ''Make Equal'' command from the '''Format''' menu
|- 
|  23
| '''Increase Horizontal Spacing'''
| Invokes the ''Horizontal Spacing'' &gt; ''Increase'' command from the '''Format''' menu
|- 
|  24
| '''Decrease Horizontal Spacing'''
| Invokes the ''Horizontal Spacing'' &gt; ''Decrease'' command from the '''Format''' menu
|- 
|  25
| '''Make Vertical Spacing Equal'''
| Invokes the ''Vertical Spacing'' &gt; ''Make Equal'' command from the '''Format''' menu
|- 
|  26
| '''Increase Vertical Spacing'''
| Invokes the ''Vertical Spacing'' &gt; ''Increase'' command from the '''Format''' menu
|- 
|  27
| '''Decrease Vertical Spacing'''
| Invokes the ''Vertical Spacing'' &gt; ''Decrease'' command from the '''Format''' menu
|}]]></column>
			<column name="PlainText"><![CDATA[ Acumatica Report                         Designer User Interface The  Acumatica Report                         Designer provides visual tools that you can use to design custom reports. From the  Acumatica Report                         Designer screen, you can select the report data from the  Acumatica ERP system database, create the report content, and save the report in a detached file with the          .rpx  format. This file stores the report description as XML data. Accessing the Report Designer To view the  Acumatica Report                         Designer main window, navigate as follows:  Start  >            Programs  >  Acumatica  >            Report Designer . Report Designer Main Window  The main window of the  Acumatica Report                         Designer includes three areas:  The Design area displays the report layout, which users can change. The Tools area provides access to the tools that can be used to design the report layout and add           the report content. The Tabs area includes the following tabs:  Properties : Displays the properties of the report element               selected in the Design area. Fields : Lists the names of all data access class (DAC) fields               selected as the source of data for the report. The Modes area allows to toggle between the following display modes: Design : This default mode is used for editing the report               layout. Preview : This mode is used for previewing the resulting               report layout. Preview mode is supported only for server version 2018R2 Preview 2                 (18.192.xxxx) or higher. Please make sure that you have you  Acumatica ERP instance updated. Main Window Menu The Main Window menu of the  Acumatica Report                         Designer includes the commands described below.  Command Description File The commands under the  File  menu, listed below, provide                 access to the main operations with the report file and allow you to access the                 database schema: New : Creates a new report file. Open : Opens and existing report file. Open From Server : Opens an existing report file located on the  Acumatica ERP application server. The history of successful connections is automatically                   saved in the drop down list of the URL box. You can delete records from the                   connection history list by using the right mouse click and selecting                      Delete URL from history . Save : Saves the current report file. Save As : Saves the current report in a new file. This command can be                 used to rename a report file or to save it to a new location. Save On Server : Saves the report on the  Acumatica ERP application server. Build Schema : Runs the Schema Builder wizard. Exit :Closes the Report Designer main window. Edit You can use the commands under the  Edit  menu, listed                 below, to perform basic editing operations with the objects placed in the Design                 area. Undo : Reverts the latest change done to the report. The  Acumatica Report                         Designer stores all the report changes, which you can undo, until the report is                 closed. Redo : Reverts the effect of the last undone action. Making a new edit                 clears the redo list. Cut : Removes the selected items from the Design area and places a copy                 of them on the clipboard. Copy : Places a copy of the selected items on the clipboard. Paste : Places the items from the clipboard in the Design area. Delete : Completely removes the selected items from the Design                 area. Format  The commands under the  Format  menu, listed below, let                 you perform basic formatting operations on the objects placed in the Design                 area. Bring To Front : Changes the layering of the objects placed in the Design                 area, placing the selected items in front of all the other items in the                 area. Send To Back : Changes the layering of the objects placed in the Design                 area, placing the selected items behind all the other items in the area. Align : Aligns the selected objects as follows:  Left ,  Center , and  Right  dictate how the selected items in                     the Design area will be horizontally aligned. Top ,  Middle , and  Bottom  determine how the selected items in                     the Design area will be vertically aligned. To Grid  snaps the selected items in the Design area to the grid. Make Same Size : Adjusts the size of the selected items in the Design                 area as follows:  Width : Makes the selected objects the same width. Height : Makes the selected objects the same height. Both : Makes the selected objects the same width and height. Horizontal Spacing : Changes the horizontal spacing between the selected                 items in the Design area as follows:  Make Equal : Sets equal horizontal spacing between the selected                     objects. Increase : Increases the horizontal spacing between the selected                     objects. Decrease : Decreases the horizontal spacing between the selected                     objects. Remove : Sets a zero horizontal spacing between the selected objects. Vertical Spacing : Changes the vertical spacing between the selected                 items in the Design area as follows:  Make Equal : Sets equal vertical spacing between the selected                     objects. Increase : Increases the vertical spacing between the selected                     objects. Decrease : Decreases the vertical spacing between the selected                     objects. Remove : Sets a zero vertical spacing between the selected objects. View Regular Grid : Toggles view modes:  Regular Grid is visible. Regular Grid is hidden. Excel Grid : Toggles view mode:  Excel Grid Rows: Excel Grid Rows are visible. Excel Grid Rows are hidden. Excel Grid Columns: Excel Grid Columns are visible. Excel Grid Columns are hidden. Main Window Toolbar The Main Window toolbar of the  Acumatica Report                         Designer provides single-click access to the menu buttons, as shown and described below.  Main Window Toolbar Buttons Number Button Name Description 1 New Report Invokes the  New  command from the  File  menu   2 Open Report Invokes the  Open  command from the  File                  menu  3 Save Report Invokes the  Save  command from the  File                  menu  4 Save Report As Invokes the  Save As  command from the  File                  menu 5 Undo Invokes the  Undo  command from the  Edit                  menu 6 Redo Invokes the  Redo  command from the  Edit                  menu  7 Copy Invokes the  Copy  command from the  Edit                  menu  8 Delete Invokes the  Delete  command from the  Edit                  menu  9 Bring To Front Invokes the  Bring To Front  command from the                    Format  menu  10 Send To Back Invokes the  Send To Back  command from the  Format                  menu 11 Bring To Top Modifies  Line  visual elements to be placed in multiple report sections                 that are visible not only in the section where the visual elements have been                 originally placed but also in the rest sections.  12 Align Left Invokes the  Align  >  Left  command from the                    Format  menu  13 Align Center Invokes the  Align  >  Center  command from the                    Format  menu  14 Align Right Invokes the  Align  >  Rights  menu command from the                    Format  menu  15 Align Top Invokes the  Align  >  Top  command from the                    Format  menu  16 Align Middle Invokes the  Align  >  Middle  command from the                    Format  menu  17 Align Bottom Invokes the  Align  >  Bottom  command from the                    Format  menu  18 Align To Grid Invokes the  Align  >  To Grid  command from the                    Format  menu  19 Make Same Width Invokes the  Make Same Size  >  Width  command from the                    Format  menu  20 Make Same Height Invokes the  Make Same Size  >  Height  command from the                    Format  menu  21 Make Same Size Invokes the  Make Same Size  >  Both  command from the                    Format  menu  22 Make Horizontal Spacing Equal Invokes the  Horizontal Spacing  >  Make Equal  command from the                    Format  menu  23 Increase Horizontal Spacing Invokes the  Horizontal Spacing  >  Increase  command from the                    Format  menu  24 Decrease Horizontal Spacing Invokes the  Horizontal Spacing  >  Decrease  command from the                    Format  menu  25 Make Vertical Spacing Equal Invokes the  Vertical Spacing  >  Make Equal  command from the                    Format  menu  26 Increase Vertical Spacing Invokes the  Vertical Spacing  >  Increase  command from the                    Format  menu  27 Decrease Vertical Spacing Invokes the  Vertical Spacing  >  Decrease  command from the                    Format  menu ]]></column>
		</row>
		<row PageID="45b01f94-838c-4ac4-97a2-73544db7c8bf" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="dba81bb2-4031-8f71-af38-f510934e0685" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can create new reports or modify existing reports by using Acumatica Report                         Designer, as is described briefly below.
==Creating a New Report==
To create a new report, on the menu bar of the Report Designer, select '''File''' > '''New'''. The Report Designer creates a new report file that includes the page header section, the page footer section, and the detail section. You can then create the layout or add content, as described in the [HelpRoot_ReportingTools\Composing_the_Report_Layout|Composing the Report Layout] and [HelpRoot_ReportingTools\Creating_the_Report_Content|Creating the Report Content] sections of this guide. After modification, you can save the report file in a local folder or to the server.
==Modifying an Existing Report==
To modify an existing report, you can open a locally stored file or load the file from the Acumatica ERP server.{br}

To open a locally stored file, on the menu bar, select '''File''' > '''Open''', and then select the report file you want to modify. The selected file is displayed in the Design area of the Report Designer. Once you modify it, you can save it locally or on the server.{br}

To create a report , based on a generic inquiry, on the [HelpRoot_FormReference\SM_20_80_00|Generic Inquiry] ([~/?ScreenId=SM208000|SM208000]) form, click '''Export as Report''' on the form toolbar. The system will export the generic inquiry as &#42;.rpx file, having similar name as the generic inquiry. The resulting exported file will contain generic inquiry data access classes information, such as, list of tables, relations, sort order and grouping. This information can be used to design the report layout in Acumatica Report                         Designer. For more information, see [HelpRoot_ReportingTools\Composing_the_Report_Layout|Composing the Report Layout].{br}

To open a report file located on the Acumatica ERP server, on the menu bar, select '''File''' > '''Open From Server'''. In the dialog box, which appears, do the following:[anchor|#ul_qzm_s4z_ct]
#Type the URL of your Acumatica ERP website, which can be your local website or an external URL of Acumatica ERP, for example:{{{{https://mysite.com/MyAcumatica
}}}}
#:You may need to replace <tt>https</tt> with <tt>http</tt>.
#:((({S:Hint}The history of successful connections is automatically saved in the drop down list of the URL box. You can delete records from the connection history list by using the right mouse click and selecting '''Delete URL from history'''.
)))
#Type your login and password. If your application contains more than one company, type the appropriate company name with the user login in the following format:{{{{admin@mycompany
}}}}
#:Here <tt>admin</tt> is the login, and <tt>mycompany</tt> is the company name. The company name matches the name that you select when you log in to Acumatica ERP. If your application contains only one company, specify only the user login.
#Load the list of available reports from the website, select a report to load, and click '''OK'''.
]]></column>
			<column name="PlainText"><![CDATA[Creating and Modifying the Reports You can create new reports or modify existing reports by using  Acumatica Report                         Designer, as is described briefly below. Creating a New Report To create a new report, on the menu bar of the  Report Designer, select  File New . The  Report Designer creates a new report file that includes the page header section, the page footer                 section, and the detail section. You can then create the layout or add content, as                 described in the  Composing the Report Layout Composing the Report Layout and  Creating the Report                     Content Creating the Report Content sections of this guide. After modification, you can save the                 report file in a local folder or to the server. Modifying an Existing Report To modify an existing report, you can open a locally stored file or load the file                 from the  Acumatica ERP server. To open a locally stored file, on the menu bar, select  File Open , and then select the report file you want to modify. The selected                 file is displayed in the Design area of the  Report Designer. Once you modify it, you can save it locally or on the server. To create a report , based on a generic inquiry, on the   ([~/?ScreenId=SM208000|SM208000]) Generic Inquiry Generic Inquiry (SM208000) form, click  Export as                     Report  on the form toolbar. The system will export the generic                 inquiry as *.rpx file, having similar name as the generic inquiry. The resulting                 exported file will contain generic inquiry data access classes information, such as,                 list of tables, relations, sort order and grouping. This information can be used to                 design the report layout in  Acumatica Report                         Designer. For more information, see  Composing the Report Layout. To open a report file located on the  Acumatica ERP server, on the menu bar, select  File Open From Server . In the dialog box, which appears, do the following: Type the URL of your  Acumatica ERP website, which can be your local website or an external URL of  Acumatica ERP, for example: https://mysite.com/MyAcumatica You may                         need to replace  https  with  http . The history of                         successful connections is automatically saved in the drop down list of the                         URL box. You can delete records from the connection history list by using                         the right mouse click and selecting  Delete URL from                             history . Type your login and password. If your application contains more than one                     company, type the appropriate company name with the user login in the following                         format: admin@mycompany Here  admin  is the                         login, and  mycompany  is the company name. The company name matches                         the name that you select when you log in to  Acumatica ERP. If your application contains only one company, specify only the user                         login. Load the list of available reports from the website, select a report to load,                     and click  OK . ]]></column>
		</row>
		<row PageID="aca7408e-4d55-42de-b257-f150c06d23a6" Language="en-US" PageRevisionID="1" Content="&#xA;When you create a report, you define the rules used to select the necessary data to be displayed in the report. This data is retrieved from the system database via an appropriate data access class (DAC). {br}&#xA;&#xA;To define what data is selected from the database, the Report Designer provides the Schema Builder wizard. Using this wizard, users can load the database schema, set the report parameters, and define the data selection criteria, data filtering, and sorting and grouping rules. &#xA;==In This Section==&#xA;This section contains the following topics: &#xA;*[HelpRoot_ReportingTools\Loading_the_Database_Schema|Loading the Database Schema]&#xA;*[HelpRoot_ReportingTools\Building_the_Database_Request|Building the Database Request]&#xA;" PlainText="Selecting Data for the Report When you create a report, you define the rules used to select the necessary data to be             displayed in the report. This data is retrieved from the system database via an             appropriate data access class (DAC).  To define what data is selected from the database, the Report Designer provides the             Schema Builder wizard. Using this wizard, users can load the database schema, set the             report parameters, and define the data selection criteria, data filtering, and sorting             and grouping rules.  In This Section This section contains the following topics:  Loading the Database                         Schema Loading the Database SchemaBuilding the                         Database Request Building the Database Request" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="621d73f2-48d1-14e1-6e2f-eedfad303aea" RecordSourceID="22377" />
		<row PageID="8bb29ea8-b4c4-46b7-8821-85990ed82988" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="73f97376-350d-3c51-3fd4-8d543a669313" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The Acumatica Report                         Designer accesses the database through the data access classes (DACs) defined in Acumatica ERP. To select the necessary data for the report, you need to load the WSDL file generated by the Acumatica ERP application server. The WSDL file contains the definition of all available DACs. 
==Connecting to the Application Server==
To connect to the Application Server, perform the following steps: 
#Start the Report Designer: '''Start &gt; All Programs &gt; Acumatica &gt; Report Designer'''.
#To create a new blank report form, click '''New Report''' on the toolbar (or access this option on the '''File''' menu). 
#:((({S:Hint}When you open the Report Designer for the first time, the blank report form is displayed by default.
)))
#On the '''File''' menu, select ''Build schema'', as shown on the screenshot below. The Schema Builder wizard appears.[image:UserGuide/Images/Loading_the_Database_Schema_ccess_the_Schema_Builder.png|popup|Accessing the Schema Builder|400px]
#To load the Acumatica ERP WSDL definition file, enter the connection string (as shown in the second screenshot below, in the area left of the red 1). 
#:{{{{http://{domain}

}}}}
#:Here, you must replace <tt>&#0123;domain&#0125;</tt> with the actual URL to your application; you may also need to replace <tt>http</tt> with <tt>https</tt>. A typical connection string for an application launched from Microsoft Visual Studio on a local computer looks like the following. 
#:{{{{http://localhost:64971/Site

}}}}
#If access to the WSDL definition is restricted, provide the user ID and password (see item 2 in the screenshot below). If your application contains more than one company, you have to type an appropriate login company name with the user ID in the following format.{{{{{user ID}@{login company name}

}}}}The login company name matches the name you select when you log in to Acumatica ERP. 
#:((({S:Hint}If an application contains only one company, you type only the user ID.
)))
#Click the '''Load schema''' button (item 3). The Report Designer connects to the application server and loads the Acumatica ERP schema definition. When the WSDL file is retrieved, notice the list of all data access classes (DACs) defined in your application, as shown in the screenshot below. [image:UserGuide/Images/Loading_the_Database_Schema_able_tab_of_the_Schema_builder.png|popup|Loading the DAC schema|400px]
#:((({S:Warn}When you load the schema definition from the application in Visual Studio, make sure that the application has been started and is accessible through the web browser.
)))
#:((({S:Hint} The Acumatica Report                         Designer receives all the meta information required for report creation from the Acumatica ERP WSDL file. You don&rsquo;t need to install Acumatica ERP locally to develop the report; instead, you can just connect to the remote server by using the appropriate URL.
)))
]]></column>
			<column name="PlainText"><![CDATA[Loading the Database Schema The  Acumatica Report                         Designer accesses the database through the data access classes (DACs) defined in  Acumatica ERP. To select the necessary data for the report, you need to load the WSDL file generated by       the  Acumatica ERP application server. The WSDL file contains the definition of all available DACs.  Connecting to the Application Server To connect to the Application Server, perform the following steps:  Start the  Report Designer:  Start > All Programs >  Acumatica > Report Designer . To create a new blank report form, click  New Report  on the toolbar (or access           this option on the  File  menu).  When you open the  Report Designer for the first time, the blank report form is displayed by default. On the  File  menu, select  Build schema , as shown on the screenshot below.           The Schema Builder wizard appears. Accessing the Schema Builder To load the  Acumatica ERP WSDL definition file, enter the connection string (as shown in the second screenshot           below, in the area left of the red 1).  http://{domain}
 Here, you must replace  {domain}  with the actual URL to your application;             you may also need to replace  http  with  https . A typical connection             string for an application launched from Microsoft Visual Studio on a local computer             looks like the following.  http://localhost:64971/Site
 If access to the WSDL definition is restricted, provide the user ID and password (see           item 2 in the screenshot below). If your application contains more than one company, you           have to type an appropriate login company name with the user ID in the following           format. {user ID}@{login company name}
 The login company name           matches the name you select when you log in to  Acumatica ERP.  If an application contains only one company, you type only the user ID. Click the  Load schema  button (item 3). The  Report Designer connects to the application server and loads the  Acumatica ERP schema definition. When the WSDL file is retrieved, notice the list of all data access           classes (DACs) defined in your application, as shown in the screenshot below.  Loading the DAC schema When you load the schema definition from the application in Visual               Studio, make sure that the application has been started and is accessible through the               web browser.  The  Acumatica Report                         Designer receives all the meta information required for report creation from the  Acumatica ERP WSDL file. You don't need to install  Acumatica ERP locally to develop the report; instead, you can just connect to the remote server               by using the appropriate URL. ]]></column>
		</row>
		<row PageID="5de8b0d9-81dd-4733-b9f3-579c4adb2dba" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="80189bc5-98d2-0bd3-2628-e7d1ff28880f" RecordSourceID="22377">
			<column name="Content"><![CDATA[
Data access classes (DACs), which are used to access the data in the system database from the report engine, must be defined for each report. To specify what data will be displayed in the designed report, you should perform the following steps, each of which is described in detail below: 
*Select the DACs from the list of available ones displayed on the '''Tables''' tab of the Schema Builder wizard. The selected DACs specify the tables in the system database from which the data will be selected.
*Specify the relations between the selected DACs on the '''Relations''' tab of the Schema Builder wizard. The DAC relations provide the necessary information to build the SQL request to the database.

==Selecting the DACs for the Report==
To select the DACs to be included in the report, perform the following steps: 
#In the list of available DACs on the '''Tables''' tab of the Schema Builder wizard, select the DAC name to select the data from the database table related to this DAC.
#Click the [image:UserGuide/Images/Building_the_Database_Request_Building_the_Database_RequestButtonRight.png|10px] button to move the DAC to the list of the selected DACs.
#Repeat Steps 1 and 2 for each DAC to be selected. The selected DACs will appear in the list of the selected DACs in the right side of the '''Tables''' tab.
#:((({S:Hint}To remove a DAC from the list of selected DACs, select the DAC by name and click the [image:UserGuide/Images/Building_the_Database_Request_Building_the_Database_RequestButtonLeft.png|10px] button (see screenshot). To remove all the DACs from the list of selected DACs, click the [image:UserGuide/Images/Building_the_Database_Request_Building_the_Database_RequestButtonLeftDouble.png|10px] button.
)))[image:UserGuide/Images/Building_the_Database_Request_electing_tables.png|popup|Selecting DACs|330px]

The list of the selected DACs displays the DACs and their attributes, which match the fields in the database table related to the DAC. 
==Specifying the Relations Between DACs==
The '''Relations''' tab of the '''Schema Builder''' wizard allows you to specify the relations between DACs. The relations between the DACs specify how the relevant tables will be joined in the generated SQL request. {br}

To define a relation between two DACs, you must specify the DAC related to the parent table and the DAC related to the child table in the relation, and specify the DAC attributes related to the data fields to be used as the relevant table joining criteria. Any report can include one or multiple relations between the two DACs. {br}

To set the relations between DACs, repeat the following steps for each relation to be used in the report: 
#Click the empty line in the grid '''Enter the report table relations here'''.
#In the '''Parent Table''' box, select the name of the parent table in the relation.
#In the '''Join Type''' box, select the type of table join: ''Left'', ''Right'', ''Inner'', ''Full'', or ''Cross''.
#In the '''Child Table''' box, select the name of the child table in the relation.
#Enter the aliases for the parent and child tables ('''Parent Alias''' and '''Child Alias'''), if required.

For each relation between the DACs, you should also specify the data field links. Repeat the following steps for each data link to be used in the relation between the tables: 
#Click the empty line in the grid '''Enter the data field links for the active relation'''.
#In the '''Parent Field''' box, select the name of the parent field for the data link.
#In the '''Link Condition''' box, select the condition for linking the fields: ''Equal'', ''NotEqual'', ''Greater'', ''GreaterOrEqual'', ''Less'', or ''LessOrEqual''. You can also select the ''IsNull'' or ''IsNotNull'' items; in such a case, you should not add a child field.
#In the '''Child Field''' box, select the name of the child field for the data link.
#If more than one relation expression will be used for joining the data tables, select the operator: ''And'' or ''Or''.
#Select the '''Braces''' if they are required in the data link expressions.
[image:UserGuide/Images/Building_the_Database_Request_onfiguring_Relation_1.png|popup|Configuring Relation|400px]
The DACs relations and data field links you defined can be deleted: Simply click the relevant line in the grid, and press the DELETE key.]]></column>
			<column name="PlainText"><![CDATA[Building the Database Request Data access classes (DACs), which are used to access the data in the system database from the report engine, must be defined for each report. To specify what data will be displayed in the designed report, you should perform the following steps, each of which is described in detail below:  Select the DACs from the list of available ones displayed on the  Tables  tab of the Schema Builder wizard. The selected DACs specify the tables in the system database from which the data will be selected. Specify the relations between the selected DACs on the  Relations  tab of the Schema Builder wizard. The DAC relations provide the necessary information to build the SQL request to the database. Selecting the DACs for the Report To select the DACs to be included in the report, perform the following steps:  In the list of available DACs on the  Tables  tab of the Schema Builder wizard, select the DAC name to select the data from the database table related to this DAC. Click the   button to move the DAC to the list of the selected DACs. Repeat Steps 1 and 2 for each DAC to be selected. The selected DACs will appear in the list of the selected DACs in the right side of the  Tables  tab. To remove a DAC from the list of selected DACs, select the DAC by name and click the   button (see screenshot). To remove all the DACs from the list of selected DACs, click the   button. Selecting DACs The list of the selected DACs displays the DACs and their attributes, which match the fields in the database table related to the DAC.  Specifying the Relations Between DACs The  Relations  tab of the  Schema Builder  wizard allows you to specify                 the relations between DACs. The relations between the DACs specify how the relevant                 tables will be joined in the generated SQL request.  To define a relation between two DACs, you must specify the DAC related to the parent                 table and the DAC related to the child table in the relation, and specify the DAC                 attributes related to the data fields to be used as the relevant table joining                 criteria. Any report can include one or multiple relations between the two DACs.  To set the relations between DACs, repeat the following steps for each relation to be                 used in the report:  Click the empty line in the grid  Enter the report table relations                     here . In the  Parent Table  box, select the name of the parent table in the                     relation. In the  Join Type  box, select the type of table join:  Left ,                          Right ,  Inner ,  Full , or  Cross . In the  Child Table  box, select the name of the child table in the                     relation. Enter the aliases for the parent and child tables ( Parent Alias  and                          Child Alias ), if required. For each relation between the DACs, you should also specify the data field links.                 Repeat the following steps for each data link to be used in the relation between the                 tables:  Click the empty line in the grid  Enter the data field links for the active                         relation . In the  Parent Field  box, select the name of the parent field for the data                     link. In the  Link Condition  box, select the condition for linking the fields:                          Equal ,  NotEqual ,  Greater ,  GreaterOrEqual ,                          Less , or  LessOrEqual . You can also select the  IsNull  or                          IsNotNull  items; in such a case, you should not add a child                     field. In the  Child Field  box, select the name of the child field for the data                     link. If more than one relation expression will be used for joining the data tables,                     select the operator:  And  or  Or . Select the  Braces  if they are required in the data link expressions. Configuring Relation The DACs relations and data field links you defined can be deleted: Simply click the                 relevant line in the grid, and press the DELETE key. ]]></column>
		</row>
		<row PageID="046b3773-d8c5-459b-8393-6b9c3be9b090" Language="en-US" PageRevisionID="1" Content="&#xA;The report layout determines the visual presentation of the data. To design the report layout, you should perform the following tasks: &#xA;*Define what sections will be included in the report&#xA;*Set up the headers and footers for the report and each report section&#xA;*Set the appearance parameters for each report section&#xA;*Define the behavior parameters for each report section&#xA;*Add visual elements to the report&#xA;&#xA;==In This Section==&#xA;This section includes the following articles: &#xA;*[HelpRoot_ReportingTools\Adding_and_Removing_Report_Sections|Adding and Removing Report Sections]&#xA;*[HelpRoot_ReportingTools\Defining_the_Appearance_of_a_Report_Section|Defining the Appearance of a Report Section]&#xA;*[HelpRoot_ReportingTools\Defining_the_Behavior_Settings_of_a_Report_Section|Defining the Behavior Settings of a Report Section]&#xA;*[HelpRoot_ReportingTools\Adding_and_Removing_Visual_Elements_in_the_Report|Adding and Removing Visual Elements in the Report]&#xA;" PlainText="Composing the Report Layout The report layout determines the visual presentation of the data. To design the report             layout, you should perform the following tasks:  Define what sections will be included in the report Set up the headers and footers for the report and each report section Set the appearance parameters for each report section Define the behavior parameters for each report section Add visual elements to the report In This Section This section includes the following articles:  Adding and                         Removing Report Sections Adding and Removing Report SectionsDefining the Appearance of a Report Section Defining the Appearance of a Report SectionDefining the Behavior Settings of a Report Section Defining the Behavior Settings of a Report SectionAdding and Removing Visual Elements in the Report Adding and Removing Visual Elements in the Report" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="34871b0a-3365-f0ea-8d50-2748989f4140" RecordSourceID="22377" />
		<row PageID="672a0ed6-b72e-4d4c-81a8-7e55111ffa4a" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="a1db73dd-735a-b304-71ec-5d2b3463eea6" RecordSourceID="22377">
			<column name="Content"><![CDATA[
By default, when you create a new report, it includes three sections: the page header section, one page detail section (others can be added), and the page footer section. The sections can display various content, and the values of variables used to calculate and display report values can be reset in each new section. {br}

You can add a new report section or delete any section. You can also copy the style of one section and apply it to another. 
==Adding a Report Section==
To add a report section by duplicating an existing one, proceed as follows: 
#Select the report section you wish to duplicate, and right-click it.
#Choose '''Duplicate Section''' in the pop-up menu, and the new section will be added to the report. The new section will have the same type as the parent section (header of the relevant group, footer of the relevant group, detail section, page footer).
[image:UserGuide/Images/Adding_and_Removing_Report_Sections_uplicating_a_report_section.png|popup|Duplicating a report section|400px]
==Removing a Report Section==
To remove an existing section from a report, do the following steps: 
#Right-click the section.
#Choose '''Delete''' in the pop-up menu. The selected section will be removed from the report. 
[image:UserGuide/Images/Adding_and_Removing_Report_Sections_eleting_a_report_section.png|popup|Deleting a report section|400px]
==Copying the Style Between the Report Sections==
The style defined for one report section can be applied to another section. To copy the style between the sections, perform the following steps: 
#Right-click the report section from which the style should be copied, and choose '''Style Copy''' from the pop-up menu. [image:UserGuide/Images/Adding_and_Removing_Report_Sections_opying_the__style_from_a_section.png|popup|Copying the style from a section|400px]
#Right-click the report section to which the style should be applied, and choose '''Style Paste''' from the pop-up menu. The selected style will be applied to this section. [image:UserGuide/Images/Adding_and_Removing_Report_Sections_pplying_the_copied_style_to_another_section.png|popup|Applying the copied style to another section|450px]

We recommend that you use a special report template instead of defining styles—see the [HelpRoot_ReportingTools\Defining_the_Behavior_Settings_of_a_Report_Section|Defining the Behavior Settings of a Report Section] topic.]]></column>
			<column name="PlainText"><![CDATA[Adding and Removing Report Sections By default, when you create a new report, it includes three sections: the page header section, one page detail section (others can be added), and the page footer section. The sections can display various content, and the values of variables used to calculate and display report values can be reset in each new section.  You can add a new report section or delete any section. You can also copy the style of one             section and apply it to another.  Adding a Report Section To add a report section by duplicating an existing one, proceed as follows:  Select the report section you wish to duplicate, and right-click it. Choose  Duplicate Section  in the pop-up menu, and the new section will be added to the report. The new section will have the same type as the parent section (header of the relevant group, footer of the relevant group, detail section, page footer). Duplicating a report section Removing a Report Section To remove an existing section from a report, do the following steps:  Right-click the section. Choose  Delete  in the pop-up menu. The selected section will be removed from the report.  Deleting a report section Copying the Style Between the Report Sections The style defined for one report section can be applied to another section. To copy the style between the sections, perform the following steps:  Right-click the report section from which the style should be copied, and choose  Style Copy  from the pop-up menu.  Copying the style from a section Right-click the report section to which the style should be applied, and choose  Style Paste  from the pop-up menu. The selected style will be applied to this section.  Applying the copied style to another section We recommend that you use a special report template instead of defining styles—see the                      Defining the Behavior Settings of a Report Section Defining the Behavior Settings of a Report Section                 topic. ]]></column>
		</row>
		<row PageID="aed0eea7-0c14-495f-8e16-ada011c18aa8" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="7d0bb0ab-6101-c114-88c4-d23a8c035c61" RecordSourceID="22377">
			<column name="Content"><![CDATA[
 Acumatica Framework supports report styling with two files: ''TemplateReport.rpx'' (for preparation of common reports) and ''TemplateForm.rpx'' (for preparation of printing Web pages). Using report templates enables users to print reports and documents that share a uniform style. You can create report and document templates yourself or edit existing Acumatica Framework templates through Microsoft Visual Studio. (Template files are XML files that define a set of styles.) Using style templates is the most sensible way to prepare well-styled reports and documents. {br}

If you decide not to use templates, programmers can manually adjust for a group of users font types, font colors, font sizes, and other settings for each field and label. (In the second screenshot below, you can see the '''Style''' group of parameters, which can be adjusted for fields and labels.) This method is labor-consuming, however; that&rsquo;s why using report and document templates is recommended. 
==Using Template Files==
To use a template file, proceed as follows: 
#In Acumatica Report                         Designer, select the top level of the report. On the '''Properties''' tab, locate the '''Styles Template'''. Open the list of report files, choose the ''TemplateReport.rpx'' file, and click the '''Open''' button, as shown in the first screenshot below. [image:UserGuide/Images/Defining_the_Appearance_of_a_Report_Section_electing_the_template_report.png|popup|Selecting the template report|450px]
#Select any report field and set the required '''StyleName''' property. (The second screenshot below illustrates this with the '''Contact''' data field.)
#Try to set appropriate '''StyleName''' properties for the most fields and labels, save the report, and then open and execute the ''Product Replenishment'' report. The report will change its appearance according to the styles predefined for the fields and labels. [image:UserGuide/Images/Defining_the_Appearance_of_a_Report_Section_etting_style_parameter_for_a_field.png|popup|Setting a style parameter for a field|450px]

==Defining a Report Section&rsquo;s Appearance Settings==
You can define the appearance settings of each report section, which determine how the report section will be printed. Appearance settings include the following: 
*The number of columns
*The space between the columns
*The style of the section, which includes its text properties, border settings, and background color and image

To define the appearance settings for a report section, perform the following steps: 
#Click the section within the report to select it, as shown in the screenshot below. [image:UserGuide/Images/Defining_the_Appearance_of_a_Report_Section_tyling_adjustment.png|popup|Styling adjustment|450px]
#On the '''Properties''' tab, in the '''Appearance''' group, choose settings for the fields described below. 
#:=^'''Appearance Settings'''
{| class="checklist" | width="100%" 
|- 
!width="18%" ! Field
!width="81%" ! Description
|- 
| '''ColumnCount'''
|  The number of columns within the report section.
|- 
| '''ColumnSpacing'''
|  The spacing between the columns (in pixels).
|- 
| '''Height'''
|  The height of the section (in centimeters).
|- 
| rowspan="10" | '''Style'''
|  The printing style for the report section, set by the values in the following fields. 
|- 
| '''BackColor''' The background color for the report section.
|- 
| '''BackImage''' The background image parameters for the report section. Enter desired values in the following fields: 
*'''Source '''- Specify the source of the image.
*'''Image '''- Define the image to be used as the background: 
**For an embedded image, select the image name.
**For an external image, enter the path to the image file.
**For an image retrieved from the database, in the '''Image''' box, enter the name of the data field where the image is stored. For example, <tt>=&#91;Branch.LogoName&#93;</tt> to display background image that can be defined separately for each branch.
*'''Repeat''' - Select the appropriate value specifying the repeating pattern for the chosen image: 
**''NoRepeat'' - Adds the specified image with no repeating
**''RepeatX'' - Repeats the image horizontally to fill the width of the report section
**''RepeatY'' - Repeats the image vertically to fill the height of the report section
**''Repeat'' - Repeats the image horizontally and vertically to fill both the width and height of the report section

|- 
| '''BorderColor''' The border color for the report section. You can define the color for the bottom, left, right, and top border of the section, and set the default border color, which will be applied if no special settings are defined for the specific borders.
|- 
| '''BorderStyle''' The border line style. You can define the style for the bottom, left, right, and top border of the section, and set the default border style, which will be applied if no special settings are defined for the specific borders.
|- 
| '''BorderWidth''' The border line width for the report section (in pixels). You can define the width of the bottom, left, right, and top border of the section, and set the default border width, which will be applied if no special settings are defined for the specific borders.
|- 
| '''Font''' The font settings for the report section. You can select the font name and size and specify whether the following font attributes are applied: bold, italic, strikeout, and underline.
|- 
| '''Padding''' The padding setting for the report section, which you can specify in pixels for the left side, right side, top, and bottom of the report section.
|- 
| '''TextAlign''' The text alignment for the report section: ''Left'', ''Center'', ''Right'', or ''Not Set''.
|- 
| '''VerticalAlign''' The content vertical alignment for the report section: ''Not Set'', ''Top'', ''Middle'', or ''Bottom''.
|- 
| '''StyleName'''
| The name of the style defined for the report section. To assign a descriptive name to a style you have defined for a report section, enter the name. To apply an existing style to the report section, select its style name.
|}
^=
]]></column>
			<column name="PlainText"><![CDATA[Defining the Appearance of a Report Section  Acumatica Framework 			supports report styling with two files:  TemplateReport.rpx  (for preparation of 			common reports) and  TemplateForm.rpx  (for preparation of printing Web pages). 			Using report templates enables users to print reports and documents that share a uniform 			style. You can create report and document templates yourself or edit existing  Acumatica Framework templates through Microsoft Visual Studio. (Template files are XML files that define 			a set of styles.) Using style templates is the most sensible way to prepare well-styled 			reports and documents.  If you decide not to use templates, programmers can manually adjust for a group of users 			font types, font colors, font sizes, and other settings for each field and label. (In 			the second screenshot below, you can see the  Style  group of parameters, which can 			be adjusted for fields and labels.) This method is labor-consuming, however; that's why 			using report and document templates is recommended.  Using Template Files To use a template file, proceed as follows:  In  Acumatica Report                         Designer, select the top level of the report. On the  Properties  tab, locate the 						 Styles Template . Open the list of report files, choose the 						 TemplateReport.rpx  file, and click the  Open  button, as shown 					in the first screenshot below.  Selecting the template report Select any report field and set the required  StyleName  property. (The 					second screenshot below illustrates this with the  Contact  data 					field.) Try to set appropriate  StyleName  properties for the most fields and 					labels, save the report, and then open and execute the  Product 						Replenishment  report. The report will change its appearance according to 					the styles predefined for the fields and labels.  Setting a style parameter for a field Defining a Report Section's Appearance Settings You can define the appearance settings of each report section, which determine how 				the report section will be printed. Appearance settings include the following:  The number of columns The space between the columns The style of the section, which includes its text properties, border settings, 					and background color and image To define the appearance settings for a report section, perform the following steps:  Click the section within the report to select it, as shown in the screenshot 					below.  Styling adjustment On the  Properties  tab, in the  Appearance  group, choose settings 					for the fields described below.  Appearance Settings Field Description ColumnCount  The number of columns within the report section. ColumnSpacing  The spacing between the columns (in pixels). Height  The height of the section (in centimeters). Style  The printing style for the report section, set by the 										values in the following fields.  BackColor  The background color for the report 										section. BackImage  The background image parameters for the 										report section. Enter desired values in the following 										fields:  Source  - Specify the source of the 												image. Image  - Define the image to be used as the 												background:  For an embedded image, select the image 												name. For an external image, enter the path to the 												image file. For an image retrieved from the database, in the  Image  box, 												enter the name of the data field where the image 												is stored. For example, 												 =[Branch.LogoName]  to 												display background image that can be defined 												separately for each branch. Repeat  - Select the appropriate value 												specifying the repeating pattern for the chosen 												image:  NoRepeat  - Adds the specified image with no 												repeating RepeatX  - Repeats the image horizontally to 												fill the width of the report section RepeatY  - Repeats the image vertically to 												fill the height of the report section Repeat  - Repeats the image horizontally and 												vertically to fill both the width and height of 												the report section BorderColor  The border color for the report section. 										You can define the color for the bottom, left, right, and 										top border of the section, and set the default border color, 										which will be applied if no special settings are defined for 										the specific borders. BorderStyle  The border line style. You can define the 										style for the bottom, left, right, and top border of the 										section, and set the default border style, which will be 										applied if no special settings are defined for the specific 										borders. BorderWidth  The border line width for the report 										section (in pixels). You can define the width of the bottom, 										left, right, and top border of the section, and set the 										default border width, which will be applied if no special 										settings are defined for the specific borders. Font  The font settings for the report section. You 										can select the font name and size and specify whether the 										following font attributes are applied: bold, italic, 										strikeout, and underline. Padding  The padding setting for the report section, 										which you can specify in pixels for the left side, right 										side, top, and bottom of the report section. TextAlign  The text alignment for the report section: 											 Left ,  Center ,  Right , or  Not 											Set . VerticalAlign  The content vertical alignment for the 										report section:  Not Set ,  Top ,  Middle , 										or  Bottom . StyleName The name of the style defined for the report section. To 										assign a descriptive name to a style you have defined for a 										report section, enter the name. To apply an existing style 										to the report section, select its style name. ]]></column>
		</row>
		<row PageID="97657af2-b5f0-45de-a122-b26ceaf8181b" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="572c09a0-e696-1756-5e36-7f451c47d5d4" RecordSourceID="22377">
			<column name="Content"><![CDATA[
Each section has its own behavior settings that define the following: 
*How the section data is processed
*How the section position on the page is controlled
*How the section&rsquo;s data is displayed in the report
*What variables are defined within the report section

==Defining Behavior Settings for Section==
To define the behavior settings for a report section, perform the following steps: 
#Click the section within the report to select it, as shown in the screenshot below (one of the header groups had been selected). [image:UserGuide/Images/Defining_the_Behavior_Settings_of_a_Report_Section_ehavior_settings_for_a_group_header_section.png|popup|Defining the Behavior Settings of a Report Section|450px]
#On the '''Properties''' tab, in the '''Behaviors''' group, specify the appropriate settings. The properties are listed and described below based on the section type.

===Behavior Settings of the Report Header and Report Footer Sections===
{| class="checklist" | width="100%" 
|- 
!width="23%" ! Property
!width="76%" ! Description
|- 
| '''KeepTogether'''
|  A setting that defines whether the lines in this section should be printed on the same page.
|- 
| '''PageBreak'''
|  A specification of where in this section the page break should be added: ''Before'', ''After'', or ''BeforeAndAfter''.
|- 
| '''PrintAtBottom'''
|  A setting that defines whether the lines in this report section are printed at the bottom of the page.
|- 
| '''PrintEmpty'''
|  A setting that specifies whether empty lines are printed in this report section.
|- 
| '''ProcessOrder'''
|  The processing order of the data within the section.
|- 
| '''ResetPageNumber'''
|  A setting specifying whether page numbering is reset when a new section starts.
|- 
| '''Variables'''
|  A listing of the variables defined for the section. These variables are visible within the whole report, but are calculated within the sections where they are defined.
|- 
| '''Visible'''
|  The report section&rsquo;s visibility property (''False'' or ''True''). The invisible (hidden) sections are not printed in the report.
|- 
| '''VisibleExpr'''
|  The expression that calculates the report section visibility property. This value overrides the ''Visible'' property value if it was set explicitly.
|}
===Behavior Settings of the Page Header and Page Footer Sections===
{| class="checklist" | width="100%" 
|- 
!width="25%" ! Property
!width="74%" ! Description
|- 
| '''PrintAtBottom'''
|  A setting that defines whether the lines in the report section are printed at the bottom of the page.
|- 
| '''PrintEmpty'''
|  A setting that specifies whether empty lines are printed in this report section.
|- 
| '''PrintOnFirstPage'''
|  A setting that defines whether the page header data is printed on the first page of the report.
|- 
| '''PrintOnLastPage'''
|  A setting determining whether the page header data is printed on the last page of the report.
|- 
| '''ProcessOrder'''
|  The processing order of the data within the section.
|- 
| '''ResetPageNumber'''
|  A setting specifying whether page numbering is reset when a new section starts.
|- 
| '''Variables'''
|  A listing of the variables defined for the section. These variables are visible within the whole report, but are calculated within the sections where they are defined.
|- 
| '''Visible'''
|  The report section&rsquo;s visibility property (''False'' or ''True''). The invisible (hidden) sections are not printed in the report.
|- 
| '''VisibleExpr'''
|  The expression that calculates the report section visibility property. This value overrides the ''Visible'' property value if it was set explicitly.
|}
===Behavior Settings of the Group Header and Group Footer Sections===
{| class="checklist" | width="100%" 
|- 
!width="30%" ! Property
!width="69%" ! Description
|- 
| '''KeepTogether'''
|  A setting that defines whether the lines in this section should be printed on the same page.
|- 
| '''PageBreak'''
|  A specification of where in this section the page break should be added: ''Before'', ''After'', or ''BeforeAndAfter''.
|- 
| '''PrintAtBottom'''
|  A setting that defines whether the lines in the report section are printed at the bottom of the page.
|- 
| '''PrintEmpty'''
|  A setting that specifies whether empty lines are printed in this report section.
|- 
| '''PrintForEmptyGroup'''
|  A setting defining whether empty data groups are printed in the report section.
|- 
| '''PrintOnEveryPage'''
|  A setting determining whether the section data is printed on every page of the report.
|- 
| '''ProcessOrder'''
|  The processing order of the data within the section.
|- 
| '''ResetPageNumber'''
|  A setting specifying whether page numbering is reset when a new section starts.
|- 
| '''Variables'''
|  A listing of the variables defined for the section. These variables are visible within the whole report, but are calculated within the sections where they are defined.
|- 
| '''Visible'''
|  The report section&rsquo;s visibility property (''False'' or ''True''). The invisible (hidden) sections are not printed in the report.
|- 
| '''VisibleExpr'''
|  The expression that calculates the report section visibility property. This value overrides the ''Visible'' property value if it was set explicitly.
|}
===Behavior Settings of the Detail Section===
{| class="checklist" | width="100%" 
|- 
!width="26%" ! Property
!width="73%" ! Description
|- 
| '''KeepTogether'''
|  A setting that defines whether the lines in this section should be printed on the same page.
|- 
| '''PageBreak'''
|  A specification of where in this section the page break should be added: ''Before'', ''After'', or ''BeforeAndAfter''.
|- 
| '''PrintAtBottom'''
|  A setting that defines whether the lines in the report section are printed at the bottom of the page.
|- 
| '''PrintEmpty'''
|  A setting that specifies whether empty lines are printed in this report section.
|- 
| '''ProcessOrder'''
|  The processing order of the data within the section.
|- 
| '''ResetPageNumber'''
|  A setting specifying whether page numbering is reset when a new section starts.
|- 
| '''Variables'''
|  A listing of the variables defined for the section. These variables are visible within the whole report, but are calculated within the sections where they are defined.
|- 
| '''Visible'''
|  The report section&rsquo;s visibility property (''False'' or ''True''). The invisible (hidden) sections are not printed in the report.
|- 
| '''VisibleExpr'''
|  The expression that calculates the report section visibility property. This value overrides the ''Visible'' property value if it was set explicitly.
|}
==References==
*[HelpRoot_ReportingTools\Using_Variables|Using Variables]
]]></column>
			<column name="PlainText"><![CDATA[Defining the Behavior Settings of a Report Section Each section has its own behavior settings that define the following:  How the section data is processed How the section position on the page is controlled How the section's data is displayed in the report What variables are defined within the report section Defining Behavior Settings for Section To define the behavior settings for a report section, perform the following steps:  Click the section within the report to select it, as shown in the screenshot 					below (one of the header groups had been selected).  Defining the Behavior Settings of a Report Section On the  Properties  tab, in the  Behaviors  group, specify 					the appropriate settings. The properties are listed and described below based on the 					section type. Behavior Settings of the Report Header and Report Footer Sections Property Description KeepTogether  A setting that defines whether the lines in this section should 								be printed on the same page. PageBreak  A specification of where in this section the page break should 								be added:  Before ,  After , or 								 BeforeAndAfter . PrintAtBottom  A setting that defines whether the lines in this report section 								are printed at the bottom of the page. PrintEmpty  A setting that specifies whether empty lines are printed in this 								report section. ProcessOrder  The processing order of the data within the section. ResetPageNumber  A setting specifying whether page numbering is reset when a new 								section starts. Variables  A listing of the variables defined for the section. These 								variables are visible within the whole report, but are calculated 								within the sections where they are defined. Visible  The report section's visibility property ( False  or 									 True ). The invisible (hidden) sections are not printed in 								the report. VisibleExpr  The expression that calculates the report section visibility 								property. This value overrides the  Visible  property value if 								it was set explicitly. Behavior Settings of the Page Header and Page Footer Sections Property Description PrintAtBottom  A setting that defines whether the lines in the report section 								are printed at the bottom of the page. PrintEmpty  A setting that specifies whether empty lines are printed in this 								report section. PrintOnFirstPage  A setting that defines whether the page header data is printed 								on the first page of the report. PrintOnLastPage  A setting determining whether the page header data is printed on 								the last page of the report. ProcessOrder  The processing order of the data within the section. ResetPageNumber  A setting specifying whether page numbering is reset when a new 								section starts. Variables  A listing of the variables defined for the section. These 								variables are visible within the whole report, but are calculated 								within the sections where they are defined. Visible  The report section's visibility property ( False  or 									 True ). The invisible (hidden) sections are not printed in 								the report. VisibleExpr  The expression that calculates the report section visibility 								property. This value overrides the  Visible  property value if 								it was set explicitly. Behavior Settings of the Group Header and Group Footer Sections Property Description KeepTogether  A setting that defines whether the lines in this section should 								be printed on the same page. PageBreak  A specification of where in this section the page break should 								be added:  Before ,  After , or 								 BeforeAndAfter . PrintAtBottom  A setting that defines whether the lines in the report section 								are printed at the bottom of the page. PrintEmpty  A setting that specifies whether empty lines are printed in this 								report section. PrintForEmptyGroup  A setting defining whether empty data groups are printed in the 								report section. PrintOnEveryPage  A setting determining whether the section data is printed on 								every page of the report. ProcessOrder  The processing order of the data within the section. ResetPageNumber  A setting specifying whether page numbering is reset when a new 								section starts. Variables  A listing of the variables defined for the section. These 								variables are visible within the whole report, but are calculated 								within the sections where they are defined. Visible  The report section's visibility property ( False  or 									 True ). The invisible (hidden) sections are not printed in 								the report. VisibleExpr  The expression that calculates the report section visibility 								property. This value overrides the  Visible  property value if 								it was set explicitly. Behavior Settings of the Detail Section Property Description KeepTogether  A setting that defines whether the lines in this section should 								be printed on the same page. PageBreak  A specification of where in this section the page break should 								be added:  Before ,  After , or 								 BeforeAndAfter . PrintAtBottom  A setting that defines whether the lines in the report section 								are printed at the bottom of the page. PrintEmpty  A setting that specifies whether empty lines are printed in this 								report section. ProcessOrder  The processing order of the data within the section. ResetPageNumber  A setting specifying whether page numbering is reset when a new 								section starts. Variables  A listing of the variables defined for the section. These 								variables are visible within the whole report, but are calculated 								within the sections where they are defined. Visible  The report section's visibility property ( False  or 									 True ). The invisible (hidden) sections are not printed in 								the report. VisibleExpr  The expression that calculates the report section visibility 								property. This value overrides the  Visible  property value if 								it was set explicitly. References Using Variables Using Variables]]></column>
		</row>
		<row PageID="c6f6d909-f59e-402f-8b82-7eda7a249fe0" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="d0100b7e-afe6-e2c5-b3a1-7b1786f08156" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The Tools area on the Acumatica Report                         Designer form (in the upper right) displays the visual elements that can be added to the report. You can add any of these visual elements to a report section or remove it from the section. 
==Adding a Visual Element==
To add a visual elements to a report section, select the element in the Tools area, and place it in the desired position within the report by dragging and dropping it. You can resize the element by dragging its borders. {br}

After a visual element is added on the screen, you can do the following actions to it: 
*Define the style of the element, and reset the style if desired
*Copy and paste the style between visual elements
*Define the order of visual elements on the screen by bringing them to the front or sending them to the back
*Cut, copy, and paste visual elements and their content to other areas within the report

To perform these actions with a visual element, use the commands available in the Report Designer toolbar, or right-click the visual element and select the relevant command from the pop-up menu.
==Removing a Visual Element==
To remove a visual element, you select the element in the report section by clicking it, and press the DELETE key.]]></column>
			<column name="PlainText"><![CDATA[Adding and Removing Visual Elements in the Report The Tools area on the  Acumatica Report                         Designer form (in the upper right) displays the visual elements that can be added to the             report. You can add any of these visual elements to a report section or remove it from             the section.  Adding a Visual Element To add a visual elements to a report section, select the element in the Tools area,                 and place it in the desired position within the report by dragging and dropping it.                 You can resize the element by dragging its borders.  After a visual element is added on the screen, you can do the following actions to                 it:  Define the style of the element, and reset the style if desired Copy and paste the style between visual elements Define the order of visual elements on the screen by bringing them to the front                     or sending them to the back Cut, copy, and paste visual elements and their content to other areas within                     the report To perform these actions with a visual element, use the commands available in the  Report Designer toolbar, or right-click the visual element and select the relevant command from                 the pop-up menu. Removing a Visual Element To remove a visual element, you select the element in the report section by clicking                 it, and press the DELETE key. ]]></column>
		</row>
		<row PageID="0df2d2f5-4ba5-4918-82ad-912c9f6ffac2" Language="en-US" PageRevisionID="1" Content="&#xA;The data in reports can be divided into several groups, each of which displays the data sorted in the order selected for the group. The sorting criteria are defined separately for every report group and for the report as a whole. {br}&#xA;&#xA;To set up the data grouping and sorting rules, you should define the following: &#xA;*The data groups to be included in the report and their grouping rules&#xA;*The data sorting rules for the report&#xA;*The report&amp;rsquo;s parameters&#xA;&#xA;==In This Section==&#xA;This section includes the following articles: &#xA;*[HelpRoot_ReportingTools\Defining_the_Data_Groups_for_a_Report|Defining the Data Groups and Grouping and Sorting Rules for a Report]&#xA;*[HelpRoot_ReportingTools\Defining_Parameters_for_a_Report|Defining Parameters for a Report]&#xA;*[HelpRoot_ReportingTools\Using_Filters|Using Filters]&#xA;" PlainText="Data Grouping and Sorting The data in reports can be divided into several groups, each of which displays the data             sorted in the order selected for the group. The sorting criteria are defined separately             for every report group and for the report as a whole.  To set up the data grouping and sorting rules, you should define the following:  The data groups to be included in the report and their grouping rules The data sorting rules for the report The report's parameters In This Section This section includes the following articles:  Defining                         the Data Groups and Grouping and Sorting Rules for a Report Defining the Data Groups and Grouping and Sorting Rules for a ReportDefining                         Parameters for a Report Defining Parameters for a ReportUsing Filters Using Filters" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="c7eaff22-9970-6609-29e6-e2c853bc9ef8" RecordSourceID="22377" />
		<row PageID="7dfd7c85-c28c-45cc-b4f6-089f2edf56aa" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="94ce45f3-d2c1-fcf4-6eef-a7580608f100" RecordSourceID="22377">
			<column name="Content"><![CDATA[
Data groups are used to structure and logically group data in a report. You can add new data groups to the report and define the behavior properties for each group. The groups&rsquo; data will be displayed on the pages of the generated report. {br}

To define the data groups in a report, perform the following steps: 
#Select the whole report as an object for which properties will be set by clicking the [image:UserGuide/Images/Defining_the_Data_Groups_for_a_Report_Using_FiltersReportSelectionIcon.PNG|10px] icon in the top left corner of the Report Designer screen.
#On the '''Properties''' tab, click the [image:UserGuide/Images/Defining_the_Data_Groups_for_a_Report_Using_Filtersselection_button.PNG|10px] button next to the '''Groups''' collection. The '''Group Collection Editor''' dialog appears; using the dialog, you can add, remove, or modify the data groups.
#Select the top level of the report (click the [image:UserGuide/Images/Defining_the_Data_Groups_for_a_Report_Using_FiltersReportSelectionIcon.PNG|10px] icon left of the red 1 in the screenshot below). On the '''Properties''' tab, locate the '''Groups''' property under the '''Data''' section (see item 2). Open the '''GroupExp Collection Editor''' window by clicking the [image:UserGuide/Images/Defining_the_Data_Groups_for_a_Report_Using_Filtersselection_button.PNG|10px] button next to the '''Groups''' (Collection) property. [image:UserGuide/Images/Defining_the_Data_Groups_for_a_Report_dding_Suppliers_group.png|popup|Adding the groupInvoice group|400px]
#Click the '''Add''' button (item 3) to create the new group section.
#Change the group name to required (item 4), set the '''PrintEmpty''' property (item 5), and the '''KeepTogether''' property (item 6) as you need.
#To specify the group description, enter the '''Description''' value in the '''Behavior''' set of group properties. The description will be displayed in the group header. To define the group description, you can use the '''Expression Editor''' dialog, as documented in the ''[HelpRoot_ReportingTools\Using_the_Expression_Editor|Using the Expression Editor]'' article.
#Locate the '''Grouping''' property and click the [image:UserGuide/Images/Defining_the_Data_Groups_for_a_Report_Using_Filtersselection_button.PNG|Adding the groupInvoice group|10px] button (item 7) to open the '''GroupExp Collection Editor''' window.
#Click the '''Add''' button to create a new grouping expression (see item 1 in the screenshot below). Specify the appropriate '''DataField''' property (item 2) and its '''SortOrder''' property as ''Ascending'' or ''Descending''. [image:UserGuide/Images/Defining_the_Data_Groups_for_a_Report_onfiguring_Suppliers_group.png|popup|Configuring the Suppliers group|400px]
#Click '''OK''' (item 3) to close the '''GroupExp Collection Editor''' window.
#If it&rsquo;s required, repeat the appropriate actions above to add more group sections with grouping on another field.

By defining groups, you specify sorting conditions for the SQL that is generated by the report, as well as adding the group footer and header section onto the report form in the designer. 
==References==
*[HelpRoot_ReportingTools\Using_the_Expression_Editor|Using the Expression Editor]
]]></column>
			<column name="PlainText"><![CDATA[Defining the Data Groups and Grouping and Sorting Rules for a Report Data groups are used to structure and logically group data in a report. You can add new data groups to the report and define the behavior properties for each group. The groups' data will be displayed on the pages of the generated report.  To define the data groups in a report, perform the following steps:  Select the whole report as an object for which properties will be set by clicking                 the   icon in the top left corner of the Report Designer screen. On the  Properties  tab, click the   button next to the  Groups  collection. The  Group                     Collection Editor  dialog appears; using the dialog, you can add, remove, or                 modify the data groups. Select the top level of the report (click the   icon left of the red 1 in the screenshot below). On the                      Properties  tab, locate the  Groups  property under the  Data                  section (see item 2). Open the  GroupExp Collection Editor  window by clicking                 the   button next to the  Groups  (Collection) property.  Adding the groupInvoice group Click the  Add  button (item 3) to create the new group section. Change the group name to required (item 4), set the  PrintEmpty  property (item                 5), and the  KeepTogether  property (item 6) as you need. To specify the group description, enter the  Description  value in the                      Behavior  set of group properties. The description will be displayed in                 the group header. To define the group description, you can use the  Expression                     Editor  dialog, as documented in the  Using the Expression                         Editor Using the Expression Editor article. Locate the  Grouping  property and click the   button (item 7) to open the  GroupExp Collection Editor  window. Click the  Add  button to create a new grouping expression (see item 1 in the                 screenshot below). Specify the appropriate  DataField  property (item 2) and                 its  SortOrder  property as  Ascending  or  Descending .  Configuring the Suppliers group Click  OK  (item 3) to close the  GroupExp Collection Editor  window. If it's required, repeat the appropriate actions above to add more group sections                 with grouping on another field. By defining groups, you specify sorting conditions for the SQL that is generated by the report, as well as adding the group footer and header section onto the report form in the designer.  References Using the Expression Editor Using the Expression Editor]]></column>
		</row>
		<row PageID="2b5ed65f-be15-48a4-8ddc-834a8261df22" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="72112772-ce8e-84db-90b6-3a90aaf2cfdb" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You can use parameters to share values between two or more reports, or in expressions and formulas to calculate values for multiple fields within the same report. Parameters are variables that are requested from the user before the report is executed. Based on the parameter, the report engine creates a variable within the report, which can be referred to as a database field can. When referred to from code, a parameter starts with the ''@'' symbol. {br}

To define a parameter for a report, perform the following steps: 
#Start the Schema Builder wizard by selecting the ''Build Schema'' command from the '''File''' menu.
#Open the '''Parameters''' tab. The list of parameters defined for the report is displayed in the left area of the tab.
#Click '''Add''' (see the item with the red 1 in the first screenshot below) to add a new parameter to the parameters list. Alternatively, to change properties of an existing parameter, click its name in the parameters list.
#In the '''Name''' box, enter the parameter name (item 2).
#In the '''Input Mask''' box, define the input mask for the parameter, if necessary.
#In the '''Data Type''' box, select the data type for the parameter (item 3).
#In the '''Prompt''' box, enter the prompt for the parameter (the label to be displayed on the screen—see item 4).
#In the '''Default Value''' box, enter the default value for the parameter. You can use expressions and formulas to define parameters&rsquo; default values.
#In the '''Column Span''' box, set the column span to display the parameter.
#Set the appropriate check boxes for the parameter (item 5): 
#*'''Allow Null''' - To indicate that the parameter can have ''Null'' values
#*'''Visible''' - To display the parameter on the screen
#*'''Required''' - To indicate that the parameter is required for the report
#In the '''View Name''' box, enter the view formula used to retrieve data for the parameter (item 6). The '''View name''' property specifies the lookup window that will open to help the user select the parameter. The ''Report.GetView()'' function creates the lookup field by using the '''PXSelector''' attribute declared on the DAC field; the DAC field is passed as a function parameter. 
#:((({S:Hint}You can also use any field of any existing outside DAC, if it has an attribute with appropriate lookup columns for the report parameter being adjusted. You can create a special DAC with needed lookup fields if you haven&rsquo;t found the appropriate field or fields in the existing DACs.
)))
#In the '''Value''' column of the '''Available Values''' table, you can enter the value of the expression. If more than one value may be used for the parameter, add another value to the list of available values in a separate row.
#Add the label that will be displayed when the parameter has the corresponding value. [image:UserGuide/Images/Defining_Parameters_for_a_Report_dding_CategoryName_parameter.png|popup|Adding the first parameter|400px][image:UserGuide/Images/Defining_Parameters_for_a_Report_dding_SupplierCD_parameter.png|popup|Adding the second parameter|400px]
#To apply the changes, click the '''Apply''' button.
#To save the parameters defined for the report, and their values, click '''OK'''; otherwise, click '''Cancel'''.
]]></column>
			<column name="PlainText"><![CDATA[Defining Parameters for a Report You can use parameters to share values between two or more reports, or in expressions and             formulas to calculate values for multiple fields within the same report. Parameters are             variables that are requested from the user before the report is executed. Based on the             parameter, the report engine creates a variable within the report, which can be referred             to as a database field can. When referred to from code, a parameter starts with the                  @  symbol.  To define a parameter for a report, perform the following steps:  Start the Schema Builder wizard by selecting the  Build Schema  command from the  File  menu. Open the  Parameters  tab. The list of parameters defined for the report is displayed in the left area of the tab. Click  Add  (see the item with the red 1 in the first screenshot below) to add a new                 parameter to the parameters list. Alternatively, to change properties of an existing                 parameter, click its name in the parameters list. In the  Name  box, enter the parameter name (item 2). In the  Input Mask  box, define the input mask for the parameter, if necessary. In the  Data Type  box, select the data type for the parameter (item 3). In the  Prompt  box, enter the prompt for the parameter (the label to be displayed on the screen—see item 4). In the  Default Value  box, enter the default value for the parameter. You can use expressions and formulas to define parameters' default values. In the  Column Span  box, set the column span to display the parameter. Set the appropriate check boxes for the parameter (item 5):  Allow Null  - To indicate that the parameter can have  Null  values Visible  - To display the parameter on the screen Required  - To indicate that the parameter is required for the report In the  View Name  box, enter the view formula used to retrieve data for the parameter                 (item 6). The  View name  property specifies the lookup window that will open                 to help the user select the parameter. The  Report.GetView()  function creates                 the lookup field by using the  PXSelector  attribute declared on the DAC field;                 the DAC field is passed as a function parameter.  You can also use                     any field of any existing outside DAC, if it has an attribute with appropriate                     lookup columns for the report parameter being adjusted. You can create a special                     DAC with needed lookup fields if you haven't found the appropriate field or                     fields in the existing DACs. In the  Value  column of the  Available Values  table, you can enter the value of the expression. If more than one value may be used for the parameter, add another value to the list of available values in a separate row. Add the label that will be displayed when the parameter has the corresponding value.  Adding the first parameter Adding the second parameter To apply the changes, click the  Apply  button. To save the parameters defined for the report, and their values, click  OK ; otherwise, click  Cancel . ]]></column>
		</row>
		<row PageID="f01983ce-4de4-44c5-86c5-f9f7ec2b41ca" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="1aa82920-8c1f-0c82-4909-921248c76a13" RecordSourceID="22377">
			<column name="Content"><![CDATA[
Filters allow you to limit the volume of data selected for the reports, set more specific criteria for selecting data from data tables, and remove unnecessary data as a result of the table joining. The '''Filters''' tab of the Schema Builder wizard lists the data filtering rules defined for the current report, which you can modify. Data filtering rules can also be set on the '''Properties''' tab. 
==Using the Schema Builder Wizard==
Filter expressions use the data field names and parameters to set the criteria for data processing. To set a filter using the Schema Builder wizard, perform the following steps: 
#In the grid on the '''Filters''' tab, click the empty line to add a new expression to the filter.
#In the '''Data Field''' field, select a data field or parameter name.
#In the '''Condition''' field, select the appropriate condition for the expression: ''Equal'', ''NotEqual'', ''Greater'', ''GreaterOrEqual'', ''Less'', ''LessOrEqual'', ''Like'', ''RLike'', ''LLike'', ''Between'', ''IsNull'', or ''IsNotNull''.
#In the '''Value1''' and '''Value2''' fields, enter the value or values for the expression.
#If more than one data filtering expression will be used for filtering data, in the '''Operator''' field, select the operator: ''And'' or ''Or''.
#Select the braces in the '''Braces''' column if they are required in the data filtering expressions.
#Repeat these steps for each expression to be used in the data filtering rule. [image:UserGuide/Images/Using_Filters_onfiguring_filter.png|popup|Configuring the filter|400px]
#Click '''Apply''' to apply the changes.
#Click '''OK''' to save the changes and close the Schema Builder wizard, or '''Cancel''' to discard the changes.

Any defined expressions can be deleted. To delete an expression, click the relevant line in the grid, and press the DELETE key. On the '''Filters''' tab, you can add additional filtering conditions to be transformed to the SQL ''Where'' condition. 
==Using the Properties Tab==
The '''Properties''' tab allows you to define the data filters as well. To set a filter and define the data filtering criteria, perform the following steps: 
#Select the whole report as an object for which the properties will be set by clicking the [image:UserGuide/Images/Using_Filters_Using_FiltersReportSelectionIcon.PNG|Configuring the filter] icon in the top left corner of the Report Designer window. The '''Properties''' tab displays the report properties.
#On the '''Properties''' tab, click the [image:UserGuide/Images/Using_Filters_Using_Filtersselection_button.PNG|Configuring the filter] button next to the '''Filters''' collection. The '''FilterExp Collection Editor''' dialog appears, allowing you to edit the filter expressions. [image:UserGuide/Images/Using_Filters_iltersCollection.png|popup|Select Filters|400px]
#To add a new expression to the filter, click the '''Add''' button under the '''Members''' list. The new expression will be added to the list of filter expressions and selected for editing.
#In the '''Data Field''' field, select the data field or parameter name.
#In the '''Condition''' field, select the condition for the expression: ''Equal'', ''NotEqual'', ''Greater'', ''GreaterOrEqual'', ''Less'', ''LessOrEqual'', ''Like'', ''RLike'', ''LLike'', ''Between'', ''IsNull'', or ''IsNotNull''.
#In the '''Value''' and '''Value2''' fields, enter the value or values for the expression.
#If more than one data filtering expression will be used for filtering data, in the '''Operator''' field, select the operator: ''And'' or ''Or''.
#In the '''Open Braces''' field, enter the number of the opening braces to be added before the new expression.
#In the '''Close Braces''' field, enter the number of the closing braces to be added after the new expression.
#Repeat Steps 3–9 for each expression to be used in the data filtering rule.
#Click '''OK''' to save the changes and close the '''FilterExp Collection Editor''' dialog, or '''Cancel''' to discard the changes. [image:UserGuide/Images/Using_Filters_dding_filter_parameters.png|popup|Define the filtering rules|400px]

The defined expressions can be deleted. To delete an expression, click the relevant item in the '''Members''' list, and click the '''Remove''' button.]]></column>
			<column name="PlainText"><![CDATA[Using Filters Filters allow you to limit the volume of data selected for the reports, set more specific             criteria for selecting data from data tables, and remove unnecessary data as a result of             the table joining. The  Filters  tab of the Schema Builder wizard lists the data             filtering rules defined for the current report, which you can modify. Data filtering             rules can also be set on the  Properties  tab.  Using the Schema Builder Wizard Filter expressions use the data field names and parameters to set the criteria for data processing. To set a filter using the Schema Builder wizard, perform the following steps:  In the grid on the  Filters  tab, click the empty line to add a new expression to the filter. In the  Data Field  field, select a data field or parameter name. In the  Condition  field, select the appropriate condition for the expression:  Equal ,  NotEqual ,  Greater ,  GreaterOrEqual ,  Less ,  LessOrEqual ,  Like ,  RLike ,  LLike ,  Between ,  IsNull , or  IsNotNull . In the  Value1  and  Value2  fields, enter the value or values for the expression. If more than one data filtering expression will be used for filtering data, in the  Operator  field, select the operator:  And  or  Or . Select the braces in the  Braces  column if they are required in the data filtering expressions. Repeat these steps for each expression to be used in the data filtering rule.  Configuring the filter Click  Apply  to apply the changes. Click  OK  to save the changes and close the Schema Builder wizard, or  Cancel  to discard the changes. Any defined expressions can be deleted. To delete an expression, click the relevant line in the grid, and press the DELETE key. On the  Filters  tab, you can add additional filtering conditions to be transformed to the SQL  Where  condition.  Using the Properties Tab The  Properties  tab allows you to define the data filters as well. To set a filter and define the data filtering criteria, perform the following steps:  Select the whole report as an object for which the properties will be set by clicking the   icon in the top left corner of the Report Designer window. The  Properties  tab displays the report properties. On the  Properties  tab, click the   button next to the  Filters  collection. The  FilterExp Collection Editor  dialog appears, allowing you to edit the filter expressions.  Select Filters To add a new expression to the filter, click the  Add  button under the  Members  list. The new expression will be added to the list of filter expressions and selected for editing. In the  Data Field  field, select the data field or parameter name. In the  Condition  field, select the condition for the expression:  Equal ,  NotEqual ,  Greater ,  GreaterOrEqual ,  Less ,  LessOrEqual ,  Like ,  RLike ,  LLike ,  Between ,  IsNull , or  IsNotNull . In the  Value  and  Value2  fields, enter the value or values for the expression. If more than one data filtering expression will be used for filtering data, in the  Operator  field, select the operator:  And  or  Or . In the  Open Braces  field, enter the number of the opening braces to be added before the new expression. In the  Close Braces  field, enter the number of the closing braces to be added after the new expression. Repeat Steps 3–9 for each expression to be used in the data filtering rule. Click  OK  to save the changes and close the  FilterExp Collection Editor  dialog, or  Cancel  to discard the changes.  Define the filtering rules The defined expressions can be deleted. To delete an expression, click the relevant item in the  Members  list, and click the  Remove  button. ]]></column>
		</row>
		<row PageID="0637504a-8ffb-456f-88a4-47accc9976dd" Language="en-US" PageRevisionID="1" Content="&#xA;Expressions are used to define the data values to be displayed in the report or the internal variables used to set the report properties, including report visibility, the group description, and the parameter determining whether the empty lines will be printed in the report. {br}&#xA;&#xA;To help you define expressions, the Report Designer provides the '''Expression Editor''' dialog. &#xA;==In This Section==&#xA;This section includes the following articles: &#xA;*[HelpRoot_ReportingTools\Using_the_Expression_Editor|Using the Expression Editor]&#xA;*[HelpRoot_ReportingTools\Using_Globals__Parameters__and_Local_Variables|Using Globals, Parameters, and Local Variables]&#xA;*[HelpRoot_ReportingTools\Using_Operators_in_Expressions|Using Operators in Expressions]&#xA;*[HelpRoot_ReportingTools\Using_Functions_in_Expressions|Using Functions in Expressions]&#xA;" PlainText="Using Expressions Expressions are used to define the data values to be displayed in the report or the             internal variables used to set the report properties, including report visibility, the             group description, and the parameter determining whether the empty lines will be printed             in the report.  To help you define expressions, the Report Designer provides the  Expression Editor              dialog.  In This Section This section includes the following articles:  Using the Expression                         Editor Using the Expression EditorUsing Globals, Parameters, and Local Variables Using Globals, Parameters, and Local VariablesUsing Operators                         in Expressions Using Operators in ExpressionsUsing Functions                         in Expressions Using Functions in Expressions" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="8319dc87-2750-1d4d-f896-5fcf6a196846" RecordSourceID="22377" />
		<row PageID="489932dc-5c84-4fda-93c8-ff516822f4fb" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="39db0f83-c5f5-f567-6d7f-d6eb51bb99d0" RecordSourceID="22377">
			<column name="Content"><![CDATA[
To define an expression for a report parameter, you use the '''Expression Editor''' dialog, which you invoke by clicking the [image:UserGuide/Images/Using_the_Expression_Editor_Using_the_Expression_Editorselection_button.PNG|10px] button on the '''Properties''' tab for a property, as shown in the screenshot below. (The most common example is setting the '''Value''' property for a text box inserted in the report.) {br}

Using the '''Expression Editor''' dialog, you can enter the expression directly or compose it by selecting the appropriate values, global variables, report variables, parameters, operators, and functions. [image:UserGuide/Images/Using_the_Expression_Editor_nvoke_the_dialog.png|popup|Invoking the Expression Editor dialog|450px]((({S:Hint}When the report returns no data, formulas do not work by default because of the ''False'' value of the '''ProcessUnbound''' report parameter. If you need to calculate something even if the report has no data to display, you should select ''True'' as the '''ProcessUnbound'''. Some report formulas executed with no data may raise exceptions, so you should use this parameter very carefully.
)))
The '''Expression Editor''' dialog consists of four areas: 
*Report Attributes area (left area of the dialog) - This area displays the list of the attributes defined for this report by the data schema it uses.
*Parameters, Variables, Operators, and Functions area (middle area of the dialog) - This area lists the parameters, operators, functions, and variables available in the report.
*Parameter, Variable, Operator, and Function Selection area (right area of the dialog) - This area allows selecting the specific parameters, operators, and functions to be used in expressions.
*Expression Editing area (bottom area of the dialog) - This area displays the expression you have composed and allows you to edit it.
[image:UserGuide/Images/Using_the_Expression_Editor_xpression_Editor_window.png|popup|The Expression Editor window|450px]
To enter the expression using the '''Expression Editor''' dialog, use the following steps: 
#In the Parameters, Variables, Operators, and Functions area, expand the hierarchical structure of the existing entities, and click the link of the group of parameters, variables, functions, or operators to display the list of available items in the selection area.
#In the Parameter, Variable, Operator, and Function Selection area, select the required item and double-click it to insert the item into the report.
#In the Expression Editing area, edit the expression.
#To validate the expression, click the '''Validate''' button in the lower left.
#Click '''OK''' to save the expression or '''Cancel''' to discard the changes.
]]></column>
			<column name="PlainText"><![CDATA[Using the Expression Editor To define an expression for a report parameter, you use the  Expression Editor              dialog, which you invoke by clicking the   button on the  Properties  tab for a property, as shown in the screenshot below.             (The most common example is setting the  Value  property for a text box inserted in             the report.)  Using the  Expression Editor  dialog, you can enter the expression directly or             compose it by selecting the appropriate values, global variables, report variables,             parameters, operators, and functions.  Invoking the Expression Editor dialog When the report returns no data, formulas do not work by default because of the                  False  value of the  ProcessUnbound  report parameter. If             you need to calculate something even if the report has no data to display, you should             select  True  as the  ProcessUnbound . Some report formulas             executed with no data may raise exceptions, so you should use this parameter very             carefully. The  Expression Editor  dialog consists of four areas:  Report Attributes area (left area of the dialog) - This area displays the list of                 the attributes defined for this report by the data schema it uses. Parameters, Variables, Operators, and Functions area (middle area of the dialog) -                 This area lists the parameters, operators, functions, and variables available in the                 report. Parameter, Variable, Operator, and Function Selection area (right area of the                 dialog) - This area allows selecting the specific parameters, operators, and                 functions to be used in expressions. Expression Editing area (bottom area of the dialog) - This area displays the                 expression you have composed and allows you to edit it. The Expression Editor window To enter the expression using the  Expression Editor  dialog, use the following             steps:  In the Parameters, Variables, Operators, and Functions area, expand the hierarchical                 structure of the existing entities, and click the link of the group of parameters,                 variables, functions, or operators to display the list of available items in the                 selection area. In the Parameter, Variable, Operator, and Function Selection area, select the                 required item and double-click it to insert the item into the report. In the Expression Editing area, edit the expression. To validate the expression, click the  Validate  button in the lower left. Click  OK  to save the expression or  Cancel  to discard the changes. ]]></column>
		</row>
		<row PageID="f94195e6-f7dc-404a-8dd0-04244bb17e98" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="ccf201d8-00f6-f4d0-5ff1-e9df423a1cf9" RecordSourceID="22377">
			<column name="Content"><![CDATA[
Expressions can use global variables, parameters, and local variables to define the data that will be used to calculate the values displayed in the report. These variables and parameters are links to the calculated data, selected from the available data set or defined in the report. 
==Globals==
Global variables (sometimes referred to as ''globals'') are available in all reports. Globals can be inserted into a report as values or included in expressions. 
===Globals===
{| class="checklist" | width="100%" 
|- 
!width="15%" ! Global
!width="84%" ! Description 
|- 
| '''PageIndex'''
|  Substitutes into the expression the page index value selected in the current report data source definition.
|- 
| '''PageCount'''
|  Substitutes into the expression the page count value for the current report.
|- 
| '''PageOf'''
|  Substitutes into the expression the page number and total page count values for the current report.
|}
==Parameters==
The parameters defined in the report can be used to substitute values into the expression. Every report has its own set of parameters defined by the user creating or modifying the report. The parameters, defined on the report level, can be modified using the Schema Builder wizard. {br}

Parameters have the <tt>@param&#95;name</tt> format, where ''param&#95;name'' is the name of the parameter defined in the report. {br}

Here is an example of expressions that use the report parameters.{{{{([Categories.CategoryName]=[@CategoryName])
}}}}
In the above example, '''Categories.CategoryName''' is an attribute available from the data schema, and ''@CategoryName'' is a report parameter; this is the example of a simple condition. &#0125; Here, '''ARStatementCycle.AgeDays02''' is an attribute available from the data schema, and ''@AgeDate'' is a report parameter; this is the example of an arithmetic operation. {br}

 Acumatica ERP has the date-relative parameters predefined for the following reference points:[anchor|#ul_ozk_sw3_2s]
*''@Today'': The current day.
*''@WeekStart'' and ''@WeekEnd'': The start and end, respectively, of the current week. The start and end of the week are determined according to the default system locale or the locale the user has selected when signing in to Acumatica ERP. The system locales are specified and configured on the [HelpRoot_FormReference\SM_20_05_50|System Locales] ([~/?ScreenId=SM200550|SM200550]) form.
*''@MonthStart'' and ''@MonthEnd'': The start and end, respectively, of the current month.
*''@QuarterStart'' and ''@QuarterEnd'': The start and end, respectively, of the current quarter.
*''@PeriodStart'' and ''@PeriodEnd'': The start and end, respectively, of the current financial period. The financial periods are defined on the [HelpRoot_FormReference\GL_10_10_00|Financial Year] ([~/?ScreenId=GL101000|GL101000]) form. 
*:For more information on financial periods in Acumatica ERP, see [HelpRoot_Financials\GL__MNG_Managing_Accounting_Cycle|Managing Financial Periods] in the Acumatica ERP Financial Management Guide.
*''@YearStart'' and ''@YearEnd'': The start and end, respectively, of the current calendar year.
((({S:Hint}All the date-relative parameters use the date (in UTC) of the server used to run the Acumatica ERP instance as the current date.
)))
==Variables==
The local variables you define for a report can be used to substitute values into the expression. Local variables are defined separately for each report data group, but the visibility of the variables is not limited by the group where the variable is defined. To define a new variable, use the '''Properties''' page of the report data group. {br}

The variables have the <tt>$variable&#95;name</tt> format, where ''variable&#95;name'' is the name of the variable defined in the report. 
==Examples==
See below for examples of expressions using local variables: {{{{=$Age02
}}}}
Here, ''$Age02'' is a local report variable. {{{{=Assign( '$RowNumber', $RowNumber + 1 )
}}}}
In this example, the row number is calculated; ''$RowNumber'' is a local report variable. ]]></column>
			<column name="PlainText"><![CDATA[Using Globals, Parameters, and Local Variables Expressions can use global variables, parameters, and local variables to define the data 			that will be used to calculate the values displayed in the report. These variables and 			parameters are links to the calculated data, selected from the available data set or 			defined in the report.  Globals Global variables (sometimes referred to as  globals ) are available in all 				reports. Globals can be inserted into a report as values or included in expressions.  Globals Global Description  PageIndex  Substitutes into the expression the page index value selected in 								the current report data source definition. PageCount  Substitutes into the expression the page count value for the 								current report. PageOf  Substitutes into the expression the page number and total page 								count values for the current report. Parameters The parameters defined in the report can be used to substitute values into the 				expression. Every report has its own set of parameters defined by the user creating 				or modifying the report. The parameters, defined on the report level, can be 				modified using the Schema Builder wizard.  Parameters have the  @param_name  format, where  param_name  is the name 				of the parameter defined in the report.  Here is an example of expressions that use the report parameters. ([Categories.CategoryName]=[@CategoryName]) In the above example,  Categories.CategoryName  is an attribute available from 				the data schema, and  @CategoryName  is a report parameter; this is the example 				of a simple condition. } Here,  ARStatementCycle.AgeDays02  is an attribute 				available from the data schema, and  @AgeDate  is a report parameter; this is 				the example of an arithmetic operation.   Acumatica ERP has the date-relative parameters predefined for the following reference 					points: @Today : The current day. @WeekStart  and  @WeekEnd : The start and end, respectively, of the                 current week. The start and end of the week are determined according to the default                 system locale or the locale the user has selected when signing in to  Acumatica ERP. The system locales are specified and configured on the   ([~/?ScreenId=SM200550|SM200550]) System Locales (SM200550) form. @MonthStart  and  @MonthEnd : The start and end, respectively, of the                 current month. @QuarterStart  and  @QuarterEnd : The start and end, respectively, of the                 current quarter. @PeriodStart  and  @PeriodEnd : The start and end, respectively, of the                 current financial period. The financial periods are defined on the   ([~/?ScreenId=GL101000|GL101000]) Financial Year (GL101000) form.  For more information                     on financial periods in  Acumatica ERP, see  Managing Financial Periods Managing Financial Periods in the  Acumatica ERP Financial Management Guide. @YearStart  and  @YearEnd : The start and end, respectively, of the                 current calendar year. All the date-relative parameters use the date (in UTC) of the server used 					to run the  Acumatica ERP instance as the current date. Variables The local variables you define for a report can be used to substitute values into the 				expression. Local variables are defined separately for each report data group, but 				the visibility of the variables is not limited by the group where the variable is 				defined. To define a new variable, use the  Properties  page of the report data 				group.  The variables have the  $variable_name  format, where  variable_name  is 				the name of the variable defined in the report.  Examples See below for examples of expressions using local variables:  =$Age02 Here,  $Age02  is a local report variable.  =Assign( '$RowNumber', $RowNumber + 1 ) In this example, the row number is calculated;  $RowNumber  is a local report 				variable.  ]]></column>
		</row>
		<row PageID="bec5cd55-00bf-4fd1-9fe7-8090d7f23cfc" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="014630d4-8b3b-f2f3-e421-6bb464db25e2" RecordSourceID="22377">
			<column name="Content"><![CDATA[
Operators are used to perform certain operations with the data attributes, globals, parameters, and variables or to modify the data before it is inserted into the report. {br}

To add operators in the expressions, you can enter them directly in the expression editing area or select them from the list of operators provided by the Expression Editor, described in the ''[HelpRoot_ReportingTools\Using_the_Expression_Editor|Using the Expression Editor]'' article. {br}

You can use the following groups of operators in the expressions. 
==Arithmetic Operators==
Arithmetic operators are used to perform familiar arithmetic operations that involve the calculation of numeric values. The arithmetic operators group includes the following operators. 
===Arithmetic Operators===
{| class="checklist" | width="100%" 
|- 
!width="17%" ! Operator
!width="82%" ! Description and Examples
|- 
| '''+ (addition)'''
|  Adds the operands and returns the result. '''Example:'''{{Sum([OrderDetails.ExPrice]+[Orders.Freight]}} Here, '''OrderDetails.ExPrice''' and '''Orders.Freight''' are attributes from the database scheme.
|- 
| '''- (subtraction)'''
|  Subtracts the second operand from the first and returns the result. '''Example:'''{{[ARPayment.UnappliedBal]-$AgeBal00}} Here, '''ARPayment.UnappliedBal''' is an attribute from the database scheme, and <tt>$AgeBal00</tt> is a report variable.
|- 
| '''&#42; (multiplication)'''
|  Multiplies the two operands and returns the result. '''Example:'''{{[OrderDetails.Quantity]*[OrderDetails.UnitPrice]}} In this example, '''OrderDetails.Quantity''' and '''OrderDetails.UnitPrice''' are attributes from the database scheme.
|- 
| '''/ (division)'''
|  Yields the quotient of the operands, which is the first operand divided by the second. '''Example:''' StCycCustomerTot/$CustomerTot&#42;100&#0125;&#0125; Here, <tt>$StCycCustomerTot</tt> and <tt>$CustomerTot</tt> are the report variables.
|- 
| '''Mod (modulus)'''
|  Divides the first integer operand by the second integer operand and returns the remainder, rounded to the nearest integer. '''Example:'''{{[ARStatementCycle.AgeDays02]Mod(7)}} In this example, '''ARStatementCycle.AgeDays02''' is the attribute from the database scheme.
|}
==Logical operators==
Logical operators evaluate one or two Boolean expressions and return a Boolean result (<tt>True</tt> or <tt>False</tt>). Because these operators evaluate only Boolean expressions, you must use fields whose only values are <tt>True</tt> and <tt>False</tt> (typically check boxes and radio buttons). The logical operators are listed below. 
===Logical Operators===
{| class="checklist" | width="100%" 
|- 
!width="13%" ! Operator
!width="86%" ! Description and Examples
|- 
| '''And'''
|  Performs logical conjunction on two Boolean expressions: returns <tt>True</tt> if and only if both expressions evaluate to <tt>True</tt>; in other cases, returns <tt>False</tt>. '''Example:'''{{([ARStatementCycle.Day00]<>0)And([ARStatementCycle.Day01]<>0))}} In this example, '''ARStatementCycle.Day00''' and '''ARStatementCycle.Day01''' are attributes from the database scheme.
|- 
| '''Or '''
|  Performs logical disjunction on two Boolean expressions: returns <tt>True</tt> if at least one expression evaluates to <tt>True</tt>; returns <tt>False</tt> if neither expression evaluates to ''True''. '''Example:'''{{($CurrBal=0)Or([Terms.DayDue00]<[@AgeDate])}} Here, <tt>$CurrBal</tt> is the report variable and '''Terms.DayDue00''' is an attribute from the database scheme.
|- 
| '''Not '''
|  Performs logical negation on a Boolean expression: returns <tt>True</tt> if and only if the operand is <tt>False</tt>. Logical negation is an unary operator. '''Example:''' &#0125;&#0125; In this example, <tt>$CurrBal</tt> is a report variable.
|}
==Comparison Operators==
Comparison operators compare two expressions and return a Boolean value (<tt>True</tt> or <tt>False</tt>) that represents the result of the comparison. This group of operators includes the following operators. 
===Comparison operators===
{| class="checklist" | width="100%" 
|- 
!width="13%" ! Operator
!width="86%" ! Description and Examples
|- 
| '''= '''
|  Returns <tt>True</tt> if operands are equal. '''Example:'''{{([Terms.DayDue00]=$DueDate))}} In this example, '''Terms.DayDue00''' is an attribute from the database scheme, and <tt>$DueDate</tt> is a report variable.
|- 
| '''&lt;&gt; '''
|  Returns <tt>True</tt> if operands are not equal. '''Example:'''{{([RowTerms.CreatedDateTime]<>DueDate)}} Here, '''RowTerms.CreatedDateTime''' is an attribute from the database scheme, and <tt>$DueDate</tt> is a report variable.
|- 
| '''&lt; '''
|  Returns <tt>True</tt> if the first operand is less than the second one. '''Example:'''{{([Terms.CreatedDateTime]<$DueDate)}} Here, '''Terms.CreatedDateTime''' is an attribute from the database scheme, and <tt>$DueDate</tt> is a report variable.
|- 
| '''&gt; '''
|  Returns <tt>True</tt> if the first operand is greater than the second one. '''Example:'''{{([Terms.CreatedDateTime]>$DueDate)}} In this example, '''Terms.CreatedDateTime''' is an attribute from the database scheme, and <tt>$DueDate</tt> is a report variable.
|- 
| '''&lt;= '''
|  Returns <tt>True</tt> if the first operand is less than or equal to the second operand. '''Example:'''{{([Terms.CreatedDateTime]<=$DueDate)}} Here, '''Terms.CreatedDateTime''' is an attribute from the database scheme, and <tt>$DueDate</tt> is a report variable.
|- 
| '''&gt;= '''
|  Returns <tt>True</tt> if the first operand is greater than or equal to the second operand. '''Example:'''{{([Terms.CreatedDateTime]>=$DueDate)}} Here, '''Terms.CreatedDateTime''' is an attribute from the database scheme, and <tt>$DueDate</tt> is the report variable.
|}
==Other Operators==
This miscellaneous group of operators includes the following operators and constants. 
===Other Operators===
{| class="checklist" | width="100%" 
|- 
!width="12%" ! Operator
!width="87%" ! Description and Examples
|- 
| '''In '''
|  A binary operator that returns <tt>True</tt> if the second operand (a string) contains the first operand (which is also a string). '''Example'''{{ $AgeTot01 In (100, 501, 579)}} In this example, <tt>$AgeTot01</tt> is a report variable.
|- 
| '''True '''
|  A binary constant used as an operand in logical expressions. '''Example'''{{ $AgeTot01 <>0=True}} Here, <tt>$AgeTot01</tt> is a report variable.
|- 
| '''False '''
|  A binary constant used as an operand in logical expressions. '''Example:'''{{ $AgeTot01 <>0=False}} Here, <tt>$AgeTot01</tt> is the report variable.
|- 
| '''Null '''
|  A special value, used as an operand in logical expressions, that designates an undefined value. '''Example:'''{{([Terms.Descr]=Null}} In this example, '''Terms.Descr''' is an attribute from the database scheme.
|}
==References==
*[HelpRoot_ReportingTools\Using_Globals__Parameters__and_Local_Variables|Using Globals, Parameters, and Variables]
*[HelpRoot_ReportingTools\Using_the_Expression_Editor|Using the Expression Editor]
]]></column>
			<column name="PlainText"><![CDATA[Using Operators in Expressions Operators are used to perform certain operations with the data attributes, globals, parameters, and variables or to modify the data before it is inserted into the report.  To add operators in the expressions, you can enter them directly in the expression editing area or select them from the list of operators provided by the Expression Editor, described in the  Using the Expression Editor Using the Expression Editor article.  You can use the following groups of operators in the expressions.  Arithmetic Operators Arithmetic operators are used to perform familiar arithmetic operations that involve the calculation of numeric values. The arithmetic operators group includes the following operators.  Arithmetic Operators Operator Description and Examples + (addition)  Adds the operands and returns the result.  Example: Sum([OrderDetails.ExPrice]+[Orders.Freight]  Here,  OrderDetails.ExPrice  and  Orders.Freight  are attributes from the database scheme. - (subtraction)  Subtracts the second operand from the first and returns the result.  Example: [ARPayment.UnappliedBal]-$AgeBal00  Here,  ARPayment.UnappliedBal  is an attribute from the database scheme, and  $AgeBal00  is a report variable. * (multiplication)  Multiplies the two operands and returns the result.  Example: [OrderDetails.Quantity]*[OrderDetails.UnitPrice]  In this example,  OrderDetails.Quantity  and  OrderDetails.UnitPrice  are attributes from the database scheme. / (division)  Yields the quotient of the operands, which is the first operand divided by the second.  Example:  StCycCustomerTot/$CustomerTot*100}} Here,  $StCycCustomerTot  and  $CustomerTot  are the report variables. Mod (modulus)  Divides the first integer operand by the second integer operand and returns the remainder, rounded to the nearest integer.  Example: [ARStatementCycle.AgeDays02]Mod(7)  In this example,  ARStatementCycle.AgeDays02  is the attribute from the database scheme. Logical operators Logical operators evaluate one or two Boolean expressions and return a Boolean result ( True  or  False ). Because these operators evaluate only Boolean expressions, you must use fields whose only values are  True  and  False  (typically check boxes and radio buttons). The logical operators are listed below.  Logical Operators Operator Description and Examples And  Performs logical conjunction on two Boolean expressions: returns  True  if and only if both expressions evaluate to  True ; in other cases, returns  False .  Example: ([ARStatementCycle.Day00]<>0)And([ARStatementCycle.Day01]<>0))  In this example,  ARStatementCycle.Day00  and  ARStatementCycle.Day01  are attributes from the database scheme. Or   Performs logical disjunction on two Boolean expressions: returns  True  if at least one expression evaluates to  True ; returns  False  if neither expression evaluates to  True .  Example: ($CurrBal=0)Or([Terms.DayDue00]<[@AgeDate])  Here,  $CurrBal  is the report variable and  Terms.DayDue00  is an attribute from the database scheme. Not   Performs logical negation on a Boolean expression: returns  True  if and only if the operand is  False . Logical negation is an unary operator.  Example:  }} In this example,  $CurrBal  is a report variable. Comparison Operators Comparison operators compare two expressions and return a Boolean value ( True  or  False ) that represents the result of the comparison. This group of operators includes the following operators.  Comparison operators Operator Description and Examples =   Returns  True  if operands are equal.  Example: ([Terms.DayDue00]=$DueDate))  In this example,  Terms.DayDue00  is an attribute from the database scheme, and  $DueDate  is a report variable. <>   Returns  True  if operands are not equal.  Example: ([RowTerms.CreatedDateTime]<>DueDate)  Here,  RowTerms.CreatedDateTime  is an attribute from the database scheme, and  $DueDate  is a report variable. <   Returns  True  if the first operand is less than the second one.  Example: ([Terms.CreatedDateTime]<$DueDate)  Here,  Terms.CreatedDateTime  is an attribute from the database scheme, and  $DueDate  is a report variable. >   Returns  True  if the first operand is greater than the second one.  Example: ([Terms.CreatedDateTime]>$DueDate)  In this example,  Terms.CreatedDateTime  is an attribute from the database scheme, and  $DueDate  is a report variable. <=   Returns  True  if the first operand is less than or equal to the second operand.  Example: ([Terms.CreatedDateTime]<=$DueDate)  Here,  Terms.CreatedDateTime  is an attribute from the database scheme, and  $DueDate  is a report variable. >=   Returns  True  if the first operand is greater than or equal to the second operand.  Example: ([Terms.CreatedDateTime]>=$DueDate)  Here,  Terms.CreatedDateTime  is an attribute from the database scheme, and  $DueDate  is the report variable. Other Operators This miscellaneous group of operators includes the following operators and constants.  Other Operators Operator Description and Examples In   A binary operator that returns  True  if the second operand (a string) contains the first operand (which is also a string).  Example  $AgeTot01 In (100, 501, 579)  In this example,  $AgeTot01  is a report variable. True   A binary constant used as an operand in logical expressions.  Example  $AgeTot01 <>0=True  Here,  $AgeTot01  is a report variable. False   A binary constant used as an operand in logical expressions.  Example:  $AgeTot01 <>0=False  Here,  $AgeTot01  is the report variable. Null   A special value, used as an operand in logical expressions, that designates an undefined value.  Example: ([Terms.Descr]=Null  In this example,  Terms.Descr  is an attribute from the database scheme. References Using Globals, Parameters, and Variables Using Globals, Parameters, and VariablesUsing the Expression Editor Using the Expression Editor]]></column>
		</row>
		<row PageID="4eeba11c-b05d-4893-8d05-c377fb1824b6" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="6251c37c-8952-bcfe-2e29-36575cc2f4a1" RecordSourceID="22377">
			<column name="Content"><![CDATA[
Functions enable you to perform specific tasks that facilitate the processing of data for the reports. Many functions available in the Expression Editor window process the data and return the values you can use in reports. {br}

To use functions in expressions, you can enter them manually in the expression editing area or select them from the list of functions provided by Expression Editor. You can use the following groups of functions in expressions.
==Type Conversion Functions==
The type conversion functions enable you to convert data from one data type to another. Listed below are the type conversion functions available in the ''Conversion'' subnode of the ''Functions'' node in Expression Editor.
{| class="checklist" | width="100%" 
|- 
!width="13%" ! Function
!width="86%" ! Description and Examples
|- 
| '''CBool(x)'''
| 
Converts the expression used as the function argument into a Boolean expression. Returns {{False}} if the Boolean value is 0; otherwise, returns {{True}}. {br}

'''Example:'''{{CBool($CurrCompanyTot - $CompanyTot)}}{br}

In this example, {{CurrCompanyTot}} and {{CompanyTot}} are report variables.
|- 
| '''CDate(x)'''
| 
Converts the expression used as the function argument into a value of the ''Date'' type. The argument should be a valid date expression according to the locale selected for the import or export scenario. {br}

'''Example:'''{{CDate($DueDate - 1)}}{br}

In this example, {{DueDate}} is a report variable.
|- 
| '''CStr(x)'''
| 
 Converts the expression used as the function argument into a string. If the argument is {{Null}}, the function returns a run-time error; otherwise, it returns a string. {br}

'''Example:'''{{CStr($PrintDoc)}}{br}

Here, {{PrintDoc}} is a report variable.
|- 
| '''CDbl(x)'''
| 
 Converts the expression defined in the function argument into a value of the ''Double'' type. {br}

'''Example:'''{{CDbl($CurrBal/$CurrTot)}}{br}

Here, {{CurrBal}} and {{CurrTot}} are report variables.
|- 
| '''CSng(x)'''
| 
 Converts the expression used as the function argument into a value of the ''Single'' type. If the expression has a value outside the acceptable range for the ''Single'' type, this function returns an error. {br}

'''Example:'''{{CSng($StCycCurrTot/$CompanyTot)}}{br}

In this example, {{StCycCurrTot}} and {{CompanyTot}} are report variables.
|- 
| '''CDec(x)'''
| 
 Converts the expression used as the function argument into a value of the ''Decimal'' type. {br}

'''Example:'''{{CDec($CompanyTot)}}{br}

In this example, {{CompanyTot}} is a report variable.
|- 
| '''CInt(x)'''
| 
 Converts the expression used as the function argument into a value of the ''Integer'' type. {br}

'''Example:'''{{CInt([ARPayment.ExtRefNbr])}}{br}

In this example, {{ARPayment.ExtRefNbr}} is an attribute from the database scheme.
|- 
| '''CShort(x)'''
| 
 Converts a numeric value to a value of the ''Short'' type. {br}

'''Example:'''{{CShort([ARPayment.ImpRefNbr])}}{br}

{{ARPayment.ImpRefNbr}} is an attribute from the database scheme.
|- 
| '''CLong(x)'''
| 
 Converts a numeric value to a value of the ''Long'' type. {br}

'''Example:'''{{CLong($CurrTot)}}{br}

In this example, {{CurrTot}} is a report variable.
|}
==Aggregate Functions==
Aggregate functions perform a calculation on a set of values and return a single value. Listed below are the aggregate functions available in the ''Aggregates'' subnode of the ''Functions'' node in Expression Editor.
{| class="checklist" | width="100%" 
|- 
!width="19%" ! Function
!width="80%" ! Description and Examples
|- 
| '''Avg(''expression'')'''
| 
 Returns the average of all non-null values of the specified expression. {br}

'''Example:'''{{Avg($StCycAgeTot00, $StCycAgeTot01)}}{br}

In this example, {{StCycAgeTot00}} and {{StCycAgeTot01}} are report variables.
|- 
| '''Sum(''expression'')'''
| 
 Returns a sum of the values of the specified expression. {br}

'''Example:'''{{Sum([ARInvoice.TaxTotal], $CurrTot)}}{br}

In this example, {{ARInvoice.TaxTotal}} is an attribute from the database scheme, and {{CurrTot}} is a report variable.
|- 
| '''Count(''expression'')'''
| 
 Returns a count of the values from the specified expression. {br}

'''Example:'''{{Count($AgeBal00, $AgeBal01)}}{br}

In this example, {{AgeBal00}} and {{AgeBal01}} are report variables.
|- 
| '''Max(''expression'')'''
| 
 Returns the maximum value from all non-null values of the specified expression. {br}

'''Example:'''{{Max($CurrCompanyTot, $CompanyTot)}}{br}

In this example, {{CurrCompanyTot}} and {{CompanyTot}} are report variables.
|- 
| '''Min(''expression'')'''
| 
 Returns the minimum value from all non-null values of the specified expression. {br}

'''Example:'''{{Min($CurrCompanyTot, $CompanyTot)}}{br}

In this example, {{CurrCompanyTot}} and {{CompanyTot}} are report variables.
|- 
| '''Next(''expression'')'''
| 
 Returns the next value (from the current one) in the specified expression. {br}

'''Example:'''{{Next([ARInvoice.LineTotal],[ARInvoice.TaxTotal])}}{br}

In this example, {{ARInvoice.LineTotal}} and {{ARInvoice.TaxTotal}} are attributes from the database scheme.
|- 
| '''Prev(''expression'')'''
| 
 Returns the previous value (from the current one) in the specified expression. {br}

'''Example:'''{{Prev([ARInvoice.LineTotal],[ARInvoice.TaxTotal])}}{{ARInvoice.LineTotal}} and {{ARInvoice.TaxTotal}} are attributes from the database scheme.
|- 
| '''First(''expression'')'''
| 
 Returns the first value in the specified expression. {br}

'''Example:'''{{First([ARInvoice.LineTotal],[ARInvoice.TaxTotal])}}{br}

In this example, {{ARInvoice.LineTotal}} and {{ARInvoice.TaxTotal}} are attributes from the database scheme.
|- 
| '''Last(''expression'')'''
| 
 Returns the last value in the specified expression. {br}

'''Example:'''{{Last([ARInvoice.LineTotal],[ARInvoice.TaxTotal])}}{br}

In this example, {{ARInvoice.LineTotal}} and {{ARInvoice.TaxTotal}} are attributes from the database scheme.
|}
==String Functions==
String functions, perform an operation on a string input value and return a string or numeric value. Listed below are the string functions available in the ''Text'' subnode of the ''Functions'' node in Expression Editor.
{| class="checklist" | width="100%" 
|- 
!width="22%" ! Function
!width="77%" ! Description and Examples
|- 
| '''LTrim(''string'')'''
| 
Removes all leading spaces or parsing characters from the specified character expression, or all leading 0 bytes from the specified binary expression. {br}

'''Example:'''{{LTrim(CStr([Contact.LastName]))}}{br}

In this example, {{Contact.LastName}} is an attribute from the database scheme.
|- 
| '''RTrim(''string'')'''
| 
 Removes all trailing spaces or parsing characters from the specified character expression, or all trailing 0 bytes from the specified binary expression. {br}

'''Example:'''{{RTrim(CStr([Contact.LastName]))}}{br}

In this example, {{Contact.LastName}} is an attribute from the database scheme.
|- 
| '''Trim(''string'')'''
| 
Removes all trailing spaces or parsing characters from the specified character expression, or all trailing 0 bytes from the specified binary expression. {br}

'''Example:'''{{Trim(CStr([Contact.FirstName]+[Contact.MidName]+[Contact.LastName]))}}{br}

In this example, {{Contact.FirstName}}, {{Contact.MidName}}, and {{Contact.LastName}} are attributes from the database scheme.
|- 
| '''Format(''format, argument(s)'')'''
| 
Replaces the format item in a specified formatting string (''format'') with the text equivalent of the arguments (''arguments''). {br}

'''Example:'''{{Format('Curr. Balance: . . . . . . . . {0:N}; Total Amount: . . . . . . . . {1:N}', $CurrBal, $CurrTot)}}{br}

In this example, {{CurrBal}} and {{CurrBal}} are report variables; 0 and 1 are specifiers indicating where the arguments will be inserted; C is the ''currency'' format specifier; and N is the ''number'' format specifier.
|- 
| '''UCase(''string'')'''
| 
Returns a string that has been converted to uppercase. The ''string'' argument is any valid string expression. If ''string'' contains ''Null'', ''Null'' is returned. {br}

'''Example:'''{{UCase(CStr([RowContact.MidName]))}}{br}

In this example, {{RowContact.MidName}} is an attribute from the database scheme.
|- 
| '''LCase(''string'')'''
| 
 Returns a string that has been converted to lowercase. The ''string'' argument is any valid string expression. If ''string'' contains ''Null'', ''Null'' is returned. {br}

'''Example:'''{{LCase(CStr([Contact.Email]))}}{br}

In this example, {{Contact.Email}} is an attribute from the database scheme.
|- 
| '''InStr(''string'', ''findString'')'''
| 
 Returns the position of the first occurrence of one string (''findString'') within another (''string''). {br}

'''Example:'''{{InStr(CStr([Contact.Email]), '@')}}{br}

In this example, {{Contact.Email}} is an attribute from the database scheme.
|- 
| '''InStrRev(''string'', ''findString'')'''
| 
 Returns the position of the last occurrence of one string (''findString'') within another (''string''), starting from the right side of the string. {br}

'''Example:'''{{InStrRev(CStr([Contact.Email]), '@')}}{br}

In this example, {{Contact.Email}} is an attribute from the database scheme.
|- 
| '''Len(''string'')'''
| 
 Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable. {br}

'''Example:'''{{Len(CStr([Contact.Email]))}}{br}

In this example, {{Contact.Email}} is an attribute from the database scheme.
|- 
| '''Left(''string'', ''length'')'''
| 
 Returns a string containing a specified number of characters from the left side of a string. If ''string'' contains ''Null'', ''Null'' is returned. {br}

'''Example:'''{{Left(CStr([Contact.Email]), 7)}}{br}

In this example, '''Contact.Email''' is an attribute from the database scheme.
|- 
| '''Right(''string'', ''length'')'''
| 
 Returns a string containing a specified number of characters from the right side of a string. If ''string'' contains ''Null'', ''Null'' is returned. {br}

'''Example:'''{{Right(CStr([Contact.Email]), 10)}}{br}

In this example, '''Contact.Email''' is an attribute from the database scheme.
|- 
| '''Replace(''string'', ''oldValue'', ''newValue'')'''
| 
 Returns a string in which a specified substring (''oldValue'') has been replaced with another substring (''newValue''). {br}

'''Example:'''{{Replace(CStr([Contact.Email]), '@.', '@')}}{br}

In this example, '''Contact.Email''' is an attribute from the database scheme.
|- 
| '''PadLeft(''string'', ''width'', ''paddingChar'')'''
| 
 Right-aligns the characters in a specified string (''string''), padding with the specified characters (''paddingChar'') on the left for a specified total width (''width''). {br}

'''Example:'''{{PadLeft(CStr([Contact.Email]), 7, '@')}}{br}

In this example, '''Contact.Email''' is an attribute from the database scheme.
|- 
| '''PadRight(''string'', ''width'', ''paddingChar'')'''
| 
 Left-aligns the characters in a specified string (''string''), padding with the specified characters (''paddingChar'') on the right for a specified total width (''width''). {br}

'''Example:'''{{PadRight(CStr([Contact.Email]), 10, '@')}}{br}

In this example, '''Contact.Email''' is an attribute from the data scheme.
|}
==Mathematical Functions==
Mathematical functions perform calculations, usually based on input values provided as arguments, and return numeric values. Listed below are the mathematical functions available in the ''Math'' subnode of the ''Functions'' node in Expression Editor.
{| class="checklist" | width="100%" 
|- 
!width="19%" ! Function
!width="80%" ! Description and Examples
|- 
| '''Abs(x)'''
| 
 Returns the absolute value of a number. {br}

'''Example:'''{{Abs($CurrBal - $CurrTot)}}{br}

In this example, {{CurrBal}} and {{CurrTot}} are the report variables.
|- 
| '''Floor(x)'''
| 
 Returns the largest integer that is not greater than the argument. {br}

'''Example:'''{{Floor([Contact.NoteID])}}{br}

In this example, {{Contact.NoteID}} is an attribute from the database scheme.
|- 
| '''Ceiling(x)'''
| 
 Returns the smallest integer that is not less than the argument. {br}

'''Example:'''{{Ceiling([Contact.NoteID])}}{br}

In this example, {{Contact.NoteID}} is an attribute from the database scheme.
|- 
| '''Round(x, ''decimals'')'''
| 
 Returns a numeric expression, rounded to the specified precision (''decimals''). {br}

'''Example:'''{{Round($CurrTot, 2)}}{br}

In this example, {{CurrTot}} is a report variable.
|- 
| '''Min(x, y)'''
| 
 Returns the smaller of two values. {br}

'''Example:'''{{Min($CurrTot, $CurrCompanyTot)}}{br}

In this example, {{CurrTot}} and {{CurrCompanyTot}} are report variables.
|- 
| '''Max(x, y)'''
| 
 Returns the greater of two values. {br}

'''Example:'''{{Max($CurrTot, $CurrCompanyTot)}}{br}

In this example, {{CurrTot}} and {{CurrCompanyTot}} are report variables
|- 
| '''Pow(x, ''power'')'''
| 
 Computes the value of x raised to the specified power (''power''). {br}

'''Example:'''{{Pow(([Contact.NoteID], 2))}}{br}

In this example, {{Contact.NoteID}} is an attribute from the database scheme.
|}
==Date and Time Functions==
The date and time functions perform operations on system-generated values and return values of the following types: string, numeric, or ''Date/Time''. Listed below are the string functions available in the ''DateTime'' subnode of the ''Functions'' node in Expression Editor.
{| class="checklist" | width="100%" 
|- 
!width="27%" ! Function
!width="72%" ! Description and Examples
|- 
| '''Now()'''
| 
 Returns the current date and time according to the system date and time settings on the local computer. {br}

'''Example:'''{{Now()}}
|- 
| '''Today()'''
| 
 Returns the current date according to the system date and time settings on the local computer.{br}

'''Example:'''{{Today()}}
|- 
| '''DateAdd(''date'', ''interval'', ''number'')'''
| 
Returns a new date calculated by adding the specified number ({{nbr}}) of time intervals ({{int}}) to the date ({{dt}}). The {{int}} argument specifies the type of time interval, and is one of the following options: 
*{{yyyy}} - A number ({{nbr}}) of years will be added to the specified date ({{dt}}). 
*{{m}} - A number ({{nbr}}) of months will be added to the specified date ({{dt}}).
*{{y}} - Same as ''d''; see below.
*{{d}} - A number ({{nbr}}) of days will be added to the specified date ({{dt}}).
*{{h}} - A number ({{nbr}}) of hours will be added to the specified date ({{dt}}).
*{{n}} - A number ({{nbr}}) of minutes will be added to the specified date ({{dt}}).
*{{s}} - A number ({{nbr}}) of seconds will be added to the specified date ({{dt}}).

'''Examples:'''{br}

{{DateAdd($DueDate, 'm', -2)}}{br}

{{DateAdd(CDate('31/01/1995'), 'm', -2)}}{br}

{{DateAdd($DueDate, 'y', -2)}}{{DateAdd(Cdate($DueDate), 'd', -2)}}{br}

In these examples, {{DueDate}} is a report variable.
|- 
| '''Year(''date'')'''
| 
 Returns the year, as an integer, extracted from the specified date ({{date}}). {br}

'''Examples:'''{br}

{{Year([ARPayment.ClearDate])}}{br}

{{Year(Cdate($DueDate))}}{{Year($DueDate)}}{br}

{{Year(CDate('31/01/1995'))}}{br}

In these examples, {{DueDate}} is a report variable, and {{ARPayment.ClearDate}} is an attribute from the database scheme.
|- 
| '''Month(''date'')'''
| 
 Returns the month, as an integer, extracted from the specified date ({{date}}).{br}

'''Examples:'''{br}

{{=Month([ARPayment.ClearDate])}}{br}

{{=Month($DueDate)}}{{=Month(Cdate($DueDate))}}{br}

{{=Month(CDate('31/01/1995'))}}{br}

In this example, {{DueDate}} is a report variable, and {{ARPayment.ClearDate}} is an attribute from the database scheme.
|- 
| '''Day(''date'')'''
| 
 Returns the day (as an integer) extracted from the specified date ({{date}}). {br}

'''Examples:'''{br}

{{Day([ARPayment.ClearDate])}}{br}

{{Day($DueDate)}}{{Day(Cdate($DueDate))}}{br}

{{Day(CDate('31/01/1995'))}}{br}

In these examples, {{DueDate}} is a report variable, and {{ARPayment.ClearDate}} is an attribute from the database scheme.
|- 
| '''DayOfWeek(''date'')'''
| 
 Returns the day of the week associated with the specified date ({{date}}) as an integer. {br}

'''Examples:'''{br}

{{DayOfWeek([ARPayment.ClearDate])}}{br}

{{DayOfWeek($DueDate)}}{br}

{{DayOfWeek(Cdate($DueDate))}}{br}

{{DayOfWeek(CDate('31/01/1995'))}}{br}

In this example, {{DueDate}} is a report variable, and {{ARPayment.ClearDate}} is an attribute from the database scheme.
|- 
| '''DayOfYear('''''date''''')'''
| 
 Returns the day of the year calculated for the specified date ({{date}}). {br}

'''Examples:'''{br}

{{DayOfYear([ARPayment.ClearDate])}}{br}

{{DayOfYear($DueDate)}}{br}

{{DayOfYear(Cdate($DueDate))}}{br}

{{DayOfYear(CDate('31/01/1995'))}}{br}

In these examples, {{DueDate}} is a report variable, and {{ARPayment.ClearDate}} is an attribute from the database scheme.
|- 
| '''Hour(''date'')'''
| 
 Returns the number of hours extracted from the specified date ({{date}}). {br}

'''Examples:'''{br}

{{Hour([ARPayment.ClearDate])}}{br}

{{Hour($DueDate)}}{br}

{{Hour(Cdate($DueDate))}}{br}

In this example, {{DueDate}} is a report variable, and {{ARPayment.ClearDate}} is an attribute from the database scheme.
|- 
| '''Minute(''date'')'''
| 
 Returns the number of minutes extracted from the specified date ({{date}}). {br}

'''Examples:'''{br}

{{Minute([ARPayment.ClearDate])}}{br}

{{Minute($DueDate)}}{br}

{{Minute(Cdate($DueDate))}}{br}

{{Minute(CDate('31/01/1995'))}}{br}

In this example, {{DueDate}} is a report variable, and {{ARPayment.ClearDate}} is an attribute from the database scheme.
|- 
| '''Second(''date'')'''
| 
 Returns the seconds extracted from the specified date ({{date}}) as an integer. {br}

'''Examples:'''{br}

{{Second([ARPayment.ClearDate])}}{br}

{{Second($DueDate)}}{{Second(Cdate($DueDate))}}{br}

{{Second(CDate('31/01/1995'))}}{br}

In this example, {{DueDate}} is a report variable, and {{ARPayment.ClearDate}} is an attribute from the database scheme.
|}
==Shortcut Functions==
The shortcut functions perform miscellaneous operations. Listed below are the string functions available in the ''Math'' subnode of the ''Program Shortcut'' node in Expression Editor.
{| class="checklist" | width="100%" 
|- 
!width="28%" ! Function
!width="71%" ! Description and Examples
|- 
| '''IIf(''expression'', ''truePart'', ''falsePart'')'''
| 
 Returns one of two values, depending on the evaluation of the expression: If the expression evaluates to {{True}}, the function returns the ''truePart'' value; otherwise, it returns the ''falsePart'' value. {br}

'''Example:'''{{IIf(($CurrTot-$CurrBal)<>0), CStr([ARRegister.DocBal]), 'No data available')}}{br}

In this example, {{CurrTot}} and {{CurrBal}} are report variables, and '''ARRegister.DocBal''' is an attribute from the database scheme.
|- 
| '''Switch(''expression&#95;1'', ''value&#95;1'', ''expression&#95;2'', ''value&#95;2'', ...)'''
| 
 Returns the value ''value&#95;n'' that corresponds to the first expression ''expression&#95;n'' that evaluates to {{True}}. ''expression&#95;1'', ''expression&#95;2'', and so on are Boolean expressions. {br}

'''Example:'''{{Switch((($CurrTot-$CurrBal)<0), $CurrBal, (($CurrTot-$CurrBal)>0), $CurrTot)}}{br}

In this example, {{CurrTot}} and {{CurrBal}} are report variables.
|- 
| '''IsNull(''value'', ''nullValue'')'''
| 
 Replaces {{NULL}} with the specified replacement value. The ''value'' argument is checked for {{NULL}}. {br}

'''Example:'''{{IsNull($PrintDoc, 'NULL')}}{br}

In this example, {{PrintDoc}} is a report variable.
|- 
| '''Assign(''&rsquo;$name&rsquo;'', ''expression'')'''
| 
Assigns the result of the expression calculation to the variable specified as the parameter. The function can be used to assign a value to an existing variable, or a new variable can be created with the expression calculation value assigned to it.{br}

'''Example:'''{{Assign({{PrintDoc}}, (IsNull(&#91;RowARRegister.CustomerID&#93;)))}}{br}

In this example, {{PrintDoc}} is a report variable, and '''ARRegister.CustomerID''' is an attribute from the data scheme).
|- 
| '''Assign(''&rsquo;$name&rsquo;'', ''expression'', ''resetExpression'')'''
| 
 Assigns the result of the expression calculation to the variable specified as the parameter. The ''expression'' value is assigned to the variable when the variable is set, and the ''resetExpression'' defines when the variable value should be reset. The function can be used to assign a value to an existing variable, or a new variable can be created and the expression calculation value is assigned to it.{br}

'''Example:'''{{Assign(<nowiki>'PrintDoc'</nowiki>, (IsNull([ARRegister.CustomerID])), IsNull([APPayment.AdjFinPeriodID]))}}{br}

In this example, {{PrintDoc}} is a report variable, and '''ARRegister.CustomerID''' is an attribute from the database scheme).
|}
==Application-Specific Functions==
The application-specific functions are specific for the application in which you will run the report. That is why these functions are not listed the Expression Editor windows. You will need to enter these functions manually.{br}

The following table includes the application-specific functions available in Acumatica Report                         Designer.
{| class="checklist" | width="100%" 
|- 
!width="28%" ! Function
!width="71%" ! Description and Examples
|- 
| '''GetAPPaymentInfo(''accountCD, paymentMethodID, detailID, acctCD'')'''
| 
Returns the value of the specified AP payment attribute (''detailID'') for specific cash account (''accountCD''), payment method (''paymentMethodID''), and vendor (''acctCD''). The function returns the attribute value as it is specified in the '''Payment Instructions''' section on the '''Payment Settings''' tab of the [HelpRoot_FormReference\AP_30_30_00|Vendors] ([~/?ScreenId=AP303000|AP303000]) form.{br}

If the specified record is not available, the function returns an empty string.{br}

'''Example:'''{{Payments.GetAPPaymentInfo('102000','FEDWIRE','INSTRUCTIONS','V000213')}}
|- 
| '''GetARPaymentInfo(''accountCD, paymentMethodID, detailID, pMInstanceID'')'''
| 
 Returns the value of the specified AR payment attribute (''detailID'') for specific cash account (''accountCD''), payment method (''paymentMethodID''), and customer (''acctCD''). The function returns the attribute value as it is specified on the '''Payment Method Details''' tab of the [HelpRoot_FormReference\AR_30_30_10|Customer Payment Methods] ([~/?ScreenId=AR303010|AR303010]) form.{br}

If the specified record is not available, the function returns an empty string.{br}

'''Example:'''{{Payments.GetARPaymentInfo('102000','FEDWIRE','ACCOUNTNO','C0003163')}}
|- 
| '''GetRemitPaymentInfo(''accountCD, paymentMethodID, detailID'') '''
| 
 Returns the value of the specified payment attribute (''detailID'') for specific cash account (''accountCD''), payment method (''paymentMethodID''), and vendor or customer (''acctCD''). The function returns the attribute value as it is specified on the '''Remittance Settings''' tab of the [HelpRoot_FormReference\CA_20_20_00|Cash Accounts] ([~/?ScreenId=CA202000|CA202000]) form.{br}

If the specified record is not available, the function returns an empty string.{br}

'''Example:'''{{Payments.GetRemitPaymentInfo('102000','FEDWIRE','ACCOUNTNO')}}
|}
==Related Articles==
*[HelpRoot_ReportingTools\Using_the_Expression_Editor|Using the Expression Editor]]]></column>
			<column name="PlainText"><![CDATA[Using Functions in Expressions Functions enable you to perform specific tasks that facilitate the processing of data 				for the reports. Many functions available in the Expression Editor window process 				the data and return the values you can use in reports.  To use functions in expressions, you can enter them manually in the expression 				editing area or select them from the list of functions provided by Expression 				Editor. You can use the following groups of functions in expressions. Type Conversion Functions The type conversion functions enable you to convert data from one data type to 				another. Listed below are the type conversion functions available in the 					 Conversion  subnode of the  Functions  node in Expression Editor. Function Description and Examples CBool(x) Converts the expression used as the function argument into a 									Boolean expression. Returns  False  if the 									Boolean value is 0; otherwise, returns  True .  Example: CBool($CurrCompanyTot - $CompanyTot) In this example,  CurrCompanyTot  and 										 CompanyTot  are report variables. CDate(x) Converts the expression used as the function argument into a 									value of the  Date  type. The argument should be a valid 									date expression according to the locale selected for the import 									or export scenario.  Example: CDate($DueDate - 1) In this example,  DueDate  is a report 									variable. CStr(x)  Converts the expression used as the function argument into a 									string. If the argument is  Null , the function 									returns a run-time error; otherwise, it returns a string.  Example: CStr($PrintDoc) Here,  PrintDoc  is a report variable. CDbl(x)  Converts the expression defined in the function argument into a 									value of the  Double  type.  Example: CDbl($CurrBal/$CurrTot) Here,  CurrBal  and  CurrTot  are 									report variables. CSng(x)  Converts the expression used as the function argument into a 									value of the  Single  type. If the expression has a value 									outside the acceptable range for the  Single  type, this 									function returns an error.  Example: CSng($StCycCurrTot/$CompanyTot) In this example,  StCycCurrTot  and 										 CompanyTot  are report variables. CDec(x)  Converts the expression used as the function argument into a 									value of the  Decimal  type.  Example: CDec($CompanyTot) In this example,  CompanyTot  is a report 									variable. CInt(x)  Converts the expression used as the function argument into a 									value of the  Integer  type.  Example: CInt([ARPayment.ExtRefNbr]) In this example,  ARPayment.ExtRefNbr  is an 									attribute from the database scheme. CShort(x)  Converts a numeric value to a value of the  Short  type.  Example: CShort([ARPayment.ImpRefNbr]) ARPayment.ImpRefNbr  is an attribute from the 									database scheme. CLong(x)  Converts a numeric value to a value of the  Long  type.  Example: CLong($CurrTot) In this example,  CurrTot  is a report 									variable. Aggregate Functions Aggregate functions perform a calculation on a set of values and return a single 				value. Listed below are the aggregate functions available in the  Aggregates  				subnode of the  Functions  node in Expression Editor. Function Description and Examples Avg( expression )  Returns the average of all non-null values of the specified 									expression.  Example: Avg($StCycAgeTot00, $StCycAgeTot01) In this example,  StCycAgeTot00  and 										 StCycAgeTot01  are report variables. Sum( expression )  Returns a sum of the values of the specified expression.  Example: Sum([ARInvoice.TaxTotal], $CurrTot) In this example,  ARInvoice.TaxTotal  is an 									attribute from the database scheme, and  CurrTot  									is a report variable. Count( expression )  Returns a count of the values from the specified expression.  Example: Count($AgeBal00, $AgeBal01) In this example,  AgeBal00  and 										 AgeBal01  are report variables. Max( expression )  Returns the maximum value from all non-null values of the 									specified expression.  Example: Max($CurrCompanyTot, $CompanyTot) In this example,  CurrCompanyTot  and 										 CompanyTot  are report variables. Min( expression )  Returns the minimum value from all non-null values of the 									specified expression.  Example: Min($CurrCompanyTot, $CompanyTot) In this example,  CurrCompanyTot  and 										 CompanyTot  are report variables. Next( expression )  Returns the next value (from the current one) in the specified 									expression.  Example: Next([ARInvoice.LineTotal],[ARInvoice.TaxTotal]) In this example,  ARInvoice.LineTotal  and 										 ARInvoice.TaxTotal  are attributes from the 									database scheme. Prev( expression )  Returns the previous value (from the current one) in the 									specified expression.  Example: Prev([ARInvoice.LineTotal],[ARInvoice.TaxTotal]) ARInvoice.LineTotal  and 										 ARInvoice.TaxTotal  are attributes from the 									database scheme. First( expression )  Returns the first value in the specified expression.  Example: First([ARInvoice.LineTotal],[ARInvoice.TaxTotal]) In this example,  ARInvoice.LineTotal  and 										 ARInvoice.TaxTotal  are attributes from the 									database scheme. Last( expression )  Returns the last value in the specified expression.  Example: Last([ARInvoice.LineTotal],[ARInvoice.TaxTotal]) In this example,  ARInvoice.LineTotal  and 										 ARInvoice.TaxTotal  are attributes from the 									database scheme. String Functions String functions, perform an operation on a string input value and return a string or 				numeric value. Listed below are the string functions available in the  Text  				subnode of the  Functions  node in Expression Editor. Function Description and Examples LTrim( string ) Removes all leading spaces or parsing characters from the 									specified character expression, or all leading 0 bytes from the 									specified binary expression.  Example: LTrim(CStr([Contact.LastName])) In this example,  Contact.LastName  is an 									attribute from the database scheme. RTrim( string )  Removes all trailing spaces or parsing characters from the 									specified character expression, or all trailing 0 bytes from the 									specified binary expression.  Example: RTrim(CStr([Contact.LastName])) In this example,  Contact.LastName  is an 									attribute from the database scheme. Trim( string ) Removes all trailing spaces or parsing characters from the 									specified character expression, or all trailing 0 bytes from the 									specified binary expression.  Example: Trim(CStr([Contact.FirstName]+[Contact.MidName]+[Contact.LastName])) In this example,  Contact.FirstName , 										 Contact.MidName , and 										 Contact.LastName  are attributes from the 									database scheme. Format( format, argument(s) ) Replaces the format item in a specified formatting string 										( format ) with the text equivalent of the arguments 										( arguments ).  Example: Format('Curr. Balance: . . . . . . . . {0:N}; Total 										Amount: . . . . . . . . {1:N}', $CurrBal, 										$CurrTot) In this example,  CurrBal  and 										 CurrBal  are report variables; 0 and 1 are 									specifiers indicating where the arguments will be inserted; C is 									the  currency  format specifier; and N is the  number  									format specifier. UCase( string ) Returns a string that has been converted to uppercase. The 										 string  argument is any valid string expression. If 										 string  contains  Null ,  Null  is returned.  Example: UCase(CStr([RowContact.MidName])) In this example,  RowContact.MidName  is an 									attribute from the database scheme. LCase( string )  Returns a string that has been converted to lowercase. The 										 string  argument is any valid string expression. If 										 string  contains  Null ,  Null  is returned.  Example: LCase(CStr([Contact.Email])) In this example,  Contact.Email  is an attribute 									from the database scheme. InStr( string ,  findString )  Returns the position of the first occurrence of one string 										( findString ) within another ( string ).  Example: InStr(CStr([Contact.Email]), '@') In this example,  Contact.Email  is an attribute 									from the database scheme. InStrRev( string ,  findString )  Returns the position of the last occurrence of one string 										( findString ) within another ( string ), starting 									from the right side of the string.  Example: InStrRev(CStr([Contact.Email]), '@') In this example,  Contact.Email  is an attribute 									from the database scheme. Len( string )  Returns an integer containing either the number of characters in 									a string or the nominal number of bytes required to store a 									variable.  Example: Len(CStr([Contact.Email])) In this example,  Contact.Email  is an attribute 									from the database scheme. Left( string ,  length )  Returns a string containing a specified number of characters 									from the left side of a string. If  string  contains 										 Null ,  Null  is returned.  Example: Left(CStr([Contact.Email]), 7) In this example,  Contact.Email  is an attribute from the 									database scheme. Right( string ,  length )  Returns a string containing a specified number of characters 									from the right side of a string. If  string  contains 										 Null ,  Null  is returned.  Example: Right(CStr([Contact.Email]), 10) In this example,  Contact.Email  is an attribute from the 									database scheme. Replace( string ,  oldValue , 								 newValue )  Returns a string in which a specified substring 									( oldValue ) has been replaced with another substring 										( newValue ).  Example: Replace(CStr([Contact.Email]), '@.', 										'@') In this example,  Contact.Email  is an attribute from the 									database scheme. PadLeft( string ,  width , 								 paddingChar )  Right-aligns the characters in a specified string 									( string ), padding with the specified characters 										( paddingChar ) on the left for a specified total width 										( width ).  Example: PadLeft(CStr([Contact.Email]), 7, '@') In this example,  Contact.Email  is an attribute from the 									database scheme. PadRight( string ,  width , 								 paddingChar )  Left-aligns the characters in a specified string 									( string ), padding with the specified characters 										( paddingChar ) on the right for a specified total 									width ( width ).  Example: PadRight(CStr([Contact.Email]), 10, 										'@') In this example,  Contact.Email  is an attribute from the 									data scheme. Mathematical Functions Mathematical functions perform calculations, usually based on input values provided 				as arguments, and return numeric values. Listed below are the mathematical functions 				available in the  Math  subnode of the  Functions  node in Expression 				Editor. Function Description and Examples Abs(x)  Returns the absolute value of a number.  Example: Abs($CurrBal - $CurrTot) In this example,  CurrBal  and 										 CurrTot  are the report variables. Floor(x)  Returns the largest integer that is not greater than the 									argument.  Example: Floor([Contact.NoteID]) In this example,  Contact.NoteID  is an attribute 									from the database scheme. Ceiling(x)  Returns the smallest integer that is not less than the argument.  Example: Ceiling([Contact.NoteID]) In this example,  Contact.NoteID  is an attribute 									from the database scheme. Round(x,  decimals )  Returns a numeric expression, rounded to the specified precision 										( decimals ).  Example: Round($CurrTot, 2) In this example,  CurrTot  is a report 									variable. Min(x, y)  Returns the smaller of two values.  Example: Min($CurrTot, $CurrCompanyTot) In this example,  CurrTot  and 										 CurrCompanyTot  are report variables. Max(x, y)  Returns the greater of two values.  Example: Max($CurrTot, $CurrCompanyTot) In this example,  CurrTot  and 										 CurrCompanyTot  are report variables Pow(x,  power )  Computes the value of x raised to the specified power 										( power ).  Example: Pow(([Contact.NoteID], 2)) In this example,  Contact.NoteID  is an attribute 									from the database scheme. Date and Time Functions The date and time functions perform operations on system-generated values and return 				values of the following types: string, numeric, or  Date/Time . Listed below 				are the string functions available in the  DateTime  subnode of the 					 Functions  node in Expression Editor. Function Description and Examples Now()  Returns the current date and time according to the system date 									and time settings on the local computer.  Example: Now() Today()  Returns the current date according to the system date and time 									settings on the local computer. Example: Today() DateAdd( date ,  interval ,  number ) Returns a new date calculated by adding the specified number 										( nbr ) of time intervals 										( int ) to the date ( dt ). 									The  int  argument specifies the type of time 									interval, and is one of the following options:  yyyy  - A number ( nbr ) of 										years will be added to the specified date 											( dt ).  m  - A number ( nbr ) of 										months will be added to the specified date 											( dt ). y  - Same as  d ; see below. d  - A number ( nbr ) of days 										will be added to the specified date 										( dt ). h  - A number ( nbr ) of 										hours will be added to the specified date 											( dt ). n  - A number ( nbr ) of 										minutes will be added to the specified date 											( dt ). s  - A number ( nbr ) of 										seconds will be added to the specified date 											( dt ). Examples: DateAdd($DueDate, 'm', -2) DateAdd(CDate('31/01/1995'), 'm', 										-2) DateAdd($DueDate, 'y', -2) DateAdd(Cdate($DueDate), 'd', -2) In these examples,  DueDate  is a report 									variable. Year( date )  Returns the year, as an integer, extracted from the specified 									date ( date ).  Examples: Year([ARPayment.ClearDate]) Year(Cdate($DueDate)) Year($DueDate) Year(CDate('31/01/1995')) In these examples,  DueDate  is a report variable, 									and  ARPayment.ClearDate  is an attribute from 									the database scheme. Month( date )  Returns the month, as an integer, extracted from the specified 									date ( date ). Examples: =Month([ARPayment.ClearDate]) =Month($DueDate) =Month(Cdate($DueDate)) =Month(CDate('31/01/1995')) In this example,  DueDate  is a report variable, 									and  ARPayment.ClearDate  is an attribute from 									the database scheme. Day( date )  Returns the day (as an integer) extracted from the specified 									date ( date ).  Examples: Day([ARPayment.ClearDate]) Day($DueDate) Day(Cdate($DueDate)) Day(CDate('31/01/1995')) In these examples,  DueDate  is a report variable, 									and  ARPayment.ClearDate  is an attribute from 									the database scheme. DayOfWeek( date )  Returns the day of the week associated with the specified date 										( date ) as an integer.  Examples: DayOfWeek([ARPayment.ClearDate]) DayOfWeek($DueDate) DayOfWeek(Cdate($DueDate)) DayOfWeek(CDate('31/01/1995')) In this example,  DueDate  is a report variable, 									and  ARPayment.ClearDate  is an attribute from 									the database scheme. DayOfYear( date )  Returns the day of the year calculated for the specified date 										( date ).  Examples: DayOfYear([ARPayment.ClearDate]) DayOfYear($DueDate) DayOfYear(Cdate($DueDate)) DayOfYear(CDate('31/01/1995')) In these examples,  DueDate  is a report variable, 									and  ARPayment.ClearDate  is an attribute from 									the database scheme. Hour( date )  Returns the number of hours extracted from the specified date 										( date ).  Examples: Hour([ARPayment.ClearDate]) Hour($DueDate) Hour(Cdate($DueDate)) In this example,  DueDate  is a report variable, 									and  ARPayment.ClearDate  is an attribute from 									the database scheme. Minute( date )  Returns the number of minutes extracted from the specified date 										( date ).  Examples: Minute([ARPayment.ClearDate]) Minute($DueDate) Minute(Cdate($DueDate)) Minute(CDate('31/01/1995')) In this example,  DueDate  is a report variable, 									and  ARPayment.ClearDate  is an attribute from 									the database scheme. Second( date )  Returns the seconds extracted from the specified date 										( date ) as an integer.  Examples: Second([ARPayment.ClearDate]) Second($DueDate) Second(Cdate($DueDate)) Second(CDate('31/01/1995')) In this example,  DueDate  is a report variable, 									and  ARPayment.ClearDate  is an attribute from 									the database scheme. Shortcut Functions The shortcut functions perform miscellaneous operations. Listed below are the string 				functions available in the  Math  subnode of the  Program Shortcut  node 				in Expression Editor. Function Description and Examples IIf( expression ,  truePart , 								 falsePart )  Returns one of two values, depending on the evaluation of the 									expression: If the expression evaluates to 									 True , the function returns the  truePart  									value; otherwise, it returns the  falsePart  value.  Example: IIf(($CurrTot-$CurrBal)<>0), 										CStr([ARRegister.DocBal]), 'No data 										available') In this example,  CurrTot  and 										 CurrBal  are report variables, and 										 ARRegister.DocBal  is an attribute from the database 									scheme. Switch( expression_1 ,  value_1 ,  expression_2 , 										 value_2 , ...)  Returns the value  value_n  that corresponds to the first 									expression  expression_n  that evaluates to 										 True .  expression_1 , 										 expression_2 , and so on are Boolean expressions.  Example: Switch((($CurrTot-$CurrBal)<0), $CurrBal, 										(($CurrTot-$CurrBal)>0), $CurrTot) In this example,  CurrTot  and 										 CurrBal  are report variables. IsNull( value ,  nullValue )  Replaces  NULL  with the specified replacement 									value. The  value  argument is checked for 										 NULL .  Example: IsNull($PrintDoc, 'NULL') In this example,  PrintDoc  is a report 									variable. Assign( '$name' ,  expression ) Assigns the result of the expression calculation to the variable 									specified as the parameter. The function can be used to assign a 									value to an existing variable, or a new variable can be created 									with the expression calculation value assigned to it. Example: Assign( PrintDoc , 										(IsNull([RowARRegister.CustomerID]))) In this example,  PrintDoc  is a report variable, 									and  ARRegister.CustomerID  is an attribute from the data 									scheme). Assign( '$name' ,  expression , 									 resetExpression )  Assigns the result of the expression calculation to the variable 									specified as the parameter. The  expression  value is 									assigned to the variable when the variable is set, and the 										 resetExpression  defines when the variable value 									should be reset. The function can be used to assign a value to 									an existing variable, or a new variable can be created and the 									expression calculation value is assigned to it. Example: Assign(<nowiki>'PrintDoc'</nowiki>, 										(IsNull([ARRegister.CustomerID])), 										IsNull([APPayment.AdjFinPeriodID])) In this example,  PrintDoc  is a report variable, 									and  ARRegister.CustomerID  is an attribute from the 									database scheme). Application-Specific Functions The application-specific functions are specific for the application in which you will 				run the report. That is why these functions are not listed the Expression Editor 				windows. You will need to enter these functions manually. The following table includes the application-specific functions available in  Acumatica Report                         Designer. Function Description and Examples GetAPPaymentInfo( accountCD, paymentMethodID, detailID, 										acctCD ) Returns the value of the specified AP payment attribute 										( detailID ) for specific cash account 										( accountCD ), payment method ( paymentMethodID ), 									and vendor ( acctCD ). The function returns the attribute 									value as it is specified in the  Payment 										Instructions  section on the  Payment 										Settings  tab of the   ([~/?ScreenId=AP303000|AP303000]) Vendors (AP303000) 									form. If the specified record is not available, the function returns an 									empty string. Example: Payments.GetAPPaymentInfo('102000','FEDWIRE','INSTRUCTIONS','V000213') GetARPaymentInfo( accountCD, paymentMethodID, detailID, 										pMInstanceID )  Returns the value of the specified AR payment attribute 										( detailID ) for specific cash account 										( accountCD ), payment method ( paymentMethodID ), 									and customer ( acctCD ). The function returns the attribute 									value as it is specified on the  Payment Method 										Details  tab of the   ([~/?ScreenId=AR303010|AR303010]) Customer Payment Methods (AR303010) 									form. If the specified record is not available, the function returns an 									empty string. Example: Payments.GetARPaymentInfo('102000','FEDWIRE','ACCOUNTNO','C0003163') GetRemitPaymentInfo( accountCD, paymentMethodID, 										detailID )   Returns the value of the specified payment attribute 										( detailID ) for specific cash account 										( accountCD ), payment method ( paymentMethodID ), 									and vendor or customer ( acctCD ). The function returns the 									attribute value as it is specified on the  Remittance 										Settings  tab of the   ([~/?ScreenId=CA202000|CA202000]) Cash Accounts (CA202000) 									form. If the specified record is not available, the function returns an 									empty string. Example: Payments.GetRemitPaymentInfo('102000','FEDWIRE','ACCOUNTNO') ]]></column>
		</row>
		<row PageID="ab1bd202-de70-456d-811c-4d3295f7e003" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="bc12ab21-af81-4938-787b-0835ddc2d78f" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The report content includes visual elements that can contain text, data, and graphics. The visual elements are placed within the report sections, and their appearance and behavior properties are determined by both the properties of the visual elements themselves and the properties of their report section. Adding content to the report generally involves three steps: adding visual elements to the report, linking them with the data to be displayed in the report, and setting the visual elements&rsquo; properties. 
==In This Section==
The following articles cover the types of content you can add: 
*[HelpRoot_ReportingTools\Adding_a_Text_Box_to_the_Report_Section|Adding a Text Box to the Report Section]
*[HelpRoot_ReportingTools\Adding_a_Picture_Box_to_the_Report_Section|Adding a Picture Box to the Report Section]
*[HelpRoot_ReportingTools\Adding_a_Panel_to_the_Report_Section|Adding a Panel to the Report Section]
*[HelpRoot_ReportingTools\Adding_a_Line_to_the_Report_Section|Adding a Line to the Report Section]
*[HelpRoot_ReportingTools\Adding_graphics_on_the_report|Adding Graphics on the Report]
*[HelpRoot_ReportingTools\Adding_a_Subreport_to_the_Report|Adding a Subreport to the Report]
]]></column>
			<column name="PlainText"><![CDATA[Creating the Report Content The report content includes visual elements that can contain text, data, and graphics.             The visual elements are placed within the report sections, and their appearance and             behavior properties are determined by both the properties of the visual elements             themselves and the properties of their report section. Adding content to the report             generally involves three steps: adding visual elements to the report, linking them with             the data to be displayed in the report, and setting the visual elements' properties.  In This Section The following articles cover the types of content you can add:  Adding a                         Text Box to the Report Section Adding a Text Box to the Report SectionAdding a Picture Box to the Report Section Adding a Picture Box to the Report SectionAdding a                         Panel to the Report Section Adding a Panel to the Report SectionAdding a                         Line to the Report Section Adding a Line to the Report SectionAdding Graphics on                         the Report Adding Graphics on the ReportAdding a                         Subreport to the Report Adding a Subreport to the Report]]></column>
		</row>
		<row PageID="d7d899b9-ee0b-423f-907f-852d24176387" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="f510c0c3-1d54-216b-7cc6-f294d141a7ad" RecordSourceID="22377">
			<column name="Content"><![CDATA[
Text boxes are used to display text or data in the report. Descriptive captions (labels) and data items are placed within the text boxes. The text to be displayed on the label and the data to be displayed in the text box are defined by the '''Value''' property of the ''TextBox'' visual element. To display a label in the text box, enter the label text in the '''Value''' property on the '''Properties''' tab. To retrieve data from the database, the text boxes use expressions that include the links to the data from the data scheme. (For more details, see [HelpRoot_ReportingTools\Using_Expressions|Using Expressions].) {br}

To add a text box to the report section and define it appropriately, perform the following steps: 
#Add the ''TextBox'' visual element to the report section, and position it in the desired location. [HelpRoot_ReportingTools\Adding_and_Removing_Visual_Elements_in_the_Report|Adding and Removing Visual Elements in the Report] describes how to add visual elements.
#Change the name of the text box if necessary ('''Name''' on the '''Properties''' tab).
#Define the text box&rsquo;s properties on the '''Properties''' tab, as described in the remainder of this article.

==Defining the Appearance Properties of the Text Box==
Use the following properties, found in the '''Appearance''' group on the '''Properties''' tab, to define the appearance of the text box. 
===Appearance Properties===
{| class="checklist" | width="100%" 
|- 
!width="16%" ! Property
!width="83%" ! Description
|- 
| '''Format'''
|  The format of the data in the text box. You can use the '''Expression Editor''' dialog to define the data format; for more information, see [HelpRoot_ReportingTools\Using_the_Expression_Editor|Using the Expression Editor].
|- 
| rowspan="10" | '''Style'''
|  The printing style for the text box, set by the the following values:
|- 
| '''BackColor''': The background color for the text box.
|- 
| '''BackImage''': The background image settings for the text box. Enter desired values for the following: 
*'''BarCode Type''': The required bar code type, selected from the drop-down list with a restricted quantity of bar code types.
*'''Source '''- The source of the image.
*'''Image''': The specific image to be used as the background: 
**For an embedded image, select the image name.
**For an external image, enter the path to the image file.
**For an image retrieved from the database, in the '''Image''' box, enter the name of the data field where the image is stored. For example, <tt>=&#91;Branch.LogoName&#93;</tt> to display background image that can be defined separately for each branch.
*'''Repeat''': The appropriate value specifying the repeating pattern for the chosen image: 
**''NoRepeat'': Adds the specified image with no repeating
**''RepeatX'': Repeats the image horizontally to fill the width of the report section
**''RepeatY'': Repeats the image vertically to fill the height of the report section
**''Repeat'': Repeats the image horizontally and vertically to fill both the width and height of the report section

|- 
| '''BorderColor''': The border color of the text box. You can define the color for the bottom, left, right, and top border, and set the default border color, which will be applied if no special settings are defined for the specific borders.
|- 
| '''BorderStyle''': The border line style for the text box. You can define the style for the bottom, left, right, and top border of the text box, and set the default border style, which will be applied if no special settings are defined for the specific borders.
|- 
| '''BorderWidth''': The border line width for the text box (in pixels). You can define the width of the bottom, left, right, and top border of the text box, and set the default border width, which will be applied if no special settings are defined for the specific borders.
|- 
| '''Font''': The font settings for the text box. You can select the font name and size and specify whether the following font attributes are applied: bold, italic, strikeout, and underline.
|- 
| '''Padding''': The padding setting for the text box, which you can specify in pixels for the left side, right side, top, and bottom of the text box.
|- 
| '''TextAlign''': The text alignment for the text box: ''Left'', ''Center'', ''Right'', or ''Not Set''.
|- 
| '''VerticalAlign''': The content vertical alignment for the text box: ''Not Set'', ''Top'', ''Middle'', or ''Bottom''.
|- 
| '''StyleName'''
|  The name of the style defined for the text box. To assign a descriptive name to a style you have defined for a text box, enter the name. To apply an existing style to the text box, select its name.
|- 
| '''Value'''
|  The value to be displayed in the text box. Enter the text here if the text box will display a data label in the report, or use the '''Expression Editor''' dialog to define the value to be displayed in the text box.
|- 
| '''WrapText'''
|  The text wrapping for the text box. To wrap the text across a text box, set this value to ''True''.
|}
==Defining the Behavior Properties of the Text Box==
The following properties, found in the '''Behavior''' group on the '''Properties''' tab, let you define the data processing order, navigation settings, and visibility settings of the text box. 
===Behavior Properties===
{| class="checklist" | width="100%" 
|- 
!width="24%" ! Property
!width="75%" ! Description
|- 
| '''ConvertHtmlToText'''
|  A setting that defines whether the data within the text box must be converted to the plain text format. This property is used if a field value may contain formulas with tags.
|- 
| '''ExcelCaption'''
|  A setting that is used to export a report to Excel when an original report&rsquo;s structure is rather complicated. In such cases, distortions of the Excel format report can take place. Export to Excel becomes simpler if both this and the '''ExcelColumn''' property is defined (see the next item below) for each data field that is to be exported; the other data fields are not exported to Excel. The '''ExcelCaption''' property defines column&rsquo;s caption.
|- 
| '''ExcelColumn'''
|  A setting that is used to export a report to Excel when an original report&rsquo;s structure is rather complicated. Export to Excel becomes simpler if both this and the '''ExcelCaption''' property is defined (see the previous item) for each data field that is to be exported; the other data fields are not exported to Excel. The '''ExcelColumn''' property defines the Excel column to which data from the field is to be entered after the export process is done.
|- 
| '''Multiline'''
|  A setting that defines whether the data within the text box can be displayed in multiple lines.
|- 
| '''NavigateMethod'''
|  The navigation method for the text box. This setting is used if navigation to a URL should be performed when the user clicks the value displayed in the text box. To use the client for navigation, select ''Client''. To use the server for navigation, select ''Server''.
|- 
| '''NavigateParams'''
|  The navigation parameters for the text box, which are used if navigation to a different URL should be performed. To define these parameters, click the button in the box displaying the parameter collection name, and use the External Parameter Collection Editor to define the set of parameters and their values. (For more details, see [HelpRoot_ReportingTools\Using_the_External_Parameter_Collection_Editor|Using the External Parameter Collection Editor].)((({S:Hint}You can add navigation link to another report by selecting the name of the external report file in the '''NavigateReport''' field. To set up this navigation, use parameters, selected in the '''NavigateMethod''' and '''NavigateParams''' collection. All parameters of the linked report should be properly selected or filled in manually. Be careful, the names and types of parameters in this collection must match the names and types of parameters of the selected report. For more information, see: [HelpRoot_ReportingTools\Using_the_External_Parameter_Collection_Editor|Example: Adding Link to Another Report].
)))
|- 
| '''NavigateURL'''
|  The URL for navigation, used if navigation should be performed when the user clicks the value displayed in the text box of the report in browser view, the report exported to Excel or PDF file.((({S:Hint}The exported PDF and Excel files can only support external links, such as [https://www.google.com/|https://www.google.com/], and the '''NavigateMethod''' should be set to ''Client''.
)))
|- 
| '''ProcessOrder'''
|  The processing order for the data associated with the text box, which defines when the expression value is calculated: 
*To process the data while reading, select ''WhileRead''.
*To process the data while printing, select ''WhilePrint''.
*To process the data while reading and printing, select ''Always''.

|- 
| '''Target'''
|  The command or application to be invoked when the user clicks the value within the text box.
|- 
| '''Visible'''
|  The text box&rsquo;s visibility property (''False'' or ''True''). The invisible (hidden) visual elements are not printed in the report.
|- 
| '''VisibleExpr'''
|  The expression that calculates the text box visibility property. This value overrides the '''Visible''' property value if it was set explicitly.
|}
==Defining the Layout Properties of the Text Box==
Use the following group of properties to define the position of the text box on the report page. 
===Layout Properties===
{| class="checklist" | width="100%" 
|- 
!width="15%" ! Property
!width="84%" ! Description
|- 
| '''CanGrow'''
|  An option that defines whether the text box size can grow if the text or data does not fit into its current size.
|- 
| '''CanShrink'''
|  An option that defines whether the text box size can shrink to fit the size of the text box content.
|- 
| '''Location'''
|  The position of the text box on the report page (in pixels). The '''Location''' values include the horizontal (''x'') and vertical (''y'') coordinates of the text box on the page.
|- 
| '''Size'''
|  The size of the text box (in pixels). The '''Size''' values include the width and height of the text box.
|}]]></column>
			<column name="PlainText"><![CDATA[Adding a Text Box to the Report Section Text boxes are used to display text or data in the report. Descriptive captions (labels) and 			data items are placed within the text boxes. The text to be displayed on the label and 			the data to be displayed in the text box are defined by the  Value  property of the 				 TextBox  visual element. To display a label in the text box, enter the label 			text in the  Value  property on the  Properties  tab. To retrieve data from 			the database, the text boxes use expressions that include the links to the data from the 			data scheme. (For more details, see  Using Expressions Using Expressions.)  To add a text box to the report section and define it appropriately, perform the 			following steps:  Add the  TextBox  visual element to the report section, and position it in the desired 				location.  Adding and Removing Visual Elements in the Report Adding and Removing Visual Elements in the Report describes 				how to add visual elements. Change the name of the text box if necessary ( Name  on the  Properties  tab). Define the text box's properties on the  Properties  tab, as described in the 				remainder of this article. Defining the Appearance Properties of the Text Box Use the following properties, found in the  Appearance  group on the  Properties  				tab, to define the appearance of the text box.  Appearance Properties Property Description Format  The format of the data in the text box. You can use the  Expression Editor  								dialog to define the data format; for more information, see  Using the 									Expression Editor Using the Expression Editor. Style  The printing style for the text box, set by the the following values: BackColor : The background color for the text box. BackImage : The background image settings for the text box. 								Enter desired values for the following:  BarCode Type : The required bar code type, selected 										from the drop-down list with a restricted quantity of bar 										code types. Source  - The source of the image. Image : The specific image to be used as the 										background:  For an embedded image, select the image name. For an external image, enter the path to the image 												file. For an image retrieved from the database, in the  Image  box, 												enter the name of the data field where the image is 												stored. For example, 												 =[Branch.LogoName]  to 												display background image that can be defined 												separately for each branch. Repeat : The appropriate value specifying the 										repeating pattern for the chosen image:  NoRepeat : Adds the specified image with no 												repeating RepeatX : Repeats the image horizontally to 												fill the width of the report section RepeatY : Repeats the image vertically to fill 												the height of the report section Repeat : Repeats the image horizontally and 												vertically to fill both the width and height of the 												report section BorderColor : The border color of the text box. You can define 								the color for the bottom, left, right, and top border, and set the 								default border color, which will be applied if no special settings 								are defined for the specific borders. BorderStyle : The border line style for the text box. You can 								define the style for the bottom, left, right, and top border of the 								text box, and set the default border style, which will be applied if 								no special settings are defined for the specific borders. BorderWidth : The border line width for the text box (in 								pixels). You can define the width of the bottom, left, right, and 								top border of the text box, and set the default border width, which 								will be applied if no special settings are defined for the specific 								borders. Font : The font settings for the text box. You can select the 								font name and size and specify whether the following font attributes 								are applied: bold, italic, strikeout, and underline. Padding : The padding setting for the text box, which you can 								specify in pixels for the left side, right side, top, and bottom of 								the text box. TextAlign : The text alignment for the text box:  Left , 									 Center ,  Right , or  Not Set . VerticalAlign : The content vertical alignment for the text 								box:  Not Set ,  Top ,  Middle , or 								 Bottom . StyleName  The name of the style defined for the text box. To assign a 								descriptive name to a style you have defined for a text box, enter 								the name. To apply an existing style to the text box, select its 								name. Value  The value to be displayed in the text box. Enter the text here 								if the text box will display a data label in the report, or use the 									 Expression Editor  dialog to define the value to be 								displayed in the text box. WrapText  The text wrapping for the text box. To wrap the text across a 								text box, set this value to  True . Defining the Behavior Properties of the Text Box The following properties, found in the  Behavior  group on the  Properties  tab, let 				you define the data processing order, navigation settings, and visibility settings 				of the text box.  Behavior Properties Property Description ConvertHtmlToText  A setting that defines whether the data within the text box must 								be converted to the plain text format. This property is used if a 								field value may contain formulas with tags. ExcelCaption  A setting that is used to export a report to Excel when an 								original report's structure is rather complicated. In such cases, 								distortions of the Excel format report can take place. Export to 								Excel becomes simpler if both this and the  ExcelColumn  								property is defined (see the next item below) for each data field 								that is to be exported; the other data fields are not exported to 								Excel. The  ExcelCaption  property defines column's 								caption. ExcelColumn  A setting that is used to export a report to Excel when an 								original report's structure is rather complicated. Export to Excel 								becomes simpler if both this and the  ExcelCaption  property is 								defined (see the previous item) for each data field that is to be 								exported; the other data fields are not exported to Excel. The 									 ExcelColumn  property defines the Excel column to which 								data from the field is to be entered after the export process is 								done. Multiline  A setting that defines whether the data within the text box can 								be displayed in multiple lines. NavigateMethod  The navigation method for the text box. This setting is used if 								navigation to a URL should be performed when the user clicks the 								value displayed in the text box. To use the client for navigation, 								select  Client . To use the server for navigation, select 									 Server . NavigateParams  The navigation parameters for the text box, which are used if navigation to a 								different URL should be performed. To define these parameters, click 								the button in the box displaying the parameter collection name, and 								use the External Parameter Collection Editor to define the set of 								parameters and their values. (For more details, see  Using the External Parameter Collection 									Editor Using the External Parameter Collection Editor.) You can add navigation link to another 									report by selecting the name of the external report file in the 										 NavigateReport  field. To set up this 									navigation, use parameters, selected in the 										 NavigateMethod  and 										 NavigateParams  collection. All 									parameters of the linked report should be properly selected or 									filled in manually. Be careful, the names and types of 									parameters in this collection must match the names and types of 									parameters of the selected report. For more information, see: 										 Example: Adding Link to Another 								Report Example: Adding Link to Another Report. NavigateURL  The URL for navigation, used if navigation should be performed when the user clicks 								the value displayed in the text box of the report in browser view, 								the report exported to Excel or PDF file. The exported PDF and 									Excel files can only support external links, such as  https://www.google.com/ https://www.google.com/, and the 										 NavigateMethod  should be set to 										 Client . ProcessOrder  The processing order for the data associated with the text box, 								which defines when the expression value is calculated:  To process the data while reading, select 										 WhileRead . To process the data while printing, select 										 WhilePrint . To process the data while reading and printing, select 											 Always . Target  The command or application to be invoked when the user clicks 								the value within the text box. Visible  The text box's visibility property ( False  or 								 True ). The invisible (hidden) visual elements are not printed 								in the report. VisibleExpr  The expression that calculates the text box visibility property. 								This value overrides the  Visible  property value if it was set 								explicitly. Defining the Layout Properties of the Text Box Use the following group of properties to define the position of the text box on the 				report page.  Layout Properties Property Description CanGrow  An option that defines whether the text box size can grow if the 								text or data does not fit into its current size. CanShrink  An option that defines whether the text box size can shrink to 								fit the size of the text box content. Location  The position of the text box on the report page (in pixels). The 									 Location  values include the horizontal ( x ) and 								vertical ( y ) coordinates of the text box on the page. Size  The size of the text box (in pixels). The  Size  values 								include the width and height of the text box. ]]></column>
		</row>
		<row PageID="9d8fd42e-67aa-4ab1-b03f-d089be8c9dbe" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="28f8ec2c-1c07-aa8a-5651-76381b393ac7" RecordSourceID="22377">
			<column name="Content"><![CDATA[
Picture boxes are used to display graphical elements in the report. These graphics can be selected from the set of embedded images, retrieved from the external sources, or selected from the database. {br}

To add a picture box to the report section and define it appropriately, proceed as follows: 
#Add the ''PictureBox'' visual element to the report section, and position it in the desired location. The ''[HelpRoot_ReportingTools\Adding_and_Removing_Visual_Elements_in_the_Report|Adding and Removing Visual Elements in the Report]'' article describes how to add visual elements.
#Change the name of the picture box if necessary ('''Name''' on the '''Properties''' tab).
#Define the picture box&rsquo;s properties on the '''Properties''' tab, as described in this article. 

==Defining the Appearance Properties of a Picture Box==
Use the following properties, found in the '''Appearance''' group on the '''Properties''' tab, to define the appearance of the picture box. 
===Appearance Properties===
{| class="checklist" | width="100%" 
|- 
!width="12%" ! Property
!width="87%" ! Description
|- 
| rowspan="10" | '''Style'''
|  The printing style for the picture box, set by the following values: 
|- 
| '''BackColor''': The background color for the picture box.
|- 
| '''BackImage''': The background image settings for the picture box. Enter desired values for: 
*'''Source''': The source of the image.
*'''Image''': The specific image to be used as the background: 
**For an embedded image, select the image name.
**For an external image, enter the path to the image file.
**For an image retrieved from the database, in the '''Image''' box, enter the name of the data field where the image is stored. For example, <tt>=&#91;Branch.LogoName&#93;</tt> to display background image that can be defined separately for each branch.
*'''Repeat''': The appropriate value specifying the repeating pattern for the chosen image: 
**''NoRepeat'': Adds the specified image with no repeating
**''RepeatX'': Repeats the image horizontally to fill the width of the report section
**''RepeatY'': Repeats the image vertically to fill the height of the report section
**''Repeat'': Repeats the image horizontally and vertically to fill both the width and height of the report section

|- 
| '''BorderColor''': The border color for the picture box. You can define the color for the bottom, left, right, and top border of the section, and set the default border color, which will be applied if no special settings are defined for the specific borders.
|- 
| '''BorderStyle''': The border line style for the picture box. You can define the style for the bottom, left, right, and top border of the picture box, and set the default border style, which will be applied if no special settings are defined for the specific borders.
|- 
| '''BorderWidth''': The border line width for the picture box (in pixels). You can define the width of the bottom, left, right, and top border of the picture box, and set the default border width, which will be applied if no special settings are defined for the specific borders.
|- 
| '''Font''': The font settings of the picture box. You can select the font name and size and specify whether the following font attributes are applied: bold, italic, strikeout, and underline.
|- 
| '''Padding''': The padding setting for the picture box, which you can specify in pixels for the left side, right side, top, and bottom of the report section.
|- 
| '''TextAlign''': The text alignment for the picture box: ''Left'', ''Center'', ''Right'', or ''Not Set''.
|- 
| '''VerticalAlign''': The content vertical alignment for the picture box: ''Not Set'', ''Top'', ''Middle'', or ''Bottom''.
|- 
| '''StyleName'''
|  The name of the style defined for the picture box. To assign a descriptive name to a style you have defined, enter the name. To apply an existing style, select its name.
|}
==Defining the Behavior Properties of the Picture Box==
The following properties, found in the '''Behavior''' group on the '''Properties''' tab, let you define the data processing order, navigation settings, and visibility settings of the picture box. 
===Behavior Properties===
{| class="checklist" | width="100%" 
|- 
!width="21%" ! Property
!width="78%" ! Description
|- 
| '''BarcodeSettings'''
| The barcode settings for the picture box. Enter desired values for the following: 
*'''AddCheckDigit''': By setting this property to ''True'', you allow to print the check digit for the barcode.
*'''BarHeight''': The barcode height.
*'''BarWidth''': The barcode width.
*'''LeftMargin''': The barcode left margin.
*'''TextMargin''': The barcode text margin.
*'''TopMargin''':The barcode top margin.
*'''With ratio''': The value of a bar code ration.

|- 
| '''ProcessOrder'''
|  The processing order for the data associated with the picture box, which defines when the expression value is calculated: 
*To process the data while reading, select ''WhileRead''.
*To process the data while printing, select ''WhilePrint''.
*To process the data while reading and printing, select ''Always''.

|- 
| '''Visible'''
|  The picture box&rsquo;s visibility property (''False'' or ''True''). The invisible (hidden) visual elements are not printed in the report.
|- 
| '''VisibleExpr'''
|  The expression that calculates the picture box visibility property. This value overrides the '''Visible''' property value if it was set explicitly.
|}
==Defining the Data Properties of the Picture Box==
These properties allow you to define the source and type of the data for the picture box and to select what image will be displayed. 
===Data Properties===
{| class="checklist" | width="100%" 
|- 
!width="15%" ! Property
!width="84%" ! Description
|- 
| '''BarCode Type'''
|  The required barcode type, selected from the drop-down list with a restricted quantity of types. 
|- 
| '''MimeType'''
|  The type of media data for the picture box.
|- 
| '''Source'''
|  The type of data source of the image to be displayed in the picture box. Select one of the available values: 
*''Embedded'': An embedded image
*''External'': An external image
*''Database'': A data field

|- 
| '''Value'''
|  The actual source of data for the picture box: 
*To define the source of data for an embedded image, select the embedded image name.
*To define the source of data for an external image, enter the path to the external image file (with the file name included).
*To define the source of data for an image stored in the database, enter the data field name.

|}
==Defining the Layout Properties of the Picture Box==
Use these properties to define the size and location of the picture box. 
===Layout Properties===
{| class="checklist" | width="100%" 
|- 
!width="12%" ! Property
!width="87%" ! Description
|- 
| '''Location'''
|  The position of the picture box on the report page (in pixels). The '''Location''' values include the horizontal (''x'') and vertical (''y'') coordinates of the picture box on the page.
|- 
| '''Size'''
|  The size of the picture box (in pixels). The '''Size''' values include the width and height of the picture box.
|- 
| '''Sizing'''
|  The method of placing and fitting the selected image in the picture box. Select one of the available options: 
*''AutoSize'': Automatically selects the image size as the size of the picture to be placed in the picture box
*''Center'': Places the image in the center of the picture box
*''Normal'': Places the image in the left top corner of the picture box
*''Fit'': Stretches or shrinks the image to completely fit into the picture box size
*''Scale'': Scales the image to fit the picture box size

|}]]></column>
			<column name="PlainText"><![CDATA[Adding a Picture Box to the Report Section Picture boxes are used to display graphical elements in the report. These graphics can be 			selected from the set of embedded images, retrieved from the external sources, or 			selected from the database.  To add a picture box to the report section and define it appropriately, proceed as 			follows:  Add the  PictureBox  visual element to the report section, and position it in 				the desired location. The  Adding and Removing Visual Elements in the Report Adding and Removing Visual Elements in the Report article 				describes how to add visual elements. Change the name of the picture box if necessary ( Name  				on the  Properties  tab). Define the picture box's properties on the  Properties  tab, as described in 				this article.  Defining the Appearance Properties of a Picture Box Use the following properties, found in the  Appearance  group on the  Properties  				tab, to define the appearance of the picture box.  Appearance Properties Property Description Style  The printing style for the picture box, set by the following values:  BackColor : The background color for the picture box. BackImage : The background image settings for the picture box. 								Enter desired values for:  Source : The source of the image. Image : The specific image to be used as the 										background:  For an embedded image, select the image name. For an external image, enter the path to the image 												file. For an image retrieved from the database, in the  Image  box, 												enter the name of the data field where the image is 												stored. For example, 												 =[Branch.LogoName]  to 												display background image that can be defined 												separately for each branch. Repeat : The appropriate value specifying the 										repeating pattern for the chosen image:  NoRepeat : Adds the specified image with no 												repeating RepeatX : Repeats the image horizontally to 												fill the width of the report section RepeatY : Repeats the image vertically to fill 												the height of the report section Repeat : Repeats the image horizontally and 												vertically to fill both the width and height of the 												report section BorderColor : The border color for the picture box. You can 								define the color for the bottom, left, right, and top border of the 								section, and set the default border color, which will be applied if 								no special settings are defined for the specific borders. BorderStyle : The border line style for the picture box. You 								can define the style for the bottom, left, right, and top border of 								the picture box, and set the default border style, which will be 								applied if no special settings are defined for the specific 								borders. BorderWidth : The border line width for the picture box (in 								pixels). You can define the width of the bottom, left, right, and 								top border of the picture box, and set the default border width, 								which will be applied if no special settings are defined for the 								specific borders. Font : The font settings of the picture box. You can select 								the font name and size and specify whether the following font 								attributes are applied: bold, italic, strikeout, and 								underline. Padding : The padding setting for the picture box, which you 								can specify in pixels for the left side, right side, top, and bottom 								of the report section. TextAlign : The text alignment for the picture box: 									 Left ,  Center ,  Right , or  Not 								Set . VerticalAlign : The content vertical alignment for the picture 								box:  Not Set ,  Top ,  Middle , or 								 Bottom . StyleName  The name of the style defined for the picture box. To assign a 								descriptive name to a style you have defined, enter the name. To 								apply an existing style, select its name. Defining the Behavior Properties of the Picture Box The following properties, found in the  Behavior  group on the  Properties  tab, let 				you define the data processing order, navigation settings, and visibility settings 				of the picture box.  Behavior Properties Property Description BarcodeSettings The barcode settings for the picture box. Enter desired values for the following:  AddCheckDigit : By setting this property to 											 True , you allow to print the check digit for the 										barcode. BarHeight : The barcode height. BarWidth : The barcode width. LeftMargin : The barcode left margin. TextMargin : The barcode text margin. TopMargin :The barcode top margin. With ratio : The value of a bar code ration. ProcessOrder  The processing order for the data associated with the picture 								box, which defines when the expression value is calculated:  To process the data while reading, select 										 WhileRead . To process the data while printing, select 										 WhilePrint . To process the data while reading and printing, select 											 Always . Visible  The picture box's visibility property ( False  or 									 True ). The invisible (hidden) visual elements are not 								printed in the report. VisibleExpr  The expression that calculates the picture box visibility 								property. This value overrides the  Visible  property value if 								it was set explicitly. Defining the Data Properties of the Picture Box These properties allow you to define the source and type of the data for the picture 				box and to select what image will be displayed.  Data Properties Property Description BarCode Type  The required barcode type, selected from the drop-down list with 								a restricted quantity of types.  MimeType  The type of media data for the picture box. Source  The type of data source of the image to be displayed in the 								picture box. Select one of the available values:  Embedded : An embedded image External : An external image Database : A data field Value  The actual source of data for the picture box:  To define the source of data for an embedded image, select 										the embedded image name. To define the source of data for an external image, enter 										the path to the external image file (with the file name 										included). To define the source of data for an image stored in the 										database, enter the data field name. Defining the Layout Properties of the Picture Box Use these properties to define the size and location of the picture box.  Layout Properties Property Description Location  The position of the picture box on the report page (in pixels). 								The  Location  values include the horizontal ( x ) and 								vertical ( y ) coordinates of the picture box on the 								page. Size  The size of the picture box (in pixels). The  Size  values 								include the width and height of the picture box. Sizing  The method of placing and fitting the selected image in the 								picture box. Select one of the available options:  AutoSize : Automatically selects the image size as the 										size of the picture to be placed in the picture box Center : Places the image in the center of the picture 										box Normal : Places the image in the left top corner of 										the picture box Fit : Stretches or shrinks the image to completely fit 										into the picture box size Scale : Scales the image to fit the picture box 										size ]]></column>
		</row>
		<row PageID="70902102-97a3-4c04-9c18-0154d73245aa" Language="en-US" PageRevisionID="1" Content="&#xA;To add a QR barcode, you should do the following:[anchor|#ul_gtt_qbg_zm]&#xA;#Add the ''PictureBox'' visual element to the report.&#xA;#Specify the following data properties for the ''PictureBox'' visual element (see the screenshot below):&#xA;#*'''Source''': ''Barcode''&#xA;#* '''BarcodeType''': ''QRCode''&#xA;#* '''Value''': a string value to display as a QR code[anchor|#image_kyq_mdg_zm][image:UserGuide/Images/Adding_QR_code.png|popup|Adding a QR barcode to the report|250px]&#xA;#Save the report.&#xA;((({S:Hint}To add a barcode of a different type, set the '''BarcodeType''' property to a different value. &#xA;)))&#xA;You can set the '''Value''' property to a static string or an expression calculated at runtime (for example, to a data field).{br}&#xA;&#xA;You can specify additional properties in the '''QRCodeSettings''' group of properties. Notice that the size of the QR barcode may change when you change the value, because a different pixel resolution may be required to display the value." PlainText="Adding a QR Barcode to the Report To add a QR barcode, you should do the following: Add the  PictureBox  visual element to the report. Specify the following data properties for the  PictureBox  visual element (see the           screenshot below): Source :  Barcode BarcodeType :  QRCode Value : a string value to display as a QR code Adding a QR barcode to the report Save the report. To add a barcode of a different type, set the  BarcodeType          property to a different value.  You can set the  Value  property to a static string or an expression         calculated at runtime (for example, to a data field). You can specify additional properties in the  QRCodeSettings  group of         properties. Notice that the size of the QR barcode may change when you change the value,         because a different pixel resolution may be required to display the value. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="8346302b-1220-ca78-ddc3-d15efa765e8c" RecordSourceID="22377" />
		<row PageID="0b7ca1ba-afc7-4442-8bd1-08f8c00bbd15" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="89c4c58c-e392-5dd3-8827-e9339f32b94b" RecordSourceID="22377">
			<column name="Content"><![CDATA[
Visual elements are placed on a ''panel'' to make a new group of elements located and processed together. {br}

To add a panel to a report section and define it appropriately, proceed as follows: 
#Add the ''Panel'' visual element, and position it in the desired location. The ''[HelpRoot_ReportingTools\Adding_and_Removing_Visual_Elements_in_the_Report|Adding and Removing Visual Elements in the Report]'' article describes how to add visual elements.
#Change the name of the panel if necessary ('''Name''' on the '''Properties''' tab).
#Define the panel&rsquo;s properties on the '''Properties''' tab, as described in the rest of this article.

==Defining the Appearance Properties of the Panel==
Use the following properties, found in the '''Appearance''' group on the '''Properties''' tab, to define the appearance of the panel. 
===Appearance Properties===
{| class="checklist" | width="100%" 
|- 
!width="14%" ! Property
!width="85%" ! Description
|- 
| rowspan="10" | '''Style'''
|  The printing style for the panel, set by the following values: 
|- 
| '''BackColor''': The background color for the panel.
|- 
| '''BackImage''': The background image settings for the panel. Enter desired values for the following: 
*'''Source''': The source of the image.
*'''Image''': The image to be used as the background: 
**For an embedded image, select the image name.
**For an external image, enter the path to the image file.
**For an image retrieved from the database, in the '''Image''' box, enter the name of the data field where the image is stored. For example, <tt>=&#91;Branch.LogoName&#93;</tt> to display background image that can be defined separately for each branch.
*'''Repeat''': The appropriate value specifying the repeating pattern for the chosen image: 
**''NoRepeat'': Adds the specified image with no repeating
**''RepeatX'': Repeats the image horizontally to fill the width of the report section
**''RepeatY'': Repeats the image vertically to fill the height of the report section
**''Repeat'': Repeats the image horizontally and vertically to fill both the width and height of the report section

|- 
| '''BorderColor''': The border color of the panel. You can define the color for the bottom, left, right, and top border, and set the default border color, which will be applied if no special settings are defined for the specific borders.
|- 
| '''BorderStyle''': The border line style for the panel. You can define the style for the bottom, left, right, and top border of the panel, and set the default border style, which will be applied if no special settings are defined for the specific borders.
|- 
| '''BorderWidth''': The border line width for the panel (in pixels). You can define the width of the bottom, left, right, and top border of the panel, and set the default border width, which will be applied if no special settings are defined for the specific borders.
|- 
| '''Font''': The font settings of the panel; definition of this setting does not change the panel. 
|- 
| '''Padding''': The padding setting for the panel, which you can specify in pixels for the left side, right side, top, and bottom of the panel.
|- 
| '''TextAlign''': The text alignment of the panel; definition of this setting does not affect the panel.
|- 
| '''VerticalAlign''': The text alignment of the panel; defining this setting does not affect the panel.
|- 
| '''StyleName'''
|  The name of the style defined for the panel. To assign a descriptive name to a style you have defined for a text, enter the name. To apply an existing style to the panel, select its name.
|}
==Defining the Behavior Properties of the Panel==
These properties, found under the '''Behavior''' group on the '''Properties''' tab, let you define the data processing order and visibility properties of the panel. 
===Behavior Properties===
{| class="checklist" | width="100%" 
|- 
!width="16%" ! Property
!width="84%" ! Description
|- 
| '''ProcessOrder'''
|  The processing order for the data associated with the panel, which defines when the expression value is calculated: 
*To process the data while reading, select ''WhileRead''.
*To process the data while printing, select ''WhilePrint''.
*To process the data while reading and printing, select ''Always''.

|- 
| '''Visible'''
|  The panel&rsquo;s visibility property (''False'' or ''True''). The invisible (hidden) visual elements are not printed in the report.
|- 
| '''VisibleExpr'''
|  The expression that calculates the panel&rsquo;s visibility property. This value overrides the '''Visible''' property value if it was set explicitly.
|}
==Defining the Layout Properties of the Panel==
Use these properties to define the panel&rsquo;s size and location properties. 
===Layout Properties===
{| class="checklist" | width="100%" 
|- 
!width="12%" ! Property
!width="87%" ! Description
|- 
| '''Location'''
|  The position of the panel on the report page (in pixels). The '''Location''' values include the horizontal (''x'') and vertical (''y'') coordinates of the panel on the page.
|- 
| '''Size'''
|  The size of the panel (in pixels). The '''Size''' values include the width and height of the panel.
|}]]></column>
			<column name="PlainText"><![CDATA[Adding a Panel to the Report Section Visual elements are placed on a  panel  to make a new group of elements located and processed together.  To add a panel to a report section and define it appropriately, proceed as follows:  Add the  Panel  visual element, and position it in the desired location. The  Adding and Removing Visual Elements in the Report Adding and Removing Visual Elements in the Report article describes how to add visual elements. Change the name of the panel if necessary ( Name  on the  Properties  tab). Define the panel's properties on the  Properties  tab, as described in the rest of this article. Defining the Appearance Properties of the Panel Use the following properties, found in the  Appearance  group on the  Properties  tab, to define the appearance of the panel.  Appearance Properties Property Description Style  The printing style for the panel, set by the following values:  BackColor : The background color for the panel. BackImage : The background image settings for the panel. Enter desired values for the following:  Source : The source of the image. Image : The image to be used as the background:  For an embedded image, select the image name. For an external image, enter the path to the image file. For an image retrieved from the database, in the  Image  box, enter the                                                 name of the data field where the image is stored.                                                 For example,                                                    =[Branch.LogoName]  to                                                 display background image that can be defined                                                 separately for each branch. Repeat : The appropriate value specifying the repeating pattern for the chosen image:  NoRepeat : Adds the specified image with no repeating RepeatX : Repeats the image horizontally to fill the width of the report section RepeatY : Repeats the image vertically to fill the height of the report section Repeat : Repeats the image horizontally and vertically to fill both the width and height of the report section BorderColor : The border color of the panel. You can define the color for the bottom, left, right, and top border, and set the default border color, which will be applied if no special settings are defined for the specific borders. BorderStyle : The border line style for the panel. You can define the style for the bottom, left, right, and top border of the panel, and set the default border style, which will be applied if no special settings are defined for the specific borders. BorderWidth : The border line width for the panel (in pixels). You can define the width of the bottom, left, right, and top border of the panel, and set the default border width, which will be applied if no special settings are defined for the specific borders. Font : The font settings of the panel; definition of this setting does not change the panel.  Padding : The padding setting for the panel, which you can specify in pixels for the left side, right side, top, and bottom of the panel. TextAlign : The text alignment of the panel; definition of this setting does not affect the panel. VerticalAlign : The text alignment of the panel; defining this setting does not affect the panel. StyleName  The name of the style defined for the panel. To assign a descriptive name to a style you have defined for a text, enter the name. To apply an existing style to the panel, select its name. Defining the Behavior Properties of the Panel These properties, found under the  Behavior  group on the  Properties  tab, let you define the data processing order and visibility properties of the panel.  Behavior Properties Property Description ProcessOrder  The processing order for the data associated with the panel, which defines when the expression value is calculated:  To process the data while reading, select  WhileRead . To process the data while printing, select  WhilePrint . To process the data while reading and printing, select  Always . Visible  The panel's visibility property ( False  or  True ). The invisible (hidden) visual elements are not printed in the report. VisibleExpr  The expression that calculates the panel's visibility property. This value overrides the  Visible  property value if it was set explicitly. Defining the Layout Properties of the Panel Use these properties to define the panel's size and location properties.  Layout Properties Property Description Location  The position of the panel on the report page (in pixels). The  Location  values include the horizontal ( x ) and vertical ( y ) coordinates of the panel on the page. Size  The size of the panel (in pixels). The  Size  values include the width and height of the panel. ]]></column>
		</row>
		<row PageID="ba80f40f-f668-4f2f-ae84-d8aaad0b9f05" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="b87524ce-4b40-9899-98f1-32183174dcee" RecordSourceID="22377">
			<column name="Content"><![CDATA[
Lines are used to divide the report space, direct the eye, or visually separate elements in the report. You can add lines to improve the look and readability of the report. {br}

To add a line to a report section, perform the following steps: 
#Add the ''Line'' visual element, and position it in the desired location. The ''[HelpRoot_ReportingTools\Adding_and_Removing_Visual_Elements_in_the_Report|Adding and Removing Visual Elements in the Report]'' article describes how to add visual elements.
#Change the name of the line if necessary: Enter it as the '''Name''' on the '''Properties''' tab.
#Define the line&rsquo;s properties, described in this article, on the '''Properties''' tab.

==Defining the Appearance Properties of the Line==
Use the following properties, found in the '''Appearance''' section on the '''Properties''' tab, to define the appearance of the line. 
===Appearance Properties===
{| class="checklist" | width="100%" 
|- 
!width="13%" ! Property
!width="86%" ! Description
|- 
| '''Direction'''
|  The direction of the line on the screen: ''Horizontal'', ''Vertical'', or ''Diagonal''.
|- 
| '''LineColor'''
|  The color of the line. 
|- 
| '''LineStyle'''
|  The style of the line: ''Solid'', ''Dashed'', or ''Dotted''.
|- 
| '''LineWidth'''
|  The width of the line (in pixels).
|- 
| rowspan="10" | '''Style'''
|  The printing style for the line, set by the following:
|- 
| '''BackColor''' The background color; this setting does not apply to the line.
|- 
| '''BackImage''' The background image; this setting does not affect the line.
|- 
| '''BorderColor''' The border color; this setting does not apply to the line.
|- 
| '''BorderStyle''' The border style; this setting does not affect the line.
|- 
| '''BorderWidth''' The border width; this setting does not apply to the line.
|- 
| '''Font''' The font; this setting does not affect the line.
|- 
| '''Padding''' The padding setting for the line, which you can specify in pixels for the left side, right side, top, and bottom of the line.
|- 
| '''TextAlign''' The text alignment; this setting does not apply to the line.
|- 
| '''VerticalAlign''' The vertical alignment; this setting does not apply to the line.
|- 
| '''StyleName'''
|  The name of the style defined for the line. To assign a descriptive name to a style you have defined for a line, enter the name. To apply an existing style to the line, select its name.
|}
==Defining the Behavior Properties of the Line==
The following properties, found in the '''Behavior''' section on the '''Properties''' tab, let you define the data processing order and visibility properties of the line. 
===Behavior Properties===
{| class="checklist" | width="100%" 
|- 
!width="22%" ! Property
!width="77%" ! Description
|- 
| '''ProcessOrder'''
|  The processing order for the data associated with the line, which defines when the expression value is calculated: 
*To process the data while reading, select ''WhileRead''.
*To process the data while printing, select ''WhilePrint''.
*To process the data while reading and printing, select ''Always''.

|- 
| '''Visible'''
|  The line&rsquo;s visibility property (''False'' or ''True''). The invisible (hidden) visual elements are not printed in the report.
|- 
| '''VisibleExpr'''
|  The expression that calculates the line&rsquo;s visibility property. This value overrides the '''Visible''' property value if it was set explicitly.
|}
==Defining the Layout Properties of the Line==
Use these properties to define the line&rsquo;s size and location. 
===Layout Properties===
{| class="checklist" | width="100%" 
|- 
!width="28%" ! Property
!width="71%" ! Description
|- 
| '''Location'''
|  The position of the line on the report page (in pixels). The '''Location''' parameter values include the horizontal (''x'') and vertical (''y'') coordinates of the line on the page.
|- 
| '''Size'''
|  The size of the line (in pixels). The '''Size''' parameter values include the width and height of the line.
|}]]></column>
			<column name="PlainText"><![CDATA[Adding a Line to the Report Section Lines are used to divide the report space, direct the eye, or visually separate elements in the report. You can add lines to improve the look and readability of the report.  To add a line to a report section, perform the following steps:  Add the  Line  visual element, and position it in the desired location. The  Adding and Removing Visual Elements in the Report Adding and Removing Visual Elements in the Report article describes how to add visual elements. Change the name of the line if necessary: Enter it as the  Name  on the  Properties  tab. Define the line's properties, described in this article, on the  Properties  tab. Defining the Appearance Properties of the Line Use the following properties, found in the  Appearance  section on the  Properties  tab, to define the appearance of the line.  Appearance Properties Property Description Direction  The direction of the line on the screen:  Horizontal ,  Vertical , or  Diagonal . LineColor  The color of the line.  LineStyle  The style of the line:  Solid ,  Dashed , or  Dotted . LineWidth  The width of the line (in pixels). Style  The printing style for the line, set by the following: BackColor  The background color; this setting does not apply to the line. BackImage  The background image; this setting does not affect the line. BorderColor  The border color; this setting does not apply to the line. BorderStyle  The border style; this setting does not affect the line. BorderWidth  The border width; this setting does not apply to the line. Font  The font; this setting does not affect the line. Padding  The padding setting for the line, which you can specify in pixels for the left side, right side, top, and bottom of the line. TextAlign  The text alignment; this setting does not apply to the line. VerticalAlign  The vertical alignment; this setting does not apply to the line. StyleName  The name of the style defined for the line. To assign a descriptive name to a style you have defined for a line, enter the name. To apply an existing style to the line, select its name. Defining the Behavior Properties of the Line The following properties, found in the  Behavior  section on the  Properties  tab, let you define the data processing order and visibility properties of the line.  Behavior Properties Property Description ProcessOrder  The processing order for the data associated with the line, which defines when the expression value is calculated:  To process the data while reading, select  WhileRead . To process the data while printing, select  WhilePrint . To process the data while reading and printing, select  Always . Visible  The line's visibility property ( False  or  True ). The invisible (hidden) visual elements are not printed in the report. VisibleExpr  The expression that calculates the line's visibility property. This value overrides the  Visible  property value if it was set explicitly. Defining the Layout Properties of the Line Use these properties to define the line's size and location.  Layout Properties Property Description Location  The position of the line on the report page (in pixels). The  Location  parameter values include the horizontal ( x ) and vertical ( y ) coordinates of the line on the page. Size  The size of the line (in pixels). The  Size  parameter values include the width and height of the line. ]]></column>
		</row>
		<row PageID="eee67b42-d857-44e3-a4ae-2b4df9f20939" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="91d909d0-59ce-e57f-6f2e-00d860065552" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The graphics in the report can be used as background images or illustrations to catch the user&rsquo;s attention or organize information. {br}

To add a graphic to an Acumatica ERP report, you can embed the image file into the report, select the image from an external file, or select a data field and load an image from it. External files are stored on external resources, such as websites or local hosts, accessible from the Acumatica ERP application site where the reports are published; the report stores only the link to the external file where the image file is located. Embedded images, conversely, are stored together with the report file, and are included in the report as its inner elements. 
==Embedding an Image in the Report==
To embed an image in the report, perform the following steps: 
#Select the whole report as an object for which the properties will be set by clicking the [image:UserGuide/Images/Adding_graphics_on_the_report_Using_FiltersReportSelectionIcon.PNG|10px] icon in the left top corner of the Acumatica Report                         Designer window.
#On the '''Properties''' tab, which displays the report properties, click the [image:UserGuide/Images/Adding_graphics_on_the_report_Using_Filtersselection_button.PNG|10px] button next to the '''EmbeddedImages''' collection. The '''Embedded Images''' dialog box appears, which you can use to add or remove the embedded images for the report. [image:UserGuide/Images/Adding_graphics_on_the_report_mbedding_a_new_image.png|popup|Embedding a new image|400px][image:UserGuide/Images/Adding_graphics_on_the_report_aving_the_embedded_images.png|popup|Saving the embedded images|400px]
#To add a new image, on the '''Embedded Images''' dialog, click the '''New Image''' button, or click the [image:UserGuide/Images/Adding_graphics_on_the_report_Using_Filtersselection_button.PNG|Saving the embedded images|10px] button in the empty line of the embedded images list. Select the image to be imported into the report, and add it to the report. To replace the existing image in the report with a new one, click the [image:UserGuide/Images/Adding_graphics_on_the_report_Using_Filtersselection_button.PNG|Saving the embedded images|10px] button next to the image to be replaced, and select a new image to be embedded into the report.
#To delete an embedded image from the report, click the image in the '''Image''' list, and click '''Delete'''.
#Click '''OK''' to save your changes.
]]></column>
			<column name="PlainText"><![CDATA[Adding Graphics to a Report The graphics in the report can be used as background images or illustrations to catch the             user's attention or organize information.  To add a graphic to an  Acumatica ERP report, you can embed the image file into the report, select the image from an             external file, or select a data field and load an image from it. External files are             stored on external resources, such as websites or local hosts, accessible from the  Acumatica ERP application site where the reports are published; the report stores only the link to             the external file where the image file is located. Embedded images, conversely, are             stored together with the report file, and are included in the report as its inner             elements.  Embedding an Image in the Report To embed an image in the report, perform the following steps:  Select the whole report as an object for which the properties will be set by                     clicking the   icon in the left top corner of the  Acumatica Report                         Designer window. On the  Properties  tab, which displays the report properties, click the                           button next to the  EmbeddedImages  collection. The  Embedded                         Images  dialog box appears, which you can use to add or remove the                     embedded images for the report.  Embedding a new image Saving the embedded images To add a new image, on the  Embedded Images  dialog, click the  New                         Image  button, or click the   button in the empty line of the embedded images list. Select the image to be                     imported into the report, and add it to the report. To replace the existing                     image in the report with a new one, click the   button next to the image to be replaced, and select a new image to be                     embedded into the report. To delete an embedded image from the report, click the image in the                          Image  list, and click  Delete . Click  OK  to save your changes. ]]></column>
		</row>
		<row PageID="da5f4cca-6435-4400-a814-8d74ae813986" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="a064fb39-25f8-0035-621a-d9a830d4de83" RecordSourceID="22377">
			<column name="Content"><![CDATA[
Subreports allow you to include data from other reports in the current report. You can add one report or multiple subreports to a single master report. 
==Adding a Subreport to the Master Report==
To include a subreport in the master report, you use the ''SubReport'' visual element. You can link the subreport to the master report and define the subreport&rsquo;s appearance, behavior, design, and layout properties. {br}

The name of the subreport to be included in the master report is defined by the '''ReportName''' property of the ''Subreport'' visual element. If the subreport uses parameters, you need to define them in the master report to pass the parameters&rsquo; values from the master report to the linked report you add to the master report. {br}

To add a subreport to the master report section and define it appropriately, perform the following steps: 
#Add the ''SubReport'' visual element to the report section, and position it within the report section. ([HelpRoot_ReportingTools\Adding_and_Removing_Visual_Elements_in_the_Report|Adding and Removing Visual Elements in the Report] describes how to add visual elements.) You can add a ''SubReport'' visual element to any report section.
#Change the name of the subreport if necessary ('''Name''' on the '''Properties''' tab).
#Define the subreport&rsquo;s properties on the '''Properties''' tab.

==Defining the Appearance Properties for the Subreport==
Use the following properties, found in the '''Appearance''' group on the '''Properties''' tab, to define the appearance of the subreport to be included in the master report. 
===Appearance Properties===
{| class="checklist" | width="100%" 
|- 
!width="14%" ! Property
!width="85%" ! Description
|- 
| rowspan="10" | '''Style'''
|  The printing style for the subreport, set by the following values:
|- 
| '''BackColor''': The background color for the subreport.
|- 
| '''BackImage''': The background image settings for the subreport. Enter desired values for the following: 
*'''Source '''- The source of the image.
*'''Image''': The image to be used as the background: 
**For an embedded image, select the image name.
**For an external image, enter the path to the image file.
**For an image retrieved from the database, in the '''Image''' box, enter the name of the data field where the image is stored. For example, <tt>=&#91;Branch.LogoName&#93;</tt> to display background image that can be defined separately for each branch.
*'''Repeat''': The repeating pattern for the chosen image: 
**''NoRepeat'': Adds the specified image with no repeating
**''RepeatX'': Repeats the image horizontally to fill the width of the report section
**''RepeatY'': Repeats the image vertically to fill the height of the report section
**''Repeat'': Repeats the image horizontally and vertically to fill both the width and height of the report section

|- 
| '''BorderColor''' The border color of the subreport. You can define the color for the bottom, left, right, and top border, and set the default border color, which will be applied if no special settings are defined for the specific borders.
|- 
| '''BorderStyle''': The border line style for the subreport. You can define the style for the bottom, left, right, and top border, and set the default border style, which will be applied if no special settings are defined for the specific borders.
|- 
| '''BorderWidth''': The border line width for the subreport (in pixels). You can define the width of the bottom, left, right, and top border of the subreport, and set the default border width, which will be applied if no special settings are defined for the specific borders.
|- 
| '''Font''': The font settings for the subreport. You can select the font name and size and specify whether the following font attributes are applied: bold, italic, strikeout, and underline.
|- 
| '''Padding''': The padding setting for the subreport, which you can specify in pixels for the left side, right side, top, and bottom of the subreport.
|- 
| '''TextAlign''': The text alignment for the subreport: ''Left'', ''Center'', ''Right'', or ''Not Set''.
|- 
| '''VerticalAlign''': The content vertical alignment for the subreport: ''Not Set'', ''Top'', ''Middle'', or ''Bottom''.
|- 
| '''StyleName'''
|  The name of the style defined for the subreport. To assign a descriptive name to a style you have defined for a subreport, enter the name. To apply an existing style to the subreport, select its name.
|}
==Defining the Behavior Properties of the Subreport==
The following properties, found in the '''Behavior''' group on the '''Properties''' tab, let you define the parameters to be passed from the master report to the subreport, specify the data processing order, set the link to subreport in the master report, and define the visibility properties for the subreport. 
===Behavior Properties===
{| class="checklist" | width="100%" 
|- 
!width="15%" ! Property
!width="84%" ! Description
|- 
| '''Parameters'''
|  The collection of parameters to be used in both master report and the subreport. To add a parameter to the collection, use the External Parameter Collection Editor; for details, see [HelpRoot_ReportingTools\Using_the_External_Parameter_Collection_Editor|Using the External Parameter Collection Editor]. ((({S:Hint}If any parameters are defined for the subreport, the number of parameters defined for the master report and subreport must be equal. The names of the parameters used in the master report and subreport should also be the same.
)))
|- 
| '''Process Order'''
|  The data processing method for the subreport. Choose one of the following options: 
*''WhileRead'': The subreport data is processed when the subreport is invoked from the master report.
*''WhilePrint'': The subreport data is processed when the master report is printed.
*''Always'': The subreport data is processed when the master report is active.

|- 
| '''ReportName'''
|  The subreport name. To select the subreport for inserting it into the master report, click the button in the box where the subreport name is displayed, and select the file of the report to be used as a subreport. ((({S:Hint}The subreport file and the master report file should be located in the same folder.
)))
|- 
| '''Visible'''
|  The subreport&rsquo;s visibility property (''False'' or ''True''). The invisible (hidden) visual elements are not printed in the report.
|- 
| '''VisibleExpr'''
|  The expression that calculates the text box visibility property. This value overrides the '''Visible''' property value if it was set explicitly.
|}
==Defining the Layout Properties of the Subreport ==
Use the following group of properties to define the position of the subreport on the report page. 
===Layout Properties===
{| class="checklist" | width="100%" 
|- 
!width="14%" ! Property
!width="85%" ! Description
|- 
| '''Location'''
|  The position of the subreport on the report page (in pixels). The '''Location''' parameter values include the horizontal (''x'') and vertical (''y'') coordinates of the subreport area on the master report page.
|- 
| '''Size'''
|  The size of the subreport area (in pixels). The '''Size''' parameter values include the width and height of the subreport.
|}]]></column>
			<column name="PlainText"><![CDATA[Adding a Subreport to the Report Subreports allow you to include data from other reports in the current report. You can add one report or multiple subreports to a single master report.  Adding a Subreport to the Master Report To include a subreport in the master report, you use the  SubReport  visual element. You can link the subreport to the master report and define the subreport's appearance, behavior, design, and layout properties.  The name of the subreport to be included in the master report is defined by the  ReportName                  property of the  Subreport  visual element. If the subreport uses parameters,                 you need to define them in the master report to pass the parameters' values from the                 master report to the linked report you add to the master report.  To add a subreport to the master report section and define it appropriately, perform the following steps:  Add the  SubReport  visual element to the report section, and position it within the report                                                   section. ( Adding and Removing Visual Elements                                                   in the Report Adding and Removing Visual Elements in the Report describes how to add visual                                                   elements.) You can add a  SubReport  visual                                                   element to any report section. Change the name of the subreport if necessary ( Name  on the  Properties  tab). Define the subreport's properties on the  Properties  tab. Defining the Appearance Properties for the Subreport Use the following properties, found in the  Appearance  group on the  Properties  tab, to define the appearance of the subreport to be included in the master report.  Appearance Properties Property Description Style  The printing style for the subreport, set by the following values: BackColor : The background color for the subreport. BackImage : The background image settings for the subreport. Enter desired values for the following:  Source  - The source of the image. Image : The image to be used as the background:  For an embedded image, select the image name. For an external image, enter the path to the image file. For an image retrieved from the database, in the  Image  box, enter the                                                   name of the data field where the image is stored.                                                   For example,                                                    =[Branch.LogoName]  to                                                   display background image that can be defined                                                   separately for each branch. Repeat : The repeating pattern for the chosen image:  NoRepeat : Adds the specified image with no repeating RepeatX : Repeats the image horizontally to fill the width of the report section RepeatY : Repeats the image vertically to fill the height of the report section Repeat : Repeats the image horizontally and vertically to fill both the width and height of the report section BorderColor  The border color of the subreport. You can define the color for the bottom, left, right, and top border, and set the default border color, which will be applied if no special settings are defined for the specific borders. BorderStyle : The border line style for the subreport. You can define the style for the bottom, left, right, and top border, and set the default border style, which will be applied if no special settings are defined for the specific borders. BorderWidth : The border line width for the subreport (in pixels). You can define the width of the bottom, left, right, and top border of the subreport, and set the default border width, which will be applied if no special settings are defined for the specific borders. Font : The font settings for the subreport. You can select the font name and size and specify whether the following font attributes are applied: bold, italic, strikeout, and underline. Padding : The padding setting for the subreport, which you can specify in pixels for the left side, right side, top, and bottom of the subreport. TextAlign : The text alignment for the subreport:  Left ,  Center ,  Right , or  Not Set . VerticalAlign : The content vertical alignment for the subreport:  Not Set ,  Top ,  Middle , or  Bottom . StyleName  The name of the style defined for the subreport. To assign a descriptive name to a style you have defined for a subreport, enter the name. To apply an existing style to the subreport, select its name. Defining the Behavior Properties of the Subreport The following properties, found in the  Behavior  group on the  Properties  tab, let you define the parameters to be passed from the master report to the subreport, specify the data processing order, set the link to subreport in the master report, and define the visibility properties for the subreport.  Behavior Properties Property Description Parameters  The collection of parameters to be used in both master report and the subreport. To add a parameter to the collection, use the External Parameter Collection Editor; for details, see  Using the External Parameter Collection Editor Using the External Parameter Collection Editor.  If any parameters are defined for the subreport, the number of parameters defined for the master report and subreport must be equal. The names of the parameters used in the master report and subreport should also be the same. Process Order  The data processing method for the subreport. Choose one of the following options:  WhileRead : The subreport data is processed when the subreport is invoked from the master report. WhilePrint : The subreport data is processed when the master report is printed. Always : The subreport data is processed when the master report is active. ReportName  The subreport name. To select the subreport for inserting it into the master report, click the button in the box where the subreport name is displayed, and select the file of the report to be used as a subreport.  The subreport file and the master report file should be located in the same folder. Visible  The subreport's visibility property ( False  or  True ). The invisible (hidden) visual elements are not printed in the report. VisibleExpr  The expression that calculates the text box visibility property. This value overrides the  Visible  property value if it was set explicitly. Defining the Layout Properties of the Subreport  Use the following group of properties to define the position of the subreport on the report page.  Layout Properties Property Description Location  The position of the subreport on the report page (in pixels). The  Location  parameter values include the horizontal ( x ) and vertical ( y ) coordinates of the subreport area on the master report page. Size  The size of the subreport area (in pixels). The  Size  parameter values include the width and height of the subreport. ]]></column>
		</row>
		<row PageID="666ae5be-83e4-4ceb-9e67-d55961b251b1" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="6270f751-069a-8ee8-f514-b4166e1fe480" RecordSourceID="22377">
			<column name="Content"><![CDATA[
Variables are used in reports to calculate values based on the expressions defined for them, store these values, and make them available in all sections of the report. 
==Adding a Variable to the Report Section==
To add a variable to the report section, perform the following steps: 
#Select the report section where you want to add the variable.
#Click within the '''Variables''' edit box on the '''Properties''' tab (shown left of the red 1 in the screenshot below), and the '''ReportVariable Collection Editor''' window appears. You can use this window to add variables to the report and define their properties.
#Click '''Add''' (item 2 in the screenshot). The new variable will be displayed in the '''Members''' list of the '''ReportVariable Collection Editor''' dialog.
#In the '''Name''' field in the '''Misc''' section of the '''ReportVariable Collection Editor''' window, enter the name of the variable (item 3).
#:((({S:Hint}If you do not need to localize the value of a variable, for example, if the value is a string, you should select ''False'' in the '''Localizable''' field of the variable. By default, '''Localizable''' is ''True''.
)))
#In the '''ProcessOrder''' field, select the process order for the variable, which defines how it is processed: Choose ''While Read'' to direct the system to process the values of the variables while reading, ''While Print'' to direct the system to process the values of the variables while printing, and ''Always'' to direct the system to process the values of the variables while reading and printing.
#In the '''ResetExpr''' field, define the reset expression for the variable, if it is required.
#In the '''ResetGroup''' field, select the group where the variable value, if it is required.
#:In the <tt>ResetGroup</tt> property, you can specify the id of the group, in which the variable should be calculated locally. If you have set this property, for each instance of the specified group the variable has an independent value. At the end of each group, the variable is reset. If you have two or more nested groups, you can calculate variables individually for each group by setting the <tt>ResetGroup</tt> property.
#:Use this property to calculate some values within a group. For instance, if you have the {{Vendor}} group inside the {{Account}} group and you want to calculate the account balance and each vendor balance within the account. For the {{VendorBalance}} variable, set <tt>ResetGroup</tt> to the {{Vendor}} group. For the {{AccountBalance}} variable set <tt>ResetGroup</tt> to the {{Account}} group. If the <tt>ResetGroup</tt> property is not set, the value will be accumulated from one vendor to another.
#In the '''ValueExpr''' field, define the expression used to set the variable value, if it is required. 
#:((({S:Hint}To delete a variable from the list of existing variables, invoke the '''ReportVariable Collection Editor''' dialog, click this variable in the '''Members''' list, and click the '''Remove''' button.
)))
#Click '''OK''' (item 4) to save the changes and close the window.
[image:UserGuide/Images/Using_Variables_dding_a_variable.png|popup|400px]
==References==
*[HelpRoot_ReportingTools\Using_Expressions|Using Expressions]
]]></column>
			<column name="PlainText"><![CDATA[Using Variables Variables are used in reports to calculate values based on the expressions defined for them, store these values, and make them available in all sections of the report.  Adding a Variable to the Report Section To add a variable to the report section, perform the following steps:  Select the report section where you want to add the variable. Click within the  Variables  edit box on the  Properties  tab (shown left of the red 1 in the screenshot below), and the  ReportVariable Collection Editor  window appears. You can use this window to add variables to the report and define their properties. Click  Add  (item 2 in the screenshot). The new variable will be displayed in the  Members  list of the  ReportVariable Collection Editor  dialog. In the  Name  field in the  Misc  section of the  ReportVariable Collection                         Editor  window, enter the name of the variable (item 3). If you do                         not need to localize the value of a variable, for example, if the value is a                         string, you should select  False  in the                              Localizable  field of the variable. By default,                              Localizable  is  True . In the  ProcessOrder  field, select the process order for the variable, which defines how it is processed: Choose  While Read  to direct the system to process the values of the variables while reading,  While Print  to direct the system to process the values of the variables while printing, and  Always  to direct the system to process the values of the variables while reading and printing. In the  ResetExpr  field, define the reset expression for the variable, if it is required. In the  ResetGroup  field, select the group where the variable value, if it is                         required. In the  ResetGroup  property, you can specify                         the id of the group, in which the variable should be calculated locally. If                         you have set this property, for each instance of the specified group the                         variable has an independent value. At the end of each group, the variable is                         reset. If you have two or more nested groups, you can calculate variables                         individually for each group by setting the  ResetGroup                          property. Use this property to calculate some values within a group.                         For instance, if you have the  Vendor  group inside the                              Account  group and you want to calculate the account                         balance and each vendor balance within the account. For the                              VendorBalance  variable, set                              ResetGroup  to the  Vendor  group. For                         the  AccountBalance  variable set                              ResetGroup  to the  Account  group. If                         the  ResetGroup  property is not set, the value will be                         accumulated from one vendor to another. In the  ValueExpr  field, define the expression used to set the variable value, if it is required.  To delete a variable from the list of existing variables, invoke the  ReportVariable Collection Editor  dialog, click this variable in the  Members  list, and click the  Remove  button. Click  OK  (item 4) to save the changes and close the window. References Using Expressions Using Expressions]]></column>
		</row>
		<row PageID="e33c8fe1-18e2-4c5c-bdfc-e8eff5a5821b" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="973e2dee-c637-fa88-7191-f9ed9eb8b45f" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The External Parameter Collection Editor lets you define the parameters for a text box or subreport visual object. {br}

For a text box, you can add navigation parameters by invoking the '''ExternalParameter Collection Editor''' dialog from the '''NavigateParams''' field on the '''Properties''' tab, and for a subreport, you can define the external parameters shared by the master report and the subreport from the '''Parameters''' field on the '''Properties''' tab. The existing parameters are listed in the '''Members''' list in the left area of the dialog. {br}

To add a new parameter or change the properties of the existing one, perform the following steps (a text box is used as an example): 
#Select the text box and click the [image:UserGuide/Images/Using_the_External_Parameter_Collection_Editor_Using_Filtersselection_button.PNG|10px] button for the '''NavigateParams (Collection)''' in the '''Properties''' tab (shown left of the red 1 in the screenshot below).
#Click the '''Add''' button in the bottom left of the dialog, or click the existing parameter&rsquo;s name in the '''Members''' list (item 2 in the screenshot below). [image:UserGuide/Images/Using_the_External_Parameter_Collection_Editor_xternalParameter.png|popup|The ExternalParameter Collection Editor window|320px]
#In the '''Name''' field in the parameter&rsquo;s properties table (located on the right side of the dialog), enter the parameter&rsquo;s name (item 3).
#In the '''Nullable''' field, set the nullability property for the parameter: ''True'' or ''False''. If the parameter&rsquo;s nullability property is set to ''True'', the parameter can accept null values.
#In the '''Type''' field, select the parameter&rsquo;s data type, which can be ''Boolean'', ''DateTime'', ''Float'' , ''Integer'', or ''String''.
#In the '''ValueExpr''' field, define the expression to be used to calculate the parameter&rsquo;s value. Use the '''Expression Editor''' dialog to define the expression.
#Click '''OK''' (item 4) to save the changes made to the external parameters, or click '''Cancel''' to discard the changes.
[anchor|#_b2b81a2a-b7a5-46eb-98fe-be6c3b8694ed]
==Example: Adding Link to Another Report==
For a text box, you can set up navigation parameters, so that clicking it will open another report.{br}

In this example, a link to Customer Profiles report (AR651000) will be added to a text box. {br}

To add a link perform the following steps:[anchor|#_8775e37e-994e-4287-b306-82c49a261045]
#Select a text box and in the '''NavigateMethod''' property, select ''Server''.
#In the '''NavigateReport''' property, select the ''AR651000.rpx'' file. To select a report from the server, you can just enter the name of the report file as the value of the NavigateReport property.
#:((({S:Hint}To find out the name of a report file, in Acumatica ERP, you can open the [HelpRoot_FormReference\SM_20_05_20|Site Map] ([~/?ScreenId=SM200520|SM200520]) form. In the table in the right pane, find the report. The Url column holds the URL to the report form, such as: ''~/Frames/ReportLauncher.aspx?ID=AR651000.rpx''. The report file name is at the end of this URL. In the '''NavigateParams''' property, you have to specify the appropriate external parameter to be transferred to the report selected in the '''NavigateReport''' property, which is the Customer Details report. The names and types of these external parameters have to match the names and types of the Customer Details report parameters. To find out the names and types of report parameters, you can open the report in Acumatica Report                         Designer, open the '''Schema Builder''' wizard, and review the '''Parameters''' tab.
)))
#Select the '''NavigateParams''' property and click the [image:UserGuide/Images/Using_the_External_Parameter_Collection_Editor_Using_Filtersselection_button.PNG|The ExternalParameter Collection Editor window|10px] button to open the '''ExternalParameter Collection Editor''' dialog box.
#In the dialog box, click '''Add''' to add a new external parameter, and specify the following settings:
#*'''Name''': ''CustomerID''
#* '''ValueExpr''': ''=&#91;Customer.AcctCD&#93;''
#Click '''OK''' to apply the settings you made and close the '''ExternalParameter Collection Editor''' dialog box.
#:((({S:Hint}You can define whether clicking a link causes the system to navigate to the page in the same window or to open a new one. You can specify one of the following settings in the '''Target''' property of the text boxes that hold the links:[anchor|#_1002103b-ddce-476c-9555-a438651a1e25]
*To navigate in the same window: ''main''
*To navigate in a new window: ''&#95;blank''
)))
#Save your changes to the report.

==References==
*[HelpRoot_ReportingTools\Using_the_Expression_Editor|Using the Expression Editor]
]]></column>
			<column name="PlainText"><![CDATA[Using the External Parameter Collection Editor The External Parameter Collection Editor lets you define the parameters for a text box or             subreport visual object.  For a text box, you can add navigation parameters by invoking the  ExternalParameter                 Collection Editor  dialog from the  NavigateParams  field on the                  Properties  tab, and for a subreport, you can define the external parameters             shared by the master report and the subreport from the  Parameters  field on the                  Properties  tab. The existing parameters are listed in the  Members  list             in the left area of the dialog.  To add a new parameter or change the properties of the existing one, perform the             following steps (a text box is used as an example):  Select the text box and click the   button for the  NavigateParams (Collection)  in the  Properties  tab                 (shown left of the red 1 in the screenshot below). Click the  Add  button in the bottom left of the dialog, or click the existing                 parameter's name in the  Members  list (item 2 in the screenshot below).  The ExternalParameter Collection Editor window In the  Name  field in the parameter's properties table (located on the right                 side of the dialog), enter the parameter's name (item 3). In the  Nullable  field, set the nullability property for the parameter:                      True  or  False . If the parameter's nullability property is set to                      True , the parameter can accept null values. In the  Type  field, select the parameter's data type, which can be                      Boolean ,  DateTime ,  Float  ,  Integer , or                  String . In the  ValueExpr  field, define the expression to be used to calculate the                 parameter's value. Use the  Expression Editor  dialog to define the                 expression. Click  OK  (item 4) to save the changes made to the external parameters, or                 click  Cancel  to discard the changes. Example: Adding Link to Another                 Report For a text box, you can set up navigation parameters, so that clicking it will open                 another report. In this example, a link to Customer Profiles report (AR651000) will be added to a                 text box.  To add a link perform the following steps: Select a text box and in the  NavigateMethod  property, select                              Server . In the  NavigateReport  property, select the  AR651000.rpx  file.                         To select a report from the server, you can just enter the name of the                         report file as the value of the NavigateReport property. To find out                             the name of a report file, in  Acumatica ERP, you can open the   ([~/?ScreenId=SM200520|SM200520]) Site Map (SM200520) form. In the table in the right pane,                             find the report. The Url column holds the URL to the report form, such                             as:  ~/Frames/ReportLauncher.aspx?ID=AR651000.rpx . The report file                             name is at the end of this URL. In the  NavigateParams  property,                             you have to specify the appropriate external parameter to be transferred                             to the report selected in the  NavigateReport  property, which is                             the Customer Details report. The names and types of these external                             parameters have to match the names and types of the Customer Details                             report parameters. To find out the names and types of report parameters,                             you can open the report in  Acumatica Report                         Designer, open the  Schema Builder  wizard, and review the                                  Parameters  tab. Select the  NavigateParams  property and click the   button to open the                              ExternalParameter Collection Editor  dialog box. In the dialog box, click  Add  to add a new external parameter, and                         specify the following settings: Name :  CustomerID ValueExpr :  =[Customer.AcctCD] Click  OK  to apply the settings you made and close the                              ExternalParameter Collection Editor  dialog box. You can                             define whether clicking a link causes the system to navigate to the page                             in the same window or to open a new one. You can specify one of the                             following settings in the  Target  property of the text boxes that                             hold the links: To navigate in the same window:  main To navigate in a new window:  _blank Save your changes to the report. References Using the Expression                         Editor Using the Expression Editor]]></column>
		</row>
		<row PageID="adb12145-bf0c-4b8e-9aca-b3a48b0c1636" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="248bdfca-9464-5514-b37f-86361143d781" RecordSourceID="22377">
			<column name="Content"><![CDATA[
A custom report you design can be saved on your system or network drive. To make the report available for other Acumatica ERP users, you need to publish the report on the Acumatica ERP server. 
==Saving a Report==
You can save custom reports locally or on the server. The decision about where to save the reports depends on various factors, including the stage of the report designing process, the Internet connection bandwidth, and the desired availability of the report to other users participating in the report development and review process. 
*'''Saving a Report Locally''': To save the designed report locally, use the ''Save'' or ''Save As'' command on the '''File''' menu, with a folder on a local system or network drive specified as the destination folder.
*'''Saving a Report on the Server''': To save the designed report on the server, select the ''Save on Server'' command on the '''File''' menu, and provide the following information in the '''Save Report on Server''' dialog box: 
*#'''Specify Web Site URL''':The connection string to the server where the designed report will be stored
*#'''Select report to load''': The locally stored custom report to be uploaded on the server
*#'''Login''': The login to connect to the server
*#'''Password''': The password to connect to the server

==Publishing a Report==
You must publish the designed custom report on the Acumatica ERP site to make it available to other Acumatica ERP application users. To publish a report on the site, use the [HelpRoot_FormReference\SM_20_05_20|Site Map] ([~/?ScreenId=SM200520|SM200520]) form. {br}

To publish a report, take the following steps: 
#Upload or copy the created report file to the appropriate folder on the Acumatica ERP website. By default, the <tt>Reports/</tt> folder, located in the root of the appropriate module on the Acumatica ERP website, is used.
#From Acumatica ERP, navigate to the Site Map form: '''System Management &gt; Site Management &gt; Site Map'''.
#Add a new node or expand the relevant module&rsquo;s hierarchical structure, and select '''Reports'''.
#Add a new record to the list of expanded node items for the new report. Specify the following information: 
#*'''Title''': The title of the custom report.
#*'''Icon''': The path to the icon for the custom report (optional).
#*'''URL''': The URL of the custom report on the site. Use the following format for the URL specification: 
#*:{{~/Frames/ReportLauncher.aspx?ID=ReportName.rpx}}
#Click '''Save''' to save your changes. The added report will become visible with the site map. 

For more information about the site management procedures, see [HelpRoot_Administration\SM__con_Site_Map_Management|Managing the Site Map].{br}

After the report is published, users who will generate the report must be granted access rights to this report. 
==References==
*[HelpRoot_FormReference\SM_20_05_20|Site Map] ([~/?ScreenId=SM200520|SM200520])
]]></column>
			<column name="PlainText"><![CDATA[Saving and Publishing the Reports A custom report you design can be saved on your system or network drive. To make the report available for other  Acumatica ERP users, you need to publish the report on the  Acumatica ERP server.  Saving a Report You can save custom reports locally or on the server. The decision about where to save the reports depends on various factors, including the stage of the report designing process, the Internet connection bandwidth, and the desired availability of the report to other users participating in the report development and review process.  Saving a Report Locally : To save the designed report locally, use the  Save  or  Save As  command on the  File  menu, with a folder on a local system or network drive specified as the destination folder. Saving a Report on the Server : To save the designed report on the server, select the  Save on Server  command on the  File  menu, and provide the following information in the  Save Report on Server  dialog box:  Specify Web Site URL :The connection string to the server where the designed report will be stored Select report to load : The locally stored custom report to be uploaded on the server Login : The login to connect to the server Password : The password to connect to the server Publishing a Report You must publish the designed custom report on the  Acumatica ERP site to make it available to other  Acumatica ERP application users. To publish a report on the site, use the   ([~/?ScreenId=SM200520|SM200520]) Site Map (SM200520) form.  To publish a report, take the following steps:  Upload or copy the created report file to the appropriate folder on the  Acumatica ERP website. By default, the  Reports/  folder, located in the root of the appropriate module on the  Acumatica ERP website, is used. From  Acumatica ERP, navigate to the Site Map form:  System Management > Site Management > Site Map . Add a new node or expand the relevant module's hierarchical structure, and select  Reports . Add a new record to the list of expanded node items for the new report. Specify the following information:  Title : The title of the custom report. Icon : The path to the icon for the custom report (optional). URL : The URL of the custom report on the site. Use the following format for the               URL specification:  ~/Frames/ReportLauncher.aspx?ID=ReportName.rpx Click  Save  to save your changes. The added report will become visible with the site map.  For more information about the site management procedures, see  Managing the Site Map. After the report is published, users who will generate the report must be granted access rights to this report.  References  ([~/?ScreenId=SM200520|SM200520]) Site Map (SM200520) ]]></column>
		</row>
		<row PageID="10c0a76d-0bb5-47dd-89b3-2e4c16c5c073" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="1f8681dd-e40b-e614-06c1-da6402962341" RecordSourceID="22377">
			<column name="Content"><![CDATA[
 Acumatica ERP provides built-in localization functionality. You can translate any report so that the user can execute this report and view the result in the language selected during the login to Acumatica ERP.{br}

The value of the '''Localizable''' property determines the multiple language support of a report. You can specify this property for the whole report, as well as for each element, such as a text box. The default value of this property is ''True''. This means that by default, multiple languages are supported for reports and report elements.{br}

To localize a report, you have to translate its source strings. Source strings include form names, element labels, parameters, predefined values of parameters, and constant strings of variables and formulas. On the [HelpRoot_FormReference\SM_20_05_40|Translation Dictionaries] ([~/?ScreenId=SM200540|SM200540]) form, you can collect, filter, and then translate any strings of the Acumatica ERP forms, including reports.{br}

To translate a report into a language, do the following:[anchor|#ol_rnw_kzx_gv]
#Collect the report strings to be translated.
#:When you localize the system for the first time, or after you update or publish the report, you should collect the strings to be translated. You can collect the report strings in one of the following ways:
#*On the toolbar of the [HelpRoot_FormReference\SM_20_05_40|Translation Dictionaries] ([~/?ScreenId=SM200540|SM200540]) form, click '''Collect Strings''' to collect all the strings used in the system including the report strings. This operation may take a significant amount of time.
#*On the [HelpRoot_FormReference\SM_21_15_00|Translation Sets] ([~/?ScreenId=SM211500|SM211500]) form, create a new translation set with the following settings, save the translation set, and on the form toolbar, click '''Collect''' to collect all the strings of the translation set.
#**'''Unbound Recourse To Collect''':
#***''Chart Name'': Selected
#***''Constant in Formula'': Selected
#***''Prompt'': Selected
#***''Text Box Value'': Selected
#***''Valid Value'': Selected
#*:In Acumatica ERP, reports are considered as unbound resources. You cannot select a particular report in the site map when you create a translation set. Instead, you can collect particular unbound resources used in reports. This operation may also take a significant but less amount of time than the collection of strings on the [HelpRoot_FormReference\SM_20_05_40|Translation Dictionaries] ([~/?ScreenId=SM200540|SM200540]) form.
#:When you collect strings, you can translate the collected strings on the [HelpRoot_FormReference\SM_20_05_40|Translation Dictionaries] ([~/?ScreenId=SM200540|SM200540]) form. On this form, you can translate only the strings that have been already collected on any of the [HelpRoot_FormReference\SM_20_05_40|Translation Dictionaries] ([~/?ScreenId=SM200540|SM200540]) or [HelpRoot_FormReference\SM_21_15_00|Translation Sets] ([~/?ScreenId=SM211500|SM211500]) form.
#On the [HelpRoot_FormReference\SM_20_05_40|Translation Dictionaries] ([~/?ScreenId=SM200540|SM200540]) form, in the '''Language''' box, select the language you are going to translate the report into.
#:((({S:Hint}You can select two or more languages if you want to translate the report into multiple languages simultaneously.
)))
#Select the '''Show Only Unbound''' check box. Based on this selection, all unbound strings, including report strings, will be shown on the '''Collected''' tab.
#In the '''Default Values''' area of the '''Collected''' tab, filter the list of unbound strings to find the particular string of your report.
#In the column with the language name as its header, type your translation.
#Save your translation.
#Repeat Steps 4 to 6 to find and translate all the needed report strings.

After you have translated the report into the language, users that selected the language during the login to Acumatica ERP will see the translated strings of this report in this language.{br}

You can also configure a report to show its strings in the particular language, regardless of the user&rsquo;s choice of the language, by using the '''Locale''' property of this report.{br}

Suppose that an American user creates invoices for both American customers and Russian customers, and you need to print the invoice in the customer&rsquo;s language. You can specify the following value for the '''Locale''' property of the Invoice/Memo (AR641000) report: <tt>=IIf(&#91;BillingAddress.CountryID&#93;=&rsquo;RU&rsquo;, &rsquo;ru-RU&rsquo;, &rsquo;en-US&rsquo;)</tt>. You also have to translate the report strings into Russian (the ''ru-RU'' locale). Based on the expression specified for the '''Locale''', the translated report strings will be automatically printed in Russian for the ''RU'' country where the invoice should be sent.
==Related Articles==
*[HelpRoot_FormReference\SM_20_05_40|Translation Dictionaries] ([~/?ScreenId=SM200540|SM200540])
*[HelpRoot_Administration\SM__con_Translation_Process|Translation Process]
*[HelpRoot_Administration\SM__mng_Locales|Managing Locales and Languages]]]></column>
			<column name="PlainText"><![CDATA[Translating Reports  Acumatica ERP provides built-in localization functionality. You can translate any report so that the user    can execute this report and view the result in the language selected during the login to  Acumatica ERP. The value of the  Localizable  property determines the multiple language    support of a report. You can specify this property for the whole report, as well as for each    element, such as a text box. The default value of this property is  True . This means that    by default, multiple languages are supported for reports and report elements. To localize a report, you have to translate its source strings. Source strings include form    names, element labels, parameters, predefined values of parameters, and constant strings of    variables and formulas. On the   ([~/?ScreenId=SM200540|SM200540]) Translation Dictionaries (SM200540) form,    you can collect, filter, and then translate any strings of the  Acumatica ERP    forms, including reports. To translate a report into a language, do the following: Collect the report strings to be translated. When you localize the system for the first      time, or after you update or publish the report, you should collect the strings to be      translated. You can collect the report strings in one of the following ways: On the toolbar of the   ([~/?ScreenId=SM200540|SM200540]) Translation Dictionaries (SM200540) form, click         Collect Strings  to collect all the strings used in the system       including the report strings. This operation may take a significant amount of time. On the   ([~/?ScreenId=SM211500|SM211500]) Translation Sets (SM211500) form, create a new       translation set with the following settings, save the translation set, and on the form       toolbar, click  Collect  to collect all the strings of the translation        set. Unbound Recourse To Collect : Chart Name : Selected Constant in Formula : Selected Prompt : Selected Text Box Value : Selected Valid Value : Selected In  Acumatica ERP, reports are considered as unbound resources. You cannot select a particular report in the        site map when you create a translation set. Instead, you can collect particular unbound        resources used in reports. This operation may also take a significant but less amount of time        than the collection of strings on the   ([~/?ScreenId=SM200540|SM200540]) Translation Dictionaries (SM200540)        form. When you collect strings, you can translate the collected strings on the   ([~/?ScreenId=SM200540|SM200540]) Translation Dictionaries (SM200540) form. On this form, you can translate only      the strings that have been already collected on any of the   ([~/?ScreenId=SM200540|SM200540]) Translation Dictionaries (SM200540) or   ([~/?ScreenId=SM211500|SM211500]) Translation Sets (SM211500) form. On the   ([~/?ScreenId=SM200540|SM200540]) Translation Dictionaries (SM200540) form, in the       Language  box, select the language you are going to translate the report      into. You can select two or more languages if you want to translate the report into      multiple languages simultaneously. Select the  Show Only Unbound  check box. Based on this selection, all     unbound strings, including report strings, will be shown on the  Collected      tab. In the  Default Values  area of the  Collected      tab, filter the list of unbound strings to find the particular string of your report. In the column with the language name as its header, type your translation. Save your translation. Repeat Steps 4 to 6 to find and translate all the needed report strings. After you have translated the report into the language, users that selected the language during    the login to  Acumatica ERP    will see the translated strings of this report in this language. You can also configure a report to show its strings in the particular language, regardless of    the user's choice of the language, by using the  Locale  property of this    report. Suppose that an American user creates invoices for both American customers and Russian    customers, and you need to print the invoice in the customer's language. You can specify the    following value for the  Locale  property of the Invoice/Memo (AR641000)    report:  =IIf([BillingAddress.CountryID]='RU', 'ru-RU', 'en-US') . You also    have to translate the report strings into Russian (the  ru-RU  locale). Based on the    expression specified for the  Locale , the translated report strings will be    automatically printed in Russian for the  RU  country where the invoice should be sent.  ([~/?ScreenId=SM200540|SM200540]) ]]></column>
		</row>
		<row PageID="4e99e9b0-7de4-4bdc-bd3b-88bd18622dca" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="53996a75-bebb-fa5a-cc6c-08a983eb7693" RecordSourceID="22377">
			<column name="Content"><![CDATA[
Any report of Acumatica ERP or an Acumatica Framework-based application contains a database schema. The database schema of a report can be changed without the report being updated in some cases, such as the following:[anchor|#ul_jyg_1th_3s]
*You have installed a new version of Acumatica ERP or Acumatica Framework.
* Acumatica ERP has been customized—for example, with the addition of a custom bound field.
{br}

To make new fields and database columns available in a report, you need to update the database schema in the report. You can update each report manually, or you can use the ''ReportUpdater.exe'' command-line tool to update the database schema for multiple reports at once.
==To Update the Database Schema for a Report==
In the Schema Builder of Acumatica Report                         Designer, update the database schema of a currently opened report by clicking one of the following buttons (see the screenshot below):[anchor|#ul_okk_b5h_3s]
*'''Refresh''': To update the table you have selected (by clicking it in the list of tables) in the database schema for the report
*'''Refresh All''': To update all the tables used in the database schema for the report
[anchor|#fig_tdb_3wh_3s][anchor|#image_ccm_rwh_3s][image:UserGuide/Images/SF_ReportUpdater_1.png|popup|The buttons to refresh the report schema|410px]
==To Update the Database Schema for Multiple Reports==
To update the database schema for multiple reports at once, launch the report updater in the command prompt, by typing the following.{br}

{{{{&gt;ReportUpdater src=&lt;srcFolder&gt; dest=&lt;dstFolder&gt; url=&lt;url&gt; 
   log=&lt;logName&gt; login=&lt;login&gt; password=&lt;password&gt;
}}}}{br}

((({S:Hint}The ''ReportUpdater.exe'' tool, the command line utility included in Acumatica Report                         Designer, is located in the same folder as the Report Designer.
When you launch the Report Updater, it performs the following actions:[anchor|#ol_s1y_wml_js]
#On the specified site, loads the database schema
#For each report from the specified source folder:
##Reads the report
##Refreshes all the tables used in the report, based on the database schema
##Writes the updated report file to the specified destination folder
##Outputs the result of the report update to either the system console or the specified log file
))){br}

The parameters of the report updater are described in the table below.[anchor|#table_jjy_lp3_3s]
{| class="checklist" | width="100%" 
|- 
!width="20%" ! Parameter
!width="80%" ! Description
|- 
| <tt>src</tt>
| The absolute path to the folder from which the utility loads the source reports.
|- 
| <tt>dest</tt>
| The absolute path to the destination folder to which the utility saves the updated reports.
|- 
| <tt>url</tt>
| The URL of the site used to load the database schema.
|- 
| <tt>log</tt>
| The log file name (optional). If you specify a name, the entire log is output to the file. Otherwise, the system outputs the log information to the console window.
|- 
| <tt>login</tt>
| The login for the site used to load the database schema.
|- 
| <tt>password</tt>
| The password for the site used to load the database schema.
|}((({S:Hint}[anchor|#ol_csh_lvk_ls]
#If a parameter contains spaces, use quotation marks around the parameter.
#If you need to override existing reports, use the same path for the source and destination folders.
#To get the ''ReportUpdater.exe'' help information, launch the utility in the Command Prompt without parameters, as the screenshot below shows.[anchor|#image_bg5_2p3_3s][image:UserGuide/Images/SF_ReportUpdater_2.png|popup|The Report Updater help information|420px]
))){br}

The following example shows the use of the ''ReportUpdater.exe'' utility for the <tt>Test</tt> application (see the screenshot below).{{{{&gt;ReportUpdater.exe src=c:\aaa dest="c:\bbb dest" url=http://localhost/Test login=admin password=123
}}}}[anchor|#fig_ivk_y1k_js][anchor|#image_tx2_2bk_js][image:UserGuide/Images/SF_ReportUpdater_3.png|popup|An example of the ReportUpdater.exe utility in use|420px]{br}

In the example, the command line does not contain the <tt>log</tt> parameter; therefore, the '' ReportUpdater.exe'' utility outputs the log information to the Command Prompt window.]]></column>
			<column name="PlainText"><![CDATA[Updating the Database Schema for Reports Any report of  Acumatica ERP or an  Acumatica Framework-based application contains a database schema. The database schema of a report can be         changed without the report being updated in some cases, such as the following: You have installed a new version of  Acumatica ERP or  Acumatica Framework.  Acumatica ERP has been customized—for example, with the addition of a custom bound             field. To make new fields and database columns available in a report, you need to update the         database schema in the report. You can update each report manually, or you can use the            ReportUpdater.exe  command-line tool to update the database schema for multiple         reports at once. To Update the Database Schema for a Report In the Schema Builder of  Acumatica Report                         Designer, update the database schema of a currently opened report by clicking one of the following         buttons (see the screenshot below): Refresh : To update the table you have selected (by clicking it             in the list of tables) in the database schema for the report Refresh All : To update all the tables used in the database             schema for the report The buttons to refresh the report schema To Update the Database Schema for Multiple Reports To update the database schema for multiple reports at once, launch the report updater in         the command prompt, by typing the following. >ReportUpdater src=<srcFolder> dest=<dstFolder> url=<url> 
   log=<logName> login=<login> password=<password> The  ReportUpdater.exe  tool, the command line utility included in  Acumatica Report                         Designer, is located in the same folder as the Report Designer. When you launch the Report             Updater, it performs the following actions: On the specified site, loads the database schema For each report from the specified source folder: Reads the report Refreshes all the tables used in the report, based on the database schema Writes the updated report file to the specified destination folder Outputs the result of the report update to either the system console or the                     specified log file The parameters of the report updater are described in the table below. Parameter Description src The absolute path to the folder from which the utility loads the source                   reports. dest The absolute path to the destination folder to which the utility saves the                   updated reports. url The URL of the site used to load the database schema. log The log file name (optional). If you specify a name, the entire log is output                   to the file. Otherwise, the system outputs the log information to the console                   window. login The login for the site used to load the database schema. password The password for the site used to load the database schema. If a parameter contains spaces, use quotation marks around the parameter. If you need to override existing reports, use the same path for the source and               destination folders. To get the  ReportUpdater.exe  help information, launch the utility in the               Command Prompt without parameters, as the screenshot below shows. The Report Updater help information The following example shows the use of the  ReportUpdater.exe  utility for the            Test  application (see the screenshot           below). >ReportUpdater.exe src=c:\aaa dest="c:\bbb dest" url=http://localhost/Test login=admin password=123 An example of the ReportUpdater.exe utility in use In the example, the command line does not contain the  log  parameter;         therefore, the   ReportUpdater.exe  utility outputs the log information to the Command         Prompt window. ]]></column>
		</row>
		<row PageID="913256d7-7e7d-45b3-995b-e413055fb954" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="694d69cb-99b1-804b-5560-221caacd4d27" RecordSourceID="22377">
			<column name="Content"><![CDATA[
This document describes some recommendations and best practices of report design for the Acumatica ERP application. These recommendations focus on the creation of visually consistent and easy-to-comprehend reports. You can also refer to an [HelpRoot_ReportingTools\ReportGuidelines_Example|example] of a simple report that illustrates the best practices described here.[anchor|#header_layout]
==Header Layout==
A report can include two types of headers: The ''report header'' appears on the first page of the report, and the ''page header'' appears on the pages of the report. By default, the page header appears on all pages of the report, but you can configure it to appear on pages starting from the second one. You should always insert both the report header and the page header into your report. If either of them is absent, you can right-click the report area outside of any section and select '''Report Header''' or '''Page Header'''.{br}

The report header and the page header should each consist of two sections. To split any section into two sections, right-click the section and select '''Duplicate section'''.{br}

To make the page header appear on pages starting from the second one (rather than on all pages), you should set the '''PrintOnFirstPage''' property to ''False'' on all sections that represent the page header and footer.{br}

The first section of the report header should have the following layout:[anchor|#ul_srz_vdt_rl]
*On the left side of the report header, you should place the name of the report and the following mandatory fields below it, with each field represented by two text boxes:
**''Company''
** ''Ledger'' (if it is included in your report parameters)
**''Branch'' (if it is included in your report parameters)
*On the right side of the report header, you should place the following mandatory fields, with each field represented by two text boxes:
**''User''
** ''Date''
** ''Page''
*If additional fields from the report parameters should be printed on the report header, put the fields in the middle part of the header in one column or two columns.

For information about how to set the values of the mandatory fields, see the [[#param_values|Parameter Values] section of this topic.{br}

The figure below shows an example of the layout of a report header.[image:UserGuide/Images/ReportGuidelines_1.png|popup|Example of a report header|450px]
The first section of the page header should have the following layout:[anchor|#ul_lsn_12t_rl]
*On the left side of the report, you should put the name of the report.
*On the right side of the report, you should put the ''Page'' field.
*No report parameters are displayed on the page header.

The second section of both the report header and page header should contain text boxes with labels for columns.{br}

The following screenshot shows the view of the report header in the Acumatica Report                         Designer.[anchor|#image_n2l_zh1_sl][image:UserGuide/Images/ReportGuidelines_2.png|popup|Example of the report header in the Report Designer|450px]
==General Layout Properties==
The table below shows the recommended properties for the layout of the whole report and all controls the report includes.[anchor|#table_nfq_2sj_tl]
{| class="checklist" | width="100%" 
|- 
!width="58%" ! Description
!width="41%" ! Value
|- 
| '''StylesTemplate''' property of the report
| TemplateReport.rpx<sup>1</sup>
|- 
| '''NavigationTree''' property of the report
| False
|- 
| '''LayoutUnit''' property of the report
| Pixel
|- 
| '''Width''' property of the report
| 1026px
|- 
| Margin from the left border of the report
| 4px
|- 
| Margin from the right border of the report
| 4px
|- 
| Vertical margin between two text boxes
| 4px
|- 
| Horizontal margin between the text box with the label and the text box with the value
| 0px
|- 
| Height of the text box with the report name
| 16px
|- 
| Height of the other text boxes
| 14px
|}
<sup>1</sup>The template file should reside in the same directory as the report.
==Recommended Predefined Styles==
For any visual element of the report, you can set one of the predefined styles. You should assign specific predefined styles to the elements listed in the following table. To use the predefined styles, you should specify the template for the report by setting the '''StylesTemplate''' property to ''TemplateReport.rpx''. This file is located in the same folder that contains the default reports provided with Acumatica ERP. To display report properties in the '''Properties''' view, click the little square in the upper left corner of the designer area.[anchor|#table_rnn_bg1_sl]
{| class="checklist" | width="100%" 
|- 
!width="50%" ! Element
!width="50%" ! Style name
|- 
| Text box with the report name
| Report Name
|- 
| Text boxes for both labels and values of report parameters in the header 
| Report Params
|- 
| The report or page header section with column names
| ColumnsHeaderSection
|- 
| The group header sections with information on the grouping item
| GroupHighlight
|- 
| The group header section with column names for the display of detail records
| GroupL1Highlight
|- 
| Text boxes for column names
| Heading 1
|- 
| Text boxes for total amounts of a group
| Heading 1
|- 
| Text boxes for displaying regular data
| Normal
|}
==Abbreviations for Column Names==
The following table shows the recommended abbreviations for column names.[anchor|#table_xwx_52s_rl]
{| class="checklist" | width="100%" 
|- 
!width="50%" ! Full column name
!width="50%" ! Short column name
|- 
| Beginning Balance
| Beg. Balance
|- 
| Ending Balance
| End. Balance
|- 
| Financial Period
| Fin. Period
|- 
| Subaccount
| Sub.
|- 
| Reference Number
| Ref. Nbr.
|- 
| Batch Number
| Batch Nbr.
|- 
| Document
| Doc.
|- 
| Currency
| Cur.
|- 
| Original
| Orig.
|- 
| Transaction
| Tran.
|}
==Currency Column Before an Amount Column==
In any details view, any column representing an amount should be preceded with the currency column. If a column representing an amount immediately follows another such column and the two columns have the same currency (such as debit amount and credit amount in journal transactions), you should insert only one currency column—before the first of these two columns.
==Parameter Names==
When any of the following fields is used as a report parameter to specify a range of values, the name should start with ''From'' or ''To''.((({S:Hint}The name of a report parameter is set on the '''Parameters''' tab of '''Schema Builder''' in the '''Prompt''' field. If you don&rsquo;t specify the name in the '''Prompt''' field, the parameter won&rsquo;t be shown on the report webpage.
)))[anchor|#table_glp_n3s_rl]
{| class="checklist" | width="100%" 
|- 
!width="33%" ! Field
!width="33%" ! Display name of the parameter
!width="33%" ! Display name of the parameter
|- 
| Period
| From Period
| To Period
|- 
| Date
| From Date
| To Date
|- 
| Account
| From Account
| To Account
|- 
| Subaccount
| From Subaccount
| To Subaccount
|}
When the name of a field ends with ''ID'', the name of the corresponding parameters should not include ''ID''. The fields to which this rule is applied are listed in the table below.[anchor|#table_wgg_33s_rl]
{| class="checklist" | width="100%" 
|- 
!width="50%" ! Field
!width="50%" ! Display name of the parameter
|- 
| Vendor ID
| Vendor
|- 
| Customer ID
| Customer
|- 
| Branch ID
| Branch
|- 
| Tax Agency ID
| Tax Agency
|- 
| Account ID
| Account
|}[anchor|#param_values]
==Parameter Values==
The table below describes the recommended way to display the values of the mandatory fields displayed in the header.[anchor|#table_fvn_15j_tl]
{| class="checklist" | width="100%" 
|- 
!width="40%" ! First text box—Value
!width="60%" ! Second text box—Value
|- 
| Company:
| =Report.GetDefUI(&rsquo;RowCompanyBAccount.AcctName&rsquo;)
|- 
| Ledger:
| =&#91;@LedgerID&#93;<sup>1</sup>
|- 
| Branch:
| =&#91;@BranchID&#93;<sup>1</sup>
|- 
| User:
| =Report.GetDefUI(&rsquo;RowAccessInfo.DisplayName&rsquo;)
|- 
| Date:
| =Today()
|- 
| Page:
| =PageOf()
|}
<sup>1</sup>Insert the actual name of the parameter that you specified in the '''Schema Builder'''.]]></column>
			<column name="PlainText"><![CDATA[Recommendations This document describes some recommendations and best practices of report design for the            Acumatica ERP application. These recommendations focus on the creation of visually consistent and         easy-to-comprehend reports. You can also refer to an  example example of a simple report that illustrates         the best practices described here. Header Layout A report can include two types of headers: The  report header  appears on the first         page of the report, and the  page header  appears on the pages of the report. By         default, the page header appears on all pages of the report, but you can configure it to         appear on pages starting from the second one. You should always insert both the report         header and the page header into your report. If either of them is absent, you can         right-click the report area outside of any section and select  Report           Header  or  Page Header . The report header and the page header should each consist of two sections. To split any         section into two sections, right-click the section and select  Duplicate           section . To make the page header appear on pages starting from the second one (rather than on all         pages), you should set the  PrintOnFirstPage  property to  False          on all sections that represent the page header and footer. The first section of the report header should have the following layout: On the left side of the report header, you should place the name of the report and the           following mandatory fields below it, with each field represented by two text boxes: Company Ledger  (if it is included in your report parameters) Branch  (if it is included in your report parameters) On the right side of the report header, you should place the following mandatory fields,           with each field represented by two text boxes: User Date Page If additional fields from the report parameters should be printed on the report header,           put the fields in the middle part of the header in one column or two columns. For information about how to set the values of the mandatory fields, see the  Parameter           Values Parameter Values section of this topic. The figure below shows an example of the layout of a report header. Example of a report header The first section of the page header should have the following layout: On the left side of the report, you should put the name of the report. On the right side of the report, you should put the  Page  field. No report parameters are displayed on the page header. The second section of both the report header and page header should contain text boxes with         labels for columns. The following screenshot shows the view of the report header in the  Acumatica Report                         Designer. Example of the report header in the Report Designer General Layout Properties The table below shows the recommended properties for the layout of the whole report and all         controls the report includes. Description Value StylesTemplate  property of the report TemplateReport.rpx 1 NavigationTree  property of the report False LayoutUnit  property of the report Pixel Width  property of the report 1026px Margin from the left border of the report 4px Margin from the right border of the report 4px Vertical margin between two text boxes 4px Horizontal margin between the text box with the label and the text box with the                 value 0px Height of the text box with the report name 16px Height of the other text boxes 14px 1 The template file should reside in the same directory as the report. Recommended Predefined Styles For any visual element of the report, you can set one of the predefined styles. You should         assign specific predefined styles to the elements listed in the following table. To use the         predefined styles, you should specify the template for the report by setting the            StylesTemplate  property to  TemplateReport.rpx . This file is         located in the same folder that contains the default reports provided with  Acumatica ERP. To display report properties in the  Properties  view, click the         little square in the upper left corner of the designer area. Element Style name Text box with the report name Report Name Text boxes for both labels and values of report parameters in the header  Report Params The report or page header section with column names ColumnsHeaderSection The group header sections with information on the grouping item GroupHighlight The group header section with column names for the display of detail                 records GroupL1Highlight Text boxes for column names Heading 1 Text boxes for total amounts of a group Heading 1 Text boxes for displaying regular data Normal Abbreviations for Column Names The following table shows the recommended abbreviations for column names. Full column name Short column name Beginning Balance Beg. Balance Ending Balance End. Balance Financial Period Fin. Period Subaccount Sub. Reference Number Ref. Nbr. Batch Number Batch Nbr. Document Doc. Currency Cur. Original Orig. Transaction Tran. Currency Column Before an Amount Column In any details view, any column representing an amount should be preceded with the currency         column. If a column representing an amount immediately follows another such column and the         two columns have the same currency (such as debit amount and credit amount in journal         transactions), you should insert only one currency column—before the first of these         two columns. Parameter Names When any of the following fields is used as a report parameter to specify a range of         values, the name should start with  From  or  To . The name of a report parameter is set on the  Parameters  tab of            Schema Builder  in the  Prompt  field. If you         don't specify the name in the  Prompt  field, the parameter won't be         shown on the report webpage. Field Display name of the parameter Display name of the parameter Period From Period To Period Date From Date To Date Account From Account To Account Subaccount From Subaccount To Subaccount When the name of a field ends with  ID , the name of the corresponding parameters         should not include  ID . The fields to which this rule is applied are listed in the         table below. Field Display name of the parameter Vendor ID Vendor Customer ID Customer Branch ID Branch Tax Agency ID Tax Agency Account ID Account Parameter Values The table below describes the recommended way to display the values of the mandatory fields         displayed in the header. First text box—Value Second text box—Value Company: =Report.GetDefUI('RowCompanyBAccount.AcctName') Ledger: =[@LedgerID] 1 Branch: =[@BranchID] 1 User: =Report.GetDefUI('RowAccessInfo.DisplayName') Date: =Today() Page: =PageOf() 1 Insert the actual name of the parameter that you specified in the            Schema Builder . ]]></column>
		</row>
		<row PageID="1ebc9a69-e048-4f6e-aa68-a3fc88605df0" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="bfda626c-b3b2-46d3-8882-da08c41bc1dc" RecordSourceID="22377">
			<column name="Content"><![CDATA[
This example illustrates best practices in report design for the Acumatica ERP application. To implement the sample report, you need to have the Acumatica Report                         Designer and an instance of the Acumatica ERP application installed.{br}

The report will display data records of a scheduled batch with their details—journal transactions. By ''scheduled batch'', we mean a batch that is processed according to the related schedule. The report will select batches by the '''Scheduled''' field, which equals ''true'' when a schedule is associated with the batch. By using the parameters of the report, you can filter batches by a ledger, branch, or batch number (to display details of a specific batch).
==Building the Data Schema for the Report==
#In the '''Schema Builder''' window, load the schema of the website by specifying the URL of the application and valid credentials, and add the Batch table and GLTran (PX.Objects.GL.GLTran) table to the report (see the screenshot below). [anchor|#image_kcr_hsc_tl][image:UserGuide/Images/ReportGuidelines_3.png|popup|Loading schema and selecting tables for the report|450px]
#Configure the relationship between two tables with the following propeties: 
#*'''Parent Table''': ''Batch''
#* '''Join Type''': ''Left''
#* '''Child Table''': ''GLTran''
#* '''Parent Field''': ''BatchNbr''
#* '''Link Condition''': ''Equal''
#* '''Child Field''': ''BatchNbr''
#On the '''Parameters''' tab, add three parameters (Branch, Ledger, and Batch) with the following properties.
#:{| class="checklist" | width="100%" 
|- 
!width="25%" ! Property
!width="25%" ! Branch parameter
!width="25%" ! Ledger parameter
!width="25%" ! Batch parameter
|- 
| Name
| BranchID
| LedgerID
| BatchID
|- 
| Data Type
| String
| String
| String
|- 
| View Name
| =&#91;Batch.BranchID&#93;
| =&#91;Batch.LedgerID&#93;
| =&#91;Batch.BatchNbr&#93;
|- 
| Prompt
| Batch
| Ledger
| Batch
|- 
| Column Span
| 2
| 2
| 2
|- 
| Allow Null
| True
| True
| True
|- 
| Visible
| True
| True
| True
|}
#:((({S:Hint}In the '''View Name''' property, you specify the data field from which the report should take the display options for the parameter (such as the type of the control for entering a value).
)))
#Specify filtering conditions to restrict the set of data (selecting only scheduled batches) and use the report parameters.
#:{| class="checklist" | width="100%" 
|- 
!width="11%" ! Braces
!width="19%" ! Data Field
!width="19%" ! Condition
!width="19%" ! Value1
!width="11%" ! Braces
!width="19%" ! Operator
|- 
| 
| Batch.Scheduled
| Equal
| True
| 
| And
|- 
| (
| Batch.BranchID
| Equal
| @BranchID
| 
| Or
|- 
| 
| @BranchID
| IsNull
| 
| )
| And
|- 
| (
| Batch.LedgerID
| Equal
| @LedgerID
| 
| Or
|- 
| 
| @LedgerID
| IsNull
| 
| )
| And
|- 
| (
| Batch.BatchNbr
| Equal
| @BatchID
| 
| Or
|- 
| 
| @BatchID
| IsNull
| 
| )
| And
|}
#:((({S:Hint}You can use the parameters of your report to build filtering conditions in any way you need. Typically, as the example above shows, you check whether some field value equals the parameter value or the parameter value is null (not specified).
)))

==Specifying General Settings for the Report==
To specify general report settings, click the square button at the upper left corner of the designer and set the following properties for the report:[anchor|#ul_hf2_vyd_tl]
*'''StylesTemplate''': ''TemplateReport.rpx''
* '''NavigationTree''': ''False''
* '''GridSize''': ''4px''; ''4px''
* '''Excel Mode''': ''Manual''
* '''LayoutUnit''': ''Pixel''
* '''Width''': ''1026px''

==Preparing the Header==[anchor|#ol_y5b_2xj_tl]
#Add the report header and page header to the report, and split each header into two sections by using the '''Duplicate Section''' command.
#Set the following properties for the sections that represent the report header and footer and the page header and footer.
#:{| class="checklist" | width="100%" 
|- 
!width="25%" ! Section
!width="25%" ! StyleName
!width="25%" ! PrintOnFirstPage
!width="25%" ! Height
|- 
| reportHeaderSection1
| 
| 
| 56px
|- 
| reportHeaderSection2
| ColumnsHeaderSection
| 
| 24px
|- 
| pageHeaderSection1
| 
| False
| 20px
|- 
| pageHeaderSection2
| ColumnsHeaderSection
| False
| 24px
|}
#Add and align the text boxes for the report name, mandatory parameters, and other report parameters as described in the [HelpRoot_ReportingTools\ReportGuidelines#header_layout|recommendations]. The table below gives an example of the settings for the text boxes.
#:{| class="checklist" | width="100%" 
|- 
!width="50%" ! Value
!width="16%" ! StyleName
!width="16%" ! Location
!width="16%" ! Size
|- 
| Scheduled Batches
| Report Name
| 4px; 0px
| 244px; 16px
|- 
| Company:
| Report Params
| 4px; 20px
| 76px; 14px
|- 
| =Report.GetDefUI(&rsquo;RowCompanyBAccount.{br}

AcctName&rsquo;)
| Report Params
| 80px; 20px
| 168px; 14px
|- 
| Ledger:
| Report Params
| 4px; 38px
| 76px; 14px
|- 
| =&#91;@LedgerID&#93;
| Report Params
| 80px; 38px
| 168px; 14px
|- 
| Branch:
| Report Params
| 4px; 56px
| 76px; 14px
|- 
| =&#91;@BranchID&#93;
| Report Params
| 80px; 56px
| 168px; 14px
|- 
| Batch:
| Report Params
| 340px; 20px
| 76px; 14px
|- 
| =&#91;@BatchID&#93;
| Report Params
| 76px;14px
| 168px; 14px
|- 
| User:
| Report Params
| 916px; 20px
| 32px; 14px
|- 
| =Report.GetDefUI(&rsquo;RowAccessInfo.DisplayName&rsquo;)
| Report Params
| 948px; 20px
| 76px; 14px
|- 
| Date:
| Report Params
| 916px; 38px
| 32px; 14px
|- 
| =Today()
| Report Params
| 948px; 38px
| 76px; 14px
|- 
| Page:
| Report Params
| 916px; 56px
| 32px; 14px
|- 
| =PageOf
| Report Params
| 948px; 56px
| 76px; 14px
|}
#:((({S:Hint}You can copy a group of controls and paste them into the same section or another section. To select multiple controls, click them one by one while pressing the Shift key. You can also set a property for all selected controls at once.
)))
#:For the label text boxes of the Ledger, Branch, and Batch parameters, set the '''VisibleExpr''' property to the following values:
#*''=(&#91;@LedgerID&#93;&lt;&gt;Null)''
#* ''=(&#91;@BranchID&#93;&lt;&gt;Null)''
#* ''=(&#91;@BatchID&#93;&lt;&gt;Null)''
#:As a result, these text boxes will be displayed only when a user specifies parameter values for the report and runs it.
#Add text boxes with the properties shown in the following table to the section named ''reportHeaderSection2''. The text boxes will represent column headers for batch records.
#:{| class="checklist" | width="100%" 
|- 
!width="21%" ! Value
!width="21%" ! StyleName
!width="21%" ! Style—Text Align
!width="17%" ! Location
!width="17%" ! Size
|- 
| Batch Nbr.
| Heading 1
| 
| 4px; 4px
| 68px; 14px
|- 
| Ledger
| Heading 1
| 
| 72px; 4px
| 72px; 14px
|- 
| Description
| Heading 1
| 
| 144px; 4px
| 272px; 14px
|- 
| Created By
| Heading 1
| 
| 616px; 4px
| 112px; 14px
|- 
| Last Modified By
| Heading 1
| 
| 728px; 4px
| 112px; 14px
|- 
| Currency
| Heading 1
| Right
| 840px; 4px
| 64px; 14px
|- 
| Control Total
| Heading 1
| Right
| 904px; 4px
| 116px; 14px
|}
#:((({S:Hint}You can use a predefined style and specify additional display properties in the '''Style''' group of properties.
)))
#:The same column headers should be placed in ''pageHeaderSection2''. To copy column headers from the report header, select all text boxes in ''reportHeaderSection2'', right-click them, select '''Copy''', right-click ''pageHeaderSection2'', and click '''Paste'''.

==Preparing the Main Part of the Report==[anchor|#ol_isx_yyj_tl]
#Add one group by right-clicking the report outside of any section and selecting '''Add New Group'''. Duplicate the group header and the group footer. Open the '''Schema Builder''', open the '''Sorting and Grouping''' tab, select ''group1'', and specify the following properties for the grouping:
#*'''Data Field''': ''Batch.BatchNbr''
#* '''Sort Direction''': ''Ascending''
#:((({S:Hint}You can duplicate group headers and footers any number of times. You can use additional group headers and footers to add spacing between rows. The numbers of headers and footers doesn&rsquo;t have to be the same. However, you add a new group only to add a new level of grouping data.
)))
#Set the following properties for the group headers, footers, and detail section.
#:{| class="checklist" | width="100%" 
|- 
!width="33%" ! Section
!width="33%" ! StyleName
!width="33%" ! Height
|- 
| groupHeaderSection1
| GroupHighlight
| 16px
|- 
| groupHeaderSection2
| GroupL1Highlight
| 20px
|- 
| groupFooterSection1
| 
| 20px
|- 
| groupFooterSection2
| 
| 16px
|- 
| detailSection1
| 
| 16px
|}
#Copy the text boxes with column names from the report or page header to ''groupHeaderSection1'', shift them to the top of the section, and set the '''StyleName''' property to ''Normal''. Set '''Value''' to the corresponding Batch data fields:
#*''=&#91;Batch.BatchNbr&#93;''
#* ''=&#91;Batch.LedgerID&#93;''
#* ''=&#91;Batch.Description&#93;''
#* ''=&#91;Batch.CreatedByID&#93;''
#* ''=&#91;Batch.LastModifiedByID&#93;''
#* ''=&#91;Batch.CuryID&#93;''
#* ''=&#91;Batch.CuryControlTotal&#93;''
#Add text boxes with the following properties to ''groupHeaderSection2'' to represent the column headers for journal transaction records.
#:{| class="checklist" | width="100%" 
|- 
!width="21%" ! Value
!width="21%" ! StyleName
!width="21%" ! Style—Text Align
!width="17%" ! Location
!width="17%" ! Size
|- 
| Branch
| Heading 1
| 
| 4px; 4px
| 68px; 14px
|- 
| Account
| Heading 1
| 
| 72px; 4px
| 72px; 14px
|- 
| Sub.
| Heading 1
| 
| 144px; 4px
| 136px; 14px
|- 
| Ref. Nbr.
| Heading 1
| 
| 280px; 4px
| 116px; 14px
|- 
| Description
| Heading 1
| 
| 396px; 4px
| 332px; 14px
|- 
| Currency
| Heading 1
| Left
| 728px; 4px
| 60px; 14px
|- 
| Debit
| Heading 1
| Right
| 788px; 4px
| 116px; 14px
|- 
| Credit
| Heading 1
| Right
| 904px; 4px
| 116px; 14px
|}
#Copy the text boxes with column names from ''groupHeaderSection2'' to ''detailSection1'', shift them to the top of the section, and set the '''StyleName''' property to ''Normal'' for all of them. Set '''Value''' to the corresponding GLTran data fields:
#*''=&#91;GLTran.BranchID&#93;''
#* ''=&#91;GLTran.AccountID&#93;''
#* ''=&#91;GLTran.SubID&#93;''
#* ''=&#91;GLTran.RefNbr&#93;''
#* ''=&#91;GLTran.TranDesc&#93;''
#* ''=&#91;GLTran.CuryID&#93;''
#* ''=&#91;GLTran.CuryDebitAmt&#93;''
#* ''=&#91;GLTran.CuryCreditAmt&#93;''
#In the first group footer, add four text boxes to ''groupFooterSection1'' and set the following properties for them. These text boxes will be used to display total amounts for a batch right under the '''Debit''' and '''Credit''' columns in the first group footer. 
#:{| class="checklist" | width="100%" 
|- 
!width="27%" ! Value
!width="18%" ! StyleName
!width="18%" ! Style—Text Align
!width="18%" ! Location
!width="18%" ! Size
|- 
| Batch Total:
| Heading 1
| 
| 616px; 4px
| 112px; 14px
|- 
| =&#91;Batch.CuryID&#93;
| Heading 1
| Left
| 728px; 4px
| 60px; 14px
|- 
| =&#91;Batch.CuryDebitTotal&#93;
| Heading 1
| Right
| 788px; 4px
| 116px; 14px
|- 
| =&#91;Batch.CuryCreditTotal&#93;
| Heading 1
| Right
| 904px; 4px
| 116px; 14px
|}
#:((({S:Hint}You can use aggregation functions to perform calculations over grouped items. For example, you could replace ''=&#91;Batch.CuryDebitTotal&#93;'' with ''=Sum(&#91;GLTran.CuryDebitAmt&#93;)'', which would calculate a sum over all child journal transactions for each parent batch. However, here we use the data field of the parent, because it already contains the sum.
)))
#:To draw a line above the total amounts, add a line to the ''groupFooterSection1'' and properly align it. You can set the following properties for the line:
#*'''Location''': ''612px; 2px''
#* '''Size''': ''414px; 2px''
#:The X coordinate of the location added to the width should be less or equal to the overall width of the report for the line to not extend beyond the report.

==Publishing the Report==
To make the report accessible through the website, you should add it to the Site Map ('''System''' > '''Customization''' > '''Manage''' > '''Site Map''') of your Acumatica ERP application. For example, you can add this report to the '''Finance''' > '''General Ledger''' > '''Reports''' > '''Audit''' section of the site. You can add a new node with the following properties:[anchor|#ul_ypb_zjk_tl]
*'''ScreenID''': ''GL690011''
* '''Title''': ''Scheduled Batches''
* '''Url''': ''~/Frames/ReportLauncher.aspx?ID=&lt;YouReportName&gt;.rpx''
]]></column>
			<column name="PlainText"><![CDATA[Sample Report This example illustrates best practices in report design for the  Acumatica ERP application. To implement the sample report, you need to have the  Acumatica Report                         Designer and an instance of the  Acumatica ERP application installed. The report will display data records of a scheduled batch with their details—journal         transactions. By  scheduled batch , we mean a batch that is processed according to the         related schedule. The report will select batches by the  Scheduled          field, which equals  true  when a schedule is associated with the batch. By using the         parameters of the report, you can filter batches by a ledger, branch, or batch number (to         display details of a specific batch). Building the Data Schema for the Report In the  Schema Builder  window, load the schema of the website by           specifying the URL of the application and valid credentials, and add the Batch table and           GLTran (PX.Objects.GL.GLTran) table to the report (see the screenshot below).  Loading schema and selecting tables for the report Configure the relationship between two tables with the following propeties:  Parent Table :  Batch Join Type :  Left Child Table :  GLTran Parent Field :  BatchNbr Link Condition :  Equal Child Field :  BatchNbr On the  Parameters  tab, add three parameters (Branch, Ledger, and           Batch) with the following properties. Property Branch parameter Ledger parameter Batch parameter Name BranchID LedgerID BatchID Data Type String String String View Name =[Batch.BranchID] =[Batch.LedgerID] =[Batch.BatchNbr] Prompt Batch Ledger Batch Column Span 2 2 2 Allow Null True True True Visible True True True In the  View Name  property, you specify the data field             from which the report should take the display options for the parameter (such as the             type of the control for entering a value). Specify filtering conditions to restrict the set of data (selecting only scheduled           batches) and use the report parameters. Braces Data Field Condition Value1 Braces Operator Batch.Scheduled Equal True And ( Batch.BranchID Equal @BranchID Or @BranchID IsNull ) And ( Batch.LedgerID Equal @LedgerID Or @LedgerID IsNull ) And ( Batch.BatchNbr Equal @BatchID Or @BatchID IsNull ) And You can use the parameters of your report to build filtering conditions in             any way you need. Typically, as the example above shows, you check whether some field             value equals the parameter value or the parameter value is null (not           specified). Specifying General Settings for the Report To specify general report settings, click the square button at the upper left corner of the         designer and set the following properties for the report: StylesTemplate :  TemplateReport.rpx NavigationTree :  False GridSize :  4px ;  4px Excel Mode :  Manual LayoutUnit :  Pixel Width :  1026px Preparing the Header Add the report header and page header to the report, and split each header into two           sections by using the  Duplicate Section  command. Set the following properties for the sections that represent the report header and           footer and the page header and footer. Section StyleName PrintOnFirstPage Height reportHeaderSection1 56px reportHeaderSection2 ColumnsHeaderSection 24px pageHeaderSection1 False 20px pageHeaderSection2 ColumnsHeaderSection False 24px Add and align the text boxes for the report name, mandatory parameters, and other report           parameters as described in the  recommendations recommendations. The table below gives an example of the settings for the text             boxes. Value StyleName Location Size Scheduled Batches Report Name 4px; 0px 244px; 16px Company: Report Params 4px; 20px 76px; 14px =Report.GetDefUI('RowCompanyBAccount. AcctName') Report Params 80px; 20px 168px; 14px Ledger: Report Params 4px; 38px 76px; 14px =[@LedgerID] Report Params 80px; 38px 168px; 14px Branch: Report Params 4px; 56px 76px; 14px =[@BranchID] Report Params 80px; 56px 168px; 14px Batch: Report Params 340px; 20px 76px; 14px =[@BatchID] Report Params 76px;14px 168px; 14px User: Report Params 916px; 20px 32px; 14px =Report.GetDefUI('RowAccessInfo.DisplayName') Report Params 948px; 20px 76px; 14px Date: Report Params 916px; 38px 32px; 14px =Today() Report Params 948px; 38px 76px; 14px Page: Report Params 916px; 56px 32px; 14px =PageOf Report Params 948px; 56px 76px; 14px You can copy a group of controls and paste them into the same section or             another section. To select multiple controls, click them one by one while pressing the             Shift key. You can also set a property for all selected controls at once. For             the label text boxes of the Ledger, Branch, and Batch parameters, set the                VisibleExpr  property to the following values: =([@LedgerID]<>Null) =([@BranchID]<>Null) =([@BatchID]<>Null) As a result, these text boxes will be displayed only when a user specifies             parameter values for the report and runs it. Add text boxes with the properties shown in the following table to the section named              reportHeaderSection2 . The text boxes will represent column headers for batch             records. Value StyleName Style—Text Align Location Size Batch Nbr. Heading 1 4px; 4px 68px; 14px Ledger Heading 1 72px; 4px 72px; 14px Description Heading 1 144px; 4px 272px; 14px Created By Heading 1 616px; 4px 112px; 14px Last Modified By Heading 1 728px; 4px 112px; 14px Currency Heading 1 Right 840px; 4px 64px; 14px Control Total Heading 1 Right 904px; 4px 116px; 14px You can use a predefined style and specify additional display properties in             the  Style  group of properties. The same column headers             should be placed in  pageHeaderSection2 . To copy column headers from the report             header, select all text boxes in  reportHeaderSection2 , right-click them, select                Copy , right-click  pageHeaderSection2 , and click                Paste . Preparing the Main Part of the Report Add one group by right-clicking the report outside of any section and selecting              Add New Group . Duplicate the group header and the group footer.           Open the  Schema Builder , open the  Sorting and             Grouping  tab, select  group1 , and specify the following properties for           the grouping: Data Field :  Batch.BatchNbr Sort Direction :  Ascending You can duplicate group headers and footers any number of times. You can use             additional group headers and footers to add spacing between rows. The numbers of headers             and footers doesn't have to be the same. However, you add a new group only to add a new             level of grouping data. Set the following properties for the group headers, footers, and detail section. Section StyleName Height groupHeaderSection1 GroupHighlight 16px groupHeaderSection2 GroupL1Highlight 20px groupFooterSection1 20px groupFooterSection2 16px detailSection1 16px Copy the text boxes with column names from the report or page header to              groupHeaderSection1 , shift them to the top of the section, and set the              StyleName  property to  Normal . Set              Value  to the corresponding Batch data fields: =[Batch.BatchNbr] =[Batch.LedgerID] =[Batch.Description] =[Batch.CreatedByID] =[Batch.LastModifiedByID] =[Batch.CuryID] =[Batch.CuryControlTotal] Add text boxes with the following properties to  groupHeaderSection2  to represent           the column headers for journal transaction records. Value StyleName Style—Text Align Location Size Branch Heading 1 4px; 4px 68px; 14px Account Heading 1 72px; 4px 72px; 14px Sub. Heading 1 144px; 4px 136px; 14px Ref. Nbr. Heading 1 280px; 4px 116px; 14px Description Heading 1 396px; 4px 332px; 14px Currency Heading 1 Left 728px; 4px 60px; 14px Debit Heading 1 Right 788px; 4px 116px; 14px Credit Heading 1 Right 904px; 4px 116px; 14px Copy the text boxes with column names from  groupHeaderSection2  to              detailSection1 , shift them to the top of the section, and set the              StyleName  property to  Normal  for all of them. Set              Value  to the corresponding GLTran data fields: =[GLTran.BranchID] =[GLTran.AccountID] =[GLTran.SubID] =[GLTran.RefNbr] =[GLTran.TranDesc] =[GLTran.CuryID] =[GLTran.CuryDebitAmt] =[GLTran.CuryCreditAmt] In the first group footer, add four text boxes to  groupFooterSection1  and set the           following properties for them. These text boxes will be used to display total amounts for           a batch right under the  Debit  and  Credit            columns in the first group footer.  Value StyleName Style—Text Align Location Size Batch Total: Heading 1 616px; 4px 112px; 14px =[Batch.CuryID] Heading 1 Left 728px; 4px 60px; 14px =[Batch.CuryDebitTotal] Heading 1 Right 788px; 4px 116px; 14px =[Batch.CuryCreditTotal] Heading 1 Right 904px; 4px 116px; 14px You can use aggregation functions to perform calculations over grouped             items. For example, you could replace  =[Batch.CuryDebitTotal]  with                =Sum([GLTran.CuryDebitAmt]) , which would calculate a sum over all child journal             transactions for each parent batch. However, here we use the data field of the parent,             because it already contains the sum. To draw a line above the total amounts,             add a line to the  groupFooterSection1  and properly align it. You can set the             following properties for the line: Location :  612px; 2px Size :  414px; 2px The X coordinate of the location added to the width should be less or equal to the             overall width of the report for the line to not extend beyond the report. Publishing the Report To make the report accessible through the website, you should add it to the Site Map ( System Customization Manage Site Map ) of your  Acumatica ERP application. For example, you can add this report to the  Finance General Ledger Reports Audit  section of the site. You can add a new node with the following         properties: ScreenID :  GL690011 Title :  Scheduled Batches Url :              ~/Frames/ReportLauncher.aspx?ID=<YouReportName>.rpx ]]></column>
		</row>
		<row PageID="92ad4ccd-b6fc-4770-8b74-bf0330bf133d" Language="en-US" PageRevisionID="1" PlainText="Third-Party Reporting Solutions This chapter of the Reporting module guide contains data about third-party ISV (independent       software vendor) reporting solutions. For more information about the third-party products and       ISV contacts, see  Extentions Extentions section of the  Acumatica ERP website.  Acumatica ERP third-party solutions are intended to assist business customers and generally not used         for individual consumer needs.  Acumatica Inc.  has         no responsibility or liability of any kind for the third-party software, solutions,         services, and training listed on the site.  Acumatica Inc.  International         does not warrant third-party software applications. You are solely responsible for         selecting, using and evaluating any third-party offerings. In This Chapter BI360DexSplicityFYIsoftNetStockBizNetVelixo Reports" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="cba6d793-0eb0-2d1b-da8d-13cf188f08c8" RecordSourceID="22377">
			<column name="Content"><![CDATA[
This chapter of the Reporting module guide contains data about third-party ISV (independent software vendor) reporting solutions. For more information about the third-party products and ISV contacts, see [https://www.acumatica.com/extensions/|Extentions] section of the Acumatica ERP website.{br}

((({S:Hint} Acumatica ERP third-party solutions are intended to assist business customers and generally not used for individual consumer needs. [anchor|#full_company_name]Acumatica Inc. has no responsibility or liability of any kind for the third-party software, solutions, services, and training listed on the site. Acumatica Inc. International does not warrant third-party software applications. You are solely responsible for selecting, using and evaluating any third-party offerings.
)))
==In This Chapter==[anchor|#_f78e6674-dd2f-4c1f-8bdf-5b47616f22fa]
*[HelpRoot_ReportingTools\RP_3rdParty_BI360|BI360]
*[HelpRoot_ReportingTools\RP_3rdParty_DexSplicity|DexSplicity]
*[HelpRoot_ReportingTools\RP_3rdParty_FYISoft|FYIsoft]
*[HelpRoot_ReportingTools\RP_3rdParty_NetStock|NetStock]
*[HelpRoot_ReportingTools\RP_3rdParty_BizNet|BizNet]
*[HelpRoot_ReportingTools\RP_3rdParty_VelixoReports|Velixo Reports]
]]></column>
		</row>
		<row PageID="8c49c13b-134a-4505-9644-789e4838ae69" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="1a8944a4-7e81-1b0e-eac9-62d6c8b194a3" RecordSourceID="22377">
			<column name="Content"><![CDATA[
BI360 is a corporate performance management ISV (independent software vendor) solution certified by Acumatica ERP.{br}

Solver provides BI360, the leading Corporate Performance Management (CPM) software suite for companies of all sizes. Solver specializes in providing world-class financial reporting, budgeting, and analysis with push-button access to all data sources that drive company-wide profitability. BI360 is available for cloud and on-premise deployment, focusing on four key areas of analytics:[anchor|#_2a223072-9689-496b-8267-b60df4e2e4f9]
*Reporting and consolidations (Excel- and web-based)
*Budgeting and forecasting (Excel- and web-based)
*Dashboards (web-based)
*Data warehouse (including the ability to combine Acumatica data with other data sources)
{br}

BI360 enables world-class decisions across your organization and extends the value of your Acumatica ERP deployment. BI360 supports both cloud-based and on-premise deployments of Acumatica ERP.{br}

The key features of BI360 include the following:[anchor|#_aa88bc7e-0d47-495d-b09f-7d2a880900ad]
*Ability to design reports and budget forms in a powerful Excel add-in
*Access to reports and budgets through Excel, web, mobile devices, and email
*Ability to create both General Ledger and subledger reports and dashboards for Acumatica ERP
*Ability to drill down to details
*Modern and detailed user security
*Trees (for easy company or account roll-ups)
*Currency conversion
*Allocations
*Both direct (live) and data warehouse-based integration to Acumatica ERP
*Cloud or on-premises options
*FRx conversion (for Acumatica ERP customers migrating from Dynamics SL and GP)
]]></column>
			<column name="PlainText"><![CDATA[BI360 BI360 is a corporate performance management ISV (independent software vendor) solution    certified by  Acumatica ERP. Solver provides BI360, the leading Corporate Performance Management (CPM) software suite for    companies of all sizes. Solver specializes in providing world-class financial reporting,    budgeting, and analysis with push-button access to all data sources that drive company-wide    profitability. BI360 is available for cloud and on-premise deployment, focusing on four key areas    of analytics: Reporting and consolidations (Excel- and web-based) Budgeting and forecasting (Excel- and web-based) Dashboards (web-based) Data warehouse (including the ability to combine Acumatica data with other data      sources) BI360 enables world-class decisions across your organization and extends the value of your  Acumatica ERP    deployment. BI360 supports both cloud-based and on-premise deployments of  Acumatica ERP. The key features of BI360 include the following: Ability to design reports and budget forms in a powerful Excel add-in Access to reports and budgets through Excel, web, mobile devices, and email Ability to create both General Ledger and subledger reports and dashboards for  Acumatica ERPAbility to drill down to details Modern and detailed user security Trees (for easy company or           account            roll-ups ) Currency conversion Allocations Both direct (live) and data warehouse-based integration to  Acumatica ERPCloud or on-premises options FRx conversion (for  Acumatica ERP customers migrating from Dynamics SL and GP) ]]></column>
		</row>
		<row PageID="07c45880-cf46-4e34-a2b0-396bba91140d" Language="en-US" PageRevisionID="1" Content="&#xA;DexSplicity is a powerful yet simplified Excel Add-in reporting tool. It is easy to use and intended to be able to access any data, such as GL, ERP, CRM, HR, Product, and more. The tool combines drag-and-drop report design with one-click data refresh in reports that can include any formula, format, or graph available with Excel features.{br}&#xA;&#xA;The key features of DexSplicity include the following:[anchor|#_cf68d3d5-f450-43ab-838a-60a2b741ea82]&#xA;*One-click data refresh&#xA;*Ability to access variety of data&#xA;*Ability to combine data from multiple sources&#xA;*Drag-and-drop report design&#xA;*Custom drill-down capabilities&#xA;*Slicers for data analysis&#xA;*Ability to apply and publish hierarchies&#xA;*Any custom formatting available in Excel&#xA;*Any formula available in Excel&#xA;*Ability to create dashboards using Excel graphing&#xA;" PlainText="DexSplicity DexSplicity is a powerful yet simplified Excel Add-in reporting tool. It is easy to use and       intended to be able to access any data, such as GL, ERP, CRM, HR, Product, and more. The tool       combines drag-and-drop report design with one-click data refresh in reports that can include       any formula, format, or graph available with Excel features. The key features of DexSplicity include the following: One-click data refresh Ability to access variety of data Ability to combine data from multiple sources Drag-and-drop report design Custom drill-down capabilities Slicers for data analysis Ability to apply and publish hierarchies Any custom formatting available in Excel Any formula available in Excel Ability to create dashboards using Excel graphing " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="e0859dbb-6cdc-1567-d037-331cd5ae6508" RecordSourceID="22377" />
		<row PageID="9c88ffc8-357c-4b2f-a21a-d5bccd0edf6c" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="163485c5-9ad9-6675-83dd-d417a4c78486" RecordSourceID="22377">
			<column name="Content"><![CDATA[
FYIsoft is a cloud financial reporting tool that works easily with Acumatica ERP, ideal for companies with complex consolidation and reporting requirements. It allows to migrate reports from an ERP system and use FRx or Management Reporter. This saves many hours spent on recreating reports manually. {br}

FYIsoft greatly enhances the ability to produce fast, accurate financial reports and has been proven to cut 10+ days off the period close process. With a faster period close, finance teams spend less time generating and manually correcting reports, and more time analyzing and making sound business decisions.{br}

The key features of FYIsoft include the following:[anchor|#_ed22278f-0543-472f-8f8e-5358ad14eacc]
*Multi-company consolidations
*Global currency conversion
*Superior interactive drill-down capabilities on the account or transaction level
*Easy, flexible reporting setup with a unique “one and done” approach
*Advanced, automated report distribution, accessible 24/7 from any device
*The ability to merge non-financial data into reports to calculate KPIs
*Ability to email or distribute reports easily to individual users or to a distribution group in Excel or PDF format
*Security settings at the report organization (tree) level, allowing you to restrict users to certain departments or subaccounts
*Report scheduling, allowing you to schedule reports to run at a certain time of day automatically
*User-friendly interface with a very easy learning curve
]]></column>
			<column name="PlainText"><![CDATA[FYIsoft FYIsoft is a cloud financial reporting tool that works easily with  Acumatica ERP, ideal for companies with complex consolidation and reporting requirements. It allows to       migrate reports from an ERP system and use FRx or Management Reporter. This saves many hours       spent on recreating reports manually.  FYIsoft greatly enhances the ability to produce fast, accurate financial reports and has been       proven to cut 10+ days off the period close process. With a faster period close, finance teams       spend less time generating and manually correcting reports, and more time analyzing and making       sound business decisions. The key features of FYIsoft include the following: Multi-company consolidations Global currency conversion Superior interactive drill-down capabilities on the account or transaction level Easy, flexible reporting setup with a unique “one and done” approach Advanced, automated report distribution, accessible 24/7 from any device The ability to merge non-financial data into reports to calculate KPIs Ability to email or distribute reports easily to individual users or to a distribution           group in Excel or PDF format Security settings at the report organization (tree) level, allowing you to restrict           users to certain departments or subaccounts Report scheduling, allowing you to schedule reports to run at a certain time of day           automatically User-friendly interface with a very easy learning curve ]]></column>
		</row>
		<row PageID="4f046a9b-3c56-4c85-9be5-beaad90053a5" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="ed131da7-4688-ff52-0457-3c8a66527a89" RecordSourceID="22377">
			<column name="Content"><![CDATA[
NetStock is an affordable, cloud-based application that can be deployed quickly and easily. It offers inventory-based companies a sophisticated yet easy-to-use tool for the optimization of their inventory.{br}

The benefits include a reduction in excess inventory, minimized stock-outs, and optimal purchase orders produced in minutes. This results in increased profits by freeing working capital, reducing carrying costs, increasing sales, and improving productivity.{br}

Through an intuitive dashboard design, companies gain amazing visibility into their inventory health; focus on the most impactful areas of improvement; improved decision-making and much more. All accessible on the web from any device, anytime, anywhere.{br}

The key features of NetStock include the following:[anchor|#_0ce2acf4-eb45-409d-b550-f08ee78874bf]
*Dashboard for quick health check of inventory
*Item classification based on both value and velocity
*Sophisticated forecasting algorithms automatically assigned to each item or location
*Recommended order schedules with easy upload to Acumatica ERP
*Stocking policies and measurement against goals
*Component demand based on bill of materials
*Supplier performance and forecast risk assessments
]]></column>
			<column name="PlainText"><![CDATA[NetStock NetStock is an affordable, cloud-based application that can be deployed quickly and easily. It       offers inventory-based companies a sophisticated yet easy-to-use tool for the optimization of       their inventory. The benefits include a reduction in excess inventory, minimized stock-outs, and optimal       purchase orders produced in minutes. This results in increased profits by freeing working       capital, reducing carrying costs, increasing sales, and improving productivity. Through an intuitive dashboard design, companies gain amazing visibility into their inventory    health; focus on the most impactful areas of improvement; improved decision-making and much more.    All accessible on the web from any device, anytime, anywhere. The key features of NetStock include the following: Dashboard for quick health check of inventory Item classification based on both value and velocity Sophisticated forecasting algorithms automatically assigned to each item or           location Recommended order schedules with easy upload to  Acumatica ERPStocking policies and measurement against goals Component demand based on bill of materials Supplier performance and forecast risk assessments ]]></column>
		</row>
		<row PageID="6b4a4363-dab9-4002-a367-f2f12c689a79" Language="en-US" PageRevisionID="1" Content="&#xA;BizNet Excel Suite is an innovative and intuitive reporting solution pre-built for Acumatica ERP. It provides a user-friendly, drag-and-drop environment with real-time access to the most accurate and current data. Built upon fundamental business disciplines and controls, BizNet solutions reduce the time spent on updating spreadsheets and make it easy for Microsoft Excel users to connect, analyze, and share real-time information.{br}&#xA;&#xA;The key features of BizNet include the following:[anchor|#_4241dfb0-c8e9-42b7-9b04-f7b3cecae3b0]&#xA;*100% Excel-based solution&#xA;*Real-time business data&#xA;*Ability to drill down to transaction-level details&#xA;*Drag-and-drop reporting and analysis&#xA;*No additional hardware requirements&#xA;*Full implementation within a day&#xA;*Ability to build reports within minutes for even novice users&#xA;" PlainText="BizNet BizNet Excel Suite is an innovative and intuitive reporting solution pre-built for  Acumatica ERP. It provides a user-friendly, drag-and-drop environment with real-time access to the most       accurate and current data. Built upon fundamental business disciplines and controls, BizNet       solutions reduce the time spent on updating spreadsheets and make it easy for Microsoft Excel       users to connect, analyze, and share real-time information. The key features of BizNet include the following: 100% Excel-based solution Real-time business data Ability to drill down to transaction-level details Drag-and-drop reporting and analysis No additional hardware requirements Full implementation within a day Ability to build reports within minutes for even novice users " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="b3ab5d7b-84a1-2f4d-d2a8-9e338651965a" RecordSourceID="22377" />
		<row PageID="0a28bb99-8818-4c01-b7b0-49209a38218a" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="0e9b7fa6-bc52-d83a-d134-75c656f0e79b" RecordSourceID="22377">
			<column name="Content"><![CDATA[
Velixo Reports is an open source Microsoft Excel based Financial Report Writer alternative to Analytical Report Manager (ARM) in Acumatica ERP. It is designed specifically for Acumatica ERP to take advantage of the modern technology platform that Acumatica offers.{br}

The key features of Velixo Reports include the following:[anchor|#_f498a5c7-0e97-4187-975b-2483ecf872bf]
*Velixo Reports was designed for Acumatica ERP with the cloud in mind.
*The tool uses the OData protocol that is natively supported by Acumatica, and no direct connection to the database is needed.
* To ensure the best possible performance and to minimize round trips to the Acumatica ERP server, Velixo Reports caches frequently used data locally to a SQLite database that is updated incrementally.
*This database is managed by the add-in and is transparent to the user — no configuration is needed. 
*The add-in also builds on the expertise that its developer acquired while optimizing the ARM calculation engine in Acumatica ERP for a company with 200 branches, 16,000 General Ledger accounts, and more than 10 million General Ledger entries in its database. Performance is the top priority.
]]></column>
			<column name="PlainText"><![CDATA[Velixo Reports Velixo Reports is an open source Microsoft Excel based Financial Report Writer alternative to       Analytical Report Manager (ARM) in  Acumatica ERP. It is designed specifically for  Acumatica ERP to take advantage of the modern technology platform that  Acumatica offers. The key features of Velixo Reports include the following: Velixo Reports was designed for  Acumatica ERP with the cloud in mind. The tool uses the OData protocol that is natively supported by Acumatica, and no direct         connection to the database is needed.  To ensure the best possible performance and to minimize round trips to the  Acumatica ERP server, Velixo Reports caches frequently used data locally to a SQLite database that is         updated incrementally. This database is managed by the add-in and is transparent to the user — no configuration         is needed.  The add-in also builds on the expertise that its developer acquired while optimizing the         ARM calculation engine in  Acumatica ERP for a company with 200 branches, 16,000 General Ledger accounts, and more than 10 million         General Ledger entries in its database. Performance is the top priority. ]]></column>
		</row>
	</rows>
</data>