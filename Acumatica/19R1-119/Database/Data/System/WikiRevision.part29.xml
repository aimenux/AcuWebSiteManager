<?xml version="1.0" encoding="utf-8"?>
<data>
	<table name="WikiRevision">
		<col name="CompanyID" type="Int" default="Zero" />
		<col name="PageID" type="UniqueIdentifier" />
		<col name="Language" type="VarChar(50)" />
		<col name="PageRevisionID" type="Int" />
		<col name="Content" type="NVarChar(MAX)" />
		<col name="ContentHtml" type="NVarChar(MAX)" nullable="true" />
		<col name="PlainText" type="NVarChar(MAX)" />
		<col name="ApprovalByID" type="UniqueIdentifier" nullable="true" />
		<col name="ApprovalDateTime" type="DateTime" nullable="true" />
		<col name="CreatedByID" type="UniqueIdentifier" />
		<col name="CreatedDateTime" type="DateTime" />
		<col name="CompanyMask" type="VarBinary(32)" default="CompanyMaskReadOnly" />
		<col name="UID" type="UniqueIdentifier" />
		<col name="RecordSourceID" type="SmallInt" nullable="true" />
	</table>
	<rows>
		<row PageID="ff22837c-cd3a-410e-b768-88ca6e53b165" Language="en-US" PageRevisionID="1" PlainText="Integration Development Guide In this guide, you can find information about how to develop client applications that work     with  Acumatica ERP     through the web services. In This Guide Authorizing Client Applications to Work with Acumatica ERPConfiguring the Contract-Based REST and SOAP APIWorking with the Contract-Based REST APIWorking with the Contract-Based SOAP APIWorking with the Screen-Based SOAP APIWorking with Commands of the Screen-Based SOAP APIConfiguring Push NotificationsContract-Based REST API ReferenceContract-Based SOAP API ReferenceScreen-Based SOAP API ReferenceContract-Based API Examples" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="ef69c7f2-d1f7-a727-ac55-f26a70e88dab" RecordSourceID="22377">
			<column name="Content"><![CDATA[
In this guide, you can find information about how to develop client applications that work with Acumatica ERP through the web services.
==In This Guide==[anchor|#_a6f7d3e3-bf97-4534-938a-6e9a7d7c0a92]
*[HelpRoot_Dev_Integration\IS__mng_Authorizing_with_OAuth2|Authorizing Client Applications to Work with Acumatica ERP]
*[HelpRoot_Dev_Integration\IS__mng_Contract_Based_Web_Services|Configuring the Contract-Based REST and SOAP API]
*[HelpRoot_Dev_Integration\IS__mng_Work_with_Contract_Based_REST|Working with the Contract-Based REST API]
*[HelpRoot_Dev_Integration\IS__mng_Contract_Based_SOAP_API|Working with the Contract-Based SOAP API]
*[HelpRoot_Dev_Integration\IS__mng_Screen_Based_Web_Services|Working with the Screen-Based SOAP API]
*[HelpRoot_Dev_Integration\IS__mng_Screen-Based_API_Commands|Working with Commands of the Screen-Based SOAP API]
*[HelpRoot_Dev_Integration\IS__mng_Push_Notificatons|Configuring Push Notifications]
*[HelpRoot_Dev_Integration\IS__IS_CB_REST_API_Reference|Contract-Based REST API Reference]
*[HelpRoot_Dev_Integration\IS__IS_CB_API_Reference|Contract-Based SOAP API Reference]
*[HelpRoot_Dev_Integration\IS__IS_SB_API_Reference|Screen-Based SOAP API Reference]
*[HelpRoot_Dev_Integration\IS__mng_CB_API_Examples|Contract-Based API Examples]
]]></column>
		</row>
		<row PageID="a8f71c44-9f5c-4af8-9d47-bc815c8a58e7" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="6e3afaac-c734-7f7e-a8dc-f868c1625fec" RecordSourceID="22377">
			<column name="Content"><![CDATA[[anchor|#_6247904f-af07-418f-a92c-f34a3c0251f5]
 Acumatica ERP supports the OAuth 2.0 mechanism of authorization for applications that are integrated with Acumatica ERP through application programming interfaces (APIs). When a client application of Acumatica ERP uses the OAuth 2.0 mechanism of authorization, the client application does not operate with the Acumatica ERP credentials to log in a user to Acumatica ERP; instead, the application obtains an access token from Acumatica ERP and uses this token when it requests data from Acumatica ERP. [anchor|#_b6f5df19-3f9b-462c-9781-9a82d78781f5]{br}

Depending on the OAuth 2.0 flow that the client application implements, the client application either has no information on the credentials of an Acumatica ERP user or uses this information only once to obtain the access token. The OAuth 2.0 mechanism of authorization improves the security of the Acumatica ERP data accessed by the application and simplifies the management of access rights.{br}

The client application that implements the OAuth 2.0 authorization mechanism can use one of the OAuth 2.0 authorization flows supported by Acumatica ERP, which are the following:[anchor|#_7d3c951f-582d-4c91-ad59-3af389fbc42a]
*Authorization code 
*Implicit 
*Resource owner password credentials 
{br}

In this chapter, you can find details on the OAuth 2.0 authorization flows and information about how to register the OAuth 2.0 or OpenID Connect client applications and revoke access of the applications.
==In This Chapter==[anchor|#_48113b6f-a816-4d45-9926-9fb49001fff8]
{| class="checklist invisiblechecklist" | width="100%" 
|- 
| [anchor|#_77021c73-725e-4807-a717-05a15cbe8d91]
*[HelpRoot_Dev_Integration\IS__con_OAuth_Authorization_Code_Flow|Authorization Code Flow]
*[HelpRoot_Dev_Integration\IS__con_OAuth_Implicit_Flow|Implicit Flow]
*[HelpRoot_Dev_Integration\IS__con_OAuth_Resource_Owner_Flow|Resource Owner Password Credentials Flow]
*[HelpRoot_Dev_Integration\IS__con_OAuth_Flow_Comparison|Comparison of the Flows]

| [anchor|#_105c5d5a-d487-462a-99fe-461624061ebd]
*[HelpRoot_Dev_Integration\IS__how_Register_OAuth2_Client|To Register a Client Application]
*[HelpRoot_Dev_Integration\IS__how_Revoke_Access_of_OAuth_Client|To Revoke the Access of a Connected Application]

|}]]></column>
			<column name="PlainText"><![CDATA[Authorizing Client Applications to Work with  Acumatica ERP Acumatica ERP             supports the OAuth 2.0 mechanism of authorization for applications that are integrated             with  Acumatica ERP             through application programming interfaces (APIs). When a client application of  Acumatica ERP             uses the OAuth 2.0 mechanism of authorization, the client application does not operate             with the  Acumatica ERP             credentials to log in a user to  Acumatica ERP;             instead, the application obtains an access token from  Acumatica ERP             and uses this token when it requests data from  Acumatica ERP.  Depending on the OAuth 2.0 flow that the client             application implements, the client application either has no information on the             credentials of an  Acumatica ERP             user or uses this information only once to obtain the access token. The OAuth 2.0             mechanism of authorization improves the security of the  Acumatica ERP             data accessed by the application and simplifies the management of access rights. The client application that implements the OAuth 2.0 authorization mechanism can use one of         the OAuth 2.0 authorization flows supported by  Acumatica ERP, which are the following: Authorization code  Implicit  Resource owner password credentials  In this chapter, you can find details on the OAuth 2.0 authorization flows and information         about how to register the OAuth 2.0 or OpenID Connect client applications and revoke access         of the applications. In This Chapter Authorization Code FlowImplicit FlowResource Owner Password Credentials FlowComparison of the FlowsTo Register a Client ApplicationTo Revoke the Access of a Connected Application]]></column>
		</row>
		<row PageID="ff780860-09c2-46c9-bdd7-c6c3b1fc442c" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="0c34e064-95b6-7d83-dd28-737ae424fe9f" RecordSourceID="22377">
			<column name="Content"><![CDATA[
When you implement OAuth 2.0 authorization in a client application to make the application work with Acumatica ERP, you can use the authorization code flow. With this authorization flow, the client application never gets the credentials of the applicable Acumatica ERP user. After the user is authenticated in Acumatica ERP, the client application receives an authorization code, exchanges it for an access token, and then uses the access token to work with data in Acumatica ERP. When the access token expires, the client application can request a new access token by providing a refresh token. The following diagram illustrates the authorization code flow, whose steps are described in the sections of this topic.[anchor|#_57e5824f-d89d-4c68-9025-5e1fcca472f8][anchor|#_8f2aa8e5-5ed9-4db6-b4f0-696ebfbe65dc][image:UserGuide/Images/AuthorizationCodeFlow.png|popup|Authorization code flow|450px]
For details on the OAuth 2.0 authorization mechanism, see the specification at [https://tools.ietf.org/html/rfc6749]. {br}{TOC}
==Granting Permission to a Client Application==
Before an OAuth 2.0 client application can work with Acumatica ERP, you must register this application in Acumatica ERP and provide credentials to the application, as described in [HelpRoot_Dev_Integration\IS__how_Register_OAuth2_Client#_d68c1c13-bf02-4b79-988e-fbd7b1767a43|To Register a Client Application with the Authorization Code Flow]. After the registration, you have the client ID and the secret value of the client application.[anchor|#_10068f93-c820-4618-87d2-4d9a8478d741]((({S:Hint}[anchor|#_c976b91a-72ff-493d-9c8a-7f1192c32100]
*According to the OAuth 2.0 specification, a secure connection between an OAuth 2.0 client application and the Acumatica ERP website with a Secure Socket Layer (SSL) certificate is required. Therefore, you have to set up the Acumatica ERP website for HTTPS before the OAuth 2.0 client application can work with data in Acumatica ERP. For more information, see [HelpRoot_Install\how__Enable_Https|Setting Up an HTTPS Service in Web Server (IIS)].
*When you are registering the client application, you have to be logged in to the tenant whose data the client application needs to access.
)))
==Connecting to the Authorization Endpoint==
The client application connects to the authorization endpoint of Acumatica ERP by specifying the following URL with parameters:[anchor|#_997a7b99-2b00-4a32-bc32-496d1c14f870][anchor|#_bb3d1752-bcb3-48d8-bb1c-031f93f689e8]
*'''URL'''
*:The client application can use one of the following options:[anchor|#_d18a2291-bba9-4da1-af17-3a328a9aa5ee][anchor|#_1b8d83e7-fd31-48f1-80e4-8899065c574c]
**If the client application supports OpenID Connect Discovery, the client application can use the discovery endpoint address, which is {{https://<Acumatica ERP instance URL>/identity/}}. In this address, {{<Acumatica ERP instance URL>}} is the URL of the Acumatica ERP instance to which the client application is going to connect. 
**:For example, for a local Acumatica ERP instance with the name ''AcumaticaDB'', the discovery endpoint address is {{https://localhost/AcumaticaDB/identity/}}. 
**:((({S:Hint}We recommend that the client application use the discovery endpoint address, which eliminates the need to change the application if the authorization or token endpoint address changes.
)))[anchor|#_3c4da5ae-9d1f-4bee-968c-7c398557bb6f]
**The client application can directly use the authorization endpoint address, which is {{https://<Acumatica ERP instance URL>/identity/connect/authorize}}. In this address, {{<Acumatica ERP instance URL>}} is the URL of the Acumatica ERP instance to which the client application is going to connect. 
**:For example, for a local Acumatica ERP instance with the name ''AcumaticaDB'', the authorization endpoint address is {{https://localhost/AcumaticaDB/identity/connect/authorize}}.
*'''URL Parameters'''
*:The client application should specify the following URL parameters.[anchor|#_12da1ab5-251a-4abd-ac7f-f8ce11c170bb]
{| class="checklist" | width="100%" 
|- 
!width="20%" ! Parameter
!width="80%" ! Description
|- 
| <tt>response&#95;type</tt>
| The type of the OAuth 2.0 flow, which must be set to {{code}} for the authorization code flow.
|- 
| <tt>client&#95;id</tt>
| [anchor|#_d3ee9325-e499-467e-9702-c923c49e4157]The client ID that was assigned to the client application during the registration of the application in Acumatica ERP. The client ID must have the format in which the ID was generated during the registration of the application. That is, the client ID must include an auto-generated string and the ID of the company, such as {{88358B02-A48D-A50E-F710-39C1636C30F6@MyCompany}}. The client application will have access to the data of the company specified in the client ID.
|- 
| <tt>redirect&#95;uri</tt>
| [anchor|#_a0919c42-481e-42aa-9221-0ec8058e3a21]The URI in the client application to which the response to the request should be sent. The URI must exactly match one of the values specified for the application in the '''Redirect URI''' column on the '''Redirect URIs''' tab of the [HelpRoot_FormReference\SM_30_30_10|Connected Applications] ([~/?ScreenId=SM303010|SM303010]) form.
|- 
| <tt>scope</tt>
| [anchor|#_0360a40d-3d34-4a99-8e1f-dc3dd24b833e]The access scope that is requested by the client application. The scope can be a combination of the following values, delimited by spaces:[anchor|#_29783027-c3e5-45cc-9e29-584b935777d6][anchor|#_2523faa1-2ba1-4dc7-bff8-e5e9af3d593d]
*<tt>api</tt>: Requests access to a web services API. If a user grants this scope to the application, the client application can work with either or both of the following types of the web services API: contract-based SOAP API or contract-based REST API. 
*:If this scope is granted and the <tt>api:concurrent&#95;access</tt> scope is not granted, Acumatica ERP manages the sessions of the application through tokens. Acumatica ERP issues the first access token along with the session ID. If the client application requests a new access token by presenting a refresh token, Acumatica ERP reuses the session ID that was issued for the first access token issued with the refresh token. That is, the system uses a single session for each access granted to the client application. For details about the license limitations related to the number of sessions for client applications, see [HelpRoot_Install\License_Restrictions_APIUsers|License Restrictions for API Users].[anchor|#_831af3cd-e56f-41e0-8804-f9b23725bb42]
*<tt>offline&#95;access</tt>: Requests that a refresh token be granted. If a user grants this scope to the application, Acumatica ERP issues to the client application a refresh token along with the access token. (For information on issuing the access token, see [HelpRoot_Dev_Integration\IS__con_OAuth_Authorization_Code_Flow#_76d8934a-3c19-4ee8-b537-005719690be4|Connecting to the Token Endpoint] in this topic.) When the access token has expired, the client application can request a new access token by sending a request to the token endpoint and providing the refresh token.[anchor|#_07797d09-420f-42f9-ba21-83761bd7f588]
*<tt>api:concurrent&#95;access</tt>: Requests permission for the concurrent use of multiple types of web service APIs. If a user grants this scope to the application, the client application can access data in Acumatica ERP in concurrent mode. In this case, Acumatica ERP can maintain multiple sessions for the client application, managing session IDs through cookies. We recommend that the client application request this scope only if concurrent access is required for the client application. For details about the license limitations related to the number of sessions for client applications, see [HelpRoot_Install\License_Restrictions_APIUsers|License Restrictions for API Users].

|}
{br}

An example of a URL with parameters is shown below. (Line breaks are for display purposes only.){{{{https://localhost/AcumaticaDB/identity/connect/authorize?
response_type=code
&client_id=4B1DFD71-C5EE-0B21-A6BE-9A1F060A93BD
&redirect_uri=http%3A%2F%2Flocalhost%2Fclientapp%2F
&scope=api%20offline_access
}}}}[anchor|#_480e21c2-d41d-412b-a708-5a35be7029b3]
==Authorizing a User in Acumatica ERP and Granting Access==
The authorization endpoint directs the user of the client application to the login page of Acumatica ERP, where the user should enter the credentials to log in to a company configured in the Acumatica ERP instance. {br}

((({S:Hint}The user must log in to the company that was specified in the <tt>client&#95;id</tt> URL parameter passed to the authorization endpoint. (This company is selected by default on the login page.) 
))){br}

If the credentials are accepted by Acumatica ERP, the system displays the consent form, where the user can confirm that the application has access to the requested scopes. Only the scopes that were requested by the application are displayed on the consent form.
==Receiving the Authorization Code==
Once the user grants access to the requested scopes, Acumatica ERP redirects the client application to the <tt>redirect&#95;uri</tt> address that was specified in the request, and adds the authorization code in the <tt>code</tt> URL parameter. [anchor|#_76d8934a-3c19-4ee8-b537-005719690be4]
==Connecting to the Token Endpoint==
The client application connects to the token endpoint of Acumatica ERP by specifying the following URL and the following parameters in the request body:[anchor|#_02566bbd-71af-45f1-b5b6-61792ba556ac][anchor|#_418b0cbe-b0aa-4043-b4b5-f2f0eb339eec]
*'''URL'''
*:The client application can use one of the following options:[anchor|#_ebd41e21-5e14-40c3-9fc2-3f26dd14eb99][anchor|#_bd6aae05-765e-42e5-839a-1a02d26158de]
**If the client application supports OpenID Connect Discovery, the client application can use the discovery endpoint address, which is {{https://<Acumatica ERP instance URL>/identity/}}. In this address, {{<Acumatica ERP instance URL>}} is the URL of the Acumatica ERP instance to which the client application is going to connect. 
**:For example, for a local Acumatica ERP instance with the name ''AcumaticaDB'', the discovery endpoint address is {{https://localhost/AcumaticaDB/identity/}}. 
**:((({S:Hint}We recommend that the client application use the discovery endpoint address, which eliminates the need to change the application if the authorization or token endpoint address changes.
)))[anchor|#_9c9720bb-6ca6-4d7e-94f4-1754edf0f427]
**The client application can directly use the token endpoint address, which is {{https://<Acumatica ERP instance URL>/identity/connect/token}}. In this endpoint, {{<Acumatica ERP instance URL>}} is the URL of the Acumatica ERP instance to which the client application is going to connect. 
**:For example, for a local Acumatica ERP instance with the name ''AcumaticaDB'', the token endpoint address is {{https://localhost/AcumaticaDB/identity/connect/token}}.
*'''Parameters in the Request Body'''
*:You specify the following parameters in the request body.[anchor|#_3c6af2e6-02dd-432c-990e-5d5a629cd17b]
{| class="checklist" | width="100%" 
|- 
!width="20%" ! Parameter
!width="80%" ! Description
|- 
| <tt>grant&#95;type</tt>
| The type of the OAuth 2.0 flow, which must be set to {{authorization_code}} for the authorization code flow.
|- 
| <tt>client&#95;id</tt>
| [anchor|#_d091c9e1-c5f7-4118-a37c-078022c9895d]The client ID that was assigned to the client application during the registration of the application in Acumatica ERP. The client ID must have the format in which the ID was generated during the registration of the application. That is, the client ID must include an auto-generated string and the ID of the company, such as {{88358B02-A48D-A50E-F710-39C1636C30F6@MyCompany}}. The client application will have access to the data of the company specified in the client ID.
|- 
| <tt>code</tt>
| The authorization code that the client application has received from the authorization endpoint.
|- 
| <tt>client&#95;secret</tt>
| [anchor|#_3c085064-4931-48b4-acaf-cc6d3633ee04]The value of the secret that was created for the client application during the registration of the application in Acumatica ERP.
|- 
| <tt>redirect&#95;uri</tt>
| [anchor|#_c8482a0d-808c-4fe1-89ef-36da731bfc24]The URI in the client application to which the response to the request should be sent. The URI must exactly match one of the values specified for the application in the '''Redirect URI''' column on the '''Redirect URIs''' tab of the [HelpRoot_FormReference\SM_30_30_10|Connected Applications] ([~/?ScreenId=SM303010|SM303010]) form.
|}
[anchor|#_bd9fc9ae-f0fe-4510-b5c0-0142f3786188]
==Receiving the Access Token==
 Acumatica ERP verifies the provided application credentials and issues the access token, which the client application should provide with each data request to Acumatica ERP. During authentication in Acumatica ERP, if the user has granted to the client application the <tt>offline&#95;access</tt> scope, Acumatica ERP issues the refresh token along with the access token. A successful response includes the following parameters in the response body.[anchor|#_14bd5178-73d6-46db-8f60-7fdfb1b083e9]
{| class="checklist" | width="100%" 
|- 
!width="20%" ! Parameter
!width="80%" ! Description
|- 
| <tt>token&#95;type</tt>
| The type of the access token, which is ''Bearer''.
|- 
| <tt>access&#95;token</tt>
| The access token.
|- 
| <tt>expires&#95;in</tt>
| The period of time during which the access token is valid.
|- 
| <tt>refresh&#95;token</tt>
| The refresh token. The parameter is returned only if the <tt>offline&#95;access</tt> scope was granted.
|}[anchor|#_f1ce455d-13a4-4200-9cd2-1f6dcad0b55c]
==Requesting Data with the Access Token==
The client application should include the access token in the {{Authorization}} header of each subsequent request to Acumatica ERP, as shown in the following HTTP example.{{{{GET /AcumaticaDB/entity/Default/6.00.001/SalesOrder/SO/000001 HTTP/1.1
Host: localhost
Authorization: Bearer cde78a99a2dc6388eb8c7242a90cf9bc
}}}}[anchor|#_97e7ed74-1b65-48ca-b8bc-7d9eb6715370]
==Refreshing the Access Token==
The access token is valid for a specific period of time, which is specified in the response that returns the access token. When the access token expires, the client application can request a new access token by providing the refresh token to the token endpoint. To request a new access token, the client application should have the following URL and the following parameters specified in the request body:[anchor|#_5a3034dc-1db6-439f-9d83-e0b03d24f336][anchor|#_bfb9e6b5-9bb5-4a91-8555-f54a5d881d7a]
*'''URL'''
*:The client application can use one of the following options:[anchor|#_45a37420-af32-41c8-9f42-dee911826a3b][anchor|#_182824e9-5573-43bf-b922-55812de7ffd3]
**If the client application supports OpenID Connect Discovery, the client application can use the discovery endpoint address, which is {{https://<Acumatica ERP instance URL>/identity/}}. In this address, {{<Acumatica ERP instance URL>}} is the URL of the Acumatica ERP instance to which the client application is going to connect. 
**:For example, for a local Acumatica ERP instance with the name ''AcumaticaDB'', the discovery endpoint address is {{https://localhost/AcumaticaDB/identity/}}. 
**:((({S:Hint}We recommend that the client application use the discovery endpoint address, which eliminates the need to change the application if the authorization or token endpoint address changes.
)))[anchor|#_c2dd34d5-cf91-42d4-b643-6c38e5616303]
**The client application can directly use the token endpoint address, which is {{https://<Acumatica ERP instance URL>/identity/connect/token}}. In this endpoint, {{<Acumatica ERP instance URL>}} is the URL of the Acumatica ERP instance to which the client application is going to connect. 
**:For example, for a local Acumatica ERP instance with the name ''AcumaticaDB'', the token endpoint address is {{https://localhost/AcumaticaDB/identity/connect/token}}.
*'''Parameters in the Request Body'''
*:You specify the following parameters in the request body.[anchor|#_f7e5202b-dda9-4a3c-9104-cb404c3be909]
{| class="checklist" | width="100%" 
|- 
!width="20%" ! Parameter
!width="80%" ! Description
|- 
| <tt>grant&#95;type</tt>
| The type of the request, which must be set to {{refresh_token}} for the request of the refresh token.
|- 
| <tt>client&#95;id</tt>
| [anchor|#_49db1153-45fb-411b-b4e9-c20e9efd19c7]The client ID that was assigned to the client application during the registration of the application in Acumatica ERP. The client ID must have the format in which the ID was generated during the registration of the application. That is, the client ID must include an auto-generated string and the ID of the company, such as {{88358B02-A48D-A50E-F710-39C1636C30F6@MyCompany}}. The client application will have access to the data of the company specified in the client ID.
|- 
| <tt>client&#95;secret</tt>
| [anchor|#_c3f0847a-e0b9-4209-b5ec-9866c267d287]The value of the secret that was created for the client application during the registration of the application in Acumatica ERP.
|- 
| <tt>refresh&#95;token</tt>
| The refresh token that the client application received from the token endpoint along with the access token if the user granted the <tt>offline&#95;access</tt> scope to the client application.
|}
[anchor|#_61733e3e-a4c7-4d00-986e-782b799a7280]
==Receiving the New Access Token==
 Acumatica ERP verifies the provided application credentials and issues the new access token and the new refresh token. To request the access token once again, the client application should use the refresh token issued with the previous access token. A successful response includes the following parameters in the response body.[anchor|#_a9dd3787-c3a7-4229-9a52-2508dbac1835]
{| class="checklist" | width="100%" 
|- 
!width="20%" ! Parameter
!width="80%" ! Description
|- 
| <tt>token&#95;type</tt>
| The type of the access token, which is ''Bearer''.
|- 
| <tt>access&#95;token</tt>
| The access token.
|- 
| <tt>expires&#95;in</tt>
| The period of time during which the access token is valid.
|- 
| <tt>refresh&#95;token</tt>
| The refresh token. 
|}[anchor|#_e0d10661-d097-4016-b19b-f06d802fbb41]
==Logging Out from Acumatica ERP==
To prevent issues with licenses that limit the number of concurrent user sessions, the client application should directly call the logout method of the Acumatica ERP web services API when the application finishes its work with Acumatica ERP.
==Related Articles==
*[https://tools.ietf.org/html/rfc6749|RFC 6749: The OAuth 2.0 Authorization Framework]]]></column>
			<column name="PlainText"><![CDATA[Authorization Code Flow When you implement OAuth 2.0 authorization in a client     application to make the application work with  Acumatica ERP,     you can use the authorization code flow. With this authorization flow, the client application     never gets the credentials of the applicable  Acumatica ERP     user. After the user is authenticated in  Acumatica ERP,     the client application receives an authorization code, exchanges it for an access token, and     then uses the access token to work with data in  Acumatica ERP.     When the access token expires, the client application can request a new access token by     providing a refresh token.  The following diagram illustrates the authorization code flow,    whose steps are described in the sections of this topic. Authorization code flow For details on the OAuth 2.0 authorization mechanism, see the specification at  .  Granting Permission to a Client Application Before an OAuth 2.0 client application can work with  Acumatica ERP,     you must register this application in  Acumatica ERP     and provide credentials to the application, as described in  To Register a Client Application with the Authorization Code Flow. After the registration, you have the client ID and the secret value of the client      application. According to the OAuth 2.0 specification, a secure connection between an OAuth                     2.0 client application and the  Acumatica ERP website with a Secure Socket Layer (SSL) certificate is required. Therefore,                     you have to set up the  Acumatica ERP website for HTTPS before the OAuth 2.0 client application can work with data                     in  Acumatica ERP. For more information, see  Setting Up an HTTPS Service in Web Server (IIS). When you are registering the client application, you have to be logged in to the                     tenant whose data the client application needs to access. Connecting to the Authorization Endpoint The client application connects to the authorization endpoint of  Acumatica ERP     by specifying the following URL with parameters: URL The client application can use one of                 the following options: If the client application supports OpenID Connect             Discovery, the client application can use the discovery endpoint address, which is                      https://< Acumatica ERP instance URL>/identity/ . In this address,  < Acumatica ERP instance URL>  is the URL of the  Acumatica ERP instance to which the client application is going to connect.  For example, for a                 local  Acumatica ERP instance with the name  AcumaticaDB , the discovery endpoint address is                      https://localhost/AcumaticaDB/identity/ .  We recommend                 that the client application use the discovery endpoint address, which eliminates the                 need to change the application if the authorization or token endpoint address                 changes. The client application can directly use the             authorization endpoint address, which is  https://< Acumatica ERP instance URL>/identity/connect/authorize . In this address,                      < Acumatica ERP instance URL>  is the URL of the  Acumatica ERP             instance to which the client application is going to connect.  For example, for a                 local  Acumatica ERP instance with the name  AcumaticaDB , the authorization endpoint address is                      https://localhost/AcumaticaDB/identity/connect/authorize . URL Parameters The client application should specify the following URL         parameters. Parameter Description response_type The type of the OAuth 2.0 flow, which must be set to  code  for the             authorization code flow. client_id The client ID that was assigned to the client             application during the registration of the application in  Acumatica ERP.             The client ID must have the format in which the ID was generated during the registration             of the application. That is, the client ID must include an auto-generated string and the             ID of the company, such as                  88358B02-A48D-A50E-F710-39C1636C30F6@MyCompany . The client             application will have access to the data of the company specified in the client ID. redirect_uri The URI in the client application to which the             response to the request should be sent. The URI must exactly match one of the values             specified for the application in the  Redirect URI  column on the                  Redirect URIs  tab of the   ([~/?ScreenId=SM303010|SM303010]) Connected Applications             (SM303010) form. scope The access scope that is requested by the client             application. The scope can be a combination of the following values, delimited by                 spaces: api : Requests access to a web             services API. If a user grants this scope to the application, the client application can             work with either or both of the following types of the web services API: contract-based             SOAP API or contract-based REST API.  If this scope is granted and the  api:concurrent_access                          scope is not granted,  Acumatica ERP manages the sessions of the application through tokens.  Acumatica ERP issues the first access token along with the session ID. If the client                         application requests a new access token by presenting a refresh token,  Acumatica ERP reuses the session ID that was issued for the first access token issued                         with the refresh token. That is, the system uses a single session for each                         access granted to the client application. For details about the license                         limitations related to the number of sessions for client applications, see                              License Restrictions for API Users. offline_access : Requests that a             refresh token be granted. If a user grants this scope to the application,  Acumatica ERP             issues to the client application a refresh token along with the access token. (For             information on issuing the access token, see  Connecting to the Token Endpoint Connecting to the Token Endpoint in this topic.) When the access token has expired, the client             application can request a new access token by sending a request to the token endpoint             and providing the refresh token. api:concurrent_access : Requests             permission for the concurrent use of multiple types of web service APIs. If a user             grants this scope to the application, the client application can access data in  Acumatica ERP             in concurrent mode. In this case,  Acumatica ERP             can maintain multiple sessions for the client application, managing session IDs through             cookies. We recommend that the client application request this scope only if concurrent             access is required for the client application. For details about the license limitations             related to the number of sessions for client applications, see  License Restrictions for API Users. An example of a URL with parameters is shown below. (Line breaks are for display purposes     only.) https://localhost/AcumaticaDB/identity/connect/authorize?
response_type=code
&client_id=4B1DFD71-C5EE-0B21-A6BE-9A1F060A93BD
&redirect_uri=http%3A%2F%2Flocalhost%2Fclientapp%2F
&scope=api%20offline_access Authorizing a User in  Acumatica ERP and Granting Access The authorization endpoint directs the user of the client application to the login page of  Acumatica ERP, where the user should enter the credentials to log in to a company configured in                 the  Acumatica ERP instance.  The user must log in to the company that was specified in the                          client_id  URL parameter passed to the authorization                     endpoint. (This company is selected by default on the login page.)  If the credentials are accepted by  Acumatica ERP, the system displays the consent form, where the user can confirm that the                 application has access to the requested scopes. Only the scopes that were requested                 by the application are displayed on the consent form. Receiving the Authorization Code Once the user grants access to the requested scopes,  Acumatica ERP     redirects the client application to the  redirect_uri  address that was     specified in the request, and adds the authorization code in the  code  URL     parameter.  Connecting to the Token Endpoint The client application connects to the token endpoint of  Acumatica ERP     by specifying the following URL and the following parameters in the request body: URL The client application can use one of                 the following options: If the client application supports OpenID Connect             Discovery, the client application can use the discovery endpoint address, which is                      https://< Acumatica ERP instance URL>/identity/ . In this address,  < Acumatica ERP instance URL>  is the URL of the  Acumatica ERP instance to which the client application is going to connect.  For example, for a                 local  Acumatica ERP instance with the name  AcumaticaDB , the discovery endpoint address is                      https://localhost/AcumaticaDB/identity/ .  We recommend                 that the client application use the discovery endpoint address, which eliminates the                 need to change the application if the authorization or token endpoint address                 changes. The client application can directly use the token             endpoint address, which is  https://< Acumatica ERP instance URL>/identity/connect/token . In this endpoint,  < Acumatica ERP instance URL>  is the URL of the  Acumatica ERP             instance to which the client application is going to connect.  For example, for a                 local  Acumatica ERP instance with the name  AcumaticaDB , the token endpoint address is                      https://localhost/AcumaticaDB/identity/connect/token . Parameters in the Request Body You specify the following parameters in the request         body. Parameter Description grant_type The type of the OAuth 2.0 flow, which must be set to                authorization_code  for the authorization code flow. client_id The client ID that was assigned to the client             application during the registration of the application in  Acumatica ERP.             The client ID must have the format in which the ID was generated during the registration             of the application. That is, the client ID must include an auto-generated string and the             ID of the company, such as                  88358B02-A48D-A50E-F710-39C1636C30F6@MyCompany . The client             application will have access to the data of the company specified in the client ID. code The authorization code that the client application has received from the              authorization endpoint. client_secret The value of the secret that was created for the             client application during the registration of the application in  Acumatica ERP. redirect_uri The URI in the client application to which the             response to the request should be sent. The URI must exactly match one of the values             specified for the application in the  Redirect URI  column on the                  Redirect URIs  tab of the   ([~/?ScreenId=SM303010|SM303010]) Connected Applications             (SM303010) form. Receiving the Access Token  Acumatica ERP verifies                 the provided application credentials and issues the access token, which the client                 application should provide with each data request to  Acumatica ERP. During authentication in  Acumatica ERP, if the user has granted to the client application the                      offline_access  scope,  Acumatica ERP issues the refresh token along with the access token. A successful response                 includes the following parameters in the response body. Parameter Description token_type The type of the access token, which is  Bearer . access_token The access token. expires_in The period of time during which the access token is                                     valid. refresh_token The refresh token. The parameter is returned only if the                                          offline_access  scope was granted. Requesting Data with the Access Token The client application should include the access token in the  Authorization                  header of each subsequent request to  Acumatica ERP, as shown in the following HTTP                 example. GET /AcumaticaDB/entity/Default/6.00.001/SalesOrder/SO/000001 HTTP/1.1
Host: localhost
Authorization: Bearer cde78a99a2dc6388eb8c7242a90cf9bc Refreshing the Access Token The access token is valid for a specific period of time, which is specified in the                 response that returns the access token. When the access token expires, the client                 application can request a new access token by providing the refresh token to the                 token endpoint. To request a new access token, the client application should have                 the following URL and the following parameters specified in the request body: URL The client application can use one of                 the following options: If the client application supports OpenID Connect             Discovery, the client application can use the discovery endpoint address, which is                      https://< Acumatica ERP instance URL>/identity/ . In this address,  < Acumatica ERP instance URL>  is the URL of the  Acumatica ERP instance to which the client application is going to connect.  For example, for a                 local  Acumatica ERP instance with the name  AcumaticaDB , the discovery endpoint address is                      https://localhost/AcumaticaDB/identity/ .  We recommend                 that the client application use the discovery endpoint address, which eliminates the                 need to change the application if the authorization or token endpoint address                 changes. The client application can directly use the token             endpoint address, which is  https://< Acumatica ERP instance URL>/identity/connect/token . In this endpoint,  < Acumatica ERP instance URL>  is the URL of the  Acumatica ERP             instance to which the client application is going to connect.  For example, for a                 local  Acumatica ERP instance with the name  AcumaticaDB , the token endpoint address is                      https://localhost/AcumaticaDB/identity/connect/token . Parameters in the Request Body You specify the following parameters in                         the request body. Parameter Description grant_type The type of the request, which must be set to                                                  refresh_token  for the request of                                             the refresh token. client_id The client ID that was assigned to the client             application during the registration of the application in  Acumatica ERP.             The client ID must have the format in which the ID was generated during the registration             of the application. That is, the client ID must include an auto-generated string and the             ID of the company, such as                  88358B02-A48D-A50E-F710-39C1636C30F6@MyCompany . The client             application will have access to the data of the company specified in the client ID. client_secret The value of the secret that was created for the             client application during the registration of the application in  Acumatica ERP. refresh_token The refresh token that the client application                                             received from the token endpoint along with the access                                             token if the user granted the                                                  offline_access  scope to the                                             client application. Receiving the New Access Token  Acumatica ERP verifies                 the provided application credentials and issues the new access token and the new                 refresh token. To request the access token once again, the client application should                 use the refresh token issued with the previous access token. A successful response                 includes the following parameters in the response body. Parameter Description token_type The type of the access token, which is  Bearer . access_token The access token. expires_in The period of time during which the access token is                                     valid. refresh_token The refresh token.  Logging Out from  Acumatica ERPTo prevent issues with licenses that limit the number of concurrent user sessions, the client                 application should directly call the logout method of the  Acumatica ERP web services API when the application finishes its work with  Acumatica ERP. RFC 6749: The OAuth 2.0 Authorization Framework ]]></column>
		</row>
		<row PageID="76861c67-265c-46f4-949d-c8d4509c99ec" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="e5ef682a-6781-79a5-2b5c-cc561895b142" RecordSourceID="22377">
			<column name="Content"><![CDATA[
When you implement OAuth 2.0 authorization in a client application to make the application work with Acumatica ERP, you can use the implicit flow, which is a simplified variant of the authorization code flow. {br}

With the implicit flow, the client application never gets the credentials of the applicable Acumatica ERP user. When the user is authenticated in Acumatica ERP, the client application does not receive an authorization code (as with the authorization code flow); instead, the client application directly receives an access token, and then uses the access token to work with data in Acumatica ERP. The access token is valid for a limited period of time and cannot be renewed. {br}

The following diagram illustrates the implicit flow, whose steps are described in the sections later in this topic.[anchor|#_4d9b48e7-5aa1-4f00-9511-f852eb7ab63d][anchor|#_e537377f-3ed6-4870-bde3-6d8e8a10a85b][image:UserGuide/Images/ImplicitFlow.png|popup|Implicit flow|450px]{br}

This flow can be used for clients using a scripting language (such as JavaScript) or for mobile clients. For details on the OAuth 2.0 authorization mechanism, see the specification at [https://tools.ietf.org/html/rfc6749].{br}{TOC}
==Granting Permission to a Client Application==
Before an OAuth 2.0 client application can work with Acumatica ERP, you must register this application in Acumatica ERP and provide credentials to the application, as described in [HelpRoot_Dev_Integration\IS__how_Register_OAuth2_Client#_3246c4cd-a541-4f63-b928-66b7b411e047|To Register a Client Application with the Implicit Flow]. After the registration, you have the client ID of the client application.{br}

[anchor|#_ff7099f8-18f6-4cf3-b45e-63f772271d41]((({S:Hint}[anchor|#_72ecd5ee-4380-4bdb-8e8e-f7691dfff920]
*According to the OAuth 2.0 specification, a secure connection between an OAuth 2.0 client application and the Acumatica ERP website with a Secure Socket Layer (SSL) certificate is required. Therefore, you have to set up the Acumatica ERP website for HTTPS before the OAuth 2.0 client application can work with data in Acumatica ERP. For more information, see [HelpRoot_Install\how__Enable_Https|Setting Up an HTTPS Service in Web Server (IIS)].
*When you are registering the client application, you have to be logged in to the tenant whose data the client application needs to access.
)))
==Connecting to the Authorization Endpoint==
The client application connects to the authorization endpoint of Acumatica ERP by specifying the following URL and parameters:[anchor|#_71f22fdd-f05a-4ab5-b59a-a9c653857324][anchor|#_2a740953-340b-4bd7-be1f-72f4f562d4d0]
*'''URL'''
*:The client application can use one of the following options:[anchor|#_e46f5112-e890-46cd-9274-dcf36572b6db][anchor|#_1a08ab65-a7a0-4823-a7ab-ce86b159dc82]
**If the client application supports OpenID Connect Discovery, the client application can use the discovery endpoint address, which is {{https://<Acumatica ERP instance URL>/identity/}}. In this address, {{<Acumatica ERP instance URL>}} is the URL of the Acumatica ERP instance to which the client application is going to connect. 
**:For example, for a local Acumatica ERP instance with the name ''AcumaticaDB'', the discovery endpoint address is {{https://localhost/AcumaticaDB/identity/}}. 
**:((({S:Hint}We recommend that the client application use the discovery endpoint address, which eliminates the need to change the application if the authorization or token endpoint address changes.
)))[anchor|#_12cc38bb-9e9d-4553-a93b-1c6b6391ab1d]
**The client application can directly use the authorization endpoint address, which is {{https://<Acumatica ERP instance URL>/identity/connect/authorize}}. In this address, {{<Acumatica ERP instance URL>}} is the URL of the Acumatica ERP instance to which the client application is going to connect. 
**:For example, for a local Acumatica ERP instance with the name ''AcumaticaDB'', the authorization endpoint address is {{https://localhost/AcumaticaDB/identity/connect/authorize}}.
*'''URL Parameters'''
*:The client application should specify the following URL parameters.[anchor|#_d3e143b7-85b9-4f88-a0cb-a3d9ae7c616a]
{| class="checklist" | width="100%" 
|- 
!width="20%" ! Parameter
!width="80%" ! Description
|- 
| <tt>response&#95;type</tt>
| The type of the OAuth 2.0 flow, which must be set to {{token}} for the implicit flow.
|- 
| <tt>client&#95;id</tt>
| [anchor|#_cf31cf2a-519b-471e-a7d8-ae527a0469b5]The client ID that was assigned to the client application during the registration of the application in Acumatica ERP. The client ID must have the format in which the ID was generated during the registration of the application. That is, the client ID must include an auto-generated string and the ID of the company, such as {{88358B02-A48D-A50E-F710-39C1636C30F6@MyCompany}}. The client application will have access to the data of the company specified in the client ID.
|- 
| <tt>redirect&#95;uri</tt>
| [anchor|#_339bdd47-f583-40b7-9eaf-51cfc348015a]The URI in the client application to which the response to the request should be sent. The URI must exactly match one of the values specified for the application in the '''Redirect URI''' column on the '''Redirect URIs''' tab of the [HelpRoot_FormReference\SM_30_30_10|Connected Applications] ([~/?ScreenId=SM303010|SM303010]) form.
|- 
| <tt>scope</tt>
| The access scope that is requested by the client application. The scope can be a combination of the following values delimited by spaces:[anchor|#_ed3c1a6e-ab08-4f13-95bb-92d78925f57a]
*<tt>api</tt>: Requests access to a web services API. If a user grants this scope to the application, the client application can work with either or both of the following types of the web services API: contract-based SOAP API or contract-based REST API. 
*:If this scope is granted and the <tt>api:concurrent&#95;access</tt> scope is not granted, Acumatica ERP manages the sessions of the application through tokens. The system uses a single session for each access granted to the client application.[anchor|#_b7b71e70-1324-445f-afc9-19df09c12307]
*<tt>api:concurrent&#95;access</tt>: Requests permission for the concurrent use of multiple types of web service APIs. If a user grants this scope to the application, the client application can access data in Acumatica ERP in concurrent mode. In this case, Acumatica ERP can maintain multiple sessions for the client application, managing session IDs through cookies. We recommend that the client application request this scope only if concurrent access is required for the client application. For details about the license limitations related to the number of sessions for client applications, see [HelpRoot_Install\License_Restrictions_APIUsers|License Restrictions for API Users].
((({S:Hint}The <tt>offline&#95;access</tt> scope is not supported by the implicit flow.
)))
|}
{br}

An example of the HTTP request is shown below. (Line breaks are for display purposes only.){{{{http://localhost/AcumaticaDB/identity/connect/authorize?
response_type=token
&client_id=4B1DFD71-C5EE-0B21-A6BE-9A1F060A93BD
&redirect_uri=http%3A%2F%2Flocalhost%2Fclientapp%2F
&scope=api
}}}}[anchor|#_793690e6-2308-4847-97b7-f822a42b2db9]
==Authorizing a User in Acumatica ERP and Granting Access==
The authorization endpoint directs the user of the client application to the login page of Acumatica ERP, where the user should enter the credentials to log in to a company configured in the Acumatica ERP instance. {br}

((({S:Hint}The user must log in to the company that was specified in the <tt>client&#95;id</tt> URL parameter passed to the authorization endpoint. (This company is selected by default on the login page.) 
))){br}

If the credentials are accepted by Acumatica ERP, the system displays the consent form, where the user can confirm that the application has access to the requested scopes. Only the scopes that were requested by the application are displayed on the consent form.
==Obtaining the Access Token==
Once the user grants access to the requested scopes, Acumatica ERP redirects the client application to the <tt>redirect&#95;uri</tt> address, which was specified in the request, and adds the access token in the URL parameters. The redirect URL includes the following URL parameters.[anchor|#_dc2096a3-af1b-49f8-a580-f26674cc082d]
{| class="checklist" | width="100%" 
|- 
!width="20%" ! Parameter
!width="80%" ! Description
|- 
| <tt>token&#95;type</tt>
| The type of the access token, which is ''Bearer''.
|- 
| <tt>access&#95;token</tt>
| The access token.
|- 
| <tt>expires&#95;in</tt>
| The period of time during which the access token is valid.
|}((({S:Hint}Refresh tokens are not supported by the implicit flow.
)))[anchor|#_5e506b4b-7b0a-4a57-9d7d-276213386180]
==Requesting Data with the Access Token==
The client application should include the access token in the {{Authorization}} header of each subsequent request to Acumatica ERP, as shown in the following HTTP example.{{{{GET /AcumaticaDB/entity/Default/6.00.001/SalesOrder/SO/000001 HTTP/1.1
Host: localhost
Authorization: Bearer cde78a99a2dc6388eb8c7242a90cf9bc
}}}}[anchor|#_8616c45e-71f8-4639-b2aa-35d0f10fdf25]
==Logging Out from Acumatica ERP==
To prevent issues with licenses that limit the number of concurrent user sessions, the client application should directly call the logout method of the Acumatica ERP web services API when the application finishes its work with Acumatica ERP.
==Related Articles==
*[https://tools.ietf.org/html/rfc6749|RFC 6749: The OAuth 2.0 Authorization Framework]]]></column>
			<column name="PlainText"><![CDATA[Implicit Flow When you implement OAuth 2.0 authorization in a client application to make the                 application work with  Acumatica ERP, you can use the implicit flow, which is a simplified variant of the                 authorization code flow.  With the implicit flow, the client application never gets the credentials of the                 applicable  Acumatica ERP user. When the user is authenticated in  Acumatica ERP, the client application does not receive an authorization code (as with the                 authorization code flow); instead, the client application directly receives an                 access token, and then uses the access token to work with data in  Acumatica ERP. The access token is valid for a limited period of time and cannot be renewed.  The following diagram illustrates the implicit flow, whose steps are described in the                 sections later in this topic. Implicit flow This flow can be used for clients using a scripting language (such as JavaScript) or                 for mobile clients. For details on the OAuth 2.0 authorization mechanism, see the                 specification at  . Granting Permission to a Client Application Before an OAuth 2.0 client application can work with  Acumatica ERP, you must register this application in  Acumatica ERP and provide credentials to the application, as described in  To Register a Client Application with the Implicit Flow. After the registration, you have the client ID of the client application. According to the OAuth 2.0 specification, a secure connection between an OAuth                     2.0 client application and the  Acumatica ERP website with a Secure Socket Layer (SSL) certificate is required. Therefore,                     you have to set up the  Acumatica ERP website for HTTPS before the OAuth 2.0 client application can work with data                     in  Acumatica ERP. For more information, see  Setting Up an HTTPS Service in Web Server (IIS). When you are registering the client application, you have to be logged in to the                     tenant whose data the client application needs to access. Connecting to the Authorization Endpoint The client application connects to the authorization endpoint of  Acumatica ERP by specifying the following URL and parameters: URL The client application can use one of                 the following options: If the client application supports OpenID Connect             Discovery, the client application can use the discovery endpoint address, which is                      https://< Acumatica ERP instance URL>/identity/ . In this address,  < Acumatica ERP instance URL>  is the URL of the  Acumatica ERP instance to which the client application is going to connect.  For example, for a                 local  Acumatica ERP instance with the name  AcumaticaDB , the discovery endpoint address is                      https://localhost/AcumaticaDB/identity/ .  We recommend                 that the client application use the discovery endpoint address, which eliminates the                 need to change the application if the authorization or token endpoint address                 changes. The client application can directly use the             authorization endpoint address, which is  https://< Acumatica ERP instance URL>/identity/connect/authorize . In this address,                      < Acumatica ERP instance URL>  is the URL of the  Acumatica ERP             instance to which the client application is going to connect.  For example, for a                 local  Acumatica ERP instance with the name  AcumaticaDB , the authorization endpoint address is                      https://localhost/AcumaticaDB/identity/connect/authorize . URL Parameters The client application should specify the following                             URL parameters. Parameter Description response_type The type of the OAuth 2.0 flow, which must be set                                                 to  token  for the implicit                                                 flow. client_id The client ID that was assigned to the client             application during the registration of the application in  Acumatica ERP.             The client ID must have the format in which the ID was generated during the registration             of the application. That is, the client ID must include an auto-generated string and the             ID of the company, such as                  88358B02-A48D-A50E-F710-39C1636C30F6@MyCompany . The client             application will have access to the data of the company specified in the client ID. redirect_uri The URI in the client application to which the             response to the request should be sent. The URI must exactly match one of the values             specified for the application in the  Redirect URI  column on the                  Redirect URIs  tab of the   ([~/?ScreenId=SM303010|SM303010]) Connected Applications             (SM303010) form. scope The access scope that is requested by the client                                                   application. The scope can be a combination of the                                                   following values delimited by spaces: api : Requests access to a web             services API. If a user grants this scope to the application, the client application can             work with either or both of the following types of the web services API: contract-based             SOAP API or contract-based REST API.  If this scope is granted and the                                                    api:concurrent_access  scope is                                                   not granted,  Acumatica ERP manages the sessions of the application through                                                   tokens. The system uses a single session for each                                                   access granted to the client application. api:concurrent_access : Requests             permission for the concurrent use of multiple types of web service APIs. If a user             grants this scope to the application, the client application can access data in  Acumatica ERP             in concurrent mode. In this case,  Acumatica ERP             can maintain multiple sessions for the client application, managing session IDs through             cookies. We recommend that the client application request this scope only if concurrent             access is required for the client application. For details about the license limitations             related to the number of sessions for client applications, see  License Restrictions for API Users. The  offline_access  scope is                                                   not supported by the implicit flow. An example of the HTTP request is shown below. (Line breaks are for display purposes                 only.) http://localhost/AcumaticaDB/identity/connect/authorize?
response_type=token
&client_id=4B1DFD71-C5EE-0B21-A6BE-9A1F060A93BD
&redirect_uri=http%3A%2F%2Flocalhost%2Fclientapp%2F
&scope=api Authorizing a User in  Acumatica ERP and Granting Access The authorization endpoint directs the user of the client application to the login page of  Acumatica ERP, where the user should enter the credentials to log in to a company configured in                 the  Acumatica ERP instance.  The user must log in to the company that was specified in the                          client_id  URL parameter passed to the authorization                     endpoint. (This company is selected by default on the login page.)  If the credentials are accepted by  Acumatica ERP, the system displays the consent form, where the user can confirm that the                 application has access to the requested scopes. Only the scopes that were requested                 by the application are displayed on the consent form. Obtaining the Access Token Once the user grants access to the requested scopes,  Acumatica ERP redirects the client application to the  redirect_uri  address,                 which was specified in the request, and adds the access token in the URL parameters.                 The redirect URL includes the following URL parameters. Parameter Description token_type The type of the access token, which is  Bearer . access_token The access token. expires_in The period of time during which the access token is                                     valid. Refresh tokens are not supported by the implicit flow. Requesting Data with the Access Token The client application should include the access token in the  Authorization                  header of each subsequent request to  Acumatica ERP, as shown in the following HTTP                 example. GET /AcumaticaDB/entity/Default/6.00.001/SalesOrder/SO/000001 HTTP/1.1
Host: localhost
Authorization: Bearer cde78a99a2dc6388eb8c7242a90cf9bc Logging Out from  Acumatica ERPTo prevent issues with licenses that limit the number of concurrent user sessions, the client                 application should directly call the logout method of the  Acumatica ERP web services API when the application finishes its work with  Acumatica ERP. RFC 6749: The OAuth 2.0 Authorization Framework ]]></column>
		</row>
		<row PageID="2930d2f7-e081-4d0e-8879-93907ce82607" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="d009ec4c-4134-dc8b-6c11-ba80adc4136f" RecordSourceID="22377">
			<column name="Content"><![CDATA[
When you implement OAuth 2.0 authorization in a client application to make the application work with Acumatica ERP, you can use the resource owner password credentials flow. {br}

With the resource owner password credentials flow, the credentials (username and password) of the Acumatica ERP user are provided directly to the client application, which uses the credentials to obtain the access token. When the access token expires, the client application can request a new access token by providing a refresh token. {br}

The following diagram illustrates the resource owner password credentials flow, whose steps are described in the sections later in this topic.[anchor|#_4c2576fb-446c-4bee-86ac-bd995ca14bd3][anchor|#_3bbc1421-7ec9-4dfd-9602-8e4bb6520925][image:UserGuide/Images/ResourceOwnerPasswordCredentialsFlow.png|popup|Resource owner password credentials flow|450px]{br}

For details on the OAuth 2.0 authorization mechanism, see the specification at [https://tools.ietf.org/html/rfc6749]. {br}{TOC}
==Granting Permission to a Client Application==
Before an OAuth 2.0 client application can work with Acumatica ERP, you must register this application in Acumatica ERP and provide credentials to the application, as described in [HelpRoot_Dev_Integration\IS__how_Register_OAuth2_Client#_97041b21-9ffa-4771-bf36-34c0cc61a593|To Register a Client Application with the Resource Owner Password Flow]. After the registration, you have the client ID and secret value of the client application.{br}

[anchor|#_7d938c6e-947d-4e29-a8ad-505a6e66f94b]((({S:Hint}[anchor|#_c9170a01-b2b0-430f-8b55-763dd3509f97]
*According to the OAuth 2.0 specification, a secure connection between an OAuth 2.0 client application and the Acumatica ERP website with a Secure Socket Layer (SSL) certificate is required. Therefore, you have to set up the Acumatica ERP website for HTTPS before the OAuth 2.0 client application can work with data in Acumatica ERP. For more information, see [HelpRoot_Install\how__Enable_Https|Setting Up an HTTPS Service in Web Server (IIS)].
*When you are registering the client application, you have to be logged in to the tenant whose data the client application needs to access.
)))
==Obtaining the Credentials of the Acumatica ERP User==
The client application should obtain the username and password of the applicable Acumatica ERP user, which can then be exchanged for an access token.
==Connecting to the Token Endpoint==
The client application connects to the token endpoint of Acumatica ERP by specifying the following URL and parameters in the request body:[anchor|#_bc29c8d5-7e7f-44d0-90e6-9c4846fec738][anchor|#_8ec53093-a78d-478f-94d2-f5fd38f137e5]
*'''URL'''
*:The client application can use one of the following options:[anchor|#_e8061260-b592-42b5-872a-6b6876bfdc87][anchor|#_b82cfa42-81a5-4909-bf22-724a3803fe2b]
**If the client application supports OpenID Connect Discovery, the client application can use the discovery endpoint address, which is {{https://<Acumatica ERP instance URL>/identity/}}. In this address, {{<Acumatica ERP instance URL>}} is the URL of the Acumatica ERP instance to which the client application is going to connect. 
**:For example, for a local Acumatica ERP instance with the name ''AcumaticaDB'', the discovery endpoint address is {{https://localhost/AcumaticaDB/identity/}}. 
**:((({S:Hint}We recommend that the client application use the discovery endpoint address, which eliminates the need to change the application if the authorization or token endpoint address changes.
)))[anchor|#_8575f1f8-71f0-41ee-a2b0-8751bc65cdb4]
**The client application can directly use the token endpoint address, which is {{https://<Acumatica ERP instance URL>/identity/connect/token}}. In this endpoint, {{<Acumatica ERP instance URL>}} is the URL of the Acumatica ERP instance to which the client application is going to connect. 
**:For example, for a local Acumatica ERP instance with the name ''AcumaticaDB'', the token endpoint address is {{https://localhost/AcumaticaDB/identity/connect/token}}.
*'''Parameters in the Request Body'''
*:You specify the following parameters in the request body.[anchor|#_c3b13c31-b9c5-4e48-9b97-8b358d61aed6]
{| class="checklist" | width="100%" 
|- 
!width="20%" ! Parameter
!width="80%" ! Description
|- 
| <tt>grant&#95;type</tt>
| The type of the OAuth 2.0 flow, which must be set to {{password}} for the resource owner password credentials flow.
|- 
| <tt>client&#95;id</tt>
| [anchor|#_ff114efd-d10a-407d-b068-84622e99862b]The client ID that was assigned to the client application during the registration of the application in Acumatica ERP. The client ID must have the format in which the ID was generated during the registration of the application. That is, the client ID must include an auto-generated string and the ID of the company, such as {{88358B02-A48D-A50E-F710-39C1636C30F6@MyCompany}}. The client application will have access to the data of the company specified in the client ID.
|- 
| <tt>client&#95;secret</tt>
| [anchor|#_0066af7a-c4f8-4c9b-b319-edab1ec40b17]The value of the secret that was created for the client application during the registration of the application in Acumatica ERP.
|- 
| <tt>username</tt>
| The username of an Acumatica ERP user. 
|- 
| <tt>password</tt>
| The password for the specified <tt>username</tt>.
|- 
| <tt>scope</tt>
| [anchor|#_3ca1c589-1781-4b2b-b71d-cbe739a6bc19]The access scope that is requested by the client application. The scope can be a combination of the following values, delimited by spaces:[anchor|#_2556197f-fce3-4b74-b0b0-6a25d72527e7][anchor|#_b283574c-2439-4158-88aa-6538148498a2]
*<tt>api</tt>: Requests access to a web services API. If a user grants this scope to the application, the client application can work with either or both of the following types of the web services API: contract-based SOAP API or contract-based REST API. 
*:If this scope is granted and the <tt>api:concurrent&#95;access</tt> scope is not granted, Acumatica ERP manages the sessions of the application through tokens. Acumatica ERP issues the first access token along with the session ID. If the client application requests a new access token by presenting a refresh token, Acumatica ERP reuses the session ID that was issued for the first access token issued with the refresh token. That is, the system uses a single session for each access granted to the client application. For details about the license limitations related to the number of sessions for client applications, see [HelpRoot_Install\License_Restrictions_APIUsers|License Restrictions for API Users].[anchor|#_30b2df5d-d5ee-49c9-a352-e5a22ee7f80f]
*<tt>offline&#95;access</tt>: Requests that a refresh token be granted. If a user grants this scope to the application, Acumatica ERP issues to the client application a refresh token along with the access token. (For information on issuing the access token, see [HelpRoot_Dev_Integration\IS__con_OAuth_Authorization_Code_Flow#_76d8934a-3c19-4ee8-b537-005719690be4|Connecting to the Token Endpoint] in this topic.) When the access token has expired, the client application can request a new access token by sending a request to the token endpoint and providing the refresh token.[anchor|#_b955ac07-77f0-49cc-9b84-65b610fded88]
*<tt>api:concurrent&#95;access</tt>: Requests permission for the concurrent use of multiple types of web service APIs. If a user grants this scope to the application, the client application can access data in Acumatica ERP in concurrent mode. In this case, Acumatica ERP can maintain multiple sessions for the client application, managing session IDs through cookies. We recommend that the client application request this scope only if concurrent access is required for the client application. For details about the license limitations related to the number of sessions for client applications, see [HelpRoot_Install\License_Restrictions_APIUsers|License Restrictions for API Users].

|}
[anchor|#_39b81862-f1a8-4181-a936-3cfb18b20ee7]
==Receiving the Access Token==
 Acumatica ERP verifies the provided application credentials and issues the access token, which the client application should provide with each data request to Acumatica ERP. During authentication in Acumatica ERP, if the user has granted to the client application the <tt>offline&#95;access</tt> scope, Acumatica ERP issues the refresh token along with the access token. A successful response includes the following parameters in the response body.[anchor|#_2ff13112-a3d2-44d6-8f8c-86b2b0e81468]
{| class="checklist" | width="100%" 
|- 
!width="20%" ! Parameter
!width="80%" ! Description
|- 
| <tt>token&#95;type</tt>
| The type of the access token, which is ''Bearer''.
|- 
| <tt>access&#95;token</tt>
| The access token.
|- 
| <tt>expires&#95;in</tt>
| The period of time during which the access token is valid.
|- 
| <tt>refresh&#95;token</tt>
| The refresh token. The parameter is returned only if the <tt>offline&#95;access</tt> scope was granted.
|}[anchor|#_a21a282f-90fd-47cb-a9f5-597bf9aa36d3]
==Requesting Data with the Access Token==
The client application should include the access token in the {{Authorization}} header of each subsequent request to Acumatica ERP, as shown in the following HTTP example.{{{{GET /AcumaticaDB/entity/Default/6.00.001/SalesOrder/SO/000001 HTTP/1.1
Host: localhost
Authorization: Bearer cde78a99a2dc6388eb8c7242a90cf9bc
}}}}[anchor|#_296f3dcf-c878-4dde-88ee-d8b8a500a783]
==Refreshing the Access Token==
The access token is valid for a specific period of time, which is specified in the response that returns the access token. When the access token expires, the client application can request a new access token by providing the refresh token to the token endpoint. To request a new access token, the client application should have the following URL and the following parameters specified in the request body:[anchor|#_4a55201e-e27e-4b05-822d-dfbc07cf970e][anchor|#_a3cebf1b-38a4-4531-8b3a-12c39ff0cab5]
*'''URL'''
*:The client application can use one of the following options:[anchor|#_06c09b33-9aae-4178-b132-1f7f37360e60][anchor|#_7c49a8d8-1f8d-4f6c-9292-67f3e6e70a66]
**If the client application supports OpenID Connect Discovery, the client application can use the discovery endpoint address, which is {{https://<Acumatica ERP instance URL>/identity/}}. In this address, {{<Acumatica ERP instance URL>}} is the URL of the Acumatica ERP instance to which the client application is going to connect. 
**:For example, for a local Acumatica ERP instance with the name ''AcumaticaDB'', the discovery endpoint address is {{https://localhost/AcumaticaDB/identity/}}. 
**:((({S:Hint}We recommend that the client application use the discovery endpoint address, which eliminates the need to change the application if the authorization or token endpoint address changes.
)))[anchor|#_e34d6709-09fc-4562-af69-cba85691d4cd]
**The client application can directly use the token endpoint address, which is {{https://<Acumatica ERP instance URL>/identity/connect/token}}. In this endpoint, {{<Acumatica ERP instance URL>}} is the URL of the Acumatica ERP instance to which the client application is going to connect. 
**:For example, for a local Acumatica ERP instance with the name ''AcumaticaDB'', the token endpoint address is {{https://localhost/AcumaticaDB/identity/connect/token}}.
*'''Parameters in the Request Body'''
*:You specify the following parameters in the request body.[anchor|#_9c68a246-4503-4c42-ba61-53adb7832e43]
{| class="checklist" | width="100%" 
|- 
!width="20%" ! Parameter
!width="80%" ! Description
|- 
| <tt>grant&#95;type</tt>
| The type of the request, which must be set to {{refresh_token}} for the request of the refresh token.
|- 
| <tt>client&#95;id</tt>
| [anchor|#_e72a30d6-1aa1-4987-ae34-8c0c4534b785]The client ID that was assigned to the client application during the registration of the application in Acumatica ERP. The client ID must have the format in which the ID was generated during the registration of the application. That is, the client ID must include an auto-generated string and the ID of the company, such as {{88358B02-A48D-A50E-F710-39C1636C30F6@MyCompany}}. The client application will have access to the data of the company specified in the client ID.
|- 
| <tt>client&#95;secret</tt>
| [anchor|#_d1d8be31-8f1e-4182-8851-4eefaa9eb723]The value of the secret that was created for the client application during the registration of the application in Acumatica ERP.
|- 
| <tt>refresh&#95;token</tt>
| The refresh token that the client application received from the token endpoint along with the access token if the user granted the <tt>offline&#95;access</tt> scope to the client application.
|}
[anchor|#_884b6d07-7982-4fab-8e44-3c05eb8713bf]
==Receiving the New Access Token==
 Acumatica ERP verifies the provided application credentials and issues the new access token and the new refresh token. To request the access token once again, the client application should use the refresh token issued with the previous access token. A successful response includes the following parameters in the response body.[anchor|#_05282a79-b35f-4def-9456-826037f7649e]
{| class="checklist" | width="100%" 
|- 
!width="20%" ! Parameter
!width="80%" ! Description
|- 
| <tt>token&#95;type</tt>
| The type of the access token, which is ''Bearer''.
|- 
| <tt>access&#95;token</tt>
| The access token.
|- 
| <tt>expires&#95;in</tt>
| The period of time during which the access token is valid.
|- 
| <tt>refresh&#95;token</tt>
| The refresh token. 
|}[anchor|#_258abe2f-1482-45b1-ae69-11f6f370e317]
==Logging Out from Acumatica ERP==
To prevent issues with licenses that limit the number of concurrent user sessions, the client application should directly call the logout method of the Acumatica ERP web services API when the application finishes its work with Acumatica ERP.
==Related Articles==
*[https://tools.ietf.org/html/rfc6749|RFC 6749: The OAuth 2.0 Authorization Framework]]]></column>
			<column name="PlainText"><![CDATA[Resource Owner Password Credentials Flow When you implement OAuth 2.0 authorization in a client application to make the application     work with  Acumatica ERP,     you can use the resource owner password credentials flow.  With the resource owner password credentials flow, the credentials (username and password) of     the  Acumatica ERP     user are provided directly to the client application, which uses the credentials to obtain the     access token. When the access token expires, the client application can request a new access     token by providing a refresh token.  The following diagram illustrates the resource owner password credentials flow, whose steps     are described in the sections later in this topic. Resource owner password credentials flow For details on the OAuth 2.0 authorization mechanism, see the specification at  .  Granting Permission to a Client Application Before an OAuth 2.0 client application can work with  Acumatica ERP,     you must register this application in  Acumatica ERP     and provide credentials to the application, as described in  To Register a Client Application with the Resource Owner Password Flow. After the registration, you have the client ID and secret value of the client     application. According to the OAuth 2.0 specification, a secure connection between an OAuth                     2.0 client application and the  Acumatica ERP website with a Secure Socket Layer (SSL) certificate is required. Therefore,                     you have to set up the  Acumatica ERP website for HTTPS before the OAuth 2.0 client application can work with data                     in  Acumatica ERP. For more information, see  Setting Up an HTTPS Service in Web Server (IIS). When you are registering the client application, you have to be logged in to the                     tenant whose data the client application needs to access. Obtaining the Credentials of the  Acumatica ERP     User The client application should obtain the username and password of the applicable  Acumatica ERP     user, which can then be exchanged for an access token. Connecting to the Token Endpoint The client application connects to the token endpoint of  Acumatica ERP     by specifying the following URL and parameters in the request body: URL The client application can use one of                 the following options: If the client application supports OpenID Connect             Discovery, the client application can use the discovery endpoint address, which is                      https://< Acumatica ERP instance URL>/identity/ . In this address,  < Acumatica ERP instance URL>  is the URL of the  Acumatica ERP instance to which the client application is going to connect.  For example, for a                 local  Acumatica ERP instance with the name  AcumaticaDB , the discovery endpoint address is                      https://localhost/AcumaticaDB/identity/ .  We recommend                 that the client application use the discovery endpoint address, which eliminates the                 need to change the application if the authorization or token endpoint address                 changes. The client application can directly use the token             endpoint address, which is  https://< Acumatica ERP instance URL>/identity/connect/token . In this endpoint,  < Acumatica ERP instance URL>  is the URL of the  Acumatica ERP             instance to which the client application is going to connect.  For example, for a                 local  Acumatica ERP instance with the name  AcumaticaDB , the token endpoint address is                      https://localhost/AcumaticaDB/identity/connect/token . Parameters in the Request Body You specify the following parameters in the request         body. Parameter Description grant_type The type of the OAuth 2.0 flow, which must be set to  password  for              the resource owner password credentials flow. client_id The client ID that was assigned to the client             application during the registration of the application in  Acumatica ERP.             The client ID must have the format in which the ID was generated during the registration             of the application. That is, the client ID must include an auto-generated string and the             ID of the company, such as                  88358B02-A48D-A50E-F710-39C1636C30F6@MyCompany . The client             application will have access to the data of the company specified in the client ID. client_secret The value of the secret that was created for the             client application during the registration of the application in  Acumatica ERP. username The username of an  Acumatica ERP user.  password The password for the specified  username . scope The access scope that is requested by the client             application. The scope can be a combination of the following values, delimited by                 spaces: api : Requests access to a web             services API. If a user grants this scope to the application, the client application can             work with either or both of the following types of the web services API: contract-based             SOAP API or contract-based REST API.  If this scope is granted and the  api:concurrent_access                          scope is not granted,  Acumatica ERP manages the sessions of the application through tokens.  Acumatica ERP issues the first access token along with the session ID. If the client                         application requests a new access token by presenting a refresh token,  Acumatica ERP reuses the session ID that was issued for the first access token issued                         with the refresh token. That is, the system uses a single session for each                         access granted to the client application. For details about the license                         limitations related to the number of sessions for client applications, see                              License Restrictions for API Users. offline_access : Requests that a             refresh token be granted. If a user grants this scope to the application,  Acumatica ERP             issues to the client application a refresh token along with the access token. (For             information on issuing the access token, see  Connecting to the Token Endpoint in this topic.) When the access token has expired, the client             application can request a new access token by sending a request to the token endpoint             and providing the refresh token. api:concurrent_access : Requests             permission for the concurrent use of multiple types of web service APIs. If a user             grants this scope to the application, the client application can access data in  Acumatica ERP             in concurrent mode. In this case,  Acumatica ERP             can maintain multiple sessions for the client application, managing session IDs through             cookies. We recommend that the client application request this scope only if concurrent             access is required for the client application. For details about the license limitations             related to the number of sessions for client applications, see  License Restrictions for API Users. Receiving the Access Token  Acumatica ERP verifies                 the provided application credentials and issues the access token, which the client                 application should provide with each data request to  Acumatica ERP. During authentication in  Acumatica ERP, if the user has granted to the client application the                      offline_access  scope,  Acumatica ERP issues the refresh token along with the access token. A successful response                 includes the following parameters in the response body. Parameter Description token_type The type of the access token, which is  Bearer . access_token The access token. expires_in The period of time during which the access token is                                     valid. refresh_token The refresh token. The parameter is returned only if the                                          offline_access  scope was granted. Requesting Data with the Access Token The client application should include the access token in the  Authorization                  header of each subsequent request to  Acumatica ERP, as shown in the following HTTP                 example. GET /AcumaticaDB/entity/Default/6.00.001/SalesOrder/SO/000001 HTTP/1.1
Host: localhost
Authorization: Bearer cde78a99a2dc6388eb8c7242a90cf9bc Refreshing the Access Token The access token is valid for a specific period of time, which is specified in the                 response that returns the access token. When the access token expires, the client                 application can request a new access token by providing the refresh token to the                 token endpoint. To request a new access token, the client application should have                 the following URL and the following parameters specified in the request body: URL The client application can use one of                 the following options: If the client application supports OpenID Connect             Discovery, the client application can use the discovery endpoint address, which is                      https://< Acumatica ERP instance URL>/identity/ . In this address,  < Acumatica ERP instance URL>  is the URL of the  Acumatica ERP instance to which the client application is going to connect.  For example, for a                 local  Acumatica ERP instance with the name  AcumaticaDB , the discovery endpoint address is                      https://localhost/AcumaticaDB/identity/ .  We recommend                 that the client application use the discovery endpoint address, which eliminates the                 need to change the application if the authorization or token endpoint address                 changes. The client application can directly use the token             endpoint address, which is  https://< Acumatica ERP instance URL>/identity/connect/token . In this endpoint,  < Acumatica ERP instance URL>  is the URL of the  Acumatica ERP             instance to which the client application is going to connect.  For example, for a                 local  Acumatica ERP instance with the name  AcumaticaDB , the token endpoint address is                      https://localhost/AcumaticaDB/identity/connect/token . Parameters in the Request Body You specify the following parameters in                         the request body. Parameter Description grant_type The type of the request, which must be set to                                                  refresh_token  for the request of                                             the refresh token. client_id The client ID that was assigned to the client             application during the registration of the application in  Acumatica ERP.             The client ID must have the format in which the ID was generated during the registration             of the application. That is, the client ID must include an auto-generated string and the             ID of the company, such as                  88358B02-A48D-A50E-F710-39C1636C30F6@MyCompany . The client             application will have access to the data of the company specified in the client ID. client_secret The value of the secret that was created for the             client application during the registration of the application in  Acumatica ERP. refresh_token The refresh token that the client application                                             received from the token endpoint along with the access                                             token if the user granted the                                                  offline_access  scope to the                                             client application. Receiving the New Access Token  Acumatica ERP verifies                 the provided application credentials and issues the new access token and the new                 refresh token. To request the access token once again, the client application should                 use the refresh token issued with the previous access token. A successful response                 includes the following parameters in the response body. Parameter Description token_type The type of the access token, which is  Bearer . access_token The access token. expires_in The period of time during which the access token is                                     valid. refresh_token The refresh token.  Logging Out from  Acumatica ERPTo prevent issues with licenses that limit the number of concurrent user sessions, the client                 application should directly call the logout method of the  Acumatica ERP web services API when the application finishes its work with  Acumatica ERP. RFC 6749: The OAuth 2.0 Authorization Framework ]]></column>
		</row>
		<row PageID="f7add280-bc3c-4e73-b242-580c94af10a2" Language="en-US" PageRevisionID="1" PlainText="Comparison of the Flows The table below summarizes the characteristics of the authorization flows supported by  Acumatica ERP. Characteristic Authorization Code Implicit Resource Owner Password Credentials The access token is returned from the authorization endpoint. No Yes No The access token is returned from the token endpoint. Yes No Yes The refresh token can be issued. Yes No Yes The client application has access to  Acumatica ERP credentials (username and password). No No Yes The client application is authenticated in  Acumatica ERP (that is, the client application provides the client ID and client secret).  Yes No Yes " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="0d2649f0-49dc-ed39-9c25-4c6e4be1edef" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The table below summarizes the characteristics of the authorization flows supported by Acumatica ERP.[anchor|#_1adca54a-6e18-433d-a7c0-f91424738973]
{| class="checklist" | width="100%" 
|- 
!width="40%" ! Characteristic
!width="20%" ! Authorization Code
!width="20%" ! Implicit
!width="20%" ! Resource Owner Password Credentials
|- 
| The access token is returned from the authorization endpoint.
| No
| Yes
| No
|- 
| The access token is returned from the token endpoint.
| Yes
| No
| Yes
|- 
| The refresh token can be issued.
| Yes
| No
| Yes
|- 
| The client application has access to Acumatica ERP credentials (username and password).
| No
| No
| Yes
|- 
| The client application is authenticated in Acumatica ERP (that is, the client application provides the client ID and client secret). 
| Yes
| No
| Yes
|}
==Related Articles==
*[HelpRoot_Dev_Integration\IS__con_OAuth_Authorization_Code_Flow|Authorization Code Flow]
*[HelpRoot_Dev_Integration\IS__con_OAuth_Implicit_Flow|Implicit Flow]
*[HelpRoot_Dev_Integration\IS__con_OAuth_Resource_Owner_Flow|Resource Owner Password Credentials Flow]]]></column>
		</row>
		<row PageID="5e30ec61-7b02-495f-9e6c-1f3bfce4ad45" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="97d6bd4a-1919-1189-2992-94c99f33c231" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You use the [HelpRoot_FormReference\SM_30_30_10|Connected Applications] ([~/?ScreenId=SM303010|SM303010]) form to register an OAuth 2.0 or OpenID Connect client application.{br}

To register a client application in Acumatica ERP, you need to know the OAuth 2.0 flow that this application implements. For more information on the flows, see [HelpRoot_Dev_Integration\IS__con_OAuth_Authorization_Code_Flow|Authorization Code Flow], [HelpRoot_Dev_Integration\IS__con_OAuth_Implicit_Flow|Implicit Flow], and [HelpRoot_Dev_Integration\IS__con_OAuth_Resource_Owner_Flow|Resource Owner Password Credentials Flow].{br}

[anchor|#_7cd14096-9990-4ab4-a069-cb969000cd56]((({S:Hint}[anchor|#_37436c0b-3d7e-46b7-aa1d-0b827c7f83a0]
*According to the OAuth 2.0 specification, a secure connection between an OAuth 2.0 client application and the Acumatica ERP website with a Secure Socket Layer (SSL) certificate is required. Therefore, you have to set up the Acumatica ERP website for HTTPS before the OAuth 2.0 client application can work with data in Acumatica ERP. For more information, see [HelpRoot_Install\how__Enable_Https|Setting Up an HTTPS Service in Web Server (IIS)].
*When you are registering the client application, you have to be logged in to the tenant whose data the client application needs to access.
)))[anchor|#_d68c1c13-bf02-4b79-988e-fbd7b1767a43]
==To Register a Client Application with the Authorization Code Flow==[anchor|#_ff6f654f-83d6-4591-b2cd-24d498e21916][anchor|#_79736e0e-a681-4791-86ac-dabb7fef3023]
#On the '''System''' tab, click '''Integration'''. In the navigation pane, navigate to '''Configure''' > '''Connected Applications'''.[anchor|#_51eb84dc-b78a-4707-8920-f04a61f0543f]
#In the '''Client Name''' box, type the name of the registered application.
#:((({S:Hint}Leave the '''Client ID''' box blank. The system will fill it in when you save your changes on the form.
)))
#In the '''OAuth 2.0 Flow''' box, select ''Authorization Code''.[anchor|#_c341c238-73ce-42f2-9221-d4f1f98fc4a7]
#On the '''Secrets''' tab, do the following for each client secret you want to add:
##On the tab toolbar, click '''Add Shared Secret'''. The '''Add Shared Secret''' dialog box opens.
##In the '''Description''' box, type the description of the shared secret.
##Optional: In the '''Expires On (UTC)''' box, enter the date and time on which the secret expires.
##Copy and save the value that is displayed in the '''Value''' box. The client application should use this client secret for authentication in Acumatica ERP.
##:((({S:Hint}For security reasons, the value of the secret is displayed only once: when you create the secret by invoking this dialog box.
)))
##Click '''OK''' to save the secret and close the dialog box.[anchor|#_51f02a36-a7d6-4c82-8278-3b990666ee63]
#On the '''Redirect URIs''' tab, do the following for each redirect URI you want to add:
##On the tab toolbar, click '''Add Row'''.
##In the '''Redirect URI''' column of the new row, type the exact redirect URI to which Acumatica ERP should redirect the client application after the client application has been authorized. The redirect URI must be absolute and must not have the fragment part (the part preceded with #).[anchor|#_b80f34fd-356e-4c83-9b11-625a45d4101e]
#On the form toolbar, click '''Save'''. Notice that the client ID has been generated in the '''Client ID''' box. The client application should use this client ID along with the client secret for authentication in Acumatica ERP.
[anchor|#_3246c4cd-a541-4f63-b928-66b7b411e047]
==To Register a Client Application with the Implicit Flow==[anchor|#_817b544b-fb42-439a-9ae1-3191ee0f08b3][anchor|#_3779baae-c603-4d4a-8141-9158881162e2]
#On the '''System''' tab, click '''Integration'''. In the navigation pane, navigate to '''Configure''' > '''Connected Applications'''.[anchor|#_ccb6d60f-4760-45c4-abc4-3d77e1958082]
#In the '''Client Name''' box, type the name of the registered application.
#:((({S:Hint}Leave the '''Client ID''' box blank. The system will fill it in when you save your changes on the form.
)))
#In the '''OAuth 2.0 Flow''' box, select ''Implicit''.[anchor|#_3037f747-4d6e-4db2-89eb-bcbf83398ef6]
#On the '''Redirect URIs''' tab, do the following for each redirect URI you want to add:
##On the tab toolbar, click '''Add Row'''.
##In the '''Redirect URI''' column of the new row, type the exact redirect URI to which Acumatica ERP should redirect the client application after the client application has been authorized. The redirect URI must be absolute and must not have the fragment part (the part preceded with #).
#On the form toolbar, click '''Save'''. Notice that the client ID has been generated in the '''Client ID''' box. You should use this client ID to connect the client application to the authorization endpoint of Acumatica ERP.
[anchor|#_97041b21-9ffa-4771-bf36-34c0cc61a593]
==To Register a Client Application with the Resource Owner Password Flow==[anchor|#_d0ff32a3-7cae-4aaa-aff8-4140008ab610][anchor|#_c3028e1f-35fd-43ff-89cc-70c959b11162]
#On the '''System''' tab, click '''Integration'''. In the navigation pane, navigate to '''Configure''' > '''Connected Applications'''.[anchor|#_3e34e7bc-50c3-4893-b6b7-9d0b0d61515e]
#In the '''Client Name''' box, type the name of the registered application.
#:((({S:Hint}Leave the '''Client ID''' box blank. The system will fill it in when you save your changes on the form.
)))
#In the '''OAuth 2.0 Flow''' box, select ''Resource Owner Password Credentials''.[anchor|#_ba1fcb26-17dd-4d92-814d-1224f5349d00]
#On the '''Secrets''' tab, do the following for each client secret you want to add:
##On the tab toolbar, click '''Add Shared Secret'''. The '''Add Shared Secret''' dialog box opens.
##In the '''Description''' box, type the description of the shared secret.
##Optional: In the '''Expires On (UTC)''' box, enter the date and time on which the secret expires.
##Copy and save the value that is displayed in the '''Value''' box. The client application should use this client secret for authentication in Acumatica ERP.
##:((({S:Hint}For security reasons, the value of the secret is displayed only once: when you create the secret by invoking this dialog box.
)))
##Click '''OK''' to save the secret and close the dialog box.[anchor|#_d1f0f6d0-c58c-4bcc-820a-3fe646ea8b6a]
#On the form toolbar, click '''Save'''. Notice that the client ID has been generated in the '''Client ID''' box. The client application should use this client ID along with the client secret for authentication in Acumatica ERP.

==Related Articles==
*[HelpRoot_FormReference\SM_30_30_10|Connected Applications] ([~/?ScreenId=SM303010|SM303010])]]></column>
			<column name="PlainText"><![CDATA[To Register a Client Application You use the   ([~/?ScreenId=SM303010|SM303010]) Connected Applications                 (SM303010) form to register an OAuth 2.0 or OpenID Connect client                 application. To register a client application in  Acumatica ERP, you need to know the OAuth 2.0 flow that this application implements. For more                 information on the flows, see  Authorization Code Flow,  Implicit Flow,                 and  Resource Owner Password Credentials Flow. According to the OAuth 2.0 specification, a secure connection between an OAuth                     2.0 client application and the  Acumatica ERP website with a Secure Socket Layer (SSL) certificate is required. Therefore,                     you have to set up the  Acumatica ERP website for HTTPS before the OAuth 2.0 client application can work with data                     in  Acumatica ERP. For more information, see  Setting Up an HTTPS Service in Web Server (IIS). When you are registering the client application, you have to be logged in to the                     tenant whose data the client application needs to access. To Register a Client Application with the Authorization Code Flow On the  System  tab, click                  Integration . In the navigation pane, navigate to  Configure Connected Applications . In the  Client Name  box, type             the name of the registered application. Leave the  Client ID                  box blank. The system will fill it in when you save your changes on the             form. In the  OAuth 2.0 Flow  box, select                          Authorization Code . On the  Secrets  tab, do the             following for each client secret you want to add: On the tab toolbar, click  Add Shared Secret . The                          Add Shared Secret  dialog box opens. In the  Description  box, type the description of the                     shared secret. Optional: In the  Expires On (UTC)  box, enter the date and                     time on which the secret expires. Copy and save the value that is displayed in the  Value                      box. The client application should use this client secret for authentication in                          Acumatica ERP. For security reasons, the value of the secret is                         displayed only once: when you create the secret by invoking this dialog                         box. Click  OK  to save the secret and close the dialog                     box. On the  Redirect URIs  tab, do             the following for each redirect URI you want to add: On the tab toolbar, click  Add Row . In the  Redirect URI  column of the new row, type the exact                     redirect URI to which  Acumatica ERP should redirect the client application after the client application has been                     authorized. The redirect URI must be absolute and must not have the fragment                     part (the part preceded with #). On the form toolbar, click                  Save . Notice that the client ID has been generated in the                  Client ID  box. The client application should use this client             ID along with the client secret for authentication in  Acumatica ERP. To Register a Client Application with the Implicit Flow On the  System  tab, click                  Integration . In the navigation pane, navigate to  Configure Connected Applications . In the  Client Name  box, type             the name of the registered application. Leave the  Client ID                  box blank. The system will fill it in when you save your changes on the             form. In the  OAuth 2.0 Flow  box, select  Implicit . On the  Redirect URIs  tab, do             the following for each redirect URI you want to add: On the tab toolbar, click  Add Row . In the  Redirect URI  column of the new row, type the exact                     redirect URI to which  Acumatica ERP should redirect the client application after the client application has been                     authorized. The redirect URI must be absolute and must not have the fragment                     part (the part preceded with #). On the form toolbar, click  Save . Notice that the client                     ID has been generated in the  Client ID  box. You should                     use this client ID to connect the client application to the authorization                     endpoint of  Acumatica ERP. To Register a Client Application with the Resource Owner Password Flow On the  System  tab, click                  Integration . In the navigation pane, navigate to  Configure Connected Applications . In the  Client Name  box, type             the name of the registered application. Leave the  Client ID                  box blank. The system will fill it in when you save your changes on the             form. In the  OAuth 2.0 Flow  box, select                      Resource Owner Password Credentials . On the  Secrets  tab, do the             following for each client secret you want to add: On the tab toolbar, click  Add Shared Secret . The                          Add Shared Secret  dialog box opens. In the  Description  box, type the description of the                     shared secret. Optional: In the  Expires On (UTC)  box, enter the date and                     time on which the secret expires. Copy and save the value that is displayed in the  Value                      box. The client application should use this client secret for authentication in                          Acumatica ERP. For security reasons, the value of the secret is                         displayed only once: when you create the secret by invoking this dialog                         box. Click  OK  to save the secret and close the dialog                     box. On the form toolbar, click                  Save . Notice that the client ID has been generated in the                  Client ID  box. The client application should use this client             ID along with the client secret for authentication in  Acumatica ERP.  ([~/?ScreenId=SM303010|SM303010]) ]]></column>
		</row>
		<row PageID="45bb000c-5628-46fa-9844-3b74507c5280" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="4003762a-0fe8-f05e-515b-c176b7b57d9a" RecordSourceID="22377">
			<column name="Content"><![CDATA[
To revoke the access of an OAuth 2.0 or OpenID Connect client application, you use either the [HelpRoot_FormReference\SM_30_30_10|Connected Applications] ([~/?ScreenId=SM303010|SM303010]) form or the [HelpRoot_GettingStarted\SM_20_30_10|User Profile] ([~/?ScreenId=SM203010|SM203010]) form. {br}

On the [HelpRoot_FormReference\SM_30_30_10|Connected Applications] form, you can revoke the access of any application registered in the current company. On this form, you revoke all access granted to the application. {br}

On the [HelpRoot_GettingStarted\SM_20_30_10|User Profile] form, you can revoke the access of any application to which you (that is, the user account to which you are logged in) have granted access. Any access granted to this application by other users remains unchanged.
==To Revoke All Access of a Client Application==[anchor|#_c765beed-6fd2-4f85-9e4d-d591524db7fb]
#On the '''System''' tab, click '''Integration'''. In the navigation pane, navigate to '''Configure''' > '''Connected Applications'''.
#In the '''Client ID '''box, select the application whose access you want to revoke.
#On the form toolbar, click '''Revoke Access'''.
#In the message box that opens, click '''OK''' to confirm that you want to revoke the access of the application.
#:((({S:Hint}After you have confirmed that you want to revoke access, all access tokens are removed from the Acumatica ERP database, and these tokens cannot be used to access data in Acumatica ERP. However, the client secrets remain valid until their expiration dates (if applicable), and the application can use these secrets to request a new access token.
)))

==To Revoke Access You Have Provided==[anchor|#_268dd89d-5596-432c-9f12-542c59fab61f]
#In the info area (in the upper-right corner of the screen), click your user name, and then click '''User Profile'''.
#On the toolbar of the '''User Profile''' form, which opens, click '''View Connected Applications'''. The list of applications to which you have granted access is displayed on the Client Application Permissions webpage.
#For the application whose access you want to revoke, click '''Revoke Access'''.
#:((({S:Hint}After you have revoked access, the access tokens that were created when you granted access to the application are removed from the Acumatica ERP database, and these tokens cannot be used to access data in Acumatica ERP. However, the client secrets remain valid until their expiration dates (if applicable), and the application can use these secrets to request a new access token.
)))
]]></column>
			<column name="PlainText"><![CDATA[To Revoke the Access of a Connected Application To revoke the access of an OAuth 2.0 or OpenID Connect client application, you use either the        ([~/?ScreenId=SM303010|SM303010]) Connected Applications (SM303010) form or the        ([~/?ScreenId=SM203010|SM203010]) User Profile (SM203010) form.  On the   ([~/?ScreenId=SM303010|SM303010]) Connected Applications form, you can     revoke the access of any application registered in the current company. On this form, you revoke     all access granted to the application.  On the   ([~/?ScreenId=SM203010|SM203010]) User Profile form, you can     revoke the access of any application to which you (that is, the user account to which you are     logged in) have granted access. Any access granted to this application by other users remains     unchanged. To Revoke All Access of a Client Application On the  System  tab, click  Integration . In the      navigation pane, navigate to  Configure Connected Applications . In the  Client ID  box, select the application whose access you want to      revoke. On the form toolbar, click  Revoke Access . In the message box that opens, click  OK  to confirm that you want to      revoke the access of the application. After you have confirmed that you want to revoke       access, all access tokens are removed from the  Acumatica ERP       database, and these tokens cannot be used to access data in  Acumatica ERP. However, the client secrets remain valid until their expiration dates (if applicable), and       the application can use these secrets to request a new access token. To Revoke Access You Have Provided In the info area (in the upper-right corner of the screen), click your user name, and then      click  User Profile . On the toolbar of the  User Profile  form, which opens, click        View Connected Applications . The list of applications to which you have      granted access is displayed on the Client Application Permissions webpage. For the application whose access you want to revoke, click  Revoke       Access . After you have revoked access, the access tokens that were created       when you granted access to the application are removed from the  Acumatica ERP       database, and these tokens cannot be used to access data in  Acumatica ERP. However, the client secrets remain valid until their expiration dates (if applicable), and       the application can use these secrets to request a new access token. ]]></column>
		</row>
		<row PageID="91dda8ed-5e92-48a5-a176-9a255506d0d6" Language="en-US" PageRevisionID="1" PlainText="Configuring the Contract-Based REST and SOAP API  Acumatica ERP     provides web services for integration with external systems. Through the web services of  Acumatica ERP,     external systems can get data records from  Acumatica ERP,     process these records, and save new or updated records to  Acumatica ERP. To access these web services, you can use the contract-based representational state transfer     (REST) API, the contract-based SOAP application programming interface (API), and the     screen-based SOAP API. In this chapter, you will find the main concepts that are related to the     contract-based SOAP API and the contract-based REST API. In This Chapter Contract-Based Web Services APIEndpoints and ContractsAPI Entities, Fields, and ActionsCustom FieldsCustom Endpoints and Endpoint ExtensionsNaming Rules for EndpointsComparison of Contract VersionsComparison of System EndpointsTo Create a Custom EndpointTo Extend an Existing EndpointTo Validate an Endpoint" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="2405e4d2-12ee-2624-465e-b244ac3d61b2" RecordSourceID="22377">
			<column name="Content"><![CDATA[
 Acumatica ERP provides web services for integration with external systems. Through the web services of Acumatica ERP, external systems can get data records from Acumatica ERP, process these records, and save new or updated records to Acumatica ERP.{br}

To access these web services, you can use the contract-based representational state transfer (REST) API, the contract-based SOAP application programming interface (API), and the screen-based SOAP API. In this chapter, you will find the main concepts that are related to the contract-based SOAP API and the contract-based REST API.
==In This Chapter==[anchor|#_569c18a1-764b-4b17-9b27-6dc92ef863b8]
{| class="checklist invisiblechecklist" | width="100%" 
|- 
| 
*[HelpRoot_Dev_Integration\IS__con_CB_API|Contract-Based Web Services API]
*[HelpRoot_Dev_Integration\IS__con_CB_Endpoints_and_Contracts|Endpoints and Contracts]
*[HelpRoot_Dev_Integration\IS__con_CB_API_Entities_Fields_Actions|API Entities, Fields, and Actions]
*[HelpRoot_Dev_Integration\IS__con_CB_Custom_Fields|Custom Fields]
*[HelpRoot_Dev_Integration\IS__con_CB_Endpoint_Extensions|Custom Endpoints and Endpoint Extensions]
*[HelpRoot_Dev_Integration\IS__con_Endpoint_Naming_Rules|Naming Rules for Endpoints]
*[HelpRoot_Dev_Integration\IS__con_Comparison_of_Contract_Versions|Comparison of Contract Versions]
*[HelpRoot_Dev_Integration\IS__con_Comparison_of_Endpoints|Comparison of System Endpoints]

| 
*[HelpRoot_Dev_Integration\IS__how_Create_Endpoint|To Create a Custom Endpoint]
*[HelpRoot_Dev_Integration\IS__how_Extend_Endpoint|To Extend an Existing Endpoint]
*[HelpRoot_Dev_Integration\IS__how_Validate_Endpoint|To Validate an Endpoint]

|}]]></column>
		</row>
		<row PageID="735fad82-9cf3-4a2c-8538-1c8344aba844" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="fd715812-700a-f690-efa1-f9b5b030307b" RecordSourceID="22377">
			<column name="Content"><![CDATA[
Contract-based web services API operates with business logic objects that do not depend on Acumatica ERP forms and their properties and methods. (In this context, ''contract-based'' means based on the object model the web services API provides.) Each contract of the web service is fixed and does not change based on system customization, localization, or any other changes made to Acumatica ERP.{br}

For example, suppose that the contract of the web service contains the definition of the ''CustomerID'' field, which accesses the '''Customer ID''' element on the [HelpRoot_FormReference\AR_30_30_00|Customers] ([~/?ScreenId=AR303000|AR303000]) form. If you have changed the name of the '''Customer ID''' element to '''Customer Identifier''' in a customization project, the contract of the web service remains fully functional and does not require update; also, your application requires no further modifications. You can access the '''Customer Identifier''' element on the form through the same ''CustomerID'' field.
==REST and SOAP Interfaces of the Contract-Based Web Services==
You can work with the contract-based web services through either the REST interface or the SOAP interface. {br}

To use the contract-based REST or SOAP API in your application, first of all, you should decide which endpoint to use. You can find more information on the endpoints and their contracts in [HelpRoot_Dev_Integration\IS__con_CB_Endpoints_and_Contracts|Endpoints and Contracts]. {br}

After that, you can use the REST API in your application. For details on the REST API, see [HelpRoot_Dev_Integration\IS__mng_Work_with_Contract_Based_REST|Working with the Contract-Based REST API]. For the REST API reference, see [HelpRoot_Dev_Integration\IS__IS_CB_REST_API_Reference|Contract-Based REST API Reference].{br}

After you have selected the endpoint, to use the contract-based SOAP API in your application, you should obtain the WSDL description of the contract of this endpoint, import the WSDL file into your development environment (as described in [HelpRoot_Dev_Integration\IS__how_CB_Configure_Application|To Configure the Client Application]), and start developing your application. You can find the description of the SOAP API methods in [HelpRoot_Dev_Integration\IS__IS_CB_API_Reference|Contract-Based SOAP API Reference]. {br}

You can find examples of how to use the contract-based SOAP and REST API in the [https://openuni.acumatica.com/courses/integration/i210-contract-based-web-services/|I210 Integration: Contract-Based Web Services] training course.
==Related Articles==
*[HelpRoot_Dev_Integration\IS__con_CB_Endpoints_and_Contracts|Endpoints and Contracts]
*[HelpRoot_Dev_Integration\IS__con_CB_API_Entities_Fields_Actions|API Entities, Fields, and Actions]]]></column>
			<column name="PlainText"><![CDATA[Contract-Based Web Services API Contract-based web services API operates with business logic objects that do not depend on  Acumatica ERP     forms and their properties and methods. (In this context,  contract-based  means based on     the object model the web services API provides.) Each contract of the web service is fixed and     does not change based on system customization, localization, or any other changes made to  Acumatica ERP. For example, suppose that the contract of the web service contains the definition of the       CustomerID  field, which accesses the  Customer ID  element on the        ([~/?ScreenId=AR303000|AR303000]) Customers (AR303000) form. If you have changed the name     of the  Customer ID  element to  Customer Identifier      in a customization project, the contract of the web service remains fully functional and does     not require update; also, your application requires no further modifications. You can access the       Customer Identifier  element on the form through the same       CustomerID  field. REST and SOAP Interfaces of the Contract-Based Web Services You can work with the contract-based web services through either the REST interface or the     SOAP interface.  To use the contract-based REST or SOAP API in your application, first of all, you should     decide which endpoint to use. You can find more information on the endpoints and their contracts     in  Endpoints and Contracts.  After that, you can use the REST API in your application. For details on the REST API, see       Working with the Contract-Based REST API. For the REST API reference, see  Contract-Based REST API Reference. After you have selected the endpoint, to use the contract-based SOAP API in your application,     you should obtain the WSDL description of the contract of this endpoint, import the WSDL file     into your development environment (as described in  To Configure the Client Application), and     start developing your application. You can find the description of the SOAP API methods in  Contract-Based SOAP API Reference.  You can find examples of how to use the contract-based SOAP and REST API in the  I210 Integration: Contract-Based Web Services I210 Integration: Contract-Based Web Services training     course. ]]></column>
		</row>
		<row PageID="1a9d6f7e-8546-426b-b1ff-d712fbcfbc7b" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="45da522d-b71f-05f8-7534-cd2b993937d7" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You access the contract-based REST and SOAP API through endpoints that you configure on the [HelpRoot_FormReference\SM_20_70_60|Web Service Endpoints] ([~/?ScreenId=SM207060|SM207060]) form. 
==Endpoints and Contracts==
An ''endpoint'' is an entry point to the Acumatica ERP web services. For each endpoint that a web service API provides, a ''contract'' of the endpoint defines the entities, with their actions and fields, that are available through the endpoint and the methods that you can use to work with these entities. {br}

The endpoint is identified by the URL that you use to access the web services API. You can see the name and version of an endpoint in its URL. For example, the endpoint {{http://localhost/AcumaticaDB/entity/Default/17.200.001?wsdl}} has the version ''17.200.001'' and the name ''Default''. The version of an endpoint defines the list of entities, with their actions and fields you can work with through this endpoint.{br}

The contract of an endpoint is identified by contract version. The version of a contract defines the list of methods for working with entities that you can use when working with Acumatica ERP through the endpoint with this version of the contract. For the difference between the contract versions, see [HelpRoot_Dev_Integration\IS__con_Comparison_of_Contract_Versions|Comparison of Contract Versions].[anchor|#_cdff7478-a930-457b-8eed-c24ceb3ae738]((({S:Hint}Contract Version 1 is not supported starting from Acumatica ERP 2018 R2.
)))
==System and Custom Endpoints==
You can use two types of endpoints to access the web services: [anchor|#ul_xtg_kl3_ss]
*'''System endpoint''': The system endpoints are precofigured in the system and have the ''Default'' name. Each of these endpoints has a predefined contract, which includes the API that is preconfigured in the system. You cannot change the contract of a system endpoint. 
*:If the API that is available in the contract of a system endpoint is sufficient for the requirements of your application, you should use the system endpoint for accessing Acumatica ERP web services. You can use the same system endpoint in future versions of Acumatica ERP. For example, if you use the system endpoint with Version 17.200.001 and Contract Version 3 to access Acumatica ERP 2017 R2, you can use the same endpoint to access future versions of Acumatica ERP. [anchor|#_54ff4149-3a60-4f26-9227-1b3aed2a3356]((({S:Hint}Acumatica ERP can include endpoints preconfigured in the system that have the names other than ''Default''. The system uses these endpoints internally. We do not recommend that you use these endpoints.
)))
*'''Custom endpoint''': By default, there are no custom endpoints in the system. If the API provided by the system endpoint is not sufficient for the requirements of your application, you can create a custom endpoint. You can configure the contract of a custom endpoint by adding the needed elements of the API to the contract. 
*:If you need to use the same custom endpoint in future versions of Acumatica ERP, you should maintain it in future versions.
{br}

The following diagram provides an example of multiple endpoints configured in the system. The diagram shows two system endpoints with Contract Versions 2 and 3 and two custom endpoints with the names ''EastEndpoint'' and ''WestEndpoint''. [anchor|#fig_bhf_rxv_ts][anchor|#image_wmz_5xv_ts][image:UserGuide/Images/WebServiceEndpoints.png|popup|Contract-based web services|450px]]]></column>
			<column name="PlainText"><![CDATA[Endpoints and Contracts You access the contract-based REST and SOAP API through endpoints that you configure on the        ([~/?ScreenId=SM207060|SM207060]) Web Service Endpoints (SM207060) form.  Endpoints and Contracts An  endpoint  is an entry point to the  Acumatica ERP     web services. For each endpoint that a web service API provides, a  contract  of the     endpoint defines the entities, with their actions and fields, that are available through the     endpoint and the methods that you can use to work with these entities.  The endpoint is identified by the URL that you use to access the web services API. You can see     the name and version of an endpoint in its URL. For example, the endpoint       http://localhost/AcumaticaDB/entity/Default/17.200.001?wsdl  has the version       17.200.001  and the name  Default . The version of an endpoint defines the list of     entities, with their actions and fields you can work with through this endpoint. The contract of an endpoint is identified by contract version. The version of a contract     defines the list of methods for working with entities that you can use when working with  Acumatica ERP     through the endpoint with this version of the contract. For the difference between the contract     versions, see  Comparison of Contract Versions. Contract Version 1 is not supported starting from  Acumatica ERP 2018 R2. System and Custom Endpoints You can use two types of endpoints to access the web services:  System endpoint : The system endpoints are precofigured in the system and have the         Default  name. Each of these endpoints has a predefined contract, which includes the       API that is preconfigured in the system. You cannot change the contract of a system endpoint.         If the API that is available in the contract of a system endpoint is sufficient for the        requirements of your application, you should use the system endpoint for accessing  Acumatica ERP web services. You can use the same system endpoint in future versions of  Acumatica ERP. For example, if you use the system endpoint with Version 17.200.001 and Contract Version        3 to access  Acumatica ERP 2017 R2, you can use the same endpoint to access future versions of  Acumatica ERP.  Acumatica ERP can include endpoints preconfigured in the system that have the names other than  Default . The system uses these endpoints internally. We do not recommend that you use these endpoints. Custom endpoint : By default, there are no custom endpoints in the system. If the API       provided by the system endpoint is not sufficient for the requirements of your application,       you can create a custom endpoint. You can configure the contract of a custom endpoint by       adding the needed elements of the API to the contract.  If you need to use the same custom        endpoint in future versions of  Acumatica ERP, you should maintain it in future versions. The following diagram provides an example of multiple endpoints configured in the system. The     diagram shows two system endpoints with Contract Versions 2 and 3 and two custom endpoints with     the names  EastEndpoint  and  WestEndpoint .  Contract-based web services ]]></column>
		</row>
		<row PageID="40efd1f2-7ebc-49a5-b854-1f04d18357ff" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="9a258902-9a87-6cc2-9163-168ec800cd3f" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The contract of an endpoint defines the following elements of the contract-based web services API:[anchor|#ul_ksn_ppj_qs]
*'''Entities''': An entity corresponds to a business logic object that you are going to work with. For example, the contract of a system endpoint includes the ''Warehouse'' entity, which represents a warehouse and holds the data related to the warehouse. This entity is associated with the [HelpRoot_FormReference\IN_20_40_00|Warehouses] ([~/?ScreenId=IN204000|IN204000]) form. 
*:For a custom endpoint, if you are going to use an entity to transfer data to or from Acumatica ERP, you should associate this entity with a particular Acumatica ERP form. For example, you can create a ''Vendor'' entity, which represents a vendor. This entity is associated with the [HelpRoot_FormReference\AP_30_30_00|Vendors] ([~/?ScreenId=AP303000|AP303000]) form.
*'''Fields''': The fields of an entity correspond to the parameters of a business logic object. For example, the ''Warehouse'' entity that is available through the system endpoint has the ''Description'' and ''WarehouseID'' fields, among others. In the contract, these fields are mapped to the '''Description''' and the '''Warehouse ID''' elements of the Summary area of the [HelpRoot_FormReference\IN_20_40_00|Warehouses] form. 
*:For a custom endpoint, if you need to connect the field with a particular element on an Acumatica ERP form, you should map the field to this element. For example, if you have created the ''Vendor'' entity, which designates a vendor, you can add the field ''VendorID'' to the entity and connect this field with the '''Vendor ID''' element of the Summary area of the [HelpRoot_FormReference\AP_30_30_00|Vendors] form. 
*'''Actions''': The actions of an entity correspond to the actions that can be applied to a business logic object. For example, the ''TransferOrder'' entity, which is available through the system endpoint, has the ''ReleaseTransferOrder'' action. This action corresponds to the '''Release''' button on the form toolbar of the [HelpRoot_FormReference\IN_30_40_00|Transfers] ([~/?ScreenId=IN304000|IN304000]) form. 
*:For a custom endpoint, if you need to use an Acumatica ERP action, you should add this action to the contract of the custom endpoint with the needed parameters. For example, suppose you want to add an action that changes the customer ID of an existing customer, you can add the action ''ChangeID'' and map it to the '''Change ID''' action, which is available on the [HelpRoot_FormReference\AR_30_30_00|Customers] form. The new action should have one parameter, which specifies the new ID of a customer as the '''Change ID''' action has.
{br}

When you add a new entity to a contract, you should specify the type of the entity, which can be one of the following:[anchor|#ul_z5f_zgk_ss]
*''Top-Level'': Entities of this type are the main entities of the contract. A top-level entity usually corresponds to an Acumatica ERP form. For example, the ''Warehouse'' entity of the contract of the system endpoint is a top-level entity that corresponds to the [HelpRoot_FormReference\IN_20_40_00|Warehouses] form. 
*''Detail'': Detail entities correspond to the detail lines of a master-detail form. A detail entity exists only as a part of a top-level entity. For example, the top-level entity ''SalesOrder'' of the contract of the system endpoint contains the detail entity ''SalesOrderDetail'', which corresponds to a detail line on the '''Document Details''' tab of the [HelpRoot_FormReference\SO_30_10_00|Sales Orders] ([~/?ScreenId=SO301000|SO301000]) form, as shown in the following screenshot.[anchor|#image_hxh_ppv_ts][image:UserGuide/Images/WebServiceEndpoints_DetailEntity.png|popup|Detail entity|450px]
*''Linked'': Linked entities are supplementary entities of a contract. A linked entity usually corresponds to a part of an Acumatica ERP form and is related to one top-level entity of the contract or multiple such entities. For example, the top-level entity ''Contact'' of the contract of the system endpoint contains the linked entity ''Address'', which corresponds to the '''Address''' group of fields on the '''Details''' tab of the [HelpRoot_FormReference\CR_30_20_00|Contacts] ([~/?ScreenId=CR302000|CR302000]) form, as shown in the following screenshot. [anchor|#image_g5v_drv_ts][image:UserGuide/Images/WebServiceEndpoints_LinkedEntity.png|popup|Linked entity|450px]
]]></column>
			<column name="PlainText"><![CDATA[API Entities, Fields, and Actions The contract of an endpoint defines the following elements of the contract-based web services     API: Entities : An entity corresponds to a business logic object that you are going to work      with. For example, the contract of a system endpoint includes the  Warehouse  entity,      which represents a warehouse and holds the data related to the warehouse. This entity is      associated with the   ([~/?ScreenId=IN204000|IN204000]) Warehouses (IN204000) form.  For a       custom endpoint, if you are going to use an entity to transfer data to or from  Acumatica ERP, you should associate this entity with a particular  Acumatica ERP       form. For example, you can create a  Vendor  entity, which represents a vendor. This       entity is associated with the   ([~/?ScreenId=AP303000|AP303000]) Vendors (AP303000)       form. Fields : The fields of an entity correspond to the parameters of a business logic      object. For example, the  Warehouse  entity that is available through the system endpoint      has the  Description  and  WarehouseID  fields, among others. In the contract, these      fields are mapped to the  Description  and the  Warehouse       ID  elements of the Summary area of the   ([~/?ScreenId=IN204000|IN204000]) Warehouses form.  For a custom endpoint, if you need to connect the field with a particular element       on an  Acumatica ERP       form, you should map the field to this element. For example, if you have created the         Vendor  entity, which designates a vendor, you can add the field  VendorID  to the       entity and connect this field with the  Vendor ID  element of the Summary       area of the   ([~/?ScreenId=AP303000|AP303000]) Vendors form.  Actions : The actions of an entity correspond to the actions that can be applied to a      business logic object. For example, the  TransferOrder  entity, which is available through      the system endpoint, has the  ReleaseTransferOrder  action. This action corresponds to the        Release  button on the form toolbar of the   ([~/?ScreenId=IN304000|IN304000]) Transfers (IN304000) form.  For a custom endpoint, if you need to use an  Acumatica ERP       action, you should add this action to the contract of the custom endpoint with the needed       parameters. For example, suppose you want to add an action that changes the customer ID of an       existing customer, you can add the action  ChangeID  and map it to the  Change        ID  action, which is available on the   ([~/?ScreenId=AR303000|AR303000]) Customers form. The new action should have one parameter, which specifies the new ID of a customer as       the  Change ID  action has. When you add a new entity to a contract, you should specify the type of the entity, which can    be one of the following: Top-Level : Entities of this type are the main entities of the contract. A top-level      entity usually corresponds to an  Acumatica ERP      form. For example, the  Warehouse  entity of the contract of the system endpoint is a      top-level entity that corresponds to the   ([~/?ScreenId=IN204000|IN204000]) Warehouses form.  Detail : Detail entities correspond to the detail lines of a master-detail form. A      detail entity exists only as a part of a top-level entity. For example, the top-level entity        SalesOrder  of the contract of the system endpoint contains the detail entity        SalesOrderDetail , which corresponds to a detail line on the  Document       Details  tab of the   ([~/?ScreenId=SO301000|SO301000]) Sales Orders (SO301000)      form, as shown in the following screenshot. Detail entity Linked : Linked entities are supplementary entities of a contract. A linked entity      usually corresponds to a part of an  Acumatica ERP      form and is related to one top-level entity of the contract or multiple such entities. For      example, the top-level entity  Contact  of the contract of the system endpoint contains      the linked entity  Address , which corresponds to the  Address  group      of fields on the  Details  tab of the   ([~/?ScreenId=CR302000|CR302000]) Contacts (CR302000) form, as shown in the following screenshot.  Linked entity ]]></column>
		</row>
		<row PageID="bd0d8a36-b00b-44c8-bdcd-b2b4e4c86fd0" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="e5892e7f-3a7a-751d-0a92-b8c4ebb6f98a" RecordSourceID="22377">
			<column name="Content"><![CDATA[
Starting from Version 2 of the system contract of the contract-based web services application programming interface (API), you can work with the values of the custom fields that are not included in the entity definition. That is, custom fields can correspond to both the predefined elements on an Acumatica ERP form that are not included in the entity definition and the elements that were added to the Acumatica ERP form in a customization project.{br}

To work with the needed custom field, you need to know the name of the data view that contains the corresponding custom element and the name of the field, which are described in detail below.{br}{TOC}
==Field Name and View Name==
A field name is the internal name of a particular element of an Acumatica ERP form. A view name is the name of the data view to which a particular element belongs. For example, the '''Posting Class''' element on the '''General Settings''' tab of the [HelpRoot_FormReference\IN_20_25_00|Stock Items] ([~/?ScreenId=IN202500|IN202500]) form has the {{PostClassID}} field name and belong to the {{ItemSettings}} data view. {br}

To find out the field name and view name, on the title bar of the form, you click '''Customization''' > '''Inspect Element''' and click the needed element on the form. In the '''Element Properties''' dialog box, which opens, you find the field name in the '''Data Field''' element and the view name in the '''View Name''' element, as shown in the following screenshot.[anchor|#_3cdc5ada-f62b-4fe0-a539-669b9e9bac83][anchor|#_8d3ae80a-d793-43ee-8339-9f7050adec08][image:UserGuide/Images/REST_Data_Field.png|popup|Field name and view name|450px]{br}

In the contract-based REST API, you can also find out the field name and the view name through the special URL. For details on the URL and the HTTP method, see [HelpRoot_Dev_Integration\IS__con_REST_Get_List_of_Custom_Fields|Retrieval of the Schema of Custom Fields].{br}

In the contract-based SOAP API, you can find out the field name and the view name in code by using the <tt>GetCustomFieldSchema()</tt> method. For details on the method, see [HelpRoot_Dev_Integration\IS__con_CB_GetCustomFieldSchema|GetCustomFieldSchema() Method]. 
==Use of Custom Fields==
For details on retrieving the values of custom fields by using the contract-based REST API, see the description of the ''$custom'' parameter in [HelpRoot_Dev_Integration\IS__con_REST_Parameters|Parameters for Retrieving Records]. For details on specifying the values of custom fields, see [HelpRoot_Dev_Integration\IS__con_REST_Entity_Representation_in_JSON|Representation of a Record in JSON Format].{br}

For details on working with custom elements through the contract-based SOAP API, see [HelpRoot_Dev_Integration\IS__con_CB_CustomFields_2|CustomFields Property]. ]]></column>
			<column name="PlainText"><![CDATA[Custom Fields Starting from Version 2 of the system contract of the contract-based web services         application programming interface (API), you can work with the values of the custom fields         that are not included in the entity definition. That is, custom fields can correspond to         both the predefined elements on an  Acumatica ERP form that are not included in the entity definition and the elements that were added to         the  Acumatica ERP form in a customization project. To work with the needed custom field, you need to know the name of the data view that         contains the corresponding custom element and the name of the field, which are described in         detail below. Field Name and View Name A field name is the internal name of a particular element of an  Acumatica ERP form. A view name is the name of the data view to which a particular element belongs. For         example, the  Posting Class  element on the  General           Settings  tab of the   ([~/?ScreenId=IN202500|IN202500]) Stock Items (IN202500) form has the            PostClassID  field name and belong to the  ItemSettings          data view.  To find out the field name and view name, on the title bar of the form, you click  Customization Inspect Element  and click the needed element on the form. In the  Element           Properties  dialog box, which opens, you find the field name in the            Data Field  element and the view name in the  View           Name  element, as shown in the following screenshot. Field name and view name In the contract-based REST API, you can also find out the field name and the view name         through the special URL. For details on the URL and the HTTP method, see  Retrieval of the Schema of Custom Fields. In the contract-based SOAP API, you can find out the field name and the view name in code         by using the  GetCustomFieldSchema()  method. For details on the method,         see  GetCustomFieldSchema() Method.  Use of Custom Fields For details on retrieving the values of custom fields by using the contract-based REST API,         see the description of the  $custom  parameter in  Parameters for Retrieving Records. For details         on specifying the values of custom fields, see  Representation of a Record in JSON Format. For details on working with custom elements through the contract-based SOAP API, see  CustomFields Property.  ]]></column>
		</row>
		<row PageID="c920d9fc-8e81-4f4e-9250-81c6fb979517" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="abc7d140-5188-6c64-f1d3-175450945694" RecordSourceID="22377">
			<column name="Content"><![CDATA[
If the API provided by the system endpoint of Acumatica ERP is not sufficient for the requirements of your application, you can create a custom endpoint from scratch or by extending an existing endpoint. 
==An Extension of an Existing Endpoint==
If you are creating an endpoint as an extension of an existing endpoint, for the API elements that were inherited from the base endpoint, you cannot edit the names and types of the entities and fields, and the names, types, and parameters of the actions. In the contract of the new endpoint, you can add new top-level entities, new fields or entities to any entity, and new actions. Then you can use both the API that you added to the contract of the endpoint and the API of the base endpoint in your application. For information on how to extend an existing endpoint, see [HelpRoot_Dev_Integration\IS__how_Extend_Endpoint|To Extend an Existing Endpoint]. {br}

The new endpoint that was created as an extension of an existing endpoint has the version of the contract of the base endpoint; that is, the API methods for working with entities are the same for the base endpoint and the new endpoint. See [HelpRoot_Dev_Integration\IS__IS_CB_REST_API_Reference|Contract-Based REST API Reference] and [HelpRoot_Dev_Integration\IS__IS_CB_API_Reference|Contract-Based SOAP API Reference] for the description of the API methods of the needed contract version. 
==An Endpoint Created from Scratch==
If you are creating an endpoint from scratch, you should add the needed elements of the API to the contract. Then you can use these API elements in your application. For information on how to create an endpoint from scratch, see [HelpRoot_Dev_Integration\IS__how_Create_Endpoint|To Create a Custom Endpoint]. {br}

The new endpoint that is created from scratch always has the latest version of the contract. For the description of the API methods for working with entities that are available in the latest version of the contract, see [HelpRoot_Dev_Integration\IS__IS_CB_REST_API_Reference|Contract-Based REST API Reference] and [HelpRoot_Dev_Integration\IS__IS_CB_API_Reference|Contract-Based SOAP API Reference]. 
==Related Articles==
*[HelpRoot_Dev_Integration\IS__con_Comparison_of_Contract_Versions|Comparison of Contract Versions]]]></column>
			<column name="PlainText"><![CDATA[Custom Endpoints and Endpoint Extensions If the API provided by the system endpoint of  Acumatica ERP is not sufficient for the requirements of your application, you can create a custom         endpoint from scratch or by extending an existing endpoint.  An Extension of an Existing Endpoint If you are creating an endpoint as an extension of an existing endpoint, for the API         elements that were inherited from the base endpoint, you cannot edit the names and types of         the entities and fields, and the names, types, and parameters of the actions. In the         contract of the new endpoint, you can add new top-level entities, new fields or entities to         any entity, and new actions. Then you can use both the API that you added to the contract of         the endpoint and the API of the base endpoint in your application. For information on how to         extend an existing endpoint, see  To Extend an Existing Endpoint.  The new endpoint that was created as an extension of an existing endpoint has the version         of the contract of the base endpoint; that is, the API methods for working with entities are         the same for the base endpoint and the new endpoint. See  Contract-Based REST API Reference and  Contract-Based SOAP API Reference for the         description of the API methods of the needed contract version.  An Endpoint Created from Scratch If you are creating an endpoint from scratch, you should add the needed elements of the API         to the contract. Then you can use these API elements in your application. For information on         how to create an endpoint from scratch, see  To Create a Custom Endpoint.  The new endpoint that is created from scratch always has the latest version of the         contract. For the description of the API methods for working with entities that are         available in the latest version of the contract, see  Contract-Based REST API Reference and  Contract-Based SOAP API Reference.  ]]></column>
		</row>
		<row PageID="d11b158c-a417-40aa-9736-86bfd7e5ac57" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="401d085c-9ee9-b537-7bad-788ac52393ad" RecordSourceID="22377">
			<column name="Content"><![CDATA[
When you create a custom endpoint on the [HelpRoot_FormReference\SM_20_70_60|Web Service Endpoints] ([~/?ScreenId=SM207060|SM207060]) form (either from scratch or by extending a system endpoint), for the names of the entities, fields, actions, and action parameters of the endpoint, and the endpoint name and version, you should make sure to adhere to the following rules:[anchor|#_fd2bf273-0424-4d4d-9dc7-30a4703a1378]
*The name of the endpoint can contain only English letters, digits, underscores, and periods, and cannot start with a digit.
*The version of the endpoint can contain only English letters, digits, underscores, and periods.
*The name of the entity, field, action, or action parameter can contain only English letters, digits, and underscores, and cannot start with a digit.
*The name of the field cannot match any of the following reserved names:
**<tt>ID</tt>
** <tt>RowNumber</tt>
** <tt>Note</tt>
** <tt>Delete</tt>
** <tt>CustomFields</tt>
** <tt>ReturnBehavior</tt>
** <tt>Entity</tt>
** <tt>Action</tt>
*The name of the field must be unique among the names of the fields of the entity.
*The name of the parameter must be unique among the names of the parameters of the action.
*The name of the entity or action must be unique among the names of the entities and actions of the endpoint.

The system checks whether the names used in the endpoint satisfy these rules each time you enter the name of a new entity, field, action, or action parameter. You can also validate the endpoint manually, as described in [HelpRoot_Dev_Integration\IS__how_Validate_Endpoint|To Validate an Endpoint].
==Related Articles==
*[HelpRoot_Dev_Integration\IS__how_Validate_Endpoint|To Validate an Endpoint]]]></column>
			<column name="PlainText"><![CDATA[Naming Rules for Endpoints When you create a custom endpoint on the   ([~/?ScreenId=SM207060|SM207060]) Web Service Endpoints     (SM207060) form (either from scratch or by extending a system endpoint), for the names of the     entities, fields, actions, and action parameters of the endpoint, and the endpoint name and     version, you should make sure to adhere to the following rules: The name of the endpoint can contain only English letters, digits, underscores, and periods,      and cannot start with a digit. The version of the endpoint can contain only English letters, digits, underscores, and      periods. The name of the entity, field, action, or action parameter can contain only English letters,      digits, and underscores, and cannot start with a digit. The name of the field cannot match any of the following reserved names: ID RowNumber Note Delete CustomFields ReturnBehavior Entity Action The name of the field must be unique among the names of the fields of the entity. The name of the parameter must be unique among the names of the parameters of the      action. The name of the entity or action must be unique among the names of the entities and actions      of the endpoint. The system checks whether the names used in the endpoint satisfy these rules each time you     enter the name of a new entity, field, action, or action parameter. You can also validate the     endpoint manually, as described in  To Validate an Endpoint. ]]></column>
		</row>
		<row PageID="92274c6d-08bf-4a33-8818-e6b9f6ed6695" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="df4e0c95-2984-6f49-375a-99faae1163ee" RecordSourceID="22377">
			<column name="Content"><![CDATA[
 Acumatica ERP 2019 R1 supports two versions of system contracts. In this topic, you can learn the main differences between the contract versions.[anchor|#_414255af-057b-44a8-bed1-68b3cca6857c]((({S:Hint}Contract Version 1 is not supported starting from Acumatica ERP 2018 R2.
)))[anchor|#_3abdd4f7-be92-4afe-9208-c1866025392b]
===Comparison of Contract Versions===
{| class="checklist" | width="100%" 
|- 
!width="60%" ! Characteristic
!width="20%" ! Contract Version 3
!width="20%" ! Contract Version 2
|- 
| The REST API is supported for the endpoints with this contract version.
| Yes
| Yes
|- 
| The SOAP API is supported for the endpoints with this contract version.
| Yes
| Yes
|- 
| You can specify particular fields of the entity to be returned from the system.
| Yes
| Yes
|- 
| By default, the system returns all fields of the entity (including fields of the linked and detail entities defined within the entity).
| No
| 
For the SOAP API: Yes{br}

For the REST API: No
|- 
| By default, the system returns only the fields of the entity itself (without the fields of the linked and detail entities defined within the entity).
| Yes
| 
For the SOAP API: No{br}

For the REST API: Yes
|- 
| Through the endpoint, you can work with the elements that were added to the Acumatica ERP form in a customization project.
| Yes
| Yes
|- 
| Through the endpoint, you can work with the predefined elements on an Acumatica ERP form that are not included in the entity definition.
| Yes
| Yes
|- 
| When optimization for speed of the retrieval of the list of records fails, the system behaves as follows.
| The system returns an error.
| The system retrieves data in an unoptimized way (slow).
|- 
| Custom endpoints created from scratch have this contract version.
| Yes
| No
|- 
| The system endpoint that has this contract version is included in Acumatica ERP 2019 R1.
| Yes (Endpoint Version ''default/17.200.001'')
| Yes (Endpoint Version ''default/6.00.001'')
|}
==Related Articles==
*[HelpRoot_Dev_Integration\IS__con_CB_Endpoints_and_Contracts|Endpoints and Contracts]]]></column>
			<column name="PlainText"><![CDATA[Comparison of Contract Versions  Acumatica ERP 2019 R1     supports two versions of system contracts. In this topic, you can learn the main differences     between the contract versions. Contract Version 1 is not supported starting from  Acumatica ERP 2018 R2. Comparison of Contract Versions Characteristic Contract Version 3 Contract Version 2 The REST API is supported for the endpoints with this contract version. Yes Yes The SOAP API is supported for the endpoints with this contract version. Yes Yes You can specify particular fields of the entity to be returned from the          system. Yes Yes By default, the system returns all fields of the entity (including fields of the          linked and detail entities defined within the entity). No For the SOAP API: Yes For the REST API: No By default, the system returns only the fields of the entity itself (without the          fields of the linked and detail entities defined within the entity). Yes For the SOAP API: No For the REST API: Yes Through the endpoint, you can work with the elements that were added to the  Acumatica ERP form in a customization project. Yes Yes Through the endpoint, you can work with the predefined elements on an  Acumatica ERP form that are not included in the entity definition. Yes Yes When optimization for speed of the retrieval of the list of records fails, the system          behaves as follows. The system returns an error. The system retrieves data in an unoptimized way (slow). Custom endpoints created from scratch have this contract version. Yes No The system endpoint that has this contract version is included in  Acumatica ERP 2019 R1. Yes (Endpoint Version  default/17.200.001 ) Yes (Endpoint Version  default/6.00.001 ) ]]></column>
		</row>
		<row PageID="b49d1af2-80a7-4271-b421-ab64173eead8" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="d86ff447-f0be-0945-084c-b4dec1695934" RecordSourceID="22377">
			<column name="Content"><![CDATA[
 Acumatica ERP 2019 R1 supports three system endpoints. In this topic, you can learn about the differences between these endpoints.{br}{TOC}
==Contract Versions of the Endpoints==
The following table specifies the contract versions of the endpoints. For details about the differences between the contract versions, see [HelpRoot_Dev_Integration\IS__con_Comparison_of_Contract_Versions|Comparison of Contract Versions].[anchor|#_fb9c24d2-d606-4f5b-b9f5-b0104ae0e5be]
{| class="checklist" | width="100%" 
|- 
!width="50%" ! Endpoint
!width="50%" ! Contract Version
|- 
| ''Default/18.200.001''
| 3
|- 
| ''Default/17.200.001''
| 3
|- 
| ''Default/6.00.001''
| 2
|}
==Changes to the Entities, Fields, and Actions of the Default/18.200.001 Endpoint as Compared to the Default/17.200.001 Endpoint==
The following tables contain the new, modified, or removed elements of the ''Default/18.200.001'' endpoint as compared to the ''Default/17.200.001'' endpoint.[anchor|#_3893d964-a87e-4b25-b8db-d16838f9cfea]
===New Entities===The entities listed in the following table (except <tt>ProFormaInvoice</tt>) can be created, retrieved, updated, and deleted through the standard API methods. <tt>ProFormaInvoice</tt> can be created only by the invocation of the <tt>RunProjectBilling</tt> action of <tt>Project</tt>.
{| class="checklist" | width="100%" 
|- 
!width="50%" ! Entity
!width="50%" ! Related Form Name and ID
|- 
| <tt>AccountGroup</tt>
|  [HelpRoot_FormReference\PM_20_10_00|Account Groups] ([~/?ScreenId=PM201000|PM201000])
|- 
| <tt>Activity</tt>
|  [HelpRoot_FormReference\CR_30_60_10|Activity] ([~/?ScreenId=CR306010|CR306010])
|- 
| <tt>AllocationRule</tt>
|  [HelpRoot_FormReference\PM_20_75_00|Allocation Rules] ([~/?ScreenId=PM207500|PM207500])
|- 
| <tt>ChangeOrder</tt>
|  [HelpRoot_FormReference\PM_30_80_00|Change Orders] ([~/?ScreenId=PM308000|PM308000])
|- 
| <tt>ChangeOrderClass</tt>
|  [HelpRoot_FormReference\PM_20_30_00|Change Order Classes] ([~/?ScreenId=PM203000|PM203000])
|- 
| <tt>CommonTask</tt>
|  [HelpRoot_FormReference\PM_20_80_30|Common Tasks] ([~/?ScreenId=PM208030|PM208030])
|- 
| <tt>CompanyFinancialPeriod</tt>
|  [HelpRoot_FormReference\GL_20_11_00|Company Financial Calendar] ([~/?ScreenId=GL201100|GL201100])
|- 
| <tt>CostCode</tt>
|  [HelpRoot_FormReference\PM_20_95_00|Cost Codes] ([~/?ScreenId=PM209500|PM209500])
|- 
| <tt>ExpenseClaim</tt>
|  [HelpRoot_FormReference\EP_30_10_00|Expense Claim] ([~/?ScreenId=EP301000|EP301000])
|- 
| <tt>ExpenseReceipt</tt>
|  [HelpRoot_FormReference\EP_30_10_20|Expense Receipt] ([~/?ScreenId=EP301020|EP301020])
|- 
| <tt>ExternalCommitment</tt>
|  [HelpRoot_FormReference\PM_20_90_00|External Commitments] ([~/?ScreenId=PM209000|PM209000])
|- 
| <tt>LaborCostRate</tt>
|  [HelpRoot_FormReference\PM_20_99_00|Labor Cost Rates] ([~/?ScreenId=PM209900|PM209900])
|- 
| <tt>ManageFinancialPeriods</tt>
|  [HelpRoot_FormReference\GL_50_30_00|Manage Financial Periods] ([~/?ScreenId=GL503000|GL503000])
|- 
| <tt>ProFormaInvoice</tt>
|  [HelpRoot_FormReference\PM_30_70_00|Pro Forma Invoices] ([~/?ScreenId=PM307000|PM307000])
|- 
| <tt>Project</tt>
|  [HelpRoot_FormReference\PM_30_10_00|Projects] ([~/?ScreenId=PM301000|PM301000])
|- 
| <tt>ProjectBilling</tt>
|  [HelpRoot_FormReference\PM_50_30_00|Run Project Billing] ([~/?ScreenId=PM503000|PM503000])
|- 
| <tt>ProjectBillingRules</tt>
|  [HelpRoot_FormReference\PM_20_70_00|Billing Rules] ([~/?ScreenId=PM207000|PM207000])
|- 
| <tt>ProjectBudget</tt>
|  [HelpRoot_FormReference\PM_30_90_00|Project Budget] ([~/?ScreenId=PM309000|PM309000])
|- 
| <tt>ProjectTask</tt>
|  [HelpRoot_FormReference\PM_30_20_00|Project Tasks] ([~/?ScreenId=PM302000|PM302000])
|- 
| <tt>ProjectTemplate</tt>
|  [HelpRoot_FormReference\PM_20_80_00|Project Templates] ([~/?ScreenId=PM208000|PM208000])
|- 
| <tt>ProjectTemplateTask</tt>
|  [HelpRoot_FormReference\PM_20_80_10|Project Template Tasks] ([~/?ScreenId=PM208010|PM208010])
|- 
| <tt>TimeEntry</tt>
| Time Entry (PM209100)
|- 
| <tt>UnionLocal</tt>
|  [HelpRoot_FormReference\PM_20_97_00|Union Locals] ([~/?ScreenId=PM209700|PM209700])
|- 
| <tt>WorkClassCompensationCode</tt>
|  [HelpRoot_FormReference\PM_20_98_00|Work Class Compensation Codes] ([~/?ScreenId=PM209800|PM209800])
|}[anchor|#_f2a7ecdd-35d8-4492-b9db-69b89babe417]
===Changed Entities===
{| class="checklist" | width="100%" 
|- 
!width="33%" ! Entity
!width="33%" ! Related Form Name and ID
!width="33%" ! Change
|- 
| <tt>Email.TimeActivity</tt>
|  [HelpRoot_FormReference\CR_30_60_15|Email Activity] ([~/?ScreenId=CR306015|CR306015])
| The object name has been changed from <tt>EmailTimeActivity</tt> to <tt>TimeActivity</tt>.
|- 
| <tt>Employee</tt>
|  [HelpRoot_FormReference\EP_20_30_00|Employees] ([~/?ScreenId=EP203000|EP203000])
| The mapping of the entity has been completely changed.
|}[anchor|#_4529980f-1bab-4671-b705-338ba193dab8]
===New Fields and Actions===
{| class="checklist" | width="100%" 
|- 
!width="66%" ! Field or Action Name
!width="33%" ! Related Form Name and ID
|- 
| <tt>AccountLocation.Address.Validated</tt>
|  [HelpRoot_FormReference\CR_30_30_10|Account Locations] ([~/?ScreenId=CR303010|CR303010])
|- 
| <tt>Bill.Details.CalculateDiscountsOnImport</tt>
|  [HelpRoot_FormReference\AP_30_10_00|Bills and Adjustments] ([~/?ScreenId=AP301000|AP301000])
|- 
| <tt>Bill.Details.CostCode</tt>
|  [HelpRoot_FormReference\AP_30_10_00|Bills and Adjustments] ([~/?ScreenId=AP301000|AP301000])
|- 
| <tt>Bill.Details.InventoryID</tt>
|  [HelpRoot_FormReference\AP_30_10_00|Bills and Adjustments] ([~/?ScreenId=AP301000|AP301000])
|- 
| <tt>Bill.Details.POLine</tt>
|  [HelpRoot_FormReference\AP_30_10_00|Bills and Adjustments] ([~/?ScreenId=AP301000|AP301000])
|- 
| <tt>Bill.Details.POReceiptLine</tt>
|  [HelpRoot_FormReference\AP_30_10_00|Bills and Adjustments] ([~/?ScreenId=AP301000|AP301000])
|- 
| <tt>Bill.Details.POReceiptNbr</tt>
|  [HelpRoot_FormReference\AP_30_10_00|Bills and Adjustments] ([~/?ScreenId=AP301000|AP301000])
|- 
| <tt>Bill.Project</tt>
|  [HelpRoot_FormReference\AP_30_10_00|Bills and Adjustments] ([~/?ScreenId=AP301000|AP301000])
|- 
| <tt>BusinessAccount.Activities.NoteID</tt>
|  [HelpRoot_FormReference\CR_30_30_00|Business Accounts] ([~/?ScreenId=CR303000|CR303000])
|- 
| <tt>BusinessAccount.LastModifiedDateTime</tt>
|  [HelpRoot_FormReference\CR_30_30_00|Business Accounts] ([~/?ScreenId=CR303000|CR303000])
|- 
| <tt>BusinessAccount.MainAddress.Validated</tt>
|  [HelpRoot_FormReference\CR_30_30_00|Business Accounts] ([~/?ScreenId=CR303000|CR303000])
|- 
| <tt>BusinessAccount.ShippingAddress.Validated</tt>
|  [HelpRoot_FormReference\CR_30_30_00|Business Accounts] ([~/?ScreenId=CR303000|CR303000])
|- 
| <tt>Case.Activities.CostCode</tt>
|  [HelpRoot_FormReference\CR_30_60_00|Cases] ([~/?ScreenId=CR306000|CR306000])
|- 
| <tt>Case.Activities.NoteID</tt>
|  [HelpRoot_FormReference\CR_30_60_00|Cases] ([~/?ScreenId=CR306000|CR306000])
|- 
| <tt>CashSale.Details.CostCode</tt>
|  [HelpRoot_FormReference\AR_30_40_00|Cash Sales] ([~/?ScreenId=AR304000|AR304000])
|- 
| <tt>CashSale.Details.ProjectTask</tt>
|  [HelpRoot_FormReference\AR_30_40_00|Cash Sales] ([~/?ScreenId=AR304000|AR304000])
|- 
| <tt>CashSale.Project</tt>
|  [HelpRoot_FormReference\AR_30_40_00|Cash Sales] ([~/?ScreenId=AR304000|AR304000])
|- 
| <tt>Contact.Activities.NoteID</tt>
|  [HelpRoot_FormReference\CR_30_20_00|Contacts] ([~/?ScreenId=CR302000|CR302000])
|- 
| <tt>Contact.Address.Validated</tt>
|  [HelpRoot_FormReference\CR_30_20_00|Contacts] ([~/?ScreenId=CR302000|CR302000])
|- 
| <tt>Contact.LastModifiedDateTime</tt>
|  [HelpRoot_FormReference\CR_30_20_00|Contacts] ([~/?ScreenId=CR302000|CR302000])
|- 
| <tt>Email.TimeActivity.CostCode</tt>
|  [HelpRoot_FormReference\CR_30_60_15|Email Activity] ([~/?ScreenId=CR306015|CR306015])
|- 
| <tt>FinancialPeriod.Details.Status</tt>
|  [HelpRoot_FormReference\GL_20_10_00|Master Financial Calendar] ([~/?ScreenId=GL201000|GL201000])
|- 
| <tt>JournalTransaction.Details.CostCode</tt>
|  [HelpRoot_FormReference\GL_30_10_00|Journal Transactions] ([~/?ScreenId=GL301000|GL301000])
|- 
| <tt>JournalTransaction.Details.IsNonPM</tt>
|  [HelpRoot_FormReference\GL_30_10_00|Journal Transactions] ([~/?ScreenId=GL301000|GL301000])
|- 
| <tt>JournalTransaction.Details.ProjectTransactionID</tt>
|  [HelpRoot_FormReference\GL_30_10_00|Journal Transactions] ([~/?ScreenId=GL301000|GL301000])
|- 
| <tt>InventoryReceipt.Details.CostCode</tt>
|  [HelpRoot_FormReference\IN_30_10_00|Receipts] ([~/?ScreenId=IN301000|IN301000])
|- 
| <tt>InventoryReceipt.Details.Project</tt>
|  [HelpRoot_FormReference\IN_30_10_00|Receipts] ([~/?ScreenId=IN301000|IN301000])
|- 
| <tt>InventoryReceipt.Details.ProjectTask</tt>
|  [HelpRoot_FormReference\IN_30_10_00|Receipts] ([~/?ScreenId=IN301000|IN301000])
|- 
| <tt>Invoice.Details.CalculateDiscountsOnImport</tt>
|  [HelpRoot_FormReference\AR_30_10_00|Invoices and Memos] ([~/?ScreenId=AR301000|AR301000])
|- 
| <tt>Invoice.Details.CostCode</tt>
|  [HelpRoot_FormReference\AR_30_10_00|Invoices and Memos] ([~/?ScreenId=AR301000|AR301000])
|- 
| <tt>Invoice.DiscountDetails</tt>
|  [HelpRoot_FormReference\AR_30_10_00|Invoices and Memos] ([~/?ScreenId=AR301000|AR301000])
|- 
| <tt>Lead.Activities.NoteID</tt>
|  [HelpRoot_FormReference\CR_30_10_00|Leads] ([~/?ScreenId=CR301000|CR301000])
|- 
| <tt>Lead.Address.Validated</tt>
|  [HelpRoot_FormReference\CR_30_10_00|Leads] ([~/?ScreenId=CR301000|CR301000])
|- 
| <tt>Opportunity.Activities.NoteID</tt>
|  [HelpRoot_FormReference\CR_30_40_00|Opportunities] ([~/?ScreenId=CR304000|CR304000])
|- 
| <tt>Opportunity.Address.Validated</tt>
|  [HelpRoot_FormReference\CR_30_40_00|Opportunities] ([~/?ScreenId=CR304000|CR304000])
|- 
| <tt>Payment.PaymentLoadDocuments</tt>
|  [HelpRoot_FormReference\AR_30_20_00|Payments and Applications] ([~/?ScreenId=AR302000|AR302000])
|- 
| <tt>Payment.PaymentLoadOrders</tt>
|  [HelpRoot_FormReference\AR_30_20_00|Payments and Applications] ([~/?ScreenId=AR302000|AR302000])
|- 
| <tt>PhysicalInventoryReview.CreatedDateTime</tt>
|  [HelpRoot_FormReference\AR_30_20_00|Payments and Applications] ([~/?ScreenId=AR302000|AR302000])
|- 
| <tt>ProjectTransaction.Details.Billed</tt>
|  [HelpRoot_FormReference\PM_30_40_00|Project Transactions] ([~/?ScreenId=PM304000|PM304000])
|- 
| <tt>ProjectTransaction.Details.CostCode</tt>
|  [HelpRoot_FormReference\PM_30_40_00|Project Transactions] ([~/?ScreenId=PM304000|PM304000])
|- 
| <tt>ProjectTransaction.Details.ExternalRefNbr</tt>
|  [HelpRoot_FormReference\PM_30_40_00|Project Transactions] ([~/?ScreenId=PM304000|PM304000])
|- 
| <tt>ProjectTransaction.ReleaseTransactions</tt>
|  [HelpRoot_FormReference\PM_30_40_00|Project Transactions] ([~/?ScreenId=PM304000|PM304000])
|- 
| <tt>PurchaseOrder.Branch</tt>
|  [HelpRoot_FormReference\PO_30_10_00|Purchase Orders] ([~/?ScreenId=PO301000|PO301000])
|- 
| <tt>PurchaseOrder.Details.CalculateDiscountsOnImport</tt>
|  [HelpRoot_FormReference\PO_30_10_00|Purchase Orders] ([~/?ScreenId=PO301000|PO301000])
|- 
| <tt>PurchaseOrder.Details.CostCode</tt>
|  [HelpRoot_FormReference\PO_30_10_00|Purchase Orders] ([~/?ScreenId=PO301000|PO301000])
|- 
| <tt>PurchaseOrder.Details.Project</tt>
|  [HelpRoot_FormReference\PO_30_10_00|Purchase Orders] ([~/?ScreenId=PO301000|PO301000])
|- 
| <tt>PurchaseOrder.Details.ProjectTask</tt>
|  [HelpRoot_FormReference\PO_30_10_00|Purchase Orders] ([~/?ScreenId=PO301000|PO301000])
|- 
| <tt>PurchaseOrder.EnterAPBill</tt>
|  [HelpRoot_FormReference\PO_30_10_00|Purchase Orders] ([~/?ScreenId=PO301000|PO301000])
|- 
| <tt>PurchaseOrder.EnterPOReceipt</tt>
|  [HelpRoot_FormReference\PO_30_10_00|Purchase Orders] ([~/?ScreenId=PO301000|PO301000])
|- 
| <tt>PurchaseOrder.LastModifiedDateTime</tt>
|  [HelpRoot_FormReference\PO_30_10_00|Purchase Orders] ([~/?ScreenId=PO301000|PO301000])
|- 
| <tt>PurchaseOrder.Project</tt>
|  [HelpRoot_FormReference\PO_30_10_00|Purchase Orders] ([~/?ScreenId=PO301000|PO301000])
|- 
| <tt>PurchaseOrder.ShippingInstructions.ShipToAddress.Validated</tt>
|  [HelpRoot_FormReference\PO_30_10_00|Purchase Orders] ([~/?ScreenId=PO301000|PO301000])
|- 
| <tt>PurchaseOrder.TaxDetails</tt>
|  [HelpRoot_FormReference\PO_30_10_00|Purchase Orders] ([~/?ScreenId=PO301000|PO301000])
|- 
| <tt>PurchaseOrder.Terms</tt>
|  [HelpRoot_FormReference\PO_30_10_00|Purchase Orders] ([~/?ScreenId=PO301000|PO301000])
|- 
| <tt>PurchaseOrder.VendorTaxZone</tt>
|  [HelpRoot_FormReference\PO_30_10_00|Purchase Orders] ([~/?ScreenId=PO301000|PO301000])
|- 
| <tt>PurchaseReceipt.BillDate</tt>
|  [HelpRoot_FormReference\PO_30_20_00|Purchase Receipts] ([~/?ScreenId=PO302000|PO302000])
|- 
| <tt>PurchaseReceipt.Branch</tt>
|  [HelpRoot_FormReference\PO_30_20_00|Purchase Receipts] ([~/?ScreenId=PO302000|PO302000])
|- 
| <tt>PurchaseReceipt.CreateAPBill</tt>
|  [HelpRoot_FormReference\PO_30_20_00|Purchase Receipts] ([~/?ScreenId=PO302000|PO302000])
|- 
| <tt>PurchaseReceipt.Description</tt>
|  [HelpRoot_FormReference\PO_30_20_00|Purchase Receipts] ([~/?ScreenId=PO302000|PO302000])
|- 
| <tt>PurchaseReceipt.TransferOrderNbr</tt>
|  [HelpRoot_FormReference\PO_30_20_00|Purchase Receipts] ([~/?ScreenId=PO302000|PO302000])
|- 
| <tt>PurchaseReceipt.TransferOrderType</tt>
|  [HelpRoot_FormReference\PO_30_20_00|Purchase Receipts] ([~/?ScreenId=PO302000|PO302000])
|- 
| <tt>PurchaseReceipt.TransferShipmentNbr</tt>
|  [HelpRoot_FormReference\PO_30_20_00|Purchase Receipts] ([~/?ScreenId=PO302000|PO302000])
|- 
| <tt>PurchaseReceipt.UnbilledQuantity</tt>
|  [HelpRoot_FormReference\PO_30_20_00|Purchase Receipts] ([~/?ScreenId=PO302000|PO302000])
|- 
| <tt>PurchaseReceipt.Warehouse</tt>
|  [HelpRoot_FormReference\PO_30_20_00|Purchase Receipts] ([~/?ScreenId=PO302000|PO302000])
|- 
| <tt>SalesInvoice.ApplicationsCreditMemo</tt>
|  [HelpRoot_FormReference\SO_30_30_00|Invoices] ([~/?ScreenId=SO303000|SO303000])
|- 
| <tt>SalesInvoice.ApplicationsInvoice</tt>
|  [HelpRoot_FormReference\SO_30_30_00|Invoices] ([~/?ScreenId=SO303000|SO303000])
|- 
| <tt>SalesInvoice.BillToSettings.BillToAddress.Validated</tt>
|  [HelpRoot_FormReference\SO_30_30_00|Invoices] ([~/?ScreenId=SO303000|SO303000])
|- 
| <tt>SalesInvoice.BillToSettings.CustomerLocation</tt>
|  [HelpRoot_FormReference\SO_30_30_00|Invoices] ([~/?ScreenId=SO303000|SO303000])
|- 
| <tt>SalesInvoice.CashDiscount</tt>
|  [HelpRoot_FormReference\SO_30_30_00|Invoices] ([~/?ScreenId=SO303000|SO303000])
|- 
| <tt>SalesInvoice.Commissions</tt>
|  [HelpRoot_FormReference\SO_30_30_00|Invoices] ([~/?ScreenId=SO303000|SO303000])
|- 
| <tt>SalesInvoice.CreditHold</tt>
|  [HelpRoot_FormReference\SO_30_30_00|Invoices] ([~/?ScreenId=SO303000|SO303000])
|- 
| <tt>SalesInvoice.Currency</tt>
|  [HelpRoot_FormReference\SO_30_30_00|Invoices] ([~/?ScreenId=SO303000|SO303000])
|- 
| <tt>SalesInvoice.Details.CostCode</tt>
|  [HelpRoot_FormReference\SO_30_30_00|Invoices] ([~/?ScreenId=SO303000|SO303000])
|- 
| <tt>SalesInvoice.Details.ProjectTask</tt>
|  [HelpRoot_FormReference\SO_30_30_00|Invoices] ([~/?ScreenId=SO303000|SO303000])
|- 
| <tt>SalesInvoice.Details.CalculateDiscountsOnImport</tt>
|  [HelpRoot_FormReference\SO_30_30_00|Invoices] ([~/?ScreenId=SO303000|SO303000])
|- 
| <tt>SalesInvoice.Details.DiscountAmount</tt>
|  [HelpRoot_FormReference\SO_30_30_00|Invoices] ([~/?ScreenId=SO303000|SO303000])
|- 
| <tt>SalesInvoice.Details.DiscountPercent</tt>
|  [HelpRoot_FormReference\SO_30_30_00|Invoices] ([~/?ScreenId=SO303000|SO303000])
|- 
| <tt>SalesInvoice.Details.ExpirationDate</tt>
|  [HelpRoot_FormReference\SO_30_30_00|Invoices] ([~/?ScreenId=SO303000|SO303000])
|- 
| <tt>SalesInvoice.Details.InventoryDocType</tt>
|  [HelpRoot_FormReference\SO_30_30_00|Invoices] ([~/?ScreenId=SO303000|SO303000])
|- 
| <tt>SalesInvoice.Details.InventoryRefNbr</tt>
|  [HelpRoot_FormReference\SO_30_30_00|Invoices] ([~/?ScreenId=SO303000|SO303000])
|- 
| <tt>SalesInvoice.Details.Location</tt>
|  [HelpRoot_FormReference\SO_30_30_00|Invoices] ([~/?ScreenId=SO303000|SO303000])
|- 
| <tt>SalesInvoice.Details.LotSerialNbr</tt>
|  [HelpRoot_FormReference\SO_30_30_00|Invoices] ([~/?ScreenId=SO303000|SO303000])
|- 
| <tt>SalesInvoice.Details.ManualDiscount</tt>
|  [HelpRoot_FormReference\SO_30_30_00|Invoices] ([~/?ScreenId=SO303000|SO303000])
|- 
| <tt>SalesInvoice.Details.OrderLineNbr</tt>
|  [HelpRoot_FormReference\SO_30_30_00|Invoices] ([~/?ScreenId=SO303000|SO303000])
|- 
| <tt>SalesInvoice.Details.OrigInvLineNbr</tt>
|  [HelpRoot_FormReference\SO_30_30_00|Invoices] ([~/?ScreenId=SO303000|SO303000])
|- 
| <tt>SalesInvoice.Details.OrigInvNbr</tt>
|  [HelpRoot_FormReference\SO_30_30_00|Invoices] ([~/?ScreenId=SO303000|SO303000])
|- 
| <tt>SalesInvoice.Details.OrigInvType</tt>
|  [HelpRoot_FormReference\SO_30_30_00|Invoices] ([~/?ScreenId=SO303000|SO303000])
|- 
| <tt>SalesInvoice.Details.Subitem</tt>
|  [HelpRoot_FormReference\SO_30_30_00|Invoices] ([~/?ScreenId=SO303000|SO303000])
|- 
| <tt>SalesInvoice.Details.TaxCategory</tt>
|  [HelpRoot_FormReference\SO_30_30_00|Invoices] ([~/?ScreenId=SO303000|SO303000])
|- 
| <tt>SalesInvoice.Details.TransactionDescr</tt>
|  [HelpRoot_FormReference\SO_30_30_00|Invoices] ([~/?ScreenId=SO303000|SO303000])
|- 
| <tt>SalesInvoice.Details.WarehouseID</tt>
|  [HelpRoot_FormReference\SO_30_30_00|Invoices] ([~/?ScreenId=SO303000|SO303000])
|- 
| <tt>SalesInvoice.DiscountDetails</tt>
|  [HelpRoot_FormReference\SO_30_30_00|Invoices] ([~/?ScreenId=SO303000|SO303000])
|- 
| <tt>SalesInvoice.FinancialDetails</tt>
|  [HelpRoot_FormReference\SO_30_30_00|Invoices] ([~/?ScreenId=SO303000|SO303000])
|- 
| <tt>SalesInvoice.Project</tt>
|  [HelpRoot_FormReference\SO_30_30_00|Invoices] ([~/?ScreenId=SO303000|SO303000])
|- 
| <tt>SalesInvoice.SalesInvoiceAddOrder</tt>
|  [HelpRoot_FormReference\SO_30_30_00|Invoices] ([~/?ScreenId=SO303000|SO303000])
|- 
| <tt>SalesInvoice.SalesInvoiceAutoApply</tt>
|  [HelpRoot_FormReference\SO_30_30_00|Invoices] ([~/?ScreenId=SO303000|SO303000])
|- 
| <tt>SalesInvoice.TaxDetails</tt>
|  [HelpRoot_FormReference\SO_30_30_00|Invoices] ([~/?ScreenId=SO303000|SO303000])
|- 
| <tt>SalesInvoice.Totals</tt>
|  [HelpRoot_FormReference\SO_30_30_00|Invoices] ([~/?ScreenId=SO303000|SO303000])
|- 
| <tt>SalesInvoice.VATExemptTotal</tt>
|  [HelpRoot_FormReference\SO_30_30_00|Invoices] ([~/?ScreenId=SO303000|SO303000])
|- 
| <tt>SalesInvoice.VATTaxableTotal</tt>
|  [HelpRoot_FormReference\SO_30_30_00|Invoices] ([~/?ScreenId=SO303000|SO303000])
|- 
| <tt>SalesOrder.AutoRecalculateDiscounts</tt>
|  [HelpRoot_FormReference\SO_30_10_00|Sales Orders] ([~/?ScreenId=SO301000|SO301000])
|- 
| <tt>SalesOrder.BillToAddress.Validated</tt>
|  [HelpRoot_FormReference\SO_30_10_00|Sales Orders] ([~/?ScreenId=SO301000|SO301000])
|- 
| <tt>SalesOrder.Details.CalculateDiscountsOnImport</tt>
|  [HelpRoot_FormReference\SO_30_10_00|Sales Orders] ([~/?ScreenId=SO301000|SO301000])
|- 
| <tt>SalesOrder.Details.CostCode</tt>
|  [HelpRoot_FormReference\SO_30_10_00|Sales Orders] ([~/?ScreenId=SO301000|SO301000])
|- 
| <tt>SalesOrder.DisableAutomaticDiscountUpdate</tt>
|  [HelpRoot_FormReference\SO_30_10_00|Sales Orders] ([~/?ScreenId=SO301000|SO301000])
|- 
| <tt>SalesOrder.DiscountDetails.Description</tt>
|  [HelpRoot_FormReference\SO_30_10_00|Sales Orders] ([~/?ScreenId=SO301000|SO301000])
|- 
| <tt>SalesOrder.DiscountDetails.ExternalDiscountCode</tt>
|  [HelpRoot_FormReference\SO_30_10_00|Sales Orders] ([~/?ScreenId=SO301000|SO301000])
|- 
| <tt>SalesOrder.OpenSalesOrder</tt>
|  [HelpRoot_FormReference\SO_30_10_00|Sales Orders] ([~/?ScreenId=SO301000|SO301000])
|- 
| <tt>SalesOrder.PaymentProfileID</tt>
|  [HelpRoot_FormReference\SO_30_10_00|Sales Orders] ([~/?ScreenId=SO301000|SO301000])
|- 
| <tt>SalesOrder.ReleaseFromCreditHoldSalesOrder</tt>
|  [HelpRoot_FormReference\SO_30_10_00|Sales Orders] ([~/?ScreenId=SO301000|SO301000])
|- 
| <tt>SalesOrder.SalesOrderAddInvoice</tt>
|  [HelpRoot_FormReference\SO_30_10_00|Sales Orders] ([~/?ScreenId=SO301000|SO301000])
|- 
| <tt>SalesOrder.SalesOrderAddStockItem</tt>
|  [HelpRoot_FormReference\SO_30_10_00|Sales Orders] ([~/?ScreenId=SO301000|SO301000])
|- 
| <tt>SalesOrder.SalesOrderCreatePurchaseOrder</tt>
|  [HelpRoot_FormReference\SO_30_10_00|Sales Orders] ([~/?ScreenId=SO301000|SO301000])
|- 
| <tt>SalesOrder.SalesOrderCreateReceipt</tt>
|  [HelpRoot_FormReference\SO_30_10_00|Sales Orders] ([~/?ScreenId=SO301000|SO301000])
|- 
| <tt>SalesOrder.SalesOrderCreateShipment</tt>
|  [HelpRoot_FormReference\SO_30_10_00|Sales Orders] ([~/?ScreenId=SO301000|SO301000])
|- 
| <tt>SalesOrder.ShipToAddress.Validated</tt>
|  [HelpRoot_FormReference\SO_30_10_00|Sales Orders] ([~/?ScreenId=SO301000|SO301000])
|- 
| <tt>Shipment.PrepareInvoice</tt>
|  [HelpRoot_FormReference\SO_30_20_00|Shipments] ([~/?ScreenId=SO302000|SO302000])
|- 
| <tt>Shipment.ShipToSettings.ShipToAddress.Validated</tt>
|  [HelpRoot_FormReference\SO_30_20_00|Shipments] ([~/?ScreenId=SO302000|SO302000])
|- 
| <tt>Task.RelatedActivities.NoteID</tt>
|  [HelpRoot_FormReference\CR_30_60_20|Task] ([~/?ScreenId=CR306020|CR306020])
|- 
| <tt>Task.TimeActivity.CostCode</tt>
|  [HelpRoot_FormReference\CR_30_60_20|Task] ([~/?ScreenId=CR306020|CR306020])
|}[anchor|#_21b83a19-6ee0-4f75-b455-6bfde76217e6]
===Renamed Actions===
{| class="checklist" | width="100%" 
|- 
!width="66%" ! Action Name in ''Default/18.200.001'' (Action Name in ''Default/17.200.001'')
!width="33%" ! Related Form Name and ID
|- 
| <tt>Email.CreateContactFromEmail</tt> (<tt>Email.CreateContactEmail</tt>)
| [HelpRoot_FormReference\CR_30_60_15|Email Activity] ([~/?ScreenId=CR306015|CR306015])
|- 
| <tt>Email.CreateEventFromEmail</tt> (<tt>Email.CreateEventEmail</tt>)
| [HelpRoot_FormReference\CR_30_60_15|Email Activity] ([~/?ScreenId=CR306015|CR306015])
|- 
| <tt>Email.CreateLeadFromEmail</tt> (<tt>Email.CreateLeadEmail</tt>)
| [HelpRoot_FormReference\CR_30_60_15|Email Activity] ([~/?ScreenId=CR306015|CR306015])
|- 
| <tt>Email.CreateOpportunityFromEmail</tt> (<tt>Email.CreateOpportunityEmail</tt>)
| [HelpRoot_FormReference\CR_30_60_15|Email Activity] ([~/?ScreenId=CR306015|CR306015])
|- 
| <tt>Email.CreateExpenseReceiptFromEmail</tt> (<tt>Email.CreateExpenseReceiptEmail</tt>)
| [HelpRoot_FormReference\CR_30_60_15|Email Activity] ([~/?ScreenId=CR306015|CR306015])
|- 
| <tt>Email.CreateCaseFromEmail</tt> (<tt>Email.CreateCaseEmail</tt>)
| [HelpRoot_FormReference\CR_30_60_15|Email Activity] ([~/?ScreenId=CR306015|CR306015])
|- 
| <tt>Email.CreateTaskFromEmail</tt> (<tt>Email.CreateTaskEmail</tt>)
| [HelpRoot_FormReference\CR_30_60_15|Email Activity] ([~/?ScreenId=CR306015|CR306015])
|- 
| <tt>Email.LinkEntityToEmail</tt> (<tt>Email.SelectRelatedEntityEmail</tt>)
| [HelpRoot_FormReference\CR_30_60_15|Email Activity] ([~/?ScreenId=CR306015|CR306015])
|- 
| <tt>Event.LinkEntityToEvent</tt> (<tt>Event.SelectRelatedEntityEvent</tt>)
| [HelpRoot_FormReference\CR_30_60_30|Event] ([~/?ScreenId=CR306030|CR306030])
|- 
| <tt>Task.LinkEntityToTask</tt> (<tt>Task.SelectRelatedEntityTask</tt>)
| [HelpRoot_FormReference\CR_30_60_20|Task] ([~/?ScreenId=CR306020|CR306020])
|}[anchor|#_287df903-0209-42ca-923b-8238bc900a38]
===Removed Fields and Actions===
{| class="checklist" | width="100%" 
|- 
!width="50%" ! Field or Action Name
!width="50%" ! Related Form Name and ID
|- 
| <tt>Email.SelectSourceEmail</tt>
|  [HelpRoot_FormReference\CR_30_60_15|Email Activity] ([~/?ScreenId=CR306015|CR306015])
|- 
| <tt>FinancialPeriod.Details.Active</tt>
|  [HelpRoot_FormReference\GL_20_10_00|Master Financial Calendar] ([~/?ScreenId=GL201000|GL201000])
|- 
| <tt>FinancialPeriod.Details.ClosedInGL</tt>
|  [HelpRoot_FormReference\GL_20_10_00|Master Financial Calendar] ([~/?ScreenId=GL201000|GL201000])
|- 
| <tt>FinancialPeriod.Details.ClosedInPR</tt>
|  [HelpRoot_FormReference\GL_20_10_00|Master Financial Calendar] ([~/?ScreenId=GL201000|GL201000])
|- 
| <tt>PurchaseReceipt.Details.Project</tt>
|  [HelpRoot_FormReference\PO_30_20_00|Purchase Receipts] ([~/?ScreenId=PO302000|PO302000])
|- 
| <tt>PurchaseReceipt.Details.ProjectTask</tt>
|  [HelpRoot_FormReference\PO_30_20_00|Purchase Receipts] ([~/?ScreenId=PO302000|PO302000])
|}]]></column>
			<column name="PlainText"><![CDATA[Comparison of System Endpoints  Acumatica ERP 2019 R1 supports three system endpoints. In this topic, you can learn about the                 differences between these endpoints. Contract Versions of the Endpoints The following table specifies the contract versions of the endpoints. For details                 about the differences between the contract versions, see  Comparison of Contract Versions. Endpoint Contract Version Default/18.200.001 3 Default/17.200.001 3 Default/6.00.001 2 Changes to the Entities, Fields, and Actions of the Default/18.200.001 Endpoint                 as Compared to the Default/17.200.001 Endpoint The following tables contain the new, modified, or removed elements of the                      Default/18.200.001  endpoint as compared to the  Default/17.200.001                  endpoint. New Entities The entities listed in the following table (except                          ProFormaInvoice ) can be created, retrieved, updated, and                     deleted through the standard API methods.  ProFormaInvoice  can                     be created only by the invocation of the  RunProjectBilling                      action of  Project . Entity Related Form Name and ID AccountGroup  ([~/?ScreenId=PM201000|PM201000]) Account Groups (PM201000) Activity  ([~/?ScreenId=CR306010|CR306010]) Activity (CR306010) AllocationRule  ([~/?ScreenId=PM207500|PM207500]) Allocation Rules (PM207500) ChangeOrder  ([~/?ScreenId=PM308000|PM308000]) Change Orders (PM308000) ChangeOrderClass  ([~/?ScreenId=PM203000|PM203000]) Change Order Classes (PM203000) CommonTask  ([~/?ScreenId=PM208030|PM208030]) Common Tasks (PM208030) CompanyFinancialPeriod  ([~/?ScreenId=GL201100|GL201100]) Company Financial Calendar (GL201100) CostCode  ([~/?ScreenId=PM209500|PM209500]) Cost Codes (PM209500) ExpenseClaim  ([~/?ScreenId=EP301000|EP301000]) Expense Claim (EP301000) ExpenseReceipt  ([~/?ScreenId=EP301020|EP301020]) Expense Receipt (EP301020) ExternalCommitment  ([~/?ScreenId=PM209000|PM209000]) External Commitments (PM209000) LaborCostRate  ([~/?ScreenId=PM209900|PM209900]) Labor Cost Rates (PM209900) ManageFinancialPeriods  ([~/?ScreenId=GL503000|GL503000]) Manage Financial Periods (GL503000) ProFormaInvoice  ([~/?ScreenId=PM307000|PM307000]) Pro Forma Invoices (PM307000) Project  ([~/?ScreenId=PM301000|PM301000]) Projects (PM301000) ProjectBilling  ([~/?ScreenId=PM503000|PM503000]) Run Project Billing (PM503000) ProjectBillingRules  ([~/?ScreenId=PM207000|PM207000]) Billing Rules (PM207000) ProjectBudget  ([~/?ScreenId=PM309000|PM309000]) Project Budget (PM309000) ProjectTask  ([~/?ScreenId=PM302000|PM302000]) Project Tasks (PM302000) ProjectTemplate  ([~/?ScreenId=PM208000|PM208000]) Project Templates (PM208000) ProjectTemplateTask  ([~/?ScreenId=PM208010|PM208010]) Project Template Tasks (PM208010) TimeEntry Time Entry (PM209100) UnionLocal  ([~/?ScreenId=PM209700|PM209700]) Union Locals (PM209700) WorkClassCompensationCode  ([~/?ScreenId=PM209800|PM209800]) Work Class Compensation Codes (PM209800) Changed Entities Entity Related Form Name and ID Change Email.TimeActivity  ([~/?ScreenId=CR306015|CR306015]) Email Activity (CR306015) The object name has been changed from                                      EmailTimeActivity  to                                      TimeActivity . Employee  ([~/?ScreenId=EP203000|EP203000]) Employees (EP203000) The mapping of the entity has been completely changed. New Fields and Actions Field or Action Name Related Form Name and ID AccountLocation.Address.Validated  ([~/?ScreenId=CR303010|CR303010]) Account Locations (CR303010) Bill.Details.CalculateDiscountsOnImport  ([~/?ScreenId=AP301000|AP301000]) Bills and Adjustments (AP301000) Bill.Details.CostCode  ([~/?ScreenId=AP301000|AP301000]) Bills and Adjustments (AP301000) Bill.Details.InventoryID  ([~/?ScreenId=AP301000|AP301000]) Bills and Adjustments (AP301000) Bill.Details.POLine  ([~/?ScreenId=AP301000|AP301000]) Bills and Adjustments (AP301000) Bill.Details.POReceiptLine  ([~/?ScreenId=AP301000|AP301000]) Bills and Adjustments (AP301000) Bill.Details.POReceiptNbr  ([~/?ScreenId=AP301000|AP301000]) Bills and Adjustments (AP301000) Bill.Project  ([~/?ScreenId=AP301000|AP301000]) Bills and Adjustments (AP301000) BusinessAccount.Activities.NoteID  ([~/?ScreenId=CR303000|CR303000]) Business Accounts (CR303000) BusinessAccount.LastModifiedDateTime  ([~/?ScreenId=CR303000|CR303000]) Business Accounts (CR303000) BusinessAccount.MainAddress.Validated  ([~/?ScreenId=CR303000|CR303000]) Business Accounts (CR303000) BusinessAccount.ShippingAddress.Validated  ([~/?ScreenId=CR303000|CR303000]) Business Accounts (CR303000) Case.Activities.CostCode  ([~/?ScreenId=CR306000|CR306000]) Cases (CR306000) Case.Activities.NoteID  ([~/?ScreenId=CR306000|CR306000]) Cases (CR306000) CashSale.Details.CostCode  ([~/?ScreenId=AR304000|AR304000]) Cash Sales (AR304000) CashSale.Details.ProjectTask  ([~/?ScreenId=AR304000|AR304000]) Cash Sales (AR304000) CashSale.Project  ([~/?ScreenId=AR304000|AR304000]) Cash Sales (AR304000) Contact.Activities.NoteID  ([~/?ScreenId=CR302000|CR302000]) Contacts (CR302000) Contact.Address.Validated  ([~/?ScreenId=CR302000|CR302000]) Contacts (CR302000) Contact.LastModifiedDateTime  ([~/?ScreenId=CR302000|CR302000]) Contacts (CR302000) Email.TimeActivity.CostCode  ([~/?ScreenId=CR306015|CR306015]) Email Activity (CR306015) FinancialPeriod.Details.Status  ([~/?ScreenId=GL201000|GL201000]) Master Financial Calendar (GL201000) JournalTransaction.Details.CostCode  ([~/?ScreenId=GL301000|GL301000]) Journal Transactions (GL301000) JournalTransaction.Details.IsNonPM  ([~/?ScreenId=GL301000|GL301000]) Journal Transactions (GL301000) JournalTransaction.Details.ProjectTransactionID  ([~/?ScreenId=GL301000|GL301000]) Journal Transactions (GL301000) InventoryReceipt.Details.CostCode  ([~/?ScreenId=IN301000|IN301000]) Receipts (IN301000) InventoryReceipt.Details.Project  ([~/?ScreenId=IN301000|IN301000]) Receipts (IN301000) InventoryReceipt.Details.ProjectTask  ([~/?ScreenId=IN301000|IN301000]) Receipts (IN301000) Invoice.Details.CalculateDiscountsOnImport  ([~/?ScreenId=AR301000|AR301000]) Invoices and Memos (AR301000) Invoice.Details.CostCode  ([~/?ScreenId=AR301000|AR301000]) Invoices and Memos (AR301000) Invoice.DiscountDetails  ([~/?ScreenId=AR301000|AR301000]) Invoices and Memos (AR301000) Lead.Activities.NoteID  ([~/?ScreenId=CR301000|CR301000]) Leads (CR301000) Lead.Address.Validated  ([~/?ScreenId=CR301000|CR301000]) Leads (CR301000) Opportunity.Activities.NoteID  ([~/?ScreenId=CR304000|CR304000]) Opportunities (CR304000) Opportunity.Address.Validated  ([~/?ScreenId=CR304000|CR304000]) Opportunities (CR304000) Payment.PaymentLoadDocuments  ([~/?ScreenId=AR302000|AR302000]) Payments and Applications (AR302000) Payment.PaymentLoadOrders  ([~/?ScreenId=AR302000|AR302000]) Payments and Applications (AR302000) PhysicalInventoryReview.CreatedDateTime  ([~/?ScreenId=AR302000|AR302000]) Payments and Applications (AR302000) ProjectTransaction.Details.Billed  ([~/?ScreenId=PM304000|PM304000]) Project Transactions (PM304000) ProjectTransaction.Details.CostCode  ([~/?ScreenId=PM304000|PM304000]) Project Transactions (PM304000) ProjectTransaction.Details.ExternalRefNbr  ([~/?ScreenId=PM304000|PM304000]) Project Transactions (PM304000) ProjectTransaction.ReleaseTransactions  ([~/?ScreenId=PM304000|PM304000]) Project Transactions (PM304000) PurchaseOrder.Branch  ([~/?ScreenId=PO301000|PO301000]) Purchase Orders (PO301000) PurchaseOrder.Details.CalculateDiscountsOnImport  ([~/?ScreenId=PO301000|PO301000]) Purchase Orders (PO301000) PurchaseOrder.Details.CostCode  ([~/?ScreenId=PO301000|PO301000]) Purchase Orders (PO301000) PurchaseOrder.Details.Project  ([~/?ScreenId=PO301000|PO301000]) Purchase Orders (PO301000) PurchaseOrder.Details.ProjectTask  ([~/?ScreenId=PO301000|PO301000]) Purchase Orders (PO301000) PurchaseOrder.EnterAPBill  ([~/?ScreenId=PO301000|PO301000]) Purchase Orders (PO301000) PurchaseOrder.EnterPOReceipt  ([~/?ScreenId=PO301000|PO301000]) Purchase Orders (PO301000) PurchaseOrder.LastModifiedDateTime  ([~/?ScreenId=PO301000|PO301000]) Purchase Orders (PO301000) PurchaseOrder.Project  ([~/?ScreenId=PO301000|PO301000]) Purchase Orders (PO301000) PurchaseOrder.ShippingInstructions.ShipToAddress.Validated  ([~/?ScreenId=PO301000|PO301000]) Purchase Orders (PO301000) PurchaseOrder.TaxDetails  ([~/?ScreenId=PO301000|PO301000]) Purchase Orders (PO301000) PurchaseOrder.Terms  ([~/?ScreenId=PO301000|PO301000]) Purchase Orders (PO301000) PurchaseOrder.VendorTaxZone  ([~/?ScreenId=PO301000|PO301000]) Purchase Orders (PO301000) PurchaseReceipt.BillDate  ([~/?ScreenId=PO302000|PO302000]) Purchase Receipts (PO302000) PurchaseReceipt.Branch  ([~/?ScreenId=PO302000|PO302000]) Purchase Receipts (PO302000) PurchaseReceipt.CreateAPBill  ([~/?ScreenId=PO302000|PO302000]) Purchase Receipts (PO302000) PurchaseReceipt.Description  ([~/?ScreenId=PO302000|PO302000]) Purchase Receipts (PO302000) PurchaseReceipt.TransferOrderNbr  ([~/?ScreenId=PO302000|PO302000]) Purchase Receipts (PO302000) PurchaseReceipt.TransferOrderType  ([~/?ScreenId=PO302000|PO302000]) Purchase Receipts (PO302000) PurchaseReceipt.TransferShipmentNbr  ([~/?ScreenId=PO302000|PO302000]) Purchase Receipts (PO302000) PurchaseReceipt.UnbilledQuantity  ([~/?ScreenId=PO302000|PO302000]) Purchase Receipts (PO302000) PurchaseReceipt.Warehouse  ([~/?ScreenId=PO302000|PO302000]) Purchase Receipts (PO302000) SalesInvoice.ApplicationsCreditMemo  ([~/?ScreenId=SO303000|SO303000]) Invoices (SO303000) SalesInvoice.ApplicationsInvoice  ([~/?ScreenId=SO303000|SO303000]) Invoices (SO303000) SalesInvoice.BillToSettings.BillToAddress.Validated  ([~/?ScreenId=SO303000|SO303000]) Invoices (SO303000) SalesInvoice.BillToSettings.CustomerLocation  ([~/?ScreenId=SO303000|SO303000]) Invoices (SO303000) SalesInvoice.CashDiscount  ([~/?ScreenId=SO303000|SO303000]) Invoices (SO303000) SalesInvoice.Commissions  ([~/?ScreenId=SO303000|SO303000]) Invoices (SO303000) SalesInvoice.CreditHold  ([~/?ScreenId=SO303000|SO303000]) Invoices (SO303000) SalesInvoice.Currency  ([~/?ScreenId=SO303000|SO303000]) Invoices (SO303000) SalesInvoice.Details.CostCode  ([~/?ScreenId=SO303000|SO303000]) Invoices (SO303000) SalesInvoice.Details.ProjectTask  ([~/?ScreenId=SO303000|SO303000]) Invoices (SO303000) SalesInvoice.Details.CalculateDiscountsOnImport  ([~/?ScreenId=SO303000|SO303000]) Invoices (SO303000) SalesInvoice.Details.DiscountAmount  ([~/?ScreenId=SO303000|SO303000]) Invoices (SO303000) SalesInvoice.Details.DiscountPercent  ([~/?ScreenId=SO303000|SO303000]) Invoices (SO303000) SalesInvoice.Details.ExpirationDate  ([~/?ScreenId=SO303000|SO303000]) Invoices (SO303000) SalesInvoice.Details.InventoryDocType  ([~/?ScreenId=SO303000|SO303000]) Invoices (SO303000) SalesInvoice.Details.InventoryRefNbr  ([~/?ScreenId=SO303000|SO303000]) Invoices (SO303000) SalesInvoice.Details.Location  ([~/?ScreenId=SO303000|SO303000]) Invoices (SO303000) SalesInvoice.Details.LotSerialNbr  ([~/?ScreenId=SO303000|SO303000]) Invoices (SO303000) SalesInvoice.Details.ManualDiscount  ([~/?ScreenId=SO303000|SO303000]) Invoices (SO303000) SalesInvoice.Details.OrderLineNbr  ([~/?ScreenId=SO303000|SO303000]) Invoices (SO303000) SalesInvoice.Details.OrigInvLineNbr  ([~/?ScreenId=SO303000|SO303000]) Invoices (SO303000) SalesInvoice.Details.OrigInvNbr  ([~/?ScreenId=SO303000|SO303000]) Invoices (SO303000) SalesInvoice.Details.OrigInvType  ([~/?ScreenId=SO303000|SO303000]) Invoices (SO303000) SalesInvoice.Details.Subitem  ([~/?ScreenId=SO303000|SO303000]) Invoices (SO303000) SalesInvoice.Details.TaxCategory  ([~/?ScreenId=SO303000|SO303000]) Invoices (SO303000) SalesInvoice.Details.TransactionDescr  ([~/?ScreenId=SO303000|SO303000]) Invoices (SO303000) SalesInvoice.Details.WarehouseID  ([~/?ScreenId=SO303000|SO303000]) Invoices (SO303000) SalesInvoice.DiscountDetails  ([~/?ScreenId=SO303000|SO303000]) Invoices (SO303000) SalesInvoice.FinancialDetails  ([~/?ScreenId=SO303000|SO303000]) Invoices (SO303000) SalesInvoice.Project  ([~/?ScreenId=SO303000|SO303000]) Invoices (SO303000) SalesInvoice.SalesInvoiceAddOrder  ([~/?ScreenId=SO303000|SO303000]) Invoices (SO303000) SalesInvoice.SalesInvoiceAutoApply  ([~/?ScreenId=SO303000|SO303000]) Invoices (SO303000) SalesInvoice.TaxDetails  ([~/?ScreenId=SO303000|SO303000]) Invoices (SO303000) SalesInvoice.Totals  ([~/?ScreenId=SO303000|SO303000]) Invoices (SO303000) SalesInvoice.VATExemptTotal  ([~/?ScreenId=SO303000|SO303000]) Invoices (SO303000) SalesInvoice.VATTaxableTotal  ([~/?ScreenId=SO303000|SO303000]) Invoices (SO303000) SalesOrder.AutoRecalculateDiscounts  ([~/?ScreenId=SO301000|SO301000]) Sales Orders (SO301000) SalesOrder.BillToAddress.Validated  ([~/?ScreenId=SO301000|SO301000]) Sales Orders (SO301000) SalesOrder.Details.CalculateDiscountsOnImport  ([~/?ScreenId=SO301000|SO301000]) Sales Orders (SO301000) SalesOrder.Details.CostCode  ([~/?ScreenId=SO301000|SO301000]) Sales Orders (SO301000) SalesOrder.DisableAutomaticDiscountUpdate  ([~/?ScreenId=SO301000|SO301000]) Sales Orders (SO301000) SalesOrder.DiscountDetails.Description  ([~/?ScreenId=SO301000|SO301000]) Sales Orders (SO301000) SalesOrder.DiscountDetails.ExternalDiscountCode  ([~/?ScreenId=SO301000|SO301000]) Sales Orders (SO301000) SalesOrder.OpenSalesOrder  ([~/?ScreenId=SO301000|SO301000]) Sales Orders (SO301000) SalesOrder.PaymentProfileID  ([~/?ScreenId=SO301000|SO301000]) Sales Orders (SO301000) SalesOrder.ReleaseFromCreditHoldSalesOrder  ([~/?ScreenId=SO301000|SO301000]) Sales Orders (SO301000) SalesOrder.SalesOrderAddInvoice  ([~/?ScreenId=SO301000|SO301000]) Sales Orders (SO301000) SalesOrder.SalesOrderAddStockItem  ([~/?ScreenId=SO301000|SO301000]) Sales Orders (SO301000) SalesOrder.SalesOrderCreatePurchaseOrder  ([~/?ScreenId=SO301000|SO301000]) Sales Orders (SO301000) SalesOrder.SalesOrderCreateReceipt  ([~/?ScreenId=SO301000|SO301000]) Sales Orders (SO301000) SalesOrder.SalesOrderCreateShipment  ([~/?ScreenId=SO301000|SO301000]) Sales Orders (SO301000) SalesOrder.ShipToAddress.Validated  ([~/?ScreenId=SO301000|SO301000]) Sales Orders (SO301000) Shipment.PrepareInvoice  ([~/?ScreenId=SO302000|SO302000]) Shipments (SO302000) Shipment.ShipToSettings.ShipToAddress.Validated  ([~/?ScreenId=SO302000|SO302000]) Shipments (SO302000) Task.RelatedActivities.NoteID  ([~/?ScreenId=CR306020|CR306020]) Task (CR306020) Task.TimeActivity.CostCode  ([~/?ScreenId=CR306020|CR306020]) Task (CR306020) Renamed Actions Action Name in  Default/18.200.001  (Action Name in                                      Default/17.200.001 ) Related Form Name and ID Email.CreateContactFromEmail                                      ( Email.CreateContactEmail )  ([~/?ScreenId=CR306015|CR306015]) Email Activity (CR306015) Email.CreateEventFromEmail                                      ( Email.CreateEventEmail )  ([~/?ScreenId=CR306015|CR306015]) Email Activity (CR306015) Email.CreateLeadFromEmail                                      ( Email.CreateLeadEmail )  ([~/?ScreenId=CR306015|CR306015]) Email Activity (CR306015) Email.CreateOpportunityFromEmail                                      ( Email.CreateOpportunityEmail )  ([~/?ScreenId=CR306015|CR306015]) Email Activity (CR306015) Email.CreateExpenseReceiptFromEmail                                      ( Email.CreateExpenseReceiptEmail )  ([~/?ScreenId=CR306015|CR306015]) Email Activity (CR306015) Email.CreateCaseFromEmail                                      ( Email.CreateCaseEmail )  ([~/?ScreenId=CR306015|CR306015]) Email Activity (CR306015) Email.CreateTaskFromEmail                                      ( Email.CreateTaskEmail )  ([~/?ScreenId=CR306015|CR306015]) Email Activity (CR306015) Email.LinkEntityToEmail                                      ( Email.SelectRelatedEntityEmail )  ([~/?ScreenId=CR306015|CR306015]) Email Activity (CR306015) Event.LinkEntityToEvent                                      ( Event.SelectRelatedEntityEvent )  ([~/?ScreenId=CR306030|CR306030]) Event (CR306030) Task.LinkEntityToTask                                      ( Task.SelectRelatedEntityTask )  ([~/?ScreenId=CR306020|CR306020]) Task (CR306020) Removed Fields and Actions Field or Action Name Related Form Name and ID Email.SelectSourceEmail  ([~/?ScreenId=CR306015|CR306015]) Email Activity (CR306015) FinancialPeriod.Details.Active  ([~/?ScreenId=GL201000|GL201000]) Master Financial Calendar (GL201000) FinancialPeriod.Details.ClosedInGL  ([~/?ScreenId=GL201000|GL201000]) Master Financial Calendar (GL201000) FinancialPeriod.Details.ClosedInPR  ([~/?ScreenId=GL201000|GL201000]) Master Financial Calendar (GL201000) PurchaseReceipt.Details.Project  ([~/?ScreenId=PO302000|PO302000]) Purchase Receipts (PO302000) PurchaseReceipt.Details.ProjectTask  ([~/?ScreenId=PO302000|PO302000]) Purchase Receipts (PO302000) ]]></column>
		</row>
		<row PageID="709351cc-566a-47b3-b153-3a9fdd690ce0" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="8e1b8553-f3c5-5dc6-94d6-519a279680d3" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You use the [HelpRoot_FormReference\SM_20_70_60|Web Service Endpoints] ([~/?ScreenId=SM207060|SM207060]) form to create a custom endpoint.{br}

If you need to use a custom endpoint, you can either create an endpoint from scratch or extend an existing endpoint with the needed API. This procedure describes how to create a custom endpoint from scratch. To learn how to extend an existing endpoint, see [HelpRoot_Dev_Integration\IS__how_Extend_Endpoint|To Extend an Existing Endpoint].
==To Create an Endpoint from Scratch==[anchor|#_44f4fa4d-917d-429a-adf6-2e590e59c074][anchor|#_c59657ec-4377-40a8-bcb2-cdb1a083b768]
#Open the [HelpRoot_FormReference\SM_20_70_60|Web Service Endpoints] ([~/?ScreenId=SM207060|SM207060]) form by searching for or navigating to it. 
#:((({S:Hint}To open any form, you can navigate to it or search for it (by its name or by its form ID without periods). For more information about search capabilities, see [HelpRoot_Interface\UIG__con_New_UI_Search|Search in the Modern UI].
)))
#In the '''Endpoint Name''' box, type the name of the new endpoint. 
#:((({S:Hint}For details on the characters that can be used in the endpoint name and version, see [HelpRoot_Dev_Integration\IS__con_Endpoint_Naming_Rules|Naming Rules for Endpoints].
)))
#In the '''Endpoint Version''' box, type the version of the new endpoint.
#Add the needed entities, fields, and actions to the contract of the created endpoint, as described in the sections below.
#Click '''Save''' on the form toolbar.
[anchor|#_6a9f4811-906d-43f5-9815-de770f5fe3b6]
==To Add a Top-Level Entity to the Contract of the Endpoint==[anchor|#_6d7ca9ed-c6fd-4bc4-8033-0ebeb57eca47]
#In the '''Endpoint Name''' box, select the name of the endpoint to which you want to add an entity.
#In the '''Endpoint Version''' box, select the version of the endpoint to which you want to add an entity.
#In the left pane, select the ''Endpoint'' node.
#On the toolbar of the left pane, click '''Insert''', and in the '''Create Entity''' dialog box, specify the values as follows, and click '''OK''':
##In the '''Object Name''' box, type the name of the entity. This is the name of the API object that you will use in the code of your application to work with the entity. 
##:((({S:Hint}For details on the characters that can be used in the entity names, see [HelpRoot_Dev_Integration\IS__con_Endpoint_Naming_Rules|Naming Rules for Endpoints].
)))
##In the '''Screen ID''' lookup box, select the form to which the entity should correspond.
#Add the needed fields, actions, or nested entities to the entity, as described in the sections below.
[anchor|#_7718d822-4723-412a-aa36-32a7a61fe2cd]
==To Add a Linked or Detail Entity to Another Entity==[anchor|#_32db4466-51ee-4e61-ba89-21136ba3be2d]
#In the '''Endpoint Name''' box, select the name of the endpoint to which you want to add an entity.
#In the '''Endpoint Version''' box, select the version of the endpoint to which you want to add an entity.
#In the left pane, select the entity node to which you want to add a linked or detail entity.
#On the toolbar of the left pane, click '''Insert'''. 
#In the '''Field Name''' box of the '''Create Entity''' dialog box, which opens, type the name of the field that should be used to access the nested entity, and specify the values of other elements in one of the following ways:
#*If you want to insert an entity that already exists in the contract, select the '''Use Existing Entity''' check box, and select the needed entity in the '''Entity Type''' box.
#*If you want to insert a new entity, in the '''Object Name''' box, type the name of the entity, and in the '''Object Type''' box, select the type of the entity: ''Top-Level'', ''Linked'', or ''Detail''. If you have selected the top-level entity to be inserted, in the '''Screen ID''' lookup box, specify the form to which the entity should correspond.
#:((({S:Hint}For details on the characters that can be used in the entity names, see [HelpRoot_Dev_Integration\IS__con_Endpoint_Naming_Rules|Naming Rules for Endpoints].
)))
#Click '''OK'''. The new entity appears in the contract.
#Add fields to the created entity, as described in the following section.
[anchor|#_6b4c3dab-6732-41f3-8cad-0ba5a92f6d79]
==To Add Fields to an Entity==[anchor|#_1ee3e2f6-f982-4ffb-b66e-d5ff0007824b]
#In the '''Endpoint Name''' box, select the name of the endpoint to which you want to add an entity.
#In the '''Endpoint Version''' box, select the version of the endpoint to which you want to add an entity.
#In the left pane, select the entity node to which you want to add fields.
#On the '''Fields''' tab of the right pane, do one of the following:
#*Click '''Populate''' on the tab toolbar. In the '''Populate Fields''' dialog box, select the Acumatica ERP object whose fields you want to include in the entity and the fields that you want to include, and click '''OK'''. The selected fields are added to the contract.
#*Click '''Add Row''' on the tab toolbar; then type the name of the new field in the '''Field Name''' column of the added row, select the Acumatica ERP object whose field you want to include in the entity in the '''Mapped Object''' column, and select the field that you want to include in the '''Mapped Field''' column.
#:((({S:Hint}[anchor|#_288cfaec-9f1a-4242-9769-f7837dbc6c27]
*For some fields to be included in the entity, the corresponding Acumatica ERP feature or features must be enabled on the [HelpRoot_FormReference\CS_10_00_00|Enable/Disable Features] ([~/?ScreenId=CS100000|CS100000]) form. For information on Acumatica ERP basic functionality and add-on features, see [HelpRoot_Administration\CS__con_Features_Overview|Overview of the Acumatica ERP Features ].
*For details on the characters that can be used in the field names, see [HelpRoot_Dev_Integration\IS__con_Endpoint_Naming_Rules|Naming Rules for Endpoints].
)))
#Click '''Save''' on the form toolbar.
[anchor|#_ac4ef926-d0da-4d37-83f6-6fe92bf38001]
==To Add an Action to an Entity==[anchor|#_8201afd9-dc7b-43e3-b3ed-28537004af8d]
#In the '''Endpoint Name''' box, select the name of the endpoint to which you want to add an entity.
#In the '''Endpoint Version''' box, select the version of the endpoint to which you want to add an entity.
#On the left pane, select the ''Actions'' node in the needed entity.
#On the toolbar, click '''Insert'''. 
#In the '''Create Action''' dialog box, which opens, select the needed Acumatica ERP action, type the name that should be used to invoke this action through the API, and click '''OK'''. The new action is added to the contract.
#:((({S:Hint}For details on the characters that can be used in the action names, see [HelpRoot_Dev_Integration\IS__con_Endpoint_Naming_Rules|Naming Rules for Endpoints].
)))
#Click '''Save''' on the form toolbar.
]]></column>
			<column name="PlainText"><![CDATA[To Create a Custom Endpoint You use the   ([~/?ScreenId=SM207060|SM207060]) Web Service Endpoints (SM207060) form to                 create a custom endpoint. If you need to use a custom endpoint, you can either create an endpoint from scratch                 or extend an existing endpoint with the needed API. This procedure describes how to                 create a custom endpoint from scratch. To learn how to extend an existing endpoint,                 see  To Extend an Existing Endpoint. To Create an Endpoint from Scratch Open the   ([~/?ScreenId=SM207060|SM207060]) Web Service Endpoints (SM207060) form by searching for or             navigating to it.  To open any form, you can navigate to it or search             for it (by its name or by its form ID without periods). For more information about             search capabilities, see  Search in the Modern UI. In the  Endpoint Name  box, type the name of the new                     endpoint.  For details on the characters that can be used in the endpoint                         name and version, see  Naming Rules for Endpoints. In the  Endpoint Version  box, type the version of the new                     endpoint. Add the needed entities, fields, and actions to the contract of the created                     endpoint, as described in the sections below. Click  Save  on the form toolbar. To Add a Top-Level Entity to the Contract of the Endpoint In the  Endpoint Name  box, select the name of the endpoint                     to which you want to add an entity. In the  Endpoint Version  box, select the version of the                     endpoint to which you want to add an entity. In the left pane, select the  Endpoint  node. On the toolbar of the left pane, click  Insert , and in the                          Create Entity  dialog box, specify the values as                     follows, and click  OK : In the  Object Name  box, type the name of the                             entity. This is the name of the API object that you will use in the code                             of your application to work with the entity.  For details on the                                 characters that can be used in the entity names, see  Naming Rules for Endpoints. In the  Screen ID  lookup box, select the form to                             which the entity should correspond. Add the needed fields, actions, or nested entities to the entity, as described                     in the sections below. To Add a Linked or Detail Entity to Another Entity In the  Endpoint Name  box, select the name of the endpoint                     to which you want to add an entity. In the  Endpoint Version  box, select the version of the                     endpoint to which you want to add an entity. In the left pane, select the entity node to which you want to add a linked or                     detail entity. On the toolbar of the left pane, click  Insert .  In the  Field Name  box of the  Create                         Entity  dialog box, which opens, type the name of the field that                     should be used to access the nested entity, and specify the values of other                     elements in one of the following ways: If you want to insert an entity that already exists in the contract,                             select the  Use Existing Entity  check box, and                             select the needed entity in the  Entity Type                              box. If you want to insert a new entity, in the  Object                                 Name  box, type the name of the entity, and in the                                  Object Type  box, select the type of the                             entity:  Top-Level ,  Linked , or  Detail . If you have                             selected the top-level entity to be inserted, in the  Screen                                 ID  lookup box, specify the form to which the entity                             should correspond. For details on the characters that can be used in the entity names,                         see  Naming Rules for Endpoints. Click  OK . The new entity appears in the contract. Add fields to the created entity, as described in the following section. To Add Fields to an Entity In the  Endpoint Name  box, select the name of the endpoint                     to which you want to add an entity. In the  Endpoint Version  box, select the version of the                     endpoint to which you want to add an entity. In the left pane, select the entity node to which you want to add fields. On the  Fields  tab of the right pane, do one of the                         following: Click  Populate  on the tab toolbar. In the                                  Populate Fields  dialog box, select the  Acumatica ERP object whose fields you want to include in the entity and the fields                             that you want to include, and click  OK . The                             selected fields are added to the contract. Click  Add Row  on the tab toolbar; then type the                             name of the new field in the  Field Name  column of                             the added row, select the  Acumatica ERP object whose field you want to include in the entity in the                                  Mapped Object  column, and select the field                             that you want to include in the  Mapped Field                              column. For some fields to be included in the entity, the corresponding  Acumatica ERP feature or features must be enabled on the   ([~/?ScreenId=CS100000|CS100000]) Enable/Disable Features (CS100000) form. For information on                                      Acumatica ERP basic functionality and add-on features, see  Overview of the Acumatica ERP Features . For details on the characters that can be used in the field names,                                 see  Naming Rules for Endpoints. Click  Save  on the form toolbar. To Add an Action to an Entity In the  Endpoint Name  box, select the name of the endpoint                     to which you want to add an entity. In the  Endpoint Version  box, select the version of the                     endpoint to which you want to add an entity. On the left pane, select the  Actions  node in the needed entity. On the toolbar, click  Insert .  In the  Create Action  dialog box, which opens, select the                     needed  Acumatica ERP action, type the name that should be used to invoke this action through the                     API, and click  OK . The new action is added to the                         contract. For details on the characters that can be used in the action                         names, see  Naming Rules for Endpoints. Click  Save  on the form toolbar. ]]></column>
		</row>
		<row PageID="c450492e-06fe-4563-95c3-efa76975415b" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="528b497e-4fc8-350e-b881-dea07591b22a" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You use the [HelpRoot_FormReference\SM_20_70_60|Web Service Endpoints] ([~/?ScreenId=SM207060|SM207060]) form to create an endpoint as an extension of an existing endpoint. {br}

You may need to create an extension of an endpoint if you want to use the entities that are defined in the contract of the existing endpoint but you also need some additional entities, fields, and actions in the contract. For example, the contract of the system endpoint with the name ''Default'' and Version ''6.00.001'' contains the <tt>Address</tt> entity, which includes the following fields: <tt>AddressLine1</tt>, <tt>AddressLine2</tt>, <tt>City</tt>, <tt>Country</tt>, <tt>PostalCode</tt>, and <tt>State</tt>. Suppose that you want to add the new {{GPSCoordinates}} field to the <tt>Address</tt> entity of the contract and use it with other API of the contract. You cannot edit the contract of the system endpoint; instead, you should create an endpoint that is based on this system endpoint, and add the new {{GPSCoordinates}} field to the <tt>Address</tt> entity of the contract of the new endpoint.{br}

This procedure describes how to create an endpoint that is based on an existing endpoint. 
==To Extend an Existing Endpoint==[anchor|#_77d172cb-b6a4-4986-b15c-fb536e771ad0][anchor|#_243c39ff-6ad1-448c-a38a-09415a0265d3]
#Open the [HelpRoot_FormReference\SM_20_70_60|Web Service Endpoints] ([~/?ScreenId=SM207060|SM207060]) form by searching for or navigating to it. 
#:((({S:Hint}To open any form, you can navigate to it or search for it (by its name or by its form ID without periods). For more information about search capabilities, see [HelpRoot_Interface\UIG__con_New_UI_Search|Search in the Modern UI].
)))
#Select the endpoint that you want the new endpoint to be based on as follows:
##Select the name of the base endpoint in the '''Endpoint Name''' box.
##Select the version of the base endpoint in the '''Endpoint Version''' box.
#Click '''Extend Endpoint''' on the form toolbar.
#In the '''Extend Current Endpoint''' dialog box, which opens, make sure the correct name and version of the base endpoint are specified in the '''Base Endpoint Name''' and '''Base Endpoint Version''' boxes. Specify the name of the new endpoint in the '''Endpoint Name''' box and the version of the new endpoint in the '''Endpoint Version''' box and click '''OK'''. 
#:((({S:Hint}For details on the characters that can be used in the endpoint name and version, see [HelpRoot_Dev_Integration\IS__con_Endpoint_Naming_Rules|Naming Rules for Endpoints].
)))
#:The new endpoint with the name and version you specify appears on the form. On the left pane of the form, you can see the list of entities that were inherited from the base endpoint.
#Add the needed entities, fields, and actions to the contract of the created endpoint, as described in [HelpRoot_Dev_Integration\IS__how_Create_Endpoint|To Create a Custom Endpoint], or extend the entities inherited from the base endpoint, as described in [[#_3239daef-b345-45af-8b83-117a50d396c0|To Extend an Existing Entity].
#Click '''Save''' on the form toolbar.
[anchor|#_3239daef-b345-45af-8b83-117a50d396c0]
==To Extend an Existing Entity==[anchor|#_103e3c61-8de4-4172-906f-a94a27be12b6]
#Select the extended endpoint in which you want to extend an entity inherited from the base endpoint as follows:
##In the '''Endpoint Name''' box, select the name of the extended endpoint.
##In the '''Endpoint Version''' box, select the version of the extended endpoint.
#In the left pane, select the entity inherited from the base endpoint to which you want to add new fields.
#On the toolbar of the '''Fields''' tab in the right pane, click '''Extend Endpoint'''. 
#Use the '''Add Row''', '''Delete Row''', and '''Populate''' buttons, which have become available on the tab toolbar, to add and delete fields of the entity. For more details, see [HelpRoot_Dev_Integration\IS__how_Create_Endpoint#_6b4c3dab-6732-41f3-8cad-0ba5a92f6d79|To Add Fields to an Entity].
#Click '''Save''' on the form toolbar.
]]></column>
			<column name="PlainText"><![CDATA[To Extend an Existing Endpoint You use the   ([~/?ScreenId=SM207060|SM207060]) Web Service Endpoints (SM207060) form to                 create an endpoint as an extension of an existing endpoint.  You may need to create an extension of an endpoint if you want to use the entities                 that are defined in the contract of the existing endpoint but you also need some                 additional entities, fields, and actions in the contract. For example, the contract                 of the system endpoint with the name  Default  and Version  6.00.001                  contains the  Address  entity, which includes the following fields:                      AddressLine1 ,  AddressLine2 ,                      City ,  Country ,                      PostalCode , and  State . Suppose that you                 want to add the new  GPSCoordinates  field to the                      Address  entity of the contract and use it with other API of                 the contract. You cannot edit the contract of the system endpoint; instead, you                 should create an endpoint that is based on this system endpoint, and add the new                      GPSCoordinates  field to the  Address  entity                 of the contract of the new endpoint. This procedure describes how to create an endpoint that is based on an existing                 endpoint.  To Extend an Existing Endpoint Open the   ([~/?ScreenId=SM207060|SM207060]) Web Service Endpoints (SM207060) form by searching for or             navigating to it.  To open any form, you can navigate to it or search             for it (by its name or by its form ID without periods). For more information about             search capabilities, see  Search in the Modern UI. Select the endpoint that you want the new endpoint to be based on as follows: Select the name of the base endpoint in the  Endpoint                                 Name  box. Select the version of the base endpoint in the  Endpoint                                 Version  box. Click  Extend Endpoint  on the form toolbar. In the  Extend Current Endpoint  dialog box, which opens,                     make sure the correct name and version of the base endpoint are specified in the                          Base Endpoint Name  and  Base Endpoint                         Version  boxes. Specify the name of the new endpoint in the                          Endpoint Name  box and the version of the new endpoint                     in the  Endpoint Version  box and click                          OK .  For details on the characters that can be                         used in the endpoint name and version, see  Naming Rules for Endpoints. The new endpoint                         with the name and version you specify appears on the form. On the left pane                         of the form, you can see the list of entities that were inherited from the                         base endpoint. Add the needed entities, fields, and actions to the contract of the created                     endpoint, as described in  To Create a Custom Endpoint,                     or extend the entities inherited from the base endpoint, as described in  To Extend an Existing Entity To Extend an Existing Entity. Click  Save  on the form toolbar. To Extend an Existing Entity Select the extended endpoint in which you want to extend an entity inherited                     from the base endpoint as follows: In the  Endpoint Name  box, select the name of the                             extended endpoint. In the  Endpoint Version  box, select the version                             of the extended endpoint. In the left pane, select the entity inherited from the base endpoint to which                     you want to add new fields. On the toolbar of the  Fields  tab in the right pane, click                          Extend Endpoint .  Use the  Add Row ,  Delete Row , and                          Populate  buttons, which have become available on the                     tab toolbar, to add and delete fields of the entity. For more details, see  To Add Fields to an Entity. Click  Save  on the form toolbar. ]]></column>
		</row>
		<row PageID="2216d868-9370-49e4-b1b7-62f2ae04a7f6" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="85d8d6dc-3381-344e-7029-06d4f997cf39" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You use the [HelpRoot_FormReference\SM_20_70_60|Web Service Endpoints] ([~/?ScreenId=SM207060|SM207060]) form to validate an endpoint, an entity, or an action. During this validation, the system makes sure the following criteria are met for the elements of the endpoint, entity, or action:[anchor|#_3ca24b85-3754-46eb-b9bf-8b3b7d2b2557]
*The names of the elements satisfy the naming rules. For details on these rules, see [HelpRoot_Dev_Integration\IS__con_Endpoint_Naming_Rules|Naming Rules for Endpoints].
*The elements are mapped to objects, fields, and actions that exist in the system.

The validation of the name of a new entity, field, action, or action parameter is performed automatically once you have entered the name on the form. You can validate an endpoint, entity, or action manually, as described in this topic.{br}{TOC}
==To Validate an Endpoint==[anchor|#_5fb1e2e0-9790-4a75-be91-7156f6686ff5][anchor|#_58b486e6-8efb-498b-bd07-cca277c3b0e7]
#Open the [HelpRoot_FormReference\SM_20_70_60|Web Service Endpoints] ([~/?ScreenId=SM207060|SM207060]) form by searching for or navigating to it. 
#:((({S:Hint}To open any form, you can navigate to it or search for it (by its name or by its form ID without periods). For more information about search capabilities, see [HelpRoot_Interface\UIG__con_New_UI_Search|Search in the Modern UI].
)))
#Select the endpoint that you want to validate as follows:
##In the '''Endpoint Name''' box, select the name of the endpoint.
##In the '''Endpoint Version''' box, select the version of the endpoint.
#On the form toolbar, click '''Validate Endpoint'''. The long-running validation operation starts. 
#:Once the validation is finished, the system displays a message with results of the validation. If the validation has failed, the error message contains the names of all fields that caused the error.
#If any errors occur, correct the endpoint accordingly.

==To Validate an Entity==[anchor|#_2b4fb78a-c94e-47ae-a65a-f8f85288f066][anchor|#_64c90373-eeb3-4503-8cae-c6a13eb486a3]
#Open the [HelpRoot_FormReference\SM_20_70_60|Web Service Endpoints] ([~/?ScreenId=SM207060|SM207060]) form by searching for or navigating to it. 
#:((({S:Hint}To open any form, you can navigate to it or search for it (by its name or by its form ID without periods). For more information about search capabilities, see [HelpRoot_Interface\UIG__con_New_UI_Search|Search in the Modern UI].
)))
#Select the endpoint that contains the entity that you want to validate as follows:
##In the '''Endpoint Name''' box, select the name of the endpoint.
##In the '''Endpoint Version''' box, select the version of the endpoint.
#In the left pane, click the entity that you want to validate.
#On the toolbar of the '''Fields''' tab of the right pane, click '''Validate Entity'''.
#:Once the validation is finished, the system displays a message with results of the validation. If the validation has failed, the error message contains the names of all fields that caused the error.
#If any errors occur, correct the entity accordingly.

==To Validate an Action==[anchor|#_de091c4c-2a66-4c5d-9c6b-f1257783d6f1][anchor|#_99f115f4-dc8b-438d-83d0-c8c97336fe5e]
#Open the [HelpRoot_FormReference\SM_20_70_60|Web Service Endpoints] ([~/?ScreenId=SM207060|SM207060]) form by searching for or navigating to it. 
#:((({S:Hint}To open any form, you can navigate to it or search for it (by its name or by its form ID without periods). For more information about search capabilities, see [HelpRoot_Interface\UIG__con_New_UI_Search|Search in the Modern UI].
)))
#Select the endpoint that contains the action that you want to validate as follows:
##In the '''Endpoint Name''' box, select the name of the endpoint.
##In the '''Endpoint Version''' box, select the version of the endpoint.
#In the left pane, click the action that you want to validate.
#On the toolbar of the '''Parameters''' tab of the right pane, click '''Validate Action'''.
#:Once the validation is finished, the system displays a message with results of the validation. If the validation has failed, the error message contains the names of all fields that caused the error.
#If any errors occur, correct the action accordingly.
]]></column>
			<column name="PlainText"><![CDATA[To Validate an Endpoint You use the   ([~/?ScreenId=SM207060|SM207060]) Web Service Endpoints (SM207060) form to validate an     endpoint, an entity, or an action. During this validation, the system makes sure the following     criteria are met for the elements of the endpoint, entity, or action: The names of the elements satisfy the naming rules. For details on these rules, see  Naming Rules for Endpoints. The elements are mapped to objects, fields, and actions that exist in the system. The validation of the name of a new entity, field, action, or action parameter is performed     automatically once you have entered the name on the form. You can validate an endpoint, entity,     or action manually, as described in this topic. To Validate an Endpoint Open the   ([~/?ScreenId=SM207060|SM207060]) Web Service Endpoints (SM207060) form by searching for or             navigating to it.  To open any form, you can navigate to it or search             for it (by its name or by its form ID without periods). For more information about             search capabilities, see  Search in the Modern UI. Select the endpoint that you want to validate as follows: In the  Endpoint Name  box, select the name of the endpoint. In the  Endpoint Version  box, select the version of the endpoint. On the form toolbar, click  Validate Endpoint . The long-running      validation operation starts.  Once the validation is finished, the system displays a             message with results of the validation. If the validation has failed, the error message             contains the names of all fields that caused the error. If any errors occur, correct the endpoint accordingly. To Validate an Entity Open the   ([~/?ScreenId=SM207060|SM207060]) Web Service Endpoints (SM207060) form by searching for or             navigating to it.  To open any form, you can navigate to it or search             for it (by its name or by its form ID without periods). For more information about             search capabilities, see  Search in the Modern UI. Select the endpoint that contains the entity that you want to validate as follows: In the  Endpoint Name  box, select the name of the endpoint. In the  Endpoint Version  box, select the version of the endpoint. In the left pane, click the entity that you want to validate. On the toolbar of the  Fields  tab of the right pane, click        Validate Entity . Once the validation is finished, the system displays a             message with results of the validation. If the validation has failed, the error message             contains the names of all fields that caused the error. If any errors occur, correct the entity accordingly. To Validate an Action Open the   ([~/?ScreenId=SM207060|SM207060]) Web Service Endpoints (SM207060) form by searching for or             navigating to it.  To open any form, you can navigate to it or search             for it (by its name or by its form ID without periods). For more information about             search capabilities, see  Search in the Modern UI. Select the endpoint that contains the action that you want to validate as follows: In the  Endpoint Name  box, select the name of the endpoint. In the  Endpoint Version  box, select the version of the endpoint. In the left pane, click the action that you want to validate. On the toolbar of the  Parameters  tab of the right pane, click        Validate Action . Once the validation is finished, the system displays a             message with results of the validation. If the validation has failed, the error message             contains the names of all fields that caused the error. If any errors occur, correct the action accordingly. ]]></column>
		</row>
		<row PageID="1c767ad9-da6d-4047-bc93-6970ad469504" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="b21cfb27-4236-dade-7c01-705380d584f3" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The contract-based representational state transfer (REST) application programming interface (API) of Acumatica ERP provides the REST interface of the Acumatica ERP contract-based web services through which external systems can get data records from Acumatica ERP, process these records, and save new or updated records to Acumatica ERP. {br}

This chapter includes the topics that are specific to the contract-based REST API. For general information on the contract-based web services, see [HelpRoot_Dev_Integration\IS__mng_Contract_Based_Web_Services|Configuring the Contract-Based REST and SOAP API]. You can find examples of how to use the contract-based SOAP API in the [https://openuni.acumatica.com/courses/integration/i210-contract-based-web-services/|I210 Integration: Contract-Based Web Services] training course and in [HelpRoot_Dev_Integration\IS__mng_CB_API_Examples|Contract-Based API Examples]. For the API reference, see [HelpRoot_Dev_Integration\IS__IS_CB_REST_API_Reference|Contract-Based REST API Reference].
==In This Chapter==[anchor|#_556f6e89-2557-4d80-ae1f-85b6d57c86d2]
*[HelpRoot_Dev_Integration\IS__con_REST_Entity_Representation_in_JSON|Representation of a Record in JSON Format]
*[HelpRoot_Dev_Integration\IS__con_REST_Login|Signing in to the Service]
*[HelpRoot_Dev_Integration\IS__con_REST_Logout|Signing out from the Service]
*[HelpRoot_Dev_Integration\IS__con_REST_Create_Record|Creation of a Record]
*[HelpRoot_Dev_Integration\IS__con_REST_Update_Record|Update of a Record]
*[HelpRoot_Dev_Integration\IS__con_REST_Get_Record_by_Key|Retrieval of a Record by Key Fields]
*[HelpRoot_Dev_Integration\IS__con_REST_Get_Record_by_ID|Retrieval of a Record by ID]
*[HelpRoot_Dev_Integration\IS__con_REST_Get_Records|Retrieval of Records by Conditions]
*[HelpRoot_Dev_Integration\IS__con_REST_Retrieve_from_Inquiry|Retrieval of Data from an Inquiry Form]
*[HelpRoot_Dev_Integration\IS__con_REST_Parameters|Parameters for Retrieving Records]
*[HelpRoot_Dev_Integration\IS__con_REST_Delete_Record|Removal of a Record]
*[HelpRoot_Dev_Integration\IS__con_REST_Action_Execution|Execution of an Action]
*[HelpRoot_Dev_Integration\IS__con_REST_Put_File|Attachment of a File to a Record]
*[HelpRoot_Dev_Integration\IS__con_REST_Get_File|Retrieval of a File Attached to a Record]
*[HelpRoot_Dev_Integration\IS__con_REST_Get_List_of_Custom_Fields|Retrieval of the Schema of Custom Fields]
*[HelpRoot_Dev_Integration\IS__con_REST_Multi-Language_Fields|Multi-Language Fields]
]]></column>
			<column name="PlainText"><![CDATA[Working with the Contract-Based REST API The contract-based representational state transfer (REST) application programming interface         (API) of  Acumatica ERP provides the REST interface of the  Acumatica ERP contract-based web services through which external systems can get data records from  Acumatica ERP, process these records, and save new or updated records to  Acumatica ERP.  This chapter includes the topics that are specific to the contract-based REST API. For         general information on the contract-based web services, see  Configuring the Contract-Based REST and SOAP API.         You can find examples of how to use the contract-based SOAP API in the  I210 Integration: Contract-Based Web Services I210 Integration: Contract-Based Web Services         training course and in  Contract-Based API Examples. For the API reference,         see  Contract-Based REST API Reference. In This Chapter Representation of a Record in JSON FormatSigning in to the ServiceSigning out from the ServiceCreation of a RecordUpdate of a RecordRetrieval of a Record by Key FieldsRetrieval of a Record by IDRetrieval of Records by ConditionsRetrieval of Data from an Inquiry FormParameters for Retrieving RecordsRemoval of a RecordExecution of an ActionAttachment of a File to a RecordRetrieval of a File Attached to a RecordRetrieval of the Schema of Custom FieldsMulti-Language Fields]]></column>
		</row>
		<row PageID="7b104d41-3457-42f8-8010-165d9d931d3f" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="328250bb-ddf3-044a-d7d5-365a0367f12d" RecordSourceID="22377">
			<column name="Content"><![CDATA[
By using the contract-based REST API, you obtain existing records from Acumatica ERP, create new records, update, and delete them. You work with the records in Acumatica ERP by using the entities that are defined in the contract of the endpoint that you use to access the service. You pass records to and receive them from the contract-based REST API in JavaScript object notation (JSON) format. JSON is a text format for transmitting data objects that consist of key-value pairs.{br}

To represent a record in JSON format, you use the rules that are described in the following sections. You do not need to specify the values of all fields of an entity; you can specify the values of only the needed fields.{br}{TOC}
==System Fields==
You specify the value of a system field (such as <tt>ID</tt>, <tt>RowNumber</tt>, and <tt>Note</tt>) of an entity in the following format. {{{{&lt;Field name&gt; : &lt;Value&gt;
}}}}{br}

For example, if you need to specify the note ''Imported'' for an entity, you use the following string. {{{{"Note" : "Imported"
}}}}
==General Fields==
You specify the value of a general field (that is, a field that is not a system field) of an entity in the following format. {{{{&lt;Field name&gt; : {value : &lt;Value&gt;}
}}}} For example, if you need to specify ''JOHNGOOD'' as the customer ID of a customer record, you use the following string. {{{{"CustomerID" : {value : "JOHNGOOD"}
}}}}
==Linked Entities==
You specify the values of the fields of a linked entity in the following format. {{{{&lt;Field name&gt; : 
  {
    &lt;List of fields of the linked entity with values
  }
}}}} For example, if you need to specify the values of an email address and the address of a customer main contact, you use the following string.{{{{"MainContact" : 
    {
      "Email" : {value : "demo@gmail.com" },
      "Address" : 
        {
          "AddressLine1" : {value : "4030 Lake Washington Blvd NE" },
          "AddressLine2" : {value : "Suite 100" },
          "City" : {value : "Kirkland" },
          "State" : {value : "WA" },
          "PostalCode" : {value : "98033" }
        }      
    } 
}}}}
==Detail Entities==
You specify the values of the fields of a detail entity in the following format.{{{{&lt;Field name&gt; : 
  [ 
    {
      &lt;List of fields of the detail entity with the values}
    }, 
    {
      &lt;List of fields of the detail entity with the values&gt;
    }, 
    … 
  ]
}}}}For example, if you need to specify the values of two detail lines of a sales order, you use the following string.{{{{"Details" : [
  {
    "InventoryID" : {value: "AALEGO500"},
    "Quantity" : {value: 10},
    "UOM" : {value: "PIECE"},
  },
  {
    "InventoryID" : {value: "CONGRILL"},
    "Quantity" : {value: 1},
    "UOM" : {value: "PIECE"},
  }
]
}}}}
==Custom Fields==
You specify the values of the custom fields (that is, the fields that are not included in the contract of the endpoint) in the following format.{{{{"custom" : 
  {
    &lt;View name&gt; : 
     { 
       &lt;Field name&gt; : 
         { 
           "type" : &lt;value&gt;, 
           "value" : &lt;value&gt; 
         }
     }
  }
}}}}You use this block in the JSON representation of the entity (top-level, detail, or linked) that contains this custom field. ((({S:Hint}For details on how to find out the field name and the name of the data view, see [HelpRoot_Dev_Integration\IS__con_CB_Custom_Fields|Custom Fields]. 
))){br}

For example, suppose that you added the '''Personal ID''' element to the '''Main Contact''' area of the [HelpRoot_FormReference\AR_30_30_00|Customers] ([~/?ScreenId=AR303000|AR303000]) form in a customization project. The <tt>Contact</tt> entity, which is available through the <tt>MainContact</tt> property of the <tt>Customer</tt> entity, contains the '''Personal ID''' custom element. This element has the {{UsrPersonalID}} field name and belongs to the {{DefContact}} data view. The type of the element depends on the contract version (in Contract Version 2, <tt>String</tt>; in Contract Version 3, <tt>CustomStringField</tt>). Therefore, to specify the value ''AB123456'' of the '''Personal ID''' custom element for the customer with ID ''JOHNGOOD'' through the REST API, you use one of the following strings depending on the contract version of the endpoint:[anchor|#_bbff609c-f5a8-4692-b6c1-4764c331ac25]
*For Contract Version 2{{{{{
  "CustomerID" : {value : "JOHNGOOD" } ,
  "MainContact" : 
    {
      "custom" : 
        {
          "DefContact" : 
            { 
              "UsrPersonalID" : 
                { 
                  "type" : "String", 
                  "value" : "AB123456" 
                }
            }
        }
    }
}
}}}}
*For Contract Version 3{{{{{
  "CustomerID" : {value : "JOHNGOOD" } ,
  "MainContact" : 
    {
      "custom" : 
        {
          "DefContact" : 
            { 
              "UsrPersonalID" : 
                { 
                  "type" : "CustomStringField", 
                  "value" : "AB123456" 
                }
            }
        }
    }
}
}}}}
]]></column>
			<column name="PlainText"><![CDATA[Representation of a Record in JSON Format By using the contract-based REST API, you obtain existing records from  Acumatica ERP, create new records, update, and delete them. You work with the records in  Acumatica ERP by using the entities that are defined in the contract of the endpoint that you use to         access the service. You pass records to and receive them from the contract-based REST API in         JavaScript object notation (JSON) format. JSON is a text format for transmitting data         objects that consist of key-value pairs. To represent a record in JSON format, you use the rules that are described in the following         sections. You do not need to specify the values of all fields of an entity; you can specify         the values of only the needed fields. System Fields You specify the value of a system field (such as  ID ,            RowNumber , and  Note ) of an entity in the following         format.  <Field name> : <Value> For example, if you need to specify the note  Imported  for an entity, you use the         following string.  "Note" : "Imported" General Fields You specify the value of a general field (that is, a field that is not a system field) of         an entity in the following format.          <Field name> : {value : <Value>}  For example, if you need to         specify  JOHNGOOD  as the customer ID of a customer record, you use the following         string.  "CustomerID" : {value : "JOHNGOOD"} Linked Entities You specify the values of the fields of a linked entity in the following format.          <Field name> : 
  {
    <List of fields of the linked entity with values
  }          For example, if you need to specify the values of an email address and the address of a         customer main contact, you use the following         string. "MainContact" : 
    {
      "Email" : {value : "demo@gmail.com" },
      "Address" : 
        {
          "AddressLine1" : {value : "4030 Lake Washington Blvd NE" },
          "AddressLine2" : {value : "Suite 100" },
          "City" : {value : "Kirkland" },
          "State" : {value : "WA" },
          "PostalCode" : {value : "98033" }
        }      
    }  Detail Entities You specify the values of the fields of a detail entity in the following         format. <Field name> : 
  [ 
    {
      <List of fields of the detail entity with the values}
    }, 
    {
      <List of fields of the detail entity with the values>
    }, 
    … 
  ] For         example, if you need to specify the values of two detail lines of a sales order, you use the         following         string. "Details" : [
  {
    "InventoryID" : {value: "AALEGO500"},
    "Quantity" : {value: 10},
    "UOM" : {value: "PIECE"},
  },
  {
    "InventoryID" : {value: "CONGRILL"},
    "Quantity" : {value: 1},
    "UOM" : {value: "PIECE"},
  }
] Custom Fields You specify the values of the custom fields (that is, the fields that are not included in         the contract of the endpoint) in the following         format. "custom" : 
  {
    <View name> : 
     { 
       <Field name> : 
         { 
           "type" : <value>, 
           "value" : <value> 
         }
     }
  } You         use this block in the JSON representation of the entity (top-level, detail, or linked) that         contains this custom field.  For details on how to find out the field name and the name           of the data view, see  Custom Fields.          For example, suppose that you added the  Personal ID  element to the            Main Contact  area of the   ([~/?ScreenId=AR303000|AR303000]) Customers (AR303000) form in a customization project. The            Contact  entity, which is available through the            MainContact  property of the  Customer  entity,         contains the  Personal ID  custom element. This element has the            UsrPersonalID  field name and belongs to the  DefContact          data view. The type of the element depends on the contract version (in Contract Version 2,            String ; in Contract Version 3,  CustomStringField ).         Therefore, to specify the value  AB123456  of the  Personal ID          custom element for the customer with ID  JOHNGOOD  through the REST API, you use one of         the following strings depending on the contract version of the endpoint: For Contract Version             2 {
  "CustomerID" : {value : "JOHNGOOD" } ,
  "MainContact" : 
    {
      "custom" : 
        {
          "DefContact" : 
            { 
              "UsrPersonalID" : 
                { 
                  "type" : "String", 
                  "value" : "AB123456" 
                }
            }
        }
    }
} For Contract Version             3 {
  "CustomerID" : {value : "JOHNGOOD" } ,
  "MainContact" : 
    {
      "custom" : 
        {
          "DefContact" : 
            { 
              "UsrPersonalID" : 
                { 
                  "type" : "CustomStringField", 
                  "value" : "AB123456" 
                }
            }
        }
    }
} ]]></column>
		</row>
		<row PageID="0322492a-de9b-4443-b256-923c48aff31d" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="d957fd57-628b-969d-b5b0-d81199eba1f4" RecordSourceID="22377">
			<column name="Content"><![CDATA[
Each time your application starts work with the Acumatica ERP contract-based REST service, you have to sign in to Acumatica ERP. To sign in to Acumatica ERP, you access the needed URL address with the {{POST}} HTTP method and pass the credentials in the request body. See details on the URL, parameters, HTTP method, and response format in the following sections.{br}{TOC}
==URL ==
When you need to sign in to Acumatica ERP, you use the following URL.{{{{http://&lt;Acumatica ERP URL&gt;/entity/auth/login
}}}}
You replace {{<Acumatica ERP URL>}} with the URL of your Acumatica ERP instance.{br}

For example, suppose that you want to sign in to a local Acumatica ERP instance with the name ''AcumaticaDB''. You should use the following URL: {{http://localhost/AcumaticaDB/entity/auth/login}}.
==Parameters==
You use no parameters when you sign in to Acumatica ERP.
==HTTP Method==
You use the {{POST}} HTTP method and pass the credentials for accessing Acumatica ERP in JSON format, as shown in the following example.{{{{{
  "name" : "admin",
  "password" : "123",
  "company" : "MyStore",
  "branch" : "MYSTORE",
  "locale" : "en-US"
}
}}}}{br}

You specify the values of the parameters as follows:[anchor|#_a105d616-8669-4763-aaf2-45eac5cb0470]
*''name'': The username that the application should use to sign in to Acumatica ERP, such as {{"admin"}}.
*''password'': The password for the username, such as {{"123"}}.
*''company'': The name of the tenant to which the application should sign in, such as {{"MyStore"}}. You can view the name that should be used for the tenant in the '''Login Name''' box of the [HelpRoot_FormReference\SM_20_35_20|Tenants] ([~/?ScreenId=SM203520|SM203520]) form.
*''branch'': The ID of the company to which the application should sign in. You can view the ID of the company in the '''Company ID''' box of the [HelpRoot_FormReference\CS_10_15_00|Companies] ([~/?ScreenId=CS101500|CS101500]) form.
*''locale'': The locale that should be used in Acumatica ERP. You should specify the locale in the {{System.Globalization.CultureInfo}} format converted to {{string}}, as with {{"EN-US"}}. 
*:((({S:Hint}This parameter has been developed for future use. You do not need to set its value. 
)))

==Response==
The response of a successful method call is ''204 No Content''.
==Example==
The following code shows an example of a class that implements a sign in to Acumatica ERP through the REST application programming interface (API). <source lang="csharp">public class RestService: IDisposable
{
    private readonly HttpClient _httpClient;

    private readonly string _acumaticaBaseUrl;

    public RestService(
      string acumaticaBaseUrl, string userName, string password, 
      string company, string branch, string locale)
    {
        _acumaticaBaseUrl = acumaticaBaseUrl;
        _httpClient = new HttpClient(
            new HttpClientHandler
            {
                UseCookies = true,
                CookieContainer = new CookieContainer()
            })
        {
            BaseAddress = new Uri(acumaticaBaseUrl + 
              "/entity/Default/6.00.001/"),
            DefaultRequestHeaders =
            {
                Accept = {MediaTypeWithQualityHeaderValue.Parse("text/json")}
            }
        };

        //Log in to Acumatica ERP
        _httpClient.PostAsJsonAsync(
          acumaticaBaseUrl + "/entity/auth/login", new
            {
                name = userName,
                password = password,
                company = company,
                branch = branch,
                locale = locale
            }).Result
            .EnsureSuccessStatusCode();
    }

    void IDisposable.Dispose()
    {
        _httpClient.PostAsync(_acumaticaBaseUrl + "/entity/auth/logout", 
          new ByteArrayContent(new byte[0])).Wait();
        _httpClient.Dispose();
    }
}</source>{br}

The following code signs in to Acumatica ERP when an instance of the {{RestService}} class, which is defined in the code fragment above, is created.{{{{RestService rs = new RestService(
            Properties.Settings.Default.AcumaticaBaseUrl,
            Properties.Settings.Default.UserName,
            Properties.Settings.Default.Password,
            Properties.Settings.Default.Company,
            Properties.Settings.Default.Branch,
            Properties.Settings.Default.Locale
        );
}}}}
==Usage Notes==
For each attempt to sign in to Acumatica ERP as described in this topic, you must implement the signing out from the service after you finish your work with Acumatica ERP to close the session. For details about the signing out, see [HelpRoot_Dev_Integration\IS__con_REST_Logout|Signing out from the Service].{br}

You should also take into account Acumatica ERP license API limits. For details, see [HelpRoot_Install\License_Restrictions_APIUsers|License Restrictions for API Users].]]></column>
			<column name="PlainText"><![CDATA[Signing in to the Service Each time your application starts work with the  Acumatica ERP contract-based REST service, you have to sign in to  Acumatica ERP. To sign in to  Acumatica ERP, you access the needed URL address with the  POST  HTTP method and pass         the credentials in the request body. See details on the URL, parameters, HTTP method, and         response format in the following sections. URL  When you need to sign in to  Acumatica ERP, you use the following URL. http://< Acumatica ERP URL>/entity/auth/login You replace  < Acumatica ERP URL>  with the URL of your  Acumatica ERP instance. For example, suppose that you want to sign in to a local  Acumatica ERP instance with the name  AcumaticaDB . You should use the following URL:            http://localhost/AcumaticaDB/entity/auth/login . Parameters You use no parameters when you sign in to  Acumatica ERP. HTTP Method You use the  POST  HTTP method and pass the credentials for accessing  Acumatica ERP in JSON format, as shown in the following         example. {
  "name" : "admin",
  "password" : "123",
  "company" : "MyStore",
  "branch" : "MYSTORE",
  "locale" : "en-US"
} You specify the values of the parameters as follows: name : The username that the application should use to sign in to  Acumatica ERP, such as  "admin" . password : The password for the username, such as  "123" . company : The name of the tenant to which the application should sign in, such as  "MyStore" . You can view the name that should be used for the tenant in the  Login Name  box of the   ([~/?ScreenId=SM203520|SM203520]) Tenants (SM203520) form. branch : The ID of the company to which the application should sign in. You can view the ID of the company in the  Company ID  box of the   ([~/?ScreenId=CS101500|CS101500]) Companies (CS101500) form. locale : The locale that should be used in  Acumatica ERP. You should specify the locale in the  System.Globalization.CultureInfo  format converted to  string , as with  "EN-US" .  This parameter has been developed for future use. You do not need to set its value.  Response The response of a successful method call is  204 No Content . Example The following code shows an example of a class that implements a sign in to  Acumatica ERP through the REST application programming interface (API).          public class RestService: IDisposable
{
    private readonly HttpClient _httpClient;

    private readonly string _acumaticaBaseUrl;

    public RestService(
      string acumaticaBaseUrl, string userName, string password, 
      string company, string branch, string locale)
    {
        _acumaticaBaseUrl = acumaticaBaseUrl;
        _httpClient = new HttpClient(
            new HttpClientHandler
            {
                UseCookies = true,
                CookieContainer = new CookieContainer()
            })
        {
            BaseAddress = new Uri(acumaticaBaseUrl + 
              "/entity/Default/6.00.001/"),
            DefaultRequestHeaders =
            {
                Accept = {MediaTypeWithQualityHeaderValue.Parse("text/json")}
            }
        };

        //Log in to  Acumatica ERP
        _httpClient.PostAsJsonAsync(
          acumaticaBaseUrl + "/entity/auth/login", new
            {
                name = userName,
                password = password,
                company = company,
                branch = branch,
                locale = locale
            }).Result
            .EnsureSuccessStatusCode();
    }

    void IDisposable.Dispose()
    {
        _httpClient.PostAsync(_acumaticaBaseUrl + "/entity/auth/logout", 
          new ByteArrayContent(new byte[0])).Wait();
        _httpClient.Dispose();
    }
} The following code signs in to  Acumatica ERP when an instance of the  RestService  class, which is defined in the code         fragment above, is         created. RestService rs = new RestService(
            Properties.Settings.Default.AcumaticaBaseUrl,
            Properties.Settings.Default.UserName,
            Properties.Settings.Default.Password,
            Properties.Settings.Default.Company,
            Properties.Settings.Default.Branch,
            Properties.Settings.Default.Locale
        ); Usage Notes For each attempt to sign in to  Acumatica ERP as described in this topic, you must implement the signing out from the service after you         finish your work with  Acumatica ERP to close the session. For details about the signing out, see  Signing out from the Service. You should also take into account  Acumatica ERP license API limits. For details, see  License Restrictions for API Users. ]]></column>
		</row>
		<row PageID="f6701ec1-2296-4155-8242-03d29006bf6e" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="83a343f6-b914-bc38-2b27-348d585ef683" RecordSourceID="22377">
			<column name="Content"><![CDATA[
Each time your application finishes work with the Acumatica ERP contract-based REST service, you have to sign out from Acumatica ERP. To sign out from Acumatica ERP, you access the needed URL address with the {{POST}} HTTP method and pass the credentials in the request body. See the following sections for details on the URL, parameters, HTTP method, and response format.{br}{TOC}
==URL==
When you need to sign out from Acumatica ERP, you use the following URL.{{{{http://&lt;Acumatica ERP URL&gt;/entity/auth/logout
}}}}
You replace {{<Acumatica ERP URL>}} with the URL of your Acumatica ERP instance.{br}

For example, suppose that you want to sign out from a local Acumatica ERP instance with the name ''AcumaticaDB''. You should use the following URL: {{http://localhost/AcumaticaDB/entity/auth/logout}}.
==Parameters==
You use no parameters when you sign out from Acumatica ERP.
==HTTP Method==
You use the {{POST}} HTTP method to sign out from Acumatica ERP.
==Response==
The response of a successful method call is ''204 No Content''.
==Example==
The following code shows an example of a class that implements signing out from Acumatica ERP through the REST application programming interface (API). The signing out is performed each time an instance of the {{RestService}} class is released.<source lang="csharp">public class RestService: IDisposable
{
    private readonly HttpClient _httpClient;

    private readonly string _acumaticaBaseUrl;

    public RestService(
      string acumaticaBaseUrl, string userName, string password, 
      string company, string branch)
    {
        _acumaticaBaseUrl = acumaticaBaseUrl;
        _httpClient = new HttpClient(
            new HttpClientHandler
            {
                UseCookies = true,
                CookieContainer = new CookieContainer()
            })
        {
            BaseAddress = new Uri(acumaticaBaseUrl + 
              "/entity/Default/6.00.001/"),
            DefaultRequestHeaders =
            {
                Accept = {MediaTypeWithQualityHeaderValue.Parse("text/json")}
            }
        };

        _httpClient.PostAsJsonAsync(
          acumaticaBaseUrl + "/entity/auth/login", new
            {
                name = userName,
                password = password,
                company = company,
                branch = branch
            }).Result
            .EnsureSuccessStatusCode();
    }

    //Log out from Acumatica ERP
    void IDisposable.Dispose()
    {
        _httpClient.PostAsync(_acumaticaBaseUrl + "/entity/auth/logout", 
          new ByteArrayContent(new byte[0])).Wait();
        _httpClient.Dispose();
    }
}</source>]]></column>
			<column name="PlainText"><![CDATA[Signing out from the Service Each time your application finishes work with the  Acumatica ERP contract-based REST service, you have to sign out from  Acumatica ERP. To sign out from  Acumatica ERP, you access the needed URL address with the  POST  HTTP method and pass         the credentials in the request body. See the following sections for details on the URL,         parameters, HTTP method, and response format. URL When you need to sign out from  Acumatica ERP, you use the following URL. http://< Acumatica ERP URL>/entity/auth/logout You replace  < Acumatica ERP URL>  with the URL of your  Acumatica ERP instance. For example, suppose that you want to sign out from a local  Acumatica ERP instance with the name  AcumaticaDB . You should use the following URL:            http://localhost/AcumaticaDB/entity/auth/logout . Parameters You use no parameters when you sign out from  Acumatica ERP. HTTP Method You use the  POST  HTTP method to sign out from  Acumatica ERP. Response The response of a successful method call is  204 No Content . Example The following code shows an example of a class that implements signing out from  Acumatica ERP through the REST application programming interface (API). The signing out is performed         each time an instance of the  RestService  class is         released. public class RestService: IDisposable
{
    private readonly HttpClient _httpClient;

    private readonly string _acumaticaBaseUrl;

    public RestService(
      string acumaticaBaseUrl, string userName, string password, 
      string company, string branch)
    {
        _acumaticaBaseUrl = acumaticaBaseUrl;
        _httpClient = new HttpClient(
            new HttpClientHandler
            {
                UseCookies = true,
                CookieContainer = new CookieContainer()
            })
        {
            BaseAddress = new Uri(acumaticaBaseUrl + 
              "/entity/Default/6.00.001/"),
            DefaultRequestHeaders =
            {
                Accept = {MediaTypeWithQualityHeaderValue.Parse("text/json")}
            }
        };

        _httpClient.PostAsJsonAsync(
          acumaticaBaseUrl + "/entity/auth/login", new
            {
                name = userName,
                password = password,
                company = company,
                branch = branch
            }).Result
            .EnsureSuccessStatusCode();
    }

    //Log out from  Acumatica ERP
    void IDisposable.Dispose()
    {
        _httpClient.PostAsync(_acumaticaBaseUrl + "/entity/auth/logout", 
          new ByteArrayContent(new byte[0])).Wait();
        _httpClient.Dispose();
    }
} ]]></column>
		</row>
		<row PageID="9d966d50-a0a1-4456-a9ff-1cc2159d48d4" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="a880fcbd-c4fc-d097-1192-65b5286da30c" RecordSourceID="22377">
			<column name="Content"><![CDATA[
When you need to create a record by using the contract-based REST API, you access the needed URL address with the {{PUT}} HTTP method and pass the record representation in JSON format in the request body. See the following sections for details on the URL, parameters, HTTP method, and response format.{br}{TOC}
==URL ==
If you need to create a record in Acumatica ERP, you use the following URL.{{{{http://&lt;Base endpoint URL&gt;/&lt;Top-level entity&gt;
}}}}
The URL has the following components:[anchor|#_b9b24438-8689-4fe6-b0e2-134f5c59bfe3]
*{{<Base endpoint URL>}} is the URL of the contract-based endpoint through which you are going to work with Acumatica ERP, which has the following format: {{http://<Acumatica ERP instance URL>/entity/<Endpoint name>/<Endpoint version>/}}. 
*{{<Top-level entity>}} is the name of the entity for which you are going to create a record.
{br}

For example, suppose that you want to create a stock item record in a local Acumatica ERP instance with the name ''AcumaticaDB'' by using the system endpoint with the name ''Default'' and Version 6.00.001. You should use the following URL to create a record: {{http://localhost/AcumaticaDB/entity/Default/6.00.001/StockItem}}.
==Parameters==
You can use the following parameters when you retrieve a record from Acumatica ERP:[anchor|#_4d4e3624-889e-4f74-8657-437982295990]
*''$expand'': To specify the linked and detail entities to be expanded
*''$select'': To specify the fields of the entity to be returned
*''$custom'': To specify the fields that are not defined in the contract to be returned
{br}

For detailed descriptions of the parameters, see [HelpRoot_Dev_Integration\IS__con_REST_Parameters|Parameters for Retrieving Records].
==HTTP Method==
You use the {{PUT}} HTTP method and pass a record in JSON format in the request body. You can find details on how to represent a record in JSON format in [HelpRoot_Dev_Integration\IS__con_REST_Entity_Representation_in_JSON|Representation of a Record in JSON Format]. See below for an example of a customer record representation in JSON format.{{{{{
  "CustomerID" : {value : "JOHNGOOD" } ,
  "CustomerName" : {value : "John Good" },
  "MainContact" : 
    {
      "Email" : {value : "demo@gmail.com" },
      "Address" : 
        {
          "AddressLine1" : {value : "4030 Lake Washington Blvd NE" },
          "AddressLine2" : {value : "Suite 100" },
          "City" : {value : "Kirkland" },
          "State" : {value : "WA" },
          "PostalCode" : {value : "98033" }
        }      
    }  
}
}}}}
==Response==
The response of a successful method call contains the created record in JSON format in the response body. The response includes only the values of the fields of the created record that were specified during creation of the record or that were specified to be returned by using the parameters of the request.
==Example==
The following code shows an example of a class that implements the creation of a record in Acumatica ERP through the REST API. <source lang="csharp">public class RestService: IDisposable
{
    private readonly HttpClient _httpClient;

    private readonly string _acumaticaBaseUrl;

    public RestService(
      string acumaticaBaseUrl, string userName, string password, 
      string company, string branch)
    {
        _acumaticaBaseUrl = acumaticaBaseUrl;
        _httpClient = new HttpClient(
            new HttpClientHandler
            {
                UseCookies = true,
                CookieContainer = new CookieContainer()
            })
        {
            BaseAddress = new Uri(acumaticaBaseUrl + 
              "/entity/Default/6.00.001/"),
            DefaultRequestHeaders =
            {
                Accept = {MediaTypeWithQualityHeaderValue.Parse("text/json")}
            }
        };
        _httpClient.PostAsJsonAsync(
          acumaticaBaseUrl + "/entity/auth/login", new
            {
                name = userName,
                password = password,
                company = company,
                branch = branch
            }).Result
            .EnsureSuccessStatusCode();
    }

    void IDisposable.Dispose()
    {
        _httpClient.PostAsync(_acumaticaBaseUrl + "/entity/auth/logout", 
          new ByteArrayContent(new byte[0])).Wait();
        _httpClient.Dispose();
    }

    //Data submission
    public string Put(string entityName, string parameters, string entity)
    {
        var res = _httpClient
            .PutAsync(_acumaticaBaseUrl + "/entity/Default/6.00.001/" + 
                entityName + "?" + parameters, 
                new StringContent(entity, Encoding.UTF8, "application/json"))
            .Result
            .EnsureSuccessStatusCode();

        return res.Content.ReadAsStringAsync().Result;
    }
}</source>{br}

The following code uses the {{RestService.Put()}} method, which is defined in the previous code fragment, to create a customer record.<source lang="csharp">public static void CreateCustomer()
{
    //Path to a source text file that contains 
    //the new customer record in JSON format
    string entitySource = @"..\..\Input\Customer.txt";

    //Initialize the REST service
    RestService rs = new RestService(
            Properties.Settings.Default.AcumaticaBaseUrl,
            Properties.Settings.Default.UserName,
            Properties.Settings.Default.Password,
            Properties.Settings.Default.Company,
            Properties.Settings.Default.Branch
        );

    using (StreamReader sr = new StreamReader(entitySource))
    {
        //Read the customer record in JSON format from the file
        string entityAsString = sr.ReadToEnd().ToString();

        //Create a customer record
        string customer = rs.Put("Customer", null, entityAsString);
    }
}</source>]]></column>
			<column name="PlainText"><![CDATA[Creation of a Record When you need to create a record by using the contract-based REST API, you access the                 needed URL address with the  PUT  HTTP method and pass the record                 representation in JSON format in the request body. See the following sections for                 details on the URL, parameters, HTTP method, and response format. URL  If you need to create a record in  Acumatica ERP, you use the following URL. http://<Base endpoint URL>/<Top-level entity> The URL has the following components: <Base endpoint URL>  is the URL of the contract-based                         endpoint through which you are going to work with  Acumatica ERP, which has the following format:  http://< Acumatica ERP instance URL>/entity/<Endpoint name>/<Endpoint                             version>/ .  <Top-level entity>  is the name of the entity for which                         you are going to create a record. For example, suppose that you want to create a stock item record in a local  Acumatica ERP instance with the name  AcumaticaDB  by using the system endpoint with the                 name  Default  and Version 6.00.001. You should use the following URL to create                 a record:                      http://localhost/AcumaticaDB/entity/Default/6.00.001/StockItem . Parameters You can use the following parameters when you retrieve a record from  Acumatica ERP: $expand : To specify the linked and detail entities to be                         expanded $select : To specify the fields of the entity to be returned $custom : To specify the fields that are not defined in the                         contract to be returned For detailed descriptions of the parameters, see  Parameters for Retrieving Records. HTTP Method You use the  PUT  HTTP method and pass a record in JSON format in the request                 body. You can find details on how to represent a record in JSON format in  Representation of a Record in JSON Format. See below for an example of a customer record representation in JSON                 format. {
  "CustomerID" : {value : "JOHNGOOD" } ,
  "CustomerName" : {value : "John Good" },
  "MainContact" : 
    {
      "Email" : {value : "demo@gmail.com" },
      "Address" : 
        {
          "AddressLine1" : {value : "4030 Lake Washington Blvd NE" },
          "AddressLine2" : {value : "Suite 100" },
          "City" : {value : "Kirkland" },
          "State" : {value : "WA" },
          "PostalCode" : {value : "98033" }
        }      
    }  
} Response The response of a successful method call contains the created record in JSON format in the                 response body. The response includes only the values of the fields of the created                 record that were specified during creation of the record or that were specified to                 be returned by using the parameters of the request. Example The following code shows an example of a class that implements the creation of a record in                      Acumatica ERP through the REST API.                  public class RestService: IDisposable
{
    private readonly HttpClient _httpClient;

    private readonly string _acumaticaBaseUrl;

    public RestService(
      string acumaticaBaseUrl, string userName, string password, 
      string company, string branch)
    {
        _acumaticaBaseUrl = acumaticaBaseUrl;
        _httpClient = new HttpClient(
            new HttpClientHandler
            {
                UseCookies = true,
                CookieContainer = new CookieContainer()
            })
        {
            BaseAddress = new Uri(acumaticaBaseUrl + 
              "/entity/Default/6.00.001/"),
            DefaultRequestHeaders =
            {
                Accept = {MediaTypeWithQualityHeaderValue.Parse("text/json")}
            }
        };
        _httpClient.PostAsJsonAsync(
          acumaticaBaseUrl + "/entity/auth/login", new
            {
                name = userName,
                password = password,
                company = company,
                branch = branch
            }).Result
            .EnsureSuccessStatusCode();
    }

    void IDisposable.Dispose()
    {
        _httpClient.PostAsync(_acumaticaBaseUrl + "/entity/auth/logout", 
          new ByteArrayContent(new byte[0])).Wait();
        _httpClient.Dispose();
    }

    //Data submission
    public string Put(string entityName, string parameters, string entity)
    {
        var res = _httpClient
            .PutAsync(_acumaticaBaseUrl + "/entity/Default/6.00.001/" + 
                entityName + "?" + parameters, 
                new StringContent(entity, Encoding.UTF8, "application/json"))
            .Result
            .EnsureSuccessStatusCode();

        return res.Content.ReadAsStringAsync().Result;
    }
} The following code uses the  RestService.Put()  method, which is defined in                 the previous code fragment, to create a customer                 record. public static void CreateCustomer()
{
    //Path to a source text file that contains 
    //the new customer record in JSON format
    string entitySource = @"..\..\Input\Customer.txt";

    //Initialize the REST service
    RestService rs = new RestService(
            Properties.Settings.Default.AcumaticaBaseUrl,
            Properties.Settings.Default.UserName,
            Properties.Settings.Default.Password,
            Properties.Settings.Default.Company,
            Properties.Settings.Default.Branch
        );

    using (StreamReader sr = new StreamReader(entitySource))
    {
        //Read the customer record in JSON format from the file
        string entityAsString = sr.ReadToEnd().ToString();

        //Create a customer record
        string customer = rs.Put("Customer", null, entityAsString);
    }
} ]]></column>
		</row>
		<row PageID="af48c02a-afbc-4fdb-b1e5-635ac7ebbaf1" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="12760b53-f0ea-ee71-02fd-1b127cee439e" RecordSourceID="22377">
			<column name="Content"><![CDATA[
When you need to update an existing record by using the contract-based REST API, you access the needed URL with the {{PUT}} HTTP method and pass the record representation in JSON format in the request body. See the following sections for details on the URL, parameters, HTTP method, and response format.{br}{TOC}
==URL==
If you need to update a record in Acumatica ERP, you use the following URL.{{{{http://&lt;Base endpoint URL&gt;/&lt;Top-level entity&gt;
}}}}{br}

The URL has the following components:[anchor|#_5863ce77-8be1-44d6-9342-fb7c2c1b6025]
*{{<Base endpoint URL>}} is the URL of the contract-based endpoint through which you are going to work with Acumatica ERP, which has the following format: {{http://<Acumatica ERP instance URL>/entity/<Endpoint name>/<Endpoint version>/}}. 
*{{<Top-level entity>}} is the name of the entity for which you are going to update a record.
{br}

For example, suppose that you want to update a stock item record in a local Acumatica ERP instance with the name ''AcumaticaDB'' by using the system endpoint with the name ''Default'' and Version 6.00.001. You would use the following URL to update a record: {{http://localhost/AcumaticaDB/entity/Default/6.00.001/StockItem}}.[anchor|#_0aabf54c-3ee5-4703-9d80-711dbdd90909]
==Parameters==
You can use the following parameters when you are updating a record in Acumatica ERP:[anchor|#_33d0cea7-56e5-4c7e-a498-0b739b0429ed]
*''$filter'': To specify filtering conditions that identify the record to be updated
*''$expand'': To specify the linked and detail entities to be expanded
*''$select'': To specify the fields of the entity to be returned
*''$custom'': To specify the fields that are not defined in the contract to be returned
{br}

For detailed descriptions of the parameters, see [HelpRoot_Dev_Integration\IS__con_REST_Parameters|Parameters for Retrieving Records].
==HTTP Method==
You use the {{PUT}} HTTP method and pass a record in JSON format in the request body. You can find details on how to represent a record in JSON format in [HelpRoot_Dev_Integration\IS__con_REST_Entity_Representation_in_JSON|Representation of a Record in JSON Format]. {br}

To make it possible for the record to be found by Acumatica ERP, you can use any of the following approaches:[anchor|#_8887242b-00d3-4bcf-a30d-f13dd7de374d]
*Specify the values of the key fields in the record representation in JSON format.
*Specify the value of the <tt>ID</tt> property in the record representation in JSON format.
*Specify the filtering conditions that identify the record in the ''$filter'' parameter of the method. For details on the parameter, see the [[#_0aabf54c-3ee5-4703-9d80-711dbdd90909|Parameters] section in this topic.
{br}

If you want to delete a detail line during update, you should specify {{true}} as the value of the <tt>delete</tt> property of the corresponding detail entity: {{"delete" : true}}. To identify the detail line to be deleted, you can specify either the values of the key fields of the detail line or the value of the <tt>ID</tt> property.
==Response==
The response of a successful method call contains the updated record in JSON format in the response body. The response includes only the values of the fields of the updated record that were specified during the update or that were specified to be returned by using the parameters of the request.
==Example==
The following code shows an example of a class that implements the update of a record in Acumatica ERP through the REST API. <source lang="csharp">public class RestService: IDisposable
{
    private readonly HttpClient _httpClient;

    private readonly string _acumaticaBaseUrl;

    public RestService(
      string acumaticaBaseUrl, string userName, string password, 
      string company, string branch)
    {
        _acumaticaBaseUrl = acumaticaBaseUrl;
        _httpClient = new HttpClient(
            new HttpClientHandler
            {
                UseCookies = true,
                CookieContainer = new CookieContainer()
            })
        {
            BaseAddress = new Uri(acumaticaBaseUrl + 
              "/entity/Default/6.00.001/"),
            DefaultRequestHeaders =
            {
                Accept = {MediaTypeWithQualityHeaderValue.Parse("text/json")}
            }
        };
        _httpClient.PostAsJsonAsync(
          acumaticaBaseUrl + "/entity/auth/login", new
            {
                name = userName,
                password = password,
                company = company,
                branch = branch
            }).Result
            .EnsureSuccessStatusCode();
    }

    void IDisposable.Dispose()
    {
        _httpClient.PostAsync(_acumaticaBaseUrl + "/entity/auth/logout", 
          new ByteArrayContent(new byte[0])).Wait();
        _httpClient.Dispose();
    }

    //Data submission
    public string Put(string entityName, string parameters, string entity)
    {
        var res = _httpClient
            .PutAsync(_acumaticaBaseUrl + "/entity/Default/6.00.001/" + 
                entityName + "?" + parameters, 
                new StringContent(entity, Encoding.UTF8, "application/json"))
            .Result
            .EnsureSuccessStatusCode();

        return res.Content.ReadAsStringAsync().Result;
    }
}</source>{br}

The following code uses the {{RestService.PutWithFilter()}} method, which is defined in the previous code fragment, to update an existing customer record that has the ''demo@gmail.com'' email address.<source lang="csharp">public static void UpdateCustomer()
{
    //Path to a source text file that contains an updated customer record in JSON format
    string entitySource = @"..\..\Input\Customer_Upd.txt";

    //REST service initialization
    RestService rs = new RestService(
            Properties.Settings.Default.AcumaticaBaseUrl,
            Properties.Settings.Default.UserName,
            Properties.Settings.Default.Password,
            Properties.Settings.Default.Company,
            Properties.Settings.Default.Branch
        );

    using (StreamReader sr = new StreamReader(entitySource))
    {
        //Read customer record in JSON format from file
        string entityAsString = sr.ReadToEnd().ToString();

        //Specify filtering parameters that identify the customer
        string parameter = "$filter=MainContact/Email eq 'demo@gmail.com'";

        //Update the customer record
        string customer = rs.Put("Customer", parameter, entityAsString);
    }
}</source>]]></column>
			<column name="PlainText"><![CDATA[Update of a Record When you need to update an existing record by using the contract-based REST API, you                 access the needed URL with the  PUT  HTTP method and pass the record                 representation in JSON format in the request body. See the following sections for                 details on the URL, parameters, HTTP method, and response format. URL If you need to update a record in  Acumatica ERP, you use the following                 URL. http://<Base endpoint URL>/<Top-level entity> The URL has the following components: <Base endpoint URL>  is the URL of the contract-based                         endpoint through which you are going to work with  Acumatica ERP, which has the following format:  http://< Acumatica ERP instance URL>/entity/<Endpoint name>/<Endpoint                             version>/ .  <Top-level entity>  is the name of the entity for which                         you are going to update a record. For example, suppose that you want to update a stock item record in a local  Acumatica ERP instance with the name  AcumaticaDB  by using the system endpoint with the                 name  Default  and Version 6.00.001. You would use the following URL to update                 a record:                      http://localhost/AcumaticaDB/entity/Default/6.00.001/StockItem . Parameters You can use the following parameters when you are updating a record in  Acumatica ERP: $filter : To specify filtering conditions that identify the record to be             updated $expand : To specify the linked and detail entities to be expanded $select : To specify the fields of the entity to be returned $custom : To specify the fields that are not defined in the contract to be             returned For detailed descriptions of the parameters, see  Parameters for Retrieving Records. HTTP Method You use the  PUT  HTTP method and pass a record in JSON format in the request     body. You can find details on how to represent a record in JSON format in  Representation of a Record in JSON Format.  To make it possible for the record to be found by  Acumatica ERP,     you can use any of the following approaches: Specify the values of the key fields in the record representation in JSON format. Specify the value of the  ID  property in the record representation in             JSON format. Specify the filtering conditions that identify the record in the  $filter                          parameter of the method. For details on the parameter, see the  Parameters Parameters section in this topic. If you want to delete a detail line during update, you should specify  true  as     the value of the  delete  property of the corresponding detail entity:       "delete" : true . To identify the detail line to be deleted, you can specify     either the values of the key fields of the detail line or the value of the  ID      property. Response The response of a successful method call contains the updated record in JSON format in the                 response body. The response includes only the values of the fields of the updated                 record that were specified during the update or that were specified to be returned                 by using the parameters of the request. Example The following code shows an example of a class that implements the update of a record in  Acumatica ERP through the REST API.          public class RestService: IDisposable
{
    private readonly HttpClient _httpClient;

    private readonly string _acumaticaBaseUrl;

    public RestService(
      string acumaticaBaseUrl, string userName, string password, 
      string company, string branch)
    {
        _acumaticaBaseUrl = acumaticaBaseUrl;
        _httpClient = new HttpClient(
            new HttpClientHandler
            {
                UseCookies = true,
                CookieContainer = new CookieContainer()
            })
        {
            BaseAddress = new Uri(acumaticaBaseUrl + 
              "/entity/Default/6.00.001/"),
            DefaultRequestHeaders =
            {
                Accept = {MediaTypeWithQualityHeaderValue.Parse("text/json")}
            }
        };
        _httpClient.PostAsJsonAsync(
          acumaticaBaseUrl + "/entity/auth/login", new
            {
                name = userName,
                password = password,
                company = company,
                branch = branch
            }).Result
            .EnsureSuccessStatusCode();
    }

    void IDisposable.Dispose()
    {
        _httpClient.PostAsync(_acumaticaBaseUrl + "/entity/auth/logout", 
          new ByteArrayContent(new byte[0])).Wait();
        _httpClient.Dispose();
    }

    //Data submission
    public string Put(string entityName, string parameters, string entity)
    {
        var res = _httpClient
            .PutAsync(_acumaticaBaseUrl + "/entity/Default/6.00.001/" + 
                entityName + "?" + parameters, 
                new StringContent(entity, Encoding.UTF8, "application/json"))
            .Result
            .EnsureSuccessStatusCode();

        return res.Content.ReadAsStringAsync().Result;
    }
} The following code uses the  RestService.PutWithFilter()  method, which is         defined in the previous code fragment, to update an existing customer record that has the            demo@gmail.com  email         address. public static void UpdateCustomer()
{
    //Path to a source text file that contains an updated customer record in JSON format
    string entitySource = @"..\..\Input\Customer_Upd.txt";

    //REST service initialization
    RestService rs = new RestService(
            Properties.Settings.Default.AcumaticaBaseUrl,
            Properties.Settings.Default.UserName,
            Properties.Settings.Default.Password,
            Properties.Settings.Default.Company,
            Properties.Settings.Default.Branch
        );

    using (StreamReader sr = new StreamReader(entitySource))
    {
        //Read customer record in JSON format from file
        string entityAsString = sr.ReadToEnd().ToString();

        //Specify filtering parameters that identify the customer
        string parameter = "$filter=MainContact/Email eq 'demo@gmail.com'";

        //Update the customer record
        string customer = rs.Put("Customer", parameter, entityAsString);
    }
} ]]></column>
		</row>
		<row PageID="52c97a83-1fa1-40e9-8219-52a89a91f2da" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="3cafaf7a-a930-46e8-4178-57c15cc8ef6d" RecordSourceID="22377">
			<column name="Content"><![CDATA[
To retrieve a record by the values of its key fields from Acumatica ERP by using the contract-based REST API, you access the needed URL with the {{GET}} HTTP method and specify the fields that should be returned in the parameters of the method. See the following sections for details on the URL, parameters, HTTP method, and response format.{br}{TOC}
==URL ==
If you need to obtain a particular record with the known key fields, you use the following URL{{{{http://&lt;Base endpoint URL&gt;/&lt;Top-level entity&gt;/&lt;Key value 1&gt;/&lt;Key value 2&gt;
}}}}{br}

The URL has the following components:[anchor|#_d8758594-84f7-4fc8-853e-2ea4f7661992]
*{{<Base endpoint URL>}} is the URL of the contract-based endpoint through which you are going to work with Acumatica ERP, which has the following format: {{http://<Acumatica ERP instance URL>/entity/<Endpoint name>/<Endpoint version>/}}. 
*{{<Top-level entity>}} is the name of the entity for which you are going to retrieve a record. 
*{{<Key value 1>}} and {{<Key value 2>}} are the values of the key fields of the record to be retrieved. You use the number and order of key fields as they are defined on the corresponding Acumatica ERP form.
*:((({S:Hint}You can pass the key fields separated by vertical bar (''|'') instead of slash(''/'').
)))
{br}

For example, suppose that you want to retrieve the sales order with order type ''SO'' and order number ''000123'' from a local Acumatica ERP instance with the name ''AcumaticaDB'' by using the system endpoint with the name ''Default'' and Version 6.00.001. You should use the following URL to retrieve the sales order: {{http://localhost/AcumaticaDB/entity/Default/6.00.001/SalesOrder/SO/000123}}.
==Parameters==
You can use the following parameters when you retrieve a record from Acumatica ERP:[anchor|#_33d0cea7-56e5-4c7e-a498-0b739b0429ed]
*''$expand'': To specify the linked and detail entities to be expanded
*''$custom'': To specify the fields that are not defined in the contract to be returned
*''$select'': To specify the fields of the entity to be returned
{br}

For detailed descriptions of the parameters, see [HelpRoot_Dev_Integration\IS__con_REST_Parameters|Parameters for Retrieving Records].
==HTTP Method==
You use the {{GET}} HTTP method to retrieve records. 
==Response==
The response of a successful method call contains the retrieved record in JSON format in the response body. For details on record representation in JSON format, see [HelpRoot_Dev_Integration\IS__con_REST_Entity_Representation_in_JSON|Representation of a Record in JSON Format]. 
==Example==
The following code shows an example of a class that implements the retrieval of a record in Acumatica ERP through the REST API.{{{{public class RestService: IDisposable
{
    private readonly HttpClient _httpClient;

    private readonly string _acumaticaBaseUrl;

    public RestService(
      string acumaticaBaseUrl, string userName, string password, 
      string company, string branch)
    {
        _acumaticaBaseUrl = acumaticaBaseUrl;
        _httpClient = new HttpClient(
            new HttpClientHandler
            {
                UseCookies = true,
                CookieContainer = new CookieContainer()
            })
        {
            BaseAddress = new Uri(acumaticaBaseUrl + 
              "/entity/Default/6.00.001/"),
            DefaultRequestHeaders =
            {
                Accept = {MediaTypeWithQualityHeaderValue.Parse("text/json")}
            }
        };
        _httpClient.PostAsJsonAsync(
          acumaticaBaseUrl + "/entity/auth/login", new
            {
                name = userName,
                password = password,
                company = company,
                branch = branch
            }).Result
            .EnsureSuccessStatusCode();
    }

    void IDisposable.Dispose()
    {
        _httpClient.PostAsync(_acumaticaBaseUrl + "/entity/auth/logout", 
          new ByteArrayContent(new byte[0])).Wait();
        _httpClient.Dispose();
    }

    //Retrieval of a record by key fields
    public string GetByKeys(string entityName, string keys, string parameters)
    {
        var res = _httpClient.GetAsync(
          _acumaticaBaseUrl + "/entity/Default/6.00.001/" + 
          entityName + "/" + keys + "?" + parameters)
            .Result
            .EnsureSuccessStatusCode();

        return res.Content.ReadAsStringAsync().Result;
    }
}
}}}}{br}

The following code uses the {{RestService.GetByKeys()}} method, which is defined in the previous code fragment, to retrieve a sales order with detail lines from Acumatica ERP.{{{{public static void ExportSODetails()
{
    //Sales order data
    string orderType = "SO";
    string orderNbr = "000001";

    //Initialize the REST service
    RestService rs = new RestService(
            Properties.Settings.Default.AcumaticaBaseUrl,
            Properties.Settings.Default.UserName,
            Properties.Settings.Default.Password,
            Properties.Settings.Default.Company,
            Properties.Settings.Default.Branch
        );

    //Specify the parameter to obtain the details of a sales order
    string parameters = "$expand=Details";

    //Retrieve a sales order by keys
    string stockItems = rs.GetByKeys("SalesOrder" , orderType + "/" + orderNbr, parameters);
}
}}}}]]></column>
			<column name="PlainText"><![CDATA[Retrieval of a Record by Key Fields To retrieve a record by the values of its key fields from  Acumatica ERP by using the contract-based REST API, you access the needed URL with the                      GET  HTTP method and specify the fields that should be returned                 in the parameters of the method. See the following sections for details on the URL,                 parameters, HTTP method, and response format. URL  If you need to obtain a particular record with the known key fields, you use the                 following                 URL http://<Base endpoint URL>/<Top-level entity>/<Key value 1>/<Key value 2> The URL has the following components: <Base endpoint URL>  is the URL of the contract-based                         endpoint through which you are going to work with  Acumatica ERP, which has the following format:  http://< Acumatica ERP instance URL>/entity/<Endpoint name>/<Endpoint                             version>/ .  <Top-level entity>  is the name of the entity for which                         you are going to retrieve a record.  <Key value 1>  and  <Key value 2>  are                         the values of the key fields of the record to be retrieved. You use the                         number and order of key fields as they are defined on the corresponding  Acumatica ERP form. You can pass the key fields separated by vertical             bar ( | ) instead of slash( / ). For example, suppose that you want to retrieve the sales order with order type                      SO  and order number  000123  from a local  Acumatica ERP instance with the name  AcumaticaDB  by using the system endpoint with the                 name  Default  and Version 6.00.001. You should use the following URL to                 retrieve the sales order:                      http://localhost/AcumaticaDB/entity/Default/6.00.001/SalesOrder/SO/000123 . Parameters You can use the following parameters when you retrieve a record from  Acumatica ERP: $expand : To specify the linked and detail entities to be expanded $custom : To specify the fields that are not defined in the contract to be                         returned $select : To specify the fields of the entity to be returned For detailed descriptions of the parameters, see  Parameters for Retrieving Records. HTTP Method You use the  GET  HTTP method to retrieve records.  Response The response of a successful method call contains the retrieved record in JSON format in the     response body. For details on record representation in JSON format, see  Representation of a Record in JSON Format.  Example The following code shows an example of a class that implements the retrieval of a record in                      Acumatica ERP through the REST                 API. public class RestService: IDisposable
{
    private readonly HttpClient _httpClient;

    private readonly string _acumaticaBaseUrl;

    public RestService(
      string acumaticaBaseUrl, string userName, string password, 
      string company, string branch)
    {
        _acumaticaBaseUrl = acumaticaBaseUrl;
        _httpClient = new HttpClient(
            new HttpClientHandler
            {
                UseCookies = true,
                CookieContainer = new CookieContainer()
            })
        {
            BaseAddress = new Uri(acumaticaBaseUrl + 
              "/entity/Default/6.00.001/"),
            DefaultRequestHeaders =
            {
                Accept = {MediaTypeWithQualityHeaderValue.Parse("text/json")}
            }
        };
        _httpClient.PostAsJsonAsync(
          acumaticaBaseUrl + "/entity/auth/login", new
            {
                name = userName,
                password = password,
                company = company,
                branch = branch
            }).Result
            .EnsureSuccessStatusCode();
    }

    void IDisposable.Dispose()
    {
        _httpClient.PostAsync(_acumaticaBaseUrl + "/entity/auth/logout", 
          new ByteArrayContent(new byte[0])).Wait();
        _httpClient.Dispose();
    }

    //Retrieval of a record by key fields
    public string GetByKeys(string entityName, string keys, string parameters)
    {
        var res = _httpClient.GetAsync(
          _acumaticaBaseUrl + "/entity/Default/6.00.001/" + 
          entityName + "/" + keys + "?" + parameters)
            .Result
            .EnsureSuccessStatusCode();

        return res.Content.ReadAsStringAsync().Result;
    }
} The following code uses the  RestService.GetByKeys()  method, which is defined                 in the previous code fragment, to retrieve a sales order with detail lines from  Acumatica ERP. public static void ExportSODetails()
{
    //Sales order data
    string orderType = "SO";
    string orderNbr = "000001";

    //Initialize the REST service
    RestService rs = new RestService(
            Properties.Settings.Default.AcumaticaBaseUrl,
            Properties.Settings.Default.UserName,
            Properties.Settings.Default.Password,
            Properties.Settings.Default.Company,
            Properties.Settings.Default.Branch
        );

    //Specify the parameter to obtain the details of a sales order
    string parameters = "$expand=Details";

    //Retrieve a sales order by keys
    string stockItems = rs.GetByKeys("SalesOrder" , orderType + "/" + orderNbr, parameters);
} ]]></column>
		</row>
		<row PageID="bc9531b0-717b-4b2d-8899-ff7ca805ade1" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="da9f7e64-3223-4c17-822b-3670b61af7d7" RecordSourceID="22377">
			<column name="Content"><![CDATA[
To retrieve a record by the value of the session entity ID from Acumatica ERP by using the contract-based REST API, you access the needed URL with the {{GET}} HTTP method and specify the fields that should be returned in the parameters of the method. See the following sections for details on the URL, parameters, HTTP method, and response format.((({S:Hint}The session entity ID is a GUID that is assigned to each entity you work with during an Acumatica ERP session. You can obtain the value of the session entity ID from the <tt>ID</tt> property of an entity returned from Acumatica ERP. 
The session entity ID is different for each new session with Acumatica ERP. That is, after a new login to Acumatica ERP, you cannot use the session entity ID that you received in the previous session to work with the entity.
))){br}{TOC}
==URL ==
If you need to obtain a particular record with the session entity ID, you use the following URL.{{{{http://&lt;Base endpoint URL&gt;/&lt;Top-level entity&gt;/&lt;Session entity ID&gt;
}}}}{br}

The URL has the following components:[anchor|#_236c6748-b636-462a-9fe5-b7634d359de9]
*{{<Base endpoint URL>}} is the URL of a contract-based endpoint through which you are going to work with Acumatica ERP. This URL has the following format: {{http://<Acumatica ERP instance URL>/entity/<Endpoint name>/<Endpoint version>/}}. 
*{{<Top-level entity>}} is the name of the entity for which you are going to retrieve a record. 
*{{<Session entity ID>}} is the session ID of the record to be retrieved.
{br}

For example, suppose that you want to retrieve the sales order with session entity ID ''03efa858-2351-4bd5-ae06-3d9fb3b3c1e6'' from a local Acumatica ERP instance with the name ''AcumaticaDB'' by using the system endpoint with the name ''Default'' and Version 6.00.001. You should use the following URL to retrieve the sales order: {{http://localhost/AcumaticaDB/entity/Default/6.00.001/SalesOrder/03efa858-2351-4bd5-ae06-3d9fb3b3c1e6}}.
==Parameters==
You can use the following parameters when you retrieve a record from Acumatica ERP:[anchor|#_7ebc5c19-6b25-4b31-8bc3-1b71d4b5f502]
*''$expand'': To specify the linked and detail entities to be expanded
*''$select'': To specify the fields of the entity to be returned
*''$custom'': To specify the fields that are not defined in the contract to be returned
{br}

For detailed descriptions of the parameters, see [HelpRoot_Dev_Integration\IS__con_REST_Parameters|Parameters for Retrieving Records].
==HTTP Method==
You use the {{GET}} HTTP method to retrieve records. 
==Response==
The response of a successful method call contains the retrieved record in JSON format in the response body. For details on record representation in JSON format, see [HelpRoot_Dev_Integration\IS__con_REST_Entity_Representation_in_JSON|Representation of a Record in JSON Format]. ]]></column>
			<column name="PlainText"><![CDATA[Retrieval of a Record by ID To retrieve a record by the value of the session entity ID from  Acumatica ERP by using the contract-based REST API, you access the needed URL with the            GET  HTTP method and specify the fields that should be returned in the         parameters of the method. See the following sections for details on the URL, parameters,         HTTP method, and response format. The session entity ID is a GUID that is assigned to           each entity you work with during an  Acumatica ERP session. You can obtain the value of the session entity ID from the              ID  property of an entity returned from  Acumatica ERP.  The session entity ID is different for each new session with  Acumatica ERP. That is, after a new login to  Acumatica ERP, you cannot use the session entity ID that you received in the previous session to             work with the entity. URL  If you need to obtain a particular record with the session entity ID, you use the following         URL. http://<Base endpoint URL>/<Top-level entity>/<Session entity ID> The URL has the following components: <Base endpoint URL>  is the URL of a contract-based endpoint             through which you are going to work with  Acumatica ERP. This URL has the following format:  http://< Acumatica ERP instance URL>/entity/<Endpoint name>/<Endpoint version>/ .  <Top-level entity>  is the name of the entity for which you are             going to retrieve a record.  <Session entity ID>  is the session ID of the record to be             retrieved. For example, suppose that you want to retrieve the sales order with session entity ID            03efa858-2351-4bd5-ae06-3d9fb3b3c1e6  from a local  Acumatica ERP instance with the name  AcumaticaDB  by using the system endpoint with the name            Default  and Version 6.00.001. You should use the following URL to retrieve the         sales order:            http://localhost/AcumaticaDB/entity/Default/6.00.001/SalesOrder/03efa858-2351-4bd5-ae06-3d9fb3b3c1e6 . Parameters You can use the following parameters when you retrieve a record from  Acumatica ERP: $expand : To specify the linked and detail entities to be expanded $select : To specify the fields of the entity to be returned $custom : To specify the fields that are not defined in the contract to be             returned For detailed descriptions of the parameters, see  Parameters for Retrieving Records. HTTP Method You use the  GET  HTTP method to retrieve records.  Response The response of a successful method call contains the retrieved record in JSON format in the     response body. For details on record representation in JSON format, see  Representation of a Record in JSON Format.     ]]></column>
		</row>
		<row PageID="775ca16b-cba6-4c1d-89d5-c1df7833bfea" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="2a94fbe3-b7ec-2a3d-fd76-e201bf79e87c" RecordSourceID="22377">
			<column name="Content"><![CDATA[
To retrieve records that satisfy the specified conditions from Acumatica ERP by using the contract-based REST API, you access the needed URL address with the {{GET}} HTTP method and specify filtering conditions in the parameters of the method. See the following sections for details on the URL, parameters, HTTP method, and response format.{br}{TOC}
==URL ==
If you need to retrieve the list of records that satisfies the specified conditions, you use the following URL.{{{{http://&lt;Base endpoint URL&gt;/&lt;Top-level entity&gt;
}}}}
The URL has the following components:[anchor|#_0863a5f7-3a7e-4d08-9040-f6c9b20b123e]
*{{<Base endpoint URL>}} is the URL of the contract-based endpoint through which you are going to work with Acumatica ERP, which has the following format: {{http://<Acumatica ERP instance URL>/entity/<Endpoint name>/<Endpoint version>/}}. 
*{{<Top-level entity>}} is the name of the entity for which you are going to retrieve the list of records.
{br}

For example, suppose that you want to retrieve the list of stock item records from a local Acumatica ERP instance with the name ''AcumaticaDB'' by using the system endpoint with the name ''Default'' and Version 6.00.001. You should use the following URL to retrieve the list of records: {{http://localhost/AcumaticaDB/entity/Default/6.00.001/StockItem}}.
==Parameters==
You can use the following parameters when you retrieve records from Acumatica ERP:[anchor|#_8901218e-6cef-4fca-acd5-5db17d996154]
*''$filter'': To specify filtering conditions on the records to be returned
*''$skip'': To specify the number of records to be skipped from the list of returned records
*''$top'': To specify the number of records to be returned in the list
*''$expand'': To specify the linked and detail entities to be expanded
*''$select'': To specify the fields of the entity to be returned
*''$custom'': To specify the fields that are not defined in the contract to be returned
{br}

For detailed descriptions of the parameters, see [HelpRoot_Dev_Integration\IS__con_REST_Parameters|Parameters for Retrieving Records].
==HTTP Method==
You use the {{GET}} HTTP method to retrieve records. 
==Response==
The response of a successful method call contains the retrieved records in JSON format in the response body. For details on record representation in JSON format, see [HelpRoot_Dev_Integration\IS__con_REST_Entity_Representation_in_JSON|Representation of a Record in JSON Format]. 
==Example==
The following code shows an example of a class that implements the retrieval of records from Acumatica ERP through the REST API.{{{{public class RestService: IDisposable
{
    private readonly HttpClient _httpClient;

    private readonly string _acumaticaBaseUrl;

    public RestService(
      string acumaticaBaseUrl, string userName, string password, 
      string company, string branch)
    {
        _acumaticaBaseUrl = acumaticaBaseUrl;
        _httpClient = new HttpClient(
            new HttpClientHandler
            {
                UseCookies = true,
                CookieContainer = new CookieContainer()
            })
        {
            BaseAddress = new Uri(acumaticaBaseUrl + 
              "/entity/Default/6.00.001/"),
            DefaultRequestHeaders =
            {
                Accept = {MediaTypeWithQualityHeaderValue.Parse("text/json")}
            }
        };
        _httpClient.PostAsJsonAsync(
          acumaticaBaseUrl + "/entity/auth/login", new
            {
                name = userName,
                password = password,
                company = company,
                branch = branch
            }).Result
            .EnsureSuccessStatusCode();
    }

    void IDisposable.Dispose()
    {
        _httpClient.PostAsync(_acumaticaBaseUrl + "/entity/auth/logout", 
          new ByteArrayContent(new byte[0])).Wait();
        _httpClient.Dispose();
    }

    public string Get(string entityName, string parameters)
    {
        var res = _httpClient.GetAsync(
          _acumaticaBaseUrl + "/entity/Default/6.00.001/"
          + entityName + "?" + parameters).Result
            .EnsureSuccessStatusCode();

        return res.Content.ReadAsStringAsync().Result;
    }
}
}}}}{br}

The following code uses the {{RestService.Get()}} method, which is defined in the previous code fragment, to retrieve the list of stock item records that have the ''Active'' status in Acumatica ERP and have been modified within the past month. The code uses the ''$expand'' parameter to retrieve the vendor details of each record.{{{{public static void ExportStockItems()
{
    //Initialize the REST service
    RestService rs = new RestService(
            Properties.Settings.Default.AcumaticaBaseUrl,
            Properties.Settings.Default.UserName,
            Properties.Settings.Default.Password,
            Properties.Settings.Default.Company,
            Properties.Settings.Default.Branch
        );

    //Specify the parameter to filter records by status and last modified date
    string parameters1 = 
      "$filter=ItemStatus eq 'Active' and LastModified gt datetimeoffset'" + 
        WebUtility.UrlEncode(new DateTimeOffset(DateTime.Now.AddMonths(-1))
        .ToString("yyyy-MM-ddTHH:mm:ss.fffK")) + "'";

    //Specify the parameter to obtain vendor details
    string parameters2 = "$expand=VendorDetails";

    //Retrieve the list of stock items
    string stockItems = rs.Get("StockItem", parameters1 + "&" + parameters2);
}
}}}}
==Usage Notes for Endpoints with Contract Version 3==
When multiple records are retrieved from Acumatica ERP through an endpoint with Contract Version 3, the system tries to optimize the retrieval of the records and obtain all needed records in one request to the database (instead of requesting the records one by one). If the optimization fails, the system returns an error, which specifies the entities or fields that caused the failure of the optimized request. To prevent the error from occurring, you can do any of the following:[anchor|#_4800b251-5653-45ea-b27b-35b651605d7a]
*If you do not need to retrieve the entities or fields that caused the failure, you can exclude these entities or fields from the request as follows:
**Exclude the entities from the entities specified in the ''$expand'' parameter.
**Explicitly specify the other fields to be returned (while excluding the fields that caused the failure) by using the ''$select'' parameter.
*If you need to retrieve the entities or fields that caused the failure, you can retrieve the needed records one by one either [HelpRoot_Dev_Integration\IS__con_REST_Get_Record_by_Key|by key fields], or [HelpRoot_Dev_Integration\IS__con_REST_Get_Record_by_ID|by IDs].
{br}

Because of this optimization, you cannot retrieve from Acumatica ERP a list of records with multiple detail entities. If you need to retrieve multiple detail entities, you should perform multiple requests each of which requests one detail entity.]]></column>
			<column name="PlainText"><![CDATA[Retrieval of Records by Conditions To retrieve records that satisfy the specified conditions from  Acumatica ERP by using the contract-based REST API, you access the needed URL address with the            GET  HTTP method and specify filtering conditions in the parameters of the         method. See the following sections for details on the URL, parameters, HTTP method, and         response format. URL  If you need to retrieve the list of records that satisfies the specified conditions, you         use the following URL. http://<Base endpoint URL>/<Top-level entity> The URL has the following components: <Base endpoint URL>  is the URL of the contract-based endpoint             through which you are going to work with  Acumatica ERP, which has the following format:  http://< Acumatica ERP instance URL>/entity/<Endpoint name>/<Endpoint version>/ .  <Top-level entity>  is the name of the entity for which you are             going to retrieve the list of records. For example, suppose that you want to retrieve the list of stock item records from a local            Acumatica ERP instance with the name  AcumaticaDB  by using the system endpoint with the name            Default  and Version 6.00.001. You should use the following URL to retrieve the list         of records:          http://localhost/AcumaticaDB/entity/Default/6.00.001/StockItem . Parameters You can use the following parameters when you retrieve records from  Acumatica ERP: $filter : To specify filtering conditions on the records to be returned $skip : To specify the number of records to be skipped from the list of             returned records $top : To specify the number of records to be returned in the list $expand : To specify the linked and detail entities to be expanded $select : To specify the fields of the entity to be returned $custom : To specify the fields that are not defined in the contract to be             returned For detailed descriptions of the parameters, see  Parameters for Retrieving Records. HTTP Method You use the  GET  HTTP method to retrieve records.  Response The response of a successful method call contains the retrieved records in JSON format in         the response body. For details on record representation in JSON format, see  Representation of a Record in JSON Format.  Example The following code shows an example of a class that implements the retrieval of records         from  Acumatica ERP through the REST         API. public class RestService: IDisposable
{
    private readonly HttpClient _httpClient;

    private readonly string _acumaticaBaseUrl;

    public RestService(
      string acumaticaBaseUrl, string userName, string password, 
      string company, string branch)
    {
        _acumaticaBaseUrl = acumaticaBaseUrl;
        _httpClient = new HttpClient(
            new HttpClientHandler
            {
                UseCookies = true,
                CookieContainer = new CookieContainer()
            })
        {
            BaseAddress = new Uri(acumaticaBaseUrl + 
              "/entity/Default/6.00.001/"),
            DefaultRequestHeaders =
            {
                Accept = {MediaTypeWithQualityHeaderValue.Parse("text/json")}
            }
        };
        _httpClient.PostAsJsonAsync(
          acumaticaBaseUrl + "/entity/auth/login", new
            {
                name = userName,
                password = password,
                company = company,
                branch = branch
            }).Result
            .EnsureSuccessStatusCode();
    }

    void IDisposable.Dispose()
    {
        _httpClient.PostAsync(_acumaticaBaseUrl + "/entity/auth/logout", 
          new ByteArrayContent(new byte[0])).Wait();
        _httpClient.Dispose();
    }

    public string Get(string entityName, string parameters)
    {
        var res = _httpClient.GetAsync(
          _acumaticaBaseUrl + "/entity/Default/6.00.001/"
          + entityName + "?" + parameters).Result
            .EnsureSuccessStatusCode();

        return res.Content.ReadAsStringAsync().Result;
    }
} The following code uses the  RestService.Get()  method, which is defined in         the previous code fragment, to retrieve the list of stock item records that have the            Active  status in  Acumatica ERP and have been modified within the past month. The code uses the  $expand          parameter to retrieve the vendor details of each         record. public static void ExportStockItems()
{
    //Initialize the REST service
    RestService rs = new RestService(
            Properties.Settings.Default.AcumaticaBaseUrl,
            Properties.Settings.Default.UserName,
            Properties.Settings.Default.Password,
            Properties.Settings.Default.Company,
            Properties.Settings.Default.Branch
        );

    //Specify the parameter to filter records by status and last modified date
    string parameters1 = 
      "$filter=ItemStatus eq 'Active' and LastModified gt datetimeoffset'" + 
        WebUtility.UrlEncode(new DateTimeOffset(DateTime.Now.AddMonths(-1))
        .ToString("yyyy-MM-ddTHH:mm:ss.fffK")) + "'";

    //Specify the parameter to obtain vendor details
    string parameters2 = "$expand=VendorDetails";

    //Retrieve the list of stock items
    string stockItems = rs.Get("StockItem", parameters1 + "&" + parameters2);
} Usage Notes for Endpoints with Contract Version 3 When multiple records are retrieved from  Acumatica ERP through an endpoint with Contract Version 3, the system tries to optimize the retrieval         of the records and obtain all needed records in one request to the database (instead of         requesting the records one by one). If the optimization fails, the system returns an error,         which specifies the entities or fields that caused the failure of the optimized request. To         prevent the error from occurring, you can do any of the following: If you do not need to retrieve the entities or fields that caused the failure, you can             exclude these entities or fields from the request as follows: Exclude the entities from the entities specified in the  $expand                  parameter. Explicitly specify the other fields to be returned (while excluding the fields                 that caused the failure) by using the  $select  parameter. If you need to retrieve the entities or fields that caused the failure, you can             retrieve the needed records one by one either  by               key fields by key fields, or  by               IDs by IDs. Because of this optimization, you cannot retrieve from  Acumatica ERP a list of records with multiple detail entities. If you need to retrieve multiple detail         entities, you should perform multiple requests each of which requests one detail entity. ]]></column>
		</row>
		<row PageID="6340cff3-4732-4231-9e42-5d1e5e65b5dd" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="954ebfe0-4e42-09ba-6cbd-d1e4b43206f6" RecordSourceID="22377">
			<column name="Content"><![CDATA[
To retrieve data from an inquiry form of Acumatica ERP by using the contract-based REST API, you access the needed URL with the {{PUT}} HTTP method and pass the parameters of the inquiry in JSON format in the request body. See the following sections for details on and examples of the URL, parameter, HTTP method, and response format.{br}{TOC}
==URL==
If you need to retrieve data from an inquiry form, you use the following URL.{{{{http://&lt;Base endpoint URL&gt;/&lt;Top-level entity&gt;
}}}}
The URL includes the following components:[anchor|#_e6b8061a-1f60-43ba-a741-7c42065db348]
*{{<Base endpoint URL>}} is the URL of the contract-based endpoint through which you are going to work with Acumatica ERP, which has the following format: {{http://<Acumatica ERP instance URL>/entity/<Endpoint name>/<Endpoint version>/}}. 
*{{<Top-level entity>}} is the name of the entity that corresponds to the inquiry form from which you are going to retrieve data.
{br}

For example, suppose that you want to retrieve data from the [HelpRoot_FormReference\IN_40_10_00|Inventory Summary] ([~/?ScreenId=IN401000|IN401000]) form in a local Acumatica ERP instance with the name ''AcumaticaDB'' by using the system endpoint with the name ''Default'' and Version 6.00.001. You would use the following URL to retrieve data: {{http://localhost/AcumaticaDB/entity/Default/6.00.001/InventorySummaryInquiry}}.
==Parameter==
When you are retrieving data from an inquiry form, you should use the ''$expand'' parameter to expand the detail entity, which contains the results of the inquiry. For a detailed description of the parameter, see [HelpRoot_Dev_Integration\IS__con_REST_Parameters|Parameters for Retrieving Records].
==HTTP Method==
You use the {{PUT}} HTTP method and pass parameters of the inquiry in JSON format in the request body. See below for an example of the representation of parameters of the [HelpRoot_FormReference\IN_40_10_00|Inventory Summary] inquiry form in JSON format.{{{{{
  "InventoryID" : {value : "AALEGO500" } ,
  "WarehouseID" : {value : "MAIN" }
}
}}}}
==Response==
The response of a successful method call contains the data returned from an inquiry form in JSON format in the response body. 
==Example==
The following code shows an example of a class that implements the retrieval of data from an inquiry form of Acumatica ERP through the REST API. <source lang="csharp">public class RestService: IDisposable
{
    private readonly HttpClient _httpClient;

    private readonly string _acumaticaBaseUrl;

    public RestService(
      string acumaticaBaseUrl, string userName, string password, 
      string company, string branch)
    {
        _acumaticaBaseUrl = acumaticaBaseUrl;
        _httpClient = new HttpClient(
            new HttpClientHandler
            {
                UseCookies = true,
                CookieContainer = new CookieContainer()
            })
        {
            BaseAddress = new Uri(acumaticaBaseUrl + 
              "/entity/Default/6.00.001/"),
            DefaultRequestHeaders =
            {
                Accept = {MediaTypeWithQualityHeaderValue.Parse("text/json")}
            }
        };
        _httpClient.PostAsJsonAsync(
          acumaticaBaseUrl + "/entity/auth/login", new
            {
                name = userName,
                password = password,
                company = company,
                branch = branch
            }).Result
            .EnsureSuccessStatusCode();
    }

    void IDisposable.Dispose()
    {
        _httpClient.PostAsync(_acumaticaBaseUrl + "/entity/auth/logout", 
          new ByteArrayContent(new byte[0])).Wait();
        _httpClient.Dispose();
    }

    //Data submission
    public string Put(string entityName, string parameters, string entity)
    {
        var res = _httpClient
            .PutAsync(_acumaticaBaseUrl + "/entity/Default/6.00.001/" + 
                entityName + "?" + parameters, 
                new StringContent(entity, Encoding.UTF8, "application/json"))
            .Result
            .EnsureSuccessStatusCode();

        return res.Content.ReadAsStringAsync().Result;
    }
}</source>{br}

The following code uses the {{RestService.Put()}} method, which is defined in the previous code fragment, to retrieve the quantities of a stock item from the [HelpRoot_FormReference\IN_40_10_00|Inventory Summary] inquiry form.<source lang="csharp">public static void ExportItemQty()
{
    //Path to a source text file that contains the parameters of 
    //the inquiry in JSON format
    string entitySource = @"..\..\Input\InventorySummaryInquiry.txt";

    //REST service initialization
    RestService rs = new RestService(
            Properties.Settings.Default.AcumaticaBaseUrl,
            Properties.Settings.Default.UserName,
            Properties.Settings.Default.Password,
            Properties.Settings.Default.Company,
            Properties.Settings.Default.Branch
        );

    using (StreamReader sr = new StreamReader(entitySource))
    {
        //Read inquiry parameters in JSON format from a file
        string entityAsString = sr.ReadToEnd().ToString();

        //Specify the parameter to expand results of the inquiry
        string parameters = "$expand=Results";

        //Retrieve data from the inquiry
        string stockItems = 
            rs.Put("InventorySummaryInquiry", parameters, entityAsString);
    }
}</source>]]></column>
			<column name="PlainText"><![CDATA[Retrieval of Data from an Inquiry Form To retrieve data from an inquiry form of  Acumatica ERP by using the contract-based REST API, you access the needed URL with the                      PUT  HTTP method and pass the parameters of the inquiry in JSON                 format in the request body. See the following sections for details on and examples                 of the URL, parameter, HTTP method, and response format. URL If you need to retrieve data from an inquiry form, you use the following URL. http://<Base endpoint URL>/<Top-level entity> The URL includes the following components: <Base endpoint URL>  is the URL of the contract-based                         endpoint through which you are going to work with  Acumatica ERP, which has the following format:  http://< Acumatica ERP instance URL>/entity/<Endpoint name>/<Endpoint                             version>/ .  <Top-level entity>  is the name of the entity that                         corresponds to the inquiry form from which you are going to retrieve                         data. For example, suppose that you want to retrieve data from the   ([~/?ScreenId=IN401000|IN401000]) Inventory Summary (IN401000)                 form in a local  Acumatica ERP instance with the name  AcumaticaDB  by using the system endpoint with the                 name  Default  and Version 6.00.001. You would use the following URL to                 retrieve data:                      http://localhost/AcumaticaDB/entity/Default/6.00.001/InventorySummaryInquiry . Parameter When you are retrieving data from an inquiry form, you should use the  $expand                  parameter to expand the detail entity, which contains the results of the inquiry.                 For a detailed description of the parameter, see  Parameters for Retrieving Records. HTTP Method You use the  PUT  HTTP method and pass parameters of the inquiry in JSON format                 in the request body. See below for an example of the representation of parameters of                 the   ([~/?ScreenId=IN401000|IN401000]) Inventory Summary inquiry                 form in JSON                 format. {
  "InventoryID" : {value : "AALEGO500" } ,
  "WarehouseID" : {value : "MAIN" }
} Response The response of a successful method call contains the data returned from an inquiry form in     JSON format in the response body.  Example The following code shows an example of a class that implements the retrieval of data from an     inquiry form of  Acumatica ERP     through the REST API.      public class RestService: IDisposable
{
    private readonly HttpClient _httpClient;

    private readonly string _acumaticaBaseUrl;

    public RestService(
      string acumaticaBaseUrl, string userName, string password, 
      string company, string branch)
    {
        _acumaticaBaseUrl = acumaticaBaseUrl;
        _httpClient = new HttpClient(
            new HttpClientHandler
            {
                UseCookies = true,
                CookieContainer = new CookieContainer()
            })
        {
            BaseAddress = new Uri(acumaticaBaseUrl + 
              "/entity/Default/6.00.001/"),
            DefaultRequestHeaders =
            {
                Accept = {MediaTypeWithQualityHeaderValue.Parse("text/json")}
            }
        };
        _httpClient.PostAsJsonAsync(
          acumaticaBaseUrl + "/entity/auth/login", new
            {
                name = userName,
                password = password,
                company = company,
                branch = branch
            }).Result
            .EnsureSuccessStatusCode();
    }

    void IDisposable.Dispose()
    {
        _httpClient.PostAsync(_acumaticaBaseUrl + "/entity/auth/logout", 
          new ByteArrayContent(new byte[0])).Wait();
        _httpClient.Dispose();
    }

    //Data submission
    public string Put(string entityName, string parameters, string entity)
    {
        var res = _httpClient
            .PutAsync(_acumaticaBaseUrl + "/entity/Default/6.00.001/" + 
                entityName + "?" + parameters, 
                new StringContent(entity, Encoding.UTF8, "application/json"))
            .Result
            .EnsureSuccessStatusCode();

        return res.Content.ReadAsStringAsync().Result;
    }
} The following code uses the  RestService.Put()  method, which is defined in the                 previous code fragment, to retrieve the quantities of a stock item from the   ([~/?ScreenId=IN401000|IN401000]) Inventory Summary inquiry                 form. public static void ExportItemQty()
{
    //Path to a source text file that contains the parameters of 
    //the inquiry in JSON format
    string entitySource = @"..\..\Input\InventorySummaryInquiry.txt";

    //REST service initialization
    RestService rs = new RestService(
            Properties.Settings.Default.AcumaticaBaseUrl,
            Properties.Settings.Default.UserName,
            Properties.Settings.Default.Password,
            Properties.Settings.Default.Company,
            Properties.Settings.Default.Branch
        );

    using (StreamReader sr = new StreamReader(entitySource))
    {
        //Read inquiry parameters in JSON format from a file
        string entityAsString = sr.ReadToEnd().ToString();

        //Specify the parameter to expand results of the inquiry
        string parameters = "$expand=Results";

        //Retrieve data from the inquiry
        string stockItems = 
            rs.Put("InventorySummaryInquiry", parameters, entityAsString);
    }
} ]]></column>
		</row>
		<row PageID="c5e2f36a-0971-4b33-b127-3c3fe14106ff" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="e7f0e407-d648-3513-f7a2-701b73359093" RecordSourceID="22377">
			<column name="Content"><![CDATA[
When you retrieve records from Acumatica ERP by using the contract-based REST API, you can use the URL parameters, which are described in this topic, to filter records by the specified conditions, expand particular entities, and retrieve the values of the fields that are not defined in the contract of the endpoint. {br}{TOC}
==$filter Parameter==
You use this parameter to specify the conditions that determine which records should be selected from Acumatica ERP. You use [http://www.odata.org/documentation/odata-version-3-0/url-conventions/|OData URI conventions] to specify the value of the parameter. The following examples illustrate the use of this parameter:[anchor|#_a568cd13-149a-4b25-9de8-4665f135a543]
*''$filter=ItemStatus eq &rsquo;Active&rsquo;'': Obtains stock item records that have the ''Active'' status in Acumatica ERP.
*''$filter=MainContact/Email eq &rsquo;demo@gmail.com&rsquo;'': Obtains a customer record that has the ''demo@gmail.com'' email address. (The <tt>Email</tt> field is defined in a linked entity, which is available through the <tt>MainContact</tt> property.)
*''$filter=ItemStatus eq &rsquo;Active&rsquo; and LastModified gt datetimeoffset&rsquo;2016-07-15T10%3A31%3A28.402%2B03%3A00&rsquo;'': Obtains stock item records that have the ''Active'' status in Acumatica ERP and have been modified later than July 15, 2016.
*:((({S:Hint}You should encode date and time values in URL format before passing them as the value of the parameter. For example, you can encode the current date and time by using the {{System.Net.WebUtility.URLEncode()}} method as follows: {{WebUtility.UrlEncode(new DateTimeOffset(DateTime.Now).ToString("yyyy-MM-ddTHH:mm:ss.fffK"))}}.
)))
((({S:Hint}For one field, multiple conditions cannot be specified in the ''$filter'' parameter. The only exception is the'' ge X and le Y'' condition, such as ''$filter=CreatedDateTime ge DateTimeOffset&rsquo;2015-12-31T00%3A00%3A00%2B000&rsquo; and CreatedDateTime le DateTimeOffset&rsquo;2015-01-01T00%3A00%3A00%2B000&rsquo;''.
))){br}

When you specify the value of the parameter, you can use the following functions as they are defined in OData:[anchor|#_890b68e8-5888-418d-a268-f3ebfb069827]
*{{substringof}}
*{{startswith}}
*{{endswith}}
{br}

You can also use the following custom function to filter records by the values of the elements that are not defined in the contract of the endpoint: {{cf.<Type name>(f='<View name>.<Field name>')}}, where {{<Type name>}} is the type of the custom element, {{<View name>}} is the name of the data view that contains the element, and {{<Field name>}} is the name of the element. For example, if you want to obtain all records on the [HelpRoot_FormReference\IN_20_25_00|Stock Items] ([~/?ScreenId=IN202500|IN202500]) form that have the value of the '''Post Class ID''' element equal to ''STOCKITEM'', you would use the following parameter string: ''$filter=cf.String(f=&rsquo;ItemSettings.PostClassID&rsquo;) eq &rsquo;STOCKITEM&rsquo;''.((({S:Hint}For details on how to find out the name of a custom element and the name of its data view, see [HelpRoot_Dev_Integration\IS__con_CB_Custom_Fields|Custom Fields]. 
)))
==$top Parameter==
You use this parameter to specify the number of records to be returned from Acumatica ERP. That is, if you specify ''N'' as the value of this parameter, the first ''N'' records will be returned from Acumatica ERP. For example, if you want to obtain only first five records from the list, you use the following parameter string: ''$top=5''.
==$skip Parameter==
You use this parameter to specify the number of records to be skipped from the list of returned records. That is, if you specify ''N'' as the value of this parameter, the first ''N'' records will be skipped from the list of returned records. For example, if you do not want to obtain the first five records from the list, you use the following parameter string: ''$skip=5''.{br}

If you use the ''$skip'' and ''$top'' parameters together, the ''$skip'' parameter is applied first.
==$expand Parameter==
You use this parameter to specify the linked and detail entities that should be expanded. By default, no linked or detail entities are expanded; that is, only fields of the top-level entity are returned. {br}

You use [http://www.odata.org/documentation/odata-version-3-0/url-conventions/|OData URI conventions] to specify the value of this parameter. For example, if you want to obtain the values of the warehouse detail lines of stock item records, you use the following parameter string: ''$expand=WarehouseDetails''.{br}

You explicitly specify each linked or detail entity to be expanded. For example, if you specify ''$expand=MainContact'' for the <tt>Customer</tt> entity, only the <tt>Contact</tt> linked entity of the <tt>Customer</tt> entity is expanded, but the <tt>Address</tt> linked entity within <tt>MainContact</tt> is not. To expand the <tt>Address</tt> entity, you should explicitly specify the <tt>Address</tt> entity to be expanded: ''$expand=MainContact/Address''.
==$select Parameter==
You use this parameter to specify the fields of the entity to be returned from Acumatica ERP. By default, all fields of the entity are returned. {br}

You use [http://www.odata.org/documentation/odata-version-3-0/url-conventions/|OData URI conventions] to specify the value of this parameter. For example, if you want to obtain only the order types and order numbers of sales orders, you use the following parameter string: ''$select=OrderType,OrderNbr''.
==$custom Parameter==
You use this parameter to specify the fields that are not defined in the contract of the endpoint to be returned from Acumatica ERP. That is, you can use this parameter to obtain both the values of predefined elements on an Acumatica ERP form that are not included in the entity definition and the values of elements that were added to the Acumatica ERP form in a customization project. {br}

You specify the element whose value should be returned in the following format: {{<View name>.<Field name>}}, where you replace {{<View name>}} with the name of the data view that contains the element and {{<Field name>}} with the internal name of the element. For example, if you want to obtain the value of the '''Post Class ID''' element of the [HelpRoot_FormReference\IN_20_25_00|Stock Items] ([~/?ScreenId=IN202500|IN202500]) form, you use the following parameter string: ''$custom=ItemSettings.PostClassID''. For details on how to find out the field name and the name of the data view, see [HelpRoot_Dev_Integration\IS__con_CB_Custom_Fields|Custom Fields]. ((({S:Hint}If you want to obtain the value of a custom field of a linked or detail entity, you have to specify this entity in the ''$expand'' parameter.
))){br}

If you want to obtain the values of multiple custom elements, you specify the custom elements to be returned divided by commas. ]]></column>
			<column name="PlainText"><![CDATA[Parameters for Retrieving Records When you retrieve records from  Acumatica ERP     by using the contract-based REST API, you can use the URL parameters, which are described in     this topic, to filter records by the specified conditions, expand particular entities, and     retrieve the values of the fields that are not defined in the contract of the endpoint.  $filter Parameter You use this parameter to specify the conditions that determine which records should be     selected from  Acumatica ERP.     You use  OData URI conventions OData URI conventions to specify the value of the     parameter. The following examples illustrate the use of this parameter: $filter=ItemStatus eq 'Active' : Obtains stock item records that have the         Active  status in  Acumatica ERP. $filter=MainContact/Email eq 'demo@gmail.com' : Obtains a customer record that       has the  demo@gmail.com  email address. (The  Email  field is defined in       a linked entity, which is available through the  MainContact  property.) $filter=ItemStatus eq 'Active' and LastModified gt        datetimeoffset'2016-07-15T10%3A31%3A28.402%2B03%3A00' : Obtains stock item records that       have the  Active  status in  Acumatica ERP       and have been modified later than July 15, 2016. You should encode date and time values        in URL format before passing them as the value of the parameter. For example, you can encode        the current date and time by using the  System.Net.WebUtility.URLEncode()         method as follows:  WebUtility.UrlEncode(new         DateTimeOffset(DateTime.Now).ToString("yyyy-MM-ddTHH:mm:ss.fffK")) . For one field, multiple conditions cannot be specified in the  $filter       parameter. The only exception is the  ge X and le Y  condition, such as        $filter=CreatedDateTime ge DateTimeOffset'2015-12-31T00%3A00%3A00%2B000' and       CreatedDateTime le DateTimeOffset'2015-01-01T00%3A00%3A00%2B000' . When you specify the value of the parameter, you can use the following functions as they are     defined in OData: substringof startswith endswith You can also use the following custom function to filter records by the values of the elements     that are not defined in the contract of the endpoint:  cf.<Type name>(f='<View      name>.<Field name>') , where  <Type name>  is the type of the     custom element,  <View name>  is the name of the data view that contains the     element, and  <Field name>  is the name of the element. For example, if you     want to obtain all records on the   ([~/?ScreenId=IN202500|IN202500]) Stock Items (IN202500) form that have     the value of the  Post Class ID  element equal to  STOCKITEM , you     would use the following parameter string:  $filter=cf.String(f='ItemSettings.PostClassID')      eq 'STOCKITEM' . For details on how to find out the name of a custom element and the      name of its data view, see  Custom Fields.  $top Parameter You use this parameter to specify the number of records to be returned from  Acumatica ERP.     That is, if you specify  N  as the value of this parameter, the first  N  records will     be returned from  Acumatica ERP.     For example, if you want to obtain only first five records from the list, you use the following     parameter string:  $top=5 . $skip Parameter You use this parameter to specify the number of records to be skipped from the list of     returned records. That is, if you specify  N  as the value of this parameter, the first       N  records will be skipped from the list of returned records. For example, if you do not     want to obtain the first five records from the list, you use the following parameter string:       $skip=5 . If you use the  $skip  and  $top  parameters together, the  $skip      parameter is applied first. $expand Parameter You use this parameter to specify the linked and detail entities that should be expanded. By     default, no linked or detail entities are expanded; that is, only fields of the top-level entity     are returned.  You use  OData URI conventions OData URI conventions to specify the value of this     parameter. For example, if you want to obtain the values of the warehouse detail lines of stock     item records, you use the following parameter string:  $expand=WarehouseDetails . You explicitly specify each linked or detail entity to be expanded. For example, if you     specify  $expand=MainContact  for the  Customer  entity, only the       Contact  linked entity of the  Customer  entity is expanded,     but the  Address  linked entity within  MainContact  is not.     To expand the  Address  entity, you should explicitly specify the       Address  entity to be expanded:  $expand=MainContact/Address . $select Parameter You use this parameter to specify the fields of the entity to be returned from  Acumatica ERP.     By default, all fields of the entity are returned.  You use  OData URI conventions OData URI conventions to specify the value of this     parameter. For example, if you want to obtain only the order types and order numbers of sales     orders, you use the following parameter string:  $select=OrderType,OrderNbr . $custom Parameter You use this parameter to specify the fields that are not defined in the contract of the     endpoint to be returned from  Acumatica ERP.     That is, you can use this parameter to obtain both the values of predefined elements on an  Acumatica ERP     form that are not included in the entity definition and the values of elements that were added     to the  Acumatica ERP     form in a customization project.  You specify the element whose value should be returned in the following format:       <View name>.<Field name> , where you replace  <View      name>  with the name of the data view that contains the element and  <Field      name>  with the internal name of the element. For example, if you want to obtain the     value of the  Post Class ID  element of the   ([~/?ScreenId=IN202500|IN202500]) Stock Items (IN202500) form, you use the     following parameter string:  $custom=ItemSettings.PostClassID . For details on how to     find out the field name and the name of the data view, see  Custom Fields.  If you want      to obtain the value of a custom field of a linked or detail entity, you have to specify this      entity in the  $expand  parameter. If you want to obtain the values of multiple custom elements, you specify the custom elements     to be returned divided by commas.  ]]></column>
		</row>
		<row PageID="d806636f-3cb8-4fd6-bc1e-fef9cdf9683d" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="a3563227-3318-4f41-5d10-78d9b64a183f" RecordSourceID="22377">
			<column name="Content"><![CDATA[
In the contract-based REST API, you can delete the record by the value of its key fields or by its session identifier. To delete a record from Acumatica ERP, you access the needed URL address with the {{DELETE}} HTTP method. See the following sections for details on the possible URL, parameters, HTTP method, and response format.((({S:Hint}If you need to delete a detail line of a record, you should use the {{PUT}} HTTP method, as described in [HelpRoot_Dev_Integration\IS__con_REST_Update_Record|Update of a Record].
))){br}{TOC}
==URL for Removing by Key Fields==
If you need to delete a record with known key fields, you use the following URL.{{{{http://&lt;Base endpoint URL&gt;/&lt;Top-level entity&gt;/&lt;Key value 1&gt;/&lt;Key value 2&gt;
}}}}{br}

The URL has the following components:[anchor|#_512346f8-62c3-494a-a87a-63acc2479927]
*{{<Base endpoint URL>}} is the URL of the contract-based endpoint through which you are going to work with Acumatica ERP, which has the following format: {{http://<Acumatica ERP instance URL>/entity/<Endpoint name>/<Endpoint version>/}}. 
*{{<Top-level entity>}} is the name of the entity for which you are going to delete a record. 
*{{<Key value 1>}} and {{<Key value 2>}} are the values of the key fields of the record to be deleted. You use the number and order of key fields as they are defined on the corresponding Acumatica ERP form. 
*:((({S:Hint}You can pass the key fields separated by vertical bar (''|'') instead of slash(''/'').
)))
{br}

For example, suppose that you want to delete the sales order with order type ''SO'' and order number ''000123'' from a local Acumatica ERP instance with the name ''AcumaticaDB'' by using the system endpoint with the name ''Default'' and Version 6.00.001. You should use the following URL to delete the sales order: {{http://localhost/AcumaticaDB/entity/Default/6.00.001/SalesOrder/SO/000123}}.
==URL for Removing by ID==
If you need to delete a record with a known session ID, you use the following URL.{{{{http://&lt;Base endpoint URL&gt;/&lt;Top-level entity&gt;/&lt;Session entity ID&gt;
}}}}{br}

You replace {{<Base endpoint URL>}} with the URL of the contract-based endpoint through which you are going to work with Acumatica ERP, which has the following format: {{http://<Acumatica ERP instance URL>/entity/<Endpoint name>/<Endpoint version>/}}. You replace {{<Top-level entity>}} with the name of the entity for which you are going to retrieve the list of records. You replace {{<Session entity ID>}} with the session entity ID (which is the GUID).{br}

For example, suppose that you want to delete the sales order with session entity ID ''03efa858-2351-4bd5-ae06-3d9fb3b3c1e6'' from a local Acumatica ERP instance with the name ''AcumaticaDB'' by using the system endpoint with the name ''Default'' and Version 6.00.001. You should use the following URL to delete the sales order: {{http://localhost/AcumaticaDB/entity/Default/6.00.001/SalesOrder/03efa858-2351-4bd5-ae06-3d9fb3b3c1e6}}.
==Parameters==
You use no parameters when deleting a record.
==HTTP Method==
You use the {{DELETE}} HTTP method to retrieve records. You pass no content in the request body.
==Response==
The response of a successful method call is ''204 No Content''.
==Example==
The following code shows an example of a class that implements the removal of a record from Acumatica ERP through the REST API.{{{{public class RestService: IDisposable
{
    private readonly HttpClient _httpClient;

    private readonly string _acumaticaBaseUrl;

    public RestService(
      string acumaticaBaseUrl, string userName, string password, 
      string company, string branch)
    {
        _acumaticaBaseUrl = acumaticaBaseUrl;
        _httpClient = new HttpClient(
            new HttpClientHandler
            {
                UseCookies = true,
                CookieContainer = new CookieContainer()
            })
        {
            BaseAddress = new Uri(acumaticaBaseUrl + 
              "/entity/Default/6.00.001/"),
            DefaultRequestHeaders =
            {
                Accept = {MediaTypeWithQualityHeaderValue.Parse("text/json")}
            }
        };
        _httpClient.PostAsJsonAsync(
          acumaticaBaseUrl + "/entity/auth/login", new
            {
                name = userName,
                password = password,
                company = company,
                branch = branch
            }).Result
            .EnsureSuccessStatusCode();
    }

    void IDisposable.Dispose()
    {
        _httpClient.PostAsync(_acumaticaBaseUrl + "/entity/auth/logout", 
          new ByteArrayContent(new byte[0])).Wait();
        _httpClient.Dispose();
    }

    //Removal of a record
    public string Delete(string entityName, string keys)
    {
        var res = _httpClient.DeleteAsync(_acumaticaBaseUrl 
          + "/entity/Default/6.00.001/" + entityName + "/" + keys).Result
            .EnsureSuccessStatusCode();

        return res.Content.ReadAsStringAsync().Result;
    }
}
}}}}{br}

The following code uses the {{RestService.Delete()}} method, which is defined in the previous code fragment, to delete a stock item record.{{{{public static void DeleteStockItem()
{
    //Stock item data
    string inventoryID = "ASDF";

    //Initialize the REST service
    RestService rs = new RestService(
            Properties.Settings.Default.AcumaticaBaseUrl,
            Properties.Settings.Default.UserName,
            Properties.Settings.Default.Password,
            Properties.Settings.Default.Company,
            Properties.Settings.Default.Branch
        );

    //Remove the stock item
    string stockItem = rs.Delete("StockItem", inventoryID);
}
}}}}]]></column>
			<column name="PlainText"><![CDATA[Removal of a Record In the contract-based REST API, you can delete the record by the value of its key                 fields or by its session identifier. To delete a record from  Acumatica ERP, you access the needed URL address with the  DELETE  HTTP method.                 See the following sections for details on the possible URL, parameters, HTTP method,                 and response format. If you need to delete a detail line of a record, you                     should use the  PUT  HTTP method, as described in  Update of a Record. URL for Removing by Key Fields If you need to delete a record with known key fields, you use the following                 URL. http://<Base endpoint URL>/<Top-level entity>/<Key value 1>/<Key value 2> The URL has the following components: <Base endpoint URL>  is the URL of the contract-based                         endpoint through which you are going to work with  Acumatica ERP, which has the following format:  http://< Acumatica ERP instance URL>/entity/<Endpoint name>/<Endpoint                             version>/ .  <Top-level entity>  is the name of the entity for which                         you are going to delete a record.  <Key value 1>  and  <Key value 2>  are                         the values of the key fields of the record to be deleted. You use the number                         and order of key fields as they are defined on the corresponding  Acumatica ERP form.  You can pass the key fields separated by vertical             bar ( | ) instead of slash( / ). For example, suppose that you want to delete the sales order with order type                      SO  and order number  000123  from a local  Acumatica ERP instance with the name  AcumaticaDB  by using the system endpoint with the                 name  Default  and Version 6.00.001. You should use the following URL to delete                 the sales order:                      http://localhost/AcumaticaDB/entity/Default/6.00.001/SalesOrder/SO/000123 . URL for Removing by ID If you need to delete a record with a known session ID, you use the following                 URL. http://<Base endpoint URL>/<Top-level entity>/<Session entity ID> You replace  <Base endpoint URL>  with the URL of the                 contract-based endpoint through which you are going to work with  Acumatica ERP, which has the following format:  http://< Acumatica ERP instance URL>/entity/<Endpoint name>/<Endpoint version>/ . You                 replace  <Top-level entity>  with the name of the entity for which                 you are going to retrieve the list of records. You replace  <Session                     entity ID>  with the session entity ID (which is the GUID). For example, suppose that you want to delete the sales order with session entity ID                      03efa858-2351-4bd5-ae06-3d9fb3b3c1e6  from a local  Acumatica ERP instance with the name  AcumaticaDB  by using the system endpoint with the                 name  Default  and Version 6.00.001. You should use the following URL to delete                 the sales order:                      http://localhost/AcumaticaDB/entity/Default/6.00.001/SalesOrder/03efa858-2351-4bd5-ae06-3d9fb3b3c1e6 . Parameters You use no parameters when deleting a record. HTTP Method You use the  DELETE  HTTP method to retrieve records. You pass no content in                 the request body. Response The response of a successful method call is  204 No Content . Example The following code shows an example of a class that implements the removal of a record from                      Acumatica ERP through the REST                 API. public class RestService: IDisposable
{
    private readonly HttpClient _httpClient;

    private readonly string _acumaticaBaseUrl;

    public RestService(
      string acumaticaBaseUrl, string userName, string password, 
      string company, string branch)
    {
        _acumaticaBaseUrl = acumaticaBaseUrl;
        _httpClient = new HttpClient(
            new HttpClientHandler
            {
                UseCookies = true,
                CookieContainer = new CookieContainer()
            })
        {
            BaseAddress = new Uri(acumaticaBaseUrl + 
              "/entity/Default/6.00.001/"),
            DefaultRequestHeaders =
            {
                Accept = {MediaTypeWithQualityHeaderValue.Parse("text/json")}
            }
        };
        _httpClient.PostAsJsonAsync(
          acumaticaBaseUrl + "/entity/auth/login", new
            {
                name = userName,
                password = password,
                company = company,
                branch = branch
            }).Result
            .EnsureSuccessStatusCode();
    }

    void IDisposable.Dispose()
    {
        _httpClient.PostAsync(_acumaticaBaseUrl + "/entity/auth/logout", 
          new ByteArrayContent(new byte[0])).Wait();
        _httpClient.Dispose();
    }

    //Removal of a record
    public string Delete(string entityName, string keys)
    {
        var res = _httpClient.DeleteAsync(_acumaticaBaseUrl 
          + "/entity/Default/6.00.001/" + entityName + "/" + keys).Result
            .EnsureSuccessStatusCode();

        return res.Content.ReadAsStringAsync().Result;
    }
} The following code uses the  RestService.Delete()  method, which is defined in                 the previous code fragment, to delete a stock item                 record. public static void DeleteStockItem()
{
    //Stock item data
    string inventoryID = "ASDF";

    //Initialize the REST service
    RestService rs = new RestService(
            Properties.Settings.Default.AcumaticaBaseUrl,
            Properties.Settings.Default.UserName,
            Properties.Settings.Default.Password,
            Properties.Settings.Default.Company,
            Properties.Settings.Default.Branch
        );

    //Remove the stock item
    string stockItem = rs.Delete("StockItem", inventoryID);
} ]]></column>
		</row>
		<row PageID="91bf9106-062a-47a8-be1f-b48517a54324" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="5f464889-9774-c38d-0458-fa033d6e6bcc" RecordSourceID="22377">
			<column name="Content"><![CDATA[
To perform an action by using the contract-based REST API, you access the needed URL address with the {{POST}} HTTP method and pass the record representation in JSON format and parameters of the action in the request body. See the following sections for details on the URL, parameters, HTTP method, and response format.{br}{TOC}
==URL ==
If you need to perform an action on an Acumatica ERP form, you use the following URL.{{{{http://&lt;Base endpoint URL&gt;/&lt;Top-level entity&gt;/&lt;Action name&gt;
}}}}
The URL has the following components:[anchor|#_a50c9b64-4037-453a-b9dd-7e7d0be24cdb]
*{{<Base endpoint URL>}} is the URL of the contract-based endpoint through which you are going to work with Acumatica ERP, which has the following format: {{http://<Acumatica ERP instance URL>/entity/<Endpoint name>/<Endpoint version>/}}. 
*{{<Top-level entity>}} is the name of the entity for which you are going to perform an action. 
*{{<Action name>}} is the name of the action that you are going to perform.
{br}

For example, suppose that you want to confirm a shipment in a local Acumatica ERP instance with the name ''AcumaticaDB'' by using the system endpoint with the name ''Default'' and Version 6.00.001. You should use the following URL to confirm a shipment: {{http://localhost/AcumaticaDB/entity/Default/6.00.001/Shipment/ConfirmShipment}}.
==Parameters==
You use no parameters when performing an action.
==HTTP Method==
You use the {{POST}} HTTP method and pass the record to which the action should be applied and the parameters of the action in the request body in JSON format as follows. {{{{{
  "entity" : &lt;record in JSON format&gt;,
  "parameters" : &lt;parameters in JSON format&gt;
}
}}}}You can find details on how to represent a record in JSON format in [HelpRoot_Dev_Integration\IS__con_REST_Entity_Representation_in_JSON|Representation of a Record in JSON Format].
==Response==
If the long-running operation that was initiated by the action is completed or wasn&rsquo;t created, the response is ''204 No Content''. If the long-running operation is in progress, the response is ''202 Accepted''; it has the {{Location}} header, which contains a URL that can be used to check the status of the operation by using the {{GET}} HTTP method. When the {{GET}} HTTP method with this URL returns ''204 No Content'', the operation is completed.
==Example==
The following code shows an example of a class that implements the execution of an action in Acumatica ERP through the REST API.{{{{public class RestService: IDisposable
{
    private readonly HttpClient _httpClient;

    private readonly string _acumaticaBaseUrl;

    public RestService(
      string acumaticaBaseUrl, string userName, string password, 
      string company, string branch)
    {
        _acumaticaBaseUrl = acumaticaBaseUrl;
        _httpClient = new HttpClient(
            new HttpClientHandler
            {
                UseCookies = true,
                CookieContainer = new CookieContainer()
            })
        {
            BaseAddress = new Uri(acumaticaBaseUrl + 
              "/entity/Default/6.00.001/"),
            DefaultRequestHeaders =
            {
                Accept = {MediaTypeWithQualityHeaderValue.Parse("text/json")}
            }
        };
        _httpClient.PostAsJsonAsync(
          acumaticaBaseUrl + "/entity/auth/login", new
            {
                name = userName,
                password = password,
                company = company,
                branch = branch
            }).Result
            .EnsureSuccessStatusCode();
    }

    void IDisposable.Dispose()
    {
        _httpClient.PostAsync(_acumaticaBaseUrl + "/entity/auth/logout", 
          new ByteArrayContent(new byte[0])).Wait();
        _httpClient.Dispose();
    }

    //Invocation of an action
    public string Post(string entityName, string actionName, 
      string entityAndParameters)
    {
        var result = _httpClient
            .PostAsync(_acumaticaBaseUrl + "/entity/Default/6.00.001/" 
              + entityName + "/" + actionName, 
              new StringContent(entityAndParameters, 
                Encoding.UTF8, "application/json"));
            var res = result.Result;
            var cont = res.Content.ReadAsStringAsync().Result;
            res.EnsureSuccessStatusCode();

        var dt = DateTime.Now;
        while (true)
        {
            switch (res.StatusCode)
            {
                case HttpStatusCode.NoContent:
                    return "No content";
                case HttpStatusCode.Accepted:
                    if ((DateTime.Now - dt).Seconds &gt; 30)
                        throw new TimeoutException();
                    Thread.Sleep(500);
                    res = _httpClient.GetAsync(res.Headers.Location)
                      .Result.EnsureSuccessStatusCode();
                    continue;
                default:
                    throw new InvalidOperationException(
                      "Invalid process result: " + res.StatusCode);
            }
        }
    }
}
}}}}{br}

The following code uses the {{RestService.Post()}} method, which is defined in the previous code fragment, to release a sales order invoice.{{{{public static void ReleaseSOInvoice()
{
    //Invoice to be released
    string invoice = "{\"Type\" : {value : \"Invoice\"}, " 
      + "\"ReferenceNbr\" : {value : \"INV000045\"} }";

    //Initialize the REST service
    RestService rs = new RestService(
            Properties.Settings.Default.AcumaticaBaseUrl,
            Properties.Settings.Default.UserName,
            Properties.Settings.Default.Password,
            Properties.Settings.Default.Company,
            Properties.Settings.Default.Branch
        );

    //Release the invoice
    invoice = rs.Post("SalesInvoice", "ReleaseSalesInvoice", 
      "{\"entity\" : " + invoice + ", \"parameters\" : null}");
}
}}}}]]></column>
			<column name="PlainText"><![CDATA[Execution of an Action To perform an action by using the contract-based REST API, you access the needed URL                 address with the  POST  HTTP method and pass the record                 representation in JSON format and parameters of the action in the request body. See                 the following sections for details on the URL, parameters, HTTP method, and response                 format. URL  If you need to perform an action on an  Acumatica ERP form, you use the following URL. http://<Base endpoint URL>/<Top-level entity>/<Action name> The URL has the following components: <Base endpoint URL>  is the URL of the contract-based                         endpoint through which you are going to work with  Acumatica ERP, which has the following format:  http://< Acumatica ERP instance URL>/entity/<Endpoint name>/<Endpoint                             version>/ .  <Top-level entity>  is the name of the entity for which                         you are going to perform an action.  <Action name>  is the name of the action that you are                         going to perform. For example, suppose that you want to confirm a shipment in a local  Acumatica ERP instance with the name  AcumaticaDB  by using the system endpoint with the                 name  Default  and Version 6.00.001. You should use the following URL to                 confirm a shipment:                      http://localhost/AcumaticaDB/entity/Default/6.00.001/Shipment/ConfirmShipment . Parameters You use no parameters when performing an action. HTTP Method You use the  POST  HTTP method and pass the record to which the action should                 be applied and the parameters of the action in the request body in JSON format as                 follows.                  {
  "entity" : <record in JSON format>,
  "parameters" : <parameters in JSON format>
} You                 can find details on how to represent a record in JSON format in  Representation of a Record in JSON Format. Response If the long-running operation that was initiated by the action is completed or wasn't created,                 the response is  204 No Content . If the long-running operation is in progress,                 the response is  202 Accepted ; it has the  Location  header,                 which contains a URL that can be used to check the status of the operation by using                 the  GET  HTTP method. When the  GET  HTTP method with                 this URL returns  204 No Content , the operation is completed. Example The following code shows an example of a class that implements the execution of an action in                      Acumatica ERP through the REST                 API. public class RestService: IDisposable
{
    private readonly HttpClient _httpClient;

    private readonly string _acumaticaBaseUrl;

    public RestService(
      string acumaticaBaseUrl, string userName, string password, 
      string company, string branch)
    {
        _acumaticaBaseUrl = acumaticaBaseUrl;
        _httpClient = new HttpClient(
            new HttpClientHandler
            {
                UseCookies = true,
                CookieContainer = new CookieContainer()
            })
        {
            BaseAddress = new Uri(acumaticaBaseUrl + 
              "/entity/Default/6.00.001/"),
            DefaultRequestHeaders =
            {
                Accept = {MediaTypeWithQualityHeaderValue.Parse("text/json")}
            }
        };
        _httpClient.PostAsJsonAsync(
          acumaticaBaseUrl + "/entity/auth/login", new
            {
                name = userName,
                password = password,
                company = company,
                branch = branch
            }).Result
            .EnsureSuccessStatusCode();
    }

    void IDisposable.Dispose()
    {
        _httpClient.PostAsync(_acumaticaBaseUrl + "/entity/auth/logout", 
          new ByteArrayContent(new byte[0])).Wait();
        _httpClient.Dispose();
    }

    //Invocation of an action
    public string Post(string entityName, string actionName, 
      string entityAndParameters)
    {
        var result = _httpClient
            .PostAsync(_acumaticaBaseUrl + "/entity/Default/6.00.001/" 
              + entityName + "/" + actionName, 
              new StringContent(entityAndParameters, 
                Encoding.UTF8, "application/json"));
            var res = result.Result;
            var cont = res.Content.ReadAsStringAsync().Result;
            res.EnsureSuccessStatusCode();

        var dt = DateTime.Now;
        while (true)
        {
            switch (res.StatusCode)
            {
                case HttpStatusCode.NoContent:
                    return "No content";
                case HttpStatusCode.Accepted:
                    if ((DateTime.Now - dt).Seconds > 30)
                        throw new TimeoutException();
                    Thread.Sleep(500);
                    res = _httpClient.GetAsync(res.Headers.Location)
                      .Result.EnsureSuccessStatusCode();
                    continue;
                default:
                    throw new InvalidOperationException(
                      "Invalid process result: " + res.StatusCode);
            }
        }
    }
} The following code uses the  RestService.Post()  method, which is defined in         the previous code fragment, to release a sales order         invoice. public static void ReleaseSOInvoice()
{
    //Invoice to be released
    string invoice = "{\"Type\" : {value : \"Invoice\"}, " 
      + "\"ReferenceNbr\" : {value : \"INV000045\"} }";

    //Initialize the REST service
    RestService rs = new RestService(
            Properties.Settings.Default.AcumaticaBaseUrl,
            Properties.Settings.Default.UserName,
            Properties.Settings.Default.Password,
            Properties.Settings.Default.Company,
            Properties.Settings.Default.Branch
        );

    //Release the invoice
    invoice = rs.Post("SalesInvoice", "ReleaseSalesInvoice", 
      "{\"entity\" : " + invoice + ", \"parameters\" : null}");
} ]]></column>
		</row>
		<row PageID="591def3d-5fe5-42c1-bb35-cfe5b4c77f6f" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="764906dd-eb21-2f03-5ad2-a3c8a9c86713" RecordSourceID="22377">
			<column name="Content"><![CDATA[
When you need to attach a file to a record by using the contract-based REST API, you access the needed URL address with the {{PUT}} HTTP method and pass the file in the request body. See the following sections for details on the URL, parameters, HTTP method, and response format.{br}{TOC}
==URL ==
If you need to attach a file to a record in Acumatica ERP, you use the following URL.{{{{http://&lt;Base endpoint URL&gt;/&lt;Top-level entity&gt;/&lt;Key value 1&gt;/&lt;Key value 2&gt;/files/&lt;File name&gt;
}}}}
The URL has the following components:[anchor|#_47986599-c001-4f82-b373-342fbda3667a]
*{{<Base endpoint URL>}} is the URL of the contract-based endpoint through which you are going to work with Acumatica ERP, which has the following format: {{http://<Acumatica ERP instance URL>/entity/<Endpoint name>/<Endpoint version>/}}. 
*{{<Top-level entity>}} is the name of the entity to which you are going to attach a file. 
*{{<Key value 1>}} and {{<Key value 2>}} are the values of the key fields of the record to which you are going to attach a file. You use the number and order of key fields as they are defined on the corresponding Acumatica ERP form.
*:((({S:Hint}You can pass the key fields separated by vertical bar (''|'') instead of slash(''/'').
)))
*{{<File name>}} is the name of the file that you are going to attach with the extension.
{br}

For example, suppose that you want to attach the <tt>Sample.jpg</tt> file to the stock item record with inventory ID ''AALEGO500'' in a local Acumatica ERP instance with name ''AcumaticaDB'' by using the system endpoint with the name ''Default'' and Version 6.00.001. You should use the following URL to attach the file: {{http://localhost/AcumaticaDB/entity/Default/6.00.001/StockItem/AALEGO500/files/Sample.jpg}}.
==Parameters==
You use no parameters when you attach a file to a record.
==HTTP Method==
You use the {{PUT}} HTTP method and pass the file to be attached in the request body. 
==Response==
The response of a successful method call is ''204 No Content''.
==Example==
The following code shows an example of a class that implements the attachment of a file to a record in Acumatica ERP through the REST API. <source lang="csharp">public class RestService: IDisposable
{
    private readonly HttpClient _httpClient;

    private readonly string _acumaticaBaseUrl;

    public RestService(
      string acumaticaBaseUrl, string userName, string password, 
      string company, string branch)
    {
        _acumaticaBaseUrl = acumaticaBaseUrl;
        _httpClient = new HttpClient(
            new HttpClientHandler
            {
                UseCookies = true,
                CookieContainer = new CookieContainer()
            })
        {
            BaseAddress = new Uri(acumaticaBaseUrl + 
              "/entity/Default/6.00.001/"),
            DefaultRequestHeaders =
            {
                Accept = {MediaTypeWithQualityHeaderValue.Parse("text/json")}
            }
        };
        _httpClient.PostAsJsonAsync(
          acumaticaBaseUrl + "/entity/auth/login", new
            {
                name = userName,
                password = password,
                company = company,
                branch = branch
            }).Result
            .EnsureSuccessStatusCode();
    }

    void IDisposable.Dispose()
    {
        _httpClient.PostAsync(_acumaticaBaseUrl + "/entity/auth/logout", 
          new ByteArrayContent(new byte[0])).Wait();
        _httpClient.Dispose();
    }

    //Attachment of a file to a record
    public string PutFile(string entityName, string keys, 
      string fileName, System.IO.Stream file)
    {
        var res = _httpClient.PutAsync(_
          acumaticaBaseUrl + "/entity/Default/6.00.001/" 
          + entityName + "/" + keys + "/files/" + fileName, 
          new StreamContent(file)).Result
            .EnsureSuccessStatusCode();
        return res.Content.ReadAsStringAsync().Result;
    }
}</source>{br}

The following code uses the {{RestService.PutFile()}} method, which is defined in the previous code fragment, to attach a file to a stock item record.<source lang="csharp">public static void PutFile()
{
    //Input data
    string inventoryID = "AALEGO500";
    string fileName = "T2MCRO.jpg";
    string entitySource = @"..\..\Input\T2MCRO.jpg";

    //Initialize the REST service
    RestService rs = new RestService(
            Properties.Settings.Default.AcumaticaBaseUrl,
            Properties.Settings.Default.UserName,
            Properties.Settings.Default.Password,
            Properties.Settings.Default.Company,
            Properties.Settings.Default.Branch
        );

    using (StreamReader sr = new StreamReader(entitySource))
    {
        //Attach a file to a stock item record
        string stockItem = rs.PutFile("StockItem", inventoryID, fileName, 
          sr.BaseStream);
    }

}</source>]]></column>
			<column name="PlainText"><![CDATA[Attachment of a File to a Record When you need to attach a file to a record by using the contract-based REST API, you                 access the needed URL address with the  PUT  HTTP method and pass the                 file in the request body. See the following sections for details on the URL,                 parameters, HTTP method, and response format. URL  If you need to attach a file to a record in  Acumatica ERP, you use the following URL. http://<Base endpoint URL>/<Top-level entity>/<Key value 1>/<Key value 2>/files/<File name> The URL has the following components: <Base endpoint URL>  is the URL of the contract-based                         endpoint through which you are going to work with  Acumatica ERP, which has the following format:  http://< Acumatica ERP instance URL>/entity/<Endpoint name>/<Endpoint                             version>/ .  <Top-level entity>  is the name of the entity to which                         you are going to attach a file.  <Key value 1>  and  <Key value 2>  are                         the values of the key fields of the record to which you are going to attach                         a file. You use the number and order of key fields as they are defined on                         the corresponding  Acumatica ERP form. You can pass the key fields separated by vertical             bar ( | ) instead of slash( / ). <File name>  is the name of the file that you are going                         to attach with the extension. For example, suppose that you want to attach the  Sample.jpg  file                 to the stock item record with inventory ID  AALEGO500  in a local  Acumatica ERP instance with name  AcumaticaDB  by using the system endpoint with the name                      Default  and Version 6.00.001. You should use the following URL to attach                 the file:                      http://localhost/AcumaticaDB/entity/Default/6.00.001/StockItem/AALEGO500/files/Sample.jpg . Parameters You use no parameters when you attach a file to a record. HTTP Method You use the  PUT  HTTP method and pass the file to be attached in the request     body.  Response The response of a successful method call is  204 No Content . Example The following code shows an example of a class that implements the attachment of a file to a                 record in  Acumatica ERP through the REST API.                  public class RestService: IDisposable
{
    private readonly HttpClient _httpClient;

    private readonly string _acumaticaBaseUrl;

    public RestService(
      string acumaticaBaseUrl, string userName, string password, 
      string company, string branch)
    {
        _acumaticaBaseUrl = acumaticaBaseUrl;
        _httpClient = new HttpClient(
            new HttpClientHandler
            {
                UseCookies = true,
                CookieContainer = new CookieContainer()
            })
        {
            BaseAddress = new Uri(acumaticaBaseUrl + 
              "/entity/Default/6.00.001/"),
            DefaultRequestHeaders =
            {
                Accept = {MediaTypeWithQualityHeaderValue.Parse("text/json")}
            }
        };
        _httpClient.PostAsJsonAsync(
          acumaticaBaseUrl + "/entity/auth/login", new
            {
                name = userName,
                password = password,
                company = company,
                branch = branch
            }).Result
            .EnsureSuccessStatusCode();
    }

    void IDisposable.Dispose()
    {
        _httpClient.PostAsync(_acumaticaBaseUrl + "/entity/auth/logout", 
          new ByteArrayContent(new byte[0])).Wait();
        _httpClient.Dispose();
    }

    //Attachment of a file to a record
    public string PutFile(string entityName, string keys, 
      string fileName, System.IO.Stream file)
    {
        var res = _httpClient.PutAsync(_
          acumaticaBaseUrl + "/entity/Default/6.00.001/" 
          + entityName + "/" + keys + "/files/" + fileName, 
          new StreamContent(file)).Result
            .EnsureSuccessStatusCode();
        return res.Content.ReadAsStringAsync().Result;
    }
} The following code uses the  RestService.PutFile()  method, which is defined in     the previous code fragment, to attach a file to a stock item     record. public static void PutFile()
{
    //Input data
    string inventoryID = "AALEGO500";
    string fileName = "T2MCRO.jpg";
    string entitySource = @"..\..\Input\T2MCRO.jpg";

    //Initialize the REST service
    RestService rs = new RestService(
            Properties.Settings.Default.AcumaticaBaseUrl,
            Properties.Settings.Default.UserName,
            Properties.Settings.Default.Password,
            Properties.Settings.Default.Company,
            Properties.Settings.Default.Branch
        );

    using (StreamReader sr = new StreamReader(entitySource))
    {
        //Attach a file to a stock item record
        string stockItem = rs.PutFile("StockItem", inventoryID, fileName, 
          sr.BaseStream);
    }

} ]]></column>
		</row>
		<row PageID="b1bc82ee-ae6b-442a-a369-863d98f14630" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="575b9e14-8ae7-a9f5-b169-00efdb06237a" RecordSourceID="22377">
			<column name="Content"><![CDATA[
To retrieve a file that is attached to a record from Acumatica ERP by using the contract-based REST API, you access the URL address of the file with the {{GET}} HTTP method. See the following sections for details on the URL, parameters, HTTP method, and response format.{br}{TOC}
==URL==
If you need to obtain a file attached to a record, you use the following URL.{{{{http://&lt;Base endpoint URL&gt;/files/&lt;File identifier&gt;
}}}}{br}

The URL has the following components:[anchor|#_470d7d85-7972-4a4b-8fef-179e0eaf41b6]
*{{<Base endpoint URL>}} is the URL of the contract-based endpoint through which you are going to work with Acumatica ERP, which has the following format: {{http://<Acumatica ERP instance URL>/entity/<Endpoint name>/<Endpoint version>/}}. 
*{{<File identifier>}} is the internal identifier of the file in the system. 
{br}

To get this URL for a particular file attached to a record, you should obtain the record from Acumatica ERP and, in the returned JSON representation of the record, find the value of the <tt>href</tt> property of the needed file in the <tt>files</tt> array. For information on how to retrieve a record from Acumatica ERP, see [HelpRoot_Dev_Integration\IS__con_REST_Get_Record_by_Key|Retrieval of a Record by Key Fields] and [HelpRoot_Dev_Integration\IS__con_REST_Get_Record_by_ID|Retrieval of a Record by ID].{br}

For example, suppose that you retrieved the stock item record that contains the following <tt>files</tt> array from a local Acumatica ERP instance with the name ''AcumaticaDB''. {{{{{
  ...,
  "files":[
    {
      "id":"9be45eb7-f97d-400b-96a5-1c4cf82faa96",
      "filename":"Stock Items (AAMACHINE1)\\T2MCRO.jpg",
      "href":
"/AcumaticaDB/entity/Default/6.00.001/files/9be45eb7-f97d-400b-96a5-1c4cf82faa96"
    }
  ]
}
}}}}You should use the following URL to retrieve the <tt>T2MCRO.jpg</tt> file attached to the stock item record: {{http://localhost/AcumaticaDB/entity/Default/6.00.001/files/9be45eb7-f97d-400b-96a5-1c4cf82faa96}}.
==Parameters==
You use no parameters when retrieving a file.
==HTTP Method==
You use the {{GET}} HTTP method to retrieve a file. 
==Response==
The response of a successful method call contains the retrieved file in the response body. 
==Example==
The following code shows an example of a class that implements the retrieval of a file attached to a record in Acumatica ERP through the REST API.<source lang="csharp">public class RestService: IDisposable
{
    private readonly HttpClient _httpClient;

    private readonly string _acumaticaBaseUrl;

    public RestService(
      string acumaticaBaseUrl, string userName, string password, 
      string company, string branch)
    {
        _acumaticaBaseUrl = acumaticaBaseUrl;
        _httpClient = new HttpClient(
            new HttpClientHandler
            {
                UseCookies = true,
                CookieContainer = new CookieContainer()
            })
        {
            BaseAddress = new Uri(acumaticaBaseUrl + 
              "/entity/Default/6.00.001/"),
            DefaultRequestHeaders =
            {
                Accept = {MediaTypeWithQualityHeaderValue.Parse("text/json")}
            }
        };
        _httpClient.PostAsJsonAsync(
          acumaticaBaseUrl + "/entity/auth/login", new
            {
                name = userName,
                password = password,
                company = company,
                branch = branch
            }).Result
            .EnsureSuccessStatusCode();
    }

    void IDisposable.Dispose()
    {
        _httpClient.PostAsync(_acumaticaBaseUrl + "/entity/auth/logout", 
          new ByteArrayContent(new byte[0])).Wait();
        _httpClient.Dispose();
    }

    //Retrieval of a record by key fields
    public string GetByKeys(string entityName, string keys, string parameters)
    {
        var res = _httpClient.GetAsync(
          _acumaticaBaseUrl + "/entity/Default/6.00.001/" + 
          entityName + "/" + keys + "?" + parameters)
            .Result
            .EnsureSuccessStatusCode();

        return res.Content.ReadAsStringAsync().Result;
    }

    //Retrieving of a file
    public System.IO.Stream GetFile(string href)
    {
        var res = _httpClient.GetAsync(href).Result.EnsureSuccessStatusCode();
        return res.Content.ReadAsStreamAsync().Result;
    }
}</source>{br}

The following code uses the {{RestService.GetByKeys()}} and {{RestService.GetFile()}} methods, which are defined in the previous code fragment, to retrieve a file attached to a stock item record from Acumatica ERP.<source lang="csharp">public static void GetFile()
{
    //Specify stock item data
    string inventoryID = "AAMACHINE1";

    //Initialize the REST service
    RestService rs = new RestService(
            Properties.Settings.Default.AcumaticaBaseUrl,
            Properties.Settings.Default.UserName,
            Properties.Settings.Default.Password,
            Properties.Settings.Default.Company,
            Properties.Settings.Default.Branch
        );

    //Retrieve the stock item
    string stockItem = rs.GetByKeys("StockItem", inventoryID, null);

    //Find href and the file name of the needed file
    //(using Newtonsoft.Json.Linq and System.IO)
    JObject jItem = JObject.Parse(stockItem);
    JArray jFiles = jItem.Value&lt;JArray&gt;("files");
    string fileRef = jFiles[0].Value&lt;string&gt;("href");
    string fullFileName = jFiles[0].Value&lt;string&gt;("filename");
    string fileName = Path.GetFileName(fullFileName);

    //Obtain the file
    Stream file = rs.GetFile(fileRef);

    using (var outputFile = File.Create(@"..\..\Output\" + fileName))
    {
        file.Seek(0, SeekOrigin.Begin);
        file.CopyTo(outputFile);
    }   
}</source>]]></column>
			<column name="PlainText"><![CDATA[Retrieval of a File Attached to a Record To retrieve a file that is attached to a record from  Acumatica ERP by using the contract-based REST API, you access the URL address of the file with                 the  GET  HTTP method. See the following sections for details on the                 URL, parameters, HTTP method, and response format. URL If you need to obtain a file attached to a record, you use the following                 URL. http://<Base endpoint URL>/files/<File identifier> The URL has the following components: <Base endpoint URL>  is the URL of the contract-based                         endpoint through which you are going to work with  Acumatica ERP, which has the following format:  http://< Acumatica ERP instance URL>/entity/<Endpoint name>/<Endpoint                             version>/ .  <File identifier>  is the internal identifier of the file                         in the system.  To get this URL for a particular file attached to a record, you should obtain the                 record from  Acumatica ERP and, in the returned JSON representation of the record, find the value of the                      href  property of the needed file in the                      files  array. For information on how to retrieve a record from                      Acumatica ERP, see  Retrieval of a Record by Key Fields and  Retrieval of a Record by ID. For example, suppose that you retrieved the stock item record that contains the                 following  files  array from a local  Acumatica ERP instance with the name  AcumaticaDB .                  {
  ...,
  "files":[
    {
      "id":"9be45eb7-f97d-400b-96a5-1c4cf82faa96",
      "filename":"Stock Items (AAMACHINE1)\\T2MCRO.jpg",
      "href":
"/AcumaticaDB/entity/Default/6.00.001/files/9be45eb7-f97d-400b-96a5-1c4cf82faa96"
    }
  ]
} You                 should use the following URL to retrieve the  T2MCRO.jpg  file                 attached to the stock item record:                      http://localhost/AcumaticaDB/entity/Default/6.00.001/files/9be45eb7-f97d-400b-96a5-1c4cf82faa96 . Parameters You use no parameters when retrieving a file. HTTP Method You use the  GET  HTTP method to retrieve a file.  Response The response of a successful method call contains the retrieved file in the response body.     Example The following code shows an example of a class that implements the retrieval of a file                 attached to a record in  Acumatica ERP through the REST                 API. public class RestService: IDisposable
{
    private readonly HttpClient _httpClient;

    private readonly string _acumaticaBaseUrl;

    public RestService(
      string acumaticaBaseUrl, string userName, string password, 
      string company, string branch)
    {
        _acumaticaBaseUrl = acumaticaBaseUrl;
        _httpClient = new HttpClient(
            new HttpClientHandler
            {
                UseCookies = true,
                CookieContainer = new CookieContainer()
            })
        {
            BaseAddress = new Uri(acumaticaBaseUrl + 
              "/entity/Default/6.00.001/"),
            DefaultRequestHeaders =
            {
                Accept = {MediaTypeWithQualityHeaderValue.Parse("text/json")}
            }
        };
        _httpClient.PostAsJsonAsync(
          acumaticaBaseUrl + "/entity/auth/login", new
            {
                name = userName,
                password = password,
                company = company,
                branch = branch
            }).Result
            .EnsureSuccessStatusCode();
    }

    void IDisposable.Dispose()
    {
        _httpClient.PostAsync(_acumaticaBaseUrl + "/entity/auth/logout", 
          new ByteArrayContent(new byte[0])).Wait();
        _httpClient.Dispose();
    }

    //Retrieval of a record by key fields
    public string GetByKeys(string entityName, string keys, string parameters)
    {
        var res = _httpClient.GetAsync(
          _acumaticaBaseUrl + "/entity/Default/6.00.001/" + 
          entityName + "/" + keys + "?" + parameters)
            .Result
            .EnsureSuccessStatusCode();

        return res.Content.ReadAsStringAsync().Result;
    }

    //Retrieving of a file
    public System.IO.Stream GetFile(string href)
    {
        var res = _httpClient.GetAsync(href).Result.EnsureSuccessStatusCode();
        return res.Content.ReadAsStreamAsync().Result;
    }
} The following code uses the  RestService.GetByKeys()  and                      RestService.GetFile()  methods, which are defined in the                 previous code fragment, to retrieve a file attached to a stock item record from  Acumatica ERP. public static void GetFile()
{
    //Specify stock item data
    string inventoryID = "AAMACHINE1";

    //Initialize the REST service
    RestService rs = new RestService(
            Properties.Settings.Default.AcumaticaBaseUrl,
            Properties.Settings.Default.UserName,
            Properties.Settings.Default.Password,
            Properties.Settings.Default.Company,
            Properties.Settings.Default.Branch
        );

    //Retrieve the stock item
    string stockItem = rs.GetByKeys("StockItem", inventoryID, null);

    //Find href and the file name of the needed file
    //(using Newtonsoft.Json.Linq and System.IO)
    JObject jItem = JObject.Parse(stockItem);
    JArray jFiles = jItem.Value<JArray>("files");
    string fileRef = jFiles[0].Value<string>("href");
    string fullFileName = jFiles[0].Value<string>("filename");
    string fileName = Path.GetFileName(fullFileName);

    //Obtain the file
    Stream file = rs.GetFile(fileRef);

    using (var outputFile = File.Create(@"..\..\Output\" + fileName))
    {
        file.Seek(0, SeekOrigin.Begin);
        file.CopyTo(outputFile);
    }   
} ]]></column>
		</row>
		<row PageID="64daacf1-75c4-4bfa-b57b-36222020e7c9" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="f17b6be8-1e42-fd16-feb0-73db183d9e2b" RecordSourceID="22377">
			<column name="Content"><![CDATA[
To retrieve the schema of custom fields of an entity—that is, the field name, view name, and type of the fields that are not defined in the contract of the endpoint for this entity—by using the contract-based REST API, you access the needed URL with the {{GET}} HTTP method. See the following sections for details on and examples of the URL, parameters, HTTP method, and response format.{br}{TOC}
==URL==
If you need to obtain the schema of custom fields of an entity, you use the following URL.{{{{http://&lt;Base endpoint URL&gt;/&lt;Top-level entity&gt;/$adHocSchema
}}}}{br}

The URL includes the following components:[anchor|#_c37a5a4f-e82c-4f31-8055-6c8018e82d45]
*{{<Base endpoint URL>}} is the URL of the contract-based endpoint through which you are going to work with Acumatica ERP, which has the following format: {{http://<Acumatica ERP instance URL>/entity/<Endpoint name>/<Endpoint version>/}}. 
*{{<Top-level entity>}} is the name of the entity for which you are going to retrieve the schema of custom fields.
{br}

For example, suppose that you want to obtain the schema of custom fields of a stock item entity from a local Acumatica ERP instance with the name ''AcumaticaDB'' by using the system endpoint with the name ''Default'' and Version 6.00.001. You would use the following URL to retrieve the schema: {{http://localhost/AcumaticaDB/entity/Default/6.00.001/StockItem/$adHocSchema}}.
==Parameters==
You use no parameters when retrieving the schema of custom fields of an entity.
==HTTP Method==
You use the {{GET}} HTTP method to retrieve the schema of custom fields. 
==Response==
The response of a successful method call contains the schema of custom fields in JSON format in the response body. ]]></column>
			<column name="PlainText"><![CDATA[Retrieval of the Schema of Custom Fields To retrieve the schema of custom fields of an entity—that is, the field name, view name,     and type of the fields that are not defined in the contract of the endpoint for this     entity—by using the contract-based REST API, you access the needed URL with the       GET  HTTP method. See the following sections for details on and examples of the     URL, parameters, HTTP method, and response format. URL If you need to obtain the schema of custom fields of an entity, you use the following     URL. http://<Base endpoint URL>/<Top-level entity>/$adHocSchema The URL includes the following components: <Base endpoint URL>  is the URL of the contract-based endpoint through       which you are going to work with  Acumatica ERP, which has the following format:  http://< Acumatica ERP instance URL>/entity/<Endpoint name>/<Endpoint version>/ .  <Top-level entity>  is the name of the entity for which you are going to       retrieve the schema of custom fields. For example, suppose that you want to obtain the schema of custom fields of a stock item     entity from a local  Acumatica ERP     instance with the name  AcumaticaDB  by using the system endpoint with the name       Default  and Version 6.00.001. You would use the following URL to retrieve the schema:       http://localhost/AcumaticaDB/entity/Default/6.00.001/StockItem/$adHocSchema . Parameters You use no parameters when retrieving the schema of custom fields of an entity. HTTP Method You use the  GET  HTTP method to retrieve the schema of custom fields.  Response The response of a successful method call contains the schema of custom fields in JSON format     in the response body.  ]]></column>
		</row>
		<row PageID="33e74dc8-aad3-4fb0-b3ac-e8ecaf323578" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="35db73cc-498c-a025-e8f3-457c6cf13264" RecordSourceID="22377">
			<column name="Content"><![CDATA[[anchor|#_dbdd2366-b69f-4389-8f79-fca472bcfe95]
For some text boxes on Acumatica ERP forms, users can type values in multiple languages if multiple locales are configured in Acumatica ERP. For example, if your Acumatica ERP instance has English and French locales activated and multilingual user input configured, you can specify the value of the '''Description''' box on the [HelpRoot_FormReference\IN_20_25_00|Stock Items] ([~/?ScreenId=IN202500|IN202500]) form in English and French. For the list of elements that support multiple languages, see [HelpRoot_Administration\SM__CON_Boxes_MultiLanguage|Boxes that Have Multi-Language Support]. For details on how to turn on multilingual user input, see [HelpRoot_Administration\SM__CON_Locales_and_Languages#section_lqy_4c2_jw|Enabling Multilingual User Input].
==Specifying Localized Values of a Multi-Language Field==
When you need to specify localized values of a text box by using the contract-based REST API, you specify the value of the field that corresponds to the box as a string in JSON format with the localized values. In this string, you use the two-letter ISO code of the language with which the value should be associated.{br}

In the example that is mentioned at the beginning of the topic, if you need to specify values in English and French in the '''Description''' box on the [HelpRoot_FormReference\IN_20_25_00|Stock Items] form, you specify the value of the <tt>Description</tt> field of the <tt>StockItem</tt> entity in the following format: {{[{en:English description},{fr:French description}]}}. See below for an example of a stock item record with localized <tt>Description</tt> field values in JSON format. For details on how to pass the record to the service, see [HelpRoot_Dev_Integration\IS__con_REST_Create_Record|Creation of a Record] and [HelpRoot_Dev_Integration\IS__con_REST_Update_Record|Update of a Record].{{{{{
  "InventoryID" : {value : "BASESERV" } ,
  "Description" : {value : "[{en:Item},{fr:Pièce}]" } 
}
}}}}[anchor|#_ee65b7aa-3b30-47b8-afcc-029a68ae3977]((({S:Hint}In the JSON-formatted string, you should specify the actual values of the field in all languages that are configured for multilingual user input. If you specify the values of the field in particular languages, the values of the field in other languages configured for multilingual user input become empty. For example, suppose that in your instance of Acumatica ERP, multi-language fields can have values in English and French. If you pass the value of a field in the following format {{[{en:English description}]}}, the French value of the field becomes empty.
)))
If you specify the value of a multi-language field as plain text, this text is saved as the value of the corresponding box in the current language of Acumatica ERP (that is, the language that you specified when you logged in to Acumatica ERP). For details on how to specify the language on login through the contract-based REST API, see [HelpRoot_Dev_Integration\IS__con_REST_Login|Signing in to the Service].
==Retrieving Localized Values of a Multi-Language Field==
If you need to retrieve localized values of a text box that supports multiple input languages, you retrieve the value a special custom field that contains all localized values of the text box and has the ''Translations'' suffix in its field name. {br}

To find out the field name and the view name of the needed custom field with localized values, you find out the field name and the view name of the multi-language text box and append ''Translations'' to the field name. (For details on how to find out the field name and the view name of an element on the form, see [HelpRoot_Dev_Integration\IS__con_CB_Custom_Fields|Custom Fields].) For example, the multi-language '''Description''' box on the [HelpRoot_FormReference\IN_20_25_00|Stock Items] form has the ''Descr'' field name and the ''Item'' view name; therefore, the custom field that contains the localized descriptions of a stock item has the ''DescrTranslations'' field name and the ''Item'' view name. {br}

You obtain the value of the needed custom field by using the ''$custom'' parameter. For example, suppose that you need to obtain the localized values of the '''Description''' element of the [HelpRoot_FormReference\IN_20_25_00|Stock Items] form. In this case, you should use the following parameter string in the request URL: ''$custom=Item.DescrTranslations''. For details on how to retrieve a record, see [HelpRoot_Dev_Integration\IS__con_REST_Get_Record_by_Key|Retrieval of a Record by Key Fields] and [HelpRoot_Dev_Integration\IS__con_REST_Get_Records|Retrieval of Records by Conditions].{br}

The returned value of a <tt>Translations</tt> custom field is a string in JSON format with the available localized values of the field. The language to which the value belongs is identified by the two-letter ISO code of the language. For example, suppose that the '''Description''' element of the [HelpRoot_FormReference\IN_20_25_00|Stock Items] form has the value ''Item'' in English and ''Pièce'' in French. In this case, the value of the <tt>DescrTranslations</tt> custom field, which corresponds to the '''Description''' element, is the following string: {{[{en:Item},{fr:Pièce}]}}.
==Related Articles==
*[HelpRoot_Administration\SM__CON_Locales_and_Languages|Locales and Languages]
*[HelpRoot_Administration\SM__CON_Boxes_MultiLanguage|Boxes that Have Multi-Language Support]
*[HelpRoot_Dev_Integration\IS__con_CB_Custom_Fields|Custom Fields]]]></column>
			<column name="PlainText"><![CDATA[Multi-Language Fields For some text boxes on  Acumatica ERP forms, users can type values in multiple languages if multiple locales are                 configured in  Acumatica ERP. For example, if your  Acumatica ERP instance has English and French locales activated and multilingual user input                 configured, you can specify the value of the  Description  box                 on the   ([~/?ScreenId=IN202500|IN202500]) Stock Items                 (IN202500) form in English and French. For the list of elements that support                 multiple languages, see  Boxes that Have Multi-Language Support. For details on how to turn on multilingual user input, see  Enabling Multilingual User Input. Specifying Localized Values of a Multi-Language Field When you need to specify localized values of a text box by using the contract-based REST API,     you specify the value of the field that corresponds to the box as a string in JSON format with     the localized values. In this string, you use the two-letter ISO code of the language with which     the value should be associated. In the example that is mentioned at the beginning of the topic, if you need to specify values     in English and French in the  Description  box on the   ([~/?ScreenId=IN202500|IN202500]) Stock Items form, you specify the value of     the  Description  field of the  StockItem  entity in the     following format:  [{en:English description},{fr:French description}] . See below     for an example of a stock item record with localized  Description  field values     in JSON format. For details on how to pass the record to the service, see  Creation of a Record and  Update of a Record. {
  "InventoryID" : {value : "BASESERV" } ,
  "Description" : {value : "[{en:Item},{fr:Pièce}]" } 
} In the JSON-formatted string, you should specify             the actual values of the field in all languages that are configured for multilingual             user input. If you specify the values of the field in particular languages, the values             of the field in other languages configured for multilingual user input become empty. For             example, suppose that in your instance of  Acumatica ERP,             multi-language fields can have values in English and French. If you pass the value of a             field in the following format  [{en:English description}] , the French             value of the field becomes empty. If you specify the value of a multi-language field as plain text, this text is saved as the     value of the corresponding box in the current language of  Acumatica ERP     (that is, the language that you specified when you logged in to  Acumatica ERP).     For details on how to specify the language on login through the contract-based REST API, see       Signing in to the Service. Retrieving Localized Values of a Multi-Language Field If you need to retrieve localized values of a text box that supports multiple input languages,     you retrieve the value a special custom field that contains all localized values of the text box     and has the  Translations  suffix in its field name.  To find out the field name and the view name of the needed custom field with localized values,     you find out the field name and the view name of the multi-language text box and append       Translations  to the field name. (For details on how to find out the field name and the     view name of an element on the form, see  Custom Fields.) For example, the     multi-language  Description  box on the   ([~/?ScreenId=IN202500|IN202500]) Stock Items form has the  Descr  field     name and the  Item  view name; therefore, the custom field that contains the localized     descriptions of a stock item has the  DescrTranslations  field name and the  Item      view name.  You obtain the value of the needed custom field by using the  $custom  parameter. For     example, suppose that you need to obtain the localized values of the       Description  element of the   ([~/?ScreenId=IN202500|IN202500]) Stock Items form. In this case, you should     use the following parameter string in the request URL:      $custom=Item.DescrTranslations . For details on how to retrieve a record, see  Retrieval of a Record by Key Fields and  Retrieval of Records by Conditions. The returned value of a  Translations  custom field is a string in JSON     format with the available localized values of the field. The language to which the value belongs     is identified by the two-letter ISO code of the language. For example, suppose that the       Description  element of the   ([~/?ScreenId=IN202500|IN202500]) Stock Items form has the value  Item      in English and  Pièce  in French. In this case, the value of the       DescrTranslations  custom field, which corresponds to the       Description  element, is the following string:       [{en:Item},{fr:Pièce}] . ]]></column>
		</row>
		<row PageID="649a767a-619a-4b40-9f87-67a20cf19e43" Language="en-US" PageRevisionID="1" PlainText="Working with the Contract-Based SOAP API The contract-based SOAP application programming interface (API) of  Acumatica ERP     provides the SOAP interface of the  Acumatica ERP     contract-based web services through which external systems can get data records from  Acumatica ERP,     process these records, and save new or updated records to  Acumatica ERP.  This chapter includes the topics that are specific for the contract-based SOAP API. For     general information on the contract-based web services, see  Configuring the Contract-Based REST and SOAP API. You     can find examples of how to use the contract-based SOAP API in the  I210 Integration: Contract-Based Web Services I210 Integration: Contract-Based Web Services training     course and in  Contract-Based API Examples. For the API reference, see  Contract-Based SOAP API Reference. In This Chapter Multi-Language FieldsTo Configure the Client Application" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="93184411-d98d-5dd2-368e-59b7396f9177" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The contract-based SOAP application programming interface (API) of Acumatica ERP provides the SOAP interface of the Acumatica ERP contract-based web services through which external systems can get data records from Acumatica ERP, process these records, and save new or updated records to Acumatica ERP. {br}

This chapter includes the topics that are specific for the contract-based SOAP API. For general information on the contract-based web services, see [HelpRoot_Dev_Integration\IS__mng_Contract_Based_Web_Services|Configuring the Contract-Based REST and SOAP API]. You can find examples of how to use the contract-based SOAP API in the [https://openuni.acumatica.com/courses/integration/i210-contract-based-web-services/|I210 Integration: Contract-Based Web Services] training course and in [HelpRoot_Dev_Integration\IS__mng_CB_API_Examples|Contract-Based API Examples]. For the API reference, see [HelpRoot_Dev_Integration\IS__IS_CB_API_Reference|Contract-Based SOAP API Reference].
==In This Chapter==[anchor|#_3827f135-c708-4005-be49-e2ca0c5a55ef]
*[HelpRoot_Dev_Integration\IS__con_CB_Multi-Language_Fields|Multi-Language Fields]
*[HelpRoot_Dev_Integration\IS__how_CB_Configure_Application|To Configure the Client Application]
]]></column>
		</row>
		<row PageID="d8e9d040-e00a-4d41-b295-904f7951a572" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="bc6af7d2-8704-27d9-082c-62bd59ba2b3b" RecordSourceID="22377">
			<column name="Content"><![CDATA[[anchor|#_6c21601e-3f30-4f93-8c80-ee5ff369d9be]
For some text boxes on Acumatica ERP forms, users can type values in multiple languages if multiple locales are configured in Acumatica ERP. For example, if your Acumatica ERP instance has English and French locales activated and multilingual user input configured, you can specify the value of the '''Description''' box on the [HelpRoot_FormReference\IN_20_25_00|Stock Items] ([~/?ScreenId=IN202500|IN202500]) form in English and French. For the list of elements that support multiple languages, see [HelpRoot_Administration\SM__CON_Boxes_MultiLanguage|Boxes that Have Multi-Language Support]. For details on how to turn on multilingual user input, see [HelpRoot_Administration\SM__CON_Locales_and_Languages#section_lqy_4c2_jw|Enabling Multilingual User Input].
==Specifying Localized Values of a Multi-Language Field==
When you need to specify localized values of a text box by using the contract-based SOAP API, you specify the value of the field that corresponds to the box as a string in JSON format with the localized values. In this string, you use the two-letter ISO code of the language with which the value should be associated.{br}

In the example that is mentioned at the beginning of the topic, if you need to specify values in English and French in the '''Description''' box on the [HelpRoot_FormReference\IN_20_25_00|Stock Items] form, you specify the value of the <tt>Description</tt> field of the <tt>StockItem</tt> entity in the following format: {{[{en:English description},{fr:French description}]}}, as shown in the following code fragment.<source lang="csharp">public static void CreateStockItem(DefaultSoapClient soapClient)
{
    //Specify the values of the new stock item
    StockItem stockItemToBeCreated = new StockItem
    {
        InventoryID = new StringValue { Value = "BASESERV" },
        Description = new StringValue { Value = "[{en:Item},{fr:Pièce}]" },
        ItemClass = new StringValue { Value = "STOCKITEM" },
    };
    //Create a stock item with the specified values
    StockItem newStockItem = (StockItem)soapClient.Put(stockItemToBeCreated);
}</source>[anchor|#_77dc7c6e-7181-4bab-93ee-e896e73d6e6a]((({S:Hint}In the JSON-formatted string, you should specify the actual values of the field in all languages that are configured for multilingual user input. If you specify the values of the field in particular languages, the values of the field in other languages configured for multilingual user input become empty. For example, suppose that in your instance of Acumatica ERP, multi-language fields can have values in English and French. If you pass the value of a field in the following format {{[{en:English description}]}}, the French value of the field becomes empty.
)))
If you specify the value of a multi-language field as plain text, this text is saved as the value of the corresponding box in the current language of Acumatica ERP (that is, the language that you specified when you logged in to Acumatica ERP). For details on how to specify the language on login through the contract-based SOAP API, see [HelpRoot_Dev_Integration\IS__con_CB_Login|Login() Method].
==Retrieving Localized Values of a Multi-Language Field==
If you need to retrieve localized values of a text box that supports multiple input languages, you retrieve the value of a special custom field that contains all localized values of the text box and has the ''Translations'' suffix in its field name. {br}

To find out the field name and the view name of the needed custom field with localized values, you find out the field name and the view name of the multi-language text box and append ''Translations'' to the field name. (For details on how to find out the field name and the view name of an element on the form, see [HelpRoot_Dev_Integration\IS__con_CB_Custom_Fields|Custom Fields].) For example, the multi-language '''Description''' box on the [HelpRoot_FormReference\IN_20_25_00|Stock Items] form has the ''Descr'' field name and the ''Item'' view name; therefore, the custom field that contains the localized descriptions of a stock item has the ''DescrTranslations'' field name and the ''Item'' view name. {br}

The following code shows how to retrieve the localized values of the '''Description''' element of the [HelpRoot_FormReference\IN_20_25_00|Stock Items] form. (The code below uses Contract Version 2.){{{{public static void ExportStockItem(DefaultSoapClient soapClient)
{
    StockItem stockItem = new StockItem
    {
        InventoryID = new StringValue { Value = "BASESERV" },
        //Specify the localized values to be returned
        CustomFields = new[]
        {
          new CustomStringField
          {
            fieldName = "DescrTranslations",
            viewName = "Item",
            Value = new StringReturn(),
          }
        }
    };
    //Retrieve the stock item record
    StockItem stockItemToRetrieve = (StockItem)client.Get(stockItem);
}
}}}}{br}

The returned value of a <tt>Translations</tt> custom field is a string in JSON format with the available localized values of the field. The language to which the value belongs is identified by the two-letter ISO code of the language. For example, suppose that the '''Description''' element of the [HelpRoot_FormReference\IN_20_25_00|Stock Items] form has the value ''Item'' in English and ''Pièce'' in French. In this case, the value of the <tt>DescrTranslations</tt> custom field, which corresponds to the '''Description''' element, is the following string: {{[{en:Item},{fr:Pièce}]}}.
==Related Articles==
*[HelpRoot_Administration\SM__CON_Locales_and_Languages|Locales and Languages]
*[HelpRoot_Administration\SM__CON_Boxes_MultiLanguage|Boxes that Have Multi-Language Support]
*[HelpRoot_Dev_Integration\IS__con_CB_Custom_Fields|Custom Fields]]]></column>
			<column name="PlainText"><![CDATA[Multi-Language Fields For some text boxes on  Acumatica ERP forms, users can type values in multiple languages if multiple locales are                 configured in  Acumatica ERP. For example, if your  Acumatica ERP instance has English and French locales activated and multilingual user input                 configured, you can specify the value of the  Description  box                 on the   ([~/?ScreenId=IN202500|IN202500]) Stock Items                 (IN202500) form in English and French. For the list of elements that support                 multiple languages, see  Boxes that Have Multi-Language Support. For details on how to turn on multilingual user input, see  Enabling Multilingual User Input. Specifying Localized Values of a Multi-Language Field When you need to specify localized values of a text box by using the contract-based                 SOAP API, you specify the value of the field that corresponds to the box as a string                 in JSON format with the localized values. In this string, you use the two-letter ISO                 code of the language with which the value should be associated. In the example that is mentioned at the beginning of the topic, if you need to                 specify values in English and French in the  Description  box                 on the   ([~/?ScreenId=IN202500|IN202500]) Stock Items form,                 you specify the value of the  Description  field of the                      StockItem  entity in the following format:                      [{en:English description},{fr:French description}] , as shown in                 the following code                 fragment. public static void CreateStockItem(DefaultSoapClient soapClient)
{
    //Specify the values of the new stock item
    StockItem stockItemToBeCreated = new StockItem
    {
        InventoryID = new StringValue { Value = "BASESERV" },
        Description = new StringValue { Value = "[{en:Item},{fr:Pièce}]" },
        ItemClass = new StringValue { Value = "STOCKITEM" },
    };
    //Create a stock item with the specified values
    StockItem newStockItem = (StockItem)soapClient.Put(stockItemToBeCreated);
} In the JSON-formatted string, you should specify             the actual values of the field in all languages that are configured for multilingual             user input. If you specify the values of the field in particular languages, the values             of the field in other languages configured for multilingual user input become empty. For             example, suppose that in your instance of  Acumatica ERP,             multi-language fields can have values in English and French. If you pass the value of a             field in the following format  [{en:English description}] , the French             value of the field becomes empty. If you specify the value of a multi-language field as plain text, this text is saved                 as the value of the corresponding box in the current language of  Acumatica ERP (that is, the language that you specified when you logged in to  Acumatica ERP). For details on how to specify the language on login through the contract-based                 SOAP API, see  Login() Method. Retrieving Localized Values of a Multi-Language Field If you need to retrieve localized values of a text box that supports multiple input                 languages, you retrieve the value of a special custom field that contains all                 localized values of the text box and has the  Translations  suffix in its field                 name.  To find out the field name and the view name of the needed custom field with                 localized values, you find out the field name and the view name of the                 multi-language text box and append  Translations  to the field name. (For                 details on how to find out the field name and the view name of an element on the                 form, see  Custom Fields.)                 For example, the multi-language  Description  box on the   ([~/?ScreenId=IN202500|IN202500]) Stock Items form has the                      Descr  field name and the  Item  view name; therefore, the custom                 field that contains the localized descriptions of a stock item has the                      DescrTranslations  field name and the  Item  view name.  The following code shows how to retrieve the localized values of the                      Description  element of the   ([~/?ScreenId=IN202500|IN202500]) Stock Items form. (The code                 below uses Contract Version                 2.) public static void ExportStockItem(DefaultSoapClient soapClient)
{
    StockItem stockItem = new StockItem
    {
        InventoryID = new StringValue { Value = "BASESERV" },
        //Specify the localized values to be returned
        CustomFields = new[]
        {
          new CustomStringField
          {
            fieldName = "DescrTranslations",
            viewName = "Item",
            Value = new StringReturn(),
          }
        }
    };
    //Retrieve the stock item record
    StockItem stockItemToRetrieve = (StockItem)client.Get(stockItem);
} The returned value of a  Translations  custom field is a string in                 JSON format with the available localized values of the field. The language to which                 the value belongs is identified by the two-letter ISO code of the language. For                 example, suppose that the  Description  element of the   ([~/?ScreenId=IN202500|IN202500]) Stock Items form has the                 value  Item  in English and  Pièce  in French. In this case, the value of                 the  DescrTranslations  custom field, which corresponds to the                      Description  element, is the following string:                      [{en:Item},{fr:Pièce}] . ]]></column>
		</row>
		<row PageID="37613e5f-7a72-4dec-b5d9-2525951e99cf" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="dbe04b0e-c249-05fe-c342-e718890ae0e2" RecordSourceID="22377">
			<column name="Content"><![CDATA[
In this topic, you will learn how to import the WSDL description of the Acumatica ERP web services into a Visual Studio project. Do the following:[anchor|#ol_udr_djt_vs]
#In Visual Studio, create a new application. 
#:((({S:Hint}To create a new application, select '''File''' > '''New''' > '''Project''' in the menu. In the '''New Project''' dialog box that appears, select the needed template, specify the name and location of the application, and click '''OK'''.
)))
#Add to the project a reference to the Acumatica ERP web service as follows: 
##In the menu, select '''Project''' > '''Add Service Reference'''. 
##In the '''Address''' box of the '''Add Service Reference''' dialog box, which appears, specify the URL of the needed endpoint (see item 1 in the following screenshot). 
##:((({S:Hint}To get the URL of the service, on the [HelpRoot_FormReference\SM_20_70_60|Web Service Endpoints] ([~/?ScreenId=SM207060|SM207060]) form, select the name of the endpoint contract in the '''Endpoint Name''' box and the version of the contract in the '''Endpoint Version''' box, click '''View Endpoint Service''' > '''WSDL''' on the form toolbar, and copy the URL from the address line in the browser for the page that opens. For example, the URL of the ''Default'' endpoint of the version ''17.200.001'' is {{https://localhost/WebServiceAPITest/entity/Default/17.200.001?wsdl}}.
)))
##Click '''Go''' (item 2 in the screenshot) to make Visual Studio connect to the web service.
##:((({S:Hint}If your Acumatica ERP website uses a self-signed certificate, Visual Studio displays security alert windows with warnings on the certificate. Click '''Yes''' in these windows to proceed.
)))
##In the '''Namespace''' box, type the name of the namespace for the web service classes generated by Visual Studio based on the WSDL description of the service, such as <tt>Default</tt> (3). 
##Click '''OK''' (4) to add to the project the reference to the specified service.[anchor|#_e72e1fcd-be44-45d5-9633-506b7e0d6b04][image:UserGuide/Images/CB_AddServiceReference.png|popup|Add Service Reference dialog box|350px]
##:Visual Studio adds to the project the service reference in the <tt>Service References</tt> folder, as shown in the following screenshot.[anchor|#fig_dht_z5v_gt][anchor|#_35628ef1-3e09-4482-8e93-41afa1196fda][image:UserGuide/Images/CB_ServiceReferenceInSolutionExplorer.png|popup|Solution Explorer|150px]
#Modify the <tt>app.config</tt> file of the project as shown below. Cookies are required for the client application to log in to Acumatica ERP. The security mode {{Transport}} indicates that API calls to Acumatica ERP will be made through HTTPS (which is the recommended approach).<source lang="xml">&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;configuration&gt;
  ...
  &lt;system.serviceModel&gt;
    &lt;bindings&gt;
      &lt;basicHttpBinding&gt;
        &lt;binding name="Acumatica" allowCookies="true" 
         maxReceivedMessageSize="6553600"&gt;
          &lt;security mode="Transport" /&gt;
        &lt;/binding&gt;
        ...
      &lt;/basicHttpBinding&gt;
    &lt;/bindings&gt;
    &lt;client&gt;
      &lt;endpoint address=
       "https://localhost/WebServiceAPITest/entity/Default/17.200.001"
       binding="basicHttpBinding" bindingConfiguration="Acumatica"
       contract="Default.DefaultSoap" name="DefaultSoap" /&gt;
    &lt;/client&gt;
  &lt;/system.serviceModel&gt;
&lt;/configuration&gt;</source>
#:((({S:Hint}You can make API calls to Acumatica ERP through HTTP if requirements to your application do not include secure data transfer between the application and Acumatica ERP. If you do not need to use HTTPS, you can use the configuration shown below in the <tt>app.config</tt> file. Notice that you use the HTTP address of the endpoint instead of HTTPS address. The {{security}} tag is not used for HTTP connection.<source lang="xml">&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;configuration&gt;
  ...
  &lt;system.serviceModel&gt;
    &lt;bindings&gt;
      &lt;basicHttpBinding&gt;
        &lt;binding name="Acumatica" allowCookies="true" 
         maxReceivedMessageSize="6553600"&gt;
        &lt;/binding&gt;
      &lt;/basicHttpBinding&gt;
    &lt;/bindings&gt;
    &lt;client&gt;
      &lt;endpoint address=
       "http://localhost/WebServiceAPITest/entity/Default/17.200.001"
       binding="basicHttpBinding" bindingConfiguration="Acumatica"
       contract="Default.DefaultSoap" name="DefaultSoap" /&gt;
    &lt;/client&gt;
  &lt;/system.serviceModel&gt;
&lt;/configuration&gt;</source>
)))
#Rebuild the project.
{br}

You have created a Visual Studio application and added to it the reference to the Acumatica ERP web service. Now you can start developing your application. For the description of the SOAP API methods, see [HelpRoot_Dev_Integration\IS__IS_CB_API_Reference|Contract-Based SOAP API Reference].
==Related Articles==
*[HelpRoot_Dev_Integration\IS__IS_CB_API_Reference|Contract-Based SOAP API Reference]]]></column>
			<column name="PlainText"><![CDATA[To Configure the Client Application In this topic, you will learn how to import the WSDL description of the  Acumatica ERP web services into a Visual Studio project. Do the following: In Visual Studio, create a new application.  To create a new                             application, select  File New Project  in the menu. In the  New Project                              dialog box that appears, select the needed template, specify the name                             and location of the application, and click                              OK . Add to the project a reference to the  Acumatica ERP web service as follows:  In the menu, select  Project Add Service Reference .  In the  Address  box of the  Add                                     Service Reference  dialog box, which appears, specify                                 the URL of the needed endpoint (see item 1 in the following                                 screenshot).  To get the URL of the service, on the   ([~/?ScreenId=SM207060|SM207060]) Web Service Endpoints (SM207060) form,                                     select the name of the endpoint contract in the                                          Endpoint Name  box and the version of                                     the contract in the  Endpoint Version  box,                                     click  View Endpoint Service WSDL  on the form toolbar, and copy the URL from the                                     address line in the browser for the page that opens. For                                     example, the URL of the  Default  endpoint of the version                                          17.200.001  is                                          https://localhost/WebServiceAPITest/entity/Default/17.200.001?wsdl . Click  Go  (item 2 in the screenshot) to make                                 Visual Studio connect to the web service. If your  Acumatica ERP website uses a self-signed certificate, Visual Studio                                     displays security alert windows with warnings on the                                     certificate. Click  Yes  in these windows                                     to proceed. In the  Namespace  box, type the name of the                                 namespace for the web service classes generated by Visual Studio                                 based on the WSDL description of the service, such as                                      Default  (3).  Click  OK  (4) to add to the project the                                 reference to the specified service. Add Service Reference dialog box Visual Studio adds to the project the service reference in                                     the  Service References  folder, as shown in                                     the following screenshot. Solution Explorer Modify the  app.config  file of the project as shown                         below. Cookies are required for the client application to log in to  Acumatica ERP. The security mode  Transport  indicates that API calls to                              Acumatica ERP will be made through HTTPS (which is the recommended                             approach). <?xml version="1.0" encoding="utf-8" ?>
<configuration>
  ...
  <system.serviceModel>
    <bindings>
      <basicHttpBinding>
        <binding name="Acumatica" allowCookies="true" 
         maxReceivedMessageSize="6553600">
          <security mode="Transport" />
        </binding>
        ...
      </basicHttpBinding>
    </bindings>
    <client>
      <endpoint address=
       "https://localhost/WebServiceAPITest/entity/Default/17.200.001"
       binding="basicHttpBinding" bindingConfiguration="Acumatica"
       contract="Default.DefaultSoap" name="DefaultSoap" />
    </client>
  </system.serviceModel>
</configuration> You                             can make API calls to  Acumatica ERP through HTTP if requirements to your application do not include                             secure data transfer between the application and  Acumatica ERP. If you do not need to use HTTPS, you can use the configuration shown                             below in the  app.config  file. Notice that you use                             the HTTP address of the endpoint instead of HTTPS address. The                                  security  tag is not used for HTTP                             connection. <?xml version="1.0" encoding="utf-8" ?>
<configuration>
  ...
  <system.serviceModel>
    <bindings>
      <basicHttpBinding>
        <binding name="Acumatica" allowCookies="true" 
         maxReceivedMessageSize="6553600">
        </binding>
      </basicHttpBinding>
    </bindings>
    <client>
      <endpoint address=
       "http://localhost/WebServiceAPITest/entity/Default/17.200.001"
       binding="basicHttpBinding" bindingConfiguration="Acumatica"
       contract="Default.DefaultSoap" name="DefaultSoap" />
    </client>
  </system.serviceModel>
</configuration> Rebuild the project. You have created a Visual Studio application and added to it the reference to the  Acumatica ERP web service. Now you can start developing your application. For the description                 of the SOAP API methods, see  Contract-Based SOAP API Reference. ]]></column>
		</row>
		<row PageID="c8806b6b-af5c-4c29-9112-b611bd08257e" Language="en-US" PageRevisionID="1" Content="&#xA;The screen-based SOAP API of Acumatica ERP provides the SOAP interface of the Acumatica ERP contract-based web services through which external systems can get data records from Acumatica ERP, process these records, and save new or updated records to Acumatica ERP. &#xA;==In This Chapter==[anchor|#_2ad01600-d264-4ed7-83dc-b9be35cee448]&#xA;*[HelpRoot_Dev_Integration\IS__con_SB_API|Screen-Based Web Services API]&#xA;*[HelpRoot_Dev_Integration\IS__con_SB_API_Objects|API Objects Related to Acumatica ERP Forms]&#xA;*[HelpRoot_Dev_Integration\IS__con_Screen-Based_API_Wrapper|Screen-Based API Wrapper]&#xA;*[HelpRoot_Dev_Integration\IS__how_Generate_SB_WSDL|To Generate the WSDL File of the Web Services]&#xA;*[HelpRoot_Dev_Integration\IS__how_Import_SB_WSDL_To_Development_Environment|To Import the WSDL File Into the Development Environment]&#xA;*[HelpRoot_Dev_Integration\IS__how_Prevent_Breaking_Changes|To Use the Screen-Based API Wrapper]&#xA;" PlainText="Working with the Screen-Based SOAP API The screen-based SOAP API of  Acumatica ERP     provides the SOAP interface of the  Acumatica ERP     contract-based web services through which external systems can get data records from  Acumatica ERP,     process these records, and save new or updated records to  Acumatica ERP.     In This Chapter Screen-Based Web Services APIAPI Objects Related to Acumatica ERP FormsScreen-Based API WrapperTo Generate the WSDL File of the Web ServicesTo Import the WSDL File Into the Development EnvironmentTo Use the Screen-Based API Wrapper" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="97c85920-b9ff-4da9-b8dd-509f90aa7918" RecordSourceID="22377" />
		<row PageID="b7a98ec4-46c2-4a27-9687-c36c6d22a678" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="075ee5cf-db35-11f3-796d-242a6042c386" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The screen-based web services API is a part of Acumatica ERP integration services, which provides integration with external data sources and third-party systems by using a SOAP interface. {br}

External applications and systems that use the Acumatica ERP web services API can access the data managed by Acumatica ERP and the business functionality of Acumatica ERP. For example, you can integrate Acumatica ERP with eCommerce or an online store system, so that an external system pushes all information about customers, sales orders, and payments to Acumatica ERP, and Acumatica ERP provides information on the availability of stock items and processes all incoming data. {br}

The screen-based web services API works with Acumatica ERP forms. That is, it provides API objects and methods for working with elements on Acumatica ERP forms. {br}

To upload data to and from Acumatica ERP by using the screen-based web services API, you define the sequence of commands for the system to work with elements on an Acumatica ERP form. This sequence of commands reflects the sequence of actions to be executed for a data record as if the record is being manipulated by a user through an Acumatica ERP form. That is, when you enter data into the system manually, you perform a sequence of actions. You open the needed data entry form and start entering data. As you add a new record, you use the UI elements one by one—you type text, select values from combo boxes, clear or select check boxes, and click buttons. In the sequence of commands for the web services, you compose exactly the same sequence of actions by specifying a command for each user action on the form. For more information on the commands you can use, see [HelpRoot_Dev_Integration\IS__mng_Screen-Based_API_Commands|Working with Commands of the Screen-Based SOAP API].((({S:Hint}This sequence of commands is similar to the sequence of commands you configure when you create import and export scenarios. You can find more information on import and export scenarios in [HelpRoot_Integration\IS__mng_Configuring_Import_Scenarios|Configuring Import Scenarios] and [HelpRoot_Integration\IS__mng_Configuring_Export_Scenarios|Configuring Export Scenarios].
))){br}

To use screen-based web services API in your application, you should generate the WSDL file of the web service, as described in [HelpRoot_Dev_Integration\IS__how_Generate_SB_WSDL|To Generate the WSDL File of the Web Services], and import this file to your development project as described in [HelpRoot_Dev_Integration\IS__how_Import_SB_WSDL_To_Development_Environment|To Import the WSDL File Into the Development Environment]. After that, you can start developing your application. You can find the description of the API methods in [HelpRoot_Dev_Integration\IS__IS_SB_API_Reference|Screen-Based SOAP API Reference].You can find more details on screen-based web services API and examples of use of the API in the I200 Screen-Based Web Services training course.
==Related Articles==
*[HelpRoot_Dev_Integration\IS__con_SB_API_Objects|API Objects Related to Acumatica ERP Forms]
*[HelpRoot_Dev_Integration\IS__IS_SB_API_Reference|Screen-Based SOAP API Reference]]]></column>
			<column name="PlainText"><![CDATA[Screen-Based Web Services API The screen-based web services API is a part of  Acumatica ERP     integration services, which provides integration with external data sources and third-party     systems by using a SOAP interface.  External applications and systems that use the  Acumatica ERP     web services API can access the data managed by  Acumatica ERP     and the business functionality of  Acumatica ERP.     For example, you can integrate  Acumatica ERP     with eCommerce or an online store system, so that an external system pushes all information     about customers, sales orders, and payments to  Acumatica ERP,     and  Acumatica ERP     provides information on the availability of stock items and processes all incoming data.  The screen-based web services API works with  Acumatica ERP     forms. That is, it provides API objects and methods for working with elements on  Acumatica ERP     forms.  To upload data to and from  Acumatica ERP     by using the screen-based web services API, you define the sequence of commands for the system     to work with elements on an  Acumatica ERP     form. This sequence of commands reflects the sequence of actions to be executed for a data     record as if the record is being manipulated by a user through an  Acumatica ERP     form. That is, when you enter data into the system manually, you perform a sequence of actions.     You open the needed data entry form and start entering data. As you add a new record, you use     the UI elements one by one—you type text, select values from combo boxes, clear or select check     boxes, and click buttons. In the sequence of commands for the web services, you compose exactly     the same sequence of actions by specifying a command for each user action on the form. For more     information on the commands you can use, see  Working with Commands of the Screen-Based SOAP API. This sequence of commands is similar to the sequence of commands you configure when      you create import and export scenarios. You can find more information on import and export      scenarios in  Configuring Import Scenarios and        Configuring Export Scenarios. To use screen-based web services API in your application, you should generate the WSDL file of     the web service, as described in  To Generate the WSDL File of the Web Services, and import this     file to your development project as described in  To Import the WSDL File Into the Development Environment. After that, you can start developing your application. You can find the description of the     API methods in  Screen-Based SOAP API Reference. You can find more details on screen-based web services API and examples of use of the API    in the I200 Screen-Based Web Services training course. ]]></column>
		</row>
		<row PageID="ac01ace2-7c84-41fd-a4cc-e2202ccbf542" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="61489def-78b7-3ca5-347e-6efd91704e54" RecordSourceID="22377">
			<column name="Content"><![CDATA[The main object, which provides access to all other objects and methods of the Acumatica ERP web services API, is a <tt>Screen</tt> object. By using the methods of a <tt>Screen</tt> object, you can log in to Acumatica ERP and retrieve, insert, update, and delete data. You can also use the methods to perform any actions that are exposed by Acumatica ERP forms available through the web service. {br}{TOC}
==Screen Object==
After you have logged in to Acumatica ERP by using the web services API, you can access data on Acumatica ERP forms available through the web service. The <tt>Screen</tt> class provides the same set of API methods for working with all Acumatica ERP forms available through the service. You can find out which form a method accesses by noting the prefix in the name of the method, which is the form ID. For example, the <tt>Export()</tt> method that you use to export data from the [HelpRoot_FormReference\IN_20_25_00|Stock Items] ([~/?ScreenId=IN202500|IN202500]) form is <tt>IN202500Export()</tt>.
==Content Object==
To get the description of the structure (schema) of a form, you should use the <tt>GetSchema()</tt> method of the <tt>Screen</tt> object. This method is specific for each Acumatica ERP form, and you should use the method with the ID of the needed form in the prefix of the method name. The method returns the schema of the form as the corresponding <tt>Content</tt> object, which is specific for each form. For example, to get the schema of the [HelpRoot_FormReference\IN_20_25_00|Stock Items] form, you should call the <tt>IN202500GetSchema()</tt> method of the <tt>Screen</tt> object. You will receive the result as a <tt>IN202500Content</tt> object, as the following code shows.<source lang="csharp">Screen context = new Screen();
...
IN202500Content stockItemsSchema = context.IN202500GetSchema();</source>
==Command Object==
By using subobjects of a <tt>Content</tt> object, you configure the sequence of commands that should be executed during data import, data export, or data processing through the web service. You configure the sequence of commands inside an array of objects of the <tt>Command</tt> type. When you are reflecting the selection of an element on a form in the sequence of commands, you have to select the object of the Acumatica ERP form whose element you want to access. The objects that are available inside a <tt>Content</tt> object have names that are similar to the names of the UI elements that you see on the form and have the ID of the form as a prefix. {br}

For example, to be able to select the '''Item Class''' element, which is located in the '''Item Defaults''' group on the '''General Settings''' tab of the [HelpRoot_FormReference\IN_20_25_00|Stock Items] form (shown in the following screenshot), you would select the <tt>GeneralSettingsItemDefaults</tt> property of the <tt>IN202500Content</tt> object. This property provides access to the <tt>IN202500GeneralSettingsItemDefaults</tt> object, which includes the <tt>ItemClass</tt> property. {br}

Each element on an Acumatica ERP form (such as a text box, combo box, or table column) is associated with a particular web services API class and is available through corresponding property of this class. The property has a similar name to that of the corresponding box on the form, such as <tt>ItemClass</tt>, as the following screenshot shows.[anchor|#fig_rgx_j5c_xs][anchor|#image_x31_w5c_xs][image:UserGuide/Images/WS_Objects.png|popup|API object on an Acumatica ERP form |450px]{br}

The following code shows an example of configuring a list of commands for the [HelpRoot_FormReference\IN_20_25_00|Stock Items] form inside an array of <tt>Command</tt> objects. <source lang="csharp">//stockItemsSchema is a IN202500Content object
var commands = new Command[]
{
    stockItemsSchema.StockItemSummary.ServiceCommands.EveryInventoryID,
    stockItemsSchema.StockItemSummary.InventoryID,
    stockItemsSchema.StockItemSummary.Description,
    stockItemsSchema.GeneralSettingsItemDefaults.ItemClass,
    stockItemsSchema.GeneralSettingsUnitOfMeasureBaseUnit.BaseUnit
};</source>{br}

For more information on the commands, see [HelpRoot_Dev_Integration\IS__mng_Screen-Based_API_Commands|Working with Commands of the Screen-Based SOAP API].
==Actions Object==
To insert an action to a sequence of commands, such as clicking a button, you use the corresponding property of the special API object <tt>Actions</tt> (which has a prefix with the ID of the form in the name). The <tt>Actions</tt> object is available through the <tt>Actions</tt> property of the <tt>Content</tt> object that corresponds to the form. The properties of the <tt>Actions</tt> object have names that are similar to the names of corresponding buttons on the form, such as <tt>Delete</tt>.{br}

You can view the classes available through the web services API by using Object Browser in Visual Studio.
==Related Articles==
*[HelpRoot_Dev_Integration\IS__mng_Screen-Based_API_Commands|Working with Commands of the Screen-Based SOAP API]]]></column>
			<column name="PlainText"><![CDATA[API Objects Related to  Acumatica ERP   Forms The main object, which provides access to all other objects and    methods of the  Acumatica ERP    web services API, is a  Screen  object. By using the methods of a      Screen  object, you can log in to  Acumatica ERP    and retrieve, insert, update, and delete data. You can also use the methods to perform any    actions that are exposed by  Acumatica ERP    forms available through the web service.  Screen Object After you have logged in to  Acumatica ERP     by using the web services API, you can access data on  Acumatica ERP     forms available through the web service. The  Screen  class provides the same     set of API methods for working with all  Acumatica ERP     forms available through the service. You can find out which form a method accesses by noting the     prefix in the name of the method, which is the form ID. For example, the       Export()  method that you use to export data from the   ([~/?ScreenId=IN202500|IN202500]) Stock Items (IN202500) form is       IN202500Export() . Content Object To get the description of the structure (schema) of a form, you should use the       GetSchema()  method of the  Screen  object. This method is     specific for each  Acumatica ERP     form, and you should use the method with the ID of the needed form in the prefix of the method     name. The method returns the schema of the form as the corresponding  Content      object, which is specific for each form. For example, to get the schema of the   ([~/?ScreenId=IN202500|IN202500]) Stock Items form, you should call the       IN202500GetSchema()  method of the  Screen  object. You will     receive the result as a  IN202500Content  object, as the following code     shows. Screen context = new Screen();
...
IN202500Content stockItemsSchema = context.IN202500GetSchema(); Command Object By using subobjects of a  Content  object, you configure the sequence of     commands that should be executed during data import, data export, or data processing through the     web service. You configure the sequence of commands inside an array of objects of the       Command  type. When you are reflecting the selection of an element on a form     in the sequence of commands, you have to select the object of the  Acumatica ERP     form whose element you want to access. The objects that are available inside a       Content  object have names that are similar to the names of the UI elements     that you see on the form and have the ID of the form as a prefix.  For example, to be able to select the  Item Class  element, which is     located in the  Item Defaults  group on the  General      Settings  tab of the   ([~/?ScreenId=IN202500|IN202500]) Stock Items form (shown in     the following screenshot), you would select the  GeneralSettingsItemDefaults      property of the  IN202500Content  object. This property provides access to the       IN202500GeneralSettingsItemDefaults  object, which includes the       ItemClass  property.  Each element on an  Acumatica ERP     form (such as a text box, combo box, or table column) is associated with a particular web     services API class and is available through corresponding property of this class. The property     has a similar name to that of the corresponding box on the form, such as       ItemClass , as the following screenshot shows. API object on an  Acumatica ERP       form  The following code shows an example of configuring a list of commands for the   ([~/?ScreenId=IN202500|IN202500]) Stock Items form inside an array of  Command      objects.      //stockItemsSchema is a IN202500Content object
var commands = new Command[]
{
    stockItemsSchema.StockItemSummary.ServiceCommands.EveryInventoryID,
    stockItemsSchema.StockItemSummary.InventoryID,
    stockItemsSchema.StockItemSummary.Description,
    stockItemsSchema.GeneralSettingsItemDefaults.ItemClass,
    stockItemsSchema.GeneralSettingsUnitOfMeasureBaseUnit.BaseUnit
}; For more information on the commands, see  Working with Commands of the Screen-Based SOAP API. Actions Object To insert an action to a sequence of commands, such as clicking a button, you use the     corresponding property of the special API object  Actions  (which has a prefix     with the ID of the form in the name). The  Actions  object is available through     the  Actions  property of the  Content  object that     corresponds to the form. The properties of the  Actions  object have names that     are similar to the names of corresponding buttons on the form, such as      Delete . You can view the classes available through the web services API by using Object Browser in     Visual Studio. ]]></column>
		</row>
		<row PageID="37c6db0a-8233-4f07-b496-d84a0e00fcfc" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="0747fa94-bedb-9cb8-3a32-1201ebd55d16" RecordSourceID="22377">
			<column name="Content"><![CDATA[
Because of the connection of the screen-based SOAP API with Acumatica ERP forms, the applications that are developed based on this API are sensitive to the UI changes in the system. That is, any changes made to the UI after the application is created require the application to be updated and recompiled. If you want your application to not depend on the UI changes in the system, you should use the screen-based API wrapper, which is described in this topic.{br}{TOC}
==How a Client Application Based on the Screen-Based API Works==
A client application that uses the screen-based web services API includes the WSDL description of the service, which contains the API elements that the application can use to work with the service. The API elements have names that are similar to the names of the elements in the UI of Acumatica ERP. For example, the '''Customer ID''' element of the [HelpRoot_FormReference\AR_30_30_00|Customers] ([~/?ScreenId=AR303000|AR303000]) form corresponds to the <tt>Customer.CustomerSummary.CustomerID</tt> property. {br}

When the application calls the <tt>Screen.GetSchema()</tt> method, it retrieves from Acumatica ERP the schema of an Acumatica ERP form. The schema of the form is a <tt>Content</tt> object, which defines the correspondence between the API elements and the internal data fields that are used for operations with data by Acumatica ERP. If something has been changed in the schema of an Acumatica ERP form, the <tt>Content</tt> object that is returned by the <tt>Screen.GetSchema()</tt> method contains a different correspondence between the API elements and internal data fields than the correspondence for which the application is compiled, and the application fails. {br}

For example, suppose that a client application requests the customer ID by the <tt>Customer.CustomerSummary.CustomerID</tt> property. Suppose also that in an update of Acumatica ERP, the '''Customer ID''' element of the [HelpRoot_FormReference\AR_30_30_00|Customers] form was renamed to '''Customer''', and therefore it should be requested by using the <tt>Customer.CustomerSummary.Customer</tt> property from the API. The client application requests the customer ID by using the <tt>Customer.CustomerSummary.CustomerID</tt> property and fails.
==What the Screen-Based API Wrapper Is==
The screen-based API wrapper is a special wrapper designed to prevent the UI changes in the system from causing application failure. The wrapper works with any changes in the schema of an Acumatica ERP form. That is, the wrapper makes the application work regardless of the changes in the names of UI elements and the changes in the internal names of data fields and objects. {br}

The wrapper is distributed as the <tt>PX.Soap.dll</tt> file, which is installed automatically during Acumatica ERP installation. You can find the <tt>PX.Soap.dll</tt> file in the <tt>ScreenBasedAPIWrapper</tt> folder of your Acumatica ERP installation folder. {br}

The <tt>PX.Soap</tt> library, which the wrapper provides, includes the <tt>Helper.GetSchema()</tt> method, which you should use instead of the <tt>Screen.GetSchema()</tt> method of the screen-based web services API. For information on how to use the screen-based API wrapper, see [HelpRoot_Dev_Integration\IS__how_Prevent_Breaking_Changes|To Use the Screen-Based API Wrapper].
==How the Screen-Based API Wrapper Works==
When the client application is executed for the first time and requests the schema of an Acumatica ERP form by using the <tt>Helper.GetSchema()</tt> method, the wrapper requests the schema from the Acumatica ERP screen-based web service by using the <tt>Screen.GetSchema()</tt> method of the screen-based API. The web service interacts with the Acumatica ERP import and export engine and returns the current schema of the form. The wrapper saves the schema in an XML file and returns the schema to the client application as a <tt>Content</tt> object. The client application uses this schema to work with Acumatica ERP. ((({S:Hint}Instead of the <tt>Helper.GetSchema()</tt> method you can use the <tt>Helper.ReuseStoredSchema()</tt> method to upload a schema that was saved earlier by the wrapper. 
))){br}

The following diagram illustrates the way the screen-based API wrapper works during the first execution of a client application.[anchor|#_a77c6a21-ef3d-46b4-b955-2961b0275eba][anchor|#_d94497cf-2175-4cf2-a244-a1afaa8cc805][image:UserGuide/Images/Screen_Based_API_Wrapper_1.png|popup|First execution of an application|450px]{br}

When the client application is executed for the second time and all subsequent times and it requests the schema of an Acumatica ERP form by using the <tt>Helper.GetSchema()</tt> method, the wrapper retrieves the XML schema that is saved locally and submits this schema to the Acumatica ERP screen-based web service by using the <tt>Screen.SetSchema()</tt> method of the screen-based API. The web service interacts with the Acumatica ERP import and export engine, which replaces the current schema of the form that is stored on the server with the one that was saved locally. The wrapper returns the schema that was saved locally to the client application. The client application uses the local schema to work with Acumatica ERP. ((({S:Hint}The schema that is submitted to Acumatica ERP by using the screen-based API wrapper is used on the server during the current session and is discarded after the end of the session.
))){br}

The following diagram illustrates the way the screen-based API wrapper works during the second execution and all subsequent executions of a client application.[anchor|#_8c988a29-792d-4ae4-9634-c8ef390997e6][anchor|#_1a5379ec-31ad-4080-b224-33e58b02a647][image:UserGuide/Images/Screen_Based_API_Wrapper_2.png|popup|Subsequent executions of the application|450px]{br}

((({S:Hint}You should distribute the XML file with the schema along with your client application. If the wrapper has not found the XML file, it requests the new schema.
The name of the XML file with the schema contains a hash code that depends on the WSDL description. If you update the WSDL description in your application, the wrapper works in the same way as it did during the first execution of the application and creates a new XML file with the schema.
)))
==Related Articles==
*[HelpRoot_Dev_Integration\IS__how_Prevent_Breaking_Changes|To Use the Screen-Based API Wrapper]]]></column>
			<column name="PlainText"><![CDATA[Screen-Based API Wrapper Because of the connection of the screen-based SOAP API with  Acumatica ERP forms, the applications that are developed based on this API are sensitive to the UI         changes in the system. That is, any changes made to the UI after the application is created         require the application to be updated and recompiled. If you want your application to not         depend on the UI changes in the system, you should use the screen-based API wrapper, which         is described in this topic. How a Client Application Based on the Screen-Based API Works A client application that uses the screen-based web services API includes the WSDL         description of the service, which contains the API elements that the application can use to         work with the service. The API elements have names that are similar to the names of the         elements in the UI of  Acumatica ERP. For example, the  Customer ID  element of the   ([~/?ScreenId=AR303000|AR303000]) Customers (AR303000) form         corresponds to the  Customer.CustomerSummary.CustomerID  property.  When the application calls the  Screen.GetSchema()  method, it retrieves         from  Acumatica ERP the schema of an  Acumatica ERP form. The schema of the form is a  Content  object, which defines the         correspondence between the API elements and the internal data fields that are used for         operations with data by  Acumatica ERP. If something has been changed in the schema of an  Acumatica ERP form, the  Content  object that is returned by the            Screen.GetSchema()  method contains a different correspondence between         the API elements and internal data fields than the correspondence for which the application         is compiled, and the application fails.  For example, suppose that a client application requests the customer ID by the            Customer.CustomerSummary.CustomerID  property. Suppose also that in an         update of  Acumatica ERP, the  Customer ID  element of the   ([~/?ScreenId=AR303000|AR303000]) Customers form was renamed to            Customer , and therefore it should be requested by using the            Customer.CustomerSummary.Customer  property from the API. The client         application requests the customer ID by using the            Customer.CustomerSummary.CustomerID  property and fails. What the Screen-Based API Wrapper Is The screen-based API wrapper is a special wrapper designed to prevent the UI changes in the         system from causing application failure. The wrapper works with any changes in the schema of         an  Acumatica ERP form. That is, the wrapper makes the application work regardless of the changes in the         names of UI elements and the changes in the internal names of data fields and objects.  The wrapper is distributed as the  PX.Soap.dll  file, which is installed         automatically during  Acumatica ERP installation. You can find the  PX.Soap.dll  file in the            ScreenBasedAPIWrapper  folder of your  Acumatica ERP installation folder.  The  PX.Soap  library, which the wrapper provides, includes the            Helper.GetSchema()  method, which you should use instead of the            Screen.GetSchema()  method of the screen-based web services API. For         information on how to use the screen-based API wrapper, see  To Use the Screen-Based API Wrapper. How the Screen-Based API Wrapper Works When the client application is executed for the first time and requests the schema of an            Acumatica ERP form by using the  Helper.GetSchema()  method, the wrapper requests the         schema from the  Acumatica ERP screen-based web service by using the  Screen.GetSchema()  method of the         screen-based API. The web service interacts with the  Acumatica ERP import and export engine and returns the current schema of the form. The wrapper saves         the schema in an XML file and returns the schema to the client application as a            Content  object. The client application uses this schema to work with            Acumatica ERP.  Instead of the  Helper.GetSchema()  method you can use the              Helper.ReuseStoredSchema()  method to upload a schema that was saved           earlier by the wrapper.  The following diagram illustrates the way the screen-based API wrapper works during the         first execution of a client application. First execution of an application When the client application is executed for the second time and all subsequent times and it         requests the schema of an  Acumatica ERP form by using the  Helper.GetSchema()  method, the wrapper retrieves the         XML schema that is saved locally and submits this schema to the  Acumatica ERP screen-based web service by using the  Screen.SetSchema()  method of the         screen-based API. The web service interacts with the  Acumatica ERP import and export engine, which replaces the current schema of the form that is stored on         the server with the one that was saved locally. The wrapper returns the schema that was         saved locally to the client application. The client application uses the local schema to         work with  Acumatica ERP.  The schema that is submitted to  Acumatica ERP by using the screen-based API wrapper is used on the server during the current session           and is discarded after the end of the session. The following diagram illustrates the way the screen-based API wrapper works during the         second execution and all subsequent executions of a client application. Subsequent executions of the application You should distribute the XML file with the schema along with your client application.           If the wrapper has not found the XML file, it requests the new schema. The name of the             XML file with the schema contains a hash code that depends on the WSDL description. If             you update the WSDL description in your application, the wrapper works in the same way             as it did during the first execution of the application and creates a new XML file with             the schema. ]]></column>
		</row>
		<row PageID="1eac8817-c782-4610-b7e1-dc2e831dcb42" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="34512bcb-9b1c-1f50-59fd-a42fa3ea1a53" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The WSDL description of the Acumatica ERP screen-based web services API contains the descriptions of the API objects and methods that you can use to access Acumatica ERP forms.{br}

Because of the connection of the API with Acumatica ERP forms, each generated WSDL description of this API reflects the current state of the system. That is, the WSDL description does not include any changes made to the system after the WSDL file was generated, and each time you change the system, you should regenerate the WSDL description and update your application accordingly. ((({S:Hint}You can prevent breaking changes in your application and omit regeneration of the WSDL description for each change in the system by using the screen-based API wrapper. For details on how to use the wrapper, see [HelpRoot_Dev_Integration\IS__how_Prevent_Breaking_Changes|To Use the Screen-Based API Wrapper].
))){br}

For example, suppose that you generated a WSDL description of the web service that contains the definition of the {{CustomerID}} property, which corresponds to the '''Customer ID''' element on the [HelpRoot_FormReference\AR_30_30_00|Customers] ([~/?ScreenId=AR303000|AR303000]) form. Further, suppose that you changed the name of the '''Customer ID''' element to '''Customer Identifier''' in a customization project. To access the '''Customer Identifier''' element on the form through the screen-based web services API, you need to regenerate the WSDL description so that it contains the definition of the {{CustomerIdentifier}} property that corresponds to the '''Customer Identifier''' element, and update your application accordingly.{br}

You can generate the WSDL file of an Acumatica ERP web service in one of the following ways.
==To Generate a WSDL File for One Acumatica ERP Form==
If your application needs to work with only one Acumatica ERP form, you can generate the web service that provides access to only this form. {br}

To generate a WSDL file for a form, on the title bar of this form, click '''Tools''' > '''Web Service''' in the modern UI or '''Help''' > '''Web Service''' in the classic UI. This opens the page that contains the description of the web service, with the following URL: {{http(s)://<ApplicationPath>/Soap/<FormID>.asmx}}. In this URL, {{<ApplicationPath>}} is replaced with the actual URL of your application, and {{<FormID>}} is replaced with the ID of the form. For example, suppose that you generated a web service for the [HelpRoot_FormReference\AR_30_30_00|Customers] form of the ''WebServiceAPITest'' application, which is accessed under a secure connection and is running on a local computer. The URL of this service is {{https://localhost/WebServiceAPITest/Soap/AR303000.asmx}}.
==To Generate a WSDL File for Multiple Acumatica ERP Forms==
If your application needs to work with multiple Acumatica ERP forms, you can generate one web service that provides access to all needed forms.{br}

To generate a WSDL file for multiple forms, on the [HelpRoot_FormReference\SM_20_70_40|Web Services] ([~/?ScreenId=SM207040|SM207040]) form, you should do the following:[anchor|#ul_nz5_j1s_vs]
#Type the ID of the web service in the '''Service ID''' box of the Summary area of the form. This ID will be used in the URL of the generated service.
#Select the Acumatica ERP forms that your application needs to use on the left pane of the form, and click '''Add to Grid''' for each form.
#Select the types of integration these forms should provide (which can include importing data, exporting data, and submitting data) by selecting the appropriate check boxes (any combination of '''Import''', '''Export''', or '''Submit''') for corresponding rows on the right pane of the form. 
#Click '''Generate'''.
{br}

((({S:Hint}The modules that expose the selected forms should be properly configured and the forms should open in a web browser. If a form could not be opened in a web browser, the web service definition will not be generated for this form.
)))After the web service is generated, you can view the WSDL description by clicking '''View Generated''' on the form toolbar. This opens the page that contains the description of the web service with the following URL: {{http(s)://<ApplicationPath>/Soap/<ServiceID>.asmx}}. In this URL, {{<ApplicationPath>}} is replaced with the actual URL of your application, and {{<ServiceID>}} is replaced with the ID of the service that you specified in the '''Service ID''' box when configuring the service. For example, suppose that you generated a web service for multiple forms with the <tt>MYSTORE</tt> service ID for the ''WebServiceAPITest'' application, which is accessed under a secure connection and is running on a local computer. The URL of this service is {{https://localhost/WebServiceAPITest/Soap/MYSTORE.asmx}}.]]></column>
			<column name="PlainText"><![CDATA[To Generate the WSDL File of the Web Services The WSDL description of the  Acumatica ERP screen-based web services API contains the descriptions of the API objects and                 methods that you can use to access  Acumatica ERP forms. Because of the connection of the API with  Acumatica ERP forms, each generated WSDL description of this API reflects the current state of                 the system. That is, the WSDL description does not include any changes made to the                 system after the WSDL file was generated, and each time you change the system, you                 should regenerate the WSDL description and update your application accordingly.                      You can prevent breaking changes in your application and omit regeneration                     of the WSDL description for each change in the system by using the screen-based                     API wrapper. For details on how to use the wrapper, see  To Use the Screen-Based API Wrapper. For example, suppose that you generated a WSDL description of the web service that                 contains the definition of the  CustomerID  property, which                 corresponds to the  Customer ID  element on the   ([~/?ScreenId=AR303000|AR303000]) Customers (AR303000) form. Further, suppose                 that you changed the name of the  Customer ID  element to                      Customer Identifier  in a customization project. To access                 the  Customer Identifier  element on the form through the                 screen-based web services API, you need to regenerate the WSDL description so that                 it contains the definition of the  CustomerIdentifier  property that                 corresponds to the  Customer Identifier  element, and update                 your application accordingly. You can generate the WSDL file of an  Acumatica ERP web service in one of the following ways. To Generate a WSDL File for One  Acumatica ERP Form If your application needs to work with only one  Acumatica ERP form, you can generate the web service that provides access to only this form.  To generate a WSDL file for a form, on the title bar of this form, click  Tools Web Service  in the modern UI or  Help Web Service  in the classic UI. This opens the page that contains the description                 of the web service, with the following URL:                      http(s)://<ApplicationPath>/Soap/<FormID>.asmx . In this                 URL,  <ApplicationPath>  is replaced with the actual URL of your                 application, and  <FormID>  is replaced with the ID of the form.                 For example, suppose that you generated a web service for the   ([~/?ScreenId=AR303000|AR303000]) Customers form of the  WebServiceAPITest                  application, which is accessed under a secure connection and is running on a local                 computer. The URL of this service is                      https://localhost/WebServiceAPITest/Soap/AR303000.asmx . To Generate a WSDL File for Multiple  Acumatica ERP Forms If your application needs to work with multiple  Acumatica ERP forms, you can generate one web service that provides access to all needed                 forms. To generate a WSDL file for multiple forms, on the   ([~/?ScreenId=SM207040|SM207040]) Web Services (SM207040) form, you should do the following: Type the ID of the web service in the  Service ID  box                         of the Summary area of the form. This ID will be used in the URL of the                         generated service. Select the  Acumatica ERP forms that your application needs to use on the left pane of the form,                         and click  Add to Grid  for each form. Select the types of integration these forms should provide (which can                         include importing data, exporting data, and submitting data) by selecting                         the appropriate check boxes (any combination of                              Import ,  Export , or                              Submit ) for corresponding rows on the right pane                         of the form.  Click  Generate . The modules that expose the selected forms should be properly configured and                     the forms should open in a web browser. If a form could not be opened in a web                     browser, the web service definition will not be generated for this                 form. After the web service is generated, you can view the WSDL description by                 clicking  View Generated  on the form toolbar. This opens the                 page that contains the description of the web service with the following URL:                      http(s)://<ApplicationPath>/Soap/<ServiceID>.asmx . In                 this URL,  <ApplicationPath>  is replaced with the actual URL of                 your application, and  <ServiceID>  is replaced with the ID of the                 service that you specified in the  Service ID  box when                 configuring the service. For example, suppose that you generated a web service for                 multiple forms with the  MYSTORE  service ID for the                      WebServiceAPITest  application, which is accessed under a secure                 connection and is running on a local computer. The URL of this service is                      https://localhost/WebServiceAPITest/Soap/MYSTORE.asmx . ]]></column>
		</row>
		<row PageID="0b2f1956-4612-40c5-a816-4ab4ae06f0bf" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="63bed7da-5267-cdd6-8140-d9eb9f993c31" RecordSourceID="22377">
			<column name="Content"><![CDATA[
When the WSDL file is generated, you must import it into your development environment to generate proxy classes. If necessary, see the documentation of your development environment to find out the correct way of building the proxy classes based on the WSDL definition.{br}

In this topic, you will find instructions on how to implement the proxy classes by using Visual Studio 2012 or later.
==To Generate Proxy Classes from the WSDL Definition by Using Visual Studio 2012 or Later==[anchor|#_cd23c5f0-8f53-4b9b-81b0-6a4f2ebd0318]
#In Microsoft Visual Studio, create a new project as follows: 
##Select '''File''' > '''New''' > '''Project'''.
##In the '''New Project '''window that appears, select the required template.
##Define the name of the project and solution, as shown in the figure below, and click '''OK'''. 
#Add a web service reference to the project as follows:
##In the menu, select '''Project''' > '''Add Service Reference'''. 
##In the '''Add Service Reference''' dialog box, which appears, click '''Advanced'''. 
##In the '''Service Reference Settings''' dialog box, which appears, click '''Add Web Reference'''. 
##In the '''URL''' box of the '''Add Web Reference''' dialog box, which appears, specify the URL of the web service (see item 1 in the following screenshot). 
##:((({S:Hint}To get the URL of the service, on the [HelpRoot_FormReference\SM_20_70_40|Web Services] ([~/?ScreenId=SM207040|SM207040]) form, select the needed web service in the '''Service ID''' box, click '''View Generated''' on the form toolbar, and copy the URL from the address line in the browser for the page that opens, such as {{https://localhost/WebServiceAPITest/Soap/MYSTORE.asmx}}.
)))
##:((({S:Hint}You can make API calls to Acumatica ERP through HTTP if requirements to your application does not include secure data transfer between the application and Acumatica ERP. If you do not need to use HTTPS, use the HTTP address of the application instead of HTTPS, such as {{http://localhost/WebServiceAPITest/Soap/MYSTORE.asmx}}.
)))
##Click '''Go''' (2 in the screenshot) to make Visual Studio connect to the web service.
##:((({S:Hint}If your Acumatica ERP website uses a self-signed certificate, Visual Studio displays security alert windows with warnings on the certificate. Click '''Yes''' in these windows to proceed.
)))
##In the '''Web reference name''' box, type the name of the web reference (3). This name will be used as a namespace for the web service classes generated by Visual Studio based on the WSDL description of the service.
##Click '''Add Reference''' (4) to add to the project the reference to the specified service.[anchor|#_e2132f38-351d-4b02-bc06-02cf587761a8][image:UserGuide/Images/WS_AddWebReference.png|popup|Add Web Reference dialog box|450px]
##:Visual Studio adds to the project the '''Web References''' folder with the web service reference in it, as shown in the following screenshot.[anchor|#fig_dht_z5v_gt][anchor|#image_v2v_nvv_gt][image:UserGuide/Images/WS_WebReferenceInSolutionExplorer.png|popup|Solution Explorer|150px]((({S:Hint}If you need to update a web reference to the Acumatica ERP web service in a Visual Studio project, you can update the WSDL description in Acumatica ERP and update the web reference in the project by right-clicking the web reference in Solution Explorer and selecting '''Update Web Reference''', as shown in the following screenshot. [anchor|#fig_qv1_1tv_pt][anchor|#image_fph_ctv_pt][image:UserGuide/Images/WS_UpdateWebReference.png|popup|Update Web Reference menu item|300px]
)))
#Rebuild the project.
]]></column>
			<column name="PlainText"><![CDATA[To Import the WSDL File Into the Development Environment When the WSDL file is generated, you must import it into your development environment                 to generate proxy classes. If necessary, see the documentation of your development                 environment to find out the correct way of building the proxy classes based on the                 WSDL definition. In this topic, you will find instructions on how to implement the proxy classes by                 using Visual Studio 2012 or later. To Generate Proxy Classes from the WSDL Definition by Using Visual Studio 2012 or                 Later In Microsoft Visual Studio, create a new project as follows:  Select  File New Project . In the  New Project  window that appears, select                             the required template. Define the name of the project and solution, as shown in the figure                             below, and click  OK .  Add a web service reference to the project as follows: In the menu, select  Project Add Service Reference .  In the  Add Service Reference  dialog box, which                             appears, click  Advanced .  In the  Service Reference Settings  dialog box,                             which appears, click  Add Web Reference .  In the  URL  box of the  Add Web                                 Reference  dialog box, which appears, specify the URL of                             the web service (see item 1 in the following screenshot).  To get                                 the URL of the service, on the   ([~/?ScreenId=SM207040|SM207040]) Web Services (SM207040) form, select the needed web                                 service in the  Service ID  box, click                                      View Generated  on the form toolbar, and                                 copy the URL from the address line in the browser for the page that                                 opens, such as                                      https://localhost/WebServiceAPITest/Soap/MYSTORE.asmx . You                                 can make API calls to  Acumatica ERP through HTTP if requirements to your application does not include                                 secure data transfer between the application and  Acumatica ERP. If you do not need to use HTTPS, use the HTTP address of the                                 application instead of HTTPS, such as                                      http://localhost/WebServiceAPITest/Soap/MYSTORE.asmx . Click  Go  (2 in the screenshot) to make Visual                             Studio connect to the web service. If your  Acumatica ERP website uses a self-signed certificate, Visual Studio displays                                 security alert windows with warnings on the certificate. Click                                      Yes  in these windows to                             proceed. In the  Web reference name  box, type the name of                             the web reference (3). This name will be used as a namespace for the web                             service classes generated by Visual Studio based on the WSDL description                             of the service. Click  Add Reference  (4) to add to the project the                             reference to the specified service. Add Web Reference dialog box Visual Studio adds to the project the  Web References                                  folder with the web service reference in it, as shown in the                                 following screenshot. Solution Explorer If you need to update a web reference to the  Acumatica ERP web service in a Visual Studio project, you can update the                                     WSDL description in  Acumatica ERP and update the web reference in the project by right-clicking                                     the web reference in Solution Explorer and selecting                                          Update Web Reference , as shown in the                                     following screenshot.  Update Web Reference menu item Rebuild the project. ]]></column>
		</row>
		<row PageID="6bd1cc05-5d3d-49df-8ad9-089147d120ab" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="c8a63d23-2ecc-119a-44e6-b7782f7d79e8" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The screen-based SOAP API depends on the user interface of Acumatica ERP forms. That is, each generated WSDL description of this API includes the API elements that correspond to the current names of UI elements of the system. Therefore, if any changes have been made to the user interface of the system after the WSDL file was generated, the WSDL description will not include these changes, and the client application that uses this WSDL will fail when it works with the system. {br}

To prevent application failures and omit the regeneration of the WSDL description for each change of the user interface of the system, you can use the screen-based API wrapper, as described in this topic. You can find more information on the screen-based API wrapper in [HelpRoot_Dev_Integration\IS__con_Screen-Based_API_Wrapper|Screen-Based API Wrapper].[anchor|#_4cbaae0b-11d2-4ee3-ba2a-91b615b3f4e4]
==To Use the Screen-Based Web Services API Wrapper in a Client Application==[anchor|#_57a90aca-6b43-40af-811a-7b6dd47d689b]
#Add to your project a reference to <tt>PX.Soap.dll</tt>.
#:((({S:Hint}The <tt>PX.Soap.dll</tt> file is installed automatically during Acumatica ERP installation. You can find this file in the <tt>ScreenBasedAPIWrapper</tt> folder of your Acumatica ERP installation folder.
)))
#Use the <tt>Helper.GetSchema()</tt> method from the {{PX.Soap}} library in the code of your application instead of the corresponding <tt>Screen.GetSchema()</tt> method to obtain the schema of each form. For example, the following code retrieves the schema of the [HelpRoot_FormReference\AR_30_30_00|Customers] ([~/?ScreenId=AR303000|AR303000]) form by using the screen-based API wrapper.{{{{Screen context = new Screen();
context.CookieContainer = new System.Net.CookieContainer();
context.Url = Properties.Settings.Default.MyStoreIntegration_MyStore_Screen;
context.Login
(
  Properties.Settings.Default.Login, 
  Properties.Settings.Default.Password
);

AR303000Content custSchema = 
  PX.Soap.Helper.GetSchema&lt;AR303000Content&gt;(context);
}}}}
#Work with the retrieved <tt>Content</tt> object by using the standard screen-based web services API methods.

==Related Articles==
*[HelpRoot_Dev_Integration\IS__con_Screen-Based_API_Wrapper|Screen-Based API Wrapper]
*[HelpRoot_Install\Updating__how_Update_API_Using_Wrapper|To Update a Client Application that Uses Screen-Based Web Services]]]></column>
			<column name="PlainText"><![CDATA[To Use the Screen-Based API Wrapper The screen-based SOAP API depends on the user interface of  Acumatica ERP forms. That is, each generated WSDL description of this API includes the API elements         that correspond to the current names of UI elements of the system. Therefore, if any changes         have been made to the user interface of the system after the WSDL file was generated, the         WSDL description will not include these changes, and the client application that uses this         WSDL will fail when it works with the system.  To prevent application failures and omit the regeneration of the WSDL description for each         change of the user interface of the system, you can use the screen-based API wrapper, as         described in this topic. You can find more information on the screen-based API wrapper in            Screen-Based API Wrapper. To Use the Screen-Based Web Services API Wrapper in a Client Application Add to your project a reference to  PX.Soap.dll . The                PX.Soap.dll  file is installed automatically during  Acumatica ERP installation. You can find this file in the                ScreenBasedAPIWrapper  folder of your  Acumatica ERP installation folder. Use the  Helper.GetSchema()  method from the  PX.Soap            library in the code of your application instead of the corresponding              Screen.GetSchema()  method to obtain the schema of each form. For           example, the following code retrieves the schema of the   ([~/?ScreenId=AR303000|AR303000]) Customers (AR303000) form by           using the screen-based API           wrapper. Screen context = new Screen();
context.CookieContainer = new System.Net.CookieContainer();
context.Url = Properties.Settings.Default.MyStoreIntegration_MyStore_Screen;
context.Login
(
  Properties.Settings.Default.Login, 
  Properties.Settings.Default.Password
);

AR303000Content custSchema = 
  PX.Soap.Helper.GetSchema<AR303000Content>(context); Work with the retrieved  Content  object by using the standard           screen-based web services API methods. ]]></column>
		</row>
		<row PageID="355c6686-6a71-49d5-b0ef-9d3e73768bdc" Language="en-US" PageRevisionID="1" PlainText="Working with Commands of the Screen-Based SOAP API To upload data to and from  Acumatica ERP     by using the screen-based SOAP API, you should define the sequence of commands for the system as     it works with elements on an  Acumatica ERP     form. This sequence of commands reflects the sequence of actions to be executed for a data     record as if the record is being manipulated by a user through an  Acumatica ERP     form.  In This Chapter Commands for Retrieving the Values of ElementsSelection of a Group of Records for ExportCommands for Setting the Values of ElementsCommands for Clicking Buttons on a FormCommands for Adding Detail LinesCommands for Pop-Up Dialog Boxes and Pop-Up FormsCommands for Pop-Up PanelsCommands for Record Searching: Filter Service CommandCommands for Record Searching: Key CommandCommands for Record Searching: Custom FieldCommands That Require a CommitCommands for Working with AttachmentsCommands for Working with Multi-Language Fields" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="c2f75b92-6ad2-f217-f185-d0e6167675b2" RecordSourceID="22377">
			<column name="Content"><![CDATA[
To upload data to and from Acumatica ERP by using the screen-based SOAP API, you should define the sequence of commands for the system as it works with elements on an Acumatica ERP form. This sequence of commands reflects the sequence of actions to be executed for a data record as if the record is being manipulated by a user through an Acumatica ERP form. 
==In This Chapter==[anchor|#_1f89f0b2-43a1-4760-935d-1c68e78438cc]
*[HelpRoot_Dev_Integration\IS__con_SB_Commands_Field|Commands for Retrieving the Values of Elements]
*[HelpRoot_Dev_Integration\IS__con_SB_EveryAndFilters|Selection of a Group of Records for Export]
*[HelpRoot_Dev_Integration\IS__con_SB_Commands_Value|Commands for Setting the Values of Elements]
*[HelpRoot_Dev_Integration\IS__con_SB_Commands_Action|Commands for Clicking Buttons on a Form]
*[HelpRoot_Dev_Integration\IS__con_SB_Commands_NewRow|Commands for Adding Detail Lines]
*[HelpRoot_Dev_Integration\IS__con_SB_Commands_DialogAnswer|Commands for Pop-Up Dialog Boxes and Pop-Up Forms]
*[HelpRoot_Dev_Integration\IS__con_SB_PopupPanel|Commands for Pop-Up Panels]
*[HelpRoot_Dev_Integration\IS__con_SB_Commands_Filter|Commands for Record Searching: Filter Service Command]
*[HelpRoot_Dev_Integration\IS__con_SB_Commands_Key|Commands for Record Searching: Key Command]
*[HelpRoot_Dev_Integration\IS__con_SB_Commands_!FieldName|Commands for Record Searching: Custom Field]
*[HelpRoot_Dev_Integration\IS__con_SB_Commit|Commands That Require a Commit]
*[HelpRoot_Dev_Integration\IS__con_SB_Commands_Attachment|Commands for Working with Attachments]
*[HelpRoot_Dev_Integration\IS__con_SB_Multi-Language_Fields|Commands for Working with Multi-Language Fields]
]]></column>
		</row>
		<row PageID="56d2c742-7db3-4dac-bacd-20090d7cb824" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="5f53f0f2-ebc0-9090-ce49-38676fcbbf05" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You configure the sequence of commands that should be executed during data import, data export, or data processing through the web service by using an array of objects of the <tt>Command</tt> type.{br}

As you specify this sequence of commands, when you need to reflect obtaining the value of an element on a form, you should use a <tt>Field</tt> object. To specify the element whose value you need to obtain, you can do one of the following:[anchor|#ul_v5w_jg4_15]
*Select the needed <tt>Field</tt> object from the subobjects of the <tt>Field</tt> type of a <tt>Content</tt> object that corresponds to the needed Acumatica ERP form
*Create an object of the <tt>Field</tt> type and specify its properties
Both of these ways are described in detail in the following sections of this topic.
==Selection of the Fields Available in a Content Object==
If you want to obtain the value of an element on an Acumatica ERP form, you can select the needed <tt>Field</tt> object from the subobjects of the <tt>Field</tt> type of the <tt>Content</tt> object that corresponds to the form. For example, if you want to export the values of the '''Inventory ID''' and '''Description''' elements on the [HelpRoot_FormReference\IN_20_25_00|Stock Items] ([~/?ScreenId=IN202500|IN202500]) form, you can use the following code.<source lang="csharp">//stockItemsSchema is an IN202500Content object
var commands = new Command[]
{
   ...
   '''stockItemsSchema.StockItemSummary.InventoryID,
   stockItemsSchema.StockItemSummary.Description,'''
   ...
};</source>
==Field Object Creation==
You can retrieve the values of not only the fields that are available on the Acumatica ERP form, but also the data fields of the data access classes (DACs) underlying the form. Some of these data fields are not available directly through the elements of the form. That is, you cannot select the needed <tt>Field</tt> object among the subobjects of the <tt>Content</tt> object. {br}

If you want to retrieve the value of an element that is not available on the form, you can create a <tt>Field</tt> object and specify its properties so that it specifies the needed data field of the DAC. You should specify the name of the object that corresponds to the needed DAC as the <tt>ObjectName</tt> and type the name of the data field in <tt>FieldName</tt>. The following code illustrates the creation of a <tt>Field</tt> object for the {{LastModifiedDateTime}} data field (which specifies the date and time when a record was modified) that is available through the DAC underlying the <tt>StockItemSummary</tt> object of the [HelpRoot_FormReference\IN_20_25_00|Stock Items] form.((({S:Hint}To find the names of the data fields that belong to DACs, you should read the applicable Acumatica ERP code. You can find the source code of Acumatica ERP on the [HelpRoot_FormReference\SM_20_45_70|Source Code] ([~/?ScreenId=SM204570|SM204570]) form or in &lt;ApplicationFolder&gt;\App_Data\CodeRepository\PX.Objects\, where &lt;ApplicationFolder&gt; is replaced with the path to the folder of the Acumatica ERP application instance. You can learn the details of working with the source code of Acumatica ERP in the T300 Acumatica Customization           Platform training course.
)))<source lang="csharp">//stockItemsSchema is an IN202500Content object
var commands = new Command[]
{
    ...
    '''new Field 
    {
         ObjectName = stockItemsSchema.StockItemSummary.InventoryID.ObjectName,
         FieldName = "LastModifiedDateTime" 
    },'''
    ...
};</source>((({S:Hint}You can create <tt>Field</tt> objects for the elements that are available on a form. If you want to create a <tt>Field</tt> object for an element available on the form, set the <tt>ObjectName</tt> property to the <tt>ObjectName</tt> property of the needed subobject of the <tt>Field</tt> type of a <tt>Content</tt> object, and set the <tt>FieldName</tt> property to the <tt>FieldName</tt> property of this <tt>Field</tt> object. The following code illustrates the creation of a <tt>Field</tt> object for the <tt>InventoryID</tt> field of the [HelpRoot_FormReference\IN_20_25_00|Stock Items] form.<source lang="csharp">new Field 
{
     ObjectName = stockItemsSchema.StockItemSummary.InventoryID.ObjectName,
     FieldName = stockItemsSchema.StockItemSummary.InventoryID.FieldName 
}</source>
)))]]></column>
			<column name="PlainText"><![CDATA[Commands for Retrieving the Values of Elements You configure the sequence of commands that should be executed during data import, data         export, or data processing through the web service by using an array of objects of the            Command  type. As you specify this sequence of commands, when you need to reflect obtaining the value of an         element on a form, you should use a  Field  object. To specify the element         whose value you need to obtain, you can do one of the following: Select the needed  Field  object from the subobjects of the                Field  type of a  Content  object that corresponds             to the needed  Acumatica ERP form Create an object of the  Field  type and specify its properties Both of these ways are described in detail in the following sections of this topic. Selection of the Fields Available in a Content Object If you want to obtain the value of an element on an  Acumatica ERP form, you can select the needed  Field  object from the subobjects of         the  Field  type of the  Content  object that corresponds         to the form. For example, if you want to export the values of the  Inventory           ID  and  Description  elements on the   ([~/?ScreenId=IN202500|IN202500]) Stock Items (IN202500) form, you         can use the following         code. //stockItemsSchema is an IN202500Content object
var commands = new Command[]
{
   ...
    stockItemsSchema.StockItemSummary.InventoryID,
   stockItemsSchema.StockItemSummary.Description, 
   ...
}; Field Object Creation You can retrieve the values of not only the fields that are available on the  Acumatica ERP     form, but also the data fields of the data access classes (DACs) underlying the form. Some of     these data fields are not available directly through the elements of the form. That is, you     cannot select the needed  Field  object among the subobjects of the       Content  object.  If you want to retrieve the value of an element that is not available on the form, you can         create a  Field  object and specify its properties so that it specifies the         needed data field of the DAC. You should specify the name of the object that corresponds to         the needed DAC as the  ObjectName  and type the name of the data field in            FieldName . The following code illustrates the creation of a            Field  object for the  LastModifiedDateTime  data field         (which specifies the date and time when a record was modified) that is available through the         DAC underlying the  StockItemSummary  object of the   ([~/?ScreenId=IN202500|IN202500]) Stock Items form. To find the           names of the data fields that belong to DACs, you should read the applicable  Acumatica ERP code. You can find the source code of  Acumatica ERP on the   ([~/?ScreenId=SM204570|SM204570]) Source Code           (SM204570) form or in <ApplicationFolder>\App_Data\CodeRepository\PX.Objects\, where           <ApplicationFolder> is replaced with the path to the folder of the  Acumatica ERP application instance. You can learn the details of working with the source code of  Acumatica ERP in the T300  Acumatica Customization           Platform training           course. //stockItemsSchema is an IN202500Content object
var commands = new Command[]
{
    ...
     new Field 
    {
         ObjectName = stockItemsSchema.StockItemSummary.InventoryID.ObjectName,
         FieldName = "LastModifiedDateTime" 
    }, 
    ...
}; You           can create  Field  objects for the elements that are available on a form.           If you want to create a  Field  object for an element available on the           form, set the  ObjectName  property to the  ObjectName            property of the needed subobject of the  Field  type of a              Content  object, and set the  FieldName  property to           the  FieldName  property of this  Field  object. The           following code illustrates the creation of a  Field  object for the              InventoryID  field of the   ([~/?ScreenId=IN202500|IN202500]) Stock Items           form. new Field 
{
     ObjectName = stockItemsSchema.StockItemSummary.InventoryID.ObjectName,
     FieldName = stockItemsSchema.StockItemSummary.InventoryID.FieldName 
} ]]></column>
		</row>
		<row PageID="90f13bb6-3207-4483-a0ba-f6c17ba7a1d9" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="4f87613a-fd73-7df4-b625-81fdf685a805" RecordSourceID="22377">
			<column name="Content"><![CDATA[
Each record in the system is identified by the values of the key elements on the applicable Acumatica ERP form. For example, a record on the [HelpRoot_FormReference\IN_20_25_00|Stock Items] ([~/?ScreenId=IN202500|IN202500]) form is identified by the value of the '''Inventory ID''' key element. Key elements are available through the Summary object of a form. You can use the key element or elements of the form to select all records of the form for export. The other way to specify a group of records for export is to use the elements of the Summary area of the form in custom filters. Both ways of selecting records are described in detail below.
==Export of All Records from a Form==
If you want to export every record from an Acumatica ERP form, in the array of <tt>Command</tt> objects that you pass to the <tt>Export()</tt> method, you should insert the service command of the <tt>EveryValue</tt> type for the corresponding key element on the form. The <tt>EveryValue</tt> service command is available through the <tt>ServiceCommands</tt> subobject of the Summary object of the <tt>Content</tt> object that corresponds to the form. This service command specifies that every record of the specific type should be processed during export. {br}

For example, if you want to export all stock item records available in the system, you should insert the <tt>EveryInventoryID</tt> service command, as the following code shows.<source lang="csharp">//stockItemsSchema is an IN202500Content object
var commands = new Command[]
{
   stockItemsSchema.StockItemSummary.ServiceCommands.EveryInventoryID,
   ...
};</source>
==Export of a Group of Records from a Form==You can filter the data available in the Acumatica ERP database to select the records for export. For example, you can configure the system to export only the records that have a particular status. 
To define a filter for the data being exported, you should create an array of <tt>Filter</tt> objects and add the needed filters to it. To define a filter, you should specify: [anchor|#ul_wc2_3pp_xs]
*The UI element whose value should be used for filtering (in the <tt>Field</tt> property of the <tt>Filter</tt> object).
*The value or values with which the value of the element should be compared (in the <tt>Value</tt> property or <tt>Value</tt> and <tt>Value2</tt> properties of the <tt>Filter</tt> object).
*The condition of comparison (in the <tt>Condition</tt> property of the <tt>Filter</tt> object).
If you define multiple filters in the array, you should also specify the logical operator (either {{And}} or {{Or}}) that defines how to apply these filters. If filters are passed to an <tt>Export()</tt> method, during export, the system selects only the records that conform to the specified condition (or conditions) and exports only these records. {br}

For example, suppose that you want to export only the stock item records that have the ''Active'' status. In this case, you can specify the filtering condition that the '''Item Status''' element should be equal to ''Active'', as the following code shows. During export, the system processes the records that match the filtering conditions and exports only the records with the ''Active'' status.<source lang="csharp">var filters = new Filter[]
{
    new Filter
    {
         Field = stockItemsSchema.StockItemSummary.ItemStatus,
         Condition = FilterCondition.Equals,
         Value = "Active",
    }
};</source>{br}

For filtering records, you can use either the data fields of the Summary object of the form from which you are exporting data, or the data fields of the data access class (DAC) underlying the Summary object. (In Acumatica Framework, this DAC is called the main DAC of the primary data view.) If a data field of the DAC is not available directly through the elements of the Summary object, you cannot select the needed <tt>Field</tt> object among the subobjects of a <tt>Content</tt> object, as the previous code example shows for the <tt>ItemStatus</tt> data field. Instead, you should create a new <tt>Field</tt> object and specify its properties as follows: Specify the name of the Summary object as <tt>ObjectName</tt> (that is, the object name that corresponds to the object to which the key data field belongs), and type the name of the data field as <tt>FieldName</tt> in the code directly. {br}

The following example shows filtering by the {{LastModifiedDateTime}} data field (which specifies the date and time when a record was modified) that is available through the DAC underlying the <tt>StockItemSummary</tt> object of the [HelpRoot_FormReference\IN_20_25_00|Stock Items] form. <source lang="csharp">new Filter
{
    Field = new Field 
    {
         ObjectName = stockItemsSchema.StockItemSummary.InventoryID.ObjectName,
         FieldName = "LastModifiedDateTime" 
    },
    Condition = FilterCondition.Greater,
    Value = DateTime.Now.AddMonths(-1).ToLongDateString()
}</source>]]></column>
			<column name="PlainText"><![CDATA[Selection of a Group of Records for Export Each record in the system is identified by the values of the key elements on the applicable            Acumatica ERP form. For example, a record on the   ([~/?ScreenId=IN202500|IN202500]) Stock Items (IN202500) form is         identified by the value of the  Inventory ID  key element. Key elements         are available through the Summary object of a form. You can use the key element or elements         of the form to select all records of the form for export. The other way to specify a group         of records for export is to use the elements of the Summary area of the form in custom         filters. Both ways of selecting records are described in detail below. Export of All Records from a Form If you want to export every record from an  Acumatica ERP form, in the array of  Command  objects that you pass to the            Export()  method, you should insert the service command of the            EveryValue  type for the corresponding key element on the form. The            EveryValue  service command is available through the            ServiceCommands  subobject of the Summary object of the            Content  object that corresponds to the form. This service command         specifies that every record of the specific type should be processed during export.  For example, if you want to export all stock item records available in the system, you should         insert the  EveryInventoryID  service command, as the following code         shows. //stockItemsSchema is an IN202500Content object
var commands = new Command[]
{
   stockItemsSchema.StockItemSummary.ServiceCommands.EveryInventoryID,
   ...
}; Export of a Group of Records from a Form You can filter the data available       in the  Acumatica ERP database to select the records for export. For example, you can configure the system to       export only the records that have a particular status.  To define a filter for the data         being exported, you should create an array of  Filter  objects and add the         needed filters to it. To define a filter, you should specify:  The UI element whose value should be used for filtering (in the                Field  property of the  Filter  object). The value or values with which the value of the element should be compared (in the                Value  property or  Value  and                Value2  properties of the  Filter  object). The condition of comparison (in the  Condition  property of the                Filter  object). If you define multiple filters in the array, you should also specify the logical         operator (either  And  or  Or ) that defines how to apply         these filters. If filters are passed to an  Export()  method, during         export, the system selects only the records that conform to the specified condition (or         conditions) and exports only these records.  For example, suppose that you want to         export only the stock item records that have the  Active  status. In this case, you can         specify the filtering condition that the  Item Status  element should         be equal to  Active , as the following code shows. During export, the system processes         the records that match the filtering conditions and exports only the records with the            Active          status. var filters = new Filter[]
{
    new Filter
    {
         Field = stockItemsSchema.StockItemSummary.ItemStatus,
         Condition = FilterCondition.Equals,
         Value = "Active",
    }
}; For         filtering records, you can use either the data fields of the Summary object of the form from         which you are exporting data, or the data fields of the data access class (DAC) underlying         the Summary object. (In  Acumatica Framework,         this DAC is called the main DAC of the primary data view.) If a data field of the DAC is not         available directly through the elements of the Summary object, you cannot select the needed            Field  object among the subobjects of a  Content          object, as the previous code example shows for the  ItemStatus  data field.         Instead, you should create a new  Field  object and specify its properties         as follows: Specify the name of the Summary object as  ObjectName  (that         is, the object name that corresponds to the object to which the key data field belongs), and         type the name of the data field as  FieldName  in the code directly.          The following example shows filtering by the  LastModifiedDateTime          data field (which specifies the date and time when a record was modified) that is available         through the DAC underlying the  StockItemSummary  object of the   ([~/?ScreenId=IN202500|IN202500]) Stock Items form.          new Filter
{
    Field = new Field 
    {
         ObjectName = stockItemsSchema.StockItemSummary.InventoryID.ObjectName,
         FieldName = "LastModifiedDateTime" 
    },
    Condition = FilterCondition.Greater,
    Value = DateTime.Now.AddMonths(-1).ToLongDateString()
} ]]></column>
		</row>
		<row PageID="2821c688-6e5b-4636-93c8-6c78545701f7" Language="en-US" PageRevisionID="1" Content="&#xA;As you specify the sequence of commands in an array of &lt;tt&gt;Command&lt;/tt&gt; objects, when you need to specify the value of an element on a form, you should use &lt;tt&gt;Value&lt;/tt&gt; commands.{br}&#xA;&#xA;To set the value of an element on a form, you should do the following:[anchor|#ol_kjm_2wn_ht]&#xA;#Create a &lt;tt&gt;Value&lt;/tt&gt; object.&#xA;#Specify the value of the element on the form in the &lt;tt&gt;Value&lt;/tt&gt; property of the created &lt;tt&gt;Value&lt;/tt&gt; object.&#xA;#Specify the element on the form whose value should be set by using the &lt;tt&gt;LinkedCommand&lt;/tt&gt; property of the &lt;tt&gt;Value&lt;/tt&gt; object.&#xA;{br}&#xA;&#xA;The following code illustrates setting the value of the '''Customer Name''' element on the [HelpRoot_FormReference\AR_30_30_00|Customers] ([~/?ScreenId=AR303000|AR303000]) form.&lt;source lang=&quot;csharp&quot;&gt;//custSchema is an AR303000Content object&#xA;var commands = new Command[]&#xA;{&#xA;    ...&#xA;    new Value &#xA;    {&#xA;        Value = &quot;John Good&quot;, &#xA;        LinkedCommand = custSchema.CustomerSummary.CustomerName &#xA;    },&#xA;    ...&#xA;}&lt;/source&gt;" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="c4aff3ff-a1a0-09e9-be3a-db3c000b742a" RecordSourceID="22377">
			<column name="PlainText"><![CDATA[Commands for Setting the Values of Elements As you specify the sequence of commands in an array of  Command  objects, when             you need to specify the value of an element on a form, you should use                  Value  commands. To set the value of an element on a form, you should do the following: Create a  Value  object. Specify the value of the element on the form in the  Value                      property of the created  Value  object. Specify the element on the form whose value should be set by using the                          LinkedCommand  property of the  Value                      object. The following code illustrates setting the value of the  Customer Name              element on the   ([~/?ScreenId=AR303000|AR303000]) Customers             (AR303000)             form. //custSchema is an AR303000Content object
var commands = new Command[]
{
    ...
    new Value 
    {
        Value = "John Good", 
        LinkedCommand = custSchema.CustomerSummary.CustomerName 
    },
    ...
} ]]></column>
		</row>
		<row PageID="2b88f7ea-e3e9-4d94-a334-98dc054afd03" Language="en-US" PageRevisionID="1" Content="&#xA;As you specify the sequence of commands in an array of &lt;tt&gt;Command&lt;/tt&gt; objects, when you need to reflect the clicking of a button on a form (such as clicking '''Save''', '''Delete''', or '''Release''' to perform the action on a document), you should use the corresponding &lt;tt&gt;Action&lt;/tt&gt; command. Actions are available for all buttons on the form. {br}&#xA;&#xA;In an array of &lt;tt&gt;Command&lt;/tt&gt; objects, to use an &lt;tt&gt;Action&lt;/tt&gt; command, you have to select the needed action in the &lt;tt&gt;Actions&lt;/tt&gt; subobject of the &lt;tt&gt;Content&lt;/tt&gt; object that corresponds to the form. Actions have names that are similar to the names of the buttons on the form.{br}&#xA;&#xA;The following code reflects the clicking of the '''Save''' button on the [HelpRoot_FormReference\AR_30_30_00|Customers] ([~/?ScreenId=AR303000|AR303000]) form in a command.&lt;source lang=&quot;csharp&quot;&gt;//custSchema is an AR303000Content object&#xA;var commands = new Command[]&#xA;{&#xA;    ...&#xA;    custSchema.Actions.Save,&#xA;    ...&#xA;};&lt;/source&gt;" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="68e6c974-cf8a-3fc9-11e6-bb15ace2d8b9" RecordSourceID="22377">
			<column name="PlainText"><![CDATA[Commands for Clicking Buttons on a Form As you specify the sequence of commands in an array of  Command  objects,                 when you need to reflect the clicking of a button on a form (such as clicking                      Save ,  Delete , or                      Release  to perform the action on a document), you should                 use the corresponding  Action  command. Actions are available for                 all buttons on the form.  In an array of  Command  objects, to use an  Action                  command, you have to select the needed action in the  Actions                  subobject of the  Content  object that corresponds to the form.                 Actions have names that are similar to the names of the buttons on the form. The following code reflects the clicking of the  Save  button on the                       ([~/?ScreenId=AR303000|AR303000]) Customers                 (AR303000) form in a                 command. //custSchema is an AR303000Content object
var commands = new Command[]
{
    ...
    custSchema.Actions.Save,
    ...
}; ]]></column>
		</row>
		<row PageID="f5638d5c-17e8-49ff-92d2-435c9f3078cf" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="34d7791c-1aaa-0f1b-1a35-b3046c40e733" RecordSourceID="22377">
			<column name="Content"><![CDATA[
When you need to add a detail line to an Acumatica ERP form, you can use one of the following approaches: [anchor|#ul_dqx_bdj_jt]
*Add detail lines one by one on the Details tab of the form. For example, on the [HelpRoot_FormReference\SO_30_10_00|Sales Orders] ([~/?ScreenId=SO301000|SO301000]) form, you can click '''Add Row''' on the '''Document Details''' tab and specify the values of the elements of each detail line.
*Add detail lines by using a pop-up panel. For example, on the [HelpRoot_FormReference\SO_30_20_00|Shipments] ([~/?ScreenId=SO302000|SO302000]) form, you can use the '''Add Sales Order''' pop-up panel, which is opened when you click '''Add Order''' on the table toolbar of the '''Document Details''' tab.
{br}

In this topic, you will find the description of the <tt>NewRow</tt> command, which imitates the first approach listed above in the screen-based API. The second approach is described in [HelpRoot_Dev_Integration\IS__con_SB_PopupPanel|Commands for Pop-Up Panels].
==NewRow Service Command==
When you are specifying the sequence of commands in an array of <tt>Command</tt> objects for a processing method and you need to add a new detail line to a document, you should use commands as follows:[anchor|#ol_ixb_f3j_jt]
#To add a new row, use the <tt>NewRow</tt> service command, which is an available service command of the Details subobject of a <tt>Content</tt> object. 
#To specify the values of the elements of the created row, use the <tt>Value</tt> commands corresponding to the elements.
{br}

The following code shows an example of an order line being added to a sales order.<source lang="csharp">//orderSchema is an SO301000Content object 
var commands = new Command[]
{
    ...
    orderSchema.DocumentDetails.ServiceCommands.NewRow,
    new Value 
    {
        Value = "AALEGO500", 
        LinkedCommand = orderSchema.DocumentDetails.InventoryID 
    },
    new Value 
    {
        Value = "10.0", 
        LinkedCommand = orderSchema.DocumentDetails.Quantity 
    },
    new Value 
    {
        Value = firstItemUOM, 
        LinkedCommand = orderSchema.DocumentDetails.UOM 
    },
    ...
}</source>]]></column>
			<column name="PlainText"><![CDATA[Commands for Adding Detail Lines When you need to add a detail line to an  Acumatica ERP form, you can use one of the following approaches:  Add detail lines one by one on the Details tab of the form. For example, on                         the   ([~/?ScreenId=SO301000|SO301000]) Sales Orders                         (SO301000) form, you can click  Add Row  on the                              Document Details  tab and specify the values of                         the elements of each detail line. Add detail lines by using a pop-up panel. For example, on the   ([~/?ScreenId=SO302000|SO302000]) Shipments                         (SO302000) form, you can use the  Add Sales Order                          pop-up panel, which is opened when you click  Add                             Order  on the table toolbar of the  Document                             Details  tab. In this topic, you will find the description of the  NewRow  command, which                 imitates the first approach listed above in the screen-based API. The second                 approach is described in  Commands for Pop-Up Panels. NewRow Service Command When you are specifying the sequence of commands in an array of  Command                  objects for a processing method and you need to add a new detail line to a document,                 you should use commands as follows: To add a new row, use the  NewRow  service command, which                         is an available service command of the Details subobject of a                              Content  object.  To specify the values of the elements of the created row, use the                              Value  commands corresponding to the elements. The following code shows an example of an order line being added to a sales                 order. //orderSchema is an SO301000Content object 
var commands = new Command[]
{
    ...
    orderSchema.DocumentDetails.ServiceCommands.NewRow,
    new Value 
    {
        Value = "AALEGO500", 
        LinkedCommand = orderSchema.DocumentDetails.InventoryID 
    },
    new Value 
    {
        Value = "10.0", 
        LinkedCommand = orderSchema.DocumentDetails.Quantity 
    },
    new Value 
    {
        Value = firstItemUOM, 
        LinkedCommand = orderSchema.DocumentDetails.UOM 
    },
    ...
} ]]></column>
		</row>
		<row PageID="1efc8a35-443f-4133-884c-0f0c44beb29c" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="c057c4bf-5a9e-3537-2457-d24f961cd945" RecordSourceID="22377">
			<column name="Content"><![CDATA[In this topic, you will learn how to enter data to pop-up dialog boxes and pop-up forms by using the screen-based SOAP API.
==Pop-Up Dialog Boxes==
When you update specific fields on some forms under certain circumstances, the system displays pop-up dialog boxes where you need to respond to a question (by clicking a button) in order to proceed. For example, when you update the '''Customer Class''' value on the [HelpRoot_FormReference\AR_30_30_00|Customers] ([~/?ScreenId=AR303000|AR303000]) form for an existing customer, the system displays a '''Warning''' dialog box with the text ''Please confirm if you want to update current customer settings with the customer class defaults. Otherwise, original settings will be preserved.'' and the '''Yes''' and '''No''' buttons. You should click '''Yes''' to proceed with changing the customer class. {br}

When you are specifying the sequence of commands in an array of <tt>Command</tt> objects for a processing method and you need to specify an answer to a question that would appear in a pop-up dialog box if the data was being entered manually, you should create a <tt>Value</tt> command and set its properties as follows:[anchor|#ul_z3g_nb4_ht]
*In the <tt>Value</tt> property, specify the answer that you select in the dialog box during manual entry of a record.
*In the <tt>LinkedCommand</tt> property, use a <tt>DialogAnswer</tt> service command, which is available through the <tt>ServiceCommands</tt> subobject of an object that invokes the appearance of the pop-up dialog box.
You should insert this <tt>Value</tt> command directly before the field that causes the appearance of the dialog box. {br}

The following code shows how you would update the customer class in an existing customer record on the [HelpRoot_FormReference\AR_30_30_00|Customers] form. <source lang="csharp">//custSchema is an AR303000Content object
var commands = new Command[]
{
    ...
    new Value 
    {
        Value = "Yes", 
        LinkedCommand = custSchema.CustomerSummary.ServiceCommands.DialogAnswer
    },
    new Value 
    {
        Value = "INTL", 
        LinkedCommand = custSchema.GeneralInfoFinancialSettings.CustomerClass 
    },
    ...
};</source>
==Pop-Up Forms==
When you click specific buttons on some forms, the system opens a pop-up window with another Acumatica ERP form where you can specify or edit the values of elements as needed. For example, if you click '''Add Contact''' on the '''Contacts''' tab of the [HelpRoot_FormReference\AR_30_30_00|Customers] form, the system displays the [HelpRoot_FormReference\CR_30_20_00|Contacts] ([~/?ScreenId=CR302000|CR302000]) form. ((({S:Hint}Do not confuse a situation when the system opens a pop-up window that contains an Acumatica ERP form with a situation when the system opens a pop-up panel (where you can specify needed settings but no Acumatica ERP form is shown). A pop-up window that contains a form has an address line in the browser where you can see the ID of the form. A pop-up panel looks like a dialog box and does not have an address line.
)))
When you are specifying a sequence of commands in an array of <tt>Command</tt> objects for a processing method and you need to reflect the setting of values of elements of a pop-up form in these commands, you should perform the following steps:[anchor|#ol_kjw_jp1_3t]
#Call an action that invokes a pop-up form as follows:
##By using the <tt>GetSchema()</tt> method of the {{PX.Soap.Helper}} class, get the <tt>Content</tt> object that corresponds to the form that invokes a pop-up form.
##Specify the command that invokes a pop-up form in the sequence of commands by using the corresponding <tt>Action</tt> command.
##Submit this sequence of commands to the form that invokes the pop-up form by using the corresponding <tt>Submit()</tt> method.
#Specify the values on the pop-up form as follows:
##By using the <tt>GetSchema()</tt> method of the {{PX.Soap.Helper}} class, get the <tt>Content</tt> object that corresponds to the form that appears as a pop-up.
##Specify the list of commands that specifies the values of needed elements of the pop-up form.
##Add the <tt>Save</tt> action to the list of commands.
##Submit this sequence of commands to the pop-up form by using the corresponding <tt>Submit()</tt> method.
{br}

The following code illustrates the setting of the values of the [HelpRoot_FormReference\CR_30_20_00|Contacts] form, which appears as a pop-up after the user clicks '''Add Contact''' on the '''Contacts''' tab of the [HelpRoot_FormReference\AR_30_30_00|Customers] form.<source lang="csharp">//context is a Screen object
//custSchema is an AR303000Content object
var commands = new Command[]
{
    new Value 
    {
        Value = customerID, 
        LinkedCommand = custSchema.CustomerSummary.CustomerID 
    },

    custSchema.Actions.NewContact
};
context.AR303000Submit(commands);

//contSchema is a CR302000Content object
commands = new Command[]
{
    new Value 
    {
        Value = "Green", 
        LinkedCommand = contSchema.DetailsSummary.LastName 
    },
    contSchema.Actions.Save,
};
context.CR302000Submit(commands);</source>]]></column>
			<column name="PlainText"><![CDATA[Commands for Pop-Up Dialog Boxes and Pop-Up Forms In this topic, you will learn how to enter data to pop-up dialog boxes and pop-up             forms by using the screen-based SOAP API. Pop-Up Dialog Boxes When you update specific fields on some forms under certain circumstances, the system                 displays pop-up dialog boxes where you need to respond to a question (by clicking a                 button) in order to proceed. For example, when you update the  Customer                     Class  value on the   ([~/?ScreenId=AR303000|AR303000]) Customers (AR303000)                 form for an existing customer, the system displays a  Warning                  dialog box with the text  Please confirm if you want to update current customer                     settings with the customer class defaults. Otherwise, original settings will be                     preserved.  and the  Yes  and  No                  buttons. You should click  Yes  to proceed with changing the                 customer class.  When you are specifying the sequence of commands in an array of                      Command  objects for a processing method and you need to                 specify an answer to a question that would appear in a pop-up dialog box if the data                 was being entered manually, you should create a  Value  command and                 set its properties as follows: In the  Value  property, specify the answer that you select                         in the dialog box during manual entry of a record. In the  LinkedCommand  property, use a                              DialogAnswer  service command, which is available                         through the  ServiceCommands  subobject of an object that                         invokes the appearance of the pop-up dialog box. You should insert this  Value  command directly before the                 field that causes the appearance of the dialog box.  The following code shows how you would update the customer class in an existing                 customer record on the   ([~/?ScreenId=AR303000|AR303000]) Customers form.                  //custSchema is an AR303000Content object
var commands = new Command[]
{
    ...
    new Value 
    {
        Value = "Yes", 
        LinkedCommand = custSchema.CustomerSummary.ServiceCommands.DialogAnswer
    },
    new Value 
    {
        Value = "INTL", 
        LinkedCommand = custSchema.GeneralInfoFinancialSettings.CustomerClass 
    },
    ...
}; Pop-Up Forms When you click specific buttons on some forms, the system opens a pop-up window with                 another  Acumatica ERP form where you can specify or edit the values of elements as needed. For example,                 if you click  Add Contact  on the                      Contacts  tab of the   ([~/?ScreenId=AR303000|AR303000]) Customers form, the system                 displays the   ([~/?ScreenId=CR302000|CR302000]) Contacts                 (CR302000) form.  Do not confuse a situation when the system opens a pop-up window that contains an                      Acumatica ERP form with a situation when the system opens a pop-up panel (where you can specify                 needed settings but no  Acumatica ERP form is shown). A pop-up window that contains a form has an address line in the                 browser where you can see the ID of the form. A pop-up panel looks like a dialog box                 and does not have an address line. When you are specifying a sequence of commands in an array of                      Command  objects for a processing method and you need to                 reflect the setting of values of elements of a pop-up form in these commands, you                 should perform the following steps: Call an action that invokes a pop-up form as follows: By using the  GetSchema()  method of the                                      PX.Soap.Helper  class, get the                                      Content  object that corresponds to the form                                 that invokes a pop-up form. Specify the command that invokes a pop-up form in the sequence of                                 commands by using the corresponding  Action                                  command. Submit this sequence of commands to the form that invokes the pop-up                                 form by using the corresponding  Submit()                                  method. Specify the values on the pop-up form as follows: By using the  GetSchema()  method of the                                      PX.Soap.Helper  class, get the                                      Content  object that corresponds to the form                                 that appears as a pop-up. Specify the list of commands that specifies the values of needed                                 elements of the pop-up form. Add the  Save  action to the list of commands. Submit this sequence of commands to the pop-up form by using the                                 corresponding  Submit()  method. The following code illustrates the setting of the values of the   ([~/?ScreenId=CR302000|CR302000]) Contacts form, which                 appears as a pop-up after the user clicks  Add Contact  on the                      Contacts  tab of the   ([~/?ScreenId=AR303000|AR303000]) Customers                 form. //context is a Screen object
//custSchema is an AR303000Content object
var commands = new Command[]
{
    new Value 
    {
        Value = customerID, 
        LinkedCommand = custSchema.CustomerSummary.CustomerID 
    },

    custSchema.Actions.NewContact
};
context.AR303000Submit(commands);

//contSchema is a CR302000Content object
commands = new Command[]
{
    new Value 
    {
        Value = "Green", 
        LinkedCommand = contSchema.DetailsSummary.LastName 
    },
    contSchema.Actions.Save,
};
context.CR302000Submit(commands); ]]></column>
		</row>
		<row PageID="0ff94cd6-a46e-4cf7-8b97-51b79a6b3257" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="aec80229-029d-b903-6bcd-25f8bb8544bd" RecordSourceID="22377">
			<column name="Content"><![CDATA[
In some instances, when you click a specific button on some form, the system opens a pop-up panel, where you can set the values of needed elements. This pop-up panel looks like a dialog box and does not contain an Acumatica ERP form. For example, if you click '''Add Order''' on the table toolbar of the '''Document Details''' tab of the [HelpRoot_FormReference\SO_30_20_00|Shipments] ([~/?ScreenId=SO302000|SO302000]) form, the system displays the '''Add Sales Order''' pop-up panel. ((({S:Hint}Do not confuse a situation when the system opens a pop-up panel (where you can set needed settings but no Acumatica ERP form is shown) with a situation when the system opens a pop-up window that contains an Acumatica ERP form. A pop-up window that contains a form has an address line in the browser where you can see the ID of the form. A pop-up panel looks like a dialog box and does not have an address line.
))){br}

When you are specifying a sequence of commands in an array of <tt>Command</tt> objects for a processing method and you need to reflect the setting of values of elements on a pop-up panel in these commands, you should perform the following steps:[anchor|#ol_kjw_jp1_3t]
#Insert the <tt>DialogAnswer</tt> service command of the pop-up panel object before the action that opens the panel, and set the <tt>Commit</tt> property to {{true}} for this command.
#Specify the action that opens the pop-up panel, and set the <tt>Commit</tt> property of the action to {{true}}.
#Specify the values of elements as needed on the pop-up panel. 
#Specify the action that closes the panel, and set the <tt>Commit</tt> property of the action to {{true}}. 
#:((({S:Hint}For some pop-up panels, you need to specify only one action to select values from the pop-up panel. For example, you need to specify only one action if you are creating a shipment by using the '''Create Shipment''' action on the [HelpRoot_FormReference\SO_30_10_00|Sales Orders] ([~/?ScreenId=SO301000|SO301000]) form, which displays the '''Specify Shipment Parameters''' pop-up panel. 
)))
{br}

The following code illustrates the setting of the values on the '''Add Sales Order''' pop-up panel, which appears after a user clicks '''Add Order''' on the toolbar of the '''Document Details''' tab of the [HelpRoot_FormReference\SO_30_20_00|Shipments] form.<source lang="csharp">//shipmentSchema is a SO302000Content object
//Force a commit for the SelectSO action
var selectSOwithCommit = shipmentSchema.Actions.SelectSO;
selectSOwithCommit.Commit = true;

//Force a commit for the AddSO action
var addSOwithCommit = shipmentSchema.Actions.AddSO;
addSOwithCommit.Commit = true;

//Configure the list of commands
var commands = new Command[]
{
  ...
  //Open the Add Sales Order panel
  new Value 
  {
    Value = "OK", 
    LinkedCommand = 
     shipmentSchema.AddSalesOrderOperation.ServiceCommands.DialogAnswer, 
    Commit = true 
  },
  selectSOwithCommit,
                
  //Specify the first order number on the Add Sales Order panel
  //and get the values of item elements
  new Value 
  {
    Value = firstOrderNbr, 
    LinkedCommand = shipmentSchema.AddSalesOrderOperation.OrderNbr 
  }, 
  new Value
  {
    Value = "True",
    LinkedCommand = shipmentSchema.AddSalesOrder.Selected
  },
  shipmentSchema.AddSalesOrder.InventoryID,
  shipmentSchema.AddSalesOrder.Quantity,
  shipmentSchema.AddSalesOrder.OpenQty,
  shipmentSchema.AddSalesOrder.LineDescription,
};
//context is a Screen object
//Submit the commands to the form
var soLines = context.SO302000Submit(commands);

//Select all items of the first order for shipment
List&lt;Command&gt; commandList = new List&lt;Command&gt;();
for (int index = 0; index &lt; soLines.Length; index++)
{
  commandList.Add(new Value
  {
    Value = index.ToString(),
    LinkedCommand = shipmentSchema.AddSalesOrder.ServiceCommands.RowNumber
  });
  commandList.Add(new Value
  {
    Value = "True",
    LinkedCommand = shipmentSchema.AddSalesOrder.Selected,
    Commit = index &lt; soLines.Length - 1
  });
}

//Add items to the shipment
commandList.Add(addSOwithCommit);
context.SO302000Submit(commandList.ToArray());</source>]]></column>
			<column name="PlainText"><![CDATA[Commands for Pop-Up Panels In some instances, when you click a specific button on some form, the system opens a pop-up       panel, where you can set the values of needed elements. This pop-up panel looks like a dialog       box and does not contain an  Acumatica ERP form. For example, if you click  Add Order  on the table toolbar of       the  Document Details  tab of the   ([~/?ScreenId=SO302000|SO302000]) Shipments (SO302000) form, the       system displays the  Add Sales Order  pop-up panel.  Do not confuse         a situation when the system opens a pop-up panel (where you can set needed settings but no            Acumatica ERP form is shown) with a situation when the system opens a pop-up window that contains an            Acumatica ERP form. A pop-up window that contains a form has an address line in the browser where you         can see the ID of the form. A pop-up panel looks like a dialog box and does not have an         address line. When you are specifying a sequence of commands in an array of  Command        objects for a processing method and you need to reflect the setting of values of elements on a       pop-up panel in these commands, you should perform the following steps: Insert the  DialogAnswer  service command of the pop-up panel object           before the action that opens the panel, and set the  Commit  property to              true  for this command. Specify the action that opens the pop-up panel, and set the  Commit            property of the action to  true . Specify the values of elements as needed on the pop-up panel.  Specify the action that closes the panel, and set the  Commit  property           of the action to  true .  For some pop-up panels, you need to specify             only one action to select values from the pop-up panel. For example, you need to specify             only one action if you are creating a shipment by using the  Create               Shipment  action on the   ([~/?ScreenId=SO301000|SO301000]) Sales Orders (SO301000) form,             which displays the  Specify Shipment Parameters  pop-up panel.            The following code illustrates the setting of the values on the  Add Sales         Order  pop-up panel, which appears after a user clicks  Add         Order  on the toolbar of the  Document Details  tab of the           ([~/?ScreenId=SO302000|SO302000]) Shipments       form. //shipmentSchema is a SO302000Content object
//Force a commit for the SelectSO action
var selectSOwithCommit = shipmentSchema.Actions.SelectSO;
selectSOwithCommit.Commit = true;

//Force a commit for the AddSO action
var addSOwithCommit = shipmentSchema.Actions.AddSO;
addSOwithCommit.Commit = true;

//Configure the list of commands
var commands = new Command[]
{
  ...
  //Open the Add Sales Order panel
  new Value 
  {
    Value = "OK", 
    LinkedCommand = 
     shipmentSchema.AddSalesOrderOperation.ServiceCommands.DialogAnswer, 
    Commit = true 
  },
  selectSOwithCommit,
                
  //Specify the first order number on the Add Sales Order panel
  //and get the values of item elements
  new Value 
  {
    Value = firstOrderNbr, 
    LinkedCommand = shipmentSchema.AddSalesOrderOperation.OrderNbr 
  }, 
  new Value
  {
    Value = "True",
    LinkedCommand = shipmentSchema.AddSalesOrder.Selected
  },
  shipmentSchema.AddSalesOrder.InventoryID,
  shipmentSchema.AddSalesOrder.Quantity,
  shipmentSchema.AddSalesOrder.OpenQty,
  shipmentSchema.AddSalesOrder.LineDescription,
};
//context is a Screen object
//Submit the commands to the form
var soLines = context.SO302000Submit(commands);

//Select all items of the first order for shipment
List<Command> commandList = new List<Command>();
for (int index = 0; index < soLines.Length; index++)
{
  commandList.Add(new Value
  {
    Value = index.ToString(),
    LinkedCommand = shipmentSchema.AddSalesOrder.ServiceCommands.RowNumber
  });
  commandList.Add(new Value
  {
    Value = "True",
    LinkedCommand = shipmentSchema.AddSalesOrder.Selected,
    Commit = index < soLines.Length - 1
  });
}

//Add items to the shipment
commandList.Add(addSOwithCommit);
context.SO302000Submit(commandList.ToArray()); ]]></column>
		</row>
		<row PageID="748c9761-8fc2-41cf-820e-fecca16a6d22" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="81433d02-057d-89f2-143d-1b4843008751" RecordSourceID="22377">
			<column name="Content"><![CDATA[
The system uses the key element or elements on a form to find records that belong to different documents. For example, on the [HelpRoot_FormReference\AR_30_10_00|Invoices and Memos] ([~/?ScreenId=AR301000|AR301000]) form, there are two key elements: '''Type''' and '''Reference Nbr'''. {br}

If you know the values of the key element or elements of the needed record, you can select this record for update by specifying the key values in the sequence of commands that you pass to the processing method of the web services API. In the sequence of commands, you should first specify key element or elements to identify the record that you are going to update. After you have specified the values of key element or elements, you should specify the values of other elements in the order in which you would specify them on the form.{br}

If you do not know the values of the key element or elements of the needed record, you can update records in the system by searching for them using their unique field values that you know. For example, you can identify customers by email addresses or phone numbers. To search for a record, you have to imitate the use of a column of a '''Select''' dialog box, declare a custom key, or declare a custom field in the sequence of commands that you pass to a processing method. In this topic, you will find a detailed description of the <tt>Filter</tt> service command, which imitates the use of a selector column. You can find a description of two other approaches in [HelpRoot_Dev_Integration\IS__con_SB_Commands_Key|Commands for Record Searching: Key Command] and [HelpRoot_Dev_Integration\IS__con_SB_Commands_!FieldName|Commands for Record Searching: Custom Field]. 
==Filter Service Command==
Selector columns on an Acumatica ERP form appear when a user clicks the Magnifier icon of the key element of the form to bring up the '''Select''' dialog box. Service commands for selector columns have the <tt>Filter</tt> prefix in their names. For example, to search for a customer record, you can use the <tt>FilterCity</tt>, <tt>FilterCountry</tt>, <tt>FilterEmail</tt>, and <tt>FilterPhone1</tt> service commands.{br}

To use a column of a '''Select''' dialog box for a search, you have to do the following: [anchor|#ol_hwz_z5r_ht]
#Create a <tt>Field</tt> object, and initialize its properties with the values of the properties of the key field.
#Concatenate the <tt>FieldName</tt> property of this object (which is now equal to the value of the <tt>FieldName</tt> property of the key field) with {{!}} and the <tt>FieldName</tt> property of the needed <tt>Filter</tt> service command.
#In the <tt>Value</tt> command in the array of <tt>Command</tt> objects, set the <tt>Value</tt> property to the value that should be used for the search and the <tt>LinkedCommand</tt> property to the created <tt>Field</tt> object.
{br}

For example, the following code searches for a customer record by email address.<source lang="csharp">//custSchema is an AR303000Content object
Field customerIDSelector = custSchema.CustomerSummary.CustomerID;
customerIDSelector.FieldName += "!" + 
        custSchema.CustomerSummary.ServiceCommands.FilterEmail.FieldName;

var commands = new Command[]
{
    new Value 
    {
        Value = "demo@gmail.com", 
        LinkedCommand = customerIDSelector 
    },
    ...
};</source>{br}

((({S:Hint}If you need to get the value of the field that was used for a search as a result of the processing, you should assign an initial <tt>FieldName</tt> to the field before getting the value. For example, the following code shows how to get the value of the Customer ID element after you have modified the corresponding field for the search.<source lang="csharp">//custSchema is an AR303000Content object
//Save the initial field name of the CustomerID field
string initialCustomerIDFieldName = 
custSchema.CustomerSummary.CustomerID.FieldName;

//Configure the command that searches for a customer record 
//by using the FilterEmail service command
Field customerIDSelector = custSchema.CustomerSummary.CustomerID;
customerIDSelector.FieldName += "!" +
custSchema.CustomerSummary.ServiceCommands.FilterEmail.FieldName;

//Configure the list of commands
var commands = new Command[]
{ 
    //Search for the needed customer record
    new Value 
    {
         Value = customerMainContactEmail, 
         LinkedCommand = customerIDSelector 
    },

    //Do the needed modifications and save changes on the form
    ...
};

//context is a Screen object
//Submit commands to the form
context.AR303000Submit(commands);

//Assign an initial field name to the CustomerID field
custSchema.CustomerSummary.CustomerID.FieldName = initialCustomerIDFieldName;

//Get the customer ID
commands = new Command[]
{
    custSchema.CustomerSummary.CustomerID
};

//Submit commands to the form
AR303000Content customer = context.AR303000Submit(commands)[0];</source>
)))]]></column>
			<column name="PlainText"><![CDATA[Commands for Record Searching: Filter Service Command The system uses the key element or elements on a form to find records that belong to different         documents. For example, on the   ([~/?ScreenId=AR301000|AR301000]) Invoices and Memos (AR301000) form, there         are two key elements:  Type  and  Reference Nbr .  If you know the values of the key element or elements of the needed record, you can select         this record for update by specifying the key values in the sequence of commands that you         pass to the processing method of the web services API. In the sequence of commands, you         should first specify key element or elements to identify the record that you are going to         update. After you have specified the values of key element or elements, you should specify         the values of other elements in the order in which you would specify them on the form. If you do not know the values of the key element or elements of the needed record, you can         update records in the system by searching for them using their unique field values that you         know. For example, you can identify customers by email addresses or phone numbers. To search         for a record, you have to imitate the use of a column of a  Select          dialog box, declare a custom key, or declare a custom field in the sequence of commands that         you pass to a processing method. In this topic, you will find a detailed description of the            Filter  service command, which imitates the use of a selector column.         You can find a description of two other approaches in  Commands for Record Searching: Key Command and  Commands for Record Searching: Custom Field.  Filter Service Command Selector columns on an  Acumatica ERP form appear when a user clicks the Magnifier icon of the key element of the form to bring         up the  Select  dialog box. Service commands for selector columns have         the  Filter  prefix in their names. For example, to search for a customer         record, you can use the  FilterCity ,  FilterCountry ,            FilterEmail , and  FilterPhone1  service commands. To use a column of a  Select  dialog box for a search, you have to do the         following:  Create a  Field  object, and initialize its properties with the             values of the properties of the key field. Concatenate the  FieldName  property of this object (which is now             equal to the value of the  FieldName  property of the key field) with                !  and the  FieldName  property of the needed                Filter  service command. In the  Value  command in the array of  Command              objects, set the  Value  property to the value that should be used for             the search and the  LinkedCommand  property to the created                Field  object. For example, the following code searches for a customer record by email         address. //custSchema is an AR303000Content object
Field customerIDSelector = custSchema.CustomerSummary.CustomerID;
customerIDSelector.FieldName += "!" + 
        custSchema.CustomerSummary.ServiceCommands.FilterEmail.FieldName;

var commands = new Command[]
{
    new Value 
    {
        Value = "demo@gmail.com", 
        LinkedCommand = customerIDSelector 
    },
    ...
}; If you need to get the value of the field that was used for a search as a result of           the processing, you should assign an initial  FieldName  to the field           before getting the value. For example, the following code shows how to get the value of           the Customer ID element after you have modified the corresponding field for the           search. //custSchema is an AR303000Content object
//Save the initial field name of the CustomerID field
string initialCustomerIDFieldName = 
custSchema.CustomerSummary.CustomerID.FieldName;

//Configure the command that searches for a customer record 
//by using the FilterEmail service command
Field customerIDSelector = custSchema.CustomerSummary.CustomerID;
customerIDSelector.FieldName += "!" +
custSchema.CustomerSummary.ServiceCommands.FilterEmail.FieldName;

//Configure the list of commands
var commands = new Command[]
{ 
    //Search for the needed customer record
    new Value 
    {
         Value = customerMainContactEmail, 
         LinkedCommand = customerIDSelector 
    },

    //Do the needed modifications and save changes on the form
    ...
};

//context is a Screen object
//Submit commands to the form
context.AR303000Submit(commands);

//Assign an initial field name to the CustomerID field
custSchema.CustomerSummary.CustomerID.FieldName = initialCustomerIDFieldName;

//Get the customer ID
commands = new Command[]
{
    custSchema.CustomerSummary.CustomerID
};

//Submit commands to the form
AR303000Content customer = context.AR303000Submit(commands)[0]; ]]></column>
		</row>
		<row PageID="b34f1a13-688c-4baa-ac07-9af4d256f2a7" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="7764d32e-e232-0494-746f-b3aaf34eb923" RecordSourceID="22377">
			<column name="Content"><![CDATA[
To search for a record, you have to imitate the use of a column of a '''Select''' dialog box, declare a custom key, or declare a custom field in the sequence of commands that you pass to a processing method. In this topic, you will find a detailed description of the use of the <tt>Key</tt> command, which you use to declare a custom key. You can find descriptions of two other approaches in [HelpRoot_Dev_Integration\IS__con_SB_Commands_Filter|Commands for Record Searching: Filter Service Command] and [HelpRoot_Dev_Integration\IS__con_SB_Commands_!FieldName|Commands for Record Searching: Custom Field].
==Key Command==
If you specify the value of key elements on an Acumatica ERP form, the system does not change the current record in the system; instead, it searches for the record, which is identified by the values of the key elements, and selects this record. By using custom keys, you can make some elements on an Acumatica ERP form work as key elements.{br}

You can specify custom keys to search for a record or a detail line. You can use the fields of the summary object and the detail objects, but not the fields that belong to other objects, as custom key fields. For example, you can find the needed customer record in the system by using the <tt>CustomerName</tt> field of the <tt>AR303000CustomerSummary</tt> object of the [HelpRoot_FormReference\AR_30_30_00|Customers] ([~/?ScreenId=AR303000|AR303000]) form as the custom key, but you cannot find the record by using the <tt>Email</tt> field of the <tt>AR303000GeneralInfoMainContact</tt> object as the custom key.{br}

To specify a custom key, you have to define the key by using the <tt>Key</tt> command as follows:[anchor|#ol_r3y_m1s_jt]
#Create a <tt>Key</tt> command by using the operator {{new}}.
#To specify the element that should be used as a custom key, set the <tt>ObjectName</tt> and <tt>FieldName</tt> properties of the created <tt>Key</tt> command to the values of the <tt>ObjectName</tt> and <tt>FieldName</tt> properties of the field corresponding to the element.
#To specify the value of the custom key, set the <tt>Value</tt> property of the created <tt>Key</tt> command to the needed value in the format <tt>=&rsquo;&lt;Key value&gt;&rsquo;</tt>, where you should replace <tt>&lt;Key value&gt;</tt> with the needed value of the key.
Below is an example of the <tt>Key</tt> command that declares the '''Warehouse''' column as the custom key on the '''Document Details''' tab of the [HelpRoot_FormReference\SO_30_10_00|Sales Orders] ([~/?ScreenId=SO301000|SO301000]) form.<source lang="csharp">new Key
{
    ObjectName = orderSchema.DocumentDetails.Warehouse.ObjectName,
    FieldName = orderSchema.DocumentDetails.Warehouse.FieldName,
    Value = "='MAIN'"
},</source>]]></column>
			<column name="PlainText"><![CDATA[Commands for Record Searching: Key Command To search for a record, you have to imitate the use of a column of a            Select  dialog box, declare a custom key, or declare a custom field         in the sequence of commands that you pass to a processing method. In this topic, you will         find a detailed description of the use of the  Key  command, which you use         to declare a custom key. You can find descriptions of two other approaches in  Commands for Record Searching: Filter Service Command and  Commands for Record Searching: Custom Field. Key Command If you specify the value of key elements on an  Acumatica ERP form, the system does not change the current record in the system; instead, it searches         for the record, which is identified by the values of the key elements, and selects this         record. By using custom keys, you can make some elements on an  Acumatica ERP form work as key elements. You can specify custom keys to search for a record or a detail line. You can use the fields         of the summary object and the detail objects, but not the fields that belong to other         objects, as custom key fields. For example, you can find the needed customer record in the         system by using the  CustomerName  field of the            AR303000CustomerSummary  object of the   ([~/?ScreenId=AR303000|AR303000]) Customers (AR303000) form as the         custom key, but you cannot find the record by using the  Email  field of         the  AR303000GeneralInfoMainContact  object as the custom key. To specify a custom key, you have to define the key by using the  Key          command as follows: Create a  Key  command by using the operator              new . To specify the element that should be used as a custom key, set the                ObjectName  and  FieldName  properties of the             created  Key  command to the values of the                ObjectName  and  FieldName  properties of the field             corresponding to the element. To specify the value of the custom key, set the  Value  property of             the created  Key  command to the needed value in the format                ='<Key value>' , where you should replace  <Key               value>  with the needed value of the key. Below is an example of the  Key  command that declares the            Warehouse  column as the custom key on the  Document           Details  tab of the   ([~/?ScreenId=SO301000|SO301000]) Sales Orders (SO301000)         form. new Key
{
    ObjectName = orderSchema.DocumentDetails.Warehouse.ObjectName,
    FieldName = orderSchema.DocumentDetails.Warehouse.FieldName,
    Value = "='MAIN'"
}, ]]></column>
		</row>
		<row PageID="a4fa7888-f76f-4ad2-ae57-42ba31b17e0a" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="f4f9dd57-514c-0af8-ca57-1fa4cc8a2fb6" RecordSourceID="22377">
			<column name="Content"><![CDATA[
To search for a record, you have to imitate the use of a column of a '''Select''' dialog box, declare a custom key, or declare a custom field in the sequence of commands that you pass to a processing method. In this topic, you will find a detailed description of the declaration of a custom field. You can find descriptions of two other approaches in [HelpRoot_Dev_Integration\IS__con_SB_Commands_Filter|Commands for Record Searching: Filter Service Command] and [HelpRoot_Dev_Integration\IS__con_SB_Commands_Key|Commands for Record Searching: Key Command].
==Custom Field==
 Acumatica ERP does not include {{Filter}} service commands for all selector columns that are available on Acumatica ERP forms. To use the needed selector column for record searching, you can create a custom field as follows:{br}

[anchor|#ol_hwz_z5r_ht]
#Initialize the properties of a <tt>Field</tt> object with the values of the properties of the key field.
#Concatenate the <tt>FieldName</tt> property of this object (which is now equal to the value of the <tt>FieldName</tt> property of the key field) with {{!}} and the internal name of the selector column that you are going to use for the search. The internal name of the selector column is equal to the value of the <tt>FieldName</tt> property of the corresponding element on the form.
#In the <tt>Value</tt> command in the array of <tt>Command</tt> objects, set the <tt>Value</tt> property to the value that should be used for the search and the <tt>LinkedCommand</tt> property to the created <tt>Field</tt> object.
{br}

For example, the following code searches for a sales order by order number.{br}

<source lang="csharp">//orderSchema is an SO301000Content object
var searchCustomerOrder = orderSchema.OrderSummary.OrderNbr;
searchCustomerOrder.FieldName +=
  "!" + orderSchema.OrderSummary.CustomerOrder.FieldName;

var commands = new Command[]
{
  new Value
  {
    Value = "SO",
    LinkedCommand = orderSchema.OrderSummary.OrderType
  },
  new Value 
  {
    Value = "SO248-563-06", 
    LinkedCommand = searchCustomerOrder
  },
  ...
}</source>]]></column>
			<column name="PlainText"><![CDATA[Commands for Record Searching: Custom Field To search for a record, you have to imitate the use of a column of a                      Select  dialog box, declare a custom key, or declare a                 custom field in the sequence of commands that you pass to a processing method. In                 this topic, you will find a detailed description of the declaration of a custom                 field. You can find descriptions of two other approaches in  Commands for Record Searching: Filter Service Command                 and  Commands for Record Searching: Key Command. Custom Field  Acumatica ERP does not include  Filter  service commands for all selector                 columns that are available on  Acumatica ERP forms. To use the needed selector column for record searching, you can create a                 custom field as follows: Initialize the properties of a  Field  object with the                         values of the properties of the key field. Concatenate the  FieldName  property of this object (which                         is now equal to the value of the  FieldName  property of                         the key field) with  !  and the internal name of the selector                         column that you are going to use for the search. The internal name of the                         selector column is equal to the value of the  FieldName                          property of the corresponding element on the form. In the  Value  command in the array of                              Command  objects, set the  Value                          property to the value that should be used for the search and the                              LinkedCommand  property to the created                              Field  object. For example, the following code searches for a sales order by order number. //orderSchema is an SO301000Content object
var searchCustomerOrder = orderSchema.OrderSummary.OrderNbr;
searchCustomerOrder.FieldName +=
  "!" + orderSchema.OrderSummary.CustomerOrder.FieldName;

var commands = new Command[]
{
  new Value
  {
    Value = "SO",
    LinkedCommand = orderSchema.OrderSummary.OrderType
  },
  new Value 
  {
    Value = "SO248-563-06", 
    LinkedCommand = searchCustomerOrder
  },
  ...
} ]]></column>
		</row>
		<row PageID="d8d2b1f1-8aba-49d8-a780-63bd99881867" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="6cdcc0f7-5f8c-0af2-8cda-92734f0c947e" RecordSourceID="22377">
			<column name="Content"><![CDATA[
There are two types of elements on an Acumatica ERP form: elements with a commit, and elements without a commit. A commit is an action initiated by the form that, when triggered, sends the data to the server. On the server, the commit causes all data on the form to be updated, including the insertion of default values and the recalculation of the values of elements on the form.{br}

A commit is a costly operation that causes the browser to make requests to the server and takes server time. As such, a commit is invoked for only a limited number of elements: mainly the key elements and the elements the other elements depend on. {br}

In a Visual Studio project, if you specify the value of an element for which the system performs a commit by using a <tt>Value</tt> command, the <tt>Commit</tt> property of the <tt>LinkedCommand</tt> property (which specifies this element) is automatically set to {{true}}. You can check the value of the {{Commit}} property when you are debugging an application if you insert a breakpoint in the code after an array of commands has been configured. In the following screenshot, you can see that for the command that sets the value of the '''Customer ID''' element on the [HelpRoot_FormReference\AR_30_30_00|Customers] ([~/?ScreenId=AR303000|AR303000]) form, the <tt>Commit</tt> property of the <tt>LinkedCommand</tt> is set to {{true}}. (The '''Customer ID''' element has the internal field name {{AcctCD}}.)[anchor|#fig_ksx_bnj_jt][anchor|#image_u1m_dnj_jt][image:UserGuide/Images/WS_Commit.png|popup|Commit property|450px]{br}

If the <tt>Commit</tt> property is {{false}}, the element is filled in with data but no update of the form is invoked. If the <tt>Commit</tt> property is {{true}}, after the element is filled in, the commit is invoked on the server and the form is updated. {br}

For example, when you select a customer class on the [HelpRoot_FormReference\AR_30_30_00|Customers] form, the system assigns values to the elements related to customer class settings, such as '''Statement Cycle ID''' and '''Country'''. When you configure a sequence of commands for setting the values of elements on the [HelpRoot_FormReference\AR_30_30_00|Customers] form, for elements such as '''Customer''', the system automatically sets the <tt>Commit</tt> property of <tt>LinkedCommand</tt> to {{true}}.{br}

In most cases, when you compose the sequence of commands, you can use the values of the <tt>Commit</tt> property that are set by default. However, you may need to force the system to invoke a commit to the server—for example, when you need to commit the value of the field before entering another field value. In such cases, you should set the <tt>Commit</tt> property to {{true}} for the command or action. ]]></column>
			<column name="PlainText"><![CDATA[Commands That Require a Commit There are two types of elements on an  Acumatica ERP    form: elements with a commit, and elements without a commit. A commit is an action initiated by    the form that, when triggered, sends the data to the server. On the server, the commit causes all    data on the form to be updated, including the insertion of default values and the recalculation    of the values of elements on the form. A commit is a costly operation that causes the browser to make requests to the server and takes    server time. As such, a commit is invoked for only a limited number of elements: mainly the key    elements and the elements the other elements depend on.  In a Visual Studio project, if you specify the value of an element for which the system    performs a commit by using a  Value  command, the  Commit     property of the  LinkedCommand  property (which specifies this element) is    automatically set to  true . You can check the value of the      Commit  property when you are debugging an application if you insert a    breakpoint in the code after an array of commands has been configured. In the following    screenshot, you can see that for the command that sets the value of the  Customer     ID  element on the   ([~/?ScreenId=AR303000|AR303000]) Customers (AR303000) form, the      Commit  property of the  LinkedCommand  is set to      true . (The  Customer ID  element has the internal field    name  AcctCD .) Commit property If the  Commit  property is  false , the element is filled in    with data but no update of the form is invoked. If the  Commit  property is      true , after the element is filled in, the commit is invoked on the server and    the form is updated.  For example, when you select a customer class on the   ([~/?ScreenId=AR303000|AR303000]) Customers form, the system assigns values    to the elements related to customer class settings, such as  Statement Cycle     ID  and  Country . When you configure a sequence of commands for    setting the values of elements on the   ([~/?ScreenId=AR303000|AR303000]) Customers form, for elements such as      Customer , the system automatically sets the  Commit     property of  LinkedCommand  to  true . In most cases, when you compose the sequence of commands, you can use the values of the      Commit  property that are set by default. However, you may need to force the    system to invoke a commit to the server—for example, when you need to commit the value of    the field before entering another field value. In such cases, you should set the      Commit  property to  true  for the command or action.  ]]></column>
		</row>
		<row PageID="14f7053a-8c07-49fe-82fb-0c6fb1b459dc" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="4a2b66fe-5d57-fc2e-06c1-aa6c4352fd2c" RecordSourceID="22377">
			<column name="Content"><![CDATA[
In Acumatica ERP, you can attach files to records on Acumatica ERP forms and to detail lines on master-detail forms. {br}

To obtain a file attached to the selected record or detail line through the web services API, you specify the <tt>Value</tt> command in the array of <tt>Command</tt> objects as follows:[anchor|#_8468cb67-63ba-48a8-8d5a-2134ffe1a2e8]
*In the <tt>FieldName</tt> property, you specify the name of the file that should be obtained.
*In the <tt>LinkedCommand</tt> property, you specify the needed <tt>Attachment</tt> service command.
*:To work with a file attached to a form, you use the <tt>Attachment</tt> service command of the object that corresponds to the Summary object. For example, to obtain a file attached to a stock item record on the [HelpRoot_FormReference\IN_20_25_00|Stock Items] ([~/?ScreenId=IN202500|IN202500]) form, you use the <tt>Attachment</tt> service command of the <tt>IN202500StockItemSummary</tt> object.
*:To work with the file attached to a detail line of a master-detail form, you use the <tt>Attachment</tt> service command of the object that corresponds to the Details object. For example, to obtain the file attached to a warehouse detail line of a stock item on the [HelpRoot_FormReference\IN_20_25_00|Stock Items] form, you use the <tt>Attachment</tt> service command of the <tt>IN202500WarehouseDetails</tt> object.
{br}

The following code shows how to retrieve the file attached to a stock item record on the [HelpRoot_FormReference\IN_20_25_00|Stock Items] form.{{{{//stockItemsSchema is an IN202500Content object
var commands = new Command[]
{
  new Value 
  {
    Value = "AAMACHINE1", 
    LinkedCommand = stockItemSchema.StockItemSummary.InventoryID 
  },
  new Value 
  {
    FieldName = "T2MCRO.jpg", 
    LinkedCommand = 
     stockItemSchema.StockItemSummary.ServiceCommands.Attachment 
  }  
};
//context is a Screen object
var stockItemAttachment = 
 context.IN202500Export(commands, null, 1, false, true);
}}}}]]></column>
			<column name="PlainText"><![CDATA[Commands for Working with Attachments In  Acumatica ERP,    you can attach files to records on  Acumatica ERP    forms and to detail lines on master-detail forms.  To obtain a file attached to the selected record or detail line through the web services API,    you specify the  Value  command in the array of  Command     objects as follows: In the  FieldName  property, you specify the name of the file that should      be obtained. In the  LinkedCommand  property, you specify the needed              Attachment  service command. To work with a file attached to a form,             you use the  Attachment  service command of the object that corresponds             to the Summary object. For example, to obtain a file attached to a stock item record on             the   ([~/?ScreenId=IN202500|IN202500]) Stock Items (IN202500)             form, you use the  Attachment  service command of the                IN202500StockItemSummary  object. To work with the file             attached to a detail line of a master-detail form, you use the                Attachment  service command of the object that corresponds to the             Details object. For example, to obtain the file attached to a warehouse detail line of a             stock item on the   ([~/?ScreenId=IN202500|IN202500]) Stock Items             form, you use the  Attachment  service command of the                IN202500WarehouseDetails  object. The following code shows how to retrieve the file attached to a stock item record on the   ([~/?ScreenId=IN202500|IN202500]) Stock Items       form. //stockItemsSchema is an IN202500Content object
var commands = new Command[]
{
  new Value 
  {
    Value = "AAMACHINE1", 
    LinkedCommand = stockItemSchema.StockItemSummary.InventoryID 
  },
  new Value 
  {
    FieldName = "T2MCRO.jpg", 
    LinkedCommand = 
     stockItemSchema.StockItemSummary.ServiceCommands.Attachment 
  }  
};
//context is a Screen object
var stockItemAttachment = 
 context.IN202500Export(commands, null, 1, false, true); ]]></column>
		</row>
		<row PageID="0b80c59b-6b67-4193-92fb-c6f96e415e57" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="70fabf24-7670-a087-e6b4-5ed95ccd45a0" RecordSourceID="22377">
			<column name="Content"><![CDATA[[anchor|#_97123e67-1727-47bc-a9d4-c7ed07310f8d]
For some text boxes on Acumatica ERP forms, users can type values in multiple languages if multiple locales are configured in Acumatica ERP. For example, if your Acumatica ERP instance has English and French locales activated and multilingual user input configured, you can specify the value of the '''Description''' box on the [HelpRoot_FormReference\IN_20_25_00|Stock Items] ([~/?ScreenId=IN202500|IN202500]) form in English and French. For the list of elements that support multiple languages, see [HelpRoot_Administration\SM__CON_Boxes_MultiLanguage|Boxes that Have Multi-Language Support]. For details on how to turn on multilingual user input, see [HelpRoot_Administration\SM__CON_Locales_and_Languages#section_lqy_4c2_jw|Enabling Multilingual User Input].
==Specifying Localized Values of a Multi-Language Field==
When you need to specify localized values of a text box by using the screen-based SOAP API, you specify the value of the field that corresponds to the box as a string in JSON format with the localized values. In this string, you use the two-letter ISO code of the language with which the value should be associated.{br}

In the example that is mentioned at the beginning of the topic, if you need to specify values in English and French in the '''Description''' box on the [HelpRoot_FormReference\IN_20_25_00|Stock Items] form, you specify the value of the <tt>Description</tt> field of the <tt>StockItem</tt> entity in the following format: {{[{en:English description},{fr:French description}]}}, as shown in the following code fragment.<source lang="csharp">//stockItemSchema is an IN202500Content object
new Value 
{
    Value = "[{en:Item},{fr:Pièce}]", 
    LinkedCommand = stockItemSchema.StockItemSummary.Description 
}</source>[anchor|#_093786b4-7249-4cc4-8fe3-a9f08c3f1d61]((({S:Hint}In the JSON-formatted string, you should specify the actual values of the field in all languages that are configured for multilingual user input. If you specify the values of the field in particular languages, the values of the field in other languages configured for multilingual user input become empty. For example, suppose that in your instance of Acumatica ERP, multi-language fields can have values in English and French. If you pass the value of a field in the following format {{[{en:English description}]}}, the French value of the field becomes empty.
)))
If you specify the value of a multi-language field as plain text, this text is saved as the value of the corresponding box in the current language of Acumatica ERP (that is, either the default language of the instance or the language that you have specified by using the <tt>SetLocaleName()</tt> method). For details on how to specify the locale through the screen-based SOAP API, see [HelpRoot_Dev_Integration\IS__con_SB_SetLocaleName|SetLocaleName() Method].
==Retrieving Localized Values of a Multi-Language Field==
If you need to retrieve localized values of a text box that supports multiple input languages, you retrieve the value of an internal field that contains all localized values of the text box and has the ''Translations'' suffix in its field name. {br}

To specify the field name and the object name of the needed internal field with localized values, you specify the field name and the object name of the multi-language text box and append ''Translations'' to the field name. For example, the following code shows the command that you should use to retrieve the localized values of the '''Description''' element of the [HelpRoot_FormReference\IN_20_25_00|Stock Items] form. {{{{//stockItemSchema is an IN202500Content object
new Field
{
    ObjectName = stockItemsSchema.StockItemSummary.Description.ObjectName,
    FieldName = stockItemsSchema.StockItemSummary.Description.FieldName + 
      "Translations"
}
}}}}
The returned value of a <tt>Translations</tt> field is a string in JSON format with the available localized values of the field. The language to which the value belongs is identified by the two-letter ISO code of the language. For example, suppose that the '''Description''' element of the [HelpRoot_FormReference\IN_20_25_00|Stock Items] form has the value ''Item'' in English and ''Pièce'' in French. In this case, the value of the <tt>DescrTranslations</tt> field, which corresponds to the '''Description''' element, is the following string: {{[{en:Item},{fr:Pièce}]}}.
==Related Articles==
*[HelpRoot_Administration\SM__CON_Locales_and_Languages|Locales and Languages]
*[HelpRoot_Administration\SM__CON_Boxes_MultiLanguage|Boxes that Have Multi-Language Support]]]></column>
			<column name="PlainText"><![CDATA[Commands for Working with Multi-Language Fields For some text boxes on  Acumatica ERP forms, users can type values in multiple languages if multiple locales are                 configured in  Acumatica ERP. For example, if your  Acumatica ERP instance has English and French locales activated and multilingual user input                 configured, you can specify the value of the  Description  box                 on the   ([~/?ScreenId=IN202500|IN202500]) Stock Items                 (IN202500) form in English and French. For the list of elements that support                 multiple languages, see  Boxes that Have Multi-Language Support. For details on how to turn on multilingual user input, see  Enabling Multilingual User Input. Specifying Localized Values of a Multi-Language Field When you need to specify localized values of a text box by using the screen-based SOAP API,     you specify the value of the field that corresponds to the box as a string in JSON format with     the localized values. In this string, you use the two-letter ISO code of the language with which     the value should be associated. In the example that is mentioned at the beginning of the topic, if you need to specify values     in English and French in the  Description  box on the   ([~/?ScreenId=IN202500|IN202500]) Stock Items form, you specify the value of     the  Description  field of the  StockItem  entity in the     following format:  [{en:English description},{fr:French description}] , as shown     in the following code     fragment. //stockItemSchema is an IN202500Content object
new Value 
{
    Value = "[{en:Item},{fr:Pièce}]", 
    LinkedCommand = stockItemSchema.StockItemSummary.Description 
} In the JSON-formatted string, you should specify             the actual values of the field in all languages that are configured for multilingual             user input. If you specify the values of the field in particular languages, the values             of the field in other languages configured for multilingual user input become empty. For             example, suppose that in your instance of  Acumatica ERP,             multi-language fields can have values in English and French. If you pass the value of a             field in the following format  [{en:English description}] , the French             value of the field becomes empty. If you specify the value of a multi-language field as plain text, this text is saved as the     value of the corresponding box in the current language of  Acumatica ERP     (that is, either the default language of the instance or the language that you have specified by     using the  SetLocaleName()  method). For details on how to specify the locale     through the screen-based SOAP API, see  SetLocaleName() Method. Retrieving Localized Values of a Multi-Language Field If you need to retrieve localized values of a text box that supports multiple input languages,     you retrieve the value of an internal field that contains all localized values of the text box     and has the  Translations  suffix in its field name.  To specify the field name and the object name of the needed internal field with localized     values, you specify the field name and the object name of the multi-language text box and append       Translations  to the field name. For example, the following code shows the command that     you should use to retrieve the localized values of the  Description      element of the   ([~/?ScreenId=IN202500|IN202500]) Stock Items form.  //stockItemSchema is an IN202500Content object
new Field
{
    ObjectName = stockItemsSchema.StockItemSummary.Description.ObjectName,
    FieldName = stockItemsSchema.StockItemSummary.Description.FieldName + 
      "Translations"
} The returned value of a  Translations  field is a string in JSON format with     the available localized values of the field. The language to which the value belongs is     identified by the two-letter ISO code of the language. For example, suppose that the       Description  element of the   ([~/?ScreenId=IN202500|IN202500]) Stock Items form has the value  Item      in English and  Pièce  in French. In this case, the value of the       DescrTranslations  field, which corresponds to the       Description  element, is the following string:       [{en:Item},{fr:Pièce}] . ]]></column>
		</row>
		<row PageID="d8d2835f-5450-4b83-852e-dbadd76a5af8" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="8d6ed648-a811-8080-425c-725e7f1f385e" RecordSourceID="22377">
			<column name="Content"><![CDATA[[anchor|#_73bcc3f8-e385-48ad-92af-9ada972058c0]
 Acumatica ERP provides push notifications that make it possible for the external applications to track the changes in the data in Acumatica ERP. That is, you can configure Acumatica ERP to send notifications to a destination (such as an HTTP address) when specific data changes in Acumatica ERP. The external application can receive these notifications and process the information on the data changes, if necessary. With push notifications, the external application doesn&rsquo;t need to continually poll for the data to find out whether there are any changes in this data, which helps improve the performance of the external application.{br}

In this chapter, you can find information on how to configure Acumatica ERP to send push notifications.
==In This Chapter==[anchor|#_58572669-2616-404a-b03d-b95f417a97c7]
{| class="checklist invisiblechecklist" | width="100%" 
|- 
| [anchor|#_b504cd30-0358-4c3c-a41c-cb8506a5d630]
*[HelpRoot_Dev_Integration\IS__con_Push_Notifications|Push Notifications]
*[HelpRoot_Dev_Integration\IS__con_Push_Requirements_to_Query|Recommendations for the Data Queries]
*[HelpRoot_Dev_Integration\IS__con_Push_Notification_Destinations|Push Notification Destinations]
*[HelpRoot_Dev_Integration\IS__con_Push_Notification_Format|Push Notification Format]

| [anchor|#_ec2e5b05-df60-4829-bf33-752239bd0ee3]
*[HelpRoot_Dev_Integration\IS__how_Configure_Push_Notifications|To Configure Push Notifications]
*[HelpRoot_Dev_Integration\IS__how_Process_Failed_Notifications|To Process Failed Notifications]

|}]]></column>
			<column name="PlainText"><![CDATA[Configuring Push Notifications  Acumatica ERP             provides push notifications that make it possible for the external applications to track             the changes in the data in  Acumatica ERP.             That is, you can configure  Acumatica ERP             to send notifications to a destination (such as an HTTP address) when specific data             changes in  Acumatica ERP.             The external application can receive these notifications and process the information on             the data changes, if necessary. With push notifications, the external application             doesn't need to continually poll for the data to find out whether there are any changes             in this data, which helps improve the performance of the external application. In this chapter, you can find information on how to configure  Acumatica ERP to send push notifications. In This Chapter Push NotificationsRecommendations for the Data QueriesPush Notification DestinationsPush Notification FormatTo Configure Push NotificationsTo Process Failed Notifications]]></column>
		</row>
		<row PageID="562ccb34-3b08-45c4-9cf9-d51a8a54ae01" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="caa4d70c-6b40-ba9b-20d1-f954702e688c" RecordSourceID="22377">
			<column name="Content"><![CDATA[[anchor|#_1646c193-7649-4fdf-8b72-cc6c0fb31bf3]
Push notifications are notifications in JSON format that are sent by Acumatica ERP to notification destinations when specific data changes occur in Acumatica ERP. External applications can receive the notifications and process them to retrieve the information about the changes.{br}

[anchor|#_57000ea1-6c3e-4b00-a7ec-7fc3ccc23663]((({S:Hint}If you have installed a new version of Acumatica ERP or updated your Acumatica ERP instance by using the Acumatica ERP Configuration                             Wizard, push notifications are enabled in Acumatica ERP automatically. 
If you have updated your Acumatica ERP instance through the web interface, you need to manually enable push notifications in Acumatica ERP, as described in [HelpRoot_Administration\WebConfig__how_PushNotifications#_e0ed4a7a-e197-45ed-8c14-c1eab4e5ca1d|To Enable Push Notifications Manually] in the Installation Guide. {br}

If you need to enable push notifications on the Acumatica ERP instances in a cluster, you should follow the instructions in [HelpRoot_Administration\WebConfig__how_PushNotifications#_99af8931-2fdf-4cd8-ad09-def60f811197|To Enable Push Notifications in a Cluster] in the Installation Guide.
))){br}

To work with Acumatica ERP push notifications, you need to configure the following items:[anchor|#_513cde08-9528-4cae-b2dd-2d1ae2bf7a50]
*The data query that defines the data changes for which Acumatica ERP should send notifications
*The destination to which Acumatica ERP should send notifications
*The way the external application processes the notifications
*The definition of the push notification in Acumatica ERP, which specifies the data query and the notification destination
{br}

The following diagram illustrates the sending of a push notification. In the diagram, rectangles with a red border indicate the items that you need to configure to receive push notifications when changes occur.[anchor|#_f4031980-8b47-4a79-b093-7dd4decf1709][anchor|#_d388d6c4-5767-4b93-8579-41279e837454][image:UserGuide/Images/PushNotifications.png|popup|Sending a push notification|450px]{br}{TOC}
==Data Query==
The data query can be defined by either a generic inquiry or a built-in definition (which is a data query defined in code). For details on generic inquiries, see [HelpRoot_ReportingTools\SM__MNG_Managing_Generic_Inquiry|Managing Generic Inquiries]. For information on how to create a built-in definition, see [HelpRoot_Dev_Integration\CC__how_Push_Create_Built-In_Definition|To Create a Built-In Definition]. You can define multiple queries for one notification destination.{br}

The data query should adhere to the recommendations described in [HelpRoot_Dev_Integration\IS__con_Push_Requirements_to_Query|Recommendations for the Data Queries]. 
==Notification Destination==
The following predefined notification destinations are provided: webhook (HTTP address), message queue, or SignalR hub. For more information on the predefined notification destinations, see [HelpRoot_Dev_Integration\IS__con_Push_Notification_Destinations|Push Notification Destinations]. You can also create your own destination type, as described in [HelpRoot_Dev_Integration\CC__how_Push_Create_Custom_Destination_Type|To Create a Custom Destination Type].
==Processing of the Notifications in the External Application==
The external application can process the notifications and extract the information about the data changes. Acumatica ERP sends notifications to notification destinations in JSON format. For details on the format of the notifications, see [HelpRoot_Dev_Integration\IS__con_Push_Notification_Format|Push Notification Format]. If your application watches notifications in the SignalR hub, you need to connect to the hub, as described in [HelpRoot_Dev_Integration\CC__how_Push_Connect_to_SignalR_Hub|To Connect to the SignalR Hub]. 
==Definition of the Push Notification ==
In the definition of the push notification on the [HelpRoot_FormReference\SM_30_20_00|Push Notifications] ([~/?ScreenId=SM302000|SM302000]) form, you specify the notification destination and the data queries for which the notifications should be sent. For details on the setup of the push notifications, see [HelpRoot_Dev_Integration\IS__how_Configure_Push_Notifications|To Configure Push Notifications].
==Related Articles==
*[HelpRoot_Dev_Integration\IS__how_Configure_Push_Notifications|To Configure Push Notifications]]]></column>
			<column name="PlainText"><![CDATA[Push Notifications Push notifications are notifications in JSON format             that are sent by  Acumatica ERP             to notification destinations when specific data changes occur in  Acumatica ERP.             External applications can receive the notifications and process them to retrieve the             information about the changes. If you have installed a new version of  Acumatica ERP             or updated your  Acumatica ERP             instance by using the  Acumatica ERP Configuration                             Wizard, push notifications are enabled in  Acumatica ERP             automatically.  If you have updated your  Acumatica ERP instance through the web interface, you need to manually enable push                 notifications in  Acumatica ERP, as described in  To Enable Push Notifications Manually in the Installation Guide.  If you need to enable push notifications on the                      Acumatica ERP instances in a cluster, you should follow the instructions in  To Enable Push Notifications in a Cluster in the Installation Guide. To work with  Acumatica ERP push notifications, you need to configure the following items: The data query that defines the data changes for which  Acumatica ERP should send notifications The destination to which  Acumatica ERP should send notifications The way the external application processes the notifications The definition of the push notification in  Acumatica ERP, which specifies the data query and the notification destination The following diagram illustrates the sending of a push notification. In the diagram,         rectangles with a red border indicate the items that you need to configure to receive push         notifications when changes occur. Sending a push notification Data Query The data query can be defined by either a generic inquiry or a built-in definition (which is a         data query defined in code). For details on generic inquiries, see  Managing Generic Inquiries. For         information on how to create a built-in definition, see  To Create a Built-In Definition. You can define multiple queries for one notification destination. The data query should adhere to the recommendations described in  Recommendations for the Data Queries.  Notification Destination The following predefined notification destinations are provided: webhook (HTTP address),         message queue, or SignalR hub. For more information on the predefined notification         destinations, see  Push Notification Destinations. You can also create your own destination type, as described in  To Create a Custom Destination Type. Processing of the Notifications in the External Application The external application can process the notifications and extract the information about the         data changes.  Acumatica ERP sends notifications to notification destinations in JSON format. For details on the         format of the notifications, see  Push Notification Format. If         your application watches notifications in the SignalR hub, you need to connect to the hub,         as described in  To Connect to the SignalR Hub.  Definition of the Push Notification  In the definition of the push notification on the   ([~/?ScreenId=SM302000|SM302000]) Push Notifications (SM302000) form, you         specify the notification destination and the data queries for which the notifications should         be sent. For details on the setup of the push notifications, see  To Configure Push Notifications. ]]></column>
		</row>
		<row PageID="99dc32c1-00ac-498a-9412-6c7cf766eaa8" Language="en-US" PageRevisionID="1" Content="&#xA;For optimal results, follow these recommendations when you create each data query for which you want to configure push notifications:[anchor|#_dd99a463-ea47-4cf1-9e44-8304e429dac0]&#xA;*Do not use aggregation and grouping in the query; Acumatica ERP does not guarantee that push notifications will work correctly with such queries.&#xA;*Do not use joins of multiple detail tables in the query because this may cause the system to hang.&#xA;*If you need to join multiple tables, use a left join or an inner join in the data query. If you use an inner join, the query execution may be slower than for a left join.&#xA;*Use as simple a data query as possible.&#xA;*For a query defined by using a generic inquiry, do not use a formula on the '''Results Grid''' tab of the [HelpRoot_FormReference\SM_20_80_00|Generic Inquiry] ([~/?ScreenId=SM208000|SM208000]) form.&#xA;&#xA;==Related Articles==&#xA;*[HelpRoot_Dev_Integration\IS__how_Configure_Push_Notifications|To Configure Push Notifications]" PlainText="Recommendations for the Data Queries For optimal results, follow these recommendations when you create each data query for which         you want to configure push notifications: Do not use aggregation and grouping in the query;  Acumatica ERP does not guarantee that push notifications will work correctly with such             queries. Do not use joins of multiple detail tables in the query because this may cause the             system to hang. If you need to join multiple tables, use a left join or an inner join in the data             query. If you use an inner join, the query execution may be slower than for a left             join. Use as simple a data query as possible. For a query defined by using a generic inquiry, do not use a formula on the                Results Grid  tab of the   ([~/?ScreenId=SM208000|SM208000]) Generic Inquiry (SM208000)             form. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="017f4f93-96b4-2fbd-4715-84eb6dbf238e" RecordSourceID="22377" />
		<row PageID="87648532-3d21-4e16-b555-c906ebac151b" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="76ce5dea-2aac-4f71-30e2-7ead8a7ebe7a" RecordSourceID="22377">
			<column name="Content"><![CDATA[
When you configure a push notification on the [HelpRoot_FormReference\SM_30_20_00|Push Notifications] ([~/?ScreenId=SM302000|SM302000]) form of Acumatica ERP, you select the type of the notification destinations, which can be any of the predefined types described in this topic. You can also create your own destination type, as described in [HelpRoot_Dev_Integration\CC__how_Push_Create_Custom_Destination_Type|To Create a Custom Destination Type] in the Acumatica Framework Developer Guide.{br}{TOC}
==Webhook==
A webhook is an HTTP address to which Acumatica ERP sends HTTP {{POST}} requests with notification information. For this destination type, you specify a valid HTTP address (such as {{http://localhost:80/main.aspx?pushqueue}}) in the '''Address''' box on the [HelpRoot_FormReference\SM_30_20_00|Push Notifications] ([~/?ScreenId=SM302000|SM302000]) form. For security reasons, you can specify a header of the HTTP request in the '''Header Name''' and '''Header Value''' boxes.{br}

If Acumatica ERP cannot send notifications to the HTTP address, Acumatica ERP logs information on the failed notifications and displays these notifications on the [HelpRoot_FormReference\SM_50_20_00|Process Push Notifications] ([~/?ScreenId=SM502000|SM502000]) form. You can resend the failed notifications for two days, after which the notifications are removed from the Acumatica ERP database. For details on how to resend notifications, see [HelpRoot_Dev_Integration\IS__how_Process_Failed_Notifications|To Process Failed Notifications]. 
==Message Queue==
The message queue is a local or remote private Microsoft message queue. You specify the address of the message queue (such as {{MyComputer\private$\TestQueueForPushNotificatons}}) in the '''Address''' box on the [HelpRoot_FormReference\SM_30_20_00|Push Notifications] ([~/?ScreenId=SM302000|SM302000]) form. For information on how to configure a private Microsoft message queue, see the Microsoft documentation. {br}

The message queue is the most reliable destination type protected from network failures. However, if Acumatica ERP cannot send notifications to the message queue for some reason, Acumatica ERP logs information about the failed notifications and displays these notifications on the [HelpRoot_FormReference\SM_50_20_00|Process Push Notifications] ([~/?ScreenId=SM502000|SM502000]) form. You can resend the failed notifications for two days, after which the notifications are removed from the Acumatica ERP database. For information on how to resend notifications, see [HelpRoot_Dev_Integration\IS__how_Process_Failed_Notifications|To Process Failed Notifications]. 
==SignalR Hub==
The SignalR hub is the destination type implemented in Acumatica ERP by using the ASP.NET SignalR library. The address of this destination type is {{PushNotificationsHub}}, which is filled in automatically in the '''Address''' box on the [HelpRoot_FormReference\SM_30_20_00|Push Notifications] form. This destination type can be used if you can expose neither an HTTP address (webhook) nor a message queue to receive push notifications. If Acumatica ERP is configured to send notifications to the SignalR hub, the external application can connect to Acumatica ERP through websoket or a long-polling mechanism and receive notifications through this connection. If multiple external applications are connected to the SignalR hub, they receive notifications simultaneously. For information on how to connect your application to the SignalR hub of Acumatica ERP, see [HelpRoot_Dev_Integration\CC__how_Push_Connect_to_SignalR_Hub|To Connect to the SignalR Hub] in the Acumatica Framework Developer Guide.{br}

The SignalR hub destination type is not reliable: If the connection fails or there are no clients connected to the SignalR hub when a notification comes, this notification will not be sent and it cannot be resent later.]]></column>
			<column name="PlainText"><![CDATA[Push Notification Destinations When you configure a push notification on the   ([~/?ScreenId=SM302000|SM302000]) Push Notifications (SM302000)     form of  Acumatica ERP,     you select the type of the notification destinations, which can be any of the predefined types     described in this topic. You can also create your own destination type, as described in  To Create a Custom Destination Type in the  Acumatica Framework     Developer Guide. Webhook A webhook is an HTTP address to which  Acumatica ERP     sends HTTP  POST  requests with notification information. For this destination     type, you specify a valid HTTP address (such as       http://localhost:80/main.aspx?pushqueue ) in the  Address      box on the   ([~/?ScreenId=SM302000|SM302000]) Push Notifications (SM302000)     form. For security reasons, you can specify a header of the HTTP request in the       Header Name  and  Header Value  boxes. If  Acumatica ERP     cannot send notifications to the HTTP address,  Acumatica ERP     logs information on the failed notifications and displays these notifications on the   ([~/?ScreenId=SM502000|SM502000]) Process Push Notifications (SM502000) form. You can     resend the failed notifications for two days, after which the notifications are removed from the       Acumatica ERP database. For details on how to resend notifications, see  To Process Failed Notifications.  Message Queue The message queue is a local or remote private Microsoft message queue. You specify the     address of the message queue (such as       MyComputer\private$\TestQueueForPushNotificatons ) in the       Address  box on the   ([~/?ScreenId=SM302000|SM302000]) Push Notifications (SM302000) form. For     information on how to configure a private Microsoft message queue, see the Microsoft     documentation.  The message queue is the most reliable destination type protected from network failures.     However, if  Acumatica ERP     cannot send notifications to the message queue for some reason,  Acumatica ERP     logs information about the failed notifications and displays these notifications on the   ([~/?ScreenId=SM502000|SM502000]) Process Push Notifications (SM502000) form. You can     resend the failed notifications for two days, after which the notifications are removed from the       Acumatica ERP database. For information on how to resend notifications, see  To Process Failed Notifications.  SignalR Hub The SignalR hub is the destination type implemented in  Acumatica ERP     by using the ASP.NET SignalR library. The address of this destination type is       PushNotificationsHub , which is filled in automatically in the       Address  box on the   ([~/?ScreenId=SM302000|SM302000]) Push Notifications form. This destination type can     be used if you can expose neither an HTTP address (webhook) nor a message queue to receive push     notifications. If  Acumatica ERP     is configured to send notifications to the SignalR hub, the external application can connect to       Acumatica ERP through websoket or a long-polling mechanism and receive notifications through this     connection. If multiple external applications are connected to the SignalR hub, they receive     notifications simultaneously. For information on how to connect your application to the SignalR     hub of  Acumatica ERP,     see  To Connect to the SignalR Hub in the  Acumatica Framework     Developer Guide. The SignalR hub destination type is not reliable: If the connection fails or there are no     clients connected to the SignalR hub when a notification comes, this notification will not be     sent and it cannot be resent later. ]]></column>
		</row>
		<row PageID="7dabea03-649c-4228-8d5b-16e907be2c5a" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="c2a5e893-4072-d797-1f09-668bbeceaceb" RecordSourceID="22377">
			<column name="Content"><![CDATA[ Acumatica ERP sends push notifications in JSON format. This topic describes the structure of the notifications.
==Elements==
The push notifications that Acumatica ERP sends include the following elements in JSON format.[anchor|#_1abc8bba-1b44-482a-8986-a11151bd8b2a]
{| class="checklist" | width="100%" 
|- 
!width="20%" ! Element
!width="80%" ! Description
|- 
| <tt>Inserted</tt>
| The rows that are new in the results of the query execution.
|- 
| <tt>Deleted</tt>
| The rows that were in the results of the query execution but are missing after the latest data transaction. You can compare the <tt>Inserted</tt> and <tt>Deleted</tt> rows to identify the rows that have been updated.
|- 
| <tt>Query</tt>
| The query for which Acumatica ERP has produced the notification. The value of the element can be either the name of the generic inquiry or the name of the class with the built-in definition.
|- 
| <tt>CompanyId</tt>
| The name of the company.
|- 
| <tt>Id</tt>
| The unique identifier of the data transaction in Acumatica ERP that has initiated the notification. The external application can use this identifier to omit duplicated notifications.
|- 
| <tt>TimeStamp</tt>
| 
The {{long}} value that corresponds to the date and time when the transaction that initiated the notification happened in Acumatica ERP. By using the value of this element, the external application can define the order of notifications.
|- 
| <tt>AdditionalInfo</tt>
| Any additional information that is added to the notification. This element can contain additional information added by the system as well as the custom information. For more information on how to add custom additional information to push notifications, see [HelpRoot_Dev_Integration\CC__how_Push_Add_Additional_Info|To Add Additional Information to Push Notifications].
|}
==Example==
Suppose that push notifications are configured for the ''Stock Items: Last Modified Date'' generic inquiry (which displays the '''InventoryID''', '''StockItem''', '''ItemStatus''', and '''InventoryItem&#95;lastModifiedDateTime''' columns). Acumatica ERP sends the following notification when the status of the ''AACOMPUT01'' inventory item has been changed from ''Active'' to ''Inactive''.{{{{{
  "Inserted":
  [{
    "InventoryID":"AACOMPUT01",
    "StockItem":true,
    "ItemStatus":"Inactive",
    "InventoryItem_lastModifiedDateTime":"2017-05-05T15:16:23.1"
  }],
  "Deleted":
  [{
    "InventoryID":"AACOMPUT01",
    "StockItem":true,
    "ItemStatus":"Active",
    "InventoryItem_lastModifiedDateTime":"2017-05-05T15:16:23.103"
  }],
  "Query":"Stock Items: Last Modified Date",
  "CompanyId":"Company",
  "Id":"1af4d140-5321-41f2-a2ec-50b67f577c6c",
  "TimeStamp":636295833829493672,
  "AdditionalInfo":{}
}
}}}}]]></column>
			<column name="PlainText"><![CDATA[Push Notification Format  Acumatica ERP sends push notifications in JSON format. This topic describes the structure of the       notifications. Elements The push notifications that  Acumatica ERP     sends include the following elements in JSON format. Element Description Inserted The rows that are new in the results of the query execution. Deleted The rows that were in the results of the query execution but are missing after the                   latest data transaction. You can compare the  Inserted  and                      Deleted  rows to identify the rows that have been                   updated. Query The query for which  Acumatica ERP has produced the notification. The value of the element can be either the name                   of the generic inquiry or the name of the class with the built-in                   definition. CompanyId The name of the company. Id The unique identifier of the data transaction in  Acumatica ERP that has initiated the notification. The external application can use this                   identifier to omit duplicated notifications. TimeStamp The  long  value that corresponds to the date and time when the                     transaction that initiated the notification happened in  Acumatica ERP. By using the value of this element, the external application can define the                     order of notifications. AdditionalInfo Any additional information that is added to the notification. This element can                   contain additional information added by the system as well as the custom                   information. For more information on how to add custom additional information to                   push notifications, see  To Add Additional Information to Push Notifications. Example Suppose that push notifications are configured for the  Stock Items: Last Modified Date          generic inquiry (which displays the  InventoryID ,            StockItem ,  ItemStatus , and            InventoryItem_lastModifiedDateTime  columns).  Acumatica ERP sends the following notification when the status of the  AACOMPUT01  inventory item         has been changed from  Active  to          Inactive . {
  "Inserted":
  [{
    "InventoryID":"AACOMPUT01",
    "StockItem":true,
    "ItemStatus":"Inactive",
    "InventoryItem_lastModifiedDateTime":"2017-05-05T15:16:23.1"
  }],
  "Deleted":
  [{
    "InventoryID":"AACOMPUT01",
    "StockItem":true,
    "ItemStatus":"Active",
    "InventoryItem_lastModifiedDateTime":"2017-05-05T15:16:23.103"
  }],
  "Query":"Stock Items: Last Modified Date",
  "CompanyId":"Company",
  "Id":"1af4d140-5321-41f2-a2ec-50b67f577c6c",
  "TimeStamp":636295833829493672,
  "AdditionalInfo":{}
} ]]></column>
		</row>
		<row PageID="9c311991-5a7c-4150-8e96-df0e2517b9f7" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="67f254b7-54e8-da4d-1105-259c81ca9cd2" RecordSourceID="22377">
			<column name="Content"><![CDATA[To configure push notifications, you use the [HelpRoot_FormReference\SM_30_20_00|Push Notifications] ([~/?ScreenId=SM302000|SM302000]) form.
==Before You Proceed==
[anchor|#_7cfba1fc-c943-4d99-8a0a-1018b7851cbd]((({S:Hint}If you have installed a new version of Acumatica ERP or updated your Acumatica ERP instance by using the Acumatica ERP Configuration                             Wizard, push notifications are enabled in Acumatica ERP automatically. 
If you have updated your Acumatica ERP instance through the web interface, you need to manually enable push notifications in Acumatica ERP, as described in [HelpRoot_Administration\WebConfig__how_PushNotifications#_e0ed4a7a-e197-45ed-8c14-c1eab4e5ca1d|To Enable Push Notifications Manually] in the Installation Guide. {br}

If you need to enable push notifications on the Acumatica ERP instances in a cluster, you should follow the instructions in [HelpRoot_Administration\WebConfig__how_PushNotifications#_99af8931-2fdf-4cd8-ad09-def60f811197|To Enable Push Notifications in a Cluster] in the Installation Guide.
))){br}

You need to define the data query or data queries for which Acumatica ERP should send notifications on data changes. Each data query can be defined by either a generic inquiry or a built-in definition. For details on generic inquiries, see [HelpRoot_ReportingTools\SM__MNG_Managing_Generic_Inquiry|Managing Generic Inquiries]. For information on how to create a built-in definition, see [HelpRoot_Dev_Integration\CC__how_Push_Create_Built-In_Definition|To Create a Built-In Definition] in the Acumatica Framework Development Guide. For details on defining the data queries, see [HelpRoot_Dev_Integration\IS__con_Push_Requirements_to_Query|Recommendations for the Data Queries]. {br}

You should also identify the notification destination that your external application will scan, which can be one of the following: webhook (HTTP address), message queue, or SignalR hub. For more information on the notification destinations, see [HelpRoot_Dev_Integration\IS__con_Push_Notification_Destinations|Push Notification Destinations]. You should configure your external application so that it can process notifications sent to the destination.
==To Send Notifications to an HTTP Address==[anchor|#_21ced5ea-3816-42bf-8d6b-5c4ea05b3fd1][anchor|#_acda65fa-6d47-4259-9e3b-8e079c19cd74]
#On the '''System''' tab, click '''Integration'''. In the navigation pane, navigate to '''Configure''' > '''Push Notifications''' (SM302000).[anchor|#_05d065da-32d1-4f29-8461-fae690d9840e]
#In the '''Destination Name''' box, type the name of the target notification destination, which can be the name of your external application. 
#In the '''Destination Type''' box, select ''Webhook''. 
#In the '''Address''' box, type the HTTP address to which Acumatica ERP should send the push notifications, such as {{http://localhost:80/main.aspx?pushqueue}}. 
#Optional: In the '''Header Name''' and '''Header Value''' boxes, specify the header of the HTTP {{POST}} request in which Acumatica ERP sends the notification.[anchor|#_30ecacbb-456e-4959-9832-ce998dff8f83]
#For each generic inquiry for which you want Acumatica ERP to send notifications on changes in the inquiry results, do the following:
##On the table toolbar of the '''Generic Inquiries''' tab, click '''Add Row'''. The new row has the '''Active''' check box selected.
##In the '''Inquiry Title''' column of the added row, select the generic inquiry for which you want Acumatica ERP to send notifications.[anchor|#_a6a67e03-8d29-4288-b296-9750daed1bb1]
#For each built-in definition for which you want Acumatica ERP to send notifications on changes in the results, do the following:
##On the table toolbar of the '''Built-In Definitions''' tab, click '''Add Row'''. The new row has the '''Active''' check box selected.
##In the '''Class Name''' column of the added row, select the class that defines the data query for which you want Acumatica ERP to send notifications.[anchor|#_a2016b6f-8924-4851-ad14-adee48092a6c]
#On the form toolbar, click '''Save'''.

==To Send Notifications to a Message Queue==[anchor|#_6ee97232-c7ed-4a59-abc0-17ac91de5b03][anchor|#_d56c14f9-e5bd-4e61-b8cf-3604f0935736]
#On the '''System''' tab, click '''Integration'''. In the navigation pane, navigate to '''Configure''' > '''Push Notifications''' (SM302000).[anchor|#_107eeac6-0a67-4453-a678-4c4e4759d08d]
#In the '''Destination Name''' box, type the name of the target notification destination, which can be the name of your external application. 
#In the '''Destination Type''' box, select ''Message Queue''. 
#In the '''Address''' box, type the address of the local or remote private Microsoft message queue that you have configured for receiving messages from Acumatica ERP, such as {{MyComputer\private$\TestQueueForPushNotificatons}}.[anchor|#_cb6895a3-3765-4a3e-b4aa-652df4518815]
#For each generic inquiry for which you want Acumatica ERP to send notifications on changes in the inquiry results, do the following:
##On the table toolbar of the '''Generic Inquiries''' tab, click '''Add Row'''. The new row has the '''Active''' check box selected.
##In the '''Inquiry Title''' column of the added row, select the generic inquiry for which you want Acumatica ERP to send notifications.[anchor|#_229bd1a1-6178-4996-881c-32174b873dd7]
#For each built-in definition for which you want Acumatica ERP to send notifications on changes in the results, do the following:
##On the table toolbar of the '''Built-In Definitions''' tab, click '''Add Row'''. The new row has the '''Active''' check box selected.
##In the '''Class Name''' column of the added row, select the class that defines the data query for which you want Acumatica ERP to send notifications.[anchor|#_9b6ae63d-3768-4343-8e09-86a9016247d1]
#On the form toolbar, click '''Save'''.

==To Send Notifications to a SignalR Hub==[anchor|#_fb1ebaf2-0f36-42bf-8cb0-ad53b4e6e1d5][anchor|#_76c41567-bac9-4ef6-9b8e-dbe97d50a5c7]
#On the '''System''' tab, click '''Integration'''. In the navigation pane, navigate to '''Configure''' > '''Push Notifications''' (SM302000).[anchor|#_b3f726b9-f8e1-48f1-8183-258c43d53ffc]
#In the '''Destination Name''' box, type the name of the target notification destination, which can be the name of your external application. 
#In the '''Destination Type''' box, select ''SignalR Hub''. The '''Address''' box is filled in automatically with {{PushNotificationsHub}}.[anchor|#_a01c4ca6-9f4b-48ac-8281-9690926b5671]
#For each generic inquiry for which you want Acumatica ERP to send notifications on changes in the inquiry results, do the following:
##On the table toolbar of the '''Generic Inquiries''' tab, click '''Add Row'''. The new row has the '''Active''' check box selected.
##In the '''Inquiry Title''' column of the added row, select the generic inquiry for which you want Acumatica ERP to send notifications.[anchor|#_776050d5-b03a-48e9-9091-07009245e3f1]
#For each built-in definition for which you want Acumatica ERP to send notifications on changes in the results, do the following:
##On the table toolbar of the '''Built-In Definitions''' tab, click '''Add Row'''. The new row has the '''Active''' check box selected.
##In the '''Class Name''' column of the added row, select the class that defines the data query for which you want Acumatica ERP to send notifications.[anchor|#_2aebecf4-3224-4f5e-966f-da7e435f8777]
#On the form toolbar, click '''Save'''.

==Related Articles==
*[HelpRoot_Dev_Integration\IS__con_Push_Notifications|Push Notifications]]]></column>
			<column name="PlainText"><![CDATA[To Configure Push Notifications To configure push notifications, you use the   ([~/?ScreenId=SM302000|SM302000]) Push Notifications (SM302000)             form. Before You Proceed If you have installed a new version of  Acumatica ERP             or updated your  Acumatica ERP             instance by using the  Acumatica ERP Configuration                             Wizard, push notifications are enabled in  Acumatica ERP             automatically.  If you have updated your  Acumatica ERP instance through the web interface, you need to manually enable push                 notifications in  Acumatica ERP, as described in  To Enable Push Notifications Manually in the Installation Guide.  If you need to enable push notifications on the                      Acumatica ERP instances in a cluster, you should follow the instructions in  To Enable Push Notifications in a Cluster in the Installation Guide. You need to define the data query or data queries for which  Acumatica ERP should send notifications on data changes. Each data query can be defined by                 either a generic inquiry or a built-in definition. For details on generic inquiries,                 see  Managing Generic Inquiries. For information on how to create a built-in definition, see  To Create a Built-In Definition in the  Acumatica Framework Development Guide. For details on defining the data queries, see  Recommendations for the Data Queries.  You should also identify the notification destination that your external application                 will scan, which can be one of the following: webhook (HTTP address), message queue,                 or SignalR hub. For more information on the notification destinations, see  Push Notification Destinations. You should configure your external application so that it can process                 notifications sent to the destination. To Send Notifications to an HTTP Address On the  System  tab, click                  Integration . In the navigation pane, navigate to  Configure Push Notifications  (SM302000). In the  Destination Name  box,             type the name of the target notification destination, which can be the name of your             external application.  In the  Destination Type  box, select  Webhook .  In the  Address  box, type the HTTP address to which                          Acumatica ERP should send the push notifications, such as                          http://localhost:80/main.aspx?pushqueue .  Optional: In the  Header Name  and  Header                         Value  boxes, specify the header of the HTTP                          POST  request in which  Acumatica ERP sends the notification. For each generic inquiry for which you want  Acumatica ERP             to send notifications on changes in the inquiry results, do the following: On the table toolbar of the  Generic Inquiries  tab, click                          Add Row . The new row has the                          Active  check box selected. In the  Inquiry Title  column of the added row, select the                     generic inquiry for which you want  Acumatica ERP to send notifications. For each built-in definition for which you want  Acumatica ERP             to send notifications on changes in the results, do the following: On the table toolbar of the  Built-In Definitions  tab,                     click  Add Row . The new row has the                          Active  check box selected. In the  Class Name  column of the added row, select the                     class that defines the data query for which you want  Acumatica ERP to send notifications. On the form toolbar, click  Save . To Send Notifications to a Message Queue On the  System  tab, click                  Integration . In the navigation pane, navigate to  Configure Push Notifications  (SM302000). In the  Destination Name  box,             type the name of the target notification destination, which can be the name of your             external application.  In the  Destination Type  box, select  Message Queue .  In the  Address  box, type the address of the local or                     remote private Microsoft message queue that you have configured for receiving                     messages from  Acumatica ERP, such as                      MyComputer\private$\TestQueueForPushNotificatons . For each generic inquiry for which you want  Acumatica ERP             to send notifications on changes in the inquiry results, do the following: On the table toolbar of the  Generic Inquiries  tab, click                          Add Row . The new row has the                          Active  check box selected. In the  Inquiry Title  column of the added row, select the                     generic inquiry for which you want  Acumatica ERP to send notifications. For each built-in definition for which you want  Acumatica ERP             to send notifications on changes in the results, do the following: On the table toolbar of the  Built-In Definitions  tab,                     click  Add Row . The new row has the                          Active  check box selected. In the  Class Name  column of the added row, select the                     class that defines the data query for which you want  Acumatica ERP to send notifications. On the form toolbar, click  Save . To Send Notifications to a SignalR Hub On the  System  tab, click                  Integration . In the navigation pane, navigate to  Configure Push Notifications  (SM302000). In the  Destination Name  box,             type the name of the target notification destination, which can be the name of your             external application.  In the  Destination Type  box, select  SignalR Hub . The                          Address  box is filled in automatically with                          PushNotificationsHub . For each generic inquiry for which you want  Acumatica ERP             to send notifications on changes in the inquiry results, do the following: On the table toolbar of the  Generic Inquiries  tab, click                          Add Row . The new row has the                          Active  check box selected. In the  Inquiry Title  column of the added row, select the                     generic inquiry for which you want  Acumatica ERP to send notifications. For each built-in definition for which you want  Acumatica ERP             to send notifications on changes in the results, do the following: On the table toolbar of the  Built-In Definitions  tab,                     click  Add Row . The new row has the                          Active  check box selected. In the  Class Name  column of the added row, select the                     class that defines the data query for which you want  Acumatica ERP to send notifications. On the form toolbar, click  Save . ]]></column>
		</row>
		<row PageID="c2d4c4a4-c2fe-4929-ac07-5aa97f2fd6cf" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="2761dac0-b95c-8442-e122-54b98493a5ba" RecordSourceID="22377">
			<column name="Content"><![CDATA[
To process the push notifications that Acumatica ERP could not send, you use the [HelpRoot_FormReference\SM_50_20_00|Process Push Notifications] ([~/?ScreenId=SM502000|SM502000]) form. On this form, you can view the notifications that Acumatica ERP has failed to send, try to resend them, or delete the notifications.{br}

[anchor|#_f070e13d-04b7-404b-b836-9d678e24935a]((({S:Hint}If a notification has failed in Acumatica ERP before it was sent (for example, if Acumatica ERP could not retrieve the data for the notification), this notification is not displayed in the table on the [HelpRoot_FormReference\SM_50_20_00|Process Push Notifications] form. Acumatica ERP saves the information about these notifications in the <tt>PushNotificationsErrors</tt> database table.
)))
==To View a Notification==[anchor|#_ded9261f-be04-4def-969d-85661d7c4e9e][anchor|#_4dc0d8e7-e95b-498a-a855-eb7ab30adc66]
#On the '''System''' tab, click '''Integration'''. In the navigation pane, navigate to '''Process''' > '''Process Push Notifications''' (SM502000).
#In the table on the form, select the row that contains the notification you want to view.
#On the form toolbar, click '''Show Notification'''. 
#In the '''Notification Event''' dialog box, which opens, view the notification in JSON format. For details on the format of the notification, see [HelpRoot_Dev_Integration\IS__con_Push_Notification_Format|Push Notification Format].

==To Resend Notifications==[anchor|#_53005733-4c0b-448a-8c90-64537c7ffe46][anchor|#_23ff3d9b-9367-4068-83f5-d4486fc72df1]
#On the '''System''' tab, click '''Integration'''. In the navigation pane, navigate to '''Process''' > '''Process Push Notifications''' (SM502000).
#Do one of the following:
#*If you want to resend particular notifications, in the table on the form, select the check boxes in the rows that correspond to the notification you want to send, and click '''Send''' on the form toolbar. 
#*If you want to resend all notifications, on the form toolbar, click '''Send All''' on the form toolbar.

==To Delete Notifications==[anchor|#_9fbc1800-9a12-42b7-98e8-2b47cd677d62][anchor|#_93a20001-201e-406f-82bc-ab4700807dae]
#On the '''System''' tab, click '''Integration'''. In the navigation pane, navigate to '''Process''' > '''Process Push Notifications''' (SM502000).
#Do one of the following:
#*If you want to delete particular notifications, in the table on the form, select the unlabeled check boxes in the rows that correspond to the notifications you want to delete, and click '''Delete''' on the form toolbar. 
#*If you want to delete all notifications, on the form toolbar, click '''Delete All'''.[anchor|#_52e16562-f2da-4109-9817-8b15ab740a77]
#On the form toolbar, click '''Save'''.

==Related Articles==
*[HelpRoot_FormReference\SM_50_20_00|Process Push Notifications] ([~/?ScreenId=SM502000|SM502000])]]></column>
			<column name="PlainText"><![CDATA[To Process Failed Notifications To process the push notifications that  Acumatica ERP could not send, you use the   ([~/?ScreenId=SM502000|SM502000]) Process Push Notifications (SM502000)                 form. On this form, you can view the notifications that  Acumatica ERP has failed to send, try to resend them, or delete the notifications. If a notification has failed in  Acumatica ERP             before it was sent (for example, if  Acumatica ERP             could not retrieve the data for the notification), this notification is not displayed in             the table on the   ([~/?ScreenId=SM502000|SM502000]) Process Push Notifications form.                  Acumatica ERP             saves the information about these notifications in the                  PushNotificationsErrors  database table. To View a Notification On the  System  tab, click                  Integration . In the navigation pane, navigate to  Process Process Push Notifications  (SM502000). In the table on the form, select the row that contains the notification you want                     to view. On the form toolbar, click  Show Notification .  In the  Notification Event  dialog box, which opens, view                     the notification in JSON format. For details on the format of the notification,                     see  Push Notification Format. To Resend Notifications On the  System  tab, click                  Integration . In the navigation pane, navigate to  Process Process Push Notifications  (SM502000). Do one of the following: If you want to resend particular notifications, in the table on the                             form, select the check boxes in the rows that correspond to the                             notification you want to send, and click  Send  on                             the form toolbar.  If you want to resend all notifications, on the form toolbar, click                                  Send All  on the form toolbar. To Delete Notifications On the  System  tab, click                  Integration . In the navigation pane, navigate to  Process Process Push Notifications  (SM502000). Do one of the following: If you want to delete particular notifications, in the table on the                             form, select the unlabeled check boxes in the rows that correspond to                             the notifications you want to delete, and click                                  Delete  on the form toolbar.  If you want to delete all notifications, on the form toolbar, click                                  Delete All . On the form toolbar, click  Save .  ([~/?ScreenId=SM502000|SM502000]) ]]></column>
		</row>
		<row PageID="a5dd18c4-290e-41ff-8415-8a3e8459ef0b" Language="en-US" PageRevisionID="1" PlainText="Defining Push Notifications In  Acumatica ERP or an  Acumatica Framework-based application, you can configure the system to send push notifications to a         destination (such as an HTTP address) when specific data changes in the system. The external         application can receive these notifications and process the information on the data changes         if necessary. For more information on push notifications, see  Configuring Push Notifications. If this chapter, you can find information on how to configure push notifications in code. In This Chapter To Create a Built-In DefinitionTo Connect to the SignalR HubTo Add Additional Information to Push NotificationsTo Create a Custom Destination Type" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="3ba57c10-4080-ef11-8f3a-5e086db59dfd" RecordSourceID="22377">
			<column name="Content"><![CDATA[
In Acumatica ERP or an Acumatica Framework-based application, you can configure the system to send push notifications to a destination (such as an HTTP address) when specific data changes in the system. The external application can receive these notifications and process the information on the data changes if necessary. For more information on push notifications, see [HelpRoot_Dev_Integration\IS__mng_Push_Notificatons|Configuring Push Notifications].{br}

If this chapter, you can find information on how to configure push notifications in code.
==In This Chapter==[anchor|#_f243b24b-b7d4-403d-98b1-06e20c51fe97]
*[HelpRoot_Dev_Integration\CC__how_Push_Create_Built-In_Definition|To Create a Built-In Definition]
*[HelpRoot_Dev_Integration\CC__how_Push_Connect_to_SignalR_Hub|To Connect to the SignalR Hub]
*[HelpRoot_Dev_Integration\CC__how_Push_Add_Additional_Info|To Add Additional Information to Push Notifications]
*[HelpRoot_Dev_Integration\CC__how_Push_Create_Custom_Destination_Type|To Create a Custom Destination Type]
]]></column>
		</row>
		<row PageID="d903e5af-1446-4b74-b492-087e8110cdf0" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="06ce3f6b-4210-3361-b905-0766b600dd97" RecordSourceID="22377">
			<column name="Content"><![CDATA[
In Acumatica ERP or an Acumatica Framework-based application, you can configure push notifications for a query that is defined as a class in the source code of the application—that is, for a built-in definition of the query. The built-in definition can be implemented in a project of your Acumatica ERP extension library, in a ''Code'' item of an Acumatica ERP customization project, or in a project of your Acumatica Framework-based application. (For the differences between the use of extension libraries and ''Code'' items in a customization project, see [HelpRoot_Dev_Customization\CG_Platform_TO_Code_ExtLib_vsCode|Extension Library (DLL) Versus Code in a Customization Project] in the Customization Guide.) {br}

To create a built-in definition, follow the instructions in this topic. For more information on the push notifications, see [HelpRoot_Dev_Integration\IS__mng_Push_Notificatons|Configuring Push Notifications] in the Integration Development Guide.
==To Create a Built-In Definition==[anchor|#_b6adbdec-1921-46d8-821a-1d7e234e9110]
#Define a class that implements the <tt>PX.PushNotifications.Sources.IInCodeNotificationDefinition</tt> interface in a project of your Acumatica ERP extension library, in a ''Code'' item of an Acumatica ERP customization project, or in a project of your Acumatica Framework-based application. The following code demonstrates the definition of such a class.<source lang="csharp">using PX.PushNotifications.Sources;

public class TestInCodeDefinition : IInCodeNotificationDefinition
{
}</source>
#In the class that implements the <tt>IInCodeNotificationDefinition</tt> interface, implement the <tt>GetSourceSelect()</tt> method of the interface so that the method satisfies the following requirements:
#*The method must return a tuple of a <tt>BqlCommand</tt> object, which defines the data query, and a <tt>PXDataValue</tt> array, which defines the parameters that should be passed to the query.
#*The data query that the method defines should adhere to [HelpRoot_Dev_Integration\IS__con_Push_Requirements_to_Query|Recommendations for the Data Queries] in the Integration Development Guide.
#:The following example shows the <tt>GetSourceSelect()</tt> method implementation.<source lang="csharp">using PX.Data;
using PX.PushNotifications.Sources;
using PX.PushNotifications.UI.DAC;

public class TestInCodeDefinition : IInCodeNotificationDefinition
{
  public Tuple&lt;BqlCommand, PXDataValue[]&gt; GetSourceSelect()       
  {           
    return               
      Tuple.Create(
        PXSelectJoin&lt;PushNotificationsHook,
        LeftJoin&lt;PushNotificationsSource,
          On&lt;PushNotificationsHook.hookId, 
            Equal&lt;PushNotificationsSource.hookId&gt;&gt;&gt;&gt;
        .GetCommand(), new PXDataValue[0]);       
  }
}</source>
#In the class that implements the <tt>IInCodeNotificationDefinition</tt> interface, implement the <tt>GetRestrictedFields()</tt> method of the interface so that the method satisfies the following requirements:
#*The method must return an array of <tt>IBqlField</tt>-derived types, which contains the fields that should be returned from the query.
#*If you need to return all fields, the method must return {{null}}.
#:The following code shows an example of the implementation of the <tt>GetRestrictedFields()</tt> method.<source lang="csharp">using PX.Data;
using PX.PushNotifications.Sources;
using PX.PushNotifications.UI.DAC;

public class TestInCodeDefinition : IInCodeNotificationDefinition
{
  ...

  public Type[] GetRestrictedFields()       
  {           
    return new [] 
    {
      typeof(PushNotificationsHook.address), 
      typeof(PushNotificationsHook.type), 
      typeof(PushNotificationsSource.designID), 
      typeof(PushNotificationsSource.inCodeClass), 
      typeof(PushNotificationsSource.lineNbr)
    };       
  }
}</source>
#Compile your Acumatica ERP extension library or Acumatica Framework-based application, or publish the customization project with the ''Code'' item that contains the class implementation. 
#Run Acumatica ERP or your Acumatica Framework-based application, and make sure that you can select the new built-in definition by its class name on the '''Built-In Definitions''' tab of the [HelpRoot_FormReference\SM_30_20_00|Push Notifications] ([~/?ScreenId=SM302000|SM302000]) form. The class of the built-in definition, which implements the <tt>IInCodeNotificationDefinition</tt> interface, is detected by the system and automatically added to the list of classes available for selection on the tab.
#:((({S:Hint}You can obtain the results of the data query defined with a built-in definition by using the following endpoint: {{http(s)://<Acumatica ERP instance URL>/PushNotifications/<full class name of the built-in definition>}}. For example, suppose that you want to retrieve the results of the data query defined with the <tt>PX.PushNotifications.Sources.TestInCodeDefinition</tt> class from a local Acumatica ERP instance with the name ''AcumaticaDB''. You should use the following URL to obtain the data: {{http(s)://localhost/AcumaticaDB/PushNotifications/PX.PushNotifications.Sources.TestInCodeDefinition}}. The endpoint returns the data in JSON format.
)))

==Related Articles==
*[HelpRoot_Dev_Integration\IS__how_Configure_Push_Notifications|To Configure Push Notifications]
*[https://help.acumatica.com/(W(3))/Main?ScreenId=ShowWiki&pageid=870bb284-3d7e-3c43-ab18-7491663abf3e|IInCodeNotificationDefinition Interface]]]></column>
			<column name="PlainText"><![CDATA[To Create a Built-In Definition In  Acumatica ERP or an  Acumatica Framework-based application, you can configure push notifications for a query that is                 defined as a class in the source code of the application—that is, for a built-in                 definition of the query. The built-in definition can be implemented in a project of                 your  Acumatica ERP extension library, in a  Code  item of an  Acumatica ERP customization project, or in a project of your  Acumatica Framework-based application. (For the differences between the use of extension libraries                 and  Code  items in a customization project, see  Extension Library (DLL) Versus Code in a Customization Project in the Customization Guide.)  To create a built-in definition, follow the instructions in this topic. For more                 information on the push notifications, see  Configuring Push Notifications in the Integration Development Guide. To Create a Built-In Definition Define a class that implements the                          PX.PushNotifications.Sources.IInCodeNotificationDefinition                      interface in a project of your  Acumatica ERP extension library, in a  Code  item of an  Acumatica ERP customization project, or in a project of your  Acumatica Framework-based application. The following code demonstrates the definition of such a                     class. using PX.PushNotifications.Sources;

public class TestInCodeDefinition : IInCodeNotificationDefinition
{
} In the class that implements the                          IInCodeNotificationDefinition  interface, implement the                          GetSourceSelect()  method of the interface so that the                     method satisfies the following requirements: The method must return a tuple of a  BqlCommand                              object, which defines the data query, and a                                  PXDataValue  array, which defines the parameters                             that should be passed to the query. The data query that the method defines should adhere to  Recommendations for the Data Queries in the Integration Development Guide. The following example shows the  GetSourceSelect()                          method                         implementation. using PX.Data;
using PX.PushNotifications.Sources;
using PX.PushNotifications.UI.DAC;

public class TestInCodeDefinition : IInCodeNotificationDefinition
{
  public Tuple<BqlCommand, PXDataValue[]> GetSourceSelect()       
  {           
    return               
      Tuple.Create(
        PXSelectJoin<PushNotificationsHook,
        LeftJoin<PushNotificationsSource,
          On<PushNotificationsHook.hookId, 
            Equal<PushNotificationsSource.hookId>>>>
        .GetCommand(), new PXDataValue[0]);       
  }
} In the class that implements the                          IInCodeNotificationDefinition  interface, implement the                          GetRestrictedFields()  method of the interface so that the                     method satisfies the following requirements: The method must return an array of  IBqlField -derived                             types, which contains the fields that should be returned from the                             query. If you need to return all fields, the method must return                                  null . The following code shows an example of the implementation of the                              GetRestrictedFields()                          method. using PX.Data;
using PX.PushNotifications.Sources;
using PX.PushNotifications.UI.DAC;

public class TestInCodeDefinition : IInCodeNotificationDefinition
{
  ...

  public Type[] GetRestrictedFields()       
  {           
    return new [] 
    {
      typeof(PushNotificationsHook.address), 
      typeof(PushNotificationsHook.type), 
      typeof(PushNotificationsSource.designID), 
      typeof(PushNotificationsSource.inCodeClass), 
      typeof(PushNotificationsSource.lineNbr)
    };       
  }
} Compile your  Acumatica ERP extension library or  Acumatica Framework-based application, or publish the customization project with the  Code                      item that contains the class implementation.  Run  Acumatica ERP or your  Acumatica Framework-based application, and make sure that you can select the new built-in                     definition by its class name on the  Built-In Definitions                      tab of the   ([~/?ScreenId=SM302000|SM302000]) Push Notifications                     (SM302000) form. The class of the built-in definition, which implements the                          IInCodeNotificationDefinition  interface, is detected by                     the system and automatically added to the list of classes available for                     selection on the tab. You can obtain the results of the data query defined                         with a built-in definition by using the following endpoint:                                  http(s)://< Acumatica ERP instance URL>/PushNotifications/<full class name of the built-in                             definition> . For example, suppose that you want to retrieve the                         results of the data query defined with the                              PX.PushNotifications.Sources.TestInCodeDefinition                          class from a local  Acumatica ERP instance with the name  AcumaticaDB . You should use the following                         URL to obtain the data:                              http(s)://localhost/AcumaticaDB/PushNotifications/PX.PushNotifications.Sources.TestInCodeDefinition .                         The endpoint returns the data in JSON format. IInCodeNotificationDefinition Interface ]]></column>
		</row>
		<row PageID="2f1c56c2-f893-4467-92a3-a03c5bf5c61a" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="cf53b696-a5a3-b64c-68b4-6c31d1e7383f" RecordSourceID="22377">
			<column name="Content"><![CDATA[
If you want your external application to receive push notifications from Acumatica ERP or an Acumatica Framework-based application but you cannot publish a web hook (for example, for security reasons), the system can send notifications to the SignalR hub, from which any connected application can receive the notifications. {br}

To connect the external application to the SignalR hub, follow the instructions in this topic. For more information on push notifications, see [HelpRoot_Dev_Integration\IS__mng_Push_Notificatons|Configuring Push Notifications].
==To Connect to the SignalR Hub==[anchor|#_7814307a-80b0-4e39-8ddc-6812a093f901]
#In your external application, set up a Basic authentication token to authenticate the application in Acumatica ERP or an Acumatica Framework-based application, as shown in the following code.<source lang="csharp">using System;
using System.Text;

class Program
{  
  static void Main(string[] args)  
  {    
    var login = "admin"; 
    var tenant = "Tenant";  
    var password = "123";
    // Set up a Basic authentication token 
    var basicAuthToken = Convert.ToBase64String(
     Encoding.UTF8.GetBytes(login+"@"+tenant+":"+password));
  }
}</source>
#In your external application, connect to an instance of Acumatica ERP or an Acumatica Framework-based application, as shown in the following code.<source lang="csharp">using System;
using System.Text;
using Microsoft.AspNet.SignalR.Client.Hubs;

class Program
{  
  static void Main(string[] args)  
  {    
    ...
    //Connect to an Acumatica ERP instance
    var connection = new HubConnection("http://localhost:8081/AcumaticaDB/");
    connection.Headers.Add("Authorization", "Basic "+basicAuthToken);
  }
}</source>
#In your external application, create a proxy to the SignalR hub, based on the name of the hub that was specified in the '''Destination Name''' box when the push notification was defined on the [HelpRoot_FormReference\SM_30_20_00|Push Notifications] ([~/?ScreenId=SM302000|SM302000]) form.<source lang="csharp">using System;
using System.Text;
using Microsoft.AspNet.SignalR.Client.Hubs;

class Program
{  
  static void Main(string[] args)  
  {    
    ...
    //Create a proxy to hub
    //Use "PushNotificationsHub" as the address of the hub
    var myHub = connection.CreateHubProxy("PushNotificationsHub");
    connection.Start().ContinueWith(task =&gt;
    {       
      if(task.IsFaulted)
      {  
        Console.WriteLine(
          "There was an error during open of the connection:{0}", 
          task.Exception.GetBaseException());
      } 
      else 
      {   
        //Instead of "TestSignalR", specify the name 
        //that you specified on the Push Notifications form
        myHub.Invoke&lt;string&gt;("Subscribe", "TestSignalR").Wait();
      }
    }).Wait();
  }
}</source>
#In your external application, define the class for a notification, as shown in the following code. For details on the format of the push notifications, see [HelpRoot_Dev_Integration\IS__con_Push_Notification_Format|Push Notification Format].<source lang="csharp">public class NotificationResult
{  
  public object[] Inserted { get; set; }
  public object[] Deleted { get; set; }
  public string Query { get; set; }   
  public string CompanyId { get; set; }   
  public Guid Id { get; set; }   
  public long TimeStamp { get; set; }   
  public Dictionary&lt;string, object&gt; AdditionalInfo { get; set; }
}</source>
#In your external application, process notifications. The following code displays the number of inserted and updated records specified in the notification in the console application window.<source lang="csharp">using System;
using System.Text;
using Microsoft.AspNet.SignalR.Client.Hubs;

class Program
{  
  static void Main(string[] args)  
  {    
    ...
    //Process the notifications
    myHub.On&lt;NotificationResult&gt;("ReceiveNotification", nr =&gt;      
    {        
      Console.WriteLine("Inserted {0}", nr.Inserted.Length);
      Console.WriteLine("Deleted {0}", nr.Deleted.Length);
    });
    Console.Read(); 
    connection.Stop();
  }
}</source>
#Compile and test your application.

==Related Articles==
*[HelpRoot_Dev_Integration\IS__how_Configure_Push_Notifications|To Configure Push Notifications]]]></column>
			<column name="PlainText"><![CDATA[To Connect to the SignalR Hub If you want your external application to receive push notifications from  Acumatica ERP or an  Acumatica Framework-based application but you cannot publish a web hook (for example, for security                 reasons), the system can send notifications to the SignalR hub, from which any                 connected application can receive the notifications.  To connect the external application to the SignalR hub, follow the instructions in                 this topic. For more information on push notifications, see  Configuring Push Notifications. To Connect to the SignalR Hub In your external application, set up a Basic authentication token to                     authenticate the application in  Acumatica ERP or an  Acumatica Framework-based application, as shown in the following                     code. using System;
using System.Text;

class Program
{  
  static void Main(string[] args)  
  {    
    var login = "admin"; 
    var tenant = "Tenant";  
    var password = "123";
    // Set up a Basic authentication token 
    var basicAuthToken = Convert.ToBase64String(
     Encoding.UTF8.GetBytes(login+"@"+tenant+":"+password));
  }
} In your external application, connect to an instance of  Acumatica ERP or an  Acumatica Framework-based application, as shown in the following                     code. using System;
using System.Text;
using Microsoft.AspNet.SignalR.Client.Hubs;

class Program
{  
  static void Main(string[] args)  
  {    
    ...
    //Connect to an  Acumatica ERP instance
    var connection = new HubConnection("http://localhost:8081/AcumaticaDB/");
    connection.Headers.Add("Authorization", "Basic "+basicAuthToken);
  }
} In your external application, create a proxy to the SignalR hub, based on the                     name of the hub that was specified in the  Destination                         Name  box when the push notification was defined on the   ([~/?ScreenId=SM302000|SM302000]) Push Notifications                     (SM302000)                     form. using System;
using System.Text;
using Microsoft.AspNet.SignalR.Client.Hubs;

class Program
{  
  static void Main(string[] args)  
  {    
    ...
    //Create a proxy to hub
    //Use "PushNotificationsHub" as the address of the hub
    var myHub = connection.CreateHubProxy("PushNotificationsHub");
    connection.Start().ContinueWith(task =>
    {       
      if(task.IsFaulted)
      {  
        Console.WriteLine(
          "There was an error during open of the connection:{0}", 
          task.Exception.GetBaseException());
      } 
      else 
      {   
        //Instead of "TestSignalR", specify the name 
        //that you specified on the Push Notifications form
        myHub.Invoke<string>("Subscribe", "TestSignalR").Wait();
      }
    }).Wait();
  }
} In your external application, define the class for a notification, as shown in                     the following code. For details on the format of the push notifications, see                          Push Notification Format. public class NotificationResult
{  
  public object[] Inserted { get; set; }
  public object[] Deleted { get; set; }
  public string Query { get; set; }   
  public string CompanyId { get; set; }   
  public Guid Id { get; set; }   
  public long TimeStamp { get; set; }   
  public Dictionary<string, object> AdditionalInfo { get; set; }
} In your external application, process notifications. The following code displays                     the number of inserted and updated records specified in the notification in the                     console application                     window. using System;
using System.Text;
using Microsoft.AspNet.SignalR.Client.Hubs;

class Program
{  
  static void Main(string[] args)  
  {    
    ...
    //Process the notifications
    myHub.On<NotificationResult>("ReceiveNotification", nr =>      
    {        
      Console.WriteLine("Inserted {0}", nr.Inserted.Length);
      Console.WriteLine("Deleted {0}", nr.Deleted.Length);
    });
    Console.Read(); 
    connection.Stop();
  }
} Compile and test your application. ]]></column>
		</row>
		<row PageID="b3ca2deb-516c-44b4-886c-48e599b285a6" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="0b2ccf4c-81ff-5de8-9d39-88c6b18a99cf" RecordSourceID="22377">
			<column name="Content"><![CDATA[
In Acumatica ERP or an Acumatica Framework-based application, you can add additional information to push notifications, such as the username of the user that performed the data change or the business date when the data transaction is performed. The additional information can be added to the <tt>AdditionalInfo</tt> element of notifications in JSON format. For more information on the format of notifications, see [HelpRoot_Dev_Integration\IS__con_Push_Notification_Format|Push Notification Format] in the Integration Development Guide.((({S:Hint}The additional information that you add to push notifications is included in all notifications that are sent from the Acumatica ERP or Acumatica Framework instance on which the additional information is configured.
))){br}

The dictionary of additional information can be implemented in a project of your Acumatica ERP extension library, in a ''Code'' item of an Acumatica ERP customization project, or in a project of your Acumatica Framework-based application. (For the differences between the use of extension libraries and ''Code'' items in a customization project, see [HelpRoot_Dev_Customization\CG_Platform_TO_Code_ExtLib_vsCode|Extension Library (DLL) Versus Code in a Customization Project] in the Customization Guide.){br}

To add additional information to push notifications, follow the instructions in this topic. For more information on the push notifications, see [HelpRoot_Dev_Integration\IS__mng_Push_Notificatons|Configuring Push Notifications] in the User Guide.
==To Add Additional Information to Push Notifications==[anchor|#_9365d5c2-d3ed-4f0c-8468-aa7b42cd125e]
#Define a class that implements the <tt>PX.Data.PushNotifications.ICommitEventEnricher</tt> interface in a project of your Acumatica ERP extension library, in a ''Code'' item of an Acumatica ERP customization project, or in a project of your Acumatica Framework-based application.
#In the class that implements the <tt>ICommitEventEnricher</tt> interface, implement the <tt>Enrich()</tt> method of the interface. In the method, add the properties that you want to be returned in push notifications.
#:((({S:Hint}The <tt>Enrich()</tt> method is called in the <tt>PX.Data.PXTransactionScope.Dispose()</tt> method. Therefore, the <tt>Enrich()</tt> method must not return data that is not accessible in this scope.
)))
#:The following code shows a sample implementation of the <tt>ICommitEventEnricher</tt> interface, which adds the business date and the name of the user to the <tt>AdditionalInfo</tt> element of notifications in JSON format. <source lang="csharp">using PX.Data;
using PX.Data.PushNotifications;

public class CommitEventEnricher : ICommitEventEnricher 
{ 
  public void Enrich(IQueueEvent commitEvent)          
  { 
    var businessDate = PXContext.PXIdentity?.BusinessDate; 
    var userName = PXContext.PXIdentity?.IdentityName; 
    commitEvent.AdditionalInfo.Add(nameof(businessDate), businessDate); 
    commitEvent.AdditionalInfo.Add(nameof(userName), userName);        
  }      
}</source>
#Compile your Acumatica ERP extension library or Acumatica Framework-based application, or publish the customization project with the ''Code'' item that contains the class implementation. 
#Run Acumatica ERP or your Acumatica Framework-based application and make sure that when the results of the query change, the application includes the additional information in the <tt>AdditionalInfo</tt> element of the notifications in JSON format, as shown in the following notification example. {{{{{
  ...
  "TimeStamp":636295833829493672,
  "AdditionalInfo":
  {
    "businessDate":"2017-05-05T15:16:23.1",
    "userName":"admin"
  }
}
}}}}

==Related Articles==
*[HelpRoot_Dev_Integration\IS__how_Configure_Push_Notifications|To Configure Push Notifications]
*[HelpRoot_Dev_Integration\IS__con_Push_Notification_Format|Push Notification Format]]]></column>
			<column name="PlainText"><![CDATA[To Add Additional Information to Push Notifications In  Acumatica ERP or an  Acumatica Framework-based application, you can add additional information to push notifications, such as the         username of the user that performed the data change or the business date when the data         transaction is performed. The additional information can be added to the            AdditionalInfo  element of notifications in JSON format. For more         information on the format of notifications, see  Push Notification Format in the Integration Development Guide. The additional information that you add to           push notifications is included in all notifications that are sent from the  Acumatica ERP or  Acumatica Framework instance on which the additional information is configured. The dictionary of additional information can be implemented in a project of your  Acumatica ERP extension library, in a  Code  item of an  Acumatica ERP customization project, or in a project of your  Acumatica Framework-based application. (For the differences between the use of extension libraries and            Code  items in a customization project, see  Extension Library (DLL) Versus Code in a Customization Project in the Customization Guide.) To add additional information to push notifications, follow the instructions in this topic.         For more information on the push notifications, see  Configuring Push Notifications         in the User Guide. To Add Additional Information to Push Notifications Define a class that implements the              PX.Data.PushNotifications.ICommitEventEnricher  interface in a project           of your  Acumatica ERP extension library, in a  Code  item of an  Acumatica ERP customization project, or in a project of your  Acumatica Framework-based application. In the class that implements the  ICommitEventEnricher  interface,           implement the  Enrich()  method of the interface. In the method, add the           properties that you want to be returned in push notifications. The                Enrich()  method is called in the                PX.Data.PXTransactionScope.Dispose()  method. Therefore, the                Enrich()  method must not return data that is not accessible in this             scope. The following code shows a sample implementation of the                ICommitEventEnricher  interface, which adds the business date and             the name of the user to the  AdditionalInfo  element of notifications             in JSON format.            using PX.Data;
using PX.Data.PushNotifications;

public class CommitEventEnricher : ICommitEventEnricher 
{ 
  public void Enrich(IQueueEvent commitEvent)          
  { 
    var businessDate = PXContext.PXIdentity?.BusinessDate; 
    var userName = PXContext.PXIdentity?.IdentityName; 
    commitEvent.AdditionalInfo.Add(nameof(businessDate), businessDate); 
    commitEvent.AdditionalInfo.Add(nameof(userName), userName);        
  }      
} Compile your  Acumatica ERP extension library or  Acumatica Framework-based application, or publish the customization project with the  Code  item that           contains the class implementation.  Run  Acumatica ERP or your  Acumatica Framework-based application and make sure that when the results of the query change, the           application includes the additional information in the  AdditionalInfo            element of the notifications in JSON format, as shown in the following notification           example.            {
  ...
  "TimeStamp":636295833829493672,
  "AdditionalInfo":
  {
    "businessDate":"2017-05-05T15:16:23.1",
    "userName":"admin"
  }
} ]]></column>
		</row>
		<row PageID="2cdef9b1-d4ef-48b4-8a92-093e7ea39552" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="96c2ff07-23b2-b8b5-f64b-0e3a836b526f" RecordSourceID="22377">
			<column name="Content"><![CDATA[
In Acumatica ERP or an Acumatica Framework-based application, you can send push notifications to the notification destinations, which can be of a predefined type (which is webhook, message queue, or SignalR hub) or of a custom type, which you can implement in the code of the application. {br}

The notification destination of a custom type can be implemented in a project of your Acumatica ERP extension library, in a ''Code'' item of an Acumatica ERP customization project, or in a project of your Acumatica Framework-based application. (For the differences in the use of extension libraries and ''Code'' items in a customization project, see [HelpRoot_Dev_Customization\CG_Platform_TO_Code_ExtLib_vsCode|Extension Library (DLL) Versus Code in a Customization Project] in the Customization Guide.){br}

To create a custom destination, follow the instructions in this topic. For more information on the push notifications, see [HelpRoot_Dev_Integration\IS__mng_Push_Notificatons|Configuring Push Notifications] in the Integration Development Guide.
==To Create a Custom Destination Type==[anchor|#_3617a7f5-da25-4dc5-9350-02f5933090d1]
#Define a class that implements the <tt>PX.PushNotifications.NotificationSenders.IPushNotificationSender</tt> interface, which is a sender of push notifications, in a project of your Acumatica ERP extension library, in a ''Code'' item of an Acumatica ERP customization project, or in a project of your Acumatica Framework-based application.
#In the class that implements the <tt>IPushNotificationSender</tt> interface, implement the following methods and properties of the interface:
#*The <tt>Address</tt> property, which is the address to which the system should send notifications. A user specifies the value of this property in the '''Address''' box on the [HelpRoot_FormReference\SM_30_20_00|Push Notifications] ([~/?ScreenId=SM302000|SM302000]) form. The property uses the following syntax.<source lang="csharp">string Address { get; }</source>
#*The <tt>Name</tt> property, which is the name of the notification destination. A user specifies the value of this property in the '''Destination Name''' box on the [HelpRoot_FormReference\SM_30_20_00|Push Notifications] ([~/?ScreenId=SM302000|SM302000]) form. Use the following syntax for the property.<source lang="csharp">string Name { get; }</source>
#*The <tt>Send</tt> method, which sends a notification synchronously and uses as the parameters the notification to be sent and a cancellation token. The method uses the following syntax.<source lang="csharp">void Send(
  NotificationResultWrapper results, 
  CancellationToken cancellationToken
);</source>
#*The <tt>SendAndForget</tt> method, which sends a notification without blocking the current thread. We recommend that you use <tt>HostingEnvironment.QueueBackgroundWorkItem</tt> in the method implementation to delegate the execution to a parallel thread. The following code shows a sample implementation of the method.<source lang="csharp">using System;
using System.Threading;
using PX.PushNotifications;
using PX.PushNotifications.NotificationSenders;

public void SendAndForget(
  NotificationResultWrapper result, 
  CancellationToken cancellationToken, 
  Action onSendingFailed, 
  Action finalizer)
{
  try
  {
    Send(result, cancellationToken);
  }
  catch (Exception e)
  {        
    onSendingFailed($"Send to target {Name} failed: ({e.Message})");
  }
  finally
  {
    finalizer();
  }
}</source>
#Define a class that implements the <tt>PX.PushNotifications.NotificationSenders.IPushNotificationSenderFactory</tt> interface, which creates a sender of push notifications, in a project of your Acumatica ERP extension library, in a ''Code'' item of an Acumatica ERP customization project, or in a project of your Acumatica Framework-based application.
#In the class that implements the <tt>IPushNotificationSenderFactory</tt> interface, implement the following methods and properties of the interface:
#*The <tt>Create</tt> method, which creates a sender and uses as the parameters the destination address, the name of the notification destination, and the additional parameters (such as a header for an HTTP address). Use the following syntax for the method.<source lang="csharp">IPushNotificationSender Create(
  string address, 
  string name, 
  IDictionary&lt;string, object&gt; additionalParameters
);</source>
#*The <tt>Type</tt> property, which is a {{string}} identifier of the destination type that is exactly four characters long. The value of this property is stored in the database. The property uses the following syntax.<source lang="csharp">string Type { get; }</source>
#*The <tt>TypeDescription</tt> property, which is a {{string}} label of the destination type. A user selects the value of this property in the '''Destination Type''' box on the [HelpRoot_FormReference\SM_30_20_00|Push Notifications] ([~/?ScreenId=SM302000|SM302000]) form. Use the following syntax for the property.<source lang="csharp">string TypeDescription { get; }</source>
#Compile your Acumatica ERP extension library or Acumatica Framework-based application, or publish the customization project that contains the ''Code'' item or items with the implementation of the classes. 
#Run Acumatica ERP or your Acumatica Framework-based application, and test the new destination type. 

==Related Articles==
*[HelpRoot_Dev_Integration\IS__how_Configure_Push_Notifications|To Configure Push Notifications]]]></column>
			<column name="PlainText"><![CDATA[To Create a Custom Destination Type In  Acumatica ERP or an  Acumatica Framework-based application, you can send push notifications to the notification                 destinations, which can be of a predefined type (which is webhook, message queue, or                 SignalR hub) or of a custom type, which you can implement in the code of the                 application.  The notification destination of a custom type can be implemented in a project of your                      Acumatica ERP extension library, in a  Code  item of an  Acumatica ERP customization project, or in a project of your  Acumatica Framework-based application. (For the differences in the use of extension libraries and                      Code  items in a customization project, see  Extension Library (DLL) Versus Code in a Customization Project in the Customization Guide.) To create a custom destination, follow the instructions in this topic. For more                 information on the push notifications, see  Configuring Push Notifications in the Integration Development Guide. To Create a Custom Destination Type Define a class that implements the                          PX.PushNotifications.NotificationSenders.IPushNotificationSender                      interface, which is a sender of push notifications, in a project of your  Acumatica ERP extension library, in a  Code  item of an  Acumatica ERP customization project, or in a project of your  Acumatica Framework-based application. In the class that implements the  IPushNotificationSender                      interface, implement the following methods and properties of the interface: The  Address  property, which is the address to which                             the system should send notifications. A user specifies the value of this                             property in the  Address  box on the   ([~/?ScreenId=SM302000|SM302000]) Push Notifications (SM302000) form. The property uses the following                             syntax. string Address { get; } The  Name  property, which is the name of the                             notification destination. A user specifies the value of this property in                             the  Destination Name  box on the   ([~/?ScreenId=SM302000|SM302000]) Push Notifications (SM302000) form. Use the following syntax for the                             property. string Name { get; } The  Send  method, which sends a notification                             synchronously and uses as the parameters the notification to be sent and                             a cancellation token. The method uses the following                             syntax. void Send(
  NotificationResultWrapper results, 
  CancellationToken cancellationToken
); The  SendAndForget  method, which sends a notification                             without blocking the current thread. We recommend that you use                                  HostingEnvironment.QueueBackgroundWorkItem  in the                             method implementation to delegate the execution to a parallel thread.                             The following code shows a sample implementation of the                             method. using System;
using System.Threading;
using PX.PushNotifications;
using PX.PushNotifications.NotificationSenders;

public void SendAndForget(
  NotificationResultWrapper result, 
  CancellationToken cancellationToken, 
  Action onSendingFailed, 
  Action finalizer)
{
  try
  {
    Send(result, cancellationToken);
  }
  catch (Exception e)
  {        
    onSendingFailed($"Send to target {Name} failed: ({e.Message})");
  }
  finally
  {
    finalizer();
  }
} Define a class that implements the                          PX.PushNotifications.NotificationSenders.IPushNotificationSenderFactory                      interface, which creates a sender of push notifications, in a project of your                          Acumatica ERP extension library, in a  Code  item of an  Acumatica ERP customization project, or in a project of your  Acumatica Framework-based application. In the class that implements the                          IPushNotificationSenderFactory  interface, implement the                     following methods and properties of the interface: The  Create  method, which creates a sender and uses as                             the parameters the destination address, the name of the notification                             destination, and the additional parameters (such as a header for an HTTP                             address). Use the following syntax for the                             method. IPushNotificationSender Create(
  string address, 
  string name, 
  IDictionary<string, object> additionalParameters
); The  Type  property, which is a  string                              identifier of the destination type that is exactly four characters long.                             The value of this property is stored in the database. The property uses                             the following                             syntax. string Type { get; } The  TypeDescription  property, which is a                                  string  label of the destination type. A user                             selects the value of this property in the  Destination                                 Type  box on the   ([~/?ScreenId=SM302000|SM302000]) Push Notifications (SM302000) form. Use the following syntax for the                             property. string TypeDescription { get; } Compile your  Acumatica ERP extension library or  Acumatica Framework-based application, or publish the customization project that contains the                          Code  item or items with the implementation of the classes.  Run  Acumatica ERP or your  Acumatica Framework-based application, and test the new destination type.  ]]></column>
		</row>
		<row PageID="ca2716f1-025a-4a6e-9090-797cf32b0459" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="9d15fc8c-1a6d-55ca-4fc1-66691a5a8c5b" RecordSourceID="22377">
			<column name="Content"><![CDATA[
 Acumatica ERP provides the reference information for the methods of the contract-based REST API endpoint in the <tt>swagger.json</tt> file, which is an OpenAPI 2.0 (formerly known as Swagger 2.0) file. (For more information about the OpenAPI specification, see [https://www.openapis.org].) You can use this file to review the API of the endpoint and build the client applications of Acumatica ERP based on this file.{br}

 Acumatica ERP 2019 R1 does not provide a user interface to view the <tt>swagger.json</tt> file. You can use external tools to view the file.{br}

You can retrieve the <tt>swagger.json</tt> file by clicking '''View Endpoint Service''' > '''OpenAPI 2.0''' on the [HelpRoot_FormReference\SM_20_70_60|Web Service Endpoints] ([~/?ScreenId=SM207060|SM207060]) form, or by using the following URL.{{{{http://&lt;Base endpoint URL&gt;/swagger.json
}}}}{br}

In this URL, {{<Base endpoint URL>}} is the URL of the contract-based endpoint through which you are going to work with Acumatica ERP. This URL has the following format: {{http://<Acumatica ERP instance URL>/entity/<Endpoint name>/<Endpoint version>/}}. {br}

You can specify the <tt>company</tt> URL parameter to obtain information on the API of the endpoint available in a particular company. For example, suppose that you wanted to retrieve the API reference of the custom endpoint with the name ''MyEndpoint'' and Version 6.00.001 available in the ''MyCompany'' company from a local Acumatica ERP instance with the name ''AcumaticaDB''. You would use the following URL to obtain the <tt>swagger.json</tt> file.{{{{http://localhost/AcumaticaDB/entity/MyEndpoint/6.00.001/swagger.json?company=MyCompany
}}}}{br}

If no company is specified, the API of the endpoint available in the company to which the user is currently logged in is returned.
==Related Articles==
*[HelpRoot_Dev_Integration\IS__mng_Work_with_Contract_Based_REST|Working with the Contract-Based REST API]
*[https://www.openapis.org]]]></column>
			<column name="PlainText"><![CDATA[Contract-Based REST API Reference  Acumatica ERP provides the reference information for the methods of the contract-based REST API endpoint in    the  swagger.json  file, which is an OpenAPI 2.0 (formerly known as Swagger    2.0) file. (For more information about the OpenAPI specification, see  .) You can use this file to    review the API of the endpoint and build the client applications of  Acumatica ERP    based on this file.  Acumatica ERP 2019 R1    does not provide a user interface to view the  swagger.json  file. You can use    external tools to view the file. You can retrieve the  swagger.json  file by clicking  View Endpoint Service OpenAPI 2.0  on the   ([~/?ScreenId=SM207060|SM207060]) Web Service Endpoints (SM207060) form, or by using the    following URL. http://<Base endpoint URL>/swagger.json In this URL,  <Base endpoint URL>  is the URL of the contract-based endpoint    through which you are going to work with  Acumatica ERP.    This URL has the following format:  http://< Acumatica ERP     instance URL>/entity/<Endpoint name>/<Endpoint version>/ .  You can specify the  company  URL parameter to obtain information on the API    of the endpoint available in a particular company. For example, suppose that you wanted to    retrieve the API reference of the custom endpoint with the name  MyEndpoint  and Version    6.00.001 available in the  MyCompany  company from a local  Acumatica ERP    instance with the name  AcumaticaDB . You would use the following URL to obtain the      swagger.json     file. http://localhost/AcumaticaDB/entity/MyEndpoint/6.00.001/swagger.json?company=MyCompany If no company is specified, the API of the endpoint available in the company to which the user    is currently logged in is returned. ]]></column>
		</row>
		<row PageID="de53dc70-a0c9-4525-9293-f2a6e984fa3f" Language="en-US" PageRevisionID="1" PlainText="Contract-Based SOAP API Reference In this chapter, you will find the reference information for the main objects and methods of       the contract-based SOAP API; these objects and methods are used to transfer data to and from          Acumatica ERP. This chapter covers the following methods, which are exposed by the          DefaultSoapClient  class: Semantics and syntax of some methods and         properties are different depending on the version of the system contract. Login() MethodLogout() MethodSetBusinessDate() MethodGet() MethodGetList() Method (Contract Version 3)GetList() Method (Contract Version 2)Put() MethodDelete() MethodInvoke() MethodGetProcessStatus() MethodGetFiles() MethodPutFiles() MethodGetCustomFieldSchema() MethodYou will also find descriptions of the following properties: Attributes PropertyCustomFields PropertyReturnBehavior Property (Contract Version 3)ReturnBehavior Property (Contract Version 2)" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="abcd9272-37a6-8fbe-140d-c1520d334a33" RecordSourceID="22377">
			<column name="Content"><![CDATA[
In this chapter, you will find the reference information for the main objects and methods of the contract-based SOAP API; these objects and methods are used to transfer data to and from Acumatica ERP. This chapter covers the following methods, which are exposed by the <tt>DefaultSoapClient</tt> class:((({S:Hint}Semantics and syntax of some methods and properties are different depending on the version of the system contract.
)))[anchor|#_c800269c-3102-4c5d-b2a3-8a4d69b0ab3a]
*[HelpRoot_Dev_Integration\IS__con_CB_Login|Login() Method]
*[HelpRoot_Dev_Integration\IS__con_CB_Logout|Logout() Method]
*[HelpRoot_Dev_Integration\IS__con_CB_SetBusinessDate|SetBusinessDate() Method]
*[HelpRoot_Dev_Integration\IS__con_CB_Get|Get() Method]
*[HelpRoot_Dev_Integration\IS__con_CB_GetList_3|GetList() Method (Contract Version 3)]
*[HelpRoot_Dev_Integration\IS__con_CB_GetList_2|GetList() Method (Contract Version 2)]
*[HelpRoot_Dev_Integration\IS__con_CB_Put|Put() Method]
*[HelpRoot_Dev_Integration\IS__con_CB_Delete|Delete() Method]
*[HelpRoot_Dev_Integration\IS__con_CB_Invoke|Invoke() Method]
*[HelpRoot_Dev_Integration\IS__con_CB_GetProcessStatus|GetProcessStatus() Method]
*[HelpRoot_Dev_Integration\IS__con_CB_GetFiles|GetFiles() Method]
*[HelpRoot_Dev_Integration\IS__con_CB_PutFiles|PutFiles() Method]
*[HelpRoot_Dev_Integration\IS__con_CB_GetCustomFieldSchema|GetCustomFieldSchema() Method]
{br}

You will also find descriptions of the following properties:[anchor|#_d05f4d3f-00cc-4bb2-bd74-155e0d1210a4]
*[HelpRoot_Dev_Integration\IS__con_CB_Attributes|Attributes Property]
*[HelpRoot_Dev_Integration\IS__con_CB_CustomFields_2|CustomFields Property]
*[HelpRoot_Dev_Integration\IS__con_CB_ReturnBehavior_3|ReturnBehavior Property (Contract Version 3)]
*[HelpRoot_Dev_Integration\IS__con_CB_ReturnBehavior_2|ReturnBehavior Property (Contract Version 2)]
]]></column>
		</row>
		<row PageID="410c5bba-af7b-47ae-86a4-9af70069a0b6" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="a45e0ee1-a7e8-0d38-0f0c-9349164b3f5c" RecordSourceID="22377">
			<column name="Content"><![CDATA[[anchor|#_a2c8a57b-7614-4fd4-828f-7c26f308f384]
You use the <tt>Login()</tt> method of a <tt>DefaultSoapClient</tt> object to make the client application sign in to Acumatica ERP.{br}{TOC}
==Syntax==<source lang="csharp">public void Login(string name, string password, string company, string branch, string locale)</source>
==Parameters==[anchor|#_e13dbc73-5be4-4b44-aed5-a495114aa998]
*''name'': The username that the application should use to sign in to Acumatica ERP, such as {{"admin"}}.
*''password'': The password for the username, such as {{"123"}}.
*''company'': The name of the tenant to which the application should sign in, such as {{"MyStore"}}. You can view the name that should be used for the tenant in the '''Login Name''' box of the [HelpRoot_FormReference\SM_20_35_20|Tenants] ([~/?ScreenId=SM203520|SM203520]) form.
*''branch'': The ID of the company to which the application should sign in. You can view the ID of the company in the '''Company ID''' box of the [HelpRoot_FormReference\CS_10_15_00|Companies] ([~/?ScreenId=CS101500|CS101500]) form.
*''locale'': The locale that should be used in Acumatica ERP. You should specify the locale in the {{System.Globalization.CultureInfo}} format converted to {{string}}, as with {{"EN-US"}}. 
*:((({S:Hint}This parameter has been developed for future use. You do not need to set its value. 
)))

==Example==[anchor|#_fccc52b4-b7e0-445b-92bb-a940560254cb]
The following code causes the client to sign in to Acumatica ERP by using the parameters that are specified in the application settings.[anchor|#_79be4f66-df4b-45aa-a795-0db442160445]{{{{using (var soapClient = new DefaultSoapClient())
{
  //Log in to Acumatica ERP
  soapClient.Login
  (
    Properties.Settings.Default.UserName,
    Properties.Settings.Default.Password,
    Properties.Settings.Default.TenantName,
    Properties.Settings.Default.CompanyName,
    null
  );
}
}}}}
==Usage Notes==
For each call of the <tt>Login()</tt> method, you must call the <tt>Logout()</tt> method after you finish your work with Acumatica ERP to close the session. {br}

You should take into account Acumatica ERP license API limits when using the <tt>Login()</tt> method. For details, see [HelpRoot_Install\License_Restrictions_APIUsers|License Restrictions for API Users].
==Related Articles==
*[HelpRoot_Dev_Integration\IS__con_CB_Logout|Logout() Method]]]></column>
			<column name="PlainText"><![CDATA[Login() Method You use the  Login()  method of a                  DefaultSoapClient  object to make the client application sign in             to  Acumatica ERP. Syntax public void Login(string name, string password, string company, string branch, string locale) Parameters name : The username that the application should use to sign in to  Acumatica ERP, such as  "admin" . password : The password for the username, such as  "123" . company : The name of the tenant to which the application should sign in, such as  "MyStore" . You can view the name that should be used for the tenant in the  Login Name  box of the   ([~/?ScreenId=SM203520|SM203520]) Tenants (SM203520) form. branch : The ID of the company to which the application should sign in. You can view the ID of the company in the  Company ID  box of the   ([~/?ScreenId=CS101500|CS101500]) Companies (CS101500) form. locale : The locale that should be used in  Acumatica ERP. You should specify the locale in the  System.Globalization.CultureInfo  format converted to  string , as with  "EN-US" .  This parameter has been developed for future use. You do not need to set its value.  Example The following code causes the client to sign in to  Acumatica ERP by using       the parameters that are specified in the application       settings. using (var soapClient = new DefaultSoapClient())
{
  //Log in to  Acumatica ERP
  soapClient.Login
  (
    Properties.Settings.Default.UserName,
    Properties.Settings.Default.Password,
    Properties.Settings.Default.TenantName,
    Properties.Settings.Default.CompanyName,
    null
  );
} Usage Notes For each call of the  Login()  method, you must call the            Logout()  method after you finish your work with  Acumatica ERP to close the session.  You should take into account  Acumatica ERP license API limits when using the  Login()  method. For details, see            License Restrictions for API Users. ]]></column>
		</row>
		<row PageID="0ad6688d-2a70-484e-84c8-645d43f3e4f4" Language="en-US" PageRevisionID="1" PlainText="Logout() Method You use the  Logout()  method of a                  DefaultSoapClient  object to make the client application sign out             from  Acumatica ERP. Syntax public void Logout() Example The following code shows how to make the client       application sign out from  Acumatica ERP. using (var soapClient = new DefaultSoapClient())&#xA;{&#xA;  //Sign in to  Acumatica ERP&#xA;  ...&#xA;  try&#xA;  {&#xA;    //Work with  Acumatica ERP through the web services API&#xA;  }&#xA;  finally&#xA;  {&#xA;    //Sign out from  Acumatica ERP&#xA;    soapClient.Logout();&#xA;  }&#xA;} Usage Notes For each call of the  Login()              method, you must call the  Logout()  method after you finish your work             with  Acumatica ERP             to close the session. Therefore, we recommend that you call the                  Logout()  method within the  finally  block. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="5e0abeaf-44ea-5006-f952-f1d7ec46a1cf" RecordSourceID="22377">
			<column name="Content"><![CDATA[[anchor|#_411d9897-1c9c-4f97-9285-602fe124f821]
You use the <tt>Logout()</tt> method of a <tt>DefaultSoapClient</tt> object to make the client application sign out from Acumatica ERP.
==Syntax=={{{{public void Logout()
}}}}
==Example==[anchor|#_9ff1d29d-6a51-40dc-acec-4c0a4c0395e1]
The following code shows how to make the client application sign out from Acumatica ERP.{{{{using (var soapClient = new DefaultSoapClient())
{
  //Sign in to Acumatica ERP
  ...
  try
  {
    //Work with Acumatica ERP through the web services API
  }
  finally
  {
    //Sign out from Acumatica ERP
    soapClient.Logout();
  }
}
}}}}
==Usage Notes==[anchor|#_4c684c94-1a1e-47e4-92a2-5d32b6d53a1e]
For each call of the <tt>Login()</tt> method, you must call the <tt>Logout()</tt> method after you finish your work with Acumatica ERP to close the session. Therefore, we recommend that you call the <tt>Logout()</tt> method within the {{finally}} block.
==Related Articles==
*[HelpRoot_Dev_Integration\IS__con_CB_Login|Login() Method]]]></column>
		</row>
		<row PageID="18a2bb88-e47e-45b9-b11f-581e57468d9c" Language="en-US" PageRevisionID="1" Content="&#xA;You use the &lt;tt&gt;SetBusinessDate()&lt;/tt&gt; method to specify the business date in Acumatica ERP. You can set the business date to any date to make the system insert this date into the date fields by default. The business date is inserted into any new document that you create and is used in the default selection parameters that appear on processing and inquiry screens. &#xA;==Syntax=={{{{public void SetBusinessDate(System.DateTime businessDate)&#xA;}}}}&#xA;==Parameter==[anchor|#_22041edc-de16-4c09-81c1-f61d160e18fd]&#xA;*''businessDate'': The business date that should be used in Acumatica ERP.&#xA;&#xA;==Usage Notes==&#xA;The business date resets to the current date of your computer after each login. Therefore, if you need to specify a business date in your application, you should call the &lt;tt&gt;SetBusinessDate()&lt;/tt&gt; method after each client application login." PlainText="SetBusinessDate() Method You use the  SetBusinessDate()  method to specify the business date in  Acumatica ERP. You can set the business date to any date to make the system insert this date into the         date fields by default. The business date is inserted into any new document that you create         and is used in the default selection parameters that appear on processing and inquiry         screens.  Syntax public void SetBusinessDate(System.DateTime businessDate) Parameter businessDate : The business date that should be used in  Acumatica ERP. Usage Notes The business date resets to the current date of your computer after each login. Therefore,         if you need to specify a business date in your application, you should call the            SetBusinessDate()  method after each client application login. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="585a0c29-2c47-ccbd-09b8-e096d1fc1cf5" RecordSourceID="22377" />
		<row PageID="6cd68c87-2ead-40da-824e-eb7d179b598c" Language="en-US" PageRevisionID="1" Content="&#xA;You use the &lt;tt&gt;Get()&lt;/tt&gt; method to get one record that satisfies the specified conditions from Acumatica ERP. The conditions must specify only one record in Acumatica ERP; otherwise, an error is returned. If you need to get multiple records that satisfy the specified conditions, use the &lt;tt&gt;GetList()&lt;/tt&gt; method instead.&#xA;==Syntax=={{{{public Entity Get(Entity entity)&#xA;}}}}&#xA;==Parameter==[anchor|#_b5873a93-9391-4ace-9862-00e56ef9dab9]&#xA;*''entity'': The entity that specifies the record that should be obtained from Acumatica ERP.&#xA;&#xA;==Return Value==&#xA;The method returns the &lt;tt&gt;Entity&lt;/tt&gt; object that corresponds to the specified record.&#xA;==Example==&#xA;The following code gets a customer record with the specified customer ID.{{{{Customer customer = new Customer&#xA;{&#xA;  CustomerID = new StringSearch { Value = &quot;C000000003&quot; },&#xA;};&#xA;Customer customerData = (Customer)soapClient.Get(customer);&#xA;}}}}" PlainText="Get() Method You use the  Get()  method to get one record that satisfies the specified         conditions from  Acumatica ERP. The conditions must specify only one record in  Acumatica ERP; otherwise, an error is returned. If you need to get multiple records that satisfy the         specified conditions, use the  GetList()  method instead. Syntax public Entity Get(Entity entity) Parameter entity : The entity that specifies the record that should be obtained from  Acumatica ERP. Return Value The method returns the  Entity  object that corresponds to the specified         record. Example The following code gets a customer record with the specified customer         ID. Customer customer = new Customer&#xA;{&#xA;  CustomerID = new StringSearch { Value = &quot;C000000003&quot; },&#xA;};&#xA;Customer customerData = (Customer)soapClient.Get(customer); " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="e8fbe4f5-ef67-85fb-48ff-ef3db04b056d" RecordSourceID="22377" />
		<row PageID="2f1bcceb-fcf6-4e92-a85c-50cc8166612b" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="f85791d0-9dd9-90cc-4d99-46daeed3322f" RecordSourceID="22377">
			<column name="Content"><![CDATA[
((({S:Hint}This topic describes the <tt>GetList()</tt> method that is available in Version 3 of the system contract.
)))[anchor|#_6c94d6fb-4044-4e78-aa11-63b0239953fc]{br}

You use the <tt>GetList()</tt> method to retrieve from an Acumatica ERP data entry form a list of records that satisfy the specified conditions. ((({S:Hint}Do not use the <tt>GetList()</tt> method to retrieve the records from an inquiry form; instead, use the <tt>Put()</tt> method.
)))
==Syntax==<source lang="csharp">public Entity[] GetList(Entity entity)</source>
==Parameter==[anchor|#_cc0d0a84-3d8b-4f8c-b14d-2e2047770d35][anchor|#_226fd847-13c4-4a42-8ee0-5c8a2045e498]
*''entity'': The entity that specifies the conditions that must be met for the records to be returned from Acumatica ERP.
[anchor|#_f874cb1b-e69a-4603-b26c-4200a38c30c6]
==Return Value==
The method returns the array of <tt>Entity</tt> objects that correspond to the specified records.
==Example==
The following example gets the list of stock items that have the ''Active'' status and that were modified within the past month. The code returns only the top-level fields of each stock item record (no fields of the detail or linked entities are returned). {{{{//Filter the items by the last modified date and status
StockItem stockItemsToBeFound = new StockItem
{
  LastModified = new DateTimeSearch
  {
    Value = DateTime.Now.AddMonths(-1),
    Condition = DateTimeCondition.IsGreaterThan
  },
  ItemStatus = new StringSearch { Value = "Active" }
};

//Get the list of stock items
Entity[] stockItems = soapClient.GetList(stockItemsToBeFound);
}}}}
==Usage Notes==[anchor|#_c7bf8056-c05c-4e64-9064-a6042facb163]
[anchor|#_ed37725d-aefa-4b43-8ffe-ace5b64c3bb8][anchor|#_8a942975-2590-4582-bf0f-8103362be25d]
*To specify the fields whose values you need to obtain for each entity, you use the <tt>ReturnBehavior</tt> property of the entity.
*When the <tt>GetList()</tt> method is called, the system tries to optimize the retrieval of the records and obtain all needed records in one request to the database (instead of requesting the records one by one). If the optimization fails, the system returns an error, which specifies the entities or fields that caused the failure of the optimized request. To prevent the error from being generated, you can do any of the following:
**If you do not need to retrieve the entities or fields that caused the failure, you can exclude these entities or fields from the list of requested fields by setting the <tt>ReturnBehavior</tt> property to <tt>None</tt> for the entities, or by using the <tt>Skip</tt> classes of the needed value type (such as <tt>StringSkip</tt>) for the fields.
**If you need to retrieve the entities of fields that have caused the failure, you can retrieve the needed records one by one by using the [HelpRoot_Dev_Integration\IS__con_CB_Get|Get()] method.
*:Because of this optimization, you cannot retrieve from Acumatica ERP a list of records with multiple detail entities. If you need to retrieve multiple detail entities, you should perform multiple requests each of which requests one detail entity.

==Related Articles==
*[HelpRoot_Dev_Integration\IS__con_CB_ReturnBehavior_3|ReturnBehavior Property (Contract Version 3)]]]></column>
			<column name="PlainText"><![CDATA[GetList() Method (Contract Version 3) This topic describes the  GetList()  method that is available in           Version 3 of the system contract. You use the  GetList()  method to             retrieve from an  Acumatica ERP             data entry form a list of records that satisfy the specified conditions.  Do not                 use the  GetList()  method to retrieve the records from an inquiry                 form; instead, use the  Put()  method. Syntax public Entity[] GetList(Entity entity) Parameter entity : The entity that specifies the             conditions that must be met for the records to be returned from  Acumatica ERP. Return Value The method returns the array of  Entity  objects that correspond to the specified records. Example The following example gets the list of stock items that have the  Active  status and         that were modified within the past month. The code returns only the top-level fields of each         stock item record (no fields of the detail or linked entities are returned).          //Filter the items by the last modified date and status
StockItem stockItemsToBeFound = new StockItem
{
  LastModified = new DateTimeSearch
  {
    Value = DateTime.Now.AddMonths(-1),
    Condition = DateTimeCondition.IsGreaterThan
  },
  ItemStatus = new StringSearch { Value = "Active" }
};

//Get the list of stock items
Entity[] stockItems = soapClient.GetList(stockItemsToBeFound); Usage Notes To specify the fields whose values you need to obtain for each entity, you use the  ReturnBehavior  property of the entity. When the  GetList()  method is called, the system tries to optimize             the retrieval of the records and obtain all needed records in one request to the             database (instead of requesting the records one by one). If the optimization fails, the             system returns an error, which specifies the entities or fields that caused the failure             of the optimized request. To prevent the error from being generated, you can do any of             the following: If you do not need to retrieve the entities or fields that caused the failure, you                 can exclude these entities or fields from the list of requested fields by setting                 the  ReturnBehavior  property to  None  for the                 entities, or by using the  Skip  classes of the needed value type                 (such as  StringSkip ) for the fields. If you need to retrieve the entities of fields that have caused the failure, you                 can retrieve the needed records one by one by using the  Get() Get()                 method. Because of this optimization, you cannot retrieve from  Acumatica ERP a list of records with multiple detail entities. If you need to retrieve multiple               detail entities, you should perform multiple requests each of which requests one               detail entity. ]]></column>
		</row>
		<row PageID="a0ee6d35-b047-4184-be94-ce3b33fab607" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="af6aa4a5-e3cf-44d4-92a9-6f887b93af22" RecordSourceID="22377">
			<column name="Content"><![CDATA[
((({S:Hint}This topic describes the <tt>GetList()</tt> method that is available in Version 2 of the system contract.
)))[anchor|#_aa0342db-fe13-4d7f-83f2-954c1aee20d7]{br}

You use the <tt>GetList()</tt> method to retrieve from an Acumatica ERP data entry form a list of records that satisfy the specified conditions. ((({S:Hint}Do not use the <tt>GetList()</tt> method to retrieve the records from an inquiry form; instead, use the <tt>Put()</tt> method.
)))
==Syntax==<source lang="csharp">public Entity[] GetList(Entity entity)</source>
==Parameter==[anchor|#_2419188d-7237-4726-a8b7-894d2fea4092][anchor|#_07987a84-1d67-4377-bdfe-6e37a7fc4efb]
*''entity'': The entity that specifies the conditions that must be met for the records to be returned from Acumatica ERP.
[anchor|#_eced0b5e-d5bc-4a65-9632-dafd4aae67e4]
==Return Value==
The method returns the array of <tt>Entity</tt> objects that correspond to the specified records.
==Example==
The following example gets the list of stock items that have the ''Active'' status and that were modified within the past month. The code returns all fields of each stock item record. {{{{//Filter the items by the last modified date and status
StockItem stockItemsToBeFound = new StockItem
{
  LastModified = new DateTimeSearch
  {
    Value = DateTime.Now.AddMonths(-1),
    Condition = DateTimeCondition.IsGreaterThan
  },
  ItemStatus = new StringSearch { Value = "Active" }
};

//Get the list of stock items
Entity[] stockItems = soapClient.GetList(stockItemsToBeFound);
}}}}
==Usage Notes==[anchor|#_c7bf8056-c05c-4e64-9064-a6042facb163]
[anchor|#_eedd593d-8672-4b9f-854f-e9708cf3a31f][anchor|#_62426ca8-7c81-423d-9a1d-cbe25f0330ad]
*To specify the fields whose values you need to obtain for each entity, you use the <tt>ReturnBehavior</tt> property of the entity.
*When the <tt>GetList()</tt> method is called, the system tries to optimize the retrieval of the records and obtain all needed records in one request to the database. If the optimization fails, the system obtains the records one by one, which may significantly increase the time of data retrieval.

==Related Articles==
*[HelpRoot_Dev_Integration\IS__con_CB_ReturnBehavior_2|ReturnBehavior Property (Contract Version 2)]]]></column>
			<column name="PlainText"><![CDATA[GetList() Method (Contract Version 2) This topic describes the  GetList()  method that is available in           Version 2 of the system contract. You use the  GetList()  method to             retrieve from an  Acumatica ERP             data entry form a list of records that satisfy the specified conditions.  Do not                 use the  GetList()  method to retrieve the records from an inquiry                 form; instead, use the  Put()  method. Syntax public Entity[] GetList(Entity entity) Parameter entity : The entity that specifies the             conditions that must be met for the records to be returned from  Acumatica ERP. Return Value The method returns the array of  Entity  objects that correspond to the specified records. Example The following example gets the list of stock items that have the  Active  status and         that were modified within the past month. The code returns all fields of each stock item         record.          //Filter the items by the last modified date and status
StockItem stockItemsToBeFound = new StockItem
{
  LastModified = new DateTimeSearch
  {
    Value = DateTime.Now.AddMonths(-1),
    Condition = DateTimeCondition.IsGreaterThan
  },
  ItemStatus = new StringSearch { Value = "Active" }
};

//Get the list of stock items
Entity[] stockItems = soapClient.GetList(stockItemsToBeFound); Usage Notes To specify the fields whose values you need to obtain for each entity, you use the  ReturnBehavior  property of the entity. When the  GetList()  method is called, the system tries to optimize             the retrieval of the records and obtain all needed records in one request to the             database. If the optimization fails, the system obtains the records one by one, which             may significantly increase the time of data retrieval. ]]></column>
		</row>
		<row PageID="43df4348-d162-4005-b123-f2e01af6ca47" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="9c19cf9d-2232-f1aa-6b26-6cdf9fcfd32b" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You use the <tt>Put()</tt> method to create or modify a record on a data entry form of Acumatica ERP. For example, by using the <tt>Put()</tt> method, you can create a customer record on the [HelpRoot_FormReference\AR_30_30_00|Customers] ([~/?ScreenId=AR303000|AR303000]) form.{br}

You also use this method to retrieve data from an inquiry form. For example, by using the <tt>Put()</tt> method, you can retrieve data from the [HelpRoot_FormReference\IN_40_10_00|Inventory Summary] ([~/?ScreenId=IN401000|IN401000]) form.{br}{TOC}
==Syntax=={{{{public Entity Put(Entity entity)
}}}}
==Parameter==[anchor|#_5af687e6-e54a-4094-b5aa-3279a2eda36c]
*''entity'': The entity that specifies the values of the fields of the created record, or the entity that specifies the record that should be modified and the values of the fields that should be modified in this record. 
*:((({S:Hint}If you use this method to create or modify a record on a data entry form, the entity must specify only one record in Acumatica ERP. If the entity specifies more than one record or no records, an error is returned during the execution of the method.
)))

==Return Value==
The method returns the <tt>Entity</tt> object that corresponds to the created or modified record.
==Example 1: Creating a Record==
The following example creates a customer record with the specified field values in Acumatica ERP.<source lang="csharp">//Specify the values of a new customer record
Customer customerToBeCreated = new Customer
{
  CustomerID = new StringValue { Value = "JOHNGOOD" },
  CustomerName = new StringValue { Value = John Good" },
  MainContact = new Contact
  {
    Email = new StringValue { Value = "demo@gmail.com" },
    Address = new Address
    {
      AddressLine1 = new StringValue { Value = "43 Lake Washington Blvd NE" },
      AddressLine2 = new StringValue { Value = "Suite 100" },
      City = new StringValue { Value = "Kirkland" },
      State = new StringValue { Value = "WA" },
      PostalCode = new StringValue { Value = "98033" }
    }
  }
};

//Create a customer record with the specified values
Customer newCustomer = (Customer) soapClient.Put(customerToBeCreated);</source>
==Example 2: Updating a Record==
The following example searches for the needed customer record in Acumatica ERP by the email address and updates the record with the specified customer class value.<source lang="csharp">//Select the needed customer record and 
//specify the values that should be updated
var customerToBeUpdated = new Customer
{
  MainContact = new Contact
  {
    //Search for the customer record by email address
    Email = new StringSearch { Value = "info@jevy-comp.con" }
  },
  CustomerClass = new StringValue { Value = "INTL" };
};

//Update the customer record with the specified values
var updCustomer = (Customer)soapClient.Put(customerToBeUpdated);</source>
==Example 3: Retrieving Data from an Inquiry Form==
The following example retrieves the values of all elements available for a stock item from the [HelpRoot_FormReference\IN_40_10_00|Inventory Summary] ([~/?ScreenId=IN401000|IN401000]) inquiry form.<source lang="csharp">//Filter details by warehouse
InventorySummaryInquiry stockItemsToBeFound =
new InventorySummaryInquiry
{
  InventoryID = new StringValue { Value = "AALEGO500" },
  WarehouseID = new StringValue { Value = "MAIN" }
};

//Retrieve the list of stock items from the inquiry
InventorySummaryInquiry stockItems =
 (InventorySummaryInquiry)soapClient.Put(stockItemsToBeFound);

foreach (InventorySummaryRow stockItem in stockItems.Results)
{
  //Do something with the results
  ...
}</source>
==Usage Notes==
When the Acumatica ERP web services receive a {{Put}} request that contains an entity with at least one <tt>Search</tt> object, Acumatica ERP tries to search for a record by using the specified search value or values, and does one of the following:[anchor|#_e815a241-0d49-4f74-9609-89fd034437b9]
*If the record that satisfies the specified conditions has been found, Acumatica ERP updates the fields of the record that are specified by using the <tt>Value</tt> objects. 
*If no record has been found that satisfies the specified conditions, a new record is inserted. Note that the values that were specified with the <tt>Search</tt> objects are inserted into the created record in the same way as the values specified with the <tt>Value</tt> objects are inserted.
*If multiple records have been found, Acumatica ERP returns an error.

For the key fields of a record that are passed in the {{Put}} request as <tt>Value</tt> objects, the service converts the corresponding <tt>Value</tt> objects to <tt>Search</tt> objects. {br}

When the Acumatica ERP web services receive a {{Put}} request that contains only <tt>Value</tt>, <tt>Return</tt>, and <tt>Skip</tt> objects without key fields specified, Acumatica ERP adds a new record with the specified values.{br}

The workflow of a {{Put}} request is illustrated in the following diagram.[anchor|#_2bdb29e8-386b-4a8d-9d39-aec9f3367319][anchor|#_047562d2-115b-4158-bd69-728cf6c4f91c][image:UserGuide/Images/PutWorkflow.png|popup|<tt>Put()</tt> workflow|450px]]]></column>
			<column name="PlainText"><![CDATA[Put() Method You use the  Put()  method to create or modify a record on a data entry         form of  Acumatica ERP. For example, by using the  Put()  method, you can create a customer         record on the   ([~/?ScreenId=AR303000|AR303000]) Customers (AR303000) form. You also use this method to retrieve data from an inquiry form. For example, by using the            Put()  method, you can retrieve data from the   ([~/?ScreenId=IN401000|IN401000]) Inventory Summary (IN401000) form. Syntax public Entity Put(Entity entity) Parameter entity : The entity that specifies the values of the fields of the created record,           or the entity that specifies the record that should be modified and the values of the           fields that should be modified in this record.  If you use this method to create or             modify a record on a data entry form, the entity must specify only one record in  Acumatica ERP. If the entity specifies more than one record or no records, an error is returned             during the execution of the method. Return Value The method returns the  Entity  object that corresponds to the created or         modified record. Example 1: Creating a Record The following example creates a customer record with the specified field values in  Acumatica ERP. //Specify the values of a new customer record
Customer customerToBeCreated = new Customer
{
  CustomerID = new StringValue { Value = "JOHNGOOD" },
  CustomerName = new StringValue { Value = John Good" },
  MainContact = new Contact
  {
    Email = new StringValue { Value = "demo@gmail.com" },
    Address = new Address
    {
      AddressLine1 = new StringValue { Value = "43 Lake Washington Blvd NE" },
      AddressLine2 = new StringValue { Value = "Suite 100" },
      City = new StringValue { Value = "Kirkland" },
      State = new StringValue { Value = "WA" },
      PostalCode = new StringValue { Value = "98033" }
    }
  }
};

//Create a customer record with the specified values
Customer newCustomer = (Customer) soapClient.Put(customerToBeCreated); Example 2: Updating a Record The following example searches for the needed customer record in  Acumatica ERP by the email address and updates the record with the specified customer class         value. //Select the needed customer record and 
//specify the values that should be updated
var customerToBeUpdated = new Customer
{
  MainContact = new Contact
  {
    //Search for the customer record by email address
    Email = new StringSearch { Value = "info@jevy-comp.con" }
  },
  CustomerClass = new StringValue { Value = "INTL" };
};

//Update the customer record with the specified values
var updCustomer = (Customer)soapClient.Put(customerToBeUpdated); Example 3: Retrieving Data from an Inquiry Form The following example retrieves the values of all elements available for a stock item from         the   ([~/?ScreenId=IN401000|IN401000]) Inventory Summary (IN401000) inquiry         form. //Filter details by warehouse
InventorySummaryInquiry stockItemsToBeFound =
new InventorySummaryInquiry
{
  InventoryID = new StringValue { Value = "AALEGO500" },
  WarehouseID = new StringValue { Value = "MAIN" }
};

//Retrieve the list of stock items from the inquiry
InventorySummaryInquiry stockItems =
 (InventorySummaryInquiry)soapClient.Put(stockItemsToBeFound);

foreach (InventorySummaryRow stockItem in stockItems.Results)
{
  //Do something with the results
  ...
} Usage Notes When the  Acumatica ERP web services receive a  Put  request that contains an entity with at least         one  Search  object,  Acumatica ERP tries to search for a record by using the specified search value or values, and does one         of the following: If the record that satisfies the specified conditions has been found,  Acumatica ERP updates the fields of the record that are specified by using the                Value  objects.  If no record has been found that satisfies the specified conditions, a new record is             inserted. Note that the values that were specified with the  Search              objects are inserted into the created record in the same way as the values specified             with the  Value  objects are inserted. If multiple records have been found,  Acumatica ERP returns an error. For the key fields of a record that are passed in the  Put  request as            Value  objects, the service converts the corresponding            Value  objects to  Search  objects.  When the  Acumatica ERP web services receive a  Put  request that contains only            Value ,  Return , and  Skip  objects         without key fields specified,  Acumatica ERP adds a new record with the specified values. The workflow of a  Put  request is illustrated in the following diagram. Put()  workflow ]]></column>
		</row>
		<row PageID="8970d902-6e91-48b1-ac21-2a80d7cc7ced" Language="en-US" PageRevisionID="1" Content="&#xA;You use the &lt;tt&gt;Delete()&lt;/tt&gt; method to delete a record from Acumatica ERP.&#xA;==Syntax=={{{{public void Delete(Entity entity)&#xA;}}}}&#xA;==Parameter==[anchor|#_f63a643e-4f55-4a04-b4da-3d074a93f117]&#xA;*''entity'': The entity that specifies the record that should be deleted.&#xA;*:((({S:Hint}The entity must specify only one record in Acumatica ERP. If the entity specifies more than one record or no records, an error is returned during the execution of the method.&#xA;)))&#xA;&#xA;==Usage Notes==&#xA;The &lt;tt&gt;Delete()&lt;/tt&gt; method is used to delete only the records that correspond to top-level entities. If you need to delete a detail line of a record, you should set the &lt;tt&gt;Delete&lt;/tt&gt; property of the entity that corresponds to the detail line to {{true}} and pass the top-level entity that contains this entity to Acumatica ERP by using the &lt;tt&gt;Put()&lt;/tt&gt; method." PlainText="Delete() Method You use the  Delete()  method to delete a record from  Acumatica ERP. Syntax public void Delete(Entity entity) Parameter entity : The entity that specifies the record that should be deleted. The entity       must specify only one record in  Acumatica ERP. If the entity specifies more than one record or no records, an error is returned during       the execution of the method. Usage Notes The  Delete()  method is used to delete only the records that correspond to     top-level entities. If you need to delete a detail line of a record, you should set the       Delete  property of the entity that corresponds to the detail line to       true  and pass the top-level entity that contains this entity to  Acumatica ERP     by using the  Put()  method. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="8c4dfe34-1ce3-edf6-a7f6-09c5bbdc6cb5" RecordSourceID="22377" />
		<row PageID="424dcea0-e334-43c1-b9e0-4ef9b113fa59" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="03f56f66-0c2f-0689-ff39-053c9341a48a" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You use the <tt>Invoke()</tt> method to invoke an action on a record in Acumatica ERP (for example, to perform the release action on a document). {br}{TOC}
==Syntax=={{{{public InvokeResult Invoke(Entity entity, Action action)
}}}}
==Parameters==[anchor|#_1655070e-956d-4b8d-b64e-69e88d627c17]
*''entity'': The entity that specifies the record on which the action should be invoked.
*:((({S:Hint}The entity must specify only one record in Acumatica ERP. If the entity specifies more than one record or no records, an error is returned during method execution.
)))
*''action'': The action that should be invoked on the record.

==Return Value==
The method returns an <tt>InvokeResult</tt> object, which you should use to monitor the status of the long-running operation by using the <tt>GetProcessStatus()</tt> method.
==Example==
The following code releases a payment.{{{{//Find the payment that should be released
Payment soPaymentToBeReleased = new Payment
{
  Type = new StringSearch { Value = "Payment" },
  ReferenceNbr = new StringSearch { Value = "000001" }
};
Payment payment = (Payment)soapClient.Get(soPaymentToBeReleased);

//Release the payment
InvokeResult invokeResult = soapClient.Invoke(payment, new ReleasePayment());

//Monitor the status of the release operation
...
}}}}
==Related Articles==
*[HelpRoot_Dev_Integration\IS__con_CB_GetProcessStatus|GetProcessStatus() Method]]]></column>
			<column name="PlainText"><![CDATA[Invoke() Method You use the  Invoke()  method to invoke an action on a record in  Acumatica ERP (for example, to perform the release action on a document).  Syntax public InvokeResult Invoke(Entity entity, Action action) Parameters entity : The entity that specifies the record on which the action should be             invoked. The entity must specify only one record in  Acumatica ERP. If the entity specifies more than one record or no records, an error is returned             during method execution. action : The action that should be invoked on the record. Return Value The method returns an  InvokeResult  object, which you should use to         monitor the status of the long-running operation by using the            GetProcessStatus()  method. Example The following code releases a         payment. //Find the payment that should be released
Payment soPaymentToBeReleased = new Payment
{
  Type = new StringSearch { Value = "Payment" },
  ReferenceNbr = new StringSearch { Value = "000001" }
};
Payment payment = (Payment)soapClient.Get(soPaymentToBeReleased);

//Release the payment
InvokeResult invokeResult = soapClient.Invoke(payment, new ReleasePayment());

//Monitor the status of the release operation
... ]]></column>
		</row>
		<row PageID="e86ce4c7-e0fe-492b-b9c1-637c22c54d5a" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="6e8dab52-a2d5-b92e-ba33-cd775d2cc9b2" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You use the <tt>GetProcessStatus()</tt> method to monitor the status of a long-running operation (such as the release or confirmation operation) that you invoked by using the <tt>Invoke()</tt> method. {br}{TOC}
==Syntax=={{{{public ProcessResult GetProcessStatus(InvokeResult invokeResult)
}}}}
==Parameter==[anchor|#_d3ac1ed2-d8fb-44ad-9c90-0e60b89180e3]
*''invokeResult'': An <tt>InvokeResult</tt> object that was returned by the <tt>Invoke()</tt> method.

==Return Value==
The method returns a <tt>ProcessResult</tt> object. You should use the <tt>Status</tt> property of this object to get the status of the processing operation. When the status of the operation is <tt>Completed</tt>, you can get the result of processing, which is identified by the <tt>EntityID</tt> property of a <tt>ProcessResult</tt> object.
==Example==
The following code monitors the status of the payment release processing.{{{{...
//Release payment
InvokeResult invokeResult = soapClient.Invoke(payment, new ReleasePayment());

//Monitor the status of the process
ProcessResult processResult = soapClient.GetProcessStatus(invokeResult);
while (processResult.Status == ProcessStatus.InProcess)
{
  Thread.Sleep(1000); //pause for 1 second
  processResult = soapClient.GetProcessStatus(invokeResult);
}
if (processResult.Status == ProcessStatus.Completed)
{
  //Get the released payment
  payment = (Payment)soapClient.Get(
   new Payment { ID = processResult.EntityId });
}
}}}}
==Related Articles==
*[HelpRoot_Dev_Integration\IS__con_CB_Invoke|Invoke() Method]]]></column>
			<column name="PlainText"><![CDATA[GetProcessStatus() Method You use the  GetProcessStatus()  method to monitor the status of a         long-running operation (such as the release or confirmation operation) that you invoked by         using the  Invoke()  method.  Syntax public ProcessResult GetProcessStatus(InvokeResult invokeResult) Parameter invokeResult : An  InvokeResult  object that was returned by the              Invoke()  method. Return Value The method returns a  ProcessResult  object. You should use the            Status  property of this object to get the status of the processing         operation. When the status of the operation is  Completed , you can get the         result of processing, which is identified by the  EntityID  property of a            ProcessResult  object. Example The following code monitors the status of the payment release         processing. ...
//Release payment
InvokeResult invokeResult = soapClient.Invoke(payment, new ReleasePayment());

//Monitor the status of the process
ProcessResult processResult = soapClient.GetProcessStatus(invokeResult);
while (processResult.Status == ProcessStatus.InProcess)
{
  Thread.Sleep(1000); //pause for 1 second
  processResult = soapClient.GetProcessStatus(invokeResult);
}
if (processResult.Status == ProcessStatus.Completed)
{
  //Get the released payment
  payment = (Payment)soapClient.Get(
   new Payment { ID = processResult.EntityId });
} ]]></column>
		</row>
		<row PageID="f8b87bde-8af9-48ef-9474-56adabfa1e5e" Language="en-US" PageRevisionID="1" PlainText="GetFiles() Method You use the  GetFiles()  method to get the files that are attached to a         record. Syntax public File[] GetFiles(Entity entity) Parameter entity : The entity that specifies the record in  Acumatica ERP to which the files are attached. Return Value The method returns an array of web service  File  objects that contain the         properties for accessing the contents and names of the files. Example The following example retrieves the files attached to a stock item         record. //Filter the items by inventory ID&#xA;StockItem stockItemToBeFound = new StockItem &#xA;{ &#xA;  InventoryID = new StringSearch { Value = &quot;AAMACHINE1&quot; }&#xA;};&#xA;&#xA;//Get the stock item record&#xA;StockItem stockItem = (StockItem) soapClient.Get(stockItemToBeFound);&#xA;&#xA;//Get the files that are attached to the stock item&#xA;if (stockItem != null &amp;&amp; stockItem.ImageUrl != null)&#xA;{&#xA;  //Get the attached files&#xA;  File[] files = soapClient.GetFiles(stockItem);&#xA;  ...&#xA;}; " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="b2165752-ecfa-f279-6bf5-d9cbd93f45f2" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You use the <tt>GetFiles()</tt> method to get the files that are attached to a record.{br}{TOC}
==Syntax=={{{{public File[] GetFiles(Entity entity)
}}}}
==Parameter==[anchor|#_aa6c252d-68f9-43ed-82da-c78040ec7554]
*''entity'': The entity that specifies the record in Acumatica ERP to which the files are attached.

==Return Value==
The method returns an array of web service <tt>File</tt> objects that contain the properties for accessing the contents and names of the files.
==Example==
The following example retrieves the files attached to a stock item record.{{{{//Filter the items by inventory ID
StockItem stockItemToBeFound = new StockItem 
{ 
  InventoryID = new StringSearch { Value = "AAMACHINE1" }
};

//Get the stock item record
StockItem stockItem = (StockItem) soapClient.Get(stockItemToBeFound);

//Get the files that are attached to the stock item
if (stockItem != null && stockItem.ImageUrl != null)
{
  //Get the attached files
  File[] files = soapClient.GetFiles(stockItem);
  ...
};
}}}}]]></column>
		</row>
		<row PageID="3a7c90af-5695-48dd-a71c-f6c8a8b70c63" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="c00e9a70-1220-4e53-b0fe-e0a4ed012606" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You use the <tt>PutFiles()</tt> method to attach files to a record in Acumatica ERP.{br}{TOC}
==Syntax=={{{{public void PutFiles(Entity entity, File[] files)
}}}}
==Parameters==[anchor|#_88d49d9f-1091-46c4-8cb9-7d05b28cff3d]
*''entity'': The entity that specifies the record to which the files should be attached.
*''files'': An array of web service <tt>File</tt> objects that specify the files to be attached.

==Example==
The following code attaches a file to a stock item record.{{{{//Find the needed stock item
StockItem stockItemToBeFound = new StockItem
{
  InventoryID = new StringSearch { Value = "AALEGO500" },
};
StockItem stockItem = (StockItem)soapClient.Get(stockItemToBeFound);

//Read the file data
byte[] filedata;
using (FileStream file =
System.IO.File.Open("D:\\T2MCRO.jpg", FileMode.Open))
{
  filedata = new byte[file.Length];
  file.Read(filedata, 0, filedata.Length);
}

//Add the file to the stock item record
Default.File[] stockItemFiles = new[]
{
  //Default is the name of the service reference
  new Default.File
  {
    Name = fileName,
    Content = filedata
  }
};
soapClient.PutFiles(stockItem,stockItemFiles);
}}}}]]></column>
			<column name="PlainText"><![CDATA[PutFiles() Method You use the  PutFiles()  method to attach files to a record in  Acumatica ERP. Syntax public void PutFiles(Entity entity, File[] files) Parameters entity : The entity that specifies the record to which the files should be           attached. files : An array of web service  File  objects that specify the           files to be attached. Example The following code attaches a file to a stock item         record. //Find the needed stock item
StockItem stockItemToBeFound = new StockItem
{
  InventoryID = new StringSearch { Value = "AALEGO500" },
};
StockItem stockItem = (StockItem)soapClient.Get(stockItemToBeFound);

//Read the file data
byte[] filedata;
using (FileStream file =
System.IO.File.Open("D:\\T2MCRO.jpg", FileMode.Open))
{
  filedata = new byte[file.Length];
  file.Read(filedata, 0, filedata.Length);
}

//Add the file to the stock item record
Default.File[] stockItemFiles = new[]
{
  //Default is the name of the service reference
  new Default.File
  {
    Name = fileName,
    Content = filedata
  }
};
soapClient.PutFiles(stockItem,stockItemFiles); ]]></column>
		</row>
		<row PageID="3ec82c3f-dcd5-41bc-a49f-200c0430d53e" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="8e9da304-d172-ba49-a068-24972d95a894" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You use the <tt>GetCustomFieldSchema()</tt> method to obtain the list of custom fields of an entity. You can find out the field name and view name of the needed element by using this method. {br}

Depending on the version of the system contract, this method returns different set of fields: In Contract Version 2, custom fields correspond to both the predefined elements on an Acumatica ERP form that are not included in the entity definition and the elements that were added to the Acumatica ERP form in a customization project; in Contract Version 1, custom fields correspond to only the elements that were added to an Acumatica ERP form in a customization project.{br}{TOC}
==Syntax==<source lang="csharp">public Entity GetCustomFieldSchema(Entity entity)</source>
==Parameter==[anchor|#_0b114c15-0eb5-42a9-b676-39874852bb5d]
*''entity'': The entity for which the list of custom fields should be obtained.

==Return Value==
The method returns the <tt>Entity</tt> object, which contains the array of custom fields in its <tt>CustomFields</tt> property.
==Example==
The following example retrieves the list of custom fields of the <tt>StockItem</tt> entity.<source lang="csharp">StockItem stockItem = 
  (StockItem) soapClient.GetCustomFieldSchema(new StockItem());
CustomField[] customFields = stockItem.CustomFields;</source>
==Related Articles==
*[HelpRoot_Dev_Integration\IS__con_CB_Custom_Fields|Custom Fields]
*[HelpRoot_Dev_Integration\IS__con_CB_CustomFields_2|CustomFields Property]]]></column>
			<column name="PlainText"><![CDATA[GetCustomFieldSchema() Method You use the  GetCustomFieldSchema()  method to obtain the list of custom     fields of an entity. You can find out the field name and view name of the needed element by     using this method.  Depending on the version of the system contract, this method returns different set of fields:     In Contract Version 2, custom fields correspond to both the predefined elements on an  Acumatica ERP     form that are not included in the entity definition and the elements that were added to the  Acumatica ERP     form in a customization project; in Contract Version 1, custom fields correspond to only the     elements that were added to an  Acumatica ERP     form in a customization project. Syntax public Entity GetCustomFieldSchema(Entity entity) Parameter entity : The entity for which the list of custom fields should be obtained. Return Value The method returns the  Entity  object, which contains the array of custom     fields in its  CustomFields  property. Example The following example retrieves the list of custom fields of the  StockItem      entity. StockItem stockItem = 
  (StockItem) soapClient.GetCustomFieldSchema(new StockItem());
CustomField[] customFields = stockItem.CustomFields; ]]></column>
		</row>
		<row PageID="d257cccf-7bb9-482b-9f81-45f363013b77" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="e14fb0ae-f90f-1149-1c63-40e680a1004a" RecordSourceID="22377">
			<column name="Content"><![CDATA[
By using the <tt>Attributes</tt> property, you can view and edit the attributes of a record in Acumatica ERP. Through this property, you work with an array of <tt>AttributeValue</tt> or <tt>AttributeDetail</tt> objects.{br}

For the <tt>AttributeValue</tt> objects, to specify the value of an attribute, you specify the name of the attribute in the <tt>AttributeID</tt> property, and the value of the attribute in the <tt>Value</tt> property.{br}

For the <tt>AttributeDetail</tt> objects, to specify the value of an attribute, you specify the name of the attribute in the <tt>Attribute</tt> property, and the value of the attribute in the <tt>Value</tt> property.
==Syntax==<source lang="csharp">public AttributeValue[] Attributes { set; get; }</source>
==Example==
The following code shows how to edit the attributes of a stock item record. <source lang="csharp">//Specify the values of a stock item record
StockItem stockItemToBeCreated = new StockItem
{
  InventoryID = new StringValue { Value = "BASESERV" },
  ItemClass = new StringValue { Value = "STOCKITEM" },
  Attributes = new []
  {
    //Specify the values of attributes of the item class (STOCKITEM)
    new AttributeValue
    {
      AttributeID = new StringValue { Value = "Operation System" },
      Value = new StringValue { Value = "Windows" }
    },
    new AttributeValue
    {
      AttributeID = new StringValue { Value = "Version Of Software" },
      Value = new StringValue { Value = "Server 2012 R2" }
    }
  }
};

//Create a stock item with the specified values
StockItem newStockItem = (StockItem)soapClient.Put(stockItemToBeCreated);</source>]]></column>
			<column name="PlainText"><![CDATA[Attributes Property By using the  Attributes  property, you can view and edit the attributes         of a record in  Acumatica ERP. Through this property, you work with an array of  AttributeValue  or            AttributeDetail  objects. For the  AttributeValue  objects, to specify the value of an attribute,         you specify the name of the attribute in the  AttributeID  property, and         the value of the attribute in the  Value  property. For the  AttributeDetail  objects, to specify the value of an attribute,         you specify the name of the attribute in the  Attribute  property, and the         value of the attribute in the  Value  property. Syntax public AttributeValue[] Attributes { set; get; } Example The following code shows how to edit the attributes of a stock item record.          //Specify the values of a stock item record
StockItem stockItemToBeCreated = new StockItem
{
  InventoryID = new StringValue { Value = "BASESERV" },
  ItemClass = new StringValue { Value = "STOCKITEM" },
  Attributes = new []
  {
    //Specify the values of attributes of the item class (STOCKITEM)
    new AttributeValue
    {
      AttributeID = new StringValue { Value = "Operation System" },
      Value = new StringValue { Value = "Windows" }
    },
    new AttributeValue
    {
      AttributeID = new StringValue { Value = "Version Of Software" },
      Value = new StringValue { Value = "Server 2012 R2" }
    }
  }
};

//Create a stock item with the specified values
StockItem newStockItem = (StockItem)soapClient.Put(stockItemToBeCreated); ]]></column>
		</row>
		<row PageID="54c77d18-107f-4240-86cf-c23ed259d895" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="f67507a3-234c-9364-b042-940b7f67a866" RecordSourceID="22377">
			<column name="Content"><![CDATA[
By using the <tt>CustomFields</tt> property, you can view and edit the values of the elements that are not included in the entity definition. That is, custom fields can correspond to both the predefined elements on an Acumatica ERP form that are not included in the entity definition and the elements that were added to the Acumatica ERP form in a customization project.{br}

Through the <tt>CustomFields</tt> property, you work with an array of <tt>CustomField</tt> objects. This property is exposed by the <tt>Entity</tt> class—that is, all entities of the web services API expose this property. {br}

To get or set the value of an element that is not included in the entity definition, you should use the <tt>CustomFields</tt> property of the entity that contains this element. To work with the needed element in the <tt>CustomFields</tt> array, you specify the values of the <tt>fieldName</tt> and <tt>viewName</tt> properties of the <tt>CustomField</tt> object of the needed type. In the <tt>viewName</tt> property, you specify the name of the data view that contains the element, and in the <tt>fieldName</tt> property, you specify the internal name of the element. For details on how to find out the field name and the name of the data view, see [HelpRoot_Dev_Integration\IS__con_CB_Custom_Fields|Custom Fields]. {br}

For example, suppose that you added the '''Personal ID''' element to the '''Main Contact''' area of the [HelpRoot_FormReference\AR_30_30_00|Customers] ([~/?ScreenId=AR303000|AR303000]) form in a customization project. To work with this customization element through the web services API, you should use the <tt>CustomFields</tt> property of the <tt>Contact</tt> entity, which is available through the <tt>MainContact</tt> property of the <tt>Customer</tt> entity. The '''Personal ID''' customization element has the {{String}} type and has the {{UsrPersonalID}} field name and belongs to the {{DefContact}} data view. Therefore, to access this element, you should set the <tt>fieldName</tt> property of the <tt>CustomStringField</tt> object to {{UsrPersonalID}}, and the <tt>viewName</tt> property of the <tt>CustomStringField</tt> object to {{DefContact}}.{br}{TOC}
==Syntax==<source lang="csharp">public CustomField[] CustomFields { set; get; }</source>
==Example==
Suppose that you added the '''Personal ID Type''', '''Personal ID''', and '''Credit Record Verified''' elements to the [HelpRoot_FormReference\AR_30_30_00|Customers] form in a customization project, as shown in the following screenshot.[anchor|#_d91ebd5b-d6e5-4da3-a3a0-31453a1ba72d][anchor|#_07ed0b2a-599e-410e-b363-ff14f7645a04][image:UserGuide/Images/CB_CustomFields.png|popup|Custom elements|450px]{br}

The following code shows how to specify the values of these custom elements through the web services API. <source lang="csharp">//Specify the values of a new customer record
Customer customerToBeCreated = new Customer
{
  CustomerID = new StringValue { Value = "TEDSMITH" },
  CustomerName = new StringValue { Value = "Ted Smith" },
  //Specify the values of the custom fields

  MainContact = new Contact
  {
    CustomFields = new[]
    {
      new CustomStringField
      {
        fieldName = "UsrPersonalIDType", 
        viewName = "DefContact", 
        Value = new StringValue { Value = "Passport" }
      },
      new CustomStringField
      {
        fieldName = "UsrPersonalID", 
        viewName = "DefContact", 
        Value = new StringValue { Value = customerPersonalID }
      },
      new CustomBooleanField
      {
        fieldName = "UsrCreditRecordVerified", 
        viewName = "DefContact", 
        Value = new BooleanValue { Value = true }
      }
    }
  }
};

//Create a customer record with the specified values
Customer newCustomer = (Customer)soapClient.Put(customerToBeCreated);</source>
==Usage Notes==To work with elements of an object that was added in a customization project or with a custom Acumatica ERP form, you have to create a custom endpoint for the needed form. You can create a custom endpoint on the [HelpRoot_FormReference\SM_20_70_60|Web Service Endpoints] ([~/?ScreenId=SM207060|SM207060]) form. For details on creation of a custom endpoint, see [HelpRoot_Dev_Integration\IS__how_Create_Endpoint|To Create a Custom Endpoint] and [HelpRoot_Dev_Integration\IS__how_Extend_Endpoint|To Extend an Existing Endpoint].
==Related Articles==
*[HelpRoot_Dev_Integration\IS__con_CB_Custom_Fields|Custom Fields]
*[HelpRoot_Dev_Integration\IS__con_CB_GetCustomFieldSchema|GetCustomFieldSchema() Method]]]></column>
			<column name="PlainText"><![CDATA[CustomFields Property By using the  CustomFields  property, you can view and edit the values of         the elements that are not included in the entity definition. That is, custom fields can         correspond to both the predefined elements on an  Acumatica ERP form that are not included in the entity definition and the elements that were added to         the  Acumatica ERP form in a customization project. Through the  CustomFields  property, you work with an array of            CustomField  objects. This property is exposed by the            Entity  class—that is, all entities of the web services API expose         this property.  To get or set the value of an element that is not included in the entity definition, you         should use the  CustomFields  property of the entity that contains this         element. To work with the needed element in the  CustomFields  array, you         specify the values of the  fieldName  and  viewName          properties of the  CustomField  object of the needed type. In the            viewName  property, you specify the name of the data view that contains         the element, and in the  fieldName  property, you specify the internal name         of the element. For details on how to find out the field name and the name of the data view,         see  Custom Fields.  For example, suppose that you added the  Personal ID  element to the            Main Contact  area of the   ([~/?ScreenId=AR303000|AR303000]) Customers (AR303000) form in a customization project. To work with this         customization element through the web services API, you should use the            CustomFields  property of the  Contact  entity, which         is available through the  MainContact  property of the            Customer  entity. The  Personal ID  customization         element has the  String  type and has the  UsrPersonalID          field name and belongs to the  DefContact  data view. Therefore, to access         this element, you should set the  fieldName  property of the            CustomStringField  object to  UsrPersonalID , and the            viewName  property of the  CustomStringField  object to            DefContact . Syntax public CustomField[] CustomFields { set; get; } Example Suppose that you added the  Personal ID Type ,  Personal           ID , and  Credit Record Verified  elements to the   ([~/?ScreenId=AR303000|AR303000]) Customers form in a customization project, as shown in the         following screenshot. Custom elements The following code shows how to specify the values of these custom elements through the web         services API.          //Specify the values of a new customer record
Customer customerToBeCreated = new Customer
{
  CustomerID = new StringValue { Value = "TEDSMITH" },
  CustomerName = new StringValue { Value = "Ted Smith" },
  //Specify the values of the custom fields

  MainContact = new Contact
  {
    CustomFields = new[]
    {
      new CustomStringField
      {
        fieldName = "UsrPersonalIDType", 
        viewName = "DefContact", 
        Value = new StringValue { Value = "Passport" }
      },
      new CustomStringField
      {
        fieldName = "UsrPersonalID", 
        viewName = "DefContact", 
        Value = new StringValue { Value = customerPersonalID }
      },
      new CustomBooleanField
      {
        fieldName = "UsrCreditRecordVerified", 
        viewName = "DefContact", 
        Value = new BooleanValue { Value = true }
      }
    }
  }
};

//Create a customer record with the specified values
Customer newCustomer = (Customer)soapClient.Put(customerToBeCreated); Usage Notes To work with elements of an object that was added in a       customization project or with a custom  Acumatica ERP form, you have to create a custom endpoint for the needed form. You can create a custom       endpoint on the   ([~/?ScreenId=SM207060|SM207060]) Web Service Endpoints (SM207060) form. For details       on creation of a custom endpoint, see  To Create a Custom Endpoint and  To Extend an Existing Endpoint. ]]></column>
		</row>
		<row PageID="11813429-8903-4e40-b1ab-0c33de7300e7" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="61f07186-68f6-e0cd-754c-471ff4ba34fc" RecordSourceID="22377">
			<column name="Content"><![CDATA[
((({S:Hint}This topic describes the <tt>ReturnBehavior</tt> property that is available in Version 3 of the system contract.
)))[anchor|#_b343cb78-df9a-4fb3-b20b-682297132032]{br}

By using the <tt>ReturnBehavior</tt> property, you can specify the fields of the entity whose values should be returned from the request to the service that is performed by the <tt>Get()</tt>, <tt>GetList()</tt>, or <tt>Put()</tt> method. This property is exposed by the <tt>Entity</tt> class—that is, all entities of the web services API expose this property. [anchor|#_0405eefe-8da8-413c-b333-74bdcd76a714]{br}

For each entity, you can specify one of the following options, which determine the fields for which values should be returned:[anchor|#_2a0b6580-40bf-4b28-818b-cfa7a6f0b710][anchor|#_0658fe9e-1ffc-4b62-8f6e-159f38846083]
*<tt>None</tt>: Values should not be returned for any fields of the entity. You can use this option for detail entities and linked entities, but not for top-level entities.[anchor|#_3a9732c9-ea69-4357-b6ea-32f3a2e8a5cd]
*<tt>OnlySystem</tt>: Values should be returned for only the system fields (that is, the fields of the <tt>Entity</tt> class, such as <tt>ID</tt>, <tt>RowNumber</tt>, and <tt>Note</tt>). You may need to obtain only the values of the system fields, for example, if you want to delete the entity.[anchor|#_21e8fed8-cc1d-4d24-b701-79a5f097c9be]
*<tt>OnlySpecified</tt>: Values should be returned for only the specified fields of the entity and the system fields. You can specify the values to be returned by using the <tt>Return</tt> classes of the needed value type, such as <tt>StringReturn</tt>. The values of the fields that are specified by using the <tt>Value</tt> or <tt>Search</tt> classes of the corresponding value type, such as <tt>StringValue</tt> and <tt>StringSearch</tt>, are returned automatically.
*<tt>Default</tt>: Values should be returned for only the fields of the entity that are defined in the entity itself (without the fields of the linked and detail entities defined within the entity). This option is used by default.[anchor|#_49f2855c-e3cf-4fc6-8163-fdf849dea812]
*<tt>All</tt>: Values should be returned for all fields of the entity that are defined in the contract (including the fields of the linked and detail entities defined within the entity). No values of the custom fields (the Acumatica ERP fields that are not defined in the contract or the fields that are defined in a customization project) are returned. You can specify the values to be skipped by using the <tt>Skip</tt> classes of the needed value type, such as <tt>StringSkip</tt>. 
[anchor|#_155fbff7-daee-400c-ad64-63d1ef9e05c3]
In the sections below, you can find examples of how to specify the fields whose values should be returned.[anchor|#_d6cfe55c-a0bd-469f-a778-6ac46cf8d22d]
==Syntax==<source lang="csharp">public ReturnBehavior ReturnBehavior { set; get; }</source>[anchor|#_b478a714-5731-4349-ba2f-1a00ac01fa61]
==Example: Obtaining All Fields==
The following example shows how to obtain the values of all fields of all stock item records in the system.<source lang="csharp">StockItem stockItemsToBeFound = new StockItem
{
  ReturnBehavior = ReturnBehavior.All
};

//Get the list of stock items with the values of all fields 
//that are defined in the contract
Entity[] stockItems = soapClient.GetList(stockItemsToBeFound);</source>
==Example: Obtaining Only the Fields of the Entity Itself Without Linked and Detail Fields==
In the following example, only the fields of the top-level <tt>StockItem</tt> entity are retrieved from the system.<source lang="csharp">//You can omit the setting of the ReturnBehavior property to ReturnBehavior.Default 
//because this option is used by default
StockItem stockItemsToBeFound = new StockItem();

//Get the list of stock items with the values of the fields 
//of the StockItem entity itself (without the fields of the detail or linked entities)
Entity[] stockItems = soapClient.GetList(stockItemsToBeFound);</source>[anchor|#_c748adf6-6c18-45a8-8c41-ed1a6a6fd602]
==Example: Obtaining Only Specified Fields==
The following example shows how to obtain the values of the <tt>InventoryID</tt> field, the <tt>ItemStatus</tt> field, and all <tt>WarehouseDetail</tt> fields of all stock item records in the system.<source lang="csharp">StockItem stockItemsToBeFound = new StockItem
{
  ReturnBehavior = ReturnBehavior.OnlySpecified,
  InventoryID = new StringReturn(),
  ItemStatus = new StringSearch { Value = "Active" },
  WarehouseDetails = new StockItemWarehouseDetail[]
  {
    new StockItemWarehouseDetail {ReturnBehavior = ReturnBehavior.All}
  },
};

//Get the list of stock items with the values of the specified fields
Entity[] stockItems = soapClient.GetList(stockItemsToBeFound);</source>[anchor|#_ec17e174-851a-4814-bb8e-2140570fad1f]
==Example: Obtaining All Fields Except the Specified Ones==
The following example shows how to obtain the values of all fields of all stock item records in the system except the <tt>LastModified</tt> field and all <tt>WarehouseDetail</tt> fields.<source lang="csharp">StockItem stockItemsToBeFound = new StockItem
{
  ReturnBehavior = ReturnBehavior.All,
  LastModified = new DateTimeSkip(),
  WarehouseDetails = new StockItemWarehouseDetail[]
  {
    new StockItemWarehouseDetail {ReturnBehavior = ReturnBehavior.None}
  },
};

//Get the list of stock items with the values of the specified fields
Entity[] stockItems = soapClient.GetList(stockItemsToBeFound);</source>[anchor|#_8a27a065-5f2b-4fd0-8c0a-4a3df949a7ae]
==Example: Obtaining Only System Fields==
The following example shows how to obtain the values of only system fields of all stock item records in the system.<source lang="csharp">StockItem stockItemToBeFound = new StockItem
{
  ReturnBehavior = ReturnBehavior.OnlySystem,
};

//Get the list of stock items with the values of system fields
Entity[] stockItems = soapClient.GetList(stockItemToBeFound);</source>]]></column>
			<column name="PlainText"><![CDATA[ReturnBehavior Property (Contract Version 3) This topic describes the  ReturnBehavior  property that is available           in Version 3 of the system contract. By using the  ReturnBehavior              property, you can specify the fields of the entity whose values should be returned from             the request to the service that is performed by the  Get() ,                  GetList() , or  Put()  method. This property is             exposed by the  Entity  class—that is, all entities of the web             services API expose this property.  For each entity, you can specify one of the             following options, which determine the fields for which values should be returned: None : Values should not be             returned for any fields of the entity. You can use this option for detail entities and             linked entities, but not for top-level entities. OnlySystem : Values should be             returned for only the system fields (that is, the fields of the                  Entity  class, such as  ID ,                  RowNumber , and  Note ). You may need to obtain             only the values of the system fields, for example, if you want to delete the             entity. OnlySpecified : Values should be             returned for only the specified fields of the entity and the system fields. You can             specify the values to be returned by using the  Return  classes of the             needed value type, such as  StringReturn . The values of the fields             that are specified by using the  Value  or  Search              classes of the corresponding value type, such as  StringValue  and                  StringSearch , are returned automatically. Default : Values should be returned for only the fields of the entity           that are defined in the entity itself (without the fields of the linked and detail           entities defined within the entity). This option is used by default. All : Values should be           returned for all fields of the entity that are defined in the contract (including the           fields of the linked and detail entities defined within the entity). No values of the           custom fields (the  Acumatica ERP fields that are not defined in the contract or the fields that are defined in a           customization project) are returned. You can specify the values to be skipped by using the              Skip  classes of the needed value type, such as              StringSkip .  In the sections below, you can find examples of how to             specify the fields whose values should be returned. Syntax public ReturnBehavior ReturnBehavior { set; get; } Example: Obtaining All Fields The following example shows how to obtain the values of all fields of all stock item         records in the         system. StockItem stockItemsToBeFound = new StockItem
{
  ReturnBehavior = ReturnBehavior.All
};

//Get the list of stock items with the values of all fields 
//that are defined in the contract
Entity[] stockItems = soapClient.GetList(stockItemsToBeFound); Example: Obtaining Only the Fields of the Entity Itself Without Linked and Detail         Fields In the following example, only the fields of the top-level  StockItem          entity are retrieved from the         system. //You can omit the setting of the ReturnBehavior property to ReturnBehavior.Default 
//because this option is used by default
StockItem stockItemsToBeFound = new StockItem();

//Get the list of stock items with the values of the fields 
//of the StockItem entity itself (without the fields of the detail or linked entities)
Entity[] stockItems = soapClient.GetList(stockItemsToBeFound); Example: Obtaining Only Specified Fields The following example shows how to obtain the values of the  InventoryID  field,         the  ItemStatus  field, and all  WarehouseDetail  fields         of all stock item records in the         system. StockItem stockItemsToBeFound = new StockItem
{
  ReturnBehavior = ReturnBehavior.OnlySpecified,
  InventoryID = new StringReturn(),
  ItemStatus = new StringSearch { Value = "Active" },
  WarehouseDetails = new StockItemWarehouseDetail[]
  {
    new StockItemWarehouseDetail {ReturnBehavior = ReturnBehavior.All}
  },
};

//Get the list of stock items with the values of the specified fields
Entity[] stockItems = soapClient.GetList(stockItemsToBeFound); Example: Obtaining All Fields Except the Specified Ones The following example shows how to obtain the values of all fields of all stock item records in the system except the  LastModified  field and all  WarehouseDetail  fields. StockItem stockItemsToBeFound = new StockItem
{
  ReturnBehavior = ReturnBehavior.All,
  LastModified = new DateTimeSkip(),
  WarehouseDetails = new StockItemWarehouseDetail[]
  {
    new StockItemWarehouseDetail {ReturnBehavior = ReturnBehavior.None}
  },
};

//Get the list of stock items with the values of the specified fields
Entity[] stockItems = soapClient.GetList(stockItemsToBeFound); Example: Obtaining Only System Fields The following example shows how to obtain the values of only system fields of all stock item records in the system. StockItem stockItemToBeFound = new StockItem
{
  ReturnBehavior = ReturnBehavior.OnlySystem,
};

//Get the list of stock items with the values of system fields
Entity[] stockItems = soapClient.GetList(stockItemToBeFound); ]]></column>
		</row>
		<row PageID="7b6ecfb4-faf6-4125-a4ae-a23a57662f3f" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="f14eda40-4ee7-38c4-7246-93f527affb8b" RecordSourceID="22377">
			<column name="Content"><![CDATA[
((({S:Hint}This topic describes the <tt>ReturnBehavior</tt> property that is available in Version 2 of the system contract. 
)))[anchor|#_636f3ef2-d04d-4565-a11f-d58f5f159b61]{br}

By using the <tt>ReturnBehavior</tt> property, you can specify the fields of the entity whose values should be returned from the request to the service that is performed by the <tt>Get()</tt>, <tt>GetList()</tt>, or <tt>Put()</tt> method. This property is exposed by the <tt>Entity</tt> class—that is, all entities of the web services API expose this property. [anchor|#_cb306b9f-1753-4a4e-811e-65398fc250a8]{br}

For each entity, you can specify one of the following options, which determine the fields for which values should be returned:{br}

[anchor|#_6d2e2537-d2ba-4dde-ae79-fdcc1084dcd4][anchor|#_8a793a66-7a85-474a-8f54-05d6255b44d2]
*<tt>None</tt>: Values should not be returned for any fields of the entity. You can use this option for detail entities and linked entities, but not for top-level entities.[anchor|#_f4b8df1a-915c-4d44-b4c2-aa947124f363]
*<tt>OnlySystem</tt>: Values should be returned for only the system fields (that is, the fields of the <tt>Entity</tt> class, such as <tt>ID</tt>, <tt>RowNumber</tt>, and <tt>Note</tt>). You may need to obtain only the values of the system fields, for example, if you want to delete the entity.[anchor|#_91ee178e-9692-4d6d-bbdd-2723cc11173a]
*<tt>OnlySpecified</tt>: Values should be returned for only the specified fields of the entity and the system fields. You can specify the values to be returned by using the <tt>Return</tt> classes of the needed value type, such as <tt>StringReturn</tt>. The values of the fields that are specified by using the <tt>Value</tt> or <tt>Search</tt> classes of the corresponding value type, such as <tt>StringValue</tt> and <tt>StringSearch</tt>, are returned automatically.[anchor|#_49f2855c-e3cf-4fc6-8163-fdf849dea812]
*<tt>All</tt>: Values should be returned for all fields of the entity that are defined in the contract. No values of the custom fields (the Acumatica ERP fields that are not defined in the contract or the fields that are added in a customization project and are not included in the contract) are returned. You can specify the values to be skipped by using the <tt>Skip</tt> classes of the needed value type, such as <tt>StringSkip</tt>. This option is used by default.
[anchor|#_08c7f5fc-0fc2-4511-bd39-9c647addbc08]{br}

In the sections below, you can find examples of how to specify the fields whose values should be returned.
==Syntax==<source lang="csharp">public ReturnBehavior ReturnBehavior { set; get; }</source>[anchor|#_ca2f5426-58b1-4c12-a6fa-157a71004a8b]
==Example: Obtaining All Fields==
The following example shows how to obtain the values of all fields of all stock item records in the system.<source lang="csharp">//You can omit the setting of the ReturnBehavior property to ReturnBehavior.All 
//because this option is used by default
StockItem stockItemsToBeFound = new StockItem();

//Get the list of stock items with the values of all fields 
//that are defined in the contract
Entity[] stockItems = soapClient.GetList(stockItemsToBeFound);</source>[anchor|#_66fa1641-d602-492a-9c57-22bc738797f8]
==Example: Obtaining Only Specified Fields==
The following example shows how to obtain the values of the <tt>InventoryID</tt> field, the <tt>ItemStatus</tt> field, and all <tt>WarehouseDetail</tt> fields of all stock item records in the system.<source lang="csharp">StockItem stockItemsToBeFound = new StockItem
{
  ReturnBehavior = ReturnBehavior.OnlySpecified,
  InventoryID = new StringReturn(),
  ItemStatus = new StringSearch { Value = "Active" },
  WarehouseDetails = new StockItemWarehouseDetail[]
  {
    new StockItemWarehouseDetail {ReturnBehavior = ReturnBehavior.All}
  },
};

//Get the list of stock items with the values of the specified fields
Entity[] stockItems = soapClient.GetList(stockItemsToBeFound);</source>[anchor|#_7062ef58-de03-4ac1-b8c3-81e207d3e886]
==Example: Obtaining All Fields Except the Specified Ones==
The following example shows how to obtain the values of all fields of all stock item records in the system except the <tt>LastModified</tt> field and all <tt>WarehouseDetail</tt> fields.<source lang="csharp">StockItem stockItemsToBeFound = new StockItem
{
  ReturnBehavior = ReturnBehavior.All,
  LastModified = new DateTimeSkip(),
  WarehouseDetails = new StockItemWarehouseDetail[]
  {
    new StockItemWarehouseDetail {ReturnBehavior = ReturnBehavior.None}
  },
};

//Get the list of stock items with the values of the specified fields
Entity[] stockItems = soapClient.GetList(stockItemsToBeFound);</source>[anchor|#_25650bf4-5fe2-4820-a009-48964995fbcc]
==Example: Obtaining Only System Fields==
The following example shows how to obtain the values of only system fields of all stock item records in the system.<source lang="csharp">StockItem stockItemToBeFound = new StockItem
{
  ReturnBehavior = ReturnBehavior.OnlySystem,
};

//Get the list of stock items with the values of system fields
Entity[] stockItems = soapClient.GetList(stockItemToBeFound);</source>]]></column>
			<column name="PlainText"><![CDATA[ReturnBehavior Property (Contract Version 2) This topic describes the  ReturnBehavior  property that is available           in Version 2 of the system contract.  By using the  ReturnBehavior              property, you can specify the fields of the entity whose values should be returned from             the request to the service that is performed by the  Get() ,                  GetList() , or  Put()  method. This property is             exposed by the  Entity  class—that is, all entities of the web             services API expose this property.  For each entity, you can specify one of the             following options, which determine the fields for which values should be returned: None : Values should not be             returned for any fields of the entity. You can use this option for detail entities and             linked entities, but not for top-level entities. OnlySystem : Values should be             returned for only the system fields (that is, the fields of the                  Entity  class, such as  ID ,                  RowNumber , and  Note ). You may need to obtain             only the values of the system fields, for example, if you want to delete the             entity. OnlySpecified : Values should be             returned for only the specified fields of the entity and the system fields. You can             specify the values to be returned by using the  Return  classes of the             needed value type, such as  StringReturn . The values of the fields             that are specified by using the  Value  or  Search              classes of the corresponding value type, such as  StringValue  and                  StringSearch , are returned automatically. All : Values should be             returned for all fields of the entity that are defined in the contract. No values of the             custom fields (the  Acumatica ERP fields that are not defined in the contract or the fields that are added in a             customization project and are not included in the contract) are returned. You can             specify the values to be skipped by using the  Skip  classes of the             needed value type, such as  StringSkip . This option is used by             default. In the sections below, you can find examples of how to             specify the fields whose values should be returned. Syntax public ReturnBehavior ReturnBehavior { set; get; } Example: Obtaining All Fields The following example shows how to obtain the values of all fields of all stock item         records in the         system. //You can omit the setting of the ReturnBehavior property to ReturnBehavior.All 
//because this option is used by default
StockItem stockItemsToBeFound = new StockItem();

//Get the list of stock items with the values of all fields 
//that are defined in the contract
Entity[] stockItems = soapClient.GetList(stockItemsToBeFound); Example: Obtaining Only Specified Fields The following example shows how to obtain the values of the  InventoryID  field,         the  ItemStatus  field, and all  WarehouseDetail  fields         of all stock item records in the         system. StockItem stockItemsToBeFound = new StockItem
{
  ReturnBehavior = ReturnBehavior.OnlySpecified,
  InventoryID = new StringReturn(),
  ItemStatus = new StringSearch { Value = "Active" },
  WarehouseDetails = new StockItemWarehouseDetail[]
  {
    new StockItemWarehouseDetail {ReturnBehavior = ReturnBehavior.All}
  },
};

//Get the list of stock items with the values of the specified fields
Entity[] stockItems = soapClient.GetList(stockItemsToBeFound); Example: Obtaining All Fields Except the Specified Ones The following example shows how to obtain the values of all fields of all stock item records in the system except the  LastModified  field and all  WarehouseDetail  fields. StockItem stockItemsToBeFound = new StockItem
{
  ReturnBehavior = ReturnBehavior.All,
  LastModified = new DateTimeSkip(),
  WarehouseDetails = new StockItemWarehouseDetail[]
  {
    new StockItemWarehouseDetail {ReturnBehavior = ReturnBehavior.None}
  },
};

//Get the list of stock items with the values of the specified fields
Entity[] stockItems = soapClient.GetList(stockItemsToBeFound); Example: Obtaining Only System Fields The following example shows how to obtain the values of only system fields of all stock item records in the system. StockItem stockItemToBeFound = new StockItem
{
  ReturnBehavior = ReturnBehavior.OnlySystem,
};

//Get the list of stock items with the values of system fields
Entity[] stockItems = soapClient.GetList(stockItemToBeFound); ]]></column>
		</row>
		<row PageID="a0af4bea-8162-4589-8bf9-d63f941fd15a" Language="en-US" PageRevisionID="1" PlainText="Screen-Based SOAP API Reference In this chapter, you will find the reference information for the main methods of the    screen-based web services API; these methods are used to transfer data to and from  Acumatica ERP.    This chapter covers the following objects, and the following methods, which are exposed by the      Screen  class: Login() MethodLogout() MethodSetLocaleName() MethodSetBusinessDate() MethodGetScenario() MethodGetSchema() MethodSetSchema() MethodExport() MethodSubmit() MethodImport() MethodClear() MethodGetProcessStatus() Method" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="31b9884e-4177-c341-45ce-1f8f06aebd66" RecordSourceID="22377">
			<column name="Content"><![CDATA[
In this chapter, you will find the reference information for the main methods of the screen-based web services API; these methods are used to transfer data to and from Acumatica ERP. This chapter covers the following objects, and the following methods, which are exposed by the <tt>Screen</tt> class:[anchor|#_4d4406ae-b938-43b4-a3ee-8a1c131b11b2]
*[HelpRoot_Dev_Integration\IS__con_SB_Login|Login() Method]
*[HelpRoot_Dev_Integration\IS__con_SB_Logout|Logout() Method]
*[HelpRoot_Dev_Integration\IS__con_SB_SetLocaleName|SetLocaleName() Method]
*[HelpRoot_Dev_Integration\IS__con_SB_SetBusinessDate|SetBusinessDate() Method]
*[HelpRoot_Dev_Integration\IS__con_SB_GetScenario|GetScenario() Method]
*[HelpRoot_Dev_Integration\IS__con_SB_GetSchema|GetSchema() Method]
*[HelpRoot_Dev_Integration\IS__con_SB_SetSchema|SetSchema() Method]
*[HelpRoot_Dev_Integration\IS__con_SB_Export|Export() Method]
*[HelpRoot_Dev_Integration\IS__con_SB_Submit|Submit() Method]
*[HelpRoot_Dev_Integration\IS__con_SB_Import|Import() Method]
*[HelpRoot_Dev_Integration\IS__con_SB_Clear|Clear() Method]
*[HelpRoot_Dev_Integration\IS__con_SB_GetProcessStatus|GetProcessStatus() Method]
]]></column>
		</row>
		<row PageID="6122a664-b0ae-4c51-a62a-f0124a131245" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="67e69ebb-6513-f5c8-67cf-e1b6572d6478" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You use the <tt>Login()</tt> method to make the client application sign in to Acumatica ERP.{br}{TOC}
==Syntax==<source lang="csharp">public LoginResult Login(string name, string password)</source>
==Parameters==[anchor|#_465e64c7-dd80-4e25-a3ce-fec8361517bf]
*<tt>name</tt>: The username that the application should use to sign in to Acumatica ERP, such as {{"admin"}}. 
*:To sign in to a specific Acumatica ERP tenant, specify the <tt>name</tt> parameter as follows: {{UserName@TenantName}}, where you should specify the username instead of {{UserName}} and the tenant name instead of {{TenantName}}. For example, if you sign in to the tenant with the name ''Dollar'' as the user with the name ''admin'', you should specify the parameter as {{admin@Dollar}}. You can view the name that should be used for the tenant in the '''Login Name''' box of the [HelpRoot_FormReference\SM_20_35_20|Tenants] ([~/?ScreenId=SM203520|SM203520]) form.
*:To sign in to a certain company in the tenant, specify the parameter as follows: {{UserName@TenantName:CompanyName}}, where you should specify the username instead of {{UserName}}, the tenant name instead of {{TenantName}}, and the company ID instead of {{CompanyName}}. You can view the ID of the company in the '''Company ID''' box of the [HelpRoot_FormReference\CS_10_15_00|Companies] ([~/?ScreenId=CS101500|CS101500]) form. For example, if you sign in to the ''East'' company of the ''Dollar'' tenant as the user with the name ''admin'', you should specify the parameter as {{admin@Dollar:East}}. 
*<tt>password</tt>: The password for the username, such as {{"123"}}.

==Return Value==
The method returns the <tt>LoginResult</tt> object, which contains the description of errors that occurred during signing in, if any.
==Example==
The following code signs in to Acumatica ERP by using the parameters that are specified in the application settings.{{{{Screen context = new Screen();
context.CookieContainer = new System.Net.CookieContainer();
context.Url = "https://localhost/WebServiceAPITest/Soap/MYSTORE.asmx";
context.Login("admin@MyTenant:MYSTORE", "123");
}}}}
==Usage Notes==
Before you sign in to Acumatica ERP by using the <tt>Login()</tt> method, do the following:[anchor|#ol_jkk_hz3_ws]
#Initialize the <tt>CookieContainer</tt> property of the object with a new {{System.Net.CookieContainer()}}. The <tt>CookieContainer</tt> property is a standard property of an object of the {{HttpWebClientProtocol}} system type. (The <tt>Screen</tt> class is derived from the {{HttpWebClientProtocol}} class.) This property is used to maintain the session state for a client. 
#Specify the URL of the web service in the <tt>URL</tt> property of the object. This is the same URL that you specify when you add a web reference to the Acumatica ERP web service. You can change the URL of the service dynamically in your application if you need to switch between multiple Acumatica ERP web services.
{br}

For each call of the <tt>Login()</tt> method, you must call the <tt>Logout()</tt> method after you finish your work with Acumatica ERP to close the session. Therefore, when you are working with the web services API, we recommend that you use the pattern that is shown in the following code.<source lang="csharp">using 
(
  //Connect to the web services and log in to Acumatica ERP
  Screen context = new Screen();
  ...
)
{
  try
  {
    //Import, export, or submit data
    ...
  }
  finally
  {
    //Log out from Acumatica ERP
    context.Logout();
  }
}</source>{br}

You should take into account Acumatica ERP license API limits when using the <tt>Login()</tt> method. For details, see [HelpRoot_Install\License_Restrictions_APIUsers|License Restrictions for API Users].]]></column>
			<column name="PlainText"><![CDATA[Login() Method You use the  Login()  method to make the client application sign in to  Acumatica ERP. Syntax public LoginResult Login(string name, string password) Parameters name : The username that the application should use to sign in to  Acumatica ERP, such as  "admin" .  To sign in to a specific  Acumatica ERP tenant, specify the  name  parameter as follows:                UserName@TenantName , where you should specify the username instead of                UserName  and the tenant name instead of  TenantName .             For example, if you sign in to the tenant with the name  Dollar  as the user with             the name  admin , you should specify the parameter as              admin@Dollar . You can view the name that should be used for the tenant             in the  Login Name  box of the   ([~/?ScreenId=SM203520|SM203520]) Tenants (SM203520)             form. To sign in to a certain company in the tenant, specify the parameter as             follows:  UserName@TenantName:CompanyName , where you should specify the             username instead of  UserName , the tenant name instead of                TenantName , and the company ID instead of                CompanyName . You can view the ID of the company in the                Company ID  box of the   ([~/?ScreenId=CS101500|CS101500]) Companies             (CS101500) form. For example, if you sign in to the  East  company of the                Dollar  tenant as the user with the name  admin , you should specify the             parameter as  admin@Dollar:East .  password : The password for the username, such as              "123" . Return Value The method returns the  LoginResult  object, which contains the         description of errors that occurred during signing in, if any. Example The following code signs in to  Acumatica ERP by using the parameters that are specified in the application settings. Screen context = new Screen();
context.CookieContainer = new System.Net.CookieContainer();
context.Url = "https://localhost/WebServiceAPITest/Soap/MYSTORE.asmx";
context.Login("admin@MyTenant:MYSTORE", "123"); Usage Notes Before you sign in to  Acumatica ERP by using the  Login()  method, do the following: Initialize the  CookieContainer  property of the object with a new                System.Net.CookieContainer() . The  CookieContainer              property is a standard property of an object of the                HttpWebClientProtocol  system type. (The  Screen              class is derived from the  HttpWebClientProtocol  class.) This property             is used to maintain the session state for a client.  Specify the URL of the web service in the  URL  property of the             object. This is the same URL that you specify when you add a web reference to the  Acumatica ERP web service. You can change the URL of the service dynamically in your application if             you need to switch between multiple  Acumatica ERP web services. For each call of the  Login()  method, you must call the            Logout()  method after you finish your work with  Acumatica ERP to close the session. Therefore, when you are working with the web services API, we         recommend that you use the pattern that is shown in the following         code. using 
(
  //Connect to the web services and log in to  Acumatica ERP
  Screen context = new Screen();
  ...
)
{
  try
  {
    //Import, export, or submit data
    ...
  }
  finally
  {
    //Log out from  Acumatica ERP
    context.Logout();
  }
} You should take into account  Acumatica ERP license API limits when using the  Login()  method. For details, see            License Restrictions for API Users. ]]></column>
		</row>
		<row PageID="378c9257-9a93-48c8-a3a4-1180afa00f51" Language="en-US" PageRevisionID="1" Content="&#xA;You use the &lt;tt&gt;Logout()&lt;/tt&gt; method to make the client application sign out from Acumatica ERP.&#xA;==Syntax=={{{{public void Logout()&#xA;}}}}&#xA;==Usage Notes==&#xA;For each call of the &lt;tt&gt;Login()&lt;/tt&gt; method, you must call the &lt;tt&gt;Logout()&lt;/tt&gt; method after you finish your work with Acumatica ERP to close the session. Therefore, when you are working with the web services API, we recommend that you use the pattern that is shown in the following code.&lt;source lang=&quot;csharp&quot;&gt;using &#xA;(&#xA;  //Connect to the web services and sign in to Acumatica ERP&#xA;  Screen context = new Screen();&#xA;  ...&#xA;)&#xA;{&#xA;  try&#xA;  {&#xA;    //Import, export, or submit data&#xA;    ...&#xA;  }&#xA;  finally&#xA;  {&#xA;    //Sign out from Acumatica ERP&#xA;    context.Logout();&#xA;  }&#xA;}&lt;/source&gt;" PlainText="Logout() Method You use the  Logout()  method to make the client application sign out from            Acumatica ERP. Syntax public void Logout() Usage Notes For each call of the  Login()  method, you must call the            Logout()  method after you finish your work with  Acumatica ERP to close the session. Therefore, when you are working with the web services API, we         recommend that you use the pattern that is shown in the following         code. using &#xA;(&#xA;  //Connect to the web services and sign in to  Acumatica ERP&#xA;  Screen context = new Screen();&#xA;  ...&#xA;)&#xA;{&#xA;  try&#xA;  {&#xA;    //Import, export, or submit data&#xA;    ...&#xA;  }&#xA;  finally&#xA;  {&#xA;    //Sign out from  Acumatica ERP&#xA;    context.Logout();&#xA;  }&#xA;} " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="0d62029c-d76c-df75-e91e-3fe7dab5e5fc" RecordSourceID="22377" />
		<row PageID="06dd4c96-41cd-4c42-a341-576296a07b0d" Language="en-US" PageRevisionID="1" Content="&#xA;You use the &lt;tt&gt;SetLocaleName()&lt;/tt&gt; method to specify the locale for Acumatica ERP to correctly recognize the format of dates, numbers, and other country-specific data that is passed by using the web services API. By default, Acumatica ERP uses the invariant locale, which is similar to the English (United States) locale.&#xA;==Syntax=={{{{public void SetLocaleName(string localeName)&#xA;}}}}&#xA;==Parameter==[anchor|#_3d73653e-c45a-4d44-bbe5-542beca05387]&#xA;*&lt;tt&gt;localeName&lt;/tt&gt;: The locale that should be used in Acumatica ERP. You should specify the locale in the {{System.Globalization.CultureInfo}} format converted to {{string}}, such as {{&quot;EN-US&quot;}}.&#xA;&#xA;==Example==&#xA;The following code shows how to specify the appropriate locale with the &lt;tt&gt;SetLocaleName()&lt;/tt&gt; method of the &lt;tt&gt;Screen&lt;/tt&gt; object. &lt;source lang=&quot;csharp&quot;&gt;...&#xA;using System.Threading;&#xA;...&#xA;Screen context = new Screen();&#xA;context.SetLocaleName(Thread.CurrentThread.CurrentCulture.ToString());&lt;/source&gt;" PlainText="SetLocaleName() Method You use the  SetLocaleName()  method to specify the locale for  Acumatica ERP to correctly recognize the format of dates, numbers, and other country-specific data that         is passed by using the web services API. By default,  Acumatica ERP uses the invariant locale, which is similar to the English (United States) locale. Syntax public void SetLocaleName(string localeName) Parameter localeName : The locale that should be used in  Acumatica ERP. You should specify the locale in the  System.Globalization.CultureInfo            format converted to  string , such as  &quot;EN-US&quot; . Example The following code shows how to specify the appropriate locale with the            SetLocaleName()  method of the  Screen  object.          ...&#xA;using System.Threading;&#xA;...&#xA;Screen context = new Screen();&#xA;context.SetLocaleName(Thread.CurrentThread.CurrentCulture.ToString()); " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="bd4d78f7-a736-681f-d2d8-5840d146d572" RecordSourceID="22377" />
		<row PageID="caf90c23-1a51-48f5-bcdc-1ec6fccb77db" Language="en-US" PageRevisionID="1" Content="&#xA;You use the &lt;tt&gt;SetBusinessDate()&lt;/tt&gt; method to specify the business date in Acumatica ERP. You can set the business date to any date to make the system insert this date into the date fields by default. The business date is inserted into any new document that you create and is used in the default selection parameters that appear on processing and inquiry screens. &#xA;==Syntax=={{{{public void SetBusinessDate(System.DateTime businessDate)&#xA;}}}}&#xA;==Parameter==[anchor|#_0f1ee1db-0362-4564-95c6-47e183e81136]&#xA;*&lt;tt&gt;businessDate&lt;/tt&gt;: The business date that should be used in Acumatica ERP.&#xA;&#xA;==Usage Notes==&#xA;The business date resets to the current date of your computer after each login. Therefore, if you need to specify a business date in your application, you should call the &lt;tt&gt;SetBusinessDate()&lt;/tt&gt; method after each client application login." PlainText="SetBusinessDate() Method You use the  SetBusinessDate()  method to specify the business date in  Acumatica ERP.     You can set the business date to any date to make the system insert this date into the date     fields by default. The business date is inserted into any new document that you create and is     used in the default selection parameters that appear on processing and inquiry screens.  Syntax public void SetBusinessDate(System.DateTime businessDate) Parameter businessDate : The business date that should be used in  Acumatica ERP. Usage Notes The business date resets to the current date of your computer after each login. Therefore, if     you need to specify a business date in your application, you should call the       SetBusinessDate()  method after each client application login. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="45c22303-c1b8-92fb-31a1-ef48ad3f4c77" RecordSourceID="22377" />
		<row PageID="e658ec52-4089-46c7-80fd-d1223a4d14b9" Language="en-US" PageRevisionID="1" Content="&#xA;You use the &lt;tt&gt;GetScenario()&lt;/tt&gt; method to retrieve the list of commands of an integration scenario that is configured in the system.&#xA;==Syntax=={{{{public Command[] GetScenario(string scenario)&#xA;}}}}&#xA;==Parameter==[anchor|#_93538d6c-bc91-490b-80a8-237469c7dee8]&#xA;*&lt;tt&gt;scenario&lt;/tt&gt;: The name of the import or export scenario for which the list of commands should be retrieved.&#xA;&#xA;==Return Value==&#xA;The method returns the list of commands of the specified integration scenario." PlainText="GetScenario() Method You use the  GetScenario()  method to retrieve the list of commands of an     integration scenario that is configured in the system. Syntax public Command[] GetScenario(string scenario) Parameter scenario : The name of the import or export scenario for which the list of      commands should be retrieved. Return Value The method returns the list of commands of the specified integration scenario. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="a47aba81-626b-a6fa-46e2-b10e7aee748e" RecordSourceID="22377" />
		<row PageID="7da354b3-0cff-4473-913e-8862d3a5ce7b" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="d9033d6f-b455-f863-1b6c-a21e8b24d37a" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You use the <tt>GetSchema()</tt> method of the <tt>Screen</tt> object to get the description of the structure (schema) of a form. This method is specific for each Acumatica ERP form, and you should use the method with the ID of the needed form in the prefix of the method name.((({S:Hint}To prevent application failures due to UI changes in Acumatica ERP, you can use the <tt>GetSchema()</tt> method of the screen-based API wrapper instead of the <tt>GetSchema()</tt> method of the <tt>Screen</tt> object. For more information on the screen-based API wrapper, see [HelpRoot_Dev_Integration\IS__con_Screen-Based_API_Wrapper|Screen-Based API Wrapper].
)))
==Syntax=={{{{public Content GetSchema()
}}}}
==Return Value==
The method returns the schema of the form as the corresponding <tt>Content</tt> object, which is specific for each form. 
==Example==
To get the schema of the [HelpRoot_FormReference\IN_20_25_00|Stock Items] ([~/?ScreenId=IN202500|IN202500]) form, you should call the <tt>IN202500GetSchema()</tt> method of the <tt>Screen</tt> object. You will receive the result as a <tt>IN202500Content</tt> object, as the following code shows.<source lang="csharp">Screen context = new Screen();
...
IN202500Content stockItemsSchema = context.IN202500GetSchema();</source>]]></column>
			<column name="PlainText"><![CDATA[GetSchema() Method You use the  GetSchema()  method of the  Screen  object to     get the description of the structure (schema) of a form. This method is specific for each  Acumatica ERP     form, and you should use the method with the ID of the needed form in the prefix of the method      name. To prevent application failures due to UI changes in  Acumatica ERP,      you can use the  GetSchema()  method of the screen-based API wrapper instead      of the  GetSchema()  method of the  Screen  object. For more      information on the screen-based API wrapper, see  Screen-Based API Wrapper. Syntax public Content GetSchema() Return Value The method returns the schema of the form as the corresponding  Content      object, which is specific for each form.  Example To get the schema of the   ([~/?ScreenId=IN202500|IN202500]) Stock Items (IN202500) form, you     should call the  IN202500GetSchema()  method of the  Screen      object. You will receive the result as a  IN202500Content  object, as the     following code     shows. Screen context = new Screen();
...
IN202500Content stockItemsSchema = context.IN202500GetSchema(); ]]></column>
		</row>
		<row PageID="1cddb56c-f2a2-41b3-9668-43e636a97ca4" Language="en-US" PageRevisionID="1" Content="&#xA;You use the &lt;tt&gt;SetSchema()&lt;/tt&gt; method of the &lt;tt&gt;Screen&lt;/tt&gt; object to change the description of the structure (schema) of a form to the one specified in the method. This method is useful when you need to work with the description of the form that was used in previous versions of Acumatica ERP. This method is specific for each Acumatica ERP form, and you should use the method with the ID of the needed form in the prefix of the method name.&#xA;==Syntax=={{{{public void SetSchema(Content schema)&#xA;}}}}&#xA;==Parameter==[anchor|#_746ac384-8923-4dfb-91db-f4be75ee182c]&#xA;*&lt;tt&gt;schema&lt;/tt&gt;: The schema of an Acumatica ERP form.&#xA;" PlainText="SetSchema() Method You use the  SetSchema()  method of the  Screen  object to     change the description of the structure (schema) of a form to the one specified in the method.     This method is useful when you need to work with the description of the form that was used in     previous versions of  Acumatica ERP.     This method is specific for each  Acumatica ERP     form, and you should use the method with the ID of the needed form in the prefix of the method     name. Syntax public void SetSchema(Content schema) Parameter schema : The schema of an  Acumatica ERP      form. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="2db3e5ab-6512-1264-a842-168f50d11f62" RecordSourceID="22377" />
		<row PageID="b1584c43-084d-4c4b-b5b7-fc5412de852b" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="db855fce-16c8-39ea-c2b7-e9a37a0613b1" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You use the proper <tt>Export()</tt> method of a <tt>Screen</tt> object to export data from Acumatica ERP. You select the needed <tt>Export()</tt> method by using in the name of the method the prefix that contains the ID of the Acumatica ERP form from which the method exports data.{br}{TOC}
==Syntax=={{{{public string[][] Export(
  Command[] commands, 
  Filter[] filters, 
  int topCount, 
  bool includeHeaders, 
  bool breakOnError
)
}}}}
==Parameters==
[anchor|#ul_qbr_q2r_xs]
*<tt>commands</tt>: In this parameter, you specify the UI elements of the Acumatica ERP form whose values you need to export. In the array of commands that you pass to the <tt>commands</tt> parameter, you can also use the <tt>EveryValue</tt> service command, which makes the system export all records of the specific type.
*<tt>filters</tt>: In this parameter, you specify any restrictions on the data to be exported. For example, you can configure the system to export only the records that have a particular status. 
*<tt>topCount</tt>: In this parameter, you can restrict the number of records to be exported. If this parameter is set to 0, the system exports all records that are specified by the <tt>commands</tt> and <tt>filters</tt> parameters of the <tt>Export()</tt> method.
*<tt>includeHeaders</tt>: In this parameter, you specify whether the result of the export should include column headers. If this parameter is set to {{true}}, the result of the export includes the names of exported elements in the first row of the exported data.
*<tt>breakOnError</tt>: In this parameter, you specify whether the system should stop the export if an error occurs during this process. If this parameter is set to {{true}}, the system stops exporting data when the first error occurs during the export.

==Return Value==
The result of the data export is a two-dimensional string array, which represents the exported data in a table format. Thus, if an exported record contains detail lines, the values of the detail lines are translated to multiple rows of this table. The number of rows is equal to the number of detail lines of the source record. The table rows that belong to one record have the same values of the elements of the summary area specified. {br}

For example, suppose that on the [HelpRoot_FormReference\SO_30_30_00|Invoices] ([~/?ScreenId=SO303000|SO303000]) form, an invoice has three detail lines. If you export this invoice with detail lines, the data prepared for export will include three records for this invoice—one record for each detail line. These records will include identical values of the elements in the summary area of the invoice, such as the type and reference number, and different values of the detail line elements. ]]></column>
			<column name="PlainText"><![CDATA[Export() Method You use the proper  Export()  method of a  Screen  object to     export data from  Acumatica ERP.     You select the needed  Export()  method by using in the name of the method the     prefix that contains the ID of the  Acumatica ERP     form from which the method exports data. Syntax public string[][] Export(
  Command[] commands, 
  Filter[] filters, 
  int topCount, 
  bool includeHeaders, 
  bool breakOnError
) Parameters commands : In this parameter, you specify the UI elements of the  Acumatica ERP       form whose values you need to export. In the array of commands that you pass to the         commands  parameter, you can also use the  EveryValue        service command, which makes the system export all records of the specific type. filters : In this parameter, you specify any restrictions on the data to       be exported. For example, you can configure the system to export only the records that have a       particular status.  topCount : In this parameter, you can restrict the number of records to       be exported. If this parameter is set to 0, the system exports all records that are specified       by the  commands  and  filters  parameters of the         Export()  method. includeHeaders : In this parameter, you specify whether the result of the       export should include column headers. If this parameter is set to  true , the       result of the export includes the names of exported elements in the first row of the exported       data. breakOnError : In this parameter, you specify whether the system should       stop the export if an error occurs during this process. If this parameter is set to         true , the system stops exporting data when the first error occurs during the       export. Return Value The result of the data export is a two-dimensional string array, which represents the exported     data in a table format. Thus, if an exported record contains detail lines, the values of the     detail lines are translated to multiple rows of this table. The number of rows is equal to the     number of detail lines of the source record. The table rows that belong to one record have the     same values of the elements of the summary area specified.  For example, suppose that on the   ([~/?ScreenId=SO303000|SO303000]) Invoices (SO303000)     form, an invoice has three detail lines. If you export this invoice with detail lines, the data     prepared for export will include three records for this invoice—one record for each detail line.     These records will include identical values of the elements in the summary area of the invoice,     such as the type and reference number, and different values of the detail line elements.  ]]></column>
		</row>
		<row PageID="01682a06-8f36-4aec-b1ed-4fe17ae510db" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="7ff1e1fa-369d-f1fa-174f-786ff0519ea7" RecordSourceID="22377">
			<column name="Content"><![CDATA[
You use the proper <tt>Submit()</tt> method of a <tt>Screen</tt> object to submit data to Acumatica ERP. You select the needed <tt>Submit()</tt> method by using in the name of the method the prefix that contains the ID of the Acumatica ERP form with which the method works.{br}{TOC}
==Syntax=={{{{public Content[] Submit(Command[] commands)
}}}}
==Parameter==
[anchor|#_2fd30e54-2dff-49c9-a3df-02fcd95dd25b]
*<tt>commands</tt>: You use this parameter to specify the data that you are going to submit. In this parameter, you pass to the web service an array of <tt>Command</tt> objects in which you can specify commands that do the following:
**Set the values of elements on the form by using <tt>Value</tt> commands. 
**Click buttons on the form (for example, the '''Save''' button) by using <tt>Action</tt> commands. 
**Get the result of data processing by using <tt>Field</tt> commands. 

==Return value==
The result of processing of the data submitted by using the <tt>Submit()</tt> method is returned as a <tt>Content</tt> object specific to the form to which the data has been submitted. This object contains the values of the elements that you specified by using <tt>Field</tt> commands in the array of <tt>Command</tt> objects, which you pass to the <tt>Submit()</tt> method. The values of the elements that were not specified by using <tt>Field</tt> commands are {{null}}.{br}

If you want only to submit data to an Acumatica ERP form and do not need to obtain any values of elements after submitting, do not specify any <tt>Field</tt> commands in the array of the <tt>Command</tt> object that you pass to a <tt>Submit()</tt> method. In this case, the <tt>Submit()</tt> method does not return any value.
==Example 1: Submitting Data and Obtaining the Result of Processing==
Suppose that you want to submit a customer record to the [HelpRoot_FormReference\AR_30_30_00|Customers] ([~/?ScreenId=AR303000|AR303000]) form and obtain as a result of processing the values of the '''Customer Name''' and '''Customer Class''' elements. You pass the list of commands, which includes <tt>Field</tt> commands for the <tt>CustomerName</tt> and <tt>CustomerClass</tt> fields, to the <tt>AR303000Submit()</tt> method, as the following code shows. In this example, the <tt>AR303000Submit()</tt> method returns a <tt>AR303000Content</tt> object that has non-null values of the <tt>CustomerName</tt> and <tt>CustomerClass</tt> fields. The values of the other elements of the returned <tt>AR303000Content</tt> object are {{null}}.<source lang="csharp">AR303000Content custSchema = context.AR303000GetSchema();
var commands = new Command[]
{
    ...
    custSchema.Actions.Save,
    custSchema.CustomerSummary.CustomerName,
    custSchema.GeneralInfoFinancialSettings.CustomerClass 
};
AR303000Content customer = context.AR303000Submit(commands)[0];</source>
==Example 2: Submitting Data without Obtaining the Result of Processing==
Suppose that you want to create a customer record on the [HelpRoot_FormReference\AR_30_30_00|Customers] form and do not need to get the values of any element on the form after the customer record is created. You pass the list of commands, which sets the needed values and saves the changes on the form (the list of commands does not include any <tt>Field</tt> commands), to the <tt>AR303000Submit()</tt> method, as the following code shows. In this example, the <tt>AR303000Submit()</tt> method does not return any value.<source lang="csharp">AR303000Content custSchema = context.AR303000GetSchema();
var commands = new Command[]
{
    new Value 
    {
        ... 
    },
    custSchema.Actions.Save 
};
context.AR303000Submit(commands);</source>]]></column>
			<column name="PlainText"><![CDATA[Submit() Method You use the proper  Submit()  method of a  Screen  object         to submit data to  Acumatica ERP. You select the needed  Submit()  method by using in the name of the         method the prefix that contains the ID of the  Acumatica ERP form with which the method works. Syntax public Content[] Submit(Command[] commands) Parameter commands : You use this parameter to specify the data that you are             going to submit. In this parameter, you pass to the web service an array of                Command  objects in which you can specify commands that do the               following: Set the values of elements on the form by using  Value  commands.  Click buttons on the form (for example, the  Save  button) by                 using  Action  commands.  Get the result of data processing by using  Field  commands.                Return value The result of processing of the data submitted by using the  Submit()          method is returned as a  Content  object specific to the form to which the         data has been submitted. This object contains the values of the elements that you specified         by using  Field  commands in the array of  Command          objects, which you pass to the  Submit()  method. The values of the         elements that were not specified by using  Field  commands are            null . If you want only to submit data to an  Acumatica ERP form and do not need to obtain any values of elements after submitting, do not specify         any  Field  commands in the array of the  Command  object         that you pass to a  Submit()  method. In this case, the            Submit()  method does not return any value. Example 1: Submitting Data and Obtaining the Result of Processing Suppose that you want to submit a customer record to the   ([~/?ScreenId=AR303000|AR303000]) Customers (AR303000) form and obtain as a result of processing the values of the            Customer Name  and  Customer Class  elements.         You pass the list of commands, which includes  Field  commands for the            CustomerName  and  CustomerClass  fields, to the            AR303000Submit()  method, as the following code shows. In this example,         the  AR303000Submit()  method returns a  AR303000Content          object that has non-null values of the  CustomerName  and            CustomerClass  fields. The values of the other elements of the returned            AR303000Content  object are          null . AR303000Content custSchema = context.AR303000GetSchema();
var commands = new Command[]
{
    ...
    custSchema.Actions.Save,
    custSchema.CustomerSummary.CustomerName,
    custSchema.GeneralInfoFinancialSettings.CustomerClass 
};
AR303000Content customer = context.AR303000Submit(commands)[0]; Example 2: Submitting Data without Obtaining the Result of Processing Suppose that you want to create a customer record on the   ([~/?ScreenId=AR303000|AR303000]) Customers form and do not need to get the values of any element on the form after         the customer record is created. You pass the list of commands, which sets the needed values         and saves the changes on the form (the list of commands does not include any            Field  commands), to the  AR303000Submit()  method, as         the following code shows. In this example, the  AR303000Submit()  method         does not return any         value. AR303000Content custSchema = context.AR303000GetSchema();
var commands = new Command[]
{
    new Value 
    {
        ... 
    },
    custSchema.Actions.Save 
};
context.AR303000Submit(commands); ]]></column>
		</row>
		<row PageID="7cd68dda-8349-4d7c-a060-4a62b8e519c0" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="fe9b4326-b3ea-5967-ef70-b94296043f6d" RecordSourceID="22377">
			<column name="Content"><![CDATA[
To import data to Acumatica ERP by using the web services API, you should use the proper <tt>Import()</tt> method of a <tt>Screen</tt> object. You select the needed <tt>Import()</tt> method by using in the name of the method a prefix that contains the ID of the Acumatica ERP form to which the method imports data.{br}{TOC}
==Syntax=={{{{public ImportResults[] Import(
  Command[] commands, 
  Filter[] filters, 
  string[][] data, 
  bool includedHeaders, 
  bool breakOnError, 
  bool breakOnIncorrectTarget
)
}}}}
==Parameters==
[anchor|#ul_qbr_q2r_xs]
*<tt>commands</tt>: In this parameter, you specify the UI elements of the Acumatica ERP form to which you need to import data by using <tt>Field</tt> commands. You can click buttons on the form (for example, the '''Save''' button) by using <tt>Action</tt> commands. 
*<tt>filters</tt>: In this parameter, you specify any restrictions on the data to be imported. For example, you can configure the system to import only the records that have the ''CUST'' prefix in the customer ID field. 
*<tt>data</tt>: In this parameter, you specify the data that should be imported in a two-dimensional string array. Each row of the array should contain the values of the fields in the order that you specified in the {{commands}} parameter.
*<tt>includeHeaders</tt>: In this parameter, you specify whether the imported data include column headers. If this parameter is set to {{true}}, this signals to the system that the data, which is imported, includes the names of the imported elements in the first row.
*<tt>breakOnError</tt>: In this parameter, you specify whether the system should stop the data import if an error occurs during this process. If this parameter is set to {{true}}, the system stops importing data when the first error occurs during the import.
*<tt>breakOnIncorrectTarget</tt>: In this parameter, you specify whether the system should stop the data import if the record does not meet the condition specified for the imported record. If this parameter is set to {{true}}, the system stops processing records and displays an error.

==Return Value==
The result of the processing of the data imported by using the <tt>Import()</tt> method is returned as a <tt>ImportResults</tt> object specific to the form to which the data has been imported. This object contains the result of the processing.]]></column>
			<column name="PlainText"><![CDATA[Import() Method To import data to  Acumatica ERP     by using the web services API, you should use the proper  Import()  method of a       Screen  object. You select the needed  Import()  method by     using in the name of the method a prefix that contains the ID of the  Acumatica ERP     form to which the method imports data. Syntax public ImportResults[] Import(
  Command[] commands, 
  Filter[] filters, 
  string[][] data, 
  bool includedHeaders, 
  bool breakOnError, 
  bool breakOnIncorrectTarget
) Parameters commands : In this parameter, you specify the UI elements of the  Acumatica ERP       form to which you need to import data by using  Field  commands. You can       click buttons on the form (for example, the  Save  button) by using         Action  commands.  filters : In this parameter, you specify any restrictions on the data to       be imported. For example, you can configure the system to import only the records that have       the  CUST  prefix in the customer ID field.  data : In this parameter, you specify the data that should be imported in       a two-dimensional string array. Each row of the array should contain the values of the fields       in the order that you specified in the  commands  parameter. includeHeaders : In this parameter, you specify whether the imported data       include column headers. If this parameter is set to  true , this signals to the       system that the data, which is imported, includes the names of the imported elements in the       first row. breakOnError : In this parameter, you specify whether the system should       stop the data import if an error occurs during this process. If this parameter is set to         true , the system stops importing data when the first error occurs during the       import. breakOnIncorrectTarget : In this parameter, you specify whether the       system should stop the data import if the record does not meet the condition specified for the       imported record. If this parameter is set to  true , the system stops       processing records and displays an error. Return Value The result of the processing of the data imported by using the  Import()      method is returned as a  ImportResults  object specific to the form to which     the data has been imported. This object contains the result of the processing. ]]></column>
		</row>
		<row PageID="81a56b47-fef0-43d8-a648-462a343d2fde" Language="en-US" PageRevisionID="1" Content="&#xA;You use the &lt;tt&gt;Clear()&lt;/tt&gt; method to clear all changes on the form. The method works in the same way as the '''Cancel''' button on the toolbar of an Acumatica ERP form does. This method is specific to the particular Acumatica ERP form, and you should use the method with the ID of the needed form in the prefix of the method name.&#xA;==Syntax=={{{{public void Clear()&#xA;}}}}" PlainText="Clear() Method You use the  Clear()  method to clear all changes on the form. The method     works in the same way as the  Cancel  button on the toolbar of an  Acumatica ERP     form does. This method is specific to the particular  Acumatica ERP     form, and you should use the method with the ID of the needed form in the prefix of the method     name. Syntax public void Clear() " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="63178a7c-1625-95c4-f3bd-d59185a1e1f4" RecordSourceID="22377" />
		<row PageID="4a4ca180-c33e-433a-8181-af91378e5554" Language="en-US" PageRevisionID="1" Content="&#xA;You use the &lt;tt&gt;GetProcessStatus()&lt;/tt&gt; method to monitor the status of a long-running operation (such as the release or confirmation operation). &#xA;==Syntax=={{{{public ProcessResult GetProcessStatus()&#xA;}}}}&#xA;==Return Value==&#xA;The method returns a &lt;tt&gt;ProcessResult&lt;/tt&gt; object. You should use the &lt;tt&gt;Status&lt;/tt&gt; property of this object to get the status of the processing operation. When the status of the operation is &lt;tt&gt;Completed&lt;/tt&gt;, you can get the result of processing." PlainText="GetProcessStatus() Method You use the  GetProcessStatus()  method to monitor the status of a         long-running operation (such as the release or confirmation operation).  Syntax public ProcessResult GetProcessStatus() Return Value The method returns a  ProcessResult  object. You should use the            Status  property of this object to get the status of the processing         operation. When the status of the operation is  Completed , you can get the         result of processing. " ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="c7836a65-16cd-1bb9-82d8-6b74f341b9dd" RecordSourceID="22377" />
		<row PageID="bbb8b84b-07d7-4a69-adf8-33dc5d430b60" Language="en-US" PageRevisionID="1" Content="&#xA;In this chapter, you can find code examples that show how to implement the integration of Acumatica ERP with external systems through the contract-based REST and SOAP API. Each example includes a short description, a user scenario that you can implement by using this example, and code snippet that use REST or SOAP API to implement the scenario. You can reuse these examples in your application.&#xA;==In This Chapter==[anchor|#_bf988ffb-63fc-4bfd-bf7d-4d5432c9cc91]&#xA;*[HelpRoot_Dev_Integration\IS__con_Projects_Integration|Integration of Acumatica ERP Projects with External Systems (REST and SOAP API Examples)]&#xA;*[HelpRoot_Dev_Integration\IS__con_POS_Integration|Integration of Acumatica ERP with POS systems (SOAP API Examples)]&#xA;" PlainText="Contract-Based API Examples In this chapter, you can find code examples that show how to implement the integration of  Acumatica ERP     with external systems through the contract-based REST and SOAP API. Each example includes a     short description, a user scenario that you can implement by using this example, and code     snippet that use REST or SOAP API to implement the scenario. You can reuse these examples in     your application. In This Chapter Integration of Acumatica ERP Projects with External Systems (REST and SOAP API Examples)Integration of Acumatica ERP with POS systems (SOAP API Examples)" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="abbde564-07bb-6030-49e4-1386c650dd19" RecordSourceID="22377" />
		<row PageID="78967236-3bc1-48c6-8dc2-d01812ed2326" Language="en-US" PageRevisionID="1" Content="&#xA;You can use contract-based REST and SOAP APIs for the integration of Acumatica ERP projects with external systems. For details on projects and project accounting, see [HelpRoot_Projects\PM_00_00_00|Projects].{br}&#xA;&#xA;The following topics present examples of the integration of Acumatica ERP projects with external systems:[anchor|#_461f2601-dacf-4416-adef-08c245070d1f]&#xA;*[HelpRoot_Dev_Integration\IS__con_Send_ProForma_by_Email|Creation of a Pro Forma Invoice]&#xA;*[HelpRoot_Dev_Integration\IS__con_Managing_of_Account_Groups|Management of Account Groups]&#xA;*[HelpRoot_Dev_Integration\IS__con_Running_of_Project_Billing|Running of Project Billing]&#xA;*[HelpRoot_Dev_Integration\IS__con_Import_of_GL_Transactions|Creation of a General Ledger Transaction with a Project Code That Does Not Produce a Project Transaction]&#xA;*[HelpRoot_Dev_Integration\IS__con_Time_Entry|Time Entry]&#xA;" PlainText="Integration of  Acumatica ERP Projects with External Systems (REST and SOAP API Examples) You can use contract-based REST and SOAP APIs for the integration of  Acumatica ERP projects with external systems. For details on projects and project accounting,                 see   ([~/?ScreenId=PM000000|PM000000]) Projects. The following topics present examples of the integration of  Acumatica ERP projects with external systems: Creation of a Pro Forma InvoiceManagement of Account GroupsRunning of Project BillingCreation of a General Ledger Transaction with a Project Code That Does Not Produce a Project TransactionTime Entry" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="4f37d27c-a80d-4789-eb52-1b927cdb979a" RecordSourceID="22377" />
		<row PageID="0dadafe8-c1bc-4a93-a1ec-89cf23692f02" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="cbc765b9-1f4c-1b41-6062-31f49aae3e9b" RecordSourceID="22377">
			<column name="Content"><![CDATA[
Through the contract-based REST and SOAP APIs, external systems can create pro forma invoices and send them by email. For details about pro forma invoices, see [HelpRoot_Projects\PM__con_Draft_Invoice_Workflow|Pro Forma Invoices].{br}

For a pro forma to be created from the project, the project must have <tt>Customer</tt>, <tt>BillingRule</tt>, <tt>BillingPeriod</tt>, and <tt>NextBillingDate</tt> specified, and must have the ''Active'' status. Because of data validation in the project, <tt>NextBillingDate</tt> cannot be specified for a project with the ''On Hold'' status, and you cannot change the customer in a project with the ''Active'' status. Therefore, these settings can be specified only in multiple API calls, as shown in the code examples below.{br}{TOC}
==User Scenario==
A project manager of the company through an external system needs to create a pro forma invoice in Acumatica ERP and send it to the client by email.
==Preliminary Steps==
A <tt>ProFormaInvoice</tt> entity cannot be created by using the {{PUT}} HTTP method or the <tt>Put()</tt> SOAP API method; it can be created only through the invocation of the <tt>RunProjectBilling</tt> action of the <tt>Project</tt> entity. Because email settings are not mapped to any fields of the <tt>Project</tt> entity, you have to prepare a project template with the specified email settings on the [HelpRoot_FormReference\PM_20_80_00|Project Templates] ([~/?ScreenId=PM208000|PM208000]) form and then use this template for the creation of the project through the API. The project template can also contain preconfigured project tasks, as is the case with the template used in this example. For details about project templates, see [HelpRoot_Projects\PM__con_Templates_for_Projects_and_Tasks|Templates for Projects and Tasks].
==Testing of the Examples==[anchor|#_f8e4ecf6-f2e6-420b-8957-93f9fd063cc9]
To test the code below, you configure your client application and the Acumatica ERP instance to be used as follows:[anchor|#_63f14e52-974f-42c6-842e-6efa06da8504]
*Deploy a new Acumatica ERP instance with the ''SalesDemo'' dataset. For details on deploying an instance, see [HelpRoot_Install\Installing_ERP_Instance|To Deploy an Acumatica ERP Instance] in the Installation Guide.
*On the [HelpRoot_FormReference\CS_10_00_00|Enable/Disable Features] ([~/?ScreenId=CS100000|CS100000]) form, enable the ''Projects'' feature.
*In the client application, add a service reference to the ''Default/18.200.001'' system endpoint. For details on how to add a service reference, see [HelpRoot_Dev_Integration\IS__how_CB_Configure_Application|To Configure the Client Application] in this guide.
*To sign in to the instance in the client application, use the company name (which you specified when you created the instance) and the ''PRODWHOLE'' branch.

==Examples of REST API Requests==You can use the following sequence of examples of HTTP requests to create a pro forma invoice and send it by email through the contract-based REST API: [anchor|#_26df8c23-8e17-423f-9a95-9f6130af3ce9]((({S:Hint}In the request examples below, {{<Acumatica ERP instance name>}} is the name of the Acumatica ERP instance (such as {{MyInstance}}), and {{<host name>}} is the name of the host where the instance is located (such as {{my.acumatica.com}}). {{[/<Acumatica ERP instance name>]}} may be omitted if the instance is installed in the root of the website.
)))
[anchor|#_a5f2fe66-22bb-46e1-8510-21be438bafa5]
#Create a project from the project template and specify the <tt>Customer</tt>, <tt>BillingRule</tt>, and <tt>BillingPeriod</tt> settings of the project. {{{{PUT [/&lt;Acumatica ERP instance name&gt;]/entity/Default/18.200.001/Project HTTP/1.1
Host: &lt;host name&gt;
Accept: application/json
Content-Type: application/json

{
  "ProjectID" : {"value" : "TESTPR3"},
  "ProjectTemplateID" : {"value" : "TM-PROFORM"},
  "Customer" : {"value" : "ABARTENDE"},
  "BillingAndAllocationSettings" : 
  	{
      "BillingRule" : {"value" : "FIXEDPRICE"},
      "BillingPeriod" : {"value" : "Month"},
    }
}

HTTP/1.1 200 OK
Content-Type: application/json
{ ... }
}}}}
#Make the project active. {{{{PUT [/&lt;Acumatica ERP instance name&gt;]/entity/Default/18.200.001/Project HTTP/1.1
Host: &lt;host name&gt;
Accept: application/json
Content-Type: application/json

{
  "ProjectID" : {"value" : "TESTPR3"},
  "Hold" : {"value" : false}
}

HTTP/1.1 200 OK
Content-Type: application/json
{ ... }
}}}}
#Specify <tt>NextBillingDate</tt> for the project. {{{{PUT [/&lt;Acumatica ERP instance name&gt;]/entity/Default/18.200.001/Project HTTP/1.1
Host: &lt;host name&gt;
Accept: application/json
Content-Type: application/json

{
  "ProjectID" : {"value" : "TESTPR3"},
    "BillingAndAllocationSettings" : 
    {
      "NextBillingDate" : {"value" : "2018-08-16"},
    }
}

HTTP/1.1 200 OK
Content-Type: application/json
{ ... }
}}}}
#Activate a project task. {{{{PUT [/&lt;Acumatica ERP instance name&gt;]/entity/Default/18.200.001/ProjectTask HTTP/1.1
Host: &lt;host name&gt;
Accept: application/json
Content-Type: application/json

{
  "ProjectTaskID" : {"value" : "01"},
  "ProjectID" : {"value" : "TESTPR3"},
  "Status" : {"value" : "Active"},
}

HTTP/1.1 200 OK
Content-Type: application/json
{ ... }
}}}}
#Create a project transaction and invoke the release of the transaction. {{{{POST [/&lt;Acumatica ERP instance name&gt;]/entity/Default/18.200.001/ProjectTransaction/ReleaseTransactions HTTP/1.1
Host: &lt;host name&gt;
Accept: application/json
Content-Type: application/json

{
  "entity" : {
    "Details" : 
    [
      {
        "Project" : {"value" : "TESTPR3"},
        "ProjectTask" : {"value" : "01"},
        "CostCode" : {"value" : "0000"},  
        "AccountGroup" : {"value" : "LABOR"}, 
        "Qty" : {"value" : 10}, 
        "Amount" : {"value" : 10}, 
    },
  ]
}
}

HTTP/1.1 202 Accepted
Location: [/&lt;Acumatica ERP instance name&gt;]/entity/Default/18.200.001/ProjectTransaction/ReleaseTransactions/status/ce6a7728-5f8e-416f-bbe5-617d2725465c
}}}}
#Use the URL from the {{Location}} header to obtain the status of the long-running operation. When the {{GET}} HTTP method with this URL returns ''204 No Content'', the operation is completed. For details on the other response statuses, see [HelpRoot_Dev_Integration\IS__con_REST_Action_Execution|Execution of an Action].{{{{GET [/&lt;Acumatica ERP instance name&gt;]/entity/Default/18.200.001/ProjectTransaction/ReleaseTransactions/status/ce6a7728-5f8e-416f-bbe5-617d2725465c HTTP/1.1
Host: &lt;host name&gt;
Accept: application/json
Content-Type: application/json

HTTP/1.1 204 No Content
}}}}
#Invoke project billing to create a pro forma invoice.{{{{POST [/&lt;Acumatica ERP instance name&gt;]/entity/Default/18.200.001/Project/RunProjectBilling HTTP/1.1
Host: &lt;host name&gt;
Accept: application/json
Content-Type: application/json

{
  "entity" : {
    "ProjectID": {
        "value": "TESTPR3"
    },
  }
}

HTTP/1.1 202 Accepted
Location: [/&lt;Acumatica ERP instance name&gt;]/entity/Default/18.200.001/Project/RunProjectBilling/status/6952c6d1-04be-4330-a26e-c6b855ba332c
}}}}
#Monitor the status of the operation.{{{{GET [/&lt;Acumatica ERP instance name&gt;]/entity/Default/18.200.001/Project/RunProjectBilling/status/6952c6d1-04be-4330-a26e-c6b855ba332c HTTP/1.1
Host: &lt;host name&gt;
Accept: application/json
Content-Type: application/json

HTTP/1.1 204 No Content
}}}}
#Obtain the list of pro forma invoices of the project (which currently contains only one pro forma invoice) by adding <tt>$expand=Invoices</tt> to the endpoint address. For details about parameters, see [HelpRoot_Dev_Integration\IS__con_REST_Parameters|Parameters for Retrieving Records].
#:((({S:Hint}To obtain the list of pro forma invoices of the project with the {{TESTPR3}} project ID, you can also use the {{GET}} request for the <tt>ProFormaInvoice</tt> entity with the <tt>$filter=ProjectID eq ’TESTPR3</tt> parameter.
))){{{{GET [/&lt;Acumatica ERP instance name&gt;]/entity/Default/18.200.001/Project/TESTPR3?$expand=Invoices HTTP/1.1
Host: &lt;host name&gt;
Accept: application/json
Content-Type: application/json

HTTP/1.1 200 OK
Content-Type: application/json
{ ... }
}}}}
#Send the pro forma invoice by email.{{{{POST [/&lt;Acumatica ERP instance name&gt;]/entity/Default/18.200.001/ProFormaInvoice/EmailProFormaInvoice HTTP/1.1
Host: &lt;host name&gt;
Accept: application/json
Content-Type: application/json

{
  "entity" : {
    "RefNbr": {
        "value": "PF00008"
    },
  }
}

HTTP/1.1 202 Accepted
Location: [/&lt;Acumatica ERP instance name&gt;]/entity/Default/18.200.001/ProFormaInvoice/EmailProFormaInvoice/status/a4caa455-0eed-4c11-a5a9-2a8333e53db1
}}}}
#Monitor the status of the operation.{{{{GET [/&lt;Acumatica ERP instance name&gt;]/entity/Default/18.200.001/ProFormaInvoice/EmailProFormaInvoice/status/a4caa455-0eed-4c11-a5a9-2a8333e53db1 HTTP/1.1
Host: &lt;host name&gt;
Accept: application/json
Content-Type: application/json

HTTP/1.1 204 No Content
}}}}

==SOAP API Example==
You can use the code below to create a pro forma invoice and send it by email through the contract-based SOAP API. For details about the API methods and properties, see [HelpRoot_Dev_Integration\IS__IS_CB_API_Reference|Contract-Based SOAP API Reference].<source lang="csharp">using System;
//Add the namespace of the service reference here.

public static void SendProFormaByEmail(DefaultSoapClient soapClient)
{
    //Any project ID that does not exist in the system
    string projectID = "TESTPR";
    //A project template that has mailing settings configured
    string projectTemplateID = "TM-PROFORM"; 
    //An existing customer
    string customer = "ABARTENDE";
    //An existing billing rule for the project
    string billingRule = "FIXEDPRICE";
    //A billing period
    string billingPeriod = "Month";
    //The task ID available in the template
    string projectTaskID = "01";
    //An existing cost code for a project transaction
    string costCode = "0000";
    //An existing account group for the project transaction
    string accountGroup = "LABOR";
    //The quantity for the project transaction
    decimal quantity = 10;
    //The amount of the project transaction
    decimal amount = 10;

    //Create a project from the template and
    //specify the Customer, BillingRule, and BillingPeriod of the project.
    soapClient.Put(new Project
    {
        //Make the system return only the fields specified in this call.
        //Always request the minimum number of fields from the server.
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        ProjectID = new StringValue { Value = projectID, },
        ProjectTemplateID = new StringValue { Value = projectTemplateID, },
        Customer = new StringValue { Value = customer },
        BillingAndAllocationSettings = new ProjectBillingAndAllocationSettings
        {
            BillingRule = new StringValue { Value = billingRule },
            BillingPeriod = new StringValue { Value = billingPeriod },
        },
    });

    //Make the project active.
    soapClient.Put(new Project
    {
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        ProjectID = new StringSearch { Value = projectID },
        Hold = new BooleanValue { Value = false }
    });

    //Specify the NextBillingDate of the project.
    soapClient.Put(new Project
    {
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        ProjectID = new StringSearch { Value = projectID },
        BillingAndAllocationSettings = new ProjectBillingAndAllocationSettings
        {
            NextBillingDate = new DateTimeValue 
            { 
                Value = new DateTime(
                    2018, 08, 16, 0, 0, 0, DateTimeKind.Unspecified)  
            },
        },
    });
            
    //Activate a project task.
    (ProjectTask)soapClient.Put(new ProjectTask
    {
        ProjectTaskID = new StringSearch { Value = projectTaskID },
        ProjectID = new StringSearch { Value = projectID },
        Status = new StringValue { Value = "Active" },
    });

    //Create a project transaction and release the transaction.
    InvokeResult invokeResult = soapClient.Invoke(
        new ProjectTransaction
        {
            ReturnBehavior = ReturnBehavior.OnlySpecified,
            Details = new[]
            {
                new ProjectTransactionDetail
                {
                    ReturnBehavior = ReturnBehavior.OnlySpecified,
                    Project = new StringValue{ Value = projectID, },
                    ProjectTask = new StringValue { Value = projectTaskID, },
                    CostCode = new StringValue { Value = costCode, },
                    AccountGroup = new StringValue { Value = accountGroup, },
                    Qty = new DecimalValue { Value = quantity, },
                    Amount = new DecimalValue { Value = amount, },
                }
            }
        }, 
        new ReleaseTransactions()
    );

    //Monitor the status of the process.
    GetProcessResult(soapClient, invokeResult);

    //Invoke project billing.
    invokeResult = soapClient.Invoke(
        new Project 
        { 
            ProjectID = new StringSearch { Value = projectID } 
        }, 
        new RunProjectBilling()
    );

    //Monitor the status of the process.
    ProcessResult processResult = GetProcessResult(soapClient, invokeResult);

    //Obtain the created pro forma invoice.
    Project newProject = (Project)soapClient.Get(new Project
    {
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        ID = processResult.EntityId,
        Invoices = new ProjectProFormaDetails[]
        {
            new ProjectProFormaDetails
            {
                ReturnBehavior = ReturnBehavior.OnlySpecified,
                ProFormaReferenceNbr = new StringReturn()
            }

        }
    });

    //Send the pro forma invoice by email.
    invokeResult = soapClient.Invoke(
        new ProFormaInvoice
        {
            RefNbr = new StringSearch 
            { 
                 Value = newProject.Invoices[0].ProFormaReferenceNbr.Value 
            }
        }, 
        new EmailProFormaInvoice()
    );

    //Monitor the status of the process.
    GetProcessResult(soapClient, invokeResult);
}

//Long-running operation helper
public static ProcessResult GetProcessResult(
    DefaultSoapClient soapClient, InvokeResult invokeResult)
{
    while (true)
    {
        var processResult = soapClient.GetProcessStatus(invokeResult);
        switch (processResult.Status)
        {
            case ProcessStatus.Aborted:
                throw new SystemException("Process status: " + 
                processResult.Status + "; Error: " + processResult.Message);
            case ProcessStatus.NotExists:
            case ProcessStatus.Completed:
                //Go to normal processing.
                return processResult;
            case ProcessStatus.InProcess:
                //Insert the needed waiting time here.
                if (processResult.Seconds &gt; 30)
                    throw new TimeoutException();
                continue;
            default:
                throw new InvalidOperationException();
        }
    }
}</source>]]></column>
			<column name="PlainText"><![CDATA[Creation of a Pro Forma Invoice Through the contract-based REST and SOAP APIs, external systems can create pro forma                 invoices and send them by email. For details about pro forma invoices, see  Pro Forma Invoices. For a pro forma to be created from the project, the project must have                      Customer ,  BillingRule ,                      BillingPeriod , and  NextBillingDate                  specified, and must have the  Active  status. Because of data validation in the                 project,  NextBillingDate  cannot be specified for a project with                 the  On Hold  status, and you cannot change the customer in a project with the                      Active  status. Therefore, these settings can be specified only in                 multiple API calls, as shown in the code examples below. User Scenario A project manager of the company through an external system needs to create a pro                 forma invoice in  Acumatica ERP and send it to the client by email. Preliminary Steps A  ProFormaInvoice  entity cannot be created by using the                      PUT  HTTP method or the  Put()  SOAP API                 method; it can be created only through the invocation of the                      RunProjectBilling  action of the  Project                  entity. Because email settings are not mapped to any fields of the                      Project  entity, you have to prepare a project template with                 the specified email settings on the   ([~/?ScreenId=PM208000|PM208000]) Project Templates (PM208000) form                 and then use this template for the creation of the project through the API. The                 project template can also contain preconfigured project tasks, as is the case with                 the template used in this example. For details about project templates, see  Templates for Projects and Tasks. Testing of the Examples To test the code below, you configure your client             application and the  Acumatica ERP             instance to be used as follows: Deploy a new  Acumatica ERP instance with the  SalesDemo  dataset. For details on deploying an                     instance, see  To Deploy an Acumatica ERP Instance                     in the Installation Guide. On the   ([~/?ScreenId=CS100000|CS100000]) Enable/Disable Features                     (CS100000) form, enable the  Projects  feature. In the client application, add a service reference to the                          Default/18.200.001  system endpoint. For details on how to add a                     service reference, see  To Configure the Client Application in this                     guide. To sign in to the instance in the client application, use the company name                     (which you specified when you created the instance) and the  PRODWHOLE                      branch. Examples of REST API Requests You can use the following sequence of             examples of HTTP requests to create a pro forma invoice and send it by email through the             contract-based REST API:  In the request examples below,  < Acumatica ERP instance name>  is the name of the  Acumatica ERP             instance (such as  MyInstance ), and  <host name>  is             the name of the host where the instance is located (such as                  my.acumatica.com ).  [/< Acumatica ERP instance name>]  may be omitted if the instance is installed in the root             of the website. Create a project from the project template and specify the                              Customer ,  BillingRule , and                              BillingPeriod  settings of the project.                          PUT [/< Acumatica ERP instance name>]/entity/Default/18.200.001/Project HTTP/1.1
Host: <host name>
Accept: application/json
Content-Type: application/json

{
  "ProjectID" : {"value" : "TESTPR3"},
  "ProjectTemplateID" : {"value" : "TM-PROFORM"},
  "Customer" : {"value" : "ABARTENDE"},
  "BillingAndAllocationSettings" : 
  	{
      "BillingRule" : {"value" : "FIXEDPRICE"},
      "BillingPeriod" : {"value" : "Month"},
    }
}

HTTP/1.1 200 OK
Content-Type: application/json
{ ... } Make the project active.                          PUT [/< Acumatica ERP instance name>]/entity/Default/18.200.001/Project HTTP/1.1
Host: <host name>
Accept: application/json
Content-Type: application/json

{
  "ProjectID" : {"value" : "TESTPR3"},
  "Hold" : {"value" : false}
}

HTTP/1.1 200 OK
Content-Type: application/json
{ ... } Specify  NextBillingDate  for the project.                          PUT [/< Acumatica ERP instance name>]/entity/Default/18.200.001/Project HTTP/1.1
Host: <host name>
Accept: application/json
Content-Type: application/json

{
  "ProjectID" : {"value" : "TESTPR3"},
    "BillingAndAllocationSettings" : 
    {
      "NextBillingDate" : {"value" : "2018-08-16"},
    }
}

HTTP/1.1 200 OK
Content-Type: application/json
{ ... } Activate a project task.                          PUT [/< Acumatica ERP instance name>]/entity/Default/18.200.001/ProjectTask HTTP/1.1
Host: <host name>
Accept: application/json
Content-Type: application/json

{
  "ProjectTaskID" : {"value" : "01"},
  "ProjectID" : {"value" : "TESTPR3"},
  "Status" : {"value" : "Active"},
}

HTTP/1.1 200 OK
Content-Type: application/json
{ ... } Create a project transaction and invoke the release of the transaction.                          POST [/< Acumatica ERP instance name>]/entity/Default/18.200.001/ProjectTransaction/ReleaseTransactions HTTP/1.1
Host: <host name>
Accept: application/json
Content-Type: application/json

{
  "entity" : {
    "Details" : 
    [
      {
        "Project" : {"value" : "TESTPR3"},
        "ProjectTask" : {"value" : "01"},
        "CostCode" : {"value" : "0000"},  
        "AccountGroup" : {"value" : "LABOR"}, 
        "Qty" : {"value" : 10}, 
        "Amount" : {"value" : 10}, 
    },
  ]
}
}

HTTP/1.1 202 Accepted
Location: [/< Acumatica ERP instance name>]/entity/Default/18.200.001/ProjectTransaction/ReleaseTransactions/status/ce6a7728-5f8e-416f-bbe5-617d2725465c Use the URL from the  Location  header to obtain the status                         of the long-running operation. When the  GET  HTTP method                         with this URL returns  204 No Content , the operation is completed. For                         details on the other response statuses, see  Execution of an Action. GET [/< Acumatica ERP instance name>]/entity/Default/18.200.001/ProjectTransaction/ReleaseTransactions/status/ce6a7728-5f8e-416f-bbe5-617d2725465c HTTP/1.1
Host: <host name>
Accept: application/json
Content-Type: application/json

HTTP/1.1 204 No Content Invoke project billing to create a pro forma                         invoice. POST [/< Acumatica ERP instance name>]/entity/Default/18.200.001/Project/RunProjectBilling HTTP/1.1
Host: <host name>
Accept: application/json
Content-Type: application/json

{
  "entity" : {
    "ProjectID": {
        "value": "TESTPR3"
    },
  }
}

HTTP/1.1 202 Accepted
Location: [/< Acumatica ERP instance name>]/entity/Default/18.200.001/Project/RunProjectBilling/status/6952c6d1-04be-4330-a26e-c6b855ba332c Monitor the status of the                         operation. GET [/< Acumatica ERP instance name>]/entity/Default/18.200.001/Project/RunProjectBilling/status/6952c6d1-04be-4330-a26e-c6b855ba332c HTTP/1.1
Host: <host name>
Accept: application/json
Content-Type: application/json

HTTP/1.1 204 No Content Obtain the list of pro forma invoices of the project (which currently                         contains only one pro forma invoice) by adding                              $expand=Invoices  to the endpoint address. For details                         about parameters, see  Parameters for Retrieving Records. To                             obtain the list of pro forma invoices of the project with the                                  TESTPR3  project ID, you can also use the                                  GET  request for the                                  ProFormaInvoice  entity with the                                  $filter=ProjectID eq ’TESTPR3                          parameter. GET [/< Acumatica ERP instance name>]/entity/Default/18.200.001/Project/TESTPR3?$expand=Invoices HTTP/1.1
Host: <host name>
Accept: application/json
Content-Type: application/json

HTTP/1.1 200 OK
Content-Type: application/json
{ ... } Send the pro forma invoice by                         email. POST [/< Acumatica ERP instance name>]/entity/Default/18.200.001/ProFormaInvoice/EmailProFormaInvoice HTTP/1.1
Host: <host name>
Accept: application/json
Content-Type: application/json

{
  "entity" : {
    "RefNbr": {
        "value": "PF00008"
    },
  }
}

HTTP/1.1 202 Accepted
Location: [/< Acumatica ERP instance name>]/entity/Default/18.200.001/ProFormaInvoice/EmailProFormaInvoice/status/a4caa455-0eed-4c11-a5a9-2a8333e53db1 Monitor the status of the                         operation. GET [/< Acumatica ERP instance name>]/entity/Default/18.200.001/ProFormaInvoice/EmailProFormaInvoice/status/a4caa455-0eed-4c11-a5a9-2a8333e53db1 HTTP/1.1
Host: <host name>
Accept: application/json
Content-Type: application/json

HTTP/1.1 204 No Content SOAP API Example You can use the code below to create a pro forma invoice and send it by email through the                 contract-based SOAP API. For details about the API methods and properties, see  Contract-Based SOAP API Reference. using System;
//Add the namespace of the service reference here.

public static void SendProFormaByEmail(DefaultSoapClient soapClient)
{
    //Any project ID that does not exist in the system
    string projectID = "TESTPR";
    //A project template that has mailing settings configured
    string projectTemplateID = "TM-PROFORM"; 
    //An existing customer
    string customer = "ABARTENDE";
    //An existing billing rule for the project
    string billingRule = "FIXEDPRICE";
    //A billing period
    string billingPeriod = "Month";
    //The task ID available in the template
    string projectTaskID = "01";
    //An existing cost code for a project transaction
    string costCode = "0000";
    //An existing account group for the project transaction
    string accountGroup = "LABOR";
    //The quantity for the project transaction
    decimal quantity = 10;
    //The amount of the project transaction
    decimal amount = 10;

    //Create a project from the template and
    //specify the Customer, BillingRule, and BillingPeriod of the project.
    soapClient.Put(new Project
    {
        //Make the system return only the fields specified in this call.
        //Always request the minimum number of fields from the server.
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        ProjectID = new StringValue { Value = projectID, },
        ProjectTemplateID = new StringValue { Value = projectTemplateID, },
        Customer = new StringValue { Value = customer },
        BillingAndAllocationSettings = new ProjectBillingAndAllocationSettings
        {
            BillingRule = new StringValue { Value = billingRule },
            BillingPeriod = new StringValue { Value = billingPeriod },
        },
    });

    //Make the project active.
    soapClient.Put(new Project
    {
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        ProjectID = new StringSearch { Value = projectID },
        Hold = new BooleanValue { Value = false }
    });

    //Specify the NextBillingDate of the project.
    soapClient.Put(new Project
    {
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        ProjectID = new StringSearch { Value = projectID },
        BillingAndAllocationSettings = new ProjectBillingAndAllocationSettings
        {
            NextBillingDate = new DateTimeValue 
            { 
                Value = new DateTime(
                    2018, 08, 16, 0, 0, 0, DateTimeKind.Unspecified)  
            },
        },
    });
            
    //Activate a project task.
    (ProjectTask)soapClient.Put(new ProjectTask
    {
        ProjectTaskID = new StringSearch { Value = projectTaskID },
        ProjectID = new StringSearch { Value = projectID },
        Status = new StringValue { Value = "Active" },
    });

    //Create a project transaction and release the transaction.
    InvokeResult invokeResult = soapClient.Invoke(
        new ProjectTransaction
        {
            ReturnBehavior = ReturnBehavior.OnlySpecified,
            Details = new[]
            {
                new ProjectTransactionDetail
                {
                    ReturnBehavior = ReturnBehavior.OnlySpecified,
                    Project = new StringValue{ Value = projectID, },
                    ProjectTask = new StringValue { Value = projectTaskID, },
                    CostCode = new StringValue { Value = costCode, },
                    AccountGroup = new StringValue { Value = accountGroup, },
                    Qty = new DecimalValue { Value = quantity, },
                    Amount = new DecimalValue { Value = amount, },
                }
            }
        }, 
        new ReleaseTransactions()
    );

    //Monitor the status of the process.
    GetProcessResult(soapClient, invokeResult);

    //Invoke project billing.
    invokeResult = soapClient.Invoke(
        new Project 
        { 
            ProjectID = new StringSearch { Value = projectID } 
        }, 
        new RunProjectBilling()
    );

    //Monitor the status of the process.
    ProcessResult processResult = GetProcessResult(soapClient, invokeResult);

    //Obtain the created pro forma invoice.
    Project newProject = (Project)soapClient.Get(new Project
    {
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        ID = processResult.EntityId,
        Invoices = new ProjectProFormaDetails[]
        {
            new ProjectProFormaDetails
            {
                ReturnBehavior = ReturnBehavior.OnlySpecified,
                ProFormaReferenceNbr = new StringReturn()
            }

        }
    });

    //Send the pro forma invoice by email.
    invokeResult = soapClient.Invoke(
        new ProFormaInvoice
        {
            RefNbr = new StringSearch 
            { 
                 Value = newProject.Invoices[0].ProFormaReferenceNbr.Value 
            }
        }, 
        new EmailProFormaInvoice()
    );

    //Monitor the status of the process.
    GetProcessResult(soapClient, invokeResult);
}

//Long-running operation helper
public static ProcessResult GetProcessResult(
    DefaultSoapClient soapClient, InvokeResult invokeResult)
{
    while (true)
    {
        var processResult = soapClient.GetProcessStatus(invokeResult);
        switch (processResult.Status)
        {
            case ProcessStatus.Aborted:
                throw new SystemException("Process status: " + 
                processResult.Status + "; Error: " + processResult.Message);
            case ProcessStatus.NotExists:
            case ProcessStatus.Completed:
                //Go to normal processing.
                return processResult;
            case ProcessStatus.InProcess:
                //Insert the needed waiting time here.
                if (processResult.Seconds > 30)
                    throw new TimeoutException();
                continue;
            default:
                throw new InvalidOperationException();
        }
    }
} ]]></column>
		</row>
		<row PageID="2c26840b-56b5-4da3-b881-b47757e9b589" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="2c932d52-9ff0-a71c-8a71-4fa7486ad327" RecordSourceID="22377">
			<column name="Content"><![CDATA[
Through the contract-based REST and SOAP APIs, external systems can create, modify, and remove account groups. {br}

The <tt>AccountGroup</tt> entity supports the creation, retrieval, update, and removal of the entity itself; however, you cannot modify the list of accounts of a particular account group by using the <tt>AccountGroup</tt> entity. Instead, you have to use the <tt>AccountGroup</tt> property in the <tt>Account</tt> entity. You can use the <tt>DefaultAccountID</tt> property of the <tt>AccountGroup</tt> entity in order to specify the default account for the group. ((({S:Hint}The removal of the default account from the group does not cause the <tt>DefaultAccountID</tt> property to be updated automatically. If you remove the default account from the group, you have to update the <tt>DefaultAccountID</tt> property.
))){br}{TOC}
==User Scenario==
Through an external system, a project manager of a company needs to add and modify account groups in Acumatica ERP to set up Acumatica ERP for project accounting.
==Testing of the Examples==[anchor|#_47b066fe-48ae-4884-9a90-38a2683d9284]
To test the code below, you configure your client application and the Acumatica ERP instance to be used as follows:[anchor|#_d4e8b0b0-eddf-42a3-950f-7ee565c0f188]
*Deploy a new Acumatica ERP instance with the ''SalesDemo'' dataset. For details on deploying an instance, see [HelpRoot_Install\Installing_ERP_Instance|To Deploy an Acumatica ERP Instance] in the Installation Guide.
*On the [HelpRoot_FormReference\CS_10_00_00|Enable/Disable Features] ([~/?ScreenId=CS100000|CS100000]) form, enable the ''Projects'' feature.
*In the client application, add a service reference to the ''Default/18.200.001'' system endpoint. For details on how to add a service reference, see [HelpRoot_Dev_Integration\IS__how_CB_Configure_Application|To Configure the Client Application] in this guide.
*To sign in to the instance in the client application, use the company name (which you specified when you created the instance) and the ''PRODWHOLE'' branch.

==Examples of REST API Requests==
You can use the following sequence of examples of HTTP requests to create an account group and edit accounts in it through the contract-based REST API: [anchor|#_8afdd47d-8799-436c-b507-22fb61c667e7]((({S:Hint}In the request examples below, {{<Acumatica ERP instance name>}} is the name of the Acumatica ERP instance (such as {{MyInstance}}), and {{<host name>}} is the name of the host where the instance is located (such as {{my.acumatica.com}}). {{[/<Acumatica ERP instance name>]}} may be omitted if the instance is installed in the root of the website.
)))[anchor|#_91b38854-997e-42c0-8fc5-6155fbc5ea20]
#Create an account group.{{{{PUT [/&lt;Acumatica ERP instance name&gt;]/entity/Default/18.200.001/AccountGroup HTTP/1.1
Host: &lt;host name&gt;
Accept: application/json
Content-Type: application/json

{
  "AccountGroupID" : {"value" : "ACCG02"},
  "Description" : {value: "Test Account Group"}
}

HTTP/1.1 200 OK
Content-Type: application/json
{ ... }
}}}}
#Add accounts to the account group.{{{{PUT [/&lt;Acumatica ERP instance name&gt;]/entity/Default/18.200.001/Account HTTP/1.1
Host: &lt;host name&gt;
Accept: application/json
Content-Type: application/json

{
  "AccountCD" : {"value" : "40000"},
  "AccountGroup" : {value: "ACCG02"}
}

HTTP/1.1 200 OK
Content-Type: application/json
{ ... }

PUT [/&lt;Acumatica ERP instance name&gt;]/entity/Default/18.200.001/Account HTTP/1.1
Host: &lt;host name&gt;
Accept: application/json
Content-Type: application/json

{
  "AccountCD" : {"value" : "40010"},
  "AccountGroup" : {value: "ACCG02"}
}

HTTP/1.1 200 OK
Content-Type: application/json
{ ... }
}}}}
#Specify the default account of the account group.{{{{PUT [/&lt;Acumatica ERP instance name&gt;]/entity/Default/18.200.001/AccountGroup HTTP/1.1
Host: &lt;host name&gt;
Accept: application/json
Content-Type: application/json

{
  "DefaultAccountID" : {"value" : "40000"},
  "AccountGroupID" : {value: "ACCG02"}
}

HTTP/1.1 200 OK
Content-Type: application/json
{ ... }
}}}}
#Obtain the list of accounts of the group.{{{{GET [/&lt;Acumatica ERP instance name&gt;]/entity/Default/18.200.001/Account?$filter=AccountGroup%20eq%20'ACCG02'&$select=AccountCD HTTP/1.1
Host: &lt;host name&gt;
Accept: application/json
Content-Type: application/json

HTTP/1.1 200 OK
Content-Type: application/json
{ ... }
}}}}
#Remove an account from the group.{{{{PUT [/&lt;Acumatica ERP instance name&gt;]/entity/Default/18.200.001/Account HTTP/1.1
Host: &lt;host name&gt;
Accept: application/json
Content-Type: application/json

{
  "AccountCD" : {"value" : "40010"},
  "AccountGroup" : {value: null}
}

HTTP/1.1 200 OK
Content-Type: application/json
{ ... }
}}}}

==SOAP API Example==
You can use the sample code below to create an account group and edit accounts in it through the contract-based SOAP API. For details about the API methods and properties, see [HelpRoot_Dev_Integration\IS__IS_CB_API_Reference|Contract-Based SOAP API Reference].<source lang="csharp">using System;
//Add the namespace of the service reference here.

public static void ManageAccountGroups(DefaultSoapClient soapClient)
{
    //Any account group ID that does not exist in the system
    string accountGroupID = "ACCG01";
    //A description of the account group
    string accountGroupDescription = "Test Account Group";
    //The existing accounts to be added to the group
    string account1 = "40000";
    string account2 = "40010";

    //Create an account group.
    soapClient.Put(new AccountGroup
    {
        //Make the system return only the fields specified in this call.
        //Always request the minimum number of fields from the server.
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        AccountGroupID = new StringValue { Value = accountGroupID },
        Description = new StringValue { Value = accountGroupDescription },
    });

    //Add accounts to the account group.
    soapClient.Put(new Account
    {
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        AccountCD = new StringSearch { Value = account1 },
        AccountGroup = new StringValue { Value = accountGroupID },
    });
    soapClient.Put(new Account
    {
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        AccountCD = new StringSearch { Value = account2 },
        AccountGroup = new StringValue { Value = accountGroupID },
    });

    //Specify the default account of the account group.
    soapClient.Put(new AccountGroup
    {
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        AccountGroupID = new StringSearch { Value = accountGroupID },
        DefaultAccountID = new StringValue { Value = account1 },
    });

    //Obtain the list of accounts of the group.
    Entity[] accounts = soapClient.GetList(new Account
    {
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        AccountGroup = new StringSearch { Value = accountGroupID },
        AccountCD = new StringReturn()
    });

    //Remove an account from the group.
    soapClient.Put(new Account
    {
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        AccountCD = new StringSearch { Value = account2 },
        AccountGroup = new StringValue(),
    });
}</source>]]></column>
			<column name="PlainText"><![CDATA[Management of Account Groups Through the contract-based REST and SOAP APIs, external systems can create, modify,                 and remove account groups.  The  AccountGroup  entity supports the creation, retrieval, update,                 and removal of the entity itself; however, you cannot modify the list of accounts of                 a particular account group by using the  AccountGroup  entity.                 Instead, you have to use the  AccountGroup  property in the                      Account  entity. You can use the                      DefaultAccountID  property of the                      AccountGroup  entity in order to specify the default account                 for the group.  The removal of the default account from the group does not                     cause the  DefaultAccountID  property to be updated                     automatically. If you remove the default account from the group, you have to                     update the  DefaultAccountID  property. User Scenario Through an external system, a project manager of a company needs to add and modify                 account groups in  Acumatica ERP to set up  Acumatica ERP for project accounting. Testing of the Examples To test the code below, you configure your client             application and the  Acumatica ERP             instance to be used as follows: Deploy a new  Acumatica ERP instance with the  SalesDemo  dataset. For details on deploying an                     instance, see  To Deploy an Acumatica ERP Instance                     in the Installation Guide. On the   ([~/?ScreenId=CS100000|CS100000]) Enable/Disable Features                     (CS100000) form, enable the  Projects  feature. In the client application, add a service reference to the                          Default/18.200.001  system endpoint. For details on how to add a                     service reference, see  To Configure the Client Application in this                     guide. To sign in to the instance in the client application, use the company name                     (which you specified when you created the instance) and the  PRODWHOLE                      branch. Examples of REST API Requests You can use the following sequence of examples of HTTP requests to create an account                 group and edit accounts in it through the contract-based REST API:  In the request examples below,  < Acumatica ERP instance name>  is the name of the  Acumatica ERP             instance (such as  MyInstance ), and  <host name>  is             the name of the host where the instance is located (such as                  my.acumatica.com ).  [/< Acumatica ERP instance name>]  may be omitted if the instance is installed in the root             of the website. Create an account                         group. PUT [/< Acumatica ERP instance name>]/entity/Default/18.200.001/AccountGroup HTTP/1.1
Host: <host name>
Accept: application/json
Content-Type: application/json

{
  "AccountGroupID" : {"value" : "ACCG02"},
  "Description" : {value: "Test Account Group"}
}

HTTP/1.1 200 OK
Content-Type: application/json
{ ... } Add accounts to the account                         group. PUT [/< Acumatica ERP instance name>]/entity/Default/18.200.001/Account HTTP/1.1
Host: <host name>
Accept: application/json
Content-Type: application/json

{
  "AccountCD" : {"value" : "40000"},
  "AccountGroup" : {value: "ACCG02"}
}

HTTP/1.1 200 OK
Content-Type: application/json
{ ... }

PUT [/< Acumatica ERP instance name>]/entity/Default/18.200.001/Account HTTP/1.1
Host: <host name>
Accept: application/json
Content-Type: application/json

{
  "AccountCD" : {"value" : "40010"},
  "AccountGroup" : {value: "ACCG02"}
}

HTTP/1.1 200 OK
Content-Type: application/json
{ ... } Specify the default account of the account                         group. PUT [/< Acumatica ERP instance name>]/entity/Default/18.200.001/AccountGroup HTTP/1.1
Host: <host name>
Accept: application/json
Content-Type: application/json

{
  "DefaultAccountID" : {"value" : "40000"},
  "AccountGroupID" : {value: "ACCG02"}
}

HTTP/1.1 200 OK
Content-Type: application/json
{ ... } Obtain the list of accounts of the                         group. GET [/< Acumatica ERP instance name>]/entity/Default/18.200.001/Account?$filter=AccountGroup%20eq%20'ACCG02'&$select=AccountCD HTTP/1.1
Host: <host name>
Accept: application/json
Content-Type: application/json

HTTP/1.1 200 OK
Content-Type: application/json
{ ... } Remove an account from the                         group. PUT [/< Acumatica ERP instance name>]/entity/Default/18.200.001/Account HTTP/1.1
Host: <host name>
Accept: application/json
Content-Type: application/json

{
  "AccountCD" : {"value" : "40010"},
  "AccountGroup" : {value: null}
}

HTTP/1.1 200 OK
Content-Type: application/json
{ ... } SOAP API Example You can use the sample code below to create an account group and edit accounts in it through                 the contract-based SOAP API. For details about the API methods and properties, see                      Contract-Based SOAP API Reference. using System;
//Add the namespace of the service reference here.

public static void ManageAccountGroups(DefaultSoapClient soapClient)
{
    //Any account group ID that does not exist in the system
    string accountGroupID = "ACCG01";
    //A description of the account group
    string accountGroupDescription = "Test Account Group";
    //The existing accounts to be added to the group
    string account1 = "40000";
    string account2 = "40010";

    //Create an account group.
    soapClient.Put(new AccountGroup
    {
        //Make the system return only the fields specified in this call.
        //Always request the minimum number of fields from the server.
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        AccountGroupID = new StringValue { Value = accountGroupID },
        Description = new StringValue { Value = accountGroupDescription },
    });

    //Add accounts to the account group.
    soapClient.Put(new Account
    {
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        AccountCD = new StringSearch { Value = account1 },
        AccountGroup = new StringValue { Value = accountGroupID },
    });
    soapClient.Put(new Account
    {
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        AccountCD = new StringSearch { Value = account2 },
        AccountGroup = new StringValue { Value = accountGroupID },
    });

    //Specify the default account of the account group.
    soapClient.Put(new AccountGroup
    {
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        AccountGroupID = new StringSearch { Value = accountGroupID },
        DefaultAccountID = new StringValue { Value = account1 },
    });

    //Obtain the list of accounts of the group.
    Entity[] accounts = soapClient.GetList(new Account
    {
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        AccountGroup = new StringSearch { Value = accountGroupID },
        AccountCD = new StringReturn()
    });

    //Remove an account from the group.
    soapClient.Put(new Account
    {
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        AccountCD = new StringSearch { Value = account2 },
        AccountGroup = new StringValue(),
    });
} ]]></column>
		</row>
		<row PageID="5e9d5d74-2b0b-4b7e-809e-88d7d4a9dd10" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="bd2090d7-82f5-b6a5-736f-1f7a708385ab" RecordSourceID="22377">
			<column name="Content"><![CDATA[
Through the contract-based REST and SOAP APIs, external systems can run project billing for one project as well as for multiple projects. This example shows how to run project billing for multiple projects in Acumatica ERP from an external system. To run project billing for one project, you can use the <tt>RunProjectBilling</tt> action of the <tt>Project</tt> entity. (You can find an example of the call of <tt>RunProjectBilling</tt> in [HelpRoot_Dev_Integration\IS__con_Send_ProForma_by_Email|Creation of a Pro Forma Invoice].) {br}

You use the <tt>ProjectBillingProcess</tt> or <tt>ProjectBillingProcessAll</tt> action of the <tt>ProjectBilling</tt> entity to bill multiple projects at once. If you use the <tt>ProjectBillingProcess</tt> action, you select the projects entities to be billed by specifying the value of the <tt>Selected</tt> field of <tt>ProjectBillingDetails</tt>, as shown in the code example below. If you use the <tt>ProjectBillingProcessAll</tt> action, you can filter the projects to be billed by using the <tt>Customer</tt>, <tt>CustomerClass</tt>, <tt>ProjectTemplate</tt>, and <tt>StatementCycleThere</tt> fields of the <tt>ProjectBilling</tt> entity or bill all projects. You can use the <tt>InvoiceDate</tt> and <tt>PostPeriod</tt> properties to specify the invoice date and fiscal period data for the billing operation. {br}{TOC}
==User Scenario==
Once a week, through an external system, a project manager of a company needs to run project billing for selected projects in Acumatica ERP.
==Preliminary Step==
You need to create the projects that will be billed either through the UI or through the contract-based API.
==Testing of the Examples==[anchor|#_ab8e2a9e-e93d-4044-bbf1-e7d0532c9ea0]
To test the code below, you configure your client application and the Acumatica ERP instance to be used as follows:[anchor|#_84723dc8-4f0b-4cbb-b4c4-97dd1bf6cb24]
*Deploy a new Acumatica ERP instance with the ''SalesDemo'' dataset. For details on deploying an instance, see [HelpRoot_Install\Installing_ERP_Instance|To Deploy an Acumatica ERP Instance] in the Installation Guide.
*On the [HelpRoot_FormReference\CS_10_00_00|Enable/Disable Features] ([~/?ScreenId=CS100000|CS100000]) form, enable the ''Projects'' feature.
*In the client application, add a service reference to the ''Default/18.200.001'' system endpoint. For details on how to add a service reference, see [HelpRoot_Dev_Integration\IS__how_CB_Configure_Application|To Configure the Client Application] in this guide.
*To sign in to the instance in the client application, use the company name (which you specified when you created the instance) and the ''PRODWHOLE'' branch.

==Examples of REST API Requests==
You can use the following request examples to bill multiple projects through the contract-based REST API:[anchor|#_8f6beb78-d02a-440f-8f26-189036368517]((({S:Hint}In the request examples below, {{<Acumatica ERP instance name>}} is the name of the Acumatica ERP instance (such as {{MyInstance}}), and {{<host name>}} is the name of the host where the instance is located (such as {{my.acumatica.com}}). {{[/<Acumatica ERP instance name>]}} may be omitted if the instance is installed in the root of the website.
)))[anchor|#_0dcecb5a-60be-4688-99c5-9db337406c26]
#Retrieve the list of projects that can be billed by using the {{PUT}} HTTP method because the <tt>ProjectBilling</tt> entity retrieves data from an inquiry. For details about retrieving data from an inquiry, see [HelpRoot_Dev_Integration\IS__con_REST_Retrieve_from_Inquiry|Retrieval of Data from an Inquiry Form]{{{{PUT [/&lt;Acumatica ERP instance name&gt;]/entity/Default/18.200.001/ProjectBilling?$expand=Details HTTP/1.1
Host: &lt;host name&gt;
Accept: application/json
Content-Type: application/json

{
  "InvoiceDate" : {"value" : "2018-08-17T00:00:00.000"}
}

HTTP/1.1 200 OK
Content-Type: application/json
{ ... }
}}}}
#Use the returned object to select the projects for billing and invoke billing. For details on the IDs of the entities, see [HelpRoot_Dev_Integration\IS__con_REST_Get_Record_by_ID|Retrieval of a Record by ID].{{{{POST [/&lt;Acumatica ERP instance name&gt;]/entity/Default/18.200.001/ProjectBilling/ProjectBillingProcess HTTP/1.1
Host: &lt;host name&gt;
Accept: application/json
Content-Type: application/json

{
  "entity" : 
  {
    "id": "c6958a73-4440-468f-80cf-83f4c63d1e09",
    "Details": [
        {
            "id": "2f0b6ef9-706b-44ef-accf-f96346102ff2",
            "Selected": {
                "value": false
            },
        },
        {
            "id": "83de0aec-f6f3-4bb1-8c83-93137bedd9ae",
            "Selected": {
                "value": false
            },
        },
        {
            "id": "5798f0a5-c8e5-4075-b844-a7782d99516e",
            "Selected": {
                "value": true
            },
        },
        {
            "id": "6eccc365-5aa8-4cc9-8eca-378f7d7bf205",
            "Selected": {
                "value": false
            },
        }
    ],
}
}

HTTP/1.1 202 Accepted
Location: [/&lt;Acumatica ERP instance name&gt;]/entity/Default/18.200.001/ProjectBilling/ProjectBillingProcess/status/ce6a7728-5f8e-416f-bbe5-617d2725465c
}}}}
#Use the URL from the {{Location}} header to obtain the status of the long-running operation. When the {{GET}} HTTP method with this URL returns ''204 No Content'', the operation is completed.{{{{GET [/&lt;Acumatica ERP instance name&gt;]/entity/Default/18.200.001/ProjectBilling/ProjectBillingProcess/status/ce6a7728-5f8e-416f-bbe5-617d2725465c HTTP/1.1
Host: &lt;host name&gt;
Accept: application/json
Content-Type: application/json

HTTP/1.1 204 No Content
}}}}
#Invoke project billing for all projects available for billing.{{{{POST [/&lt;Acumatica ERP instance name&gt;]/entity/Default/18.200.001/ProjectBilling/ProjectBillingProcessAll HTTP/1.1
Host: &lt;host name&gt;
Accept: application/json
Content-Type: application/json

{
  "entity" : 
  {
  }
}

HTTP/1.1 202 Accepted
Location: [/&lt;Acumatica ERP instance name&gt;]/entity/Default/18.200.001/ProjectBilling/ProjectBillingProcessAll/status/19ec8f98-6204-4758-b464-6e62d30b2973
}}}}
#Use the URL from the {{Location}} header to obtain the status of the long-running operation. When the {{GET}} HTTP method with this URL returns ''204 No Content'', the operation is completed.{{{{GET [/&lt;Acumatica ERP instance name&gt;]/entity/Default/18.200.001/ProjectBilling/ProjectBillingProcessAll/status/19ec8f98-6204-4758-b464-6e62d30b2973 HTTP/1.1
Host: &lt;host name&gt;
Accept: application/json
Content-Type: application/json

HTTP/1.1 204 No Content
}}}}

==SOAP API Example==
You can use the code below to bill multiple projects through the contract-based SOAP API. For details about the API methods and properties, see [HelpRoot_Dev_Integration\IS__IS_CB_API_Reference|Contract-Based SOAP API Reference].{br}

<source lang="csharp">using System;
//Add the namespace of the service reference here.

public static void RunMultipleProjectBilling(DefaultSoapClient soapClient)
{
    //Projects to be billed
    string projectId1 = "PROJ1";
    string projectId2 = "PROJ2";

    DateTime billingDate = DateTime.Today;

    //Retrieve the list of projects that can be billed.
    //Use Put() because the data is retrieved from an inquiry.
    ProjectBilling unbilledProject = (ProjectBilling)soapClient.Put(
        new ProjectBilling
        {
            //Make the system return only the fields specified in this call.
            //Always request the minimum number of fields from the server.
            ReturnBehavior = ReturnBehavior.OnlySpecified,
            InvoiceDate = new DateTimeValue { Value = billingDate },
            Details = new ProjectBillingDetails[]
            {
                new ProjectBillingDetails
                {
                    ReturnBehavior = ReturnBehavior.OnlySpecified,
                    ProjectID = new StringReturn(),
                    Selected = new BooleanReturn()
                }
            }
        });

    //Select the projects for billing.
    unbilledProject.Details.Single(p =&gt; p.ProjectID.Value == projectId1).
        Selected = new BooleanValue { Value = false };
    unbilledProject.Details.Single(p =&gt; p.ProjectID.Value == projectId2).
        Selected = new BooleanValue { Value = true };

    //Invoke project billing for the selected projects.
    InvokeResult invokeResult = soapClient.Invoke(
        unbilledProject, 
        new ProjectBillingProcess()
    );

    //Monitor the status of the process.
    GetProcessResult(soapClient, invokeResult);

    //Invoke project billing for all projects.
    invokeResult = soapClient.Invoke(
        new ProjectBilling(), 
        new ProjectBillingProcessAll()
    );

    //Monitor the status of the process.
    GetProcessResult(soapClient, invokeResult);
}

//Long-running operation helper
public static ProcessResult GetProcessResult(
    DefaultSoapClient soapClient, InvokeResult invokeResult)
{
    while (true)
    {
        var processResult = soapClient.GetProcessStatus(invokeResult);
        switch (processResult.Status)
        {
            case ProcessStatus.Aborted:
                throw new SystemException("Process status: " + 
                processResult.Status + "; Error: " + processResult.Message);
            case ProcessStatus.NotExists:
            case ProcessStatus.Completed:
                //Go to normal processing.
                return processResult;
            case ProcessStatus.InProcess:
                //Insert the needed waiting time here.
                if (processResult.Seconds &gt; 30)
                    throw new TimeoutException();
                continue;
            default:
                throw new InvalidOperationException();
        }
    }
}</source>]]></column>
			<column name="PlainText"><![CDATA[Running of Project Billing Through the contract-based REST and SOAP APIs, external systems can run project billing for                 one project as well as for multiple projects. This example shows how to run project                 billing for multiple projects in  Acumatica ERP from an external system. To run project billing for one project, you can use the                      RunProjectBilling  action of the  Project                  entity. (You can find an example of the call of  RunProjectBilling                  in  Creation of a Pro Forma Invoice.)  You use the  ProjectBillingProcess  or                      ProjectBillingProcessAll  action of the                      ProjectBilling  entity to bill multiple projects at once. If                 you use the  ProjectBillingProcess  action, you select the projects                 entities to be billed by specifying the value of the  Selected                  field of  ProjectBillingDetails , as shown in the code example                 below. If you use the  ProjectBillingProcessAll  action, you can                 filter the projects to be billed by using the  Customer ,                      CustomerClass ,  ProjectTemplate , and                      StatementCycleThere  fields of the                      ProjectBilling  entity or bill all projects. You can use the                      InvoiceDate  and  PostPeriod  properties to                 specify the invoice date and fiscal period data for the billing operation.  User Scenario Once a week, through an external system, a project manager of a company needs to run                 project billing for selected projects in  Acumatica ERP. Preliminary Step You need to create the projects that will be billed either through the UI or through                 the contract-based API. Testing of the Examples To test the code below, you configure your client             application and the  Acumatica ERP             instance to be used as follows: Deploy a new  Acumatica ERP instance with the  SalesDemo  dataset. For details on deploying an                     instance, see  To Deploy an Acumatica ERP Instance                     in the Installation Guide. On the   ([~/?ScreenId=CS100000|CS100000]) Enable/Disable Features                     (CS100000) form, enable the  Projects  feature. In the client application, add a service reference to the                          Default/18.200.001  system endpoint. For details on how to add a                     service reference, see  To Configure the Client Application in this                     guide. To sign in to the instance in the client application, use the company name                     (which you specified when you created the instance) and the  PRODWHOLE                      branch. Examples of REST API Requests You can use the following request examples to bill multiple projects through the                 contract-based REST API: In the request examples below,  < Acumatica ERP instance name>  is the name of the  Acumatica ERP             instance (such as  MyInstance ), and  <host name>  is             the name of the host where the instance is located (such as                  my.acumatica.com ).  [/< Acumatica ERP instance name>]  may be omitted if the instance is installed in the root             of the website. Retrieve the list of projects that can be billed by using the                              PUT  HTTP method because the                              ProjectBilling  entity retrieves data from an inquiry.                         For details about retrieving data from an inquiry, see  Retrieval of Data from an Inquiry FormPUT [/< Acumatica ERP instance name>]/entity/Default/18.200.001/ProjectBilling?$expand=Details HTTP/1.1
Host: <host name>
Accept: application/json
Content-Type: application/json

{
  "InvoiceDate" : {"value" : "2018-08-17T00:00:00.000"}
}

HTTP/1.1 200 OK
Content-Type: application/json
{ ... } Use the returned object to select the projects for billing and invoke                         billing. For details on the IDs of the entities, see  Retrieval of a Record by ID. POST [/< Acumatica ERP instance name>]/entity/Default/18.200.001/ProjectBilling/ProjectBillingProcess HTTP/1.1
Host: <host name>
Accept: application/json
Content-Type: application/json

{
  "entity" : 
  {
    "id": "c6958a73-4440-468f-80cf-83f4c63d1e09",
    "Details": [
        {
            "id": "2f0b6ef9-706b-44ef-accf-f96346102ff2",
            "Selected": {
                "value": false
            },
        },
        {
            "id": "83de0aec-f6f3-4bb1-8c83-93137bedd9ae",
            "Selected": {
                "value": false
            },
        },
        {
            "id": "5798f0a5-c8e5-4075-b844-a7782d99516e",
            "Selected": {
                "value": true
            },
        },
        {
            "id": "6eccc365-5aa8-4cc9-8eca-378f7d7bf205",
            "Selected": {
                "value": false
            },
        }
    ],
}
}

HTTP/1.1 202 Accepted
Location: [/< Acumatica ERP instance name>]/entity/Default/18.200.001/ProjectBilling/ProjectBillingProcess/status/ce6a7728-5f8e-416f-bbe5-617d2725465c Use the URL from the  Location  header to obtain the status                         of the long-running operation. When the  GET  HTTP method                         with this URL returns  204 No Content , the operation is                         completed. GET [/< Acumatica ERP instance name>]/entity/Default/18.200.001/ProjectBilling/ProjectBillingProcess/status/ce6a7728-5f8e-416f-bbe5-617d2725465c HTTP/1.1
Host: <host name>
Accept: application/json
Content-Type: application/json

HTTP/1.1 204 No Content Invoke project billing for all projects available for                         billing. POST [/< Acumatica ERP instance name>]/entity/Default/18.200.001/ProjectBilling/ProjectBillingProcessAll HTTP/1.1
Host: <host name>
Accept: application/json
Content-Type: application/json

{
  "entity" : 
  {
  }
}

HTTP/1.1 202 Accepted
Location: [/< Acumatica ERP instance name>]/entity/Default/18.200.001/ProjectBilling/ProjectBillingProcessAll/status/19ec8f98-6204-4758-b464-6e62d30b2973 Use the URL from the  Location  header to obtain the status                         of the long-running operation. When the  GET  HTTP method                         with this URL returns  204 No Content , the operation is                         completed. GET [/< Acumatica ERP instance name>]/entity/Default/18.200.001/ProjectBilling/ProjectBillingProcessAll/status/19ec8f98-6204-4758-b464-6e62d30b2973 HTTP/1.1
Host: <host name>
Accept: application/json
Content-Type: application/json

HTTP/1.1 204 No Content SOAP API Example You can use the code below to bill multiple projects through the contract-based SOAP API. For                 details about the API methods and properties, see  Contract-Based SOAP API Reference. using System;
//Add the namespace of the service reference here.

public static void RunMultipleProjectBilling(DefaultSoapClient soapClient)
{
    //Projects to be billed
    string projectId1 = "PROJ1";
    string projectId2 = "PROJ2";

    DateTime billingDate = DateTime.Today;

    //Retrieve the list of projects that can be billed.
    //Use Put() because the data is retrieved from an inquiry.
    ProjectBilling unbilledProject = (ProjectBilling)soapClient.Put(
        new ProjectBilling
        {
            //Make the system return only the fields specified in this call . 
            //Always request the minimum number of fields from the server . 
            ReturnBehavior = ReturnBehavior.OnlySpecified,
            InvoiceDate = new DateTimeValue { Value = billingDate },
            Details = new ProjectBillingDetails[]
            {
                new ProjectBillingDetails
                {
                    ReturnBehavior = ReturnBehavior.OnlySpecified,
                    ProjectID = new StringReturn(),
                    Selected = new BooleanReturn()
                }
            }
        });

    //Select the projects for billing.
    unbilledProject.Details.Single(p => p.ProjectID.Value == projectId1).
        Selected = new BooleanValue { Value = false };
    unbilledProject.Details.Single(p => p.ProjectID.Value == projectId2).
        Selected = new BooleanValue { Value = true };

    //Invoke project billing for the selected projects.
    InvokeResult invokeResult = soapClient.Invoke(
        unbilledProject, 
        new ProjectBillingProcess()
    );

    //Monitor the status of the process.
    GetProcessResult(soapClient, invokeResult);

    //Invoke project billing for all projects.
    invokeResult = soapClient.Invoke(
        new ProjectBilling(), 
        new ProjectBillingProcessAll()
    );

    //Monitor the status of the process.
    GetProcessResult(soapClient, invokeResult);
}

//Long-running operation helper
public static ProcessResult GetProcessResult(
    DefaultSoapClient soapClient, InvokeResult invokeResult)
{
    while (true)
    {
        var processResult = soapClient.GetProcessStatus(invokeResult);
        switch (processResult.Status)
        {
            case ProcessStatus.Aborted:
                throw new SystemException("Process status: " + 
                processResult.Status + "; Error: " + processResult.Message);
            case ProcessStatus.NotExists:
            case ProcessStatus.Completed:
                //Go to normal processing.
                return processResult;
            case ProcessStatus.InProcess:
                //Insert the needed waiting time here.
                if (processResult.Seconds > 30)
                    throw new TimeoutException();
                continue;
            default:
                throw new InvalidOperationException();
        }
    }
} ]]></column>
		</row>
		<row PageID="682496e3-6498-4855-b33d-a40dbf501b82" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="c276b0df-5ab0-56a0-2a7e-9cc0361a06f9" RecordSourceID="22377">
			<column name="Content"><![CDATA[
Through the contract-based REST and SOAP APIs, external systems can import to Acumatica ERP general ledger transactions with project codes that do not produce project transactions. {br}

To create a general ledger transaction with a project code that does not produce a project transaction, you set the <tt>IsNonPM</tt> field of the <tt>JournalTransaction</tt> entity to {{true}}. {br}{TOC}
==User Scenario==
A construction company builds an integrated solution of Acumatica ERP with an external payroll system. The external payroll system calculates payoffs, including benefits, additions, deductions, and taxes. Once a week, the construction company needs to import general ledger transactions with project information from this payroll system to Acumatica ERP, where they are verified and released. The construction company doesn&rsquo;t want to update the project subledger in Acumatica ERP with the information from general ledger transactions (for example, if the standard labor costs have already been posted to the project subledger from time entries).
==Testing of the Examples==[anchor|#_962f4ba4-a684-4db8-b558-077a39f5a0ca]
To test the code below, you configure your client application and the Acumatica ERP instance to be used as follows:[anchor|#_4da5302e-d7d3-4976-9a2f-ddbfb1fc4a86]
*Deploy a new Acumatica ERP instance with the ''SalesDemo'' dataset. For details on deploying an instance, see [HelpRoot_Install\Installing_ERP_Instance|To Deploy an Acumatica ERP Instance] in the Installation Guide.
*On the [HelpRoot_FormReference\CS_10_00_00|Enable/Disable Features] ([~/?ScreenId=CS100000|CS100000]) form, enable the ''Projects'' feature.
*In the client application, add a service reference to the ''Default/18.200.001'' system endpoint. For details on how to add a service reference, see [HelpRoot_Dev_Integration\IS__how_CB_Configure_Application|To Configure the Client Application] in this guide.
*To sign in to the instance in the client application, use the company name (which you specified when you created the instance) and the ''PRODWHOLE'' branch.

==Examples of REST API Requests==
You can use the following request example to create a general ledger transaction through the contract-based REST API.[anchor|#_4f0e6288-9f82-498f-a18d-b9e8708c432f]((({S:Hint}In the request example below, {{<Acumatica ERP instance name>}} is the name of the Acumatica ERP instance (such as {{MyInstance}}), and {{<host name>}} is the name of the host where the instance is located (such as {{my.acumatica.com}}). {{[/<Acumatica ERP instance name>]}} may be omitted if the instance is installed in the root of the website.
))){{{{PUT [/&lt;Acumatica ERP instance name&gt;]/entity/Default/18.200.001/JournalTransaction HTTP/1.1
Host: &lt;host name&gt;
Accept: application/json
Content-Type: application/json

{
  "Module" : {"value" : "GL"},
  "TransactionDate" : {"value" : "2018-08-15T00:00:00"},
  "Description" : {"value" : "Transaction description"},
  "BranchID" : {"value" : "PRODWHOLE"},
  "Details" : [
  	{
  		"BranchID" : {"value" : "PRODWHOLE"},
  		"Account" : {"value" : "10200"}, 
  		"Subaccount" : {"value" : "000-000"}, 
  		"CostCode" : {"value" : "0000"}, 
  		"IsNonPM" : {"value" : true}, 
  	}
  ]
}

HTTP/1.1 200 OK
Content-Type: application/json
{ ... }
}}}}
==SOAP API Example==
You can use the code below to create a general ledger transaction through the contract-based SOAP API. For details about the API methods and properties, see [HelpRoot_Dev_Integration\IS__IS_CB_API_Reference|Contract-Based SOAP API Reference].<source lang="csharp">using System;
//Add the namespace of the service reference here.

public static void CreateGLTransaction(DefaultSoapClient soapClient)
{
    string costCodeId = "0000";
    string module = "GL";
    string branchID = "PRODWHOLE";
    string transactionDescr = "Transaction description";
    string account = "10200";
    string subaccount = "000-000";

    JournalTransaction transaction = 
       (JournalTransaction)soapClient.Put(new JournalTransaction
    {
        //Make the system return only the fields specified in this call.
        //Always request the minimum number of fields from the server.
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        BatchNbr = new StringReturn(),
        Module = new StringValue { Value = module, },
        TransactionDate = new DateTimeValue 
        { 
             Value = new DateTime(
                 2018, 08, 15, 0, 0, 0, DateTimeKind.Unspecified) , 
        },
        Description = new StringValue { Value = transactionDescr, },
        BranchID = new StringValue { Value = branchID, },
        Details = new[]
        {
            new JournalTransactionDetail
            {
                BranchID = new StringValue { Value = branchID, },
                Account = new StringValue { Value = account, },
                Subaccount = new StringValue { Value = subaccount, },
                CostCode = new StringValue { Value = costCodeId, },
                IsNonPM = new BooleanValue {Value = true}
            },
        },
    });
}</source>]]></column>
			<column name="PlainText"><![CDATA[Creation of a General Ledger Transaction with a Project Code That Does Not Produce a Project         Transaction Through the contract-based REST and SOAP APIs, external systems can import to  Acumatica ERP general ledger transactions with project codes that do not produce project                 transactions.  To create a general ledger transaction with a project code that does not produce a                 project transaction, you set the  IsNonPM  field of the                      JournalTransaction  entity to  true .  User Scenario A construction company builds an integrated solution of  Acumatica ERP with an external payroll system. The external payroll system calculates payoffs,                 including benefits, additions, deductions, and taxes. Once a week, the construction                 company needs to import general ledger transactions with project information from                 this payroll system to  Acumatica ERP, where they are verified and released. The construction company doesn't want to                 update the project subledger in  Acumatica ERP with the information from general ledger transactions (for example, if the                 standard labor costs have already been posted to the project subledger from time                 entries). Testing of the Examples To test the code below, you configure your client             application and the  Acumatica ERP             instance to be used as follows: Deploy a new  Acumatica ERP instance with the  SalesDemo  dataset. For details on deploying an                     instance, see  To Deploy an Acumatica ERP Instance                     in the Installation Guide. On the   ([~/?ScreenId=CS100000|CS100000]) Enable/Disable Features                     (CS100000) form, enable the  Projects  feature. In the client application, add a service reference to the                          Default/18.200.001  system endpoint. For details on how to add a                     service reference, see  To Configure the Client Application in this                     guide. To sign in to the instance in the client application, use the company name                     (which you specified when you created the instance) and the  PRODWHOLE                      branch. Examples of REST API Requests You can use the following request example to create a general ledger transaction                 through the contract-based REST API. In the request example below,  < Acumatica ERP instance name>  is the name of the  Acumatica ERP             instance (such as  MyInstance ), and  <host name>  is             the name of the host where the instance is located (such as                  my.acumatica.com ).  [/< Acumatica ERP instance name>]  may be omitted if the instance is installed in the root             of the website. PUT [/< Acumatica ERP instance name>]/entity/Default/18.200.001/JournalTransaction HTTP/1.1
Host: <host name>
Accept: application/json
Content-Type: application/json

{
  "Module" : {"value" : "GL"},
  "TransactionDate" : {"value" : "2018-08-15T00:00:00"},
  "Description" : {"value" : "Transaction description"},
  "BranchID" : {"value" : "PRODWHOLE"},
  "Details" : [
  	{
  		"BranchID" : {"value" : "PRODWHOLE"},
  		"Account" : {"value" : "10200"}, 
  		"Subaccount" : {"value" : "000-000"}, 
  		"CostCode" : {"value" : "0000"}, 
  		"IsNonPM" : {"value" : true}, 
  	}
  ]
}

HTTP/1.1 200 OK
Content-Type: application/json
{ ... } SOAP API Example You can use the code below to create a general ledger transaction through the contract-based                 SOAP API. For details about the API methods and properties, see  Contract-Based SOAP API Reference. using System;
//Add the namespace of the service reference here.

public static void CreateGLTransaction(DefaultSoapClient soapClient)
{
    string costCodeId = "0000";
    string module = "GL";
    string branchID = "PRODWHOLE";
    string transactionDescr = "Transaction description";
    string account = "10200";
    string subaccount = "000-000";

    JournalTransaction transaction = 
       (JournalTransaction)soapClient.Put(new JournalTransaction
    {
        //Make the system return only the fields specified in this call.
        //Always request the minimum number of fields from the server.
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        BatchNbr = new StringReturn(),
        Module = new StringValue { Value = module, },
        TransactionDate = new DateTimeValue 
        { 
             Value = new DateTime(
                 2018, 08, 15, 0, 0, 0, DateTimeKind.Unspecified) , 
        },
        Description = new StringValue { Value = transactionDescr, },
        BranchID = new StringValue { Value = branchID, },
        Details = new[]
        {
            new JournalTransactionDetail
            {
                BranchID = new StringValue { Value = branchID, },
                Account = new StringValue { Value = account, },
                Subaccount = new StringValue { Value = subaccount, },
                CostCode = new StringValue { Value = costCodeId, },
                IsNonPM = new BooleanValue {Value = true}
            },
        },
    });
} ]]></column>
		</row>
		<row PageID="847b54c3-116e-47b1-89af-14a19cc5855a" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="53fcade9-2e57-0107-baa0-a2941718fb5c" RecordSourceID="22377">
			<column name="Content"><![CDATA[
Through the contract-based REST and SOAP APIs, the time spent on the tasks of projects can be imported to Acumatica ERP from an external system. {br}

The <tt>TimeSpent</tt>, <tt>BillableTime</tt>, and <tt>BillableOvertime</tt> fields of the <tt>TimeEntry</tt> entity have the <tt>StringValue</tt> type. These fields accept values in the following format: {{"hh:mm"}}, where {{hh}} is the amount of hours, and {{mm}} is the amount of minutes. {br}

The <tt>TimeEntryID</tt> field has the <tt>GuidValue</tt> type; however, its value is a sequentially generated string that looks like a GUID. Therefore, the global uniqueness of the values is not guaranteed.
==User Scenario==
Employees enter the time spent on the project tasks into an external payroll system. Once a week, the time entries are imported to Acumatica ERP from the payroll system.
==Testing of the Examples==[anchor|#_69f25f88-9419-4f70-bffb-916fffe4d80a]
To test the code below, you configure your client application and the Acumatica ERP instance to be used as follows:[anchor|#_86519183-c059-499f-833c-d597a481f4c2]
*Deploy a new Acumatica ERP instance with the ''SalesDemo'' dataset. For details on deploying an instance, see [HelpRoot_Install\Installing_ERP_Instance|To Deploy an Acumatica ERP Instance] in the Installation Guide.
*On the [HelpRoot_FormReference\CS_10_00_00|Enable/Disable Features] ([~/?ScreenId=CS100000|CS100000]) form, enable the ''Projects'' feature.
*In the client application, add a service reference to the ''Default/18.200.001'' system endpoint. For details on how to add a service reference, see [HelpRoot_Dev_Integration\IS__how_CB_Configure_Application|To Configure the Client Application] in this guide.
*To sign in to the instance in the client application, use the company name (which you specified when you created the instance) and the ''PRODWHOLE'' branch.

==Examples of REST API Requests==
You can use the following request example for time entry through the contract-based REST API.[anchor|#_b39d61ae-5b4a-404b-bb13-a0c9fff14bb0]((({S:Hint}In the request example below, {{<Acumatica ERP instance name>}} is the name of the Acumatica ERP instance (such as {{MyInstance}}), and {{<host name>}} is the name of the host where the instance is located (such as {{my.acumatica.com}}). {{[/<Acumatica ERP instance name>]}} may be omitted if the instance is installed in the root of the website.
))){{{{PUT [/&lt;Acumatica ERP instance name&gt;]/entity/Default/18.200.001/TimeEntry HTTP/1.1
Host: &lt;host name&gt;
Accept: application/json
Content-Type: application/json

{
  "Summary" : {"value" : "Time entry summary"},
  "Date" : {"value" : "2018-08-17T05:50:43.233" },
  "Time" : {"value" : "2018-08-17T05:50:43.233 },
  "Employee" : {"value" : "EP00000002" },
  "ProjectID" : {"value" : "TESTPROJ" },
  "ProjectTaskID" : {"value" : "01" },
  "CostCode" : {"value" : "0000" },
  "EarningType" : {"value" : "RG" },
  "TimeSpent" : {"value" : "01:30" },
  "BillableTime" : {"value" : "00:30" },
}

HTTP/1.1 200 OK
Content-Type: application/json
{ ... }
}}}}
==SOAP API Example==
You can use the code below for time entry through the contract-based SOAP API. For details about the API methods and properties, see [HelpRoot_Dev_Integration\IS__IS_CB_API_Reference|Contract-Based SOAP API Reference].<source lang="csharp">using System;
//Add the namespace of the service reference here

public static void CreateTimeEntry(DefaultSoapClient soapClient)
{
    //IDs of an existing project and task
    string projectId = "TESTPROJ";
    string taskId = "01";
    //Time entry values
    string summary = "Time entry summary";
    string employee = "EP00000002";
    string costCode = "0000";
    string earningType = "RG";
    string timeSpent = "01:30";
    string billableTime = "00:30";

    soapClient.Put(new TimeEntry
    {
        //Make the system return only the fields specified in this call.
        //Always request the minimum number of fields from the server.
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        Summary = new StringValue { Value = summary },
        Date = new DateTimeValue { Value = DateTime.Now },
        Time = new DateTimeValue { Value = DateTime.Now, },
        Employee = new StringValue { Value = employee, },
        ProjectID = new StringValue { Value = projectId, },
        ProjectTaskID = new StringValue { Value = taskId, },
        CostCode = new StringValue { Value = costCode, },
        EarningType = new StringValue { Value = earningType, },
        TimeSpent = new StringValue { Value = timeSpent, },
        BillableTime = new StringValue { Value = billableTime, },
    });
}</source>]]></column>
			<column name="PlainText"><![CDATA[Time Entry Through the contract-based REST and SOAP APIs, the time spent on the tasks of projects can be         imported to  Acumatica ERP from an external system.  The  TimeSpent ,  BillableTime , and            BillableOvertime  fields of the  TimeEntry  entity have         the  StringValue  type. These fields accept values in the following format:            "hh:mm" , where  hh  is the amount of hours, and            mm  is the amount of minutes.  The  TimeEntryID  field has the  GuidValue  type; however,         its value is a sequentially generated string that looks like a GUID. Therefore, the global         uniqueness of the values is not guaranteed. User Scenario Employees enter the time spent on the project tasks into an external payroll system. Once a         week, the time entries are imported to  Acumatica ERP from the payroll system. Testing of the Examples To test the code below, you configure your client             application and the  Acumatica ERP             instance to be used as follows: Deploy a new  Acumatica ERP instance with the  SalesDemo  dataset. For details on deploying an                     instance, see  To Deploy an Acumatica ERP Instance                     in the Installation Guide. On the   ([~/?ScreenId=CS100000|CS100000]) Enable/Disable Features                     (CS100000) form, enable the  Projects  feature. In the client application, add a service reference to the                          Default/18.200.001  system endpoint. For details on how to add a                     service reference, see  To Configure the Client Application in this                     guide. To sign in to the instance in the client application, use the company name                     (which you specified when you created the instance) and the  PRODWHOLE                      branch. Examples of REST API Requests You can use the following request example for time entry through the contract-based REST           API. In the request example below,  < Acumatica ERP instance name>  is the name of the  Acumatica ERP             instance (such as  MyInstance ), and  <host name>  is             the name of the host where the instance is located (such as                  my.acumatica.com ).  [/< Acumatica ERP instance name>]  may be omitted if the instance is installed in the root             of the website. PUT [/< Acumatica ERP instance name>]/entity/Default/18.200.001/TimeEntry HTTP/1.1
Host: <host name>
Accept: application/json
Content-Type: application/json

{
  "Summary" : {"value" : "Time entry summary"},
  "Date" : {"value" : "2018-08-17T05:50:43.233" },
  "Time" : {"value" : "2018-08-17T05:50:43.233 },
  "Employee" : {"value" : "EP00000002" },
  "ProjectID" : {"value" : "TESTPROJ" },
  "ProjectTaskID" : {"value" : "01" },
  "CostCode" : {"value" : "0000" },
  "EarningType" : {"value" : "RG" },
  "TimeSpent" : {"value" : "01:30" },
  "BillableTime" : {"value" : "00:30" },
}

HTTP/1.1 200 OK
Content-Type: application/json
{ ... } SOAP API Example You can use the code below for time entry through the contract-based SOAP API. For details         about the API methods and properties, see  Contract-Based SOAP API Reference. using System;
//Add the namespace of the service reference here

public static void CreateTimeEntry(DefaultSoapClient soapClient)
{
    //IDs of an existing project and task
    string projectId = "TESTPROJ";
    string taskId = "01";
    //Time entry values
    string summary = "Time entry summary";
    string employee = "EP00000002";
    string costCode = "0000";
    string earningType = "RG";
    string timeSpent = "01:30";
    string billableTime = "00:30";

    soapClient.Put(new TimeEntry
    {
        //Make the system return only the fields specified in this call.
        //Always request the minimum number of fields from the server.
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        Summary = new StringValue { Value = summary },
        Date = new DateTimeValue { Value = DateTime.Now },
        Time = new DateTimeValue { Value = DateTime.Now, },
        Employee = new StringValue { Value = employee, },
        ProjectID = new StringValue { Value = projectId, },
        ProjectTaskID = new StringValue { Value = taskId, },
        CostCode = new StringValue { Value = costCode, },
        EarningType = new StringValue { Value = earningType, },
        TimeSpent = new StringValue { Value = timeSpent, },
        BillableTime = new StringValue { Value = billableTime, },
    });
} ]]></column>
		</row>
		<row PageID="dcaaa0ae-425d-45a0-b011-f658f7353ba8" Language="en-US" PageRevisionID="1" PlainText="Integration of  Acumatica ERP     with POS systems (SOAP API Examples) A point-of-sale (POS) system is a system where the customer pays for the items or services     that he or she wants to buy. The POS system can be operated by a cashier or can be a     self-service terminal where customers perform all operations by themselves. Examples of the integration of  Acumatica ERP     with POS systems include the following: Entry of a Direct Sales InvoiceEntry of a Direct Sales Invoice Along with a ReturnEntry of a Credit Memo with Positive and Negative LinesEntry of a Direct Sales Invoice in a Non-Default CurrencyEntry of a Direct Sales Invoice for a Shipped Order and ReturnEntry of a Direct Sales Invoice for an Unshipped Sales OrderEntry of a Direct Sales Invoice for a Partially Shipped Sales OrderEntry of a Credit Memo for an Unshipped Sales Order" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="c4f429d4-dfd9-396b-df41-a7f9fb70e035" RecordSourceID="22377">
			<column name="Content"><![CDATA[
A point-of-sale (POS) system is a system where the customer pays for the items or services that he or she wants to buy. The POS system can be operated by a cashier or can be a self-service terminal where customers perform all operations by themselves.{br}

Examples of the integration of Acumatica ERP with POS systems include the following:[anchor|#_3c88b30e-7ad9-48de-be6d-014f6d5d4caa]
*[HelpRoot_Dev_Integration\IS__con_Entering_Direct_Sales_Invoice|Entry of a Direct Sales Invoice]
*[HelpRoot_Dev_Integration\IS__con_Return_of_Direct_Sales_Along_with_Sale|Entry of a Direct Sales Invoice Along with a Return]
*[HelpRoot_Dev_Integration\IS__con_Entering_Credit_Memo|Entry of a Credit Memo with Positive and Negative Lines]
*[HelpRoot_Dev_Integration\IS__con_Entering_Direct_Sales_in_Non-Customer_Currency|Entry of a Direct Sales Invoice in a Non-Default Currency]
*[HelpRoot_Dev_Integration\IS__con_Entering_Direct_Sale_with_Shipped_Order_and_Return|Entry of a Direct Sales Invoice for a Shipped Order and Return]
*[HelpRoot_Dev_Integration\IS__con_Enter_of_Direct_Sales_with_Unshipped_Sales_Order|Entry of a Direct Sales Invoice for an Unshipped Sales Order]
*[HelpRoot_Dev_Integration\IS__con_Enter_Direct_Sales_Invoice_with_Partially_Shipped_Order|Entry of a Direct Sales Invoice for a Partially Shipped Sales Order]
*[HelpRoot_Dev_Integration\IS__con_Enter_Credit_Memo_with_Not_Shipped_Order|Entry of a Credit Memo for an Unshipped Sales Order]
]]></column>
		</row>
		<row PageID="2fc2a9a6-eb76-4f38-b4b7-355cc8cde23f" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="349619f7-c357-25d6-11b8-156ac20cbcce" RecordSourceID="22377">
			<column name="Content"><![CDATA[
A point-of-sale (POS) system can create and process direct sales invoices—that is, invoices for which neither a sales order nor a shipment has been created. The POS system creates a direct sales invoice and a payment, applies this payment to the invoice, and releases the invoice.
==User Scenario==
A customer comes to the store, picks up a number of items (including a motherboard, which is a serialized item), and receives a consulting service from a store consultant. The customer would like to buy the items and pay for the service. In the POS system, one invoice is created for this operation.
==Code Example==
You can use the code below to create a payment and a sales invoice, which includes lines for serialized stock items, not-serialized stock items, and non-stock items. [anchor|#_eb5e268b-d557-4aec-956b-f50b324f5809]{br}

To test this code example, configure your client application and an Acumatica ERP instance as follows:[anchor|#_7fcd8de8-0448-4989-85f2-3bdbdb90e77c]
*Deploy a new Acumatica ERP instance with the ''SalesDemo'' dataset inserted. For details on deploying an instance, see [HelpRoot_Install\Installing_ERP_Instance|To Deploy an Acumatica ERP Instance] in the Installation Guide.
*On the [HelpRoot_FormReference\CS_10_00_00|Enable/Disable Features] ([~/?ScreenId=CS100000|CS100000]) form, enable the ''Advanced SO Invoices'' feature.
*In the client application, add a service reference to the ''POS/17.200.01'' endpoint, which is an extension of the ''Default/17.200.001'' endpoint. For details on how to add a service reference, see [HelpRoot_Dev_Integration\IS__how_CB_Configure_Application|To Configure the Client Application] in this guide.
*To sign in to the instance in the client application, use the company name (which you specified when you created the instance) and the ''HQ'' branch.
<source lang="csharp">using System;
using System.Linq;
using System.IO;
using System.Threading;
using System.Collections.Generic;
//Add the namespace of the service reference here

public static void EnterDirectSalesInvoice(DefaultSoapClient soapClient)
{
    //Input data
    //The customer
    const string CustomerABARTENDE = "ABARTENDE";
    //The customer's tax zone
    const string TaxZoneCANADABC = "CANADABC";
    //The sold stock items
    const string InventoryAACOMPUT01 = "AACOMPUT01";
    const string InventoryAALEGO500 = "AALEGO500";
    //The sold non-stock items
    const string InventoryADMCHARGE = "ADMCHARGE";
    const string InventoryCASELABOR = "CASELABOR";
    //The sold serialized stock item
    const string InventoryAAMACHINE1 = "AAMACHINE1";
    //The warehouse, which is the same for all items in this example
    const string WarehouseWHOLESALE = "WHOLESALE";
    //The location related to InventoryAACOMPUT01, InventoryAALEGO500,
    //and InventoryAAMACHINE1
    const string LocationR1S1 = "R1S1";
    //The UOM related to InventoryCASELABOR
    const string UOMMINUTE = "MINUTE";
    //The payment amount
    const decimal PaymentAmountDisc = 31539.05m;
    //The billing address
    const string AddressLine1 = "Fillmore Str";
    const string City = "San Francisco";
    const string State = "CA";
    const string SerialNumberAAMACHINE1 = "SRF000007";

    //Specify the tax zone for the customer
    soapClient.Put(new Customer
    {
        CustomerID = new StringSearch { Value = CustomerABARTENDE },
        TaxZone = new StringValue { Value = TaxZoneCANADABC },
        ReturnBehavior = ReturnBehavior.OnlySpecified
    });

    //Create a payment for the customer
    Payment payment = (Payment)soapClient.Put(new Payment
    {
        Type = new StringValue { Value = "Payment" },
        CustomerID = new StringValue { Value = CustomerABARTENDE },
        PaymentAmount = new DecimalValue { Value = PaymentAmountDisc },
        ReferenceNbr = new StringReturn(),
        ReturnBehavior = ReturnBehavior.OnlySpecified
    });

    //Create a sales invoice
    SalesInvoice invoice = (SalesInvoice)soapClient.Put(new SalesInvoice
    {
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        Type = new StringValue { Value = "Invoice" },
        CustomerID = new StringValue { Value = CustomerABARTENDE },
        //Specify details of the sales invoice
        Details = new SalesInvoiceDetail[]
        {
            //a sold stock item
            new SalesInvoiceDetail()
            {
                ReturnBehavior = ReturnBehavior.OnlySpecified,
                InventoryID = new StringValue {Value = InventoryAACOMPUT01},
                WarehouseID = new StringValue {Value = WarehouseWHOLESALE},
                Location = new StringValue {Value = LocationR1S1},
                Qty = new DecimalValue {Value = 5}
            },
            //a sold stock item
            new SalesInvoiceDetail()
            {
                ReturnBehavior = ReturnBehavior.OnlySpecified,
                InventoryID = new StringValue {Value = InventoryAALEGO500},
                WarehouseID = new StringValue {Value = WarehouseWHOLESALE},
                Location = new StringValue {Value = LocationR1S1},
                Qty = new DecimalValue {Value = 4},
                UnitPrice = new DecimalValue {Value = 100}
            },
            //a sold non-stock item
            new SalesInvoiceDetail()
            {
                ReturnBehavior = ReturnBehavior.OnlySpecified,
                InventoryID = new StringValue {Value = InventoryADMCHARGE},
                Qty = new DecimalValue {Value = 3},
                UnitPrice = new DecimalValue {Value = 100}
            },
            //a sold non-stock item
            new SalesInvoiceDetail()
            {
                ReturnBehavior = ReturnBehavior.OnlySpecified,
                InventoryID = new StringValue {Value = InventoryCASELABOR},
                WarehouseID = new StringValue {Value = WarehouseWHOLESALE},
                Qty = new DecimalValue {Value = 2},
                UOM = new StringValue {Value = UOMMINUTE},
                UnitPrice = new DecimalValue {Value = 20}
            },
            //a sold serialized stock item
            new SalesInvoiceDetail()
            {
                ReturnBehavior = ReturnBehavior.OnlySpecified,
                InventoryID = new StringValue {Value = InventoryAAMACHINE1},
                WarehouseID = new StringValue {Value = WarehouseWHOLESALE},
                Location = new StringValue {Value = LocationR1S1},
                Qty = new DecimalValue {Value = 1},
                LotSerialNbr = new StringValue {Value = SerialNumberAAMACHINE1 }
            }
        },
        //Override the billing address of the invoice
        BillingSettings = new BillToSettings
        {
            BillToAddressOverride = new BooleanValue { Value = true },
            BillToAddress = new Address
            {
                AddressLine1 = new StringValue { Value = AddressLine1 },
                City = new StringValue { Value = City },
                State = new StringValue { Value = State }
            },
            ReturnBehavior = ReturnBehavior.All
        },
        //Specify additional data to be retrieved
        ApplicationsInvoice = new SalesInvoiceApplicationInvoice[]
        {
            new SalesInvoiceApplicationInvoice
            {
                ReturnBehavior = ReturnBehavior.All
            }
        },
        FinancialDetails = new SalesInvoiceFinancialDetails
        {
            ReturnBehavior = ReturnBehavior.OnlySpecified,
            CustomerTaxZone = new StringReturn()
        }
    });

    //Among the applications, select the payment created in this example 
    //and specify the Amount Paid value
    SalesInvoiceApplicationInvoice application = invoice.ApplicationsInvoice
        .Where(applicationPayment =&gt; 
        applicationPayment.AdjustingDocReferenceNbr.Value == 
        payment.ReferenceNbr.Value).Single();
    application.AmountPaid.Value = PaymentAmountDisc;

    //Release the invoice.
    //(The Invoke method updates the invoice data (the AmountPaid value) first
    //and then releases the invoice.)
    InvokeResult invokeResult = 
        soapClient.Invoke(invoice, new ReleaseSalesInvoice());
    //Monitor the status of the release operation.
    //(The GetProcessResult function is defined below.)
    ProcessResult processResult = GetProcessResult(soapClient,invokeResult);

    //Obtain the released invoice with the needed information
    invoice = (SalesInvoice)soapClient.Get(new SalesInvoice
    {
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        ID = processResult.EntityId,
        Type = new StringReturn(),
        ReferenceNbr = new StringReturn(),
        Status = new StringReturn(),
        FinancialDetails = new SalesInvoiceFinancialDetails
        {
            ReturnBehavior = ReturnBehavior.OnlySpecified,
            BatchNbr = new StringReturn(),    
        },
        TaxDetails = new SalesInvoiceTaxDetail[]
        {
            new SalesInvoiceTaxDetail {ReturnBehavior = ReturnBehavior.All }    
        },
        ApplicationsInvoice = new SalesInvoiceApplicationInvoice[]
        {
            new SalesInvoiceApplicationInvoice 
            {
                ReturnBehavior = ReturnBehavior.All 
            }
        },
        Details = new SalesInvoiceDetail[]
        {
            new SalesInvoiceDetail
            {
                ReturnBehavior = ReturnBehavior.OnlySpecified,
                InventoryDocType = new StringReturn(),
                InventoryRefNbr = new StringReturn()
            }
        }
    });
}

//Long-running operation helper
public static ProcessResult GetProcessResult(
    DefaultSoapClient soapClient, InvokeResult invokeResult)
{
    while (true)
    {
        var processResult = soapClient.GetProcessStatus(invokeResult);
        switch (processResult.Status)
        {
            case ProcessStatus.Aborted:
                throw new SystemException("Process status: " + 
                processResult.Status + "; Error: " + processResult.Message);
            case ProcessStatus.NotExists:
            case ProcessStatus.Completed:
                //Go to normal processing
                return processResult;
            case ProcessStatus.InProcess:
                //Insert the needed waiting time here
                if (processResult.Seconds &gt; 30)
                    throw new TimeoutException();
                continue;
            default:
                throw new InvalidOperationException();
        }
    }
}</source>]]></column>
			<column name="PlainText"><![CDATA[Entry of a Direct Sales Invoice A point-of-sale (POS) system can create and process direct sales invoices—that is,                 invoices for which neither a sales order nor a shipment has been created. The POS                 system creates a direct sales invoice and a payment, applies this payment to the                 invoice, and releases the invoice. User Scenario A customer comes to the store, picks up a number of items (including a motherboard, which is a                 serialized item), and receives a consulting service from a store consultant. The                 customer would like to buy the items and pay for the service. In the POS system, one                 invoice is created for this operation. Code Example You can use the code below to create a payment and a sales invoice, which includes lines for                 serialized stock items, not-serialized stock items, and non-stock items.  To test this code example, configure your client             application and an  Acumatica ERP             instance as follows: Deploy a new  Acumatica ERP instance with the  SalesDemo  dataset inserted. For details on deploying                     an instance, see  To Deploy an Acumatica ERP Instance in the Installation Guide. On the   ([~/?ScreenId=CS100000|CS100000]) Enable/Disable Features                     (CS100000) form, enable the  Advanced SO Invoices  feature. In the client application, add a service reference to the  POS/17.200.01                      endpoint, which is an extension of the  Default/17.200.001  endpoint. For                     details on how to add a service reference, see  To Configure the Client Application in this                     guide. To sign in to the instance in the client application, use the company name                     (which you specified when you created the instance) and the  HQ                      branch. using System;
using System.Linq;
using System.IO;
using System.Threading;
using System.Collections.Generic;
//Add the namespace of the service reference here

public static void EnterDirectSalesInvoice(DefaultSoapClient soapClient)
{
    //Input data
    //The customer
    const string CustomerABARTENDE = "ABARTENDE";
    //The customer's tax zone
    const string TaxZoneCANADABC = "CANADABC";
    //The sold stock items
    const string InventoryAACOMPUT01 = "AACOMPUT01";
    const string InventoryAALEGO500 = "AALEGO500";
    //The sold non-stock items
    const string InventoryADMCHARGE = "ADMCHARGE";
    const string InventoryCASELABOR = "CASELABOR";
    //The sold serialized stock item
    const string InventoryAAMACHINE1 = "AAMACHINE1";
    //The warehouse, which is the same for all items in this example
    const string WarehouseWHOLESALE = "WHOLESALE";
    //The location related to InventoryAACOMPUT01, InventoryAALEGO500,
    //and InventoryAAMACHINE1
    const string LocationR1S1 = "R1S1";
    //The UOM related to InventoryCASELABOR
    const string UOMMINUTE = "MINUTE";
    //The payment amount
    const decimal PaymentAmountDisc = 31539.05m;
    //The billing address
    const string AddressLine1 = "Fillmore Str";
    const string City = "San Francisco";
    const string State = "CA";
    const string SerialNumberAAMACHINE1 = "SRF000007";

    //Specify the tax zone for the customer
    soapClient.Put(new Customer
    {
        CustomerID = new StringSearch { Value = CustomerABARTENDE },
        TaxZone = new StringValue { Value = TaxZoneCANADABC },
        ReturnBehavior = ReturnBehavior.OnlySpecified
    });

    //Create a payment for the customer
    Payment payment = (Payment)soapClient.Put(new Payment
    {
        Type = new StringValue { Value = "Payment" },
        CustomerID = new StringValue { Value = CustomerABARTENDE },
        PaymentAmount = new DecimalValue { Value = PaymentAmountDisc },
        ReferenceNbr = new StringReturn(),
        ReturnBehavior = ReturnBehavior.OnlySpecified
    });

    //Create a sales invoice
    SalesInvoice invoice = (SalesInvoice)soapClient.Put(new SalesInvoice
    {
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        Type = new StringValue { Value = "Invoice" },
        CustomerID = new StringValue { Value = CustomerABARTENDE },
        //Specify details of the sales invoice
        Details = new SalesInvoiceDetail[]
        {
            //a sold stock item
            new SalesInvoiceDetail()
            {
                ReturnBehavior = ReturnBehavior.OnlySpecified,
                InventoryID = new StringValue {Value = InventoryAACOMPUT01},
                WarehouseID = new StringValue {Value = WarehouseWHOLESALE},
                Location = new StringValue {Value = LocationR1S1},
                Qty = new DecimalValue {Value = 5}
            },
            //a sold stock item
            new SalesInvoiceDetail()
            {
                ReturnBehavior = ReturnBehavior.OnlySpecified,
                InventoryID = new StringValue {Value = InventoryAALEGO500},
                WarehouseID = new StringValue {Value = WarehouseWHOLESALE},
                Location = new StringValue {Value = LocationR1S1},
                Qty = new DecimalValue {Value = 4},
                UnitPrice = new DecimalValue {Value = 100}
            },
            //a sold non-stock item
            new SalesInvoiceDetail()
            {
                ReturnBehavior = ReturnBehavior.OnlySpecified,
                InventoryID = new StringValue {Value = InventoryADMCHARGE},
                Qty = new DecimalValue {Value = 3},
                UnitPrice = new DecimalValue {Value = 100}
            },
            //a sold non-stock item
            new SalesInvoiceDetail()
            {
                ReturnBehavior = ReturnBehavior.OnlySpecified,
                InventoryID = new StringValue {Value = InventoryCASELABOR},
                WarehouseID = new StringValue {Value = WarehouseWHOLESALE},
                Qty = new DecimalValue {Value = 2},
                UOM = new StringValue {Value = UOMMINUTE},
                UnitPrice = new DecimalValue {Value = 20}
            },
            //a sold serialized stock item
            new SalesInvoiceDetail()
            {
                ReturnBehavior = ReturnBehavior.OnlySpecified,
                InventoryID = new StringValue {Value = InventoryAAMACHINE1},
                WarehouseID = new StringValue {Value = WarehouseWHOLESALE},
                Location = new StringValue {Value = LocationR1S1},
                Qty = new DecimalValue {Value = 1},
                LotSerialNbr = new StringValue {Value = SerialNumberAAMACHINE1 }
            }
        },
        //Override the billing address of the invoice
        BillingSettings = new BillToSettings
        {
            BillToAddressOverride = new BooleanValue { Value = true },
            BillToAddress = new Address
            {
                AddressLine1 = new StringValue { Value = AddressLine1 },
                City = new StringValue { Value = City },
                State = new StringValue { Value = State }
            },
            ReturnBehavior = ReturnBehavior.All
        },
        //Specify additional data to be retrieved
        ApplicationsInvoice = new SalesInvoiceApplicationInvoice[]
        {
            new SalesInvoiceApplicationInvoice
            {
                ReturnBehavior = ReturnBehavior.All
            }
        },
        FinancialDetails = new SalesInvoiceFinancialDetails
        {
            ReturnBehavior = ReturnBehavior.OnlySpecified,
            CustomerTaxZone = new StringReturn()
        }
    });

    //Among the applications, select the payment created in this example 
    //and specify the Amount Paid value
    SalesInvoiceApplicationInvoice application = invoice.ApplicationsInvoice
        .Where(applicationPayment => 
        applicationPayment.AdjustingDocReferenceNbr.Value == 
        payment.ReferenceNbr.Value).Single();
    application.AmountPaid.Value = PaymentAmountDisc;

    //Release the invoice.
    //(The Invoke method updates the invoice data (the AmountPaid value) first
    //and then releases the invoice.)
    InvokeResult invokeResult = 
        soapClient.Invoke(invoice, new ReleaseSalesInvoice());
    //Monitor the status of the release operation.
    //(The GetProcessResult function is defined below.)
    ProcessResult processResult = GetProcessResult(soapClient,invokeResult);

    //Obtain the released invoice with the needed information
    invoice = (SalesInvoice)soapClient.Get(new SalesInvoice
    {
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        ID = processResult.EntityId,
        Type = new StringReturn(),
        ReferenceNbr = new StringReturn(),
        Status = new StringReturn(),
        FinancialDetails = new SalesInvoiceFinancialDetails
        {
            ReturnBehavior = ReturnBehavior.OnlySpecified,
            BatchNbr = new StringReturn(),    
        },
        TaxDetails = new SalesInvoiceTaxDetail[]
        {
            new SalesInvoiceTaxDetail {ReturnBehavior = ReturnBehavior.All }    
        },
        ApplicationsInvoice = new SalesInvoiceApplicationInvoice[]
        {
            new SalesInvoiceApplicationInvoice 
            {
                ReturnBehavior = ReturnBehavior.All 
            }
        },
        Details = new SalesInvoiceDetail[]
        {
            new SalesInvoiceDetail
            {
                ReturnBehavior = ReturnBehavior.OnlySpecified,
                InventoryDocType = new StringReturn(),
                InventoryRefNbr = new StringReturn()
            }
        }
    });
}

//Long-running operation helper
public static ProcessResult GetProcessResult(
    DefaultSoapClient soapClient, InvokeResult invokeResult)
{
    while (true)
    {
        var processResult = soapClient.GetProcessStatus(invokeResult);
        switch (processResult.Status)
        {
            case ProcessStatus.Aborted:
                throw new SystemException("Process status: " + 
                processResult.Status + "; Error: " + processResult.Message);
            case ProcessStatus.NotExists:
            case ProcessStatus.Completed:
                //Go to normal processing
                return processResult;
            case ProcessStatus.InProcess:
                //Insert the needed waiting time here
                if (processResult.Seconds > 30)
                    throw new TimeoutException();
                continue;
            default:
                throw new InvalidOperationException();
        }
    }
} ]]></column>
		</row>
		<row PageID="825462e2-ae51-4105-94f3-975f88811977" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="2eadebd2-29a3-77c1-43e5-1d03317e580a" RecordSourceID="22377">
			<column name="Content"><![CDATA[
A point-of-sale (POS) system can create and process direct sales invoices (that is, invoices for which neither a sales order nor a shipment has been created) and include in these invoices lines for a return of previously sold items. The POS system creates a direct sales invoice and releases the invoice.[anchor|#_968b2fcd-575f-4606-875f-00deaabeb7b6]((({S:Hint}For simplicity, this example does not include the creation of the payment or the application of the payment to the invoice. You can find an example showing how to create and apply a payment in [HelpRoot_Dev_Integration\IS__con_Entering_Direct_Sales_Invoice|Entry of a Direct Sales Invoice].
)))
==User Scenario==A customer comes to the store and picks up a motherboard (which is a serialized item) and a patch cord from store shelves. The customer would like to buy these items and to return the previously purchased computer mouse. In a POS system, one invoice is created for the whole operation. The customer pays the difference between the sale and the return.
==Code Example==
You can use the code below to create a sales invoice that includes lines for serialized stock items, not-serialized stock items, and return lines for previously sold items. [anchor|#_3f65b57c-970b-4596-b0d6-a59e9369847d]{br}

To test this code example, configure your client application and an Acumatica ERP instance as follows:[anchor|#_7b112e34-93f7-4d6c-81af-6408821c1740]
*Deploy a new Acumatica ERP instance with the ''SalesDemo'' dataset inserted. For details on deploying an instance, see [HelpRoot_Install\Installing_ERP_Instance|To Deploy an Acumatica ERP Instance] in the Installation Guide.
*On the [HelpRoot_FormReference\CS_10_00_00|Enable/Disable Features] ([~/?ScreenId=CS100000|CS100000]) form, enable the ''Advanced SO Invoices'' feature.
*In the client application, add a service reference to the ''POS/17.200.01'' endpoint, which is an extension of the ''Default/17.200.001'' endpoint. For details on how to add a service reference, see [HelpRoot_Dev_Integration\IS__how_CB_Configure_Application|To Configure the Client Application] in this guide.
*To sign in to the instance in the client application, use the company name (which you specified when you created the instance) and the ''HQ'' branch.
{br}

((({S:Hint}You can use the data of the direct sales invoice created in [HelpRoot_Dev_Integration\IS__con_Entering_Direct_Sales_Invoice|Entry of a Direct Sales Invoice] for the return lines for previously sold items.
)))<source lang="csharp">using System;
using System.Linq;
using System.IO;
using System.Threading;
using System.Collections.Generic;
//Add the namespace of the service reference here

public static void EnterReturnAndDirectSalesInvoice(DefaultSoapClient soapClient)
{
    //Input data
    //The customer
    const string CustomerABARTENDE = "ABARTENDE";
    //The customer's tax zone
    const string TaxZoneCANADAAB = "CANADAAB";
    //The sold serialized stock item
    const string InventoryAAPOWERAID = "AAPOWERAID";
    //The serial number of InventoryAAPOWERAID
    const string LotSerialNbrLREX0 = "LREX0";
    //The warehouse related to InventoryAAPOWERAID
    const string WarehouseRETAIL = "RETAIL";
    //The location related to InventoryAAPOWERAID
    const string LocationSTORAGE = "STORAGE";
    //The sold non-stock item
    const string InventoryACCOMODATE = "ACCOMODATE";
    //The reference number of the invoice whose line items are returned 
    const string CreatedSOInvoiceReferenceNbr = "AR005519";
    //The number of the returned line in the invoice
    //(in this example, the number of the line for InventoryAAMACHINE1)
    const int CreatedSOInvoiceLineNbr = 5;
    //The returned serialized stock item
    const string InventoryAAMACHINE1 = "AAMACHINE1";
    //The warehouse related to InventoryAAMACHINE1
    const string WarehouseWHOLESALE = "WHOLESALE";
    //The location related to InventoryAAMACHINE1
    const string LocationR1S1 = "R1S1";
    //The returned non-stock item
    const string InventoryADMCHARGE = "ADMCHARGE";

    //Create a sales invoice
    var invoice = (SalesInvoice)soapClient.Put(new SalesInvoice
    {
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        Type = new StringValue { Value = "Invoice" },
        CustomerID = new StringValue { Value = CustomerABARTENDE },
        //Specify the customer's tax zone
        FinancialDetails = new SalesInvoiceFinancialDetails
        {
            ReturnBehavior = ReturnBehavior.OnlySpecified,
            CustomerTaxZone = new StringValue { Value = TaxZoneCANADAAB }
        },
        //Specify the details of the sales invoice
        Details = new SalesInvoiceDetail[]
        {
            //a sold serialized stock item
	     new SalesInvoiceDetail()
            {
                ReturnBehavior = ReturnBehavior.OnlySpecified,
                InventoryID = new StringValue {Value = InventoryAAPOWERAID},
                WarehouseID = new StringValue {Value = WarehouseRETAIL},
                Location = new StringValue {Value = LocationSTORAGE},
                LotSerialNbr = new StringValue {Value = LotSerialNbrLREX0},
                Qty = new DecimalValue {Value = 100}
            },
            //a sold non-stock item
	     new SalesInvoiceDetail()
            {
                ReturnBehavior = ReturnBehavior.OnlySpecified,
                InventoryID = new StringValue {Value = InventoryACCOMODATE},
                Qty = new DecimalValue {Value = 200},
                UnitPrice = new DecimalValue {Value = 200}
            },
            //a returned non-stock item
	     new SalesInvoiceDetail()
            {
                ReturnBehavior = ReturnBehavior.OnlySpecified,
                InventoryID = new StringValue {Value = InventoryADMCHARGE},
                Qty = new DecimalValue {Value = -1},
                OrigInvType = new StringValue {Value = "INV"},
                OrigInvNbr = new StringValue {Value = CreatedSOInvoiceReferenceNbr},
                UnitPrice = new DecimalValue {Value = 100}
            },
            //a returned serialized stock item
	     new SalesInvoiceDetail()
            {
                ReturnBehavior = ReturnBehavior.OnlySpecified,
                InventoryID = new StringValue {Value = InventoryAAMACHINE1},
                WarehouseID = new StringValue {Value = WarehouseWHOLESALE},
                Location = new StringValue {Value = LocationR1S1},
                Qty = new DecimalValue {Value = -1},
                OrigInvType = new StringValue {Value = "INV"},
                OrigInvNbr = new StringValue {Value = CreatedSOInvoiceReferenceNbr },
                OrigInvLineNbr = new IntValue {Value = CreatedSOInvoiceLineNbr }
            }
        },
        //Specify additional data to be retrieved
        TaxDetails = new SalesInvoiceTaxDetail[]
        {
            new SalesInvoiceTaxDetail
            {
                ReturnBehavior = ReturnBehavior.All
            }
        },
    });

    //Change the tax amount of the invoice to -100
    invoice.TaxDetails[0].TaxAmount.Value = -100m;

    //Release the invoice.
    //(The Invoke method updates the invoice data (the TaxAmount value) first
    //and then releases the invoice.)
    InvokeResult invokeResult = soapClient.Invoke(invoice, new ReleaseSalesInvoice());
    //Monitor the status of the release operation.
    //(The GetProcessResult function is defined below.)
    ProcessResult processResult = GetProcessResult(soapClient, invokeResult);

    //Obtain the released invoice with the needed information
    invoice = (SalesInvoice)soapClient.Get(new SalesInvoice
    {
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        ID = processResult.EntityId,
        Type = new StringReturn(),
        ReferenceNbr = new StringReturn(),
        Status = new StringReturn(),
        FinancialDetails = new SalesInvoiceFinancialDetails
        {
            ReturnBehavior = ReturnBehavior.OnlySpecified,
            BatchNbr = new StringReturn(),
        },
        TaxDetails = new SalesInvoiceTaxDetail[]
        {
            new SalesInvoiceTaxDetail {ReturnBehavior = ReturnBehavior.All }
        },
        Details = new SalesInvoiceDetail[]
        {
            new SalesInvoiceDetail
            {
                ReturnBehavior = ReturnBehavior.OnlySpecified,
                InventoryDocType = new StringReturn(),
                InventoryRefNbr = new StringReturn()
            }
        }
    });
}

//Long-running operation helper
public static ProcessResult GetProcessResult(
    DefaultSoapClient soapClient, InvokeResult invokeResult)
{
    while (true)
    {
        var processResult = soapClient.GetProcessStatus(invokeResult);
        switch (processResult.Status)
        {
            case ProcessStatus.Aborted:
                throw new SystemException("Process status: " + 
                processResult.Status + "; Error: " + processResult.Message);
            case ProcessStatus.NotExists:
            case ProcessStatus.Completed:
                //Go to normal processing
                return processResult;
            case ProcessStatus.InProcess:
                //Insert the needed waiting time here
                if (processResult.Seconds &gt; 30)
                    throw new TimeoutException();
                continue;
            default:
                throw new InvalidOperationException();
        }
    }
}</source>]]></column>
			<column name="PlainText"><![CDATA[Entry of a Direct Sales Invoice Along with a Return A point-of-sale (POS) system can create and process direct sales invoices (that is, invoices                 for which neither a sales order nor a shipment has been created) and include in                 these invoices lines for a return of previously sold items. The POS system creates a                 direct sales invoice and releases the invoice. For simplicity, this example does not include the             creation of the payment or the application of the payment to the invoice. You can find             an example showing how to create and apply a payment in  Entry of a Direct Sales Invoice. User Scenario A customer comes to the store and picks up a motherboard             (which is a serialized item) and a patch cord from store shelves. The customer would             like to buy these items and to return the previously purchased computer mouse. In a POS             system, one invoice is created for the whole operation. The customer pays the difference             between the sale and the return. Code Example You can use the code below to create a sales invoice that includes lines for serialized stock                 items, not-serialized stock items, and return lines for previously sold items.  To test this code example, configure your client             application and an  Acumatica ERP             instance as follows: Deploy a new  Acumatica ERP instance with the  SalesDemo  dataset inserted. For details on deploying                     an instance, see  To Deploy an Acumatica ERP Instance in the Installation Guide. On the   ([~/?ScreenId=CS100000|CS100000]) Enable/Disable Features                     (CS100000) form, enable the  Advanced SO Invoices  feature. In the client application, add a service reference to the  POS/17.200.01                      endpoint, which is an extension of the  Default/17.200.001  endpoint. For                     details on how to add a service reference, see  To Configure the Client Application in this                     guide. To sign in to the instance in the client application, use the company name                     (which you specified when you created the instance) and the  HQ                      branch. You can use the data of the direct sales invoice created in  Entry of a Direct Sales Invoice for the return lines for 					previously sold items. using System;
using System.Linq;
using System.IO;
using System.Threading;
using System.Collections.Generic;
//Add the namespace of the service reference here

public static void EnterReturnAndDirectSalesInvoice(DefaultSoapClient soapClient)
{
    //Input data
    //The customer
    const string CustomerABARTENDE = "ABARTENDE";
    //The customer's tax zone
    const string TaxZoneCANADAAB = "CANADAAB";
    //The sold serialized stock item
    const string InventoryAAPOWERAID = "AAPOWERAID";
    //The serial number of InventoryAAPOWERAID
    const string LotSerialNbrLREX0 = "LREX0";
    //The warehouse related to InventoryAAPOWERAID
    const string WarehouseRETAIL = "RETAIL";
    //The location related to InventoryAAPOWERAID
    const string LocationSTORAGE = "STORAGE";
    //The sold non-stock item
    const string InventoryACCOMODATE = "ACCOMODATE";
    //The reference number of the invoice whose line items are returned 
    const string CreatedSOInvoiceReferenceNbr = "AR005519";
    //The number of the returned line in the invoice
    //(in this example, the number of the line for InventoryAAMACHINE1)
    const int CreatedSOInvoiceLineNbr = 5;
    //The returned serialized stock item
    const string InventoryAAMACHINE1 = "AAMACHINE1";
    //The warehouse related to InventoryAAMACHINE1
    const string WarehouseWHOLESALE = "WHOLESALE";
    //The location related to InventoryAAMACHINE1
    const string LocationR1S1 = "R1S1";
    //The returned non-stock item
    const string InventoryADMCHARGE = "ADMCHARGE";

    //Create a sales invoice
    var invoice = (SalesInvoice)soapClient.Put(new SalesInvoice
    {
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        Type = new StringValue { Value = "Invoice" },
        CustomerID = new StringValue { Value = CustomerABARTENDE },
        //Specify the customer's tax zone
        FinancialDetails = new SalesInvoiceFinancialDetails
        {
            ReturnBehavior = ReturnBehavior.OnlySpecified,
            CustomerTaxZone = new StringValue { Value = TaxZoneCANADAAB }
        },
        //Specify the details of the sales invoice
        Details = new SalesInvoiceDetail[]
        {
            //a sold serialized stock item
	     new SalesInvoiceDetail()
            {
                ReturnBehavior = ReturnBehavior.OnlySpecified,
                InventoryID = new StringValue {Value = InventoryAAPOWERAID},
                WarehouseID = new StringValue {Value = WarehouseRETAIL},
                Location = new StringValue {Value = LocationSTORAGE},
                LotSerialNbr = new StringValue {Value = LotSerialNbrLREX0},
                Qty = new DecimalValue {Value = 100}
            },
            //a sold non-stock item
	     new SalesInvoiceDetail()
            {
                ReturnBehavior = ReturnBehavior.OnlySpecified,
                InventoryID = new StringValue {Value = InventoryACCOMODATE},
                Qty = new DecimalValue {Value = 200},
                UnitPrice = new DecimalValue {Value = 200}
            },
            //a returned non-stock item
	     new SalesInvoiceDetail()
            {
                ReturnBehavior = ReturnBehavior.OnlySpecified,
                InventoryID = new StringValue {Value = InventoryADMCHARGE},
                Qty = new DecimalValue {Value = -1},
                OrigInvType = new StringValue {Value = "INV"},
                OrigInvNbr = new StringValue {Value = CreatedSOInvoiceReferenceNbr},
                UnitPrice = new DecimalValue {Value = 100}
            },
            //a returned serialized stock item
	     new SalesInvoiceDetail()
            {
                ReturnBehavior = ReturnBehavior.OnlySpecified,
                InventoryID = new StringValue {Value = InventoryAAMACHINE1},
                WarehouseID = new StringValue {Value = WarehouseWHOLESALE},
                Location = new StringValue {Value = LocationR1S1},
                Qty = new DecimalValue {Value = -1},
                OrigInvType = new StringValue {Value = "INV"},
                OrigInvNbr = new StringValue {Value = CreatedSOInvoiceReferenceNbr },
                OrigInvLineNbr = new IntValue {Value = CreatedSOInvoiceLineNbr }
            }
        },
        //Specify additional data to be retrieved
        TaxDetails = new SalesInvoiceTaxDetail[]
        {
            new SalesInvoiceTaxDetail
            {
                ReturnBehavior = ReturnBehavior.All
            }
        },
    });

    //Change the tax amount of the invoice to -100
    invoice.TaxDetails[0].TaxAmount.Value = -100m;

    //Release the invoice.
    //(The Invoke method updates the invoice data (the TaxAmount value) first
    //and then releases the invoice.)
    InvokeResult invokeResult = soapClient.Invoke(invoice, new ReleaseSalesInvoice());
    //Monitor the status of the release operation.
    //(The GetProcessResult function is defined below.)
    ProcessResult processResult = GetProcessResult(soapClient, invokeResult);

    //Obtain the released invoice with the needed information
    invoice = (SalesInvoice)soapClient.Get(new SalesInvoice
    {
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        ID = processResult.EntityId,
        Type = new StringReturn(),
        ReferenceNbr = new StringReturn(),
        Status = new StringReturn(),
        FinancialDetails = new SalesInvoiceFinancialDetails
        {
            ReturnBehavior = ReturnBehavior.OnlySpecified,
            BatchNbr = new StringReturn(),
        },
        TaxDetails = new SalesInvoiceTaxDetail[]
        {
            new SalesInvoiceTaxDetail {ReturnBehavior = ReturnBehavior.All }
        },
        Details = new SalesInvoiceDetail[]
        {
            new SalesInvoiceDetail
            {
                ReturnBehavior = ReturnBehavior.OnlySpecified,
                InventoryDocType = new StringReturn(),
                InventoryRefNbr = new StringReturn()
            }
        }
    });
}

//Long-running operation helper
public static ProcessResult GetProcessResult(
    DefaultSoapClient soapClient, InvokeResult invokeResult)
{
    while (true)
    {
        var processResult = soapClient.GetProcessStatus(invokeResult);
        switch (processResult.Status)
        {
            case ProcessStatus.Aborted:
                throw new SystemException("Process status: " + 
                processResult.Status + "; Error: " + processResult.Message);
            case ProcessStatus.NotExists:
            case ProcessStatus.Completed:
                //Go to normal processing
                return processResult;
            case ProcessStatus.InProcess:
                //Insert the needed waiting time here
                if (processResult.Seconds > 30)
                    throw new TimeoutException();
                continue;
            default:
                throw new InvalidOperationException();
        }
    }
} ]]></column>
		</row>
		<row PageID="09005fdb-43b8-4e74-a512-4bcafd7fddcb" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="59fad74d-c319-dcbc-5463-3ec67e35dbd4" RecordSourceID="22377">
			<column name="Content"><![CDATA[
A point-of-sale (POS) system can create and process credit memos with positive lines (for the returned items) and negative lines (for the purchased items). (A credit memo is created instead of a direct sales invoice if the payment amount of the returned items is greater than the payment amount of the newly purchased items.) The POS system creates a credit memo, links the invoice that contains the returned lines to the credit memo, and releases the credit memo. 
==User Scenario==
A customer comes to the store and picks up a motherboard (which is a serialized item) and a patch cord from the store shelves. The customer would like to buy these items and to return the previously purchased notebook computer. The price of the returned item is greater than the price of the purchased items. In a POS system, one invoice is created for the whole operation. The customer is given the difference between the return and the sale.
==Code Example==
You can use the code below to create a credit memo with positive and negative lines.[anchor|#_e97dffa3-8ae4-4306-91f2-303cd4efa591]{br}

To test this code example, configure your client application and an Acumatica ERP instance as follows:[anchor|#_85527d5d-d40e-4cdc-822a-4679ef799423]
*Deploy a new Acumatica ERP instance with the ''SalesDemo'' dataset inserted. For details on deploying an instance, see [HelpRoot_Install\Installing_ERP_Instance|To Deploy an Acumatica ERP Instance] in the Installation Guide.
*On the [HelpRoot_FormReference\CS_10_00_00|Enable/Disable Features] ([~/?ScreenId=CS100000|CS100000]) form, enable the ''Advanced SO Invoices'' feature.
*In the client application, add a service reference to the ''POS/17.200.01'' endpoint, which is an extension of the ''Default/17.200.001'' endpoint. For details on how to add a service reference, see [HelpRoot_Dev_Integration\IS__how_CB_Configure_Application|To Configure the Client Application] in this guide.
*To sign in to the instance in the client application, use the company name (which you specified when you created the instance) and the ''HQ'' branch.
((({S:Hint}You can use the data of the invoice created in [HelpRoot_Dev_Integration\IS__con_Return_of_Direct_Sales_Along_with_Sale|Entry of a Direct Sales Invoice Along with a Return] for the returned lines for previously sold items.
)))<source lang="csharp">using System;
using System.Linq;
using System.IO;
using System.Threading;
using System.Collections.Generic;
//Add the namespace of the service reference here

public static void EnterCreditMemoWithPositiveAndNegativeLines(
       DefaultSoapClient soapClient)
{
    //Input data
    //The customer
    const string CustomerABARTENDE = "ABARTENDE";
    //The sold stock item
    const string InventoryAACOMPUT01 = "AACOMPUT01";
    //The warehouse related to InventoryAACOMPUT01
    const string WarehouseWHOLESALE = "WHOLESALE";
    //The location related to InventoryAACOMPUT01
    const string LocationR1S1 = "R1S1";
    //The tax category related to InventoryAACOMPUT01
    const string TaxCategoryTAXABLE = "TAXABLE";
    //The sold non-stock item
    const string InventoryCASELABORO = "CASELABORO";
    //The UOM related to InventoryCASELABORO
    const string UOMMINUTE = "MINUTE";
    //The reference number of the invoice whose line items are returned 
    const string CreatedInvoiceNbr = "AR005520";
    //The returned serialized stock item
    const string InventoryAAPOWERAID = "AAPOWERAID";
    //The serial number of InventoryAAPOWERAID
    const string LotSerialNbrLREX000004 = "LREX000004";
    //The warehouse related to InventoryAAPOWERAID
    const string WarehouseRETAIL = "RETAIL";
    //The location related to InventoryAAPOWERAID
    const string LocationSTORAGE = "STORAGE";
    //The returned non-stock item
    const string InventoryCASELABOR = "CASELABOR";

    //Create a credit memo for the customer
    SalesInvoice creditMemo = (SalesInvoice)soapClient.Put(new SalesInvoice
    {
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        Type = new StringValue { Value = "Credit Memo" },
        CustomerID = new StringValue { Value = CustomerABARTENDE },
        //Specify the details of the credit memo
        Details = new SalesInvoiceDetail[]
        {
            //a returned serialized stock item
            new SalesInvoiceDetail()
            {
                InventoryID = new StringValue {Value = InventoryAAPOWERAID},
                WarehouseID = new StringValue {Value = WarehouseRETAIL},
                Location = new StringValue {Value = LocationSTORAGE},
                Qty = new DecimalValue {Value = 10},
                LotSerialNbr = new StringValue {Value = LotSerialNbrLREX000004},
                ExpirationDate = new DateTimeValue 
                {
                    Value = new DateTime(2018, 10, 30)
                }
            },
            //a sold stock item
            new SalesInvoiceDetail()
            {
                InventoryID = new StringValue {Value = InventoryAACOMPUT01},
                Qty = new DecimalValue {Value = -1},
                WarehouseID = new StringValue {Value = WarehouseWHOLESALE},
                Location = new StringValue {Value = LocationR1S1},
                TaxCategory = new StringValue { Value = TaxCategoryTAXABLE }
            },
            //a returned non-stock item
            new SalesInvoiceDetail()
            {
                InventoryID = new StringValue {Value = InventoryCASELABOR},
                Qty = new DecimalValue {Value = 100}
            },
            //a sold non-stock item
            new SalesInvoiceDetail()
            {
                InventoryID = new StringValue {Value = InventoryCASELABORO},
                Qty = new DecimalValue {Value = -2},
                UOM = new StringValue {Value = UOMMINUTE}
            }
        },
        //Link the credit memo to the invoice
        ApplicationsCreditMemo = new SalesInvoiceApplicationCreditMemo[]
        {
            new SalesInvoiceApplicationCreditMemo()
            {
                DocType = new StringValue {Value = "Invoice"},
                ReferenceNbr = new StringValue {Value = CreatedInvoiceNbr},
                AmountPaid = new DecimalValue {Value = 2000}
            }
        },
        //Specify additional data to be retrieved
        TaxDetails = new SalesInvoiceTaxDetail[]
        {
            new SalesInvoiceTaxDetail
            {
                ReturnBehavior = ReturnBehavior.All
            }
        }
    });

    //Change the tax amount of the credit memo to -55
    creditMemo.TaxDetails[0].TaxAmount.Value = -55m;

    //Release the credit memo.
    //(The Invoke method updates the data (the TaxAmount value) first
    //and then releases the credit memo.)
    InvokeResult invokeResult = 
        soapClient.Invoke(creditMemo, new ReleaseSalesInvoice());
    //Monitor the status of the release operation.
    //(The GetProcessResult function is defined below.)
    ProcessResult processResult = GetProcessResult(soapClient, invokeResult);

    //Obtain the released credit memo with the needed information
    creditMemo = (SalesInvoice)soapClient.Get(new SalesInvoice
    {
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        ID = processResult.EntityId,
        Type = new StringReturn(),
        ReferenceNbr = new StringReturn(),
        Status = new StringReturn(),
        FinancialDetails = new SalesInvoiceFinancialDetails
        {
            ReturnBehavior = ReturnBehavior.OnlySpecified,
            BatchNbr = new StringReturn(),
        },
        Details = new SalesInvoiceDetail[]
        {
            new SalesInvoiceDetail
            {
                ReturnBehavior = ReturnBehavior.OnlySpecified,
                InventoryDocType = new StringReturn(),
                InventoryRefNbr = new StringReturn()
            }
        },
        ApplicationsInvoice = new SalesInvoiceApplicationInvoice[]
        {
            new SalesInvoiceApplicationInvoice
            {
                ReturnBehavior = ReturnBehavior.All
            }
        }
    });
}

//Long-running operation helper
public static ProcessResult GetProcessResult(
    DefaultSoapClient soapClient, InvokeResult invokeResult)
{
    while (true)
    {
        var processResult = soapClient.GetProcessStatus(invokeResult);
        switch (processResult.Status)
        {
            case ProcessStatus.Aborted:
                throw new SystemException("Process status: " + 
                processResult.Status + "; Error: " + processResult.Message);
            case ProcessStatus.NotExists:
            case ProcessStatus.Completed:
                //Go to normal processing
                return processResult;
            case ProcessStatus.InProcess:
                //Insert the needed waiting time here
                if (processResult.Seconds &gt; 30)
                    throw new TimeoutException();
                continue;
            default:
                throw new InvalidOperationException();
        }
    }
}</source>]]></column>
			<column name="PlainText"><![CDATA[Entry of a Credit Memo with Positive and Negative Lines A point-of-sale (POS) system can create and process credit memos with positive lines (for the                 returned items) and negative lines (for the purchased items). (A credit memo is                 created instead of a direct sales invoice if the payment amount of the returned                 items is greater than the payment amount of the newly purchased items.) The POS                 system creates a credit memo, links the invoice that contains the returned lines to                 the credit memo, and releases the credit memo.  User Scenario A customer comes to the store and picks up a motherboard (which is a serialized item) and a                 patch cord from the store shelves. The customer would like to buy these items and to                 return the previously purchased notebook computer. The price of the returned item is                 greater than the price of the purchased items. In a POS system, one invoice is                 created for the whole operation. The customer is given the difference between the                 return and the sale. Code Example You can use the code below to create a credit memo with positive and negative lines. To test this code example, configure your client             application and an  Acumatica ERP             instance as follows: Deploy a new  Acumatica ERP instance with the  SalesDemo  dataset inserted. For details on deploying                     an instance, see  To Deploy an Acumatica ERP Instance in the Installation Guide. On the   ([~/?ScreenId=CS100000|CS100000]) Enable/Disable Features                     (CS100000) form, enable the  Advanced SO Invoices  feature. In the client application, add a service reference to the  POS/17.200.01                      endpoint, which is an extension of the  Default/17.200.001  endpoint. For                     details on how to add a service reference, see  To Configure the Client Application in this                     guide. To sign in to the instance in the client application, use the company name                     (which you specified when you created the instance) and the  HQ                      branch. You can use the data of the invoice created in  Entry of a Direct Sales Invoice Along with a Return for the returned                 lines for previously sold items. using System;
using System.Linq;
using System.IO;
using System.Threading;
using System.Collections.Generic;
//Add the namespace of the service reference here

public static void EnterCreditMemoWithPositiveAndNegativeLines(
       DefaultSoapClient soapClient)
{
    //Input data
    //The customer
    const string CustomerABARTENDE = "ABARTENDE";
    //The sold stock item
    const string InventoryAACOMPUT01 = "AACOMPUT01";
    //The warehouse related to InventoryAACOMPUT01
    const string WarehouseWHOLESALE = "WHOLESALE";
    //The location related to InventoryAACOMPUT01
    const string LocationR1S1 = "R1S1";
    //The tax category related to InventoryAACOMPUT01
    const string TaxCategoryTAXABLE = "TAXABLE";
    //The sold non-stock item
    const string InventoryCASELABORO = "CASELABORO";
    //The UOM related to InventoryCASELABORO
    const string UOMMINUTE = "MINUTE";
    //The reference number of the invoice whose line items are returned 
    const string CreatedInvoiceNbr = "AR005520";
    //The returned serialized stock item
    const string InventoryAAPOWERAID = "AAPOWERAID";
    //The serial number of InventoryAAPOWERAID
    const string LotSerialNbrLREX000004 = "LREX000004";
    //The warehouse related to InventoryAAPOWERAID
    const string WarehouseRETAIL = "RETAIL";
    //The location related to InventoryAAPOWERAID
    const string LocationSTORAGE = "STORAGE";
    //The returned non-stock item
    const string InventoryCASELABOR = "CASELABOR";

    //Create a credit memo for the customer
    SalesInvoice creditMemo = (SalesInvoice)soapClient.Put(new SalesInvoice
    {
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        Type = new StringValue { Value = "Credit Memo" },
        CustomerID = new StringValue { Value = CustomerABARTENDE },
        //Specify the details of the credit memo
        Details = new SalesInvoiceDetail[]
        {
            //a returned serialized stock item
            new SalesInvoiceDetail()
            {
                InventoryID = new StringValue {Value = InventoryAAPOWERAID},
                WarehouseID = new StringValue {Value = WarehouseRETAIL},
                Location = new StringValue {Value = LocationSTORAGE},
                Qty = new DecimalValue {Value = 10},
                LotSerialNbr = new StringValue {Value = LotSerialNbrLREX000004},
                ExpirationDate = new DateTimeValue 
                {
                    Value = new DateTime(2018, 10, 30)
                }
            },
            //a sold stock item
            new SalesInvoiceDetail()
            {
                InventoryID = new StringValue {Value = InventoryAACOMPUT01},
                Qty = new DecimalValue {Value = -1},
                WarehouseID = new StringValue {Value = WarehouseWHOLESALE},
                Location = new StringValue {Value = LocationR1S1},
                TaxCategory = new StringValue { Value = TaxCategoryTAXABLE }
            },
            //a returned non-stock item
            new SalesInvoiceDetail()
            {
                InventoryID = new StringValue {Value = InventoryCASELABOR},
                Qty = new DecimalValue {Value = 100}
            },
            //a sold non-stock item
            new SalesInvoiceDetail()
            {
                InventoryID = new StringValue {Value = InventoryCASELABORO},
                Qty = new DecimalValue {Value = -2},
                UOM = new StringValue {Value = UOMMINUTE}
            }
        },
        //Link the credit memo to the invoice
        ApplicationsCreditMemo = new SalesInvoiceApplicationCreditMemo[]
        {
            new SalesInvoiceApplicationCreditMemo()
            {
                DocType = new StringValue {Value = "Invoice"},
                ReferenceNbr = new StringValue {Value = CreatedInvoiceNbr},
                AmountPaid = new DecimalValue {Value = 2000}
            }
        },
        //Specify additional data to be retrieved
        TaxDetails = new SalesInvoiceTaxDetail[]
        {
            new SalesInvoiceTaxDetail
            {
                ReturnBehavior = ReturnBehavior.All
            }
        }
    });

    //Change the tax amount of the credit memo to -55
    creditMemo.TaxDetails[0].TaxAmount.Value = -55m;

    //Release the credit memo.
    //(The Invoke method updates the data (the TaxAmount value) first
    //and then releases the credit memo.)
    InvokeResult invokeResult = 
        soapClient.Invoke(creditMemo, new ReleaseSalesInvoice());
    //Monitor the status of the release operation.
    //(The GetProcessResult function is defined below.)
    ProcessResult processResult = GetProcessResult(soapClient, invokeResult);

    //Obtain the released credit memo with the needed information
    creditMemo = (SalesInvoice)soapClient.Get(new SalesInvoice
    {
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        ID = processResult.EntityId,
        Type = new StringReturn(),
        ReferenceNbr = new StringReturn(),
        Status = new StringReturn(),
        FinancialDetails = new SalesInvoiceFinancialDetails
        {
            ReturnBehavior = ReturnBehavior.OnlySpecified,
            BatchNbr = new StringReturn(),
        },
        Details = new SalesInvoiceDetail[]
        {
            new SalesInvoiceDetail
            {
                ReturnBehavior = ReturnBehavior.OnlySpecified,
                InventoryDocType = new StringReturn(),
                InventoryRefNbr = new StringReturn()
            }
        },
        ApplicationsInvoice = new SalesInvoiceApplicationInvoice[]
        {
            new SalesInvoiceApplicationInvoice
            {
                ReturnBehavior = ReturnBehavior.All
            }
        }
    });
}

//Long-running operation helper
public static ProcessResult GetProcessResult(
    DefaultSoapClient soapClient, InvokeResult invokeResult)
{
    while (true)
    {
        var processResult = soapClient.GetProcessStatus(invokeResult);
        switch (processResult.Status)
        {
            case ProcessStatus.Aborted:
                throw new SystemException("Process status: " + 
                processResult.Status + "; Error: " + processResult.Message);
            case ProcessStatus.NotExists:
            case ProcessStatus.Completed:
                //Go to normal processing
                return processResult;
            case ProcessStatus.InProcess:
                //Insert the needed waiting time here
                if (processResult.Seconds > 30)
                    throw new TimeoutException();
                continue;
            default:
                throw new InvalidOperationException();
        }
    }
} ]]></column>
		</row>
		<row PageID="dead0c5f-b484-4722-b8aa-574cef9bd1ea" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="eea49674-9bd0-9d9f-9735-b8b883c7aa35" RecordSourceID="22377">
			<column name="Content"><![CDATA[
A point-of-sale (POS) system can create and process direct sales invoices—that is, invoices for which neither a sales order nor a shipment has been created—in a currency that differs from the default currency of the customer account. The POS system creates a direct sales invoice in the needed currency and releases the invoice.[anchor|#_f3b15545-b500-421e-99de-6d826ebdcd55]((({S:Hint}For simplicity, this example does not include the creation of the payment or the application of the payment to the invoice. You can find an example showing how to create and apply a payment in [HelpRoot_Dev_Integration\IS__con_Entering_Direct_Sales_Invoice|Entry of a Direct Sales Invoice].
)))
==User Scenario==
A customer comes to the Canadian store and picks up a patch cord from store shelves. The customer would like to buy the item, return the previously purchased computer mouse, and pay for the service in United States dollars. In a POS system, one invoice is created for this operation. The customer pays the difference between the sale and return.
==Code Example==
You can use the code below to create a sales invoice for a direct sale in a currency that is different from the customer&rsquo;s default currency.[anchor|#_c3d0b4e5-fea5-4af8-8eb4-92ee4215c892]{br}

To test this code example, configure your client application and an Acumatica ERP instance as follows:[anchor|#_dd09bce4-23db-4be9-8344-fe919bca1735]
*Deploy a new Acumatica ERP instance with the ''SalesDemo'' dataset inserted. For details on deploying an instance, see [HelpRoot_Install\Installing_ERP_Instance|To Deploy an Acumatica ERP Instance] in the Installation Guide.
*On the [HelpRoot_FormReference\CS_10_00_00|Enable/Disable Features] ([~/?ScreenId=CS100000|CS100000]) form, enable the ''Advanced SO Invoices'' feature.
*In the client application, add a service reference to the ''POS/17.200.01'' endpoint, which is an extension of the ''Default/17.200.001'' endpoint. For details on how to add a service reference, see [HelpRoot_Dev_Integration\IS__how_CB_Configure_Application|To Configure the Client Application] in this guide.
*To sign in to the instance in the client application, use the company name (which you specified when you created the instance) and the ''HQ'' branch.
<source lang="csharp">using System;
using System.Linq;
using System.IO;
using System.Threading;
using System.Collections.Generic;
//Add the namespace of the service reference here

public static void EnterDirectSalesInvoiceInOtherCurrency(
   	DefaultSoapClient soapClient)
{
    //Input data
    //The customer
    const string CustomerABARTENDE = "ABARTENDE";
    //The sold stock item
    const string InventoryAACOMPUT01 = "AACOMPUT01";
    //The returned stock item
    const string InventoryAALEGO500 = "AALEGO500";
    //The returned non-stock item
    const string InventoryADMCHARGE = "ADMCHARGE";
    //The warehouse related to InventoryAALEGO500 and InventoryAACOMPUT01
    const string WarehouseWHOLESALE = "WHOLESALE";
    //The location related to InventoryAALEGO500 and InventoryAACOMPUT01
    const string LocationR1S1 = "R1S1";

    //Create an invoice for the customer
    SalesInvoice invoice = (SalesInvoice)soapClient.Put(new SalesInvoice
    {
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        Type = new StringValue { Value = "Invoice" },
        CustomerID = new StringValue { Value = CustomerABARTENDE },
        //Specify the currency of the invoice
        Currency = new StringValue {Value = "EUR" },
        //Specify the invoice details
        Details = new SalesInvoiceDetail[]
        {
            //a sold stock item
	     new SalesInvoiceDetail()
            {
                ReturnBehavior = ReturnBehavior.OnlySpecified,
                InventoryID = new StringValue {Value = InventoryAACOMPUT01},
                WarehouseID = new StringValue {Value = WarehouseWHOLESALE},
                Location = new StringValue {Value = LocationR1S1},
                Qty = new DecimalValue {Value = 20}
            },
            //a returned stock item
	     new SalesInvoiceDetail()
            {
                ReturnBehavior = ReturnBehavior.OnlySpecified,
                InventoryID = new StringValue {Value = InventoryAALEGO500},
                WarehouseID = new StringValue {Value = WarehouseWHOLESALE},
                Location = new StringValue {Value = LocationR1S1},
                Qty = new DecimalValue {Value = -5}
            },
            //a returned non-stock item
	     new SalesInvoiceDetail()
            {
                ReturnBehavior = ReturnBehavior.OnlySpecified,
                InventoryID = new StringValue {Value = InventoryADMCHARGE},
                Qty = new DecimalValue {Value = -2},
                UnitPrice = new DecimalValue {Value = 100}
            }
        },
        //Specify additional values to be retrieved
        ReferenceNbr = new StringReturn()
    });

    //Release the invoice
    InvokeResult invokeResult = soapClient.Invoke(
        new SalesInvoice
        {
            Type = new StringSearch { Value = "Invoice" },
            ReferenceNbr = new StringSearch 
            { 
                Value = invoice.ReferenceNbr.Value 
            },
        }, 
        new ReleaseSalesInvoice()
    );
    //Monitor the status of the release operation.
    //(The GetProcessResult function is defined below.)
    ProcessResult processResult = GetProcessResult(soapClient, invokeResult);

    //Obtain the released invoice with the needed information
    invoice = (SalesInvoice)soapClient.Get(new SalesInvoice
    {
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        ID = processResult.EntityId,
        Type = new StringReturn(),
        ReferenceNbr = new StringReturn(),
        Status = new StringReturn(),
        Balance = new DecimalReturn(),
        VATTaxableTotal = new DecimalReturn(),
        FinancialDetails = new SalesInvoiceFinancialDetails
        {
            ReturnBehavior = ReturnBehavior.OnlySpecified,
            BatchNbr = new StringReturn(),
        },
        TaxDetails = new SalesInvoiceTaxDetail[]
        {
           new SalesInvoiceTaxDetail {ReturnBehavior = ReturnBehavior.All }
        },
        Details = new SalesInvoiceDetail[]
        {
            new SalesInvoiceDetail
            {
                ReturnBehavior = ReturnBehavior.OnlySpecified,
                InventoryDocType = new StringReturn(),
                InventoryRefNbr = new StringReturn()
            }
        },
        Commissions = new SalesInvoiceCommissions
        {
            ReturnBehavior = ReturnBehavior.All
        }
    });
}

//Long-running operation helper
public static ProcessResult GetProcessResult(
    DefaultSoapClient soapClient, InvokeResult invokeResult)
{
    while (true)
    {
        var processResult = soapClient.GetProcessStatus(invokeResult);
        switch (processResult.Status)
        {
            case ProcessStatus.Aborted:
                throw new SystemException("Process status: " + 
                processResult.Status + "; Error: " + processResult.Message);
            case ProcessStatus.NotExists:
            case ProcessStatus.Completed:
                //Go to normal processing
                return processResult;
            case ProcessStatus.InProcess:
                //Insert the needed waiting time here
                if (processResult.Seconds &gt; 30)
                    throw new TimeoutException();
                continue;
            default:
                throw new InvalidOperationException();
        }
    }
}</source>]]></column>
			<column name="PlainText"><![CDATA[Entry of a Direct Sales Invoice in a Non-Default Currency A point-of-sale (POS) system can create and process direct sales invoices—that is,                 invoices for which neither a sales order nor a shipment has been created—in a                 currency that differs from the default currency of the customer account. The POS                 system creates a direct sales invoice in the needed currency and releases the                     invoice. For simplicity, this example does not include the             creation of the payment or the application of the payment to the invoice. You can find             an example showing how to create and apply a payment in  Entry of a Direct Sales Invoice. User Scenario A customer comes to the Canadian store and picks up a patch cord from store shelves. The                 customer would like to buy the item, return the previously purchased computer mouse,                 and pay for the service in United States dollars. In a POS system, one invoice is                 created for this operation. The customer pays the difference between the sale and                 return. Code Example You can use the code below to create a sales invoice for a direct sale in a currency that is                 different from the customer's default currency. To test this code example, configure your client             application and an  Acumatica ERP             instance as follows: Deploy a new  Acumatica ERP instance with the  SalesDemo  dataset inserted. For details on deploying                     an instance, see  To Deploy an Acumatica ERP Instance in the Installation Guide. On the   ([~/?ScreenId=CS100000|CS100000]) Enable/Disable Features                     (CS100000) form, enable the  Advanced SO Invoices  feature. In the client application, add a service reference to the  POS/17.200.01                      endpoint, which is an extension of the  Default/17.200.001  endpoint. For                     details on how to add a service reference, see  To Configure the Client Application in this                     guide. To sign in to the instance in the client application, use the company name                     (which you specified when you created the instance) and the  HQ                      branch. using System;
using System.Linq;
using System.IO;
using System.Threading;
using System.Collections.Generic;
//Add the namespace of the service reference here

public static void EnterDirectSalesInvoiceInOtherCurrency(
   	DefaultSoapClient soapClient)
{
    //Input data
    //The customer
    const string CustomerABARTENDE = "ABARTENDE";
    //The sold stock item
    const string InventoryAACOMPUT01 = "AACOMPUT01";
    //The returned stock item
    const string InventoryAALEGO500 = "AALEGO500";
    //The returned non-stock item
    const string InventoryADMCHARGE = "ADMCHARGE";
    //The warehouse related to InventoryAALEGO500 and InventoryAACOMPUT01
    const string WarehouseWHOLESALE = "WHOLESALE";
    //The location related to InventoryAALEGO500 and InventoryAACOMPUT01
    const string LocationR1S1 = "R1S1";

    //Create an invoice for the customer
    SalesInvoice invoice = (SalesInvoice)soapClient.Put(new SalesInvoice
    {
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        Type = new StringValue { Value = "Invoice" },
        CustomerID = new StringValue { Value = CustomerABARTENDE },
        //Specify the currency of the invoice
        Currency = new StringValue {Value = "EUR" },
        //Specify the invoice details
        Details = new SalesInvoiceDetail[]
        {
            //a sold stock item
	     new SalesInvoiceDetail()
            {
                ReturnBehavior = ReturnBehavior.OnlySpecified,
                InventoryID = new StringValue {Value = InventoryAACOMPUT01},
                WarehouseID = new StringValue {Value = WarehouseWHOLESALE},
                Location = new StringValue {Value = LocationR1S1},
                Qty = new DecimalValue {Value = 20}
            },
            //a returned stock item
	     new SalesInvoiceDetail()
            {
                ReturnBehavior = ReturnBehavior.OnlySpecified,
                InventoryID = new StringValue {Value = InventoryAALEGO500},
                WarehouseID = new StringValue {Value = WarehouseWHOLESALE},
                Location = new StringValue {Value = LocationR1S1},
                Qty = new DecimalValue {Value = -5}
            },
            //a returned non-stock item
	     new SalesInvoiceDetail()
            {
                ReturnBehavior = ReturnBehavior.OnlySpecified,
                InventoryID = new StringValue {Value = InventoryADMCHARGE},
                Qty = new DecimalValue {Value = -2},
                UnitPrice = new DecimalValue {Value = 100}
            }
        },
        //Specify additional values to be retrieved
        ReferenceNbr = new StringReturn()
    });

    //Release the invoice
    InvokeResult invokeResult = soapClient.Invoke(
        new SalesInvoice
        {
            Type = new StringSearch { Value = "Invoice" },
            ReferenceNbr = new StringSearch 
            { 
                Value = invoice.ReferenceNbr.Value 
            },
        }, 
        new ReleaseSalesInvoice()
    );
    //Monitor the status of the release operation.
    //(The GetProcessResult function is defined below.)
    ProcessResult processResult = GetProcessResult(soapClient, invokeResult);

    //Obtain the released invoice with the needed information
    invoice = (SalesInvoice)soapClient.Get(new SalesInvoice
    {
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        ID = processResult.EntityId,
        Type = new StringReturn(),
        ReferenceNbr = new StringReturn(),
        Status = new StringReturn(),
        Balance = new DecimalReturn(),
        VATTaxableTotal = new DecimalReturn(),
        FinancialDetails = new SalesInvoiceFinancialDetails
        {
            ReturnBehavior = ReturnBehavior.OnlySpecified,
            BatchNbr = new StringReturn(),
        },
        TaxDetails = new SalesInvoiceTaxDetail[]
        {
           new SalesInvoiceTaxDetail {ReturnBehavior = ReturnBehavior.All }
        },
        Details = new SalesInvoiceDetail[]
        {
            new SalesInvoiceDetail
            {
                ReturnBehavior = ReturnBehavior.OnlySpecified,
                InventoryDocType = new StringReturn(),
                InventoryRefNbr = new StringReturn()
            }
        },
        Commissions = new SalesInvoiceCommissions
        {
            ReturnBehavior = ReturnBehavior.All
        }
    });
}

//Long-running operation helper
public static ProcessResult GetProcessResult(
    DefaultSoapClient soapClient, InvokeResult invokeResult)
{
    while (true)
    {
        var processResult = soapClient.GetProcessStatus(invokeResult);
        switch (processResult.Status)
        {
            case ProcessStatus.Aborted:
                throw new SystemException("Process status: " + 
                processResult.Status + "; Error: " + processResult.Message);
            case ProcessStatus.NotExists:
            case ProcessStatus.Completed:
                //Go to normal processing
                return processResult;
            case ProcessStatus.InProcess:
                //Insert the needed waiting time here
                if (processResult.Seconds > 30)
                    throw new TimeoutException();
                continue;
            default:
                throw new InvalidOperationException();
        }
    }
} ]]></column>
		</row>
		<row PageID="cbcfa877-0d82-435f-ae53-f4978cf729e6" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="41a2201f-3d25-9640-9988-876d4f6284ae" RecordSourceID="22377">
			<column name="Content"><![CDATA[
A point-of-sale (POS) system can create and process sales invoices that contain both lines that are not linked to any sales order or shipment and lines for which a sales order and shipment have been created. Either type of line can include information about newly bought items or returned items. {br}

To process these invoices, the POS system performs the following steps:[anchor|#_0323653c-3320-4bda-856c-41abdde0e167]
#For the returned items that are linked to a sales order and shipment, creates a new sales order of ''RM'' type (a generic authorized return). 
#In the created ''RM'' order, adds the previously issued invoice that contains the returned items.
#In the ''RM'' order, adds the newly ordered items.
#Creates and confirms shipments of the newly ordered items.
#Creates shipments with the ''Receipt'' operation for the returned items and confirms these shipments.
#Creates a Sales Orders invoice and releases the invoice.
[anchor|#_8177948c-a273-4e17-91b7-1034b67c26cb]((({S:Hint}For simplicity, this example does not include the creation of the payment or the application of the payment to the invoice. You can find an example showing how to create and apply a payment in [HelpRoot_Dev_Integration\IS__con_Entering_Direct_Sales_Invoice|Entry of a Direct Sales Invoice].
)))
==User Scenario==
In the online shop, a customer buys a computer mouse, but then the customer decides to return the mouse. In the online shop, the customer creates an order that includes both the returned item and a motherboard, then the customer decides to get the motherboard and to return the mouse in the store. The customer comes to the store and picks up a patch cord from the store shelves. Thus, the customer would like to buy the patch cord, to return the mouse, and to pay for the previously ordered motherboard. In a POS system, one invoice is created for the whole operation. 
==Code Example==
You can use the code below to create a direct sales invoice that combines a shipped order and a return.[anchor|#_c589226c-3c5c-4975-82f5-cc76e8ef0a64]{br}

To test this code example, configure your client application and an Acumatica ERP instance as follows:[anchor|#_3ab885e4-e518-43b4-86f3-f6c612367bfd]
*Deploy a new Acumatica ERP instance with the ''SalesDemo'' dataset inserted. For details on deploying an instance, see [HelpRoot_Install\Installing_ERP_Instance|To Deploy an Acumatica ERP Instance] in the Installation Guide.
*On the [HelpRoot_FormReference\CS_10_00_00|Enable/Disable Features] ([~/?ScreenId=CS100000|CS100000]) form, enable the ''Advanced SO Invoices'' feature.
*In the client application, add a service reference to the ''POS/17.200.01'' endpoint, which is an extension of the ''Default/17.200.001'' endpoint. For details on how to add a service reference, see [HelpRoot_Dev_Integration\IS__how_CB_Configure_Application|To Configure the Client Application] in this guide.
*To sign in to the instance in the client application, use the company name (which you specified when you created the instance) and the ''HQ'' branch.
((({S:Hint}You can insert in the code the data of the direct sales invoice created in [HelpRoot_Dev_Integration\IS__con_Entering_Direct_Sales_in_Non-Customer_Currency|Entry of a Direct Sales Invoice in a Non-Default Currency] for the return lines for previously sold items.
)))<source lang="csharp">using System;
using System.Linq;
using System.IO;
using System.Threading;
using System.Collections.Generic;
//Add the namespace of the service reference here

public static void EnterDirectSalesInvoiceWithShippedOrderAndReturn(
   	DefaultSoapClient soapClient)
{
    //Input data
    //The customer
    const string CustomerABARTENDE = "ABARTENDE";
    //The sold stock item
    const string InventoryCONAIRT1 = "CONAIRT1";
    //The reference number of the customer's direct sales invoice 
    //whose line is returned 
    const string OriginalDirectSalesInvoiceReferenceNbr = "AR005522";
    //The number of the returned line in the invoice
    const int OriginalDirectSalesInvoiceLineNbr = 1;
    //The returned stock item from the direct sales invoice
    const string InventoryAACOMPUT01 = "AACOMPUT01";
    //The warehouse, which is the same for all items in this example
    const string WarehouseWHOLESALE = "WHOLESALE";
    //The location related to InventoryAACOMPUT01 and InventoryCONAIRT1
    const string LocationR1S1 = "R1S1";
    //A previously created customer's invoice that is linked to a sales order 
    //and whose line is returned
    const string OriginalInvoiceWithSalesOrderReferenceNbr = "AR003117";
    //The returned stock item from the sales order
    const string InventoryWIDGET01 = "WIDGET01";
    //The sold stock item from the sales order
    const string InventoryAALEGO500 = "AALEGO500";

    //Create a generic authorized return (that is, a sales order of the RM type)
    SalesOrder order = (SalesOrder)soapClient.Put(new SalesOrder
    {
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        OrderType = new StringValue { Value = "RM" },
        CustomerID = new StringValue { Value = CustomerABARTENDE },
        OrderNbr = new StringReturn()
    });

    //Add an invoice with the returned line to the sales order
    soapClient.Invoke(order, new SalesOrderAddInvoice
    {
        DocumentType = new StringValue { Value = "Invoice" },
        ReferenceNbr = new StringValue 
        { 
            Value = OriginalInvoiceWithSalesOrderReferenceNbr 
        }
    });

    //Obtain the sales order with the added invoice
    order = (SalesOrder)soapClient.Get(new SalesOrder
    {
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        OrderType = new StringSearch { Value = "RM" },
        OrderNbr = new StringSearch { Value = order.OrderNbr.Value },
        Details = new SalesOrderDetail[]
        {
            new SalesOrderDetail { ReturnBehavior = ReturnBehavior.All }
        }
    });

    //To the sales order, add a detail line with a newly ordered item
    var orderDetails = new SalesOrderDetail[]
    {
        order.Details[0],
        new SalesOrderDetail
        {
            InventoryID = new StringValue {Value = InventoryAALEGO500},
            OrderQty = new DecimalValue {Value = 1},
            Operation = new StringValue {Value = "Issue"}
        }
    };
    order.Details = orderDetails;

    //Create shipments for the created sales order
    //(The Invoke method updates the sales order first and then 
    //creates shipments.)
    InvokeResult invokeResult = soapClient.Invoke(
        order, 
        new SalesOrderCreateShipment 
        { 
            WarehouseID = new StringValue { Value = WarehouseWHOLESALE } 
        }
    );
    //Monitor the status of the long-running operation.
    //(The GetProcessResult function is defined below.)
    ProcessResult processResult = GetProcessResult(soapClient, invokeResult);

    //Obtain the sales order
    order = (SalesOrder)soapClient.Get(new SalesOrder
    {
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        ID = processResult.EntityId,
        Shipments = new SalesOrderShipment[]
        {
            new SalesOrderShipment { ReturnBehavior = ReturnBehavior.All }
        }
    });

    //Confirm each shipment
    foreach (SalesOrderShipment salesOrderShipment in order.Shipments)
    {
        if (salesOrderShipment.ShipmentType.Value == "Shipment")
        {
            Shipment shipment = (Shipment)soapClient.Get(new Shipment
            {
                ReturnBehavior = ReturnBehavior.OnlySpecified,
                ShipmentNbr = new StringSearch 
                { 
                   Value = salesOrderShipment.ShipmentNbr.Value 
                },
                Status = new StringReturn()
            });
            if (shipment.Status.Value != "Confirmed")
            {
                invokeResult = 
                   soapClient.Invoke(shipment, new ConfirmShipment());
                GetProcessResult(soapClient, invokeResult);
            }
        }
    }

    //Create a shipment with the Receipt operation for the returned items
    invokeResult = soapClient.Invoke(
        new SalesOrder{ID = order.ID}, 
        new SalesOrderCreateReceipt()
    );
    processResult = GetProcessResult(soapClient, invokeResult);

    //Obtain the sales order
    order = (SalesOrder)soapClient.Get(new SalesOrder
    {
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        ID = processResult.EntityId,
        OrderType = new StringReturn(),
        OrderNbr = new StringReturn(),
        Shipments = new SalesOrderShipment[]
        {
            new SalesOrderShipment { ReturnBehavior = ReturnBehavior.All }
        }
    });

    //Confirm each new shipment
    foreach (SalesOrderShipment salesOrderShipment in order.Shipments)
    {
        if (salesOrderShipment.ShipmentType.Value == "Shipment")
        {
            Shipment shipment = (Shipment)soapClient.Get(new Shipment
            {
                ReturnBehavior = ReturnBehavior.OnlySpecified,
                ShipmentNbr = new StringSearch 
                { 
                   Value = salesOrderShipment.ShipmentNbr.Value 
                },
                Status = new StringReturn()
            });
            if (shipment.Status.Value != "Confirmed")
            {
                invokeResult = 
                   soapClient.Invoke(shipment, new ConfirmShipment());
                processResult = GetProcessResult(soapClient, invokeResult);
            }
        }
    }

    //Create a sales invoice
    SalesInvoice invoice = (SalesInvoice)soapClient.Put(new SalesInvoice
    {
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        Type = new StringValue { Value = "Invoice" },
        CustomerID = new StringValue { Value = CustomerABARTENDE },
        Details = new SalesInvoiceDetail[]
        {
            //a sold stock item from sales order
            new SalesInvoiceDetail()
            {
                ReturnBehavior = ReturnBehavior.OnlySpecified,
                OrderType = new StringValue {Value = "RM"},
                OrderNbr = order.OrderNbr,
                ShipmentNbr = order.Shipments[0].ShipmentNbr,
                InventoryID = new StringValue {Value = InventoryAALEGO500},
                WarehouseID = new StringValue {Value = WarehouseWHOLESALE},
                Qty = new DecimalValue {Value = 1}
            },
            //a returned stock item from sales order
            new SalesInvoiceDetail()
            {
                ReturnBehavior = ReturnBehavior.OnlySpecified,
                OrderType = new StringValue {Value = "RM"},
                OrderNbr = order.OrderNbr,
                ShipmentNbr = order.Shipments[1].ShipmentNbr,
                InventoryID = new StringValue {Value = InventoryWIDGET01},
                WarehouseID = new StringValue {Value = WarehouseWHOLESALE},
                Qty = new DecimalValue {Value = -20}
            },
            //a returned stock item from the invoice
            new SalesInvoiceDetail()
            {
                ReturnBehavior = ReturnBehavior.OnlySpecified,
                OrigInvType = new StringValue {Value = "INV"},
                OrigInvNbr = new StringValue 
                {
                   Value = OriginalDirectSalesInvoiceReferenceNbr 
                },
                OrigInvLineNbr = new IntValue 
                { 
                   Value = OriginalDirectSalesInvoiceLineNbr 
                },
                InventoryID = new StringValue {Value = InventoryAACOMPUT01},
                WarehouseID = new StringValue {Value = WarehouseWHOLESALE},
                Location = new StringValue {Value = LocationR1S1},
                Qty = new DecimalValue {Value = -3}
            },
            //a sold stock item 
            new SalesInvoiceDetail()
            {
                ReturnBehavior = ReturnBehavior.OnlySpecified,
                InventoryID = new StringValue {Value = InventoryCONAIRT1},
                WarehouseID = new StringValue {Value = WarehouseWHOLESALE},
                Location = new StringValue {Value = LocationR1S1},
                Qty = new DecimalValue {Value = 20}
            }
        },
        //Specify additional data to be retrieved
        ReferenceNbr = new StringReturn(),
    });

    //Release the invoice
    invokeResult = soapClient.Invoke(
        new SalesInvoice
        {
            Type = new StringSearch { Value = "Invoice" },
            ReferenceNbr = new StringSearch 
            { 
                Value = invoice.ReferenceNbr.Value 
            },
        },
        new ReleaseSalesInvoice()
    );
    processResult = GetProcessResult(soapClient, invokeResult);

    //Obtain the released invoice with the needed information
    invoice = (SalesInvoice)soapClient.Get(new SalesInvoice
    {
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        ID = processResult.EntityId,
        Type = new StringReturn(),
        ReferenceNbr = new StringReturn(),
        Status = new StringReturn(),
        Balance = new DecimalReturn(),
        FinancialDetails = new SalesInvoiceFinancialDetails
        {
            ReturnBehavior = ReturnBehavior.OnlySpecified,
            BatchNbr = new StringReturn(),
        },
        Details = new SalesInvoiceDetail[]
        {
            new SalesInvoiceDetail
            {
                ReturnBehavior = ReturnBehavior.All
            }
        }
    });
}

//Long-running operation helper
public static ProcessResult GetProcessResult(
    DefaultSoapClient soapClient, InvokeResult invokeResult)
{
    while (true)
    {
        var processResult = soapClient.GetProcessStatus(invokeResult);
        switch (processResult.Status)
        {
            case ProcessStatus.Aborted:
                throw new SystemException("Process status: " + 
                processResult.Status + "; Error: " + processResult.Message);
            case ProcessStatus.NotExists:
            case ProcessStatus.Completed:
                //Go to normal processing
                return processResult;
            case ProcessStatus.InProcess:
                //Insert the needed waiting time here
                if (processResult.Seconds &gt; 30)
                    throw new TimeoutException();
                continue;
            default:
                throw new InvalidOperationException();
        }
    }
}</source>]]></column>
			<column name="PlainText"><![CDATA[Entry of a Direct Sales Invoice for a Shipped Order and Return A point-of-sale (POS) system can create and process sales invoices that contain both lines                 that are not linked to any sales order or shipment and lines for which a sales order                 and shipment have been created. Either type of line can include information about                 newly bought items or returned items.  To process these invoices, the POS system performs the following steps: For the returned items that are linked to a sales order and shipment,                         creates a new sales order of  RM  type (a generic authorized return).  In the created  RM  order, adds the previously issued invoice that                         contains the returned items. In the  RM  order, adds the newly ordered items. Creates and confirms shipments of the newly ordered items. Creates shipments with the  Receipt  operation for the returned items                         and confirms these shipments. Creates a Sales Orders invoice and releases the invoice. For simplicity, this example does not include the             creation of the payment or the application of the payment to the invoice. You can find             an example showing how to create and apply a payment in  Entry of a Direct Sales Invoice. User Scenario In the online shop, a customer buys a computer mouse, but then the customer decides to return                 the mouse. In the online shop, the customer creates an order that includes both the                 returned item and a motherboard, then the customer decides to get the motherboard                 and to return the mouse in the store. The customer comes to the store and picks up a                 patch cord from the store shelves. Thus, the customer would like to buy the patch                 cord, to return the mouse, and to pay for the previously ordered motherboard. In a                 POS system, one invoice is created for the whole operation.  Code Example You can use the code below to create a direct sales invoice that combines a shipped                 order and a return. To test this code example, configure your client             application and an  Acumatica ERP             instance as follows: Deploy a new  Acumatica ERP instance with the  SalesDemo  dataset inserted. For details on deploying                     an instance, see  To Deploy an Acumatica ERP Instance in the Installation Guide. On the   ([~/?ScreenId=CS100000|CS100000]) Enable/Disable Features                     (CS100000) form, enable the  Advanced SO Invoices  feature. In the client application, add a service reference to the  POS/17.200.01                      endpoint, which is an extension of the  Default/17.200.001  endpoint. For                     details on how to add a service reference, see  To Configure the Client Application in this                     guide. To sign in to the instance in the client application, use the company name                     (which you specified when you created the instance) and the  HQ                      branch. You can insert in the code the data of the direct sales invoice created in  Entry of a Direct Sales Invoice in a Non-Default Currency for the                 return lines for previously sold items. using System;
using System.Linq;
using System.IO;
using System.Threading;
using System.Collections.Generic;
//Add the namespace of the service reference here

public static void EnterDirectSalesInvoiceWithShippedOrderAndReturn(
   	DefaultSoapClient soapClient)
{
    //Input data
    //The customer
    const string CustomerABARTENDE = "ABARTENDE";
    //The sold stock item
    const string InventoryCONAIRT1 = "CONAIRT1";
    //The reference number of the customer's direct sales invoice 
    //whose line is returned 
    const string OriginalDirectSalesInvoiceReferenceNbr = "AR005522";
    //The number of the returned line in the invoice
    const int OriginalDirectSalesInvoiceLineNbr = 1;
    //The returned stock item from the direct sales invoice
    const string InventoryAACOMPUT01 = "AACOMPUT01";
    //The warehouse, which is the same for all items in this example
    const string WarehouseWHOLESALE = "WHOLESALE";
    //The location related to InventoryAACOMPUT01 and InventoryCONAIRT1
    const string LocationR1S1 = "R1S1";
    //A previously created customer's invoice that is linked to a sales order 
    //and whose line is returned
    const string OriginalInvoiceWithSalesOrderReferenceNbr = "AR003117";
    //The returned stock item from the sales order
    const string InventoryWIDGET01 = "WIDGET01";
    //The sold stock item from the sales order
    const string InventoryAALEGO500 = "AALEGO500";

    //Create a generic authorized return (that is, a sales order of the RM type)
    SalesOrder order = (SalesOrder)soapClient.Put(new SalesOrder
    {
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        OrderType = new StringValue { Value = "RM" },
        CustomerID = new StringValue { Value = CustomerABARTENDE },
        OrderNbr = new StringReturn()
    });

    //Add an invoice with the returned line to the sales order
    soapClient.Invoke(order, new SalesOrderAddInvoice
    {
        DocumentType = new StringValue { Value = "Invoice" },
        ReferenceNbr = new StringValue 
        { 
            Value = OriginalInvoiceWithSalesOrderReferenceNbr 
        }
    });

    //Obtain the sales order with the added invoice
    order = (SalesOrder)soapClient.Get(new SalesOrder
    {
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        OrderType = new StringSearch { Value = "RM" },
        OrderNbr = new StringSearch { Value = order.OrderNbr.Value },
        Details = new SalesOrderDetail[]
        {
            new SalesOrderDetail { ReturnBehavior = ReturnBehavior.All }
        }
    });

    //To the sales order, add a detail line with a newly ordered item
    var orderDetails = new SalesOrderDetail[]
    {
        order.Details[0],
        new SalesOrderDetail
        {
            InventoryID = new StringValue {Value = InventoryAALEGO500},
            OrderQty = new DecimalValue {Value = 1},
            Operation = new StringValue {Value = "Issue"}
        }
    };
    order.Details = orderDetails;

    //Create shipments for the created sales order
    //(The Invoke method updates the sales order first and then 
    //creates shipments.)
    InvokeResult invokeResult = soapClient.Invoke(
        order, 
        new SalesOrderCreateShipment 
        { 
            WarehouseID = new StringValue { Value = WarehouseWHOLESALE } 
        }
    );
    //Monitor the status of the long-running operation.
    //(The GetProcessResult function is defined below.)
    ProcessResult processResult = GetProcessResult(soapClient, invokeResult);

    //Obtain the sales order
    order = (SalesOrder)soapClient.Get(new SalesOrder
    {
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        ID = processResult.EntityId,
        Shipments = new SalesOrderShipment[]
        {
            new SalesOrderShipment { ReturnBehavior = ReturnBehavior.All }
        }
    });

    //Confirm each shipment
    foreach (SalesOrderShipment salesOrderShipment in order.Shipments)
    {
        if (salesOrderShipment.ShipmentType.Value == "Shipment")
        {
            Shipment shipment = (Shipment)soapClient.Get(new Shipment
            {
                ReturnBehavior = ReturnBehavior.OnlySpecified,
                ShipmentNbr = new StringSearch 
                { 
                   Value = salesOrderShipment.ShipmentNbr.Value 
                },
                Status = new StringReturn()
            });
            if (shipment.Status.Value != "Confirmed")
            {
                invokeResult = 
                   soapClient.Invoke(shipment, new ConfirmShipment());
                GetProcessResult(soapClient, invokeResult);
            }
        }
    }

    //Create a shipment with the Receipt operation for the returned items
    invokeResult = soapClient.Invoke(
        new SalesOrder{ID = order.ID}, 
        new SalesOrderCreateReceipt()
    );
    processResult = GetProcessResult(soapClient, invokeResult);

    //Obtain the sales order
    order = (SalesOrder)soapClient.Get(new SalesOrder
    {
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        ID = processResult.EntityId,
        OrderType = new StringReturn(),
        OrderNbr = new StringReturn(),
        Shipments = new SalesOrderShipment[]
        {
            new SalesOrderShipment { ReturnBehavior = ReturnBehavior.All }
        }
    });

    //Confirm each new shipment
    foreach (SalesOrderShipment salesOrderShipment in order.Shipments)
    {
        if (salesOrderShipment.ShipmentType.Value == "Shipment")
        {
            Shipment shipment = (Shipment)soapClient.Get(new Shipment
            {
                ReturnBehavior = ReturnBehavior.OnlySpecified,
                ShipmentNbr = new StringSearch 
                { 
                   Value = salesOrderShipment.ShipmentNbr.Value 
                },
                Status = new StringReturn()
            });
            if (shipment.Status.Value != "Confirmed")
            {
                invokeResult = 
                   soapClient.Invoke(shipment, new ConfirmShipment());
                processResult = GetProcessResult(soapClient, invokeResult);
            }
        }
    }

    //Create a sales invoice
    SalesInvoice invoice = (SalesInvoice)soapClient.Put(new SalesInvoice
    {
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        Type = new StringValue { Value = "Invoice" },
        CustomerID = new StringValue { Value = CustomerABARTENDE },
        Details = new SalesInvoiceDetail[]
        {
            //a sold stock item from sales order
            new SalesInvoiceDetail()
            {
                ReturnBehavior = ReturnBehavior.OnlySpecified,
                OrderType = new StringValue {Value = "RM"},
                OrderNbr = order.OrderNbr,
                ShipmentNbr = order.Shipments[0].ShipmentNbr,
                InventoryID = new StringValue {Value = InventoryAALEGO500},
                WarehouseID = new StringValue {Value = WarehouseWHOLESALE},
                Qty = new DecimalValue {Value = 1}
            },
            //a returned stock item from sales order
            new SalesInvoiceDetail()
            {
                ReturnBehavior = ReturnBehavior.OnlySpecified,
                OrderType = new StringValue {Value = "RM"},
                OrderNbr = order.OrderNbr,
                ShipmentNbr = order.Shipments[1].ShipmentNbr,
                InventoryID = new StringValue {Value = InventoryWIDGET01},
                WarehouseID = new StringValue {Value = WarehouseWHOLESALE},
                Qty = new DecimalValue {Value = -20}
            },
            //a returned stock item from the invoice
            new SalesInvoiceDetail()
            {
                ReturnBehavior = ReturnBehavior.OnlySpecified,
                OrigInvType = new StringValue {Value = "INV"},
                OrigInvNbr = new StringValue 
                {
                   Value = OriginalDirectSalesInvoiceReferenceNbr 
                },
                OrigInvLineNbr = new IntValue 
                { 
                   Value = OriginalDirectSalesInvoiceLineNbr 
                },
                InventoryID = new StringValue {Value = InventoryAACOMPUT01},
                WarehouseID = new StringValue {Value = WarehouseWHOLESALE},
                Location = new StringValue {Value = LocationR1S1},
                Qty = new DecimalValue {Value = -3}
            },
            //a sold stock item 
            new SalesInvoiceDetail()
            {
                ReturnBehavior = ReturnBehavior.OnlySpecified,
                InventoryID = new StringValue {Value = InventoryCONAIRT1},
                WarehouseID = new StringValue {Value = WarehouseWHOLESALE},
                Location = new StringValue {Value = LocationR1S1},
                Qty = new DecimalValue {Value = 20}
            }
        },
        //Specify additional data to be retrieved
        ReferenceNbr = new StringReturn(),
    });

    //Release the invoice
    invokeResult = soapClient.Invoke(
        new SalesInvoice
        {
            Type = new StringSearch { Value = "Invoice" },
            ReferenceNbr = new StringSearch 
            { 
                Value = invoice.ReferenceNbr.Value 
            },
        },
        new ReleaseSalesInvoice()
    );
    processResult = GetProcessResult(soapClient, invokeResult);

    //Obtain the released invoice with the needed information
    invoice = (SalesInvoice)soapClient.Get(new SalesInvoice
    {
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        ID = processResult.EntityId,
        Type = new StringReturn(),
        ReferenceNbr = new StringReturn(),
        Status = new StringReturn(),
        Balance = new DecimalReturn(),
        FinancialDetails = new SalesInvoiceFinancialDetails
        {
            ReturnBehavior = ReturnBehavior.OnlySpecified,
            BatchNbr = new StringReturn(),
        },
        Details = new SalesInvoiceDetail[]
        {
            new SalesInvoiceDetail
            {
                ReturnBehavior = ReturnBehavior.All
            }
        }
    });
}

//Long-running operation helper
public static ProcessResult GetProcessResult(
    DefaultSoapClient soapClient, InvokeResult invokeResult)
{
    while (true)
    {
        var processResult = soapClient.GetProcessStatus(invokeResult);
        switch (processResult.Status)
        {
            case ProcessStatus.Aborted:
                throw new SystemException("Process status: " + 
                processResult.Status + "; Error: " + processResult.Message);
            case ProcessStatus.NotExists:
            case ProcessStatus.Completed:
                //Go to normal processing
                return processResult;
            case ProcessStatus.InProcess:
                //Insert the needed waiting time here
                if (processResult.Seconds > 30)
                    throw new TimeoutException();
                continue;
            default:
                throw new InvalidOperationException();
        }
    }
} ]]></column>
		</row>
		<row PageID="9022d77b-4151-4780-899f-000c87909b08" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="3270b68b-2c00-f9e3-9079-353313592728" RecordSourceID="22377">
			<column name="Content"><![CDATA[
A point-of-sale (POS) system can create and process sales invoices that contain both lines that have not been linked to any sales order or shipment and lines for which a sales order has been created and a shipment has not been created. Either type of line can include information about newly bought items or returned items. {br}

To process these invoices, the POS system performs the following steps:[anchor|#_6047c0fb-c53a-4a33-8fd8-674971443467]
#Creates a new sales order of the ''RM'' type (a generic authorized return) with the new items and returned items. 
#Creates a payment.
#Creates a Sales Orders (SO) invoice and adds detail lines for both the items from the sales order and the new items.
#Applies the payment to the invoice.
#Releases the invoice. As a result of this operation, the sales order gets the ''Completed'' status in Acumatica ERP. The SO invoice is added to the '''Shipments''' tab of the [HelpRoot_FormReference\SO_30_10_00|Sales Orders] ([~/?ScreenId=SO301000|SO301000]) form and is treated by the system as a shipment (that is, the invoice updates shipped quantity in the sales order lines and updates inventory).
#:((({S:Hint}The sales order can be not completed if it was closed by the SO invoice partially (that is, if some lines of the sales order are not shipped or invoiced). 
)))

==User Scenario==
A customer comes to the store and through a self-service terminal creates a sales order to buy a computer and to return a computer mouse that the customer previously purchased in the store. Then the customer picks up a patch cord from the store shelves. The customer would like to buy the computer (specified in the created sales order) and the patch cord and to return the mouse (specified in the sales order). In a POS system, one invoice is created for the whole operation. 
==Code Example==
You can use the code below to create a direct sales invoice and include in it the items that were previously ordered but not shipped.[anchor|#_4bc507a0-2c07-4fba-9482-d90881746b17]{br}

To test this code example, configure your client application and an Acumatica ERP instance as follows:[anchor|#_f10862a7-314b-4d78-8202-bb32fa29898f]
*Deploy a new Acumatica ERP instance with the ''SalesDemo'' dataset inserted. For details on deploying an instance, see [HelpRoot_Install\Installing_ERP_Instance|To Deploy an Acumatica ERP Instance] in the Installation Guide.
*On the [HelpRoot_FormReference\CS_10_00_00|Enable/Disable Features] ([~/?ScreenId=CS100000|CS100000]) form, enable the ''Advanced SO Invoices'' feature.
*In the client application, add a service reference to the ''POS/17.200.01'' endpoint, which is an extension of the ''Default/17.200.001'' endpoint. For details on how to add a service reference, see [HelpRoot_Dev_Integration\IS__how_CB_Configure_Application|To Configure the Client Application] in this guide.
*To sign in to the instance in the client application, use the company name (which you specified when you created the instance) and the ''HQ'' branch.
<source lang="csharp">using System;
using System.Linq;
using System.IO;
using System.Threading;
using System.Collections.Generic;
//Add the namespace of the service reference here

public static void EnterDirectSalesInvoiceWithNotShippedSalesOrder(
    DefaultSoapClient soapClient)
{
    //Input data
    //The customer
    const string CustomerABARTENDE = "ABARTENDE";
    //The sold stock item from a new sales order
    const string InventoryAACOMPUT01 = "AACOMPUT01";
    //The returned stock item from the sales order
    const string InventoryAALEGO500 = "AALEGO500";
    //The sold serialized stock item
    const string InventoryAAPOWERAID = "AAPOWERAID";
    //The warehouse related to InventoryAAPOWERAID
    const string WarehouseRETAIL = "RETAIL";
    //The warehouse related to InventoryAAPOWERAID
    const string LocationSTORAGE = "STORAGE";
    //The sold non-stock item
    const string InventoryACCOMODATE = "ACCOMODATE";
    //The serial number related to InventoryAAPOWERAID
    const string SerialNbrAAPOWERAID = "LREX0";
    //The payment amount
    const decimal PaymentAmount = 2863.6m;

    //Create a sales order of RM type
    SalesOrder order = (SalesOrder)soapClient.Put(new SalesOrder
    {
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        OrderType = new StringValue { Value = "RM" },
        CustomerID = new StringValue { Value = CustomerABARTENDE },
        Details = new SalesOrderDetail[]
        {
            new SalesOrderDetail
            {
                ReturnBehavior = ReturnBehavior.All,
                InventoryID = new StringValue {Value = InventoryAACOMPUT01},
                OrderQty = new DecimalValue {Value = 2m},
                Operation = new StringValue {Value = "Issue"}
            },
            new SalesOrderDetail
            {
                ReturnBehavior = ReturnBehavior.All,
                InventoryID = new StringValue {Value = InventoryAALEGO500},
                OrderQty = new DecimalValue {Value = 2m},
                Operation = new StringValue {Value = "Receipt"}
            }
        },
        //Specify additional values to be retrieved
        OrderNbr = new StringReturn()
    }); 

    //Create a payment
    Payment payment = (Payment)soapClient.Put(new Payment
    {
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        Type = new StringValue { Value = "Payment" },
        CustomerID = new StringValue { Value = CustomerABARTENDE },
        PaymentAmount = new DecimalValue { Value = 10000m },
        ReferenceNbr = new StringReturn()
    });

    //Create a sales invoice
    SalesInvoice invoice = (SalesInvoice)soapClient.Put(new SalesInvoice
    {
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        Type = new StringValue { Value = "Invoice" },
        CustomerID = new StringValue { Value = CustomerABARTENDE },
        //Specify the details of the invoice
        Details = new SalesInvoiceDetail[]
        {
            //a sold stock item from the sales order
            new SalesInvoiceDetail()
            {
                ReturnBehavior = ReturnBehavior.OnlySpecified,
                InventoryID = new StringValue {Value = InventoryAACOMPUT01},
                OrderType = new StringValue {Value = "RM"},
                OrderNbr = new StringValue {Value = order.OrderNbr.Value},
                OrderLineNbr = order.Details[0].LineNbr,
                Qty = new DecimalValue {Value = 2}
            },
            //a returned stock item from the sales order
            new SalesInvoiceDetail()
            {
                ReturnBehavior = ReturnBehavior.OnlySpecified,
                InventoryID = new StringValue {Value = InventoryAALEGO500},
                OrderType = new StringValue {Value = "RM"},
                OrderNbr = new StringValue {Value = order.OrderNbr.Value},
                OrderLineNbr = order.Details[1].LineNbr,
                Qty = new DecimalValue {Value = -2},
            },
            //a sold serialized stock item
            new SalesInvoiceDetail()
            {
                ReturnBehavior = ReturnBehavior.OnlySpecified,
                InventoryID = new StringValue {Value = InventoryAAPOWERAID},
                WarehouseID = new StringValue {Value = WarehouseRETAIL},
                Location = new StringValue {Value = LocationSTORAGE},
                LotSerialNbr = new StringValue {Value = SerialNbrAAPOWERAID },
                Qty = new DecimalValue {Value = 100}
            },
            //a sold non-stock item
            new SalesInvoiceDetail()
            {
                ReturnBehavior = ReturnBehavior.OnlySpecified,
                InventoryID = new StringValue {Value = InventoryACCOMODATE},
                Qty = new DecimalValue {Value = 10},
                UnitPrice = new DecimalValue {Value = 200}
            },
        },
        //Specify additional values to be retrieved
        Balance = new DecimalReturn(),
        ApplicationsInvoice = new[]
        {
            new SalesInvoiceApplicationInvoice
            {
                ReturnBehavior = ReturnBehavior.All
            }
        }
    });

    //Select the application of the payment created in this example 
    //and specify the Amount Paid value
    SalesInvoiceApplicationInvoice application = invoice.ApplicationsInvoice
        .Where(applicationPayment =&gt;
        applicationPayment.AdjustingDocReferenceNbr.Value ==
        payment.ReferenceNbr.Value).Single();
    application.AmountPaid.Value = PaymentAmount;

    //Release the invoice.
    //(The Invoke method updates the invoice data (the AmountPaid value) first
    //and then releases the invoice.)
    InvokeResult invokeResult =
        soapClient.Invoke(invoice, new ReleaseSalesInvoice());
    //Monitor the status of the release operation.
    //(The GetProcessResult function is defined below.)
    ProcessResult processResult = GetProcessResult(soapClient, invokeResult);

    //Obtain the released invoice with the needed information
    invoice = (SalesInvoice)soapClient.Get(new SalesInvoice
    {
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        ID = processResult.EntityId,
        Type = new StringReturn(),
        ReferenceNbr = new StringReturn(),
        Status = new StringReturn(),
        FinancialDetails = new SalesInvoiceFinancialDetails
        {
            ReturnBehavior = ReturnBehavior.OnlySpecified,
            BatchNbr = new StringReturn(),
        },
        TaxDetails = new SalesInvoiceTaxDetail[]
        {
            new SalesInvoiceTaxDetail {ReturnBehavior = ReturnBehavior.All }
        },
        ApplicationsInvoice = new SalesInvoiceApplicationInvoice[]
        {
            new SalesInvoiceApplicationInvoice
            {
                ReturnBehavior = ReturnBehavior.All
            }
        },
        Details = new SalesInvoiceDetail[]
        {
            new SalesInvoiceDetail
            {
                ReturnBehavior = ReturnBehavior.All
            }
        }
    });
}

//Long-running operation helper
public static ProcessResult GetProcessResult(
    DefaultSoapClient soapClient, InvokeResult invokeResult)
{
    while (true)
    {
        var processResult = soapClient.GetProcessStatus(invokeResult);
        switch (processResult.Status)
        {
            case ProcessStatus.Aborted:
                throw new SystemException("Process status: " + 
                processResult.Status + "; Error: " + processResult.Message);
            case ProcessStatus.NotExists:
            case ProcessStatus.Completed:
                //Go to normal processing
                return processResult;
            case ProcessStatus.InProcess:
                //Insert the needed waiting time here
                if (processResult.Seconds &gt; 30)
                    throw new TimeoutException();
                continue;
            default:
                throw new InvalidOperationException();
        }
    }
}</source>]]></column>
			<column name="PlainText"><![CDATA[Entry of a Direct Sales Invoice for an Unshipped Sales Order A point-of-sale (POS) system can create and process sales invoices that contain both lines                 that have not been linked to any sales order or shipment and lines for which a sales                 order has been created and a shipment has not been created. Either type of line can                 include information about newly bought items or returned items.  To process these invoices, the POS system performs the following steps: Creates a new sales order of the  RM  type (a generic authorized                         return) with the new items and returned items.  Creates a payment. Creates a Sales Orders (SO) invoice and adds detail lines for both the items                         from the sales order and the new items. Applies the payment to the invoice. Releases the invoice. As a result of this operation, the sales order gets                         the  Completed  status in  Acumatica ERP. The SO invoice is added to the  Shipments  tab of                         the   ([~/?ScreenId=SO301000|SO301000]) Sales Orders                         (SO301000) form and is treated by the system as a shipment (that is, the                         invoice updates shipped quantity in the sales order lines and updates                             inventory). The sales order can be not completed if it was closed                             by the SO invoice partially (that is, if some lines of the sales order                             are not shipped or invoiced).  User Scenario A customer comes to the store and through a self-service terminal creates a sales order to buy                 a computer and to return a computer mouse that the customer previously purchased in                 the store. Then the customer picks up a patch cord from the store shelves. The                 customer would like to buy the computer (specified in the created sales order) and                 the patch cord and to return the mouse (specified in the sales order). In a POS                 system, one invoice is created for the whole operation.  Code Example You can use the code below to create a direct sales invoice and include in it the items that                 were previously ordered but not shipped. To test this code example, configure your client             application and an  Acumatica ERP             instance as follows: Deploy a new  Acumatica ERP instance with the  SalesDemo  dataset inserted. For details on deploying                     an instance, see  To Deploy an Acumatica ERP Instance in the Installation Guide. On the   ([~/?ScreenId=CS100000|CS100000]) Enable/Disable Features                     (CS100000) form, enable the  Advanced SO Invoices  feature. In the client application, add a service reference to the  POS/17.200.01                      endpoint, which is an extension of the  Default/17.200.001  endpoint. For                     details on how to add a service reference, see  To Configure the Client Application in this                     guide. To sign in to the instance in the client application, use the company name                     (which you specified when you created the instance) and the  HQ                      branch. using System;
using System.Linq;
using System.IO;
using System.Threading;
using System.Collections.Generic;
//Add the namespace of the service reference here

public static void EnterDirectSalesInvoiceWithNotShippedSalesOrder(
    DefaultSoapClient soapClient)
{
    //Input data
    //The customer
    const string CustomerABARTENDE = "ABARTENDE";
    //The sold stock item from a new sales order
    const string InventoryAACOMPUT01 = "AACOMPUT01";
    //The returned stock item from the sales order
    const string InventoryAALEGO500 = "AALEGO500";
    //The sold serialized stock item
    const string InventoryAAPOWERAID = "AAPOWERAID";
    //The warehouse related to InventoryAAPOWERAID
    const string WarehouseRETAIL = "RETAIL";
    //The warehouse related to InventoryAAPOWERAID
    const string LocationSTORAGE = "STORAGE";
    //The sold non-stock item
    const string InventoryACCOMODATE = "ACCOMODATE";
    //The serial number related to InventoryAAPOWERAID
    const string SerialNbrAAPOWERAID = "LREX0";
    //The payment amount
    const decimal PaymentAmount = 2863.6m;

    //Create a sales order of RM type
    SalesOrder order = (SalesOrder)soapClient.Put(new SalesOrder
    {
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        OrderType = new StringValue { Value = "RM" },
        CustomerID = new StringValue { Value = CustomerABARTENDE },
        Details = new SalesOrderDetail[]
        {
            new SalesOrderDetail
            {
                ReturnBehavior = ReturnBehavior.All,
                InventoryID = new StringValue {Value = InventoryAACOMPUT01},
                OrderQty = new DecimalValue {Value = 2m},
                Operation = new StringValue {Value = "Issue"}
            },
            new SalesOrderDetail
            {
                ReturnBehavior = ReturnBehavior.All,
                InventoryID = new StringValue {Value = InventoryAALEGO500},
                OrderQty = new DecimalValue {Value = 2m},
                Operation = new StringValue {Value = "Receipt"}
            }
        },
        //Specify additional values to be retrieved
        OrderNbr = new StringReturn()
    }); 

    //Create a payment
    Payment payment = (Payment)soapClient.Put(new Payment
    {
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        Type = new StringValue { Value = "Payment" },
        CustomerID = new StringValue { Value = CustomerABARTENDE },
        PaymentAmount = new DecimalValue { Value = 10000m },
        ReferenceNbr = new StringReturn()
    });

    //Create a sales invoice
    SalesInvoice invoice = (SalesInvoice)soapClient.Put(new SalesInvoice
    {
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        Type = new StringValue { Value = "Invoice" },
        CustomerID = new StringValue { Value = CustomerABARTENDE },
        //Specify the details of the invoice
        Details = new SalesInvoiceDetail[]
        {
            //a sold stock item from the sales order
            new SalesInvoiceDetail()
            {
                ReturnBehavior = ReturnBehavior.OnlySpecified,
                InventoryID = new StringValue {Value = InventoryAACOMPUT01},
                OrderType = new StringValue {Value = "RM"},
                OrderNbr = new StringValue {Value = order.OrderNbr.Value},
                OrderLineNbr = order.Details[0].LineNbr,
                Qty = new DecimalValue {Value = 2}
            },
            //a returned stock item from the sales order
            new SalesInvoiceDetail()
            {
                ReturnBehavior = ReturnBehavior.OnlySpecified,
                InventoryID = new StringValue {Value = InventoryAALEGO500},
                OrderType = new StringValue {Value = "RM"},
                OrderNbr = new StringValue {Value = order.OrderNbr.Value},
                OrderLineNbr = order.Details[1].LineNbr,
                Qty = new DecimalValue {Value = -2},
            },
            //a sold serialized stock item
            new SalesInvoiceDetail()
            {
                ReturnBehavior = ReturnBehavior.OnlySpecified,
                InventoryID = new StringValue {Value = InventoryAAPOWERAID},
                WarehouseID = new StringValue {Value = WarehouseRETAIL},
                Location = new StringValue {Value = LocationSTORAGE},
                LotSerialNbr = new StringValue {Value = SerialNbrAAPOWERAID },
                Qty = new DecimalValue {Value = 100}
            },
            //a sold non-stock item
            new SalesInvoiceDetail()
            {
                ReturnBehavior = ReturnBehavior.OnlySpecified,
                InventoryID = new StringValue {Value = InventoryACCOMODATE},
                Qty = new DecimalValue {Value = 10},
                UnitPrice = new DecimalValue {Value = 200}
            },
        },
        //Specify additional values to be retrieved
        Balance = new DecimalReturn(),
        ApplicationsInvoice = new[]
        {
            new SalesInvoiceApplicationInvoice
            {
                ReturnBehavior = ReturnBehavior.All
            }
        }
    });

    //Select the application of the payment created in this example 
    //and specify the Amount Paid value
    SalesInvoiceApplicationInvoice application = invoice.ApplicationsInvoice
        .Where(applicationPayment =>
        applicationPayment.AdjustingDocReferenceNbr.Value ==
        payment.ReferenceNbr.Value).Single();
    application.AmountPaid.Value = PaymentAmount;

    //Release the invoice.
    //(The Invoke method updates the invoice data (the AmountPaid value) first
    //and then releases the invoice.)
    InvokeResult invokeResult =
        soapClient.Invoke(invoice, new ReleaseSalesInvoice());
    //Monitor the status of the release operation.
    //(The GetProcessResult function is defined below.)
    ProcessResult processResult = GetProcessResult(soapClient, invokeResult);

    //Obtain the released invoice with the needed information
    invoice = (SalesInvoice)soapClient.Get(new SalesInvoice
    {
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        ID = processResult.EntityId,
        Type = new StringReturn(),
        ReferenceNbr = new StringReturn(),
        Status = new StringReturn(),
        FinancialDetails = new SalesInvoiceFinancialDetails
        {
            ReturnBehavior = ReturnBehavior.OnlySpecified,
            BatchNbr = new StringReturn(),
        },
        TaxDetails = new SalesInvoiceTaxDetail[]
        {
            new SalesInvoiceTaxDetail {ReturnBehavior = ReturnBehavior.All }
        },
        ApplicationsInvoice = new SalesInvoiceApplicationInvoice[]
        {
            new SalesInvoiceApplicationInvoice
            {
                ReturnBehavior = ReturnBehavior.All
            }
        },
        Details = new SalesInvoiceDetail[]
        {
            new SalesInvoiceDetail
            {
                ReturnBehavior = ReturnBehavior.All
            }
        }
    });
}

//Long-running operation helper
public static ProcessResult GetProcessResult(
    DefaultSoapClient soapClient, InvokeResult invokeResult)
{
    while (true)
    {
        var processResult = soapClient.GetProcessStatus(invokeResult);
        switch (processResult.Status)
        {
            case ProcessStatus.Aborted:
                throw new SystemException("Process status: " + 
                processResult.Status + "; Error: " + processResult.Message);
            case ProcessStatus.NotExists:
            case ProcessStatus.Completed:
                //Go to normal processing
                return processResult;
            case ProcessStatus.InProcess:
                //Insert the needed waiting time here
                if (processResult.Seconds > 30)
                    throw new TimeoutException();
                continue;
            default:
                throw new InvalidOperationException();
        }
    }
} ]]></column>
		</row>
		<row PageID="4032932b-6e7d-47d8-af7e-bbb90686dd3b" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="0492a997-12d8-9288-e218-b8e764482ac6" RecordSourceID="22377">
			<column name="Content"><![CDATA[
A point-of-sale (POS) system can create and process a sales invoice that contains both of the following: lines that have not been linked to any sales order or shipment, and lines for which a sales order has been created and a shipment has been created (but the shipment does not include all items of the sales order). {br}

To process an invoice of this type, the POS system performs the following steps:[anchor|#_0cf0752a-942e-44ca-8998-e8a60e885b4d]
#Creates a new sales order of the ''SO'' type with multiple items. 
#Creates a payment.
#Creates a Sales Orders invoice and adds detail lines for some (but not all) items from the sales order and the new items.
#Applies the payment to the invoice.
#Releases the invoice. At this moment, not all lines of the sales order are shipped. The sales order has the ''Open'' status in Acumatica ERP. On the '''Shipments''' tab of the [HelpRoot_FormReference\SO_30_10_00|Sales Orders] ([~/?ScreenId=SO301000|SO301000]) form, for the sales order lines added to the invoice, a dummy shipment is created with the link to the invoice. 
#Creates the second payment.
#Applies the second payment to the sales order.
#Creates a shipment or multiple shipments for the remaining (not shipped) lines of the sales order and confirms each shipment.
#Creates a Sales Orders invoice for each shipment and releases each invoice. As a result of the release of the invoice or invoices the sales order gets the ''Completed'' status in Acumatica ERP.
#:((({S:Hint}The sales order can be not completed if it was closed by the SO invoice partially (that is, if some lines of the sales order are not shipped or invoiced). 
)))

==User Scenario==A customer comes to the store and through a self-service terminal creates a sales order to buy a computer and a computer mouse. Then the customer picks up a patch cord from the store shelves. The customer would like to buy the mouse (from the sales order) and the grabbed patch cord, and to have the computer shipped to the customer&rsquo;s home. In a POS system, one invoice is created for the purchase in the store and another invoice is created for the computer to be shipped. 
==Code Example==
You can use the code below to create a direct sales invoice and include in it the previously ordered items that aren&rsquo;t yet shipped, and to configure the shipment and the invoice for the shipment.[anchor|#_c202f9e8-9f0c-40a8-9faf-34afa5412def]{br}

To test this code example, configure your client application and an Acumatica ERP instance as follows:[anchor|#_3638af9c-2474-4dab-9eaf-c79e41aa94f6]
*Deploy a new Acumatica ERP instance with the ''SalesDemo'' dataset inserted. For details on deploying an instance, see [HelpRoot_Install\Installing_ERP_Instance|To Deploy an Acumatica ERP Instance] in the Installation Guide.
*On the [HelpRoot_FormReference\CS_10_00_00|Enable/Disable Features] ([~/?ScreenId=CS100000|CS100000]) form, enable the ''Advanced SO Invoices'' feature.
*In the client application, add a service reference to the ''POS/17.200.01'' endpoint, which is an extension of the ''Default/17.200.001'' endpoint. For details on how to add a service reference, see [HelpRoot_Dev_Integration\IS__how_CB_Configure_Application|To Configure the Client Application] in this guide.
*To sign in to the instance in the client application, use the company name (which you specified when you created the instance) and the ''HQ'' branch.
<source lang="csharp">using System;
using System.Linq;
using System.IO;
using System.Threading;
using System.Collections.Generic;
//Add the namespace of the service reference here

public static void EnterDirectSalesInvoiceWithPartiallyShippedOrder(
    DefaultSoapClient soapClient)
{
    //Input data
    //The customer
    const string CustomerABARTENDE = "ABARTENDE";
    //The sold stock items from a new sales order
    const string InventoryAACOMPUT01 = "AACOMPUT01";
    const string InventoryCONAIRT1 = "CONAIRT1";
    //The stock item (from the sales order) that is shipped later 
    const string InventoryAALEGO500 = "AALEGO500";
    //The warehouse related to InventoryAALEGO500
    const string WarehouseWHOLESALE = "WHOLESALE";
    //The sold serialized stock item
    const string InventoryAAPOWERAID = "AAPOWERAID";
    //The warehouse related to InventoryAAPOWERAID
    const string WarehouseRETAIL = "RETAIL";
    //The location related to InventoryAAPOWERAID
    const string LocationSTORAGE = "STORAGE";
    //The serial number of InventoryAAPOWERAID
    const string LotSerialNbrLREX000004 = "LREX000004";
    //The first payment amount
    const decimal PaymentAmount = 922m;
    //The second payment amount
    const decimal PaymentAmount2 = 560m;

    //Create a sales order of the SO type
    SalesOrder order = (SalesOrder)soapClient.Put(new SalesOrder
    {
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        OrderType = new StringValue { Value = "SO" },
        CustomerID = new StringValue { Value = CustomerABARTENDE },
        Details = new SalesOrderDetail[]
        {
            new SalesOrderDetail
            {
                ReturnBehavior = ReturnBehavior.All,
                InventoryID = new StringValue {Value = InventoryAACOMPUT01},
                OrderQty = new DecimalValue {Value = 4m},
                UnitPrice = new DecimalValue { Value = 200}
            },
            new SalesOrderDetail
            {
                ReturnBehavior = ReturnBehavior.All,
                InventoryID = new StringValue {Value = InventoryAALEGO500},
                OrderQty = new DecimalValue {Value = 4m},
                UnitPrice = new DecimalValue { Value = 100}
            },
            new SalesOrderDetail
            {
                ReturnBehavior = ReturnBehavior.All,
                InventoryID = new StringValue {Value = InventoryCONAIRT1},
                OrderQty = new DecimalValue {Value = 4m},
                UnitPrice = new DecimalValue { Value = 50}
            }
        },
        OrderNbr = new StringReturn()
    }); 

    //Create a payment
    Payment payment = (Payment)soapClient.Put(new Payment
    {
        Type = new StringValue { Value = "Payment" },
        CustomerID = new StringValue { Value = CustomerABARTENDE },
        PaymentAmount = new DecimalValue { Value = PaymentAmount }
    });

    //Create a sales invoice
    SalesInvoice invoice = (SalesInvoice)soapClient.Put(new SalesInvoice
    {
        Type = new StringValue { Value = "Invoice" },
        CustomerID = new StringValue { Value = CustomerABARTENDE },
        Details = new SalesInvoiceDetail[]
        {
            //a sold serialized stock item
            new SalesInvoiceDetail()
            {
                InventoryID = new StringValue {Value = InventoryAAPOWERAID},
                WarehouseID = new StringValue {Value = WarehouseRETAIL},
                Location = new StringValue {Value = LocationSTORAGE},
                Qty = new DecimalValue {Value = 2},
                LotSerialNbr = new StringValue {Value = LotSerialNbrLREX000004},
                ExpirationDate = new DateTimeValue 
                {
                    Value = new DateTime(2018, 10, 30)
                },
                UnitPrice = new DecimalValue { Value = 5m}
            },
            //a sold stock item from the sales order
            new SalesInvoiceDetail()
            {
                InventoryID = new StringValue {Value = InventoryAACOMPUT01},
                OrderType = new StringValue {Value = "SO"},
                OrderNbr = new StringValue {Value = order.OrderNbr.Value},
                OrderLineNbr = order.Details[0].LineNbr,
                Qty = new DecimalValue {Value = 4}
            },
            //a sold stock item from the sales order
            new SalesInvoiceDetail()
            {
                InventoryID = new StringValue {Value = InventoryCONAIRT1},
                OrderType = new StringValue {Value = "SO"},
                OrderNbr = new StringValue {Value = order.OrderNbr.Value},
                OrderLineNbr = order.Details[2].LineNbr,
                Qty = new DecimalValue {Value = 2},
            }
        },
        //Specify additional values to be retrieved
        ApplicationsInvoice = new[]
        {
            new SalesInvoiceApplicationInvoice
            {
                ReturnBehavior = ReturnBehavior.All
            }
        }
    });

    //Select the application of the payment created in this example 
    //and specify the Amount Paid value
    SalesInvoiceApplicationInvoice application = invoice.ApplicationsInvoice
        .Where(applicationPayment =&gt;
        applicationPayment.AdjustingDocReferenceNbr.Value ==
        payment.ReferenceNbr.Value).Single();
    application.AmountPaid.Value = PaymentAmount;

    //Release the invoice.
    //(The Invoke method updates the invoice data (the AmountPaid value) first
    //and then releases the invoice.)
    InvokeResult invokeResult =
        soapClient.Invoke(invoice, new ReleaseSalesInvoice());
    //Monitor the status of the release operation.
    //(The GetProcessResult function is defined below.)
    ProcessResult processResult = GetProcessResult(soapClient, invokeResult);

    //Obtain the released invoice with the needed information
    invoice = (SalesInvoice)soapClient.Get(new SalesInvoice
    {
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        ID = processResult.EntityId,
        Type = new StringReturn(),
        ReferenceNbr = new StringReturn(),
        Status = new StringReturn(),
        FinancialDetails = new SalesInvoiceFinancialDetails
        {
            ReturnBehavior = ReturnBehavior.OnlySpecified,
            BatchNbr = new StringReturn(),
        },
        TaxDetails = new SalesInvoiceTaxDetail[]
        {
            new SalesInvoiceTaxDetail {ReturnBehavior = ReturnBehavior.All }
        },
        ApplicationsInvoice = new SalesInvoiceApplicationInvoice[]
        {
            new SalesInvoiceApplicationInvoice
            {
                ReturnBehavior = ReturnBehavior.All
            }
        },
        Details = new SalesInvoiceDetail[]
        {
            new SalesInvoiceDetail
            {
                ReturnBehavior = ReturnBehavior.All
            }
        }
    });

    //Obtain the sales order with the needed data
    order = (SalesOrder)soapClient.Get(new SalesOrder
    {
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        OrderType = new StringSearch { Value = order.OrderType.Value},
        OrderNbr = new StringSearch { Value = order.OrderNbr.Value},
        Status = new StringReturn(),
        Shipments = new SalesOrderShipment[]
        {
            new SalesOrderShipment
            {
                ReturnBehavior = ReturnBehavior.All
            }
        },
        Details = new SalesOrderDetail[]
        {
            new SalesOrderDetail
            {
                ReturnBehavior = ReturnBehavior.All
            }
        }
    });

    //Create the second payment
    Payment payment2 = (Payment)soapClient.Put(new Payment
    {
        Type = new StringValue { Value = "Payment" },
        CustomerID = new StringValue { Value = CustomerABARTENDE },
        PaymentAmount = new DecimalValue { Value = PaymentAmount2 }
    });

    //Apply the second payment to the sales order
    order.Payments = new Payments[]
    {
        new Payments()
        {
            ReferenceNbr = payment2.ReferenceNbr,
            AppliedToOrder = new DecimalValue {Value = PaymentAmount2}
        }
    };

    //Create a shipment for the not-yet-shipped items of the sales order
    //(The Invoke method updates the sales order first
    //and then creates shipments.)
    invokeResult = soapClient.Invoke(
        order, 
        new SalesOrderCreateShipment
        {
            WarehouseID = new StringValue { Value = WarehouseWHOLESALE }
        }
    );
    //Monitor the status of the operation
    processResult = GetProcessResult(soapClient, invokeResult);

    //Obtain the sales order with the created shipment or shipments
    order = (SalesOrder)soapClient.Get(new SalesOrder
    {
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        ID = processResult.EntityId,
        OrderType = new StringReturn(),
        OrderNbr = new StringReturn(),
        Status = new StringReturn(),
        Shipments = new SalesOrderShipment[]
        {
            new SalesOrderShipment { ReturnBehavior = ReturnBehavior.All }
        }
    });

    //Confirm each shipment and create an invoice from it
    List&lt;Shipment&gt; invoicedShipments = new List&lt;Shipment&gt;();
    foreach (SalesOrderShipment salesOrderShipment in order.Shipments)
    {
        //Confirm each shipment
        if (salesOrderShipment.ShipmentType.Value == "Shipment")
        {
            Shipment shipment = (Shipment)soapClient.Get(new Shipment
            {
                ReturnBehavior = ReturnBehavior.OnlySpecified,
                ShipmentNbr = new StringSearch
                {
                    Value = salesOrderShipment.ShipmentNbr.Value
                },
                Status = new StringReturn()
            });
            if (shipment.Status.Value != "Confirmed")
            {
                invokeResult =
                    soapClient.Invoke(shipment, new ConfirmShipment());
                processResult = GetProcessResult(soapClient, invokeResult);
            }
        }
        //Create an invoice for each shipment
        if (salesOrderShipment.ShipmentType.Value == "Shipment" && 
            salesOrderShipment.InvoiceNbr.Value == null)
        {
            Shipment shipment = (Shipment)soapClient.Get(new Shipment
            {
                ReturnBehavior = ReturnBehavior.OnlySpecified,
                ShipmentNbr = new StringSearch
                {
                    Value = salesOrderShipment.ShipmentNbr.Value
                },
                Status = new StringReturn()
            });

            invokeResult = soapClient.Invoke(shipment, new PrepareInvoice());
            processResult = GetProcessResult(soapClient, invokeResult);

            invoicedShipments.Add((Shipment)soapClient.Get(new Shipment
            {
                ReturnBehavior = ReturnBehavior.OnlySpecified,
                ID = processResult.EntityId,
                ShipmentNbr = new StringReturn()
            }));
        }
    }

    //Obtain the sales order with the updated shipment or shipments
    order = (SalesOrder)soapClient.Get(order);

    //Release the invoices for each shipment
    foreach (SalesOrderShipment salesOrderShipment in order.Shipments)
    {
        if (invoicedShipments.FindIndex(x =&gt; 
            x.ShipmentNbr.Value == salesOrderShipment.ShipmentNbr.Value) &gt; -1)
        {
            SalesInvoice invoice2 = (SalesInvoice)soapClient.Get(
                new SalesInvoice()
                {
                    Type = new StringSearch 
                    { 
                        Value = salesOrderShipment.InvoiceType.Value 
                    },
                    ReferenceNbr = new StringSearch 
                    { 
                        Value = salesOrderShipment.InvoiceNbr.Value 
                    }
                }
            );

            //Release the invoice
            invokeResult =
                soapClient.Invoke(invoice2, new ReleaseSalesInvoice());
            //Monitor the status of the release operation
            processResult = GetProcessResult(soapClient, invokeResult);
        }
    }
}

//Long-running operation helper
public static ProcessResult GetProcessResult(
    DefaultSoapClient soapClient, InvokeResult invokeResult)
{
    while (true)
    {
        var processResult = soapClient.GetProcessStatus(invokeResult);
        switch (processResult.Status)
        {
            case ProcessStatus.Aborted:
                throw new SystemException("Process status: " + 
                processResult.Status + "; Error: " + processResult.Message);
            case ProcessStatus.NotExists:
            case ProcessStatus.Completed:
                //Go to normal processing
                return processResult;
            case ProcessStatus.InProcess:
                //Insert the needed waiting time here
                if (processResult.Seconds &gt; 30)
                    throw new TimeoutException();
                continue;
            default:
                throw new InvalidOperationException();
        }
    }
}</source>]]></column>
			<column name="PlainText"><![CDATA[Entry of a Direct Sales Invoice for a Partially Shipped Sales Order A point-of-sale (POS) system can create and process a sales invoice that contains both of the                 following: lines that have not been linked to any sales order or shipment, and lines                 for which a sales order has been created and a shipment has been created (but the                 shipment does not include all items of the sales order).  To process an invoice of this type, the POS system performs the following steps: Creates a new sales order of the  SO  type with multiple items.  Creates a payment. Creates a Sales Orders invoice and adds detail lines for some (but not all)                         items from the sales order and the new items. Applies the payment to the invoice. Releases the invoice. At this moment, not all lines of the sales order are                         shipped. The sales order has the  Open  status in  Acumatica ERP. On the  Shipments  tab of the   ([~/?ScreenId=SO301000|SO301000]) Sales Orders                         (SO301000) form, for the sales order lines added to the invoice, a dummy                         shipment is created with the link to the invoice.  Creates the second payment. Applies the second payment to the sales order. Creates a shipment or multiple shipments for the remaining (not shipped)                         lines of the sales order and confirms each shipment. Creates a Sales Orders invoice for each shipment and releases each invoice.                         As a result of the release of the invoice or invoices the sales order gets                         the  Completed  status in  Acumatica ERP. The sales order can be not completed if it was closed by the SO                             invoice partially (that is, if some lines of the sales order are not                             shipped or invoiced).  User Scenario A customer comes to the store and through a self-service             terminal creates a sales order to buy a computer and a computer mouse. Then the customer             picks up a patch cord from the store shelves. The customer would like to buy the mouse             (from the sales order) and the grabbed patch cord, and to have the computer shipped to             the customer's home. In a POS system, one invoice is created for the purchase in the             store and another invoice is created for the computer to be shipped.  Code Example You can use the code below to create a direct sales invoice and include in it the previously                 ordered items that aren't yet shipped, and to configure the shipment and the invoice                 for the shipment. To test this code example, configure your client             application and an  Acumatica ERP             instance as follows: Deploy a new  Acumatica ERP instance with the  SalesDemo  dataset inserted. For details on deploying                     an instance, see  To Deploy an Acumatica ERP Instance in the Installation Guide. On the   ([~/?ScreenId=CS100000|CS100000]) Enable/Disable Features                     (CS100000) form, enable the  Advanced SO Invoices  feature. In the client application, add a service reference to the  POS/17.200.01                      endpoint, which is an extension of the  Default/17.200.001  endpoint. For                     details on how to add a service reference, see  To Configure the Client Application in this                     guide. To sign in to the instance in the client application, use the company name                     (which you specified when you created the instance) and the  HQ                      branch. using System;
using System.Linq;
using System.IO;
using System.Threading;
using System.Collections.Generic;
//Add the namespace of the service reference here

public static void EnterDirectSalesInvoiceWithPartiallyShippedOrder(
    DefaultSoapClient soapClient)
{
    //Input data
    //The customer
    const string CustomerABARTENDE = "ABARTENDE";
    //The sold stock items from a new sales order
    const string InventoryAACOMPUT01 = "AACOMPUT01";
    const string InventoryCONAIRT1 = "CONAIRT1";
    //The stock item (from the sales order) that is shipped later 
    const string InventoryAALEGO500 = "AALEGO500";
    //The warehouse related to InventoryAALEGO500
    const string WarehouseWHOLESALE = "WHOLESALE";
    //The sold serialized stock item
    const string InventoryAAPOWERAID = "AAPOWERAID";
    //The warehouse related to InventoryAAPOWERAID
    const string WarehouseRETAIL = "RETAIL";
    //The location related to InventoryAAPOWERAID
    const string LocationSTORAGE = "STORAGE";
    //The serial number of InventoryAAPOWERAID
    const string LotSerialNbrLREX000004 = "LREX000004";
    //The first payment amount
    const decimal PaymentAmount = 922m;
    //The second payment amount
    const decimal PaymentAmount2 = 560m;

    //Create a sales order of the SO type
    SalesOrder order = (SalesOrder)soapClient.Put(new SalesOrder
    {
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        OrderType = new StringValue { Value = "SO" },
        CustomerID = new StringValue { Value = CustomerABARTENDE },
        Details = new SalesOrderDetail[]
        {
            new SalesOrderDetail
            {
                ReturnBehavior = ReturnBehavior.All,
                InventoryID = new StringValue {Value = InventoryAACOMPUT01},
                OrderQty = new DecimalValue {Value = 4m},
                UnitPrice = new DecimalValue { Value = 200}
            },
            new SalesOrderDetail
            {
                ReturnBehavior = ReturnBehavior.All,
                InventoryID = new StringValue {Value = InventoryAALEGO500},
                OrderQty = new DecimalValue {Value = 4m},
                UnitPrice = new DecimalValue { Value = 100}
            },
            new SalesOrderDetail
            {
                ReturnBehavior = ReturnBehavior.All,
                InventoryID = new StringValue {Value = InventoryCONAIRT1},
                OrderQty = new DecimalValue {Value = 4m},
                UnitPrice = new DecimalValue { Value = 50}
            }
        },
        OrderNbr = new StringReturn()
    }); 

    //Create a payment
    Payment payment = (Payment)soapClient.Put(new Payment
    {
        Type = new StringValue { Value = "Payment" },
        CustomerID = new StringValue { Value = CustomerABARTENDE },
        PaymentAmount = new DecimalValue { Value = PaymentAmount }
    });

    //Create a sales invoice
    SalesInvoice invoice = (SalesInvoice)soapClient.Put(new SalesInvoice
    {
        Type = new StringValue { Value = "Invoice" },
        CustomerID = new StringValue { Value = CustomerABARTENDE },
        Details = new SalesInvoiceDetail[]
        {
            //a sold serialized stock item
            new SalesInvoiceDetail()
            {
                InventoryID = new StringValue {Value = InventoryAAPOWERAID},
                WarehouseID = new StringValue {Value = WarehouseRETAIL},
                Location = new StringValue {Value = LocationSTORAGE},
                Qty = new DecimalValue {Value = 2},
                LotSerialNbr = new StringValue {Value = LotSerialNbrLREX000004},
                ExpirationDate = new DateTimeValue 
                {
                    Value = new DateTime(2018, 10, 30)
                },
                UnitPrice = new DecimalValue { Value = 5m}
            },
            //a sold stock item from the sales order
            new SalesInvoiceDetail()
            {
                InventoryID = new StringValue {Value = InventoryAACOMPUT01},
                OrderType = new StringValue {Value = "SO"},
                OrderNbr = new StringValue {Value = order.OrderNbr.Value},
                OrderLineNbr = order.Details[0].LineNbr,
                Qty = new DecimalValue {Value = 4}
            },
            //a sold stock item from the sales order
            new SalesInvoiceDetail()
            {
                InventoryID = new StringValue {Value = InventoryCONAIRT1},
                OrderType = new StringValue {Value = "SO"},
                OrderNbr = new StringValue {Value = order.OrderNbr.Value},
                OrderLineNbr = order.Details[2].LineNbr,
                Qty = new DecimalValue {Value = 2},
            }
        },
        //Specify additional values to be retrieved
        ApplicationsInvoice = new[]
        {
            new SalesInvoiceApplicationInvoice
            {
                ReturnBehavior = ReturnBehavior.All
            }
        }
    });

    //Select the application of the payment created in this example 
    //and specify the Amount Paid value
    SalesInvoiceApplicationInvoice application = invoice.ApplicationsInvoice
        .Where(applicationPayment =>
        applicationPayment.AdjustingDocReferenceNbr.Value ==
        payment.ReferenceNbr.Value).Single();
    application.AmountPaid.Value = PaymentAmount;

    //Release the invoice.
    //(The Invoke method updates the invoice data (the AmountPaid value) first
    //and then releases the invoice.)
    InvokeResult invokeResult =
        soapClient.Invoke(invoice, new ReleaseSalesInvoice());
    //Monitor the status of the release operation.
    //(The GetProcessResult function is defined below.)
    ProcessResult processResult = GetProcessResult(soapClient, invokeResult);

    //Obtain the released invoice with the needed information
    invoice = (SalesInvoice)soapClient.Get(new SalesInvoice
    {
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        ID = processResult.EntityId,
        Type = new StringReturn(),
        ReferenceNbr = new StringReturn(),
        Status = new StringReturn(),
        FinancialDetails = new SalesInvoiceFinancialDetails
        {
            ReturnBehavior = ReturnBehavior.OnlySpecified,
            BatchNbr = new StringReturn(),
        },
        TaxDetails = new SalesInvoiceTaxDetail[]
        {
            new SalesInvoiceTaxDetail {ReturnBehavior = ReturnBehavior.All }
        },
        ApplicationsInvoice = new SalesInvoiceApplicationInvoice[]
        {
            new SalesInvoiceApplicationInvoice
            {
                ReturnBehavior = ReturnBehavior.All
            }
        },
        Details = new SalesInvoiceDetail[]
        {
            new SalesInvoiceDetail
            {
                ReturnBehavior = ReturnBehavior.All
            }
        }
    });

    //Obtain the sales order with the needed data
    order = (SalesOrder)soapClient.Get(new SalesOrder
    {
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        OrderType = new StringSearch { Value = order.OrderType.Value},
        OrderNbr = new StringSearch { Value = order.OrderNbr.Value},
        Status = new StringReturn(),
        Shipments = new SalesOrderShipment[]
        {
            new SalesOrderShipment
            {
                ReturnBehavior = ReturnBehavior.All
            }
        },
        Details = new SalesOrderDetail[]
        {
            new SalesOrderDetail
            {
                ReturnBehavior = ReturnBehavior.All
            }
        }
    });

    //Create the second payment
    Payment payment2 = (Payment)soapClient.Put(new Payment
    {
        Type = new StringValue { Value = "Payment" },
        CustomerID = new StringValue { Value = CustomerABARTENDE },
        PaymentAmount = new DecimalValue { Value = PaymentAmount2 }
    });

    //Apply the second payment to the sales order
    order.Payments = new Payments[]
    {
        new Payments()
        {
            ReferenceNbr = payment2.ReferenceNbr,
            AppliedToOrder = new DecimalValue {Value = PaymentAmount2}
        }
    };

    //Create a shipment for the not-yet-shipped items of the sales order
    //(The Invoke method updates the sales order first
    //and then creates shipments.)
    invokeResult = soapClient.Invoke(
        order, 
        new SalesOrderCreateShipment
        {
            WarehouseID = new StringValue { Value = WarehouseWHOLESALE }
        }
    );
    //Monitor the status of the operation
    processResult = GetProcessResult(soapClient, invokeResult);

    //Obtain the sales order with the created shipment or shipments
    order = (SalesOrder)soapClient.Get(new SalesOrder
    {
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        ID = processResult.EntityId,
        OrderType = new StringReturn(),
        OrderNbr = new StringReturn(),
        Status = new StringReturn(),
        Shipments = new SalesOrderShipment[]
        {
            new SalesOrderShipment { ReturnBehavior = ReturnBehavior.All }
        }
    });

    //Confirm each shipment and create an invoice from it
    List<Shipment> invoicedShipments = new List<Shipment>();
    foreach (SalesOrderShipment salesOrderShipment in order.Shipments)
    {
        //Confirm each shipment
        if (salesOrderShipment.ShipmentType.Value == "Shipment")
        {
            Shipment shipment = (Shipment)soapClient.Get(new Shipment
            {
                ReturnBehavior = ReturnBehavior.OnlySpecified,
                ShipmentNbr = new StringSearch
                {
                    Value = salesOrderShipment.ShipmentNbr.Value
                },
                Status = new StringReturn()
            });
            if (shipment.Status.Value != "Confirmed")
            {
                invokeResult =
                    soapClient.Invoke(shipment, new ConfirmShipment());
                processResult = GetProcessResult(soapClient, invokeResult);
            }
        }
        //Create an invoice for each shipment
        if (salesOrderShipment.ShipmentType.Value == "Shipment" && 
            salesOrderShipment.InvoiceNbr.Value == null)
        {
            Shipment shipment = (Shipment)soapClient.Get(new Shipment
            {
                ReturnBehavior = ReturnBehavior.OnlySpecified,
                ShipmentNbr = new StringSearch
                {
                    Value = salesOrderShipment.ShipmentNbr.Value
                },
                Status = new StringReturn()
            });

            invokeResult = soapClient.Invoke(shipment, new PrepareInvoice());
            processResult = GetProcessResult(soapClient, invokeResult);

            invoicedShipments.Add((Shipment)soapClient.Get(new Shipment
            {
                ReturnBehavior = ReturnBehavior.OnlySpecified,
                ID = processResult.EntityId,
                ShipmentNbr = new StringReturn()
            }));
        }
    }

    //Obtain the sales order with the updated shipment or shipments
    order = (SalesOrder)soapClient.Get(order);

    //Release the invoices for each shipment
    foreach (SalesOrderShipment salesOrderShipment in order.Shipments)
    {
        if (invoicedShipments.FindIndex(x => 
            x.ShipmentNbr.Value == salesOrderShipment.ShipmentNbr.Value) > -1)
        {
            SalesInvoice invoice2 = (SalesInvoice)soapClient.Get(
                new SalesInvoice()
                {
                    Type = new StringSearch 
                    { 
                        Value = salesOrderShipment.InvoiceType.Value 
                    },
                    ReferenceNbr = new StringSearch 
                    { 
                        Value = salesOrderShipment.InvoiceNbr.Value 
                    }
                }
            );

            //Release the invoice
            invokeResult =
                soapClient.Invoke(invoice2, new ReleaseSalesInvoice());
            //Monitor the status of the release operation
            processResult = GetProcessResult(soapClient, invokeResult);
        }
    }
}

//Long-running operation helper
public static ProcessResult GetProcessResult(
    DefaultSoapClient soapClient, InvokeResult invokeResult)
{
    while (true)
    {
        var processResult = soapClient.GetProcessStatus(invokeResult);
        switch (processResult.Status)
        {
            case ProcessStatus.Aborted:
                throw new SystemException("Process status: " + 
                processResult.Status + "; Error: " + processResult.Message);
            case ProcessStatus.NotExists:
            case ProcessStatus.Completed:
                //Go to normal processing
                return processResult;
            case ProcessStatus.InProcess:
                //Insert the needed waiting time here
                if (processResult.Seconds > 30)
                    throw new TimeoutException();
                continue;
            default:
                throw new InvalidOperationException();
        }
    }
} ]]></column>
		</row>
		<row PageID="002b4167-d9a9-4bf5-bb66-1cc5f614e8d4" Language="en-US" PageRevisionID="1" ApprovalByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" ApprovalDateTime="1970-01-23 00:00:00" CreatedByID="b5344897-037e-4d58-b5c3-1bdfd0f47bf9" CreatedDateTime="1970-01-23 00:00:00" UID="7ec0f599-c0ad-32cd-f138-d85cdf40fd00" RecordSourceID="22377">
			<column name="Content"><![CDATA[
A point-of-sale (POS) system can create and process credit memos that contain both lines that have been linked to a sales order of the ''RM'' type (a generic authorized return) and lines that have not been linked to any sales order. The POS system creates a sales order of the ''RM'' type, creates a credit memo, adds to the credit memo the lines from the sales order and other lines, and releases the credit memo. 
==User Scenario==
In the online shop, a customer creates a sales order to buy a computer mouse and to return a computer that the customer previously bought in the store; the customer then decides to perform these operations in the store. After that, the customer decides to also return the patch cord (also bought in the store) and goes to the store. In the POS system, one invoice is created for the whole operation. The customer is given the difference between the return and sale.
==Code Example==
You can use the code below to create a credit memo with some lines linked to a sales order and other lines not linked to any sales order.[anchor|#_1d24f0f7-c4e4-4ca1-99f4-932e182c969a]{br}

To test this code example, configure your client application and an Acumatica ERP instance as follows:[anchor|#_d699d2e3-a1ab-4a0c-b559-96481ed61b1c]
*Deploy a new Acumatica ERP instance with the ''SalesDemo'' dataset inserted. For details on deploying an instance, see [HelpRoot_Install\Installing_ERP_Instance|To Deploy an Acumatica ERP Instance] in the Installation Guide.
*On the [HelpRoot_FormReference\CS_10_00_00|Enable/Disable Features] ([~/?ScreenId=CS100000|CS100000]) form, enable the ''Advanced SO Invoices'' feature.
*In the client application, add a service reference to the ''POS/17.200.01'' endpoint, which is an extension of the ''Default/17.200.001'' endpoint. For details on how to add a service reference, see [HelpRoot_Dev_Integration\IS__how_CB_Configure_Application|To Configure the Client Application] in this guide.
*To sign in to the instance in the client application, use the company name (which you specified when you created the instance) and the ''HQ'' branch.
<source lang="csharp">using System;
using System.Linq;
using System.IO;
using System.Threading;
using System.Collections.Generic;
//Add the namespace of the service reference here

public static void EnterCreditMemoWithSalesOrder(DefaultSoapClient soapClient)
{
    //Input data
    //The customer
    const string CustomerABARTENDE = "ABARTENDE";
    //The sold stock item from a new sales order
    const string InventoryAACOMPUT01 = "AACOMPUT01";
    //The returned stock item from the sales order
    const string InventoryAALEGO500 = "AALEGO500";
    //The returned stock item
    const string InventoryCONAIRT1 = "CONAIRT1";
    //The warehouse related to InventoryCONAIRT1
    const string WarehouseWHOLESALE = "WHOLESALE";
    //The location related to InventoryCONAIRT1
    const string LocationR1S1 = "R1S1";

    //Create a sales order of the RM type
    SalesOrder order = (SalesOrder)soapClient.Put(new SalesOrder
    {
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        OrderType = new StringValue { Value = "RM" },
        CustomerID = new StringValue { Value = CustomerABARTENDE },
        Details = new SalesOrderDetail[]
        {
            new SalesOrderDetail
            {
                ReturnBehavior = ReturnBehavior.All,
                InventoryID = new StringValue {Value = InventoryAACOMPUT01},
                OrderQty = new DecimalValue { Value =  3m},
                Operation = new StringValue { Value = "Issue"},
                UnitPrice = new DecimalValue { Value = 100m}
            },
            new SalesOrderDetail
            {
                ReturnBehavior = ReturnBehavior.All,
                InventoryID = new StringValue {Value = InventoryAALEGO500},
                OrderQty = new DecimalValue { Value =  3m},
                Operation = new StringValue { Value = "Receipt"},
                UnitPrice = new DecimalValue { Value = 50m}
            }
        },
        OrderNbr = new StringReturn()
    });

    //Create a credit memo
    SalesInvoice invoice = (SalesInvoice)soapClient.Put(new SalesInvoice
    {
        ReturnBehavior = ReturnBehavior.OnlySystem,
        Type = new StringValue { Value = "Credit Memo" },
        CustomerID = new StringValue { Value = CustomerABARTENDE },
        Details = new SalesInvoiceDetail[]
        {
            //a sold stock item from the sales order
            new SalesInvoiceDetail()
            {
                InventoryID = new StringValue {Value = InventoryAACOMPUT01},
                OrderType = new StringValue {Value = "RM"},
                OrderNbr = new StringValue {Value = order.OrderNbr.Value},
                OrderLineNbr = order.Details[0].LineNbr,
                Qty = new DecimalValue {Value = -3}
            },
            //a returned stock item from the sales order
            new SalesInvoiceDetail()
            {
                InventoryID = new StringValue {Value = InventoryAALEGO500},
                OrderType = new StringValue {Value = "RM"},
                OrderNbr = new StringValue {Value = order.OrderNbr.Value},
                OrderLineNbr = order.Details[1].LineNbr,
                Qty = new DecimalValue {Value = 3},
            },
            //a returned stock item
            new SalesInvoiceDetail()
            {
                InventoryID = new StringValue {Value = InventoryCONAIRT1},
                WarehouseID = new StringValue {Value = WarehouseWHOLESALE},
                Location = new StringValue {Value = LocationR1S1},
                Qty = new DecimalValue {Value = 3},
                UnitPrice = new DecimalValue { Value = 200m}
            }
        },
    });

    //Release the credit memo
    InvokeResult invokeResult =
        soapClient.Invoke(
            new SalesInvoice { ID = invoice.ID}, 
            new ReleaseSalesInvoice()
        );
    //Monitor the status of the release operation.
    //(The GetProcessResult function is defined below.)
    ProcessResult processResult = GetProcessResult(soapClient, invokeResult);

    //Obtain the released invoice with the needed information
    invoice = (SalesInvoice)soapClient.Get(new SalesInvoice
    {
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        ID = processResult.EntityId,
        Type = new StringReturn(),
        ReferenceNbr = new StringReturn(),
        Status = new StringReturn(),
        Amount = new DecimalReturn(),
        Details = new SalesInvoiceDetail[]
        {
            new SalesInvoiceDetail
            {
                ReturnBehavior = ReturnBehavior.All
            }
        }
    });
}

//Long-running operation helper
public static ProcessResult GetProcessResult(
    DefaultSoapClient soapClient, InvokeResult invokeResult)
{
    while (true)
    {
        var processResult = soapClient.GetProcessStatus(invokeResult);
        switch (processResult.Status)
        {
            case ProcessStatus.Aborted:
                throw new SystemException("Process status: " + 
                processResult.Status + "; Error: " + processResult.Message);
            case ProcessStatus.NotExists:
            case ProcessStatus.Completed:
                //Go to normal processing
                return processResult;
            case ProcessStatus.InProcess:
                //Insert the needed waiting time here
                if (processResult.Seconds &gt; 30)
                    throw new TimeoutException();
                continue;
            default:
                throw new InvalidOperationException();
        }
    }
}</source>]]></column>
			<column name="PlainText"><![CDATA[Entry of a Credit Memo for an Unshipped Sales Order A point-of-sale (POS) system can create and process credit memos that contain both lines that                 have been linked to a sales order of the  RM  type (a generic authorized                 return) and lines that have not been linked to any sales order. The POS system                 creates a sales order of the  RM  type, creates a credit memo, adds to the                 credit memo the lines from the sales order and other lines, and releases the credit                 memo.  User Scenario In the online shop, a customer creates a sales order to buy a computer mouse and to return a                 computer that the customer previously bought in the store; the customer then decides                 to perform these operations in the store. After that, the customer decides to also                 return the patch cord (also bought in the store) and goes to the store. In the POS                 system, one invoice is created for the whole operation. The customer is given the                 difference between the return and sale. Code Example You can use the code below to create a credit memo with some lines linked to a sales order and                 other lines not linked to any sales order. To test this code example, configure your client             application and an  Acumatica ERP             instance as follows: Deploy a new  Acumatica ERP instance with the  SalesDemo  dataset inserted. For details on deploying                     an instance, see  To Deploy an Acumatica ERP Instance in the Installation Guide. On the   ([~/?ScreenId=CS100000|CS100000]) Enable/Disable Features                     (CS100000) form, enable the  Advanced SO Invoices  feature. In the client application, add a service reference to the  POS/17.200.01                      endpoint, which is an extension of the  Default/17.200.001  endpoint. For                     details on how to add a service reference, see  To Configure the Client Application in this                     guide. To sign in to the instance in the client application, use the company name                     (which you specified when you created the instance) and the  HQ                      branch. using System;
using System.Linq;
using System.IO;
using System.Threading;
using System.Collections.Generic;
//Add the namespace of the service reference here

public static void EnterCreditMemoWithSalesOrder(DefaultSoapClient soapClient)
{
    //Input data
    //The customer
    const string CustomerABARTENDE = "ABARTENDE";
    //The sold stock item from a new sales order
    const string InventoryAACOMPUT01 = "AACOMPUT01";
    //The returned stock item from the sales order
    const string InventoryAALEGO500 = "AALEGO500";
    //The returned stock item
    const string InventoryCONAIRT1 = "CONAIRT1";
    //The warehouse related to InventoryCONAIRT1
    const string WarehouseWHOLESALE = "WHOLESALE";
    //The location related to InventoryCONAIRT1
    const string LocationR1S1 = "R1S1";

    //Create a sales order of the RM type
    SalesOrder order = (SalesOrder)soapClient.Put(new SalesOrder
    {
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        OrderType = new StringValue { Value = "RM" },
        CustomerID = new StringValue { Value = CustomerABARTENDE },
        Details = new SalesOrderDetail[]
        {
            new SalesOrderDetail
            {
                ReturnBehavior = ReturnBehavior.All,
                InventoryID = new StringValue {Value = InventoryAACOMPUT01},
                OrderQty = new DecimalValue { Value =  3m},
                Operation = new StringValue { Value = "Issue"},
                UnitPrice = new DecimalValue { Value = 100m}
            },
            new SalesOrderDetail
            {
                ReturnBehavior = ReturnBehavior.All,
                InventoryID = new StringValue {Value = InventoryAALEGO500},
                OrderQty = new DecimalValue { Value =  3m},
                Operation = new StringValue { Value = "Receipt"},
                UnitPrice = new DecimalValue { Value = 50m}
            }
        },
        OrderNbr = new StringReturn()
    });

    //Create a credit memo
    SalesInvoice invoice = (SalesInvoice)soapClient.Put(new SalesInvoice
    {
        ReturnBehavior = ReturnBehavior.OnlySystem,
        Type = new StringValue { Value = "Credit Memo" },
        CustomerID = new StringValue { Value = CustomerABARTENDE },
        Details = new SalesInvoiceDetail[]
        {
            //a sold stock item from the sales order
            new SalesInvoiceDetail()
            {
                InventoryID = new StringValue {Value = InventoryAACOMPUT01},
                OrderType = new StringValue {Value = "RM"},
                OrderNbr = new StringValue {Value = order.OrderNbr.Value},
                OrderLineNbr = order.Details[0].LineNbr,
                Qty = new DecimalValue {Value = -3}
            },
            //a returned stock item from the sales order
            new SalesInvoiceDetail()
            {
                InventoryID = new StringValue {Value = InventoryAALEGO500},
                OrderType = new StringValue {Value = "RM"},
                OrderNbr = new StringValue {Value = order.OrderNbr.Value},
                OrderLineNbr = order.Details[1].LineNbr,
                Qty = new DecimalValue {Value = 3},
            },
            //a returned stock item
            new SalesInvoiceDetail()
            {
                InventoryID = new StringValue {Value = InventoryCONAIRT1},
                WarehouseID = new StringValue {Value = WarehouseWHOLESALE},
                Location = new StringValue {Value = LocationR1S1},
                Qty = new DecimalValue {Value = 3},
                UnitPrice = new DecimalValue { Value = 200m}
            }
        },
    });

    //Release the credit memo
    InvokeResult invokeResult =
        soapClient.Invoke(
            new SalesInvoice { ID = invoice.ID}, 
            new ReleaseSalesInvoice()
        );
    //Monitor the status of the release operation.
    //(The GetProcessResult function is defined below.)
    ProcessResult processResult = GetProcessResult(soapClient, invokeResult);

    //Obtain the released invoice with the needed information
    invoice = (SalesInvoice)soapClient.Get(new SalesInvoice
    {
        ReturnBehavior = ReturnBehavior.OnlySpecified,
        ID = processResult.EntityId,
        Type = new StringReturn(),
        ReferenceNbr = new StringReturn(),
        Status = new StringReturn(),
        Amount = new DecimalReturn(),
        Details = new SalesInvoiceDetail[]
        {
            new SalesInvoiceDetail
            {
                ReturnBehavior = ReturnBehavior.All
            }
        }
    });
}

//Long-running operation helper
public static ProcessResult GetProcessResult(
    DefaultSoapClient soapClient, InvokeResult invokeResult)
{
    while (true)
    {
        var processResult = soapClient.GetProcessStatus(invokeResult);
        switch (processResult.Status)
        {
            case ProcessStatus.Aborted:
                throw new SystemException("Process status: " + 
                processResult.Status + "; Error: " + processResult.Message);
            case ProcessStatus.NotExists:
            case ProcessStatus.Completed:
                //Go to normal processing
                return processResult;
            case ProcessStatus.InProcess:
                //Insert the needed waiting time here
                if (processResult.Seconds > 30)
                    throw new TimeoutException();
                continue;
            default:
                throw new InvalidOperationException();
        }
    }
} ]]></column>
		</row>
	</rows>
</data>