using System;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Lib.ChainOfResponsibilityPattern;
using Lib.Helpers;
using Lib.Models;
using Microsoft.Extensions.Logging;

namespace Lib.Handlers.Serialization
{
    public class SerializationHandler : AbstractRequestHandler, ISerializationHandler
    {
        private readonly ILogger _logger;
        private readonly IXmlHelper _xmlHelper;

        public SerializationHandler(ILogger logger, IXmlHelper xmlHelper)
        {
            _logger = logger;
            _xmlHelper = xmlHelper;
        }

        public override void Handle(Request request)
        {
            var xmlTask = Task.Run(() => XmlSerialize(request));
            var jsonTask = Task.Run(() => JsonSerialize(request));
            Task.WaitAll(xmlTask, jsonTask);
            base.Handle(request);
        }

        public void XmlSerialize(Request request)
        {
            try
            {
                var source = request.ConfigXmlFile;
                var target = BuildXmlFileName(request);
                if (_xmlHelper.TryCopyXmlFile(source, target))
                {
                    LogSerializationTrace(target);
                }
            }
            catch (Exception ex)
            {
                LogSerializationException(ex);
            }
        }

        public void JsonSerialize(Request request)
        {
            try
            {
                var filename = BuildJsonFileName(request);
                var options = new JsonSerializerOptions { WriteIndented = true };
                var contents = JsonSerializer.Serialize(request, options);
                File.WriteAllText(filename, contents);
                LogSerializationTrace(filename);
            }
            catch (Exception ex)
            {
                LogSerializationException(ex);
            }
        }

        private static string BuildXmlFileName(Request request) => BuildFileName(request, "xml");

        private static string BuildJsonFileName(Request request) => BuildFileName(request, "json");

        private static string BuildFileName(Request request, string extension)
        {
            var path = request.SiteDirectoryPath;
            var name = $"{request.SiteVirtualDirectoryName}.{extension}";
            var fullname = $@"{path}\{name}";
            return fullname;
        }

        private void LogSerializationTrace(string filename)
        {
            _logger.LogTrace("File '{file}' was generated by [{name}]", filename, Name);
        }

        private void LogSerializationException(Exception ex)
        {
            _logger.LogError("An error has occurred on [{name}] {ex}", Name, ex);
        }
    }
}